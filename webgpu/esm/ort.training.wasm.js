/*!
 * ONNX Runtime Web v1.18.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// web/node_modules/onnxruntime-common/dist/esm/backend-impl.js
var backends, backendsSortedByPriority, registerBackend, resolveBackend;
var init_backend_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/backend-impl.js"() {
    backends = /* @__PURE__ */ new Map();
    backendsSortedByPriority = [];
    registerBackend = (name, backend, priority) => {
      if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
        const currentBackend = backends.get(name);
        if (currentBackend === void 0) {
          backends.set(name, { backend, priority });
        } else if (currentBackend.priority > priority) {
          return;
        } else if (currentBackend.priority === priority) {
          if (currentBackend.backend !== backend) {
            throw new Error(`cannot register backend "${name}" using priority ${priority}`);
          }
        }
        if (priority >= 0) {
          const i = backendsSortedByPriority.indexOf(name);
          if (i !== -1) {
            backendsSortedByPriority.splice(i, 1);
          }
          for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
            if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
              backendsSortedByPriority.splice(i2, 0, name);
              return;
            }
          }
          backendsSortedByPriority.push(name);
        }
        return;
      }
      throw new TypeError("not a valid backend");
    };
    resolveBackend = async (backendHints) => {
      const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
      const errors = [];
      for (const backendName of backendNames) {
        const backendInfo = backends.get(backendName);
        if (backendInfo) {
          if (backendInfo.initialized) {
            return backendInfo.backend;
          } else if (backendInfo.aborted) {
            continue;
          }
          const isInitializing = !!backendInfo.initPromise;
          try {
            if (!isInitializing) {
              backendInfo.initPromise = backendInfo.backend.init(backendName);
            }
            await backendInfo.initPromise;
            backendInfo.initialized = true;
            return backendInfo.backend;
          } catch (e) {
            if (!isInitializing) {
              errors.push({ name: backendName, err: e });
            }
            backendInfo.aborted = true;
          } finally {
            delete backendInfo.initPromise;
          }
        }
      }
      throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/backend.js
var init_backend = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/backend.js"() {
    init_backend_impl();
  }
});

// web/node_modules/onnxruntime-common/dist/esm/version.js
var version;
var init_version = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/version.js"() {
    version = "1.18.0";
  }
});

// web/node_modules/onnxruntime-common/dist/esm/env-impl.js
var logLevelValue, env;
var init_env_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/env-impl.js"() {
    init_version();
    logLevelValue = "warning";
    env = {
      wasm: {},
      webgl: {},
      webgpu: {},
      versions: { common: version },
      set logLevel(value) {
        if (value === void 0) {
          return;
        }
        if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
          throw new Error(`Unsupported logging level: ${value}`);
        }
        logLevelValue = value;
      },
      get logLevel() {
        return logLevelValue;
      }
    };
    Object.defineProperty(env, "logLevel", { enumerable: true });
  }
});

// web/node_modules/onnxruntime-common/dist/esm/env.js
var env2;
var init_env = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/env.js"() {
    init_env_impl();
    env2 = env;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js
var tensorToDataURL, tensorToImageData;
var init_tensor_conversion_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"() {
    tensorToDataURL = (tensor, options) => {
      const canvas = typeof document !== "undefined" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
      canvas.width = tensor.dims[3];
      canvas.height = tensor.dims[2];
      const pixels2DContext = canvas.getContext("2d");
      if (pixels2DContext != null) {
        let width;
        let height;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
        }
        const inputformat = options?.format !== void 0 ? options.format : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        for (let i = 0; i < height; i++) {
          for (let j = 0; j < width; j++) {
            const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
            pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
            pixels2DContext.fillRect(j, i, 1, 1);
          }
        }
        if ("toDataURL" in canvas) {
          return canvas.toDataURL();
        } else {
          throw new Error("toDataURL is not supported");
        }
      } else {
        throw new Error("Can not access image data");
      }
    };
    tensorToImageData = (tensor, options) => {
      const pixels2DContext = typeof document !== "undefined" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d");
      let image;
      if (pixels2DContext != null) {
        let width;
        let height;
        let channels;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[1];
          channels = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
          channels = tensor.dims[1];
        }
        const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        if (options !== void 0) {
          if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
            throw new Error("Tensor format doesn't match input tensor dims");
          }
        }
        const step = 4;
        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        image = pixels2DContext.createImageData(width, height);
        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
          image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
          image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
          image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
          image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
        }
      } else {
        throw new Error("Can not access image data");
      }
      return image;
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js
var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
var init_tensor_factory_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"() {
    init_tensor_impl();
    bufferToTensor = (buffer, options) => {
      if (buffer === void 0) {
        throw new Error("Image buffer must be defined");
      }
      if (options.height === void 0 || options.width === void 0) {
        throw new Error("Image height and width must be defined");
      }
      if (options.tensorLayout === "NHWC") {
        throw new Error("NHWC Tensor layout is not supported yet");
      }
      const { height, width } = options;
      const norm = options.norm ?? { mean: 255, bias: 0 };
      let normMean;
      let normBias;
      if (typeof norm.mean === "number") {
        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
      } else {
        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
      }
      if (typeof norm.bias === "number") {
        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
      } else {
        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
      }
      const inputformat = options.format !== void 0 ? options.format : "RGBA";
      const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
      const stride = height * width;
      const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
      let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
      let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
      if (inputformat === "RGB") {
        step = 3;
        rImagePointer = 0;
        gImagePointer = 1;
        bImagePointer = 2;
        aImagePointer = -1;
      }
      if (outputformat === "RGBA") {
        aTensorPointer = stride * 3;
      } else if (outputformat === "RBG") {
        rTensorPointer = 0;
        bTensorPointer = stride;
        gTensorPointer = stride * 2;
      } else if (outputformat === "BGR") {
        bTensorPointer = 0;
        gTensorPointer = stride;
        rTensorPointer = stride * 2;
      }
      for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
        if (aTensorPointer !== -1 && aImagePointer !== -1) {
          float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
        }
      }
      const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
      return outputTensor;
    };
    tensorFromImage = async (image, options) => {
      const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
      const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
      const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
      const isString = typeof image === "string";
      let data;
      let bufferToTensorOptions = options ?? {};
      const createCanvas = () => {
        if (typeof document !== "undefined") {
          return document.createElement("canvas");
        } else if (typeof OffscreenCanvas !== "undefined") {
          return new OffscreenCanvas(1, 1);
        } else {
          throw new Error("Canvas is not supported");
        }
      };
      const createCanvasContext = (canvas) => {
        if (canvas instanceof HTMLCanvasElement) {
          return canvas.getContext("2d");
        } else if (canvas instanceof OffscreenCanvas) {
          return canvas.getContext("2d");
        } else {
          return null;
        }
      };
      if (isHTMLImageEle) {
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          let height = image.height;
          let width = image.width;
          if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
            if (options.tensorFormat !== void 0) {
              throw new Error("Image input config format must be RGBA for HTMLImageElement");
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
            }
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          } else {
            bufferToTensorOptions.tensorFormat = "RGBA";
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          }
          pixels2DContext.drawImage(image, 0, 0);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isImageDataEle) {
        let height;
        let width;
        if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
          height = options.resizedHeight;
          width = options.resizedWidth;
        } else {
          height = image.height;
          width = image.width;
        }
        if (options !== void 0) {
          bufferToTensorOptions = options;
        }
        bufferToTensorOptions.format = "RGBA";
        bufferToTensorOptions.height = height;
        bufferToTensorOptions.width = width;
        if (options !== void 0) {
          const tempCanvas = createCanvas();
          tempCanvas.width = width;
          tempCanvas.height = height;
          const pixels2DContext = createCanvasContext(tempCanvas);
          if (pixels2DContext != null) {
            pixels2DContext.putImageData(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else {
          data = image.data;
        }
      } else if (isImageBitmap) {
        if (options === void 0) {
          throw new Error("Please provide image config with format for Imagebitmap");
        }
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          const height = image.height;
          const width = image.width;
          pixels2DContext.drawImage(image, 0, 0, width, height);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isString) {
        return new Promise((resolve, reject) => {
          const canvas = createCanvas();
          const context = createCanvasContext(canvas);
          if (!image || !context) {
            return reject();
          }
          const newImage = new Image();
          newImage.crossOrigin = "Anonymous";
          newImage.src = image;
          newImage.onload = () => {
            canvas.width = newImage.width;
            canvas.height = newImage.height;
            context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
            const img = context.getImageData(0, 0, canvas.width, canvas.height);
            bufferToTensorOptions.height = canvas.height;
            bufferToTensorOptions.width = canvas.width;
            resolve(bufferToTensor(img.data, bufferToTensorOptions));
          };
        });
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
      if (data !== void 0) {
        return bufferToTensor(data, bufferToTensorOptions);
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
    };
    tensorFromTexture = (texture, options) => {
      const { width, height, download, dispose } = options;
      const dims = [1, height, width, 4];
      return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
    };
    tensorFromGpuBuffer = (gpuBuffer, options) => {
      const { dataType, dims, download, dispose } = options;
      return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
    };
    tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js
var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
var init_tensor_impl_type_mapping = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"() {
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
      ["float32", Float32Array],
      ["uint8", Uint8Array],
      ["int8", Int8Array],
      ["uint16", Uint16Array],
      ["float16", Uint16Array],
      ["int16", Int16Array],
      ["int32", Int32Array],
      ["bool", Uint8Array],
      ["float64", Float64Array],
      ["uint32", Uint32Array]
    ]);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
      [Float32Array, "float32"],
      [Uint8Array, "uint8"],
      [Int8Array, "int8"],
      [Uint16Array, "uint16"],
      [Int16Array, "int16"],
      [Int32Array, "int32"],
      [Float64Array, "float64"],
      [Uint32Array, "uint32"]
    ]);
    isBigIntChecked = false;
    checkBigInt = () => {
      if (!isBigIntChecked) {
        isBigIntChecked = true;
        const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
        const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
        if (isBigInt64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
        }
        if (isBigUint64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
        }
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js
var calculateSize, tensorReshape;
var init_tensor_utils_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js"() {
    init_tensor_impl();
    calculateSize = (dims) => {
      let size = 1;
      for (let i = 0; i < dims.length; i++) {
        const dim = dims[i];
        if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
          throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
        }
        if (dim < 0) {
          throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
        }
        size *= dim;
      }
      return size;
    };
    tensorReshape = (tensor, dims) => {
      switch (tensor.location) {
        case "cpu":
          return new Tensor(tensor.type, tensor.data, dims);
        case "cpu-pinned":
          return new Tensor({
            location: "cpu-pinned",
            data: tensor.data,
            type: tensor.type,
            dims
          });
        case "texture":
          return new Tensor({
            location: "texture",
            texture: tensor.texture,
            type: tensor.type,
            dims
          });
        case "gpu-buffer":
          return new Tensor({
            location: "gpu-buffer",
            gpuBuffer: tensor.gpuBuffer,
            type: tensor.type,
            dims
          });
        default:
          throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js
var Tensor;
var init_tensor_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js"() {
    init_tensor_conversion_impl();
    init_tensor_factory_impl();
    init_tensor_impl_type_mapping();
    init_tensor_utils_impl();
    Tensor = class {
      /**
       * implementation.
       */
      constructor(arg0, arg1, arg2) {
        checkBigInt();
        let type;
        let dims;
        if (typeof arg0 === "object" && "location" in arg0) {
          this.dataLocation = arg0.location;
          type = arg0.type;
          dims = arg0.dims;
          switch (arg0.location) {
            case "cpu-pinned": {
              const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
              if (!expectedTypedArrayConstructor) {
                throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
              }
              if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
              }
              this.cpuData = arg0.data;
              break;
            }
            case "texture": {
              if (type !== "float32") {
                throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
              }
              this.gpuTextureData = arg0.texture;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            case "gpu-buffer": {
              if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
              }
              this.gpuBufferData = arg0.gpuBuffer;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            default:
              throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
          }
        } else {
          let data;
          let maybeDims;
          if (typeof arg0 === "string") {
            type = arg0;
            maybeDims = arg2;
            if (arg0 === "string") {
              if (!Array.isArray(arg1)) {
                throw new TypeError("A string tensor's data must be a string array.");
              }
              data = arg1;
            } else {
              const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
              if (typedArrayConstructor === void 0) {
                throw new TypeError(`Unsupported tensor type: ${arg0}.`);
              }
              if (Array.isArray(arg1)) {
                if (arg0 === "float16") {
                  throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                } else if (arg0 === "uint64" || arg0 === "int64") {
                  data = typedArrayConstructor.from(arg1, BigInt);
                } else {
                  data = typedArrayConstructor.from(arg1);
                }
              } else if (arg1 instanceof typedArrayConstructor) {
                data = arg1;
              } else {
                throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
              }
            }
          } else {
            maybeDims = arg1;
            if (Array.isArray(arg0)) {
              if (arg0.length === 0) {
                throw new TypeError("Tensor type cannot be inferred from an empty array.");
              }
              const firstElementType = typeof arg0[0];
              if (firstElementType === "string") {
                type = "string";
                data = arg0;
              } else if (firstElementType === "boolean") {
                type = "bool";
                data = Uint8Array.from(arg0);
              } else {
                throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
              }
            } else {
              const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
              if (mappedType === void 0) {
                throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
              }
              type = mappedType;
              data = arg0;
            }
          }
          if (maybeDims === void 0) {
            maybeDims = [data.length];
          } else if (!Array.isArray(maybeDims)) {
            throw new TypeError("A tensor's dims must be a number array");
          }
          dims = maybeDims;
          this.cpuData = data;
          this.dataLocation = "cpu";
        }
        const size = calculateSize(dims);
        if (this.cpuData && size !== this.cpuData.length) {
          throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
        }
        this.type = type;
        this.dims = dims;
        this.size = size;
      }
      // #endregion
      // #region factory
      static async fromImage(image, options) {
        return tensorFromImage(image, options);
      }
      static fromTexture(texture, options) {
        return tensorFromTexture(texture, options);
      }
      static fromGpuBuffer(gpuBuffer, options) {
        return tensorFromGpuBuffer(gpuBuffer, options);
      }
      static fromPinnedBuffer(type, buffer, dims) {
        return tensorFromPinnedBuffer(type, buffer, dims);
      }
      // #endregion
      // #region conversions
      toDataURL(options) {
        return tensorToDataURL(this, options);
      }
      toImageData(options) {
        return tensorToImageData(this, options);
      }
      // #endregion
      // #region properties
      get data() {
        this.ensureValid();
        if (!this.cpuData) {
          throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
        }
        return this.cpuData;
      }
      get location() {
        return this.dataLocation;
      }
      get texture() {
        this.ensureValid();
        if (!this.gpuTextureData) {
          throw new Error("The data is not stored as a WebGL texture.");
        }
        return this.gpuTextureData;
      }
      get gpuBuffer() {
        this.ensureValid();
        if (!this.gpuBufferData) {
          throw new Error("The data is not stored as a WebGPU buffer.");
        }
        return this.gpuBufferData;
      }
      // #endregion
      // #region methods
      async getData(releaseData) {
        this.ensureValid();
        switch (this.dataLocation) {
          case "cpu":
          case "cpu-pinned":
            return this.data;
          case "texture":
          case "gpu-buffer": {
            if (!this.downloader) {
              throw new Error("The current tensor is not created with a specified data downloader.");
            }
            if (this.isDownloading) {
              throw new Error("The current tensor is being downloaded.");
            }
            try {
              this.isDownloading = true;
              const data = await this.downloader();
              this.downloader = void 0;
              this.dataLocation = "cpu";
              this.cpuData = data;
              if (releaseData && this.disposer) {
                this.disposer();
                this.disposer = void 0;
              }
              return data;
            } finally {
              this.isDownloading = false;
            }
          }
          default:
            throw new Error(`cannot get data from location: ${this.dataLocation}`);
        }
      }
      dispose() {
        if (this.isDownloading) {
          throw new Error("The current tensor is being downloaded.");
        }
        if (this.disposer) {
          this.disposer();
          this.disposer = void 0;
        }
        this.cpuData = void 0;
        this.gpuTextureData = void 0;
        this.gpuBufferData = void 0;
        this.downloader = void 0;
        this.isDownloading = void 0;
        this.dataLocation = "none";
      }
      // #endregion
      // #region tensor utilities
      ensureValid() {
        if (this.dataLocation === "none") {
          throw new Error("The tensor is disposed.");
        }
      }
      reshape(dims) {
        this.ensureValid();
        if (this.downloader || this.disposer) {
          throw new Error("Cannot reshape a tensor that owns GPU resource.");
        }
        return tensorReshape(this, dims);
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor.js
var Tensor2;
var init_tensor = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor.js"() {
    init_tensor_impl();
    Tensor2 = Tensor;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/trace.js
var TRACE, TRACE_FUNC, TRACE_FUNC_BEGIN, TRACE_FUNC_END;
var init_trace = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/trace.js"() {
    init_env_impl();
    TRACE = (deviceType, label) => {
      if (!env.wasm.trace) {
        return;
      }
      console.timeStamp(`${deviceType}::ORT::${label}`);
    };
    TRACE_FUNC = (msg, extraMsg) => {
      const stack = new Error().stack?.split(/\r\n|\r|\n/g) || [];
      let hasTraceFunc = false;
      for (let i = 0; i < stack.length; i++) {
        if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {
          let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;
          if (extraMsg) {
            label += `::${extraMsg}`;
          }
          TRACE("CPU", label);
          return;
        }
        if (stack[i].includes("TRACE_FUNC")) {
          hasTraceFunc = true;
        }
      }
    };
    TRACE_FUNC_BEGIN = (extraMsg) => {
      if (!env.wasm.trace) {
        return;
      }
      TRACE_FUNC("BEGIN", extraMsg);
    };
    TRACE_FUNC_END = (extraMsg) => {
      if (!env.wasm.trace) {
        return;
      }
      TRACE_FUNC("END", extraMsg);
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js
var InferenceSession;
var init_inference_session_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js"() {
    init_backend_impl();
    init_tensor();
    init_trace();
    InferenceSession = class _InferenceSession {
      constructor(handler) {
        this.handler = handler;
      }
      async run(feeds, arg1, arg2) {
        TRACE_FUNC_BEGIN();
        const fetches = {};
        let options = {};
        if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
          throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
        }
        let isFetchesEmpty = true;
        if (typeof arg1 === "object") {
          if (arg1 === null) {
            throw new TypeError("Unexpected argument[1]: cannot be null.");
          }
          if (arg1 instanceof Tensor2) {
            throw new TypeError("'fetches' cannot be a Tensor");
          }
          if (Array.isArray(arg1)) {
            if (arg1.length === 0) {
              throw new TypeError("'fetches' cannot be an empty array.");
            }
            isFetchesEmpty = false;
            for (const name of arg1) {
              if (typeof name !== "string") {
                throw new TypeError("'fetches' must be a string array or an object.");
              }
              if (this.outputNames.indexOf(name) === -1) {
                throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
              }
              fetches[name] = null;
            }
            if (typeof arg2 === "object" && arg2 !== null) {
              options = arg2;
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else {
            let isFetches = false;
            const arg1Keys = Object.getOwnPropertyNames(arg1);
            for (const name of this.outputNames) {
              if (arg1Keys.indexOf(name) !== -1) {
                const v = arg1[name];
                if (v === null || v instanceof Tensor2) {
                  isFetches = true;
                  isFetchesEmpty = false;
                  fetches[name] = v;
                }
              }
            }
            if (isFetches) {
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              options = arg1;
            }
          }
        } else if (typeof arg1 !== "undefined") {
          throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
        }
        for (const name of this.inputNames) {
          if (typeof feeds[name] === "undefined") {
            throw new Error(`input '${name}' is missing in 'feeds'.`);
          }
        }
        if (isFetchesEmpty) {
          for (const name of this.outputNames) {
            fetches[name] = null;
          }
        }
        const results = await this.handler.run(feeds, fetches, options);
        const returnValue = {};
        for (const key in results) {
          if (Object.hasOwnProperty.call(results, key)) {
            const result = results[key];
            if (result instanceof Tensor2) {
              returnValue[key] = result;
            } else {
              returnValue[key] = new Tensor2(result.type, result.data, result.dims);
            }
          }
        }
        TRACE_FUNC_END();
        return returnValue;
      }
      async release() {
        return this.handler.dispose();
      }
      static async create(arg0, arg1, arg2, arg3) {
        TRACE_FUNC_BEGIN();
        let filePathOrUint8Array;
        let options = {};
        if (typeof arg0 === "string") {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof Uint8Array) {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
          const buffer = arg0;
          let byteOffset = 0;
          let byteLength = arg0.byteLength;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 === "number") {
            byteOffset = arg1;
            if (!Number.isSafeInteger(byteOffset)) {
              throw new RangeError("'byteOffset' must be an integer.");
            }
            if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
              throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
            }
            byteLength = arg0.byteLength - byteOffset;
            if (typeof arg2 === "number") {
              byteLength = arg2;
              if (!Number.isSafeInteger(byteLength)) {
                throw new RangeError("'byteLength' must be an integer.");
              }
              if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
              }
              if (typeof arg3 === "object" && arg3 !== null) {
                options = arg3;
              } else if (typeof arg3 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'byteLength' must be a number.");
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
          filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
        } else {
          throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
        }
        const eps = options.executionProviders || [];
        const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
        const backend = await resolveBackend(backendHints);
        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
        TRACE_FUNC_END();
        return new _InferenceSession(handler);
      }
      startProfiling() {
        this.handler.startProfiling();
      }
      endProfiling() {
        this.handler.endProfiling();
      }
      get inputNames() {
        return this.handler.inputNames;
      }
      get outputNames() {
        return this.handler.outputNames;
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/inference-session.js
var InferenceSession2;
var init_inference_session = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/inference-session.js"() {
    init_inference_session_impl();
    InferenceSession2 = InferenceSession;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/onnx-value.js
var init_onnx_value = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/onnx-value.js"() {
  }
});

// web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js
var noBackendErrMsg, TrainingSession;
var init_training_session_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js"() {
    init_backend_impl();
    init_tensor();
    noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
    TrainingSession = class _TrainingSession {
      constructor(handler, hasOptimizerModel, hasEvalModel) {
        this.handler = handler;
        this.hasOptimizerModel = hasOptimizerModel;
        this.hasEvalModel = hasEvalModel;
      }
      get trainingInputNames() {
        return this.handler.inputNames;
      }
      get trainingOutputNames() {
        return this.handler.outputNames;
      }
      get evalInputNames() {
        if (this.hasEvalModel) {
          return this.handler.evalInputNames;
        } else {
          throw new Error("This training session has no evalModel loaded.");
        }
      }
      get evalOutputNames() {
        if (this.hasEvalModel) {
          return this.handler.evalOutputNames;
        } else {
          throw new Error("This training session has no evalModel loaded.");
        }
      }
      static async create(trainingOptions, sessionOptions) {
        const evalModel = trainingOptions.evalModel || "";
        const optimizerModel = trainingOptions.optimizerModel || "";
        const options = sessionOptions || {};
        const eps = options.executionProviders || [];
        const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
        const backend = await resolveBackend(backendHints);
        if (backend.createTrainingSessionHandler) {
          const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, options);
          return new _TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);
        } else {
          throw new Error(noBackendErrMsg);
        }
      }
      /**
       * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
       * the given parameters to SessionHandler.FetchesType and RunOptions.
       *
       * @param inputNames the feeds object is checked that they contain all input names in the provided list of input
       * names.
       * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output
       * names.
       * @param feeds the required input
       * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
       * @param arg2 optional RunOptions object.
       * @returns
       */
      typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {
        const fetches = {};
        let options = {};
        if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
          throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
        }
        let isFetchesEmpty = true;
        if (typeof arg1 === "object") {
          if (arg1 === null) {
            throw new TypeError("Unexpected argument[1]: cannot be null.");
          }
          if (arg1 instanceof Tensor2) {
            throw new TypeError("'fetches' cannot be a Tensor");
          }
          if (Array.isArray(arg1)) {
            if (arg1.length === 0) {
              throw new TypeError("'fetches' cannot be an empty array.");
            }
            isFetchesEmpty = false;
            for (const name of arg1) {
              if (typeof name !== "string") {
                throw new TypeError("'fetches' must be a string array or an object.");
              }
              if (outputNames.indexOf(name) === -1) {
                throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
              }
              fetches[name] = null;
            }
            if (typeof arg2 === "object" && arg2 !== null) {
              options = arg2;
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else {
            let isFetches = false;
            const arg1Keys = Object.getOwnPropertyNames(arg1);
            for (const name of outputNames) {
              if (arg1Keys.indexOf(name) !== -1) {
                const v = arg1[name];
                if (v === null || v instanceof Tensor2) {
                  isFetches = true;
                  isFetchesEmpty = false;
                  fetches[name] = v;
                }
              }
            }
            if (isFetches) {
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              options = arg1;
            }
          }
        } else if (typeof arg1 !== "undefined") {
          throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
        }
        for (const name of inputNames) {
          if (typeof feeds[name] === "undefined") {
            throw new Error(`input '${name}' is missing in 'feeds'.`);
          }
        }
        if (isFetchesEmpty) {
          for (const name of outputNames) {
            fetches[name] = null;
          }
        }
        return [fetches, options];
      }
      /**
       * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
       * and changes it into a map of Tensors.
       *
       * @param results
       * @returns
       */
      convertHandlerReturnTypeToMapOfTensors(results) {
        const returnValue = {};
        for (const key in results) {
          if (Object.hasOwnProperty.call(results, key)) {
            const result = results[key];
            if (result instanceof Tensor2) {
              returnValue[key] = result;
            } else {
              returnValue[key] = new Tensor2(result.type, result.data, result.dims);
            }
          }
        }
        return returnValue;
      }
      async lazyResetGrad() {
        await this.handler.lazyResetGrad();
      }
      async runTrainStep(feeds, arg1, arg2) {
        const [fetches, options] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);
        const results = await this.handler.runTrainStep(feeds, fetches, options);
        return this.convertHandlerReturnTypeToMapOfTensors(results);
      }
      async runOptimizerStep(options) {
        if (this.hasOptimizerModel) {
          await this.handler.runOptimizerStep(options || {});
        } else {
          throw new Error("This TrainingSession has no OptimizerModel loaded.");
        }
      }
      async runEvalStep(feeds, arg1, arg2) {
        if (this.hasEvalModel) {
          const [fetches, options] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);
          const results = await this.handler.runEvalStep(feeds, fetches, options);
          return this.convertHandlerReturnTypeToMapOfTensors(results);
        } else {
          throw new Error("This TrainingSession has no EvalModel loaded.");
        }
      }
      async getParametersSize(trainableOnly = true) {
        return this.handler.getParametersSize(trainableOnly);
      }
      async loadParametersBuffer(array, trainableOnly = true) {
        const paramsSize = await this.getParametersSize(trainableOnly);
        if (array.length !== 4 * paramsSize) {
          throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
        }
        return this.handler.loadParametersBuffer(array, trainableOnly);
      }
      async getContiguousParameters(trainableOnly = true) {
        return this.handler.getContiguousParameters(trainableOnly);
      }
      async release() {
        return this.handler.dispose();
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/training-session.js
var TrainingSession2;
var init_training_session = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/training-session.js"() {
    init_training_session_impl();
    TrainingSession2 = TrainingSession;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  InferenceSession: () => InferenceSession2,
  TRACE: () => TRACE,
  TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
  TRACE_FUNC_END: () => TRACE_FUNC_END,
  Tensor: () => Tensor2,
  TrainingSession: () => TrainingSession2,
  env: () => env2,
  registerBackend: () => registerBackend
});
var init_esm = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/index.js"() {
    init_backend();
    init_env();
    init_inference_session();
    init_tensor();
    init_trace();
    init_onnx_value();
    init_training_session();
  }
});

// nodejs-ignore:node:os
var cpus;
var init_node_os = __esm({
  "nodejs-ignore:node:os"() {
    cpus = void 0;
  }
});

// nodejs-ignore:node:path
var join;
var init_node_path = __esm({
  "nodejs-ignore:node:path"() {
    join = void 0;
  }
});

// nodejs-ignore:fs
var fs_exports = {};
__export(fs_exports, {
  createReadStream: () => createReadStream,
  readFile: () => readFile,
  readFileSync: () => readFileSync
});
var readFile, readFileSync, createReadStream;
var init_fs = __esm({
  "nodejs-ignore:fs"() {
    readFile = void 0;
    readFileSync = void 0;
    createReadStream = void 0;
  }
});

// nodejs-ignore:path
var path_exports = {};
__export(path_exports, {
  join: () => join2
});
var join2;
var init_path = __esm({
  "nodejs-ignore:path"() {
    join2 = void 0;
  }
});

// web/lib/wasm/binding/ort-training-wasm-simd.js
var require_ort_training_wasm_simd = __commonJS({
  "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {
    "use strict";
    var ortWasm = (() => {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined")
        _scriptDir = _scriptDir || __filename;
      return function(moduleArg = {}) {
        var e = moduleArg, k, l;
        e.ready = new Promise((a, b) => {
          k = a;
          l = b;
        });
        var aa = Object.assign({}, e), ba = "./this.program", ca = "object" == typeof window, q = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, v = "", x, z, A;
        if (da) {
          var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));
          v = q ? B.dirname(v) + "/" : __dirname + "/";
          x = (a, b) => {
            a = C(a) ? new URL(a) : B.normalize(a);
            return fs.readFileSync(a, b ? void 0 : "utf8");
          };
          A = (a) => {
            a = x(a, true);
            a.buffer || (a = new Uint8Array(a));
            return a;
          };
          z = (a, b, c, d = true) => {
            a = C(a) ? new URL(a) : B.normalize(a);
            fs.readFile(a, d ? void 0 : "utf8", (g, h) => {
              g ? c(g) : b(d ? h.buffer : h);
            });
          };
          !e.thisProgram && 1 < process.argv.length && (ba = process.argv[1].replace(/\\/g, "/"));
          process.argv.slice(2);
          e.inspect = () => "[Emscripten Module object]";
        } else if (ca || q)
          q ? v = self.location.href : "undefined" != typeof document && document.currentScript && (v = document.currentScript.src), _scriptDir && (v = _scriptDir), 0 !== v.indexOf("blob:") ? v = v.substr(0, v.replace(/[?#].*/, "").lastIndexOf("/") + 1) : v = "", x = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.send(null);
            return b.responseText;
          }, q && (A = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), z = (a, b, c) => {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.responseType = "arraybuffer";
            d.onload = () => {
              200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
            };
            d.onerror = c;
            d.send(null);
          };
        var ea = console.log.bind(console), D = console.error.bind(console);
        Object.assign(e, aa);
        aa = null;
        "object" != typeof WebAssembly && E("no native wasm support detected");
        var F, fa = false, G, H, I, J, ha;
        function ia() {
          var a = F.buffer;
          e.HEAP8 = G = new Int8Array(a);
          e.HEAP16 = new Int16Array(a);
          e.HEAPU8 = H = new Uint8Array(a);
          e.HEAPU16 = new Uint16Array(a);
          e.HEAP32 = I = new Int32Array(a);
          e.HEAPU32 = J = new Uint32Array(a);
          e.HEAPF32 = new Float32Array(a);
          e.HEAPF64 = ha = new Float64Array(a);
        }
        var K = [], L = [], ja = [], M = 0, N = null, O = null;
        function E(a) {
          a = "Aborted(" + a + ")";
          D(a);
          fa = true;
          a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
          l(a);
          throw a;
        }
        var ka = (a) => a.startsWith("data:application/octet-stream;base64,"), C = (a) => a.startsWith("file://"), P;
        P = "ort-training-wasm-simd.wasm";
        if (!ka(P)) {
          var la = P;
          P = e.locateFile ? e.locateFile(la, v) : v + la;
        }
        function ma(a) {
          if (A)
            return A(a);
          throw "both async and sync fetching of the wasm failed";
        }
        function na(a) {
          if (ca || q) {
            if ("function" == typeof fetch && !C(a))
              return fetch(a, { credentials: "same-origin" }).then((b) => {
                if (!b.ok)
                  throw "failed to load wasm binary file at '" + a + "'";
                return b.arrayBuffer();
              }).catch(() => ma(a));
            if (z)
              return new Promise((b, c) => {
                z(a, (d) => b(new Uint8Array(d)), c);
              });
          }
          return Promise.resolve().then(() => ma(a));
        }
        function oa(a, b, c) {
          return na(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
            D(`failed to asynchronously prepare wasm: ${d}`);
            E(d);
          });
        }
        function pa(a, b) {
          var c = P;
          return "function" != typeof WebAssembly.instantiateStreaming || ka(c) || C(c) || da || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {
            D(`wasm streaming compile failed: ${g}`);
            D("falling back to ArrayBuffer instantiation");
            return oa(c, a, b);
          }));
        }
        var Q, qa = { 989280: (a, b, c, d) => {
          if ("undefined" == typeof e || !e.Qa)
            return 1;
          a = R(a >>> 0);
          a.startsWith("./") && (a = a.substring(2));
          a = e.Qa.get(a);
          if (!a)
            return 2;
          b >>>= 0;
          c >>>= 0;
          if (b + c > a.byteLength)
            return 3;
          try {
            return H.set(a.subarray(b, b + c), d >>> 0 >>> 0), 0;
          } catch {
            return 4;
          }
        } };
        function ra(a) {
          this.Ka = a - 24;
          this.Pa = function(b) {
            J[this.Ka + 4 >>> 2 >>> 0] = b;
          };
          this.Oa = function(b) {
            J[this.Ka + 8 >>> 2 >>> 0] = b;
          };
          this.Ma = function(b, c) {
            this.Na();
            this.Pa(b);
            this.Oa(c);
          };
          this.Na = function() {
            J[this.Ka + 16 >>> 2 >>> 0] = 0;
          };
        }
        var sa = 0, ta = 0, ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, va = (a, b, c) => {
          b >>>= 0;
          var d = b + c;
          for (c = b; a[c] && !(c >= d); )
            ++c;
          if (16 < c - b && a.buffer && ua)
            return ua.decode(a.subarray(b, c));
          for (d = ""; b < c; ) {
            var g = a[b++];
            if (g & 128) {
              var h = a[b++] & 63;
              if (192 == (g & 224))
                d += String.fromCharCode((g & 31) << 6 | h);
              else {
                var m = a[b++] & 63;
                g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;
                65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
              }
            } else
              d += String.fromCharCode(g);
          }
          return d;
        }, R = (a, b) => (a >>>= 0) ? va(H, a, b) : "", S = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
          }
          return b;
        }, T = (a, b, c, d) => {
          c >>>= 0;
          if (!(0 < d))
            return 0;
          var g = c;
          d = c + d - 1;
          for (var h = 0; h < a.length; ++h) {
            var m = a.charCodeAt(h);
            if (55296 <= m && 57343 >= m) {
              var r = a.charCodeAt(++h);
              m = 65536 + ((m & 1023) << 10) | r & 1023;
            }
            if (127 >= m) {
              if (c >= d)
                break;
              b[c++ >>> 0] = m;
            } else {
              if (2047 >= m) {
                if (c + 1 >= d)
                  break;
                b[c++ >>> 0] = 192 | m >> 6;
              } else {
                if (65535 >= m) {
                  if (c + 2 >= d)
                    break;
                  b[c++ >>> 0] = 224 | m >> 12;
                } else {
                  if (c + 3 >= d)
                    break;
                  b[c++ >>> 0] = 240 | m >> 18;
                  b[c++ >>> 0] = 128 | m >> 12 & 63;
                }
                b[c++ >>> 0] = 128 | m >> 6 & 63;
              }
              b[c++ >>> 0] = 128 | m & 63;
            }
          }
          b[c >>> 0] = 0;
          return c - g;
        }, U = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ca = (a) => {
          var b = S(a) + 1, c = Ba(b);
          c && T(a, H, c, b);
          return c;
        }, V = [], W = {}, Da = () => {
          if (!X) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(
              "-",
              "_"
            ) + ".UTF-8", _: ba || "./this.program" }, b;
            for (b in W)
              void 0 === W[b] ? delete a[b] : a[b] = W[b];
            var c = [];
            for (b in a)
              c.push(`${b}=${a[b]}`);
            X = c;
          }
          return X;
        }, X, Ea = [null, [], []], Fa = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ga = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function Ha(a) {
          var b = Array(S(a) + 1);
          T(a, b, 0, b.length);
          return b;
        }
        function Ia(a, b, c, d) {
          function g(f, n, p) {
            for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )
              f = p[0] + f;
            return f;
          }
          function h(f, n) {
            return g(f, n, "0");
          }
          function m(f, n) {
            function p(ya) {
              return 0 > ya ? -1 : 0 < ya ? 1 : 0;
            }
            var y;
            0 === (y = p(f.getFullYear() - n.getFullYear())) && 0 === (y = p(f.getMonth() - n.getMonth())) && (y = p(f.getDate() - n.getDate()));
            return y;
          }
          function r(f) {
            switch (f.getDay()) {
              case 0:
                return new Date(f.getFullYear() - 1, 11, 29);
              case 1:
                return f;
              case 2:
                return new Date(f.getFullYear(), 0, 3);
              case 3:
                return new Date(
                  f.getFullYear(),
                  0,
                  2
                );
              case 4:
                return new Date(f.getFullYear(), 0, 1);
              case 5:
                return new Date(f.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(f.getFullYear() - 1, 11, 30);
            }
          }
          function w(f) {
            var n = f.Ga;
            for (f = new Date(new Date(f.Ha + 1900, 0, 1).getTime()); 0 < n; ) {
              var p = f.getMonth(), y = (U(f.getFullYear()) ? Fa : Ga)[p];
              if (n > y - f.getDate())
                n -= y - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
              else {
                f.setDate(f.getDate() + n);
                break;
              }
            }
            p = new Date(f.getFullYear() + 1, 0, 4);
            n = r(new Date(
              f.getFullYear(),
              0,
              4
            ));
            p = r(p);
            return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
          }
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          var t = J[d + 40 >>> 2 >>> 0];
          d = { Ta: I[d >>> 2 >>> 0], Sa: I[d + 4 >>> 2 >>> 0], Ia: I[d + 8 >>> 2 >>> 0], La: I[d + 12 >>> 2 >>> 0], Ja: I[d + 16 >>> 2 >>> 0], Ha: I[d + 20 >>> 2 >>> 0], Ba: I[d + 24 >>> 2 >>> 0], Ga: I[d + 28 >>> 2 >>> 0], Va: I[d + 32 >>> 2 >>> 0], Ra: I[d + 36 >>> 2 >>> 0], Ua: t ? R(t) : "" };
          c = R(c);
          t = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y"
          };
          for (var u in t)
            c = c.replace(new RegExp(u, "g"), t[u]);
          var za = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Aa = "January February March April May June July August September October November December".split(" ");
          t = {
            "%a": (f) => za[f.Ba].substring(0, 3),
            "%A": (f) => za[f.Ba],
            "%b": (f) => Aa[f.Ja].substring(0, 3),
            "%B": (f) => Aa[f.Ja],
            "%C": (f) => h((f.Ha + 1900) / 100 | 0, 2),
            "%d": (f) => h(f.La, 2),
            "%e": (f) => g(f.La, 2, " "),
            "%g": (f) => w(f).toString().substring(2),
            "%G": (f) => w(f),
            "%H": (f) => h(f.Ia, 2),
            "%I": (f) => {
              f = f.Ia;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return h(f, 2);
            },
            "%j": (f) => {
              for (var n = 0, p = 0; p <= f.Ja - 1; n += (U(f.Ha + 1900) ? Fa : Ga)[p++])
                ;
              return h(f.La + n, 3);
            },
            "%m": (f) => h(f.Ja + 1, 2),
            "%M": (f) => h(f.Sa, 2),
            "%n": () => "\n",
            "%p": (f) => 0 <= f.Ia && 12 > f.Ia ? "AM" : "PM",
            "%S": (f) => h(f.Ta, 2),
            "%t": () => "	",
            "%u": (f) => f.Ba || 7,
            "%U": (f) => h(
              Math.floor((f.Ga + 7 - f.Ba) / 7),
              2
            ),
            "%V": (f) => {
              var n = Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7);
              2 >= (f.Ba + 371 - f.Ga - 2) % 7 && n++;
              if (n)
                53 == n && (p = (f.Ba + 371 - f.Ga) % 7, 4 == p || 3 == p && U(f.Ha) || (n = 1));
              else {
                n = 52;
                var p = (f.Ba + 7 - f.Ga - 1) % 7;
                (4 == p || 5 == p && U(f.Ha % 400 - 1)) && n++;
              }
              return h(n, 2);
            },
            "%w": (f) => f.Ba,
            "%W": (f) => h(Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7), 2),
            "%y": (f) => (f.Ha + 1900).toString().substring(2),
            "%Y": (f) => f.Ha + 1900,
            "%z": (f) => {
              f = f.Ra;
              var n = 0 <= f;
              f = Math.abs(f) / 60;
              return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            },
            "%Z": (f) => f.Ua,
            "%%": () => "%"
          };
          c = c.replace(/%%/g, "\0\0");
          for (u in t)
            c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](d)));
          c = c.replace(/\0\0/g, "%");
          u = Ha(c);
          if (u.length > b)
            return 0;
          G.set(u, a >>> 0);
          return u.length - 1;
        }
        var La = { a: function(a, b, c) {
          a >>>= 0;
          new ra(a).Ma(b >>> 0, c >>> 0);
          sa = a;
          ta++;
          throw sa;
        }, e: function() {
          return 0;
        }, H: function() {
        }, x: function() {
        }, z: function() {
        }, J: function() {
          return 0;
        }, F: function() {
        }, A: function() {
        }, E: function() {
        }, g: function() {
        }, y: function() {
        }, v: function() {
        }, G: function() {
        }, w: function() {
        }, k: () => 1, n: function(a, b, c) {
          a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
          c >>>= 0;
          a = new Date(1e3 * a);
          I[c >>> 2 >>> 0] = a.getUTCSeconds();
          I[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();
          I[c + 8 >>> 2 >>> 0] = a.getUTCHours();
          I[c + 12 >>> 2 >>> 0] = a.getUTCDate();
          I[c + 16 >>> 2 >>> 0] = a.getUTCMonth();
          I[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
          I[c + 24 >>> 2 >>> 0] = a.getUTCDay();
          I[c + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
        }, o: function(a, b, c) {
          a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
          c >>>= 0;
          a = new Date(1e3 * a);
          I[c >>> 2 >>> 0] = a.getSeconds();
          I[c + 4 >>> 2 >>> 0] = a.getMinutes();
          I[c + 8 >>> 2 >>> 0] = a.getHours();
          I[c + 12 >>> 2 >>> 0] = a.getDate();
          I[c + 16 >>> 2 >>> 0] = a.getMonth();
          I[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
          I[c + 24 >>> 2 >>> 0] = a.getDay();
          I[c + 28 >>> 2 >>> 0] = (U(a.getFullYear()) ? wa : xa)[a.getMonth()] + a.getDate() - 1 | 0;
          I[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
          b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
          var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
          I[c + 32 >>> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;
        }, p: function(a) {
          a >>>= 0;
          var b = new Date(I[a + 20 >>> 2 >>> 0] + 1900, I[a + 16 >>> 2 >>> 0], I[a + 12 >>> 2 >>> 0], I[a + 8 >>> 2 >>> 0], I[a + 4 >>> 2 >>> 0], I[a >>> 2 >>> 0], 0), c = I[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);
          0 > c ? I[a + 32 >>> 2 >>> 0] = Number(g != h && m == d) : 0 < c != (m == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - d)));
          I[a + 24 >>> 2 >>> 0] = b.getDay();
          I[a + 28 >>> 2 >>> 0] = (U(b.getFullYear()) ? wa : xa)[b.getMonth()] + b.getDate() - 1 | 0;
          I[a >>> 2 >>> 0] = b.getSeconds();
          I[a + 4 >>> 2 >>> 0] = b.getMinutes();
          I[a + 8 >>> 2 >>> 0] = b.getHours();
          I[a + 12 >>> 2 >>> 0] = b.getDate();
          I[a + 16 >>> 2 >>> 0] = b.getMonth();
          I[a + 20 >>> 2 >>> 0] = b.getYear();
          a = b.getTime();
          isNaN(a) ? (I[Ja() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;
          return Ka((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
        }, l: function() {
          return -52;
        }, m: function() {
        }, t: function(a, b, c) {
          function d(w) {
            return (w = w.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? w[1] : "GMT";
          }
          c >>>= 0;
          var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);
          g = h.getTimezoneOffset();
          var r = m.getTimezoneOffset();
          J[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(g, r);
          I[b >>> 0 >>> 2 >>> 0] = Number(g != r);
          a = d(h);
          b = d(m);
          a = Ca(a);
          b = Ca(b);
          r < g ? (J[c >>> 2 >>> 0] = a, J[c + 4 >>> 2 >>> 0] = b) : (J[c >>> 2 >>> 0] = b, J[c + 4 >>> 2 >>> 0] = a);
        }, d: () => {
          E("");
        }, B: function(a, b, c) {
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          V.length = 0;
          for (var d; d = H[b++ >>> 0]; ) {
            var g = 105 != d;
            g &= 112 != d;
            c += g && c % 8 ? 4 : 0;
            V.push(112 == d ? J[c >>> 2 >>> 0] : 105 == d ? I[c >>> 2 >>> 0] : ha[c >>> 3 >>> 0]);
            c += g ? 8 : 4;
          }
          return qa[a].apply(null, V);
        }, h: () => Date.now(), u: function() {
          return 4294901760;
        }, b: () => performance.now(), I: function(a, b, c) {
          b >>>= 0;
          return H.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
        }, s: function(a) {
          a >>>= 0;
          var b = H.length;
          if (4294901760 < a)
            return false;
          for (var c = 1; 4 >= c; c *= 2) {
            var d = b * (1 + 0.2 / c);
            d = Math.min(d, a + 100663296);
            var g = Math;
            d = Math.max(a, d);
            a: {
              g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535) / 65536;
              try {
                F.grow(g);
                ia();
                var h = 1;
                break a;
              } catch (m) {
              }
              h = void 0;
            }
            if (h)
              return true;
          }
          return false;
        }, C: function(a, b) {
          a >>>= 0;
          b >>>= 0;
          var c = 0;
          Da().forEach((d, g) => {
            var h = b + c;
            g = J[a + 4 * g >>> 2 >>> 0] = h;
            for (h = 0; h < d.length; ++h)
              G[g++ >>> 0 >>> 0] = d.charCodeAt(h);
            G[g >>> 0 >>> 0] = 0;
            c += d.length + 1;
          });
          return 0;
        }, D: function(a, b) {
          a >>>= 0;
          b >>>= 0;
          var c = Da();
          J[a >>> 2 >>> 0] = c.length;
          var d = 0;
          c.forEach((g) => d += g.length + 1);
          J[b >>> 2 >>> 0] = d;
          return 0;
        }, f: () => 52, j: function() {
          return 52;
        }, q: function() {
          return 70;
        }, i: function(a, b, c, d) {
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          for (var g = 0, h = 0; h < c; h++) {
            var m = J[b >>> 2 >>> 0], r = J[b + 4 >>> 2 >>> 0];
            b += 8;
            for (var w = 0; w < r; w++) {
              var t = H[m + w >>> 0], u = Ea[a];
              0 === t || 10 === t ? ((1 === a ? ea : D)(va(u, 0)), u.length = 0) : u.push(t);
            }
            g += r;
          }
          J[d >>> 2 >>> 0] = g;
          return 0;
        }, r: Ia, c: function(a, b, c, d) {
          return Ia(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
        } }, Y = function() {
          function a(c) {
            Y = c.exports;
            Y = Ma();
            F = Y.K;
            ia();
            L.unshift(Y.L);
            M--;
            0 == M && (null !== N && (clearInterval(N), N = null), O && (c = O, O = null, c()));
            return Y;
          }
          var b = { a: La };
          M++;
          if (e.instantiateWasm)
            try {
              return e.instantiateWasm(b, a);
            } catch (c) {
              D(`Module.instantiateWasm callback failed with error: ${c}`), l(c);
            }
          pa(b, function(c) {
            a(c.instance);
          }).catch(l);
          return {};
        }();
        e._OrtInit = (a, b) => (e._OrtInit = Y.M)(a, b);
        e._OrtGetLastError = (a, b) => (e._OrtGetLastError = Y.N)(a, b);
        e._OrtCreateSessionOptions = (a, b, c, d, g, h, m, r, w, t) => (e._OrtCreateSessionOptions = Y.O)(a, b, c, d, g, h, m, r, w, t);
        e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = Y.P)(a, b);
        e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = Y.Q)(a, b, c);
        e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = Y.R)(a, b, c);
        e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = Y.S)(a);
        e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = Y.T)(a, b, c);
        e._OrtReleaseSession = (a) => (e._OrtReleaseSession = Y.U)(a);
        e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = Y.V)(a, b, c);
        e._OrtGetInputName = (a, b) => (e._OrtGetInputName = Y.W)(a, b);
        e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = Y.X)(a, b);
        e._OrtFree = (a) => (e._OrtFree = Y.Y)(a);
        e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = Y.Z)(a, b, c, d, g, h);
        e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = Y._)(a, b, c, d, g);
        e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = Y.$)(a);
        e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = Y.aa)(a, b, c, d);
        e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = Y.ba)(a, b, c);
        e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = Y.ca)(a);
        e._OrtCreateBinding = (a) => (e._OrtCreateBinding = Y.da)(a);
        e._OrtBindInput = (a, b, c) => (e._OrtBindInput = Y.ea)(a, b, c);
        e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = Y.fa)(a, b, c, d);
        e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = Y.ga)(a);
        e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = Y.ha)(a);
        e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = Y.ia)(a, b, c, d, g);
        e._OrtRun = (a, b, c, d, g, h, m, r) => (e._OrtRun = Y.ja)(a, b, c, d, g, h, m, r);
        e._OrtEndProfiling = (a) => (e._OrtEndProfiling = Y.ka)(a);
        e._OrtTrainingLoadCheckpoint = (a, b) => (e._OrtTrainingLoadCheckpoint = Y.la)(a, b);
        e._OrtTrainingReleaseCheckpoint = (a) => (e._OrtTrainingReleaseCheckpoint = Y.ma)(a);
        e._OrtTrainingCreateSession = (a, b, c, d, g, h, m, r) => (e._OrtTrainingCreateSession = Y.na)(a, b, c, d, g, h, m, r);
        e._OrtTrainingLazyResetGrad = (a) => (e._OrtTrainingLazyResetGrad = Y.oa)(a);
        e._OrtTrainingRunTrainStep = (a, b, c, d, g, h) => (e._OrtTrainingRunTrainStep = Y.pa)(a, b, c, d, g, h);
        e._OrtTrainingOptimizerStep = (a, b) => (e._OrtTrainingOptimizerStep = Y.qa)(a, b);
        e._OrtTrainingEvalStep = (a, b, c, d, g, h) => (e._OrtTrainingEvalStep = Y.ra)(a, b, c, d, g, h);
        e._OrtTrainingGetParametersSize = (a, b, c) => (e._OrtTrainingGetParametersSize = Y.sa)(a, b, c);
        e._OrtTrainingCopyParametersToBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersToBuffer = Y.ta)(a, b, c, d);
        e._OrtTrainingCopyParametersFromBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersFromBuffer = Y.ua)(a, b, c, d);
        e._OrtTrainingGetModelInputOutputCount = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputCount = Y.va)(a, b, c, d);
        e._OrtTrainingGetModelInputOutputName = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputName = Y.wa)(a, b, c, d);
        e._OrtTrainingReleaseSession = (a) => (e._OrtTrainingReleaseSession = Y.xa)(a);
        var Ja = () => (Ja = Y.ya)(), Ba = e._malloc = (a) => (Ba = e._malloc = Y.za)(a);
        e._free = (a) => (e._free = Y.Aa)(a);
        var Ka = (a) => (Ka = Y.Ca)(a), Na = () => (Na = Y.Da)(), Oa = (a) => (Oa = Y.Ea)(a), Pa = (a) => (Pa = Y.Fa)(a);
        function Ma() {
          var a = Y;
          a = Object.assign({}, a);
          var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;
          a.ya = b(a.ya);
          a.za = c(a.za);
          a.Da = b(a.Da);
          a.Fa = c(a.Fa);
          return a;
        }
        e.stackAlloc = Pa;
        e.stackSave = Na;
        e.stackRestore = Oa;
        e.UTF8ToString = R;
        e.stringToUTF8 = (a, b, c) => T(a, H, b, c);
        e.lengthBytesUTF8 = S;
        var Z;
        O = function Qa() {
          Z || Ra();
          Z || (O = Qa);
        };
        function Ra() {
          if (!(0 < M)) {
            if (e.preRun)
              for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; ) {
                var a = e.preRun.shift();
                K.unshift(a);
              }
            for (; 0 < K.length; )
              K.shift()(e);
            if (!(0 < M || Z || (Z = true, e.calledRun = true, fa))) {
              for (; 0 < L.length; )
                L.shift()(e);
              for (k(e); 0 < ja.length; )
                ja.shift()(e);
            }
          }
        }
        Ra();
        return moduleArg.ready;
      };
    })();
    if (typeof exports === "object" && typeof module === "object")
      module.exports = ortWasm;
    else if (typeof define === "function" && define["amd"])
      define([], () => ortWasm);
  }
});

// nodejs-ignore:worker_threads
var require_worker_threads = __commonJS({
  "nodejs-ignore:worker_threads"() {
  }
});

// nodejs-ignore:perf_hooks
var require_perf_hooks = __commonJS({
  "nodejs-ignore:perf_hooks"() {
  }
});

// nodejs-ignore:os
var os_exports = {};
__export(os_exports, {
  cpus: () => cpus2
});
var cpus2;
var init_os = __esm({
  "nodejs-ignore:os"() {
    cpus2 = void 0;
  }
});

// web/lib/wasm/binding/ort-wasm-threaded.js
var require_ort_wasm_threaded = __commonJS({
  "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
    "use strict";
    var ortWasmThreaded = (() => {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined")
        _scriptDir = _scriptDir || __filename;
      return function(moduleArg = {}) {
        function aa() {
          e.buffer != l.buffer && m();
          return l;
        }
        function n() {
          e.buffer != l.buffer && m();
          return ba;
        }
        function p() {
          e.buffer != l.buffer && m();
          return ca;
        }
        function r() {
          e.buffer != l.buffer && m();
          return da;
        }
        function ea() {
          e.buffer != l.buffer && m();
          return fa;
        }
        var v = moduleArg, ha, x;
        v.ready = new Promise((a, b) => {
          ha = a;
          x = b;
        });
        var ia = Object.assign({}, v), ja = "./this.program", z = (a, b) => {
          throw b;
        }, ka = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = v.ENVIRONMENT_IS_PTHREAD || false, E = "";
        function la(a) {
          return v.locateFile ? v.locateFile(a, E) : E + a;
        }
        var ma, G, H;
        if (B) {
          var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));
          E = A ? na.dirname(E) + "/" : __dirname + "/";
          ma = (b, c) => {
            b = I(b) ? new URL(b) : na.normalize(b);
            return fs.readFileSync(b, c ? void 0 : "utf8");
          };
          H = (b) => {
            b = ma(b, true);
            b.buffer || (b = new Uint8Array(b));
            return b;
          };
          G = (b, c, d, g = true) => {
            b = I(b) ? new URL(b) : na.normalize(b);
            fs.readFile(b, g ? void 0 : "utf8", (h, k) => {
              h ? d(h) : c(g ? k.buffer : k);
            });
          };
          !v.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\/g, "/"));
          process.argv.slice(2);
          z = (b, c) => {
            process.exitCode = b;
            throw c;
          };
          v.inspect = () => "[Emscripten Module object]";
          let a;
          try {
            a = require_worker_threads();
          } catch (b) {
            throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
          }
          global.Worker = a.Worker;
        } else if (ka || A)
          A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ma = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.send(null);
            return b.responseText;
          }, A && (H = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), G = (a, b, c) => {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.responseType = "arraybuffer";
            d.onload = () => {
              200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
            };
            d.onerror = c;
            d.send(null);
          });
        B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
        var oa = console.log.bind(console), pa = console.error.bind(console);
        B && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
        var qa = oa, J = pa;
        Object.assign(v, ia);
        ia = null;
        "object" != typeof WebAssembly && ra("no native wasm support detected");
        var e, sa, K = false, L, l, ba, ca, da, fa;
        function m() {
          var a = e.buffer;
          v.HEAP8 = l = new Int8Array(a);
          v.HEAP16 = new Int16Array(a);
          v.HEAPU8 = ba = new Uint8Array(a);
          v.HEAPU16 = new Uint16Array(a);
          v.HEAP32 = ca = new Int32Array(a);
          v.HEAPU32 = da = new Uint32Array(a);
          v.HEAPF32 = new Float32Array(a);
          v.HEAPF64 = fa = new Float64Array(a);
        }
        var ta = 16777216;
        if (D)
          e = v.wasmMemory;
        else if (v.wasmMemory)
          e = v.wasmMemory;
        else if (e = new WebAssembly.Memory({ initial: ta / 65536, maximum: 65536, shared: true }), !(e.buffer instanceof SharedArrayBuffer))
          throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
        m();
        ta = e.buffer.byteLength;
        var ua = [], va = [], wa = [], M = 0, xa = null, N = null;
        function ya() {
          M--;
          if (0 == M && (null !== xa && (clearInterval(xa), xa = null), N)) {
            var a = N;
            N = null;
            a();
          }
        }
        function ra(a) {
          a = "Aborted(" + a + ")";
          J(a);
          K = true;
          L = 1;
          a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
          x(a);
          throw a;
        }
        var za = (a) => a.startsWith("data:application/octet-stream;base64,"), I = (a) => a.startsWith("file://"), O;
        O = "ort-wasm-threaded.wasm";
        za(O) || (O = la(O));
        function Aa(a) {
          if (H)
            return H(a);
          throw "both async and sync fetching of the wasm failed";
        }
        function Ba(a) {
          if (ka || A) {
            if ("function" == typeof fetch && !I(a))
              return fetch(a, { credentials: "same-origin" }).then((b) => {
                if (!b.ok)
                  throw "failed to load wasm binary file at '" + a + "'";
                return b.arrayBuffer();
              }).catch(() => Aa(a));
            if (G)
              return new Promise((b, c) => {
                G(a, (d) => b(new Uint8Array(d)), c);
              });
          }
          return Promise.resolve().then(() => Aa(a));
        }
        function Ca(a, b, c) {
          return Ba(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
            J(`failed to asynchronously prepare wasm: ${d}`);
            ra(d);
          });
        }
        function Da(a, b) {
          var c = O;
          return "function" != typeof WebAssembly.instantiateStreaming || za(c) || I(c) || B || "function" != typeof fetch ? Ca(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {
            J(`wasm streaming compile failed: ${g}`);
            J("falling back to ArrayBuffer instantiation");
            return Ca(c, a, b);
          }));
        }
        var P, Ea = { 920140: (a, b, c, d) => {
          if ("undefined" == typeof v || !v.cb)
            return 1;
          a = Q(a >>> 0);
          a.startsWith("./") && (a = a.substring(2));
          a = v.cb.get(a);
          if (!a)
            return 2;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          if (b + c > a.byteLength)
            return 3;
          try {
            return n().set(a.subarray(b, b + c), d >>> 0), 0;
          } catch {
            return 4;
          }
        } };
        function R(a) {
          this.name = "ExitStatus";
          this.message = `Program terminated with exit(${a})`;
          this.status = a;
        }
        var Fa = (a) => {
          a.terminate();
          a.onmessage = () => {
          };
        }, Ha = (a) => {
          0 == S.Pa.length && (Ga(), S.Ya(S.Pa[0]));
          var b = S.Pa.pop();
          if (!b)
            return 6;
          S.Qa.push(b);
          S.Ma[a.Oa] = b;
          b.Oa = a.Oa;
          var c = { cmd: "run", start_routine: a.kb, arg: a.hb, pthread_ptr: a.Oa };
          B && b.unref();
          b.postMessage(c, a.qb);
          return 0;
        }, T = 0, Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {
          b >>>= 0;
          var d = b + c;
          for (c = b; a[c] && !(c >= d); )
            ++c;
          if (16 < c - b && a.buffer && Ia)
            return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
          for (d = ""; b < c; ) {
            var g = a[b++];
            if (g & 128) {
              var h = a[b++] & 63;
              if (192 == (g & 224))
                d += String.fromCharCode((g & 31) << 6 | h);
              else {
                var k = a[b++] & 63;
                g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;
                65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
              }
            } else
              d += String.fromCharCode(g);
          }
          return d;
        }, Q = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "", La = (a) => {
          var b = Ka();
          a = a();
          U(b);
          return a;
        };
        function V(a, b) {
          var c = arguments.length - 2, d = arguments;
          return La(() => {
            for (var g = Ma(8 * c), h = g >>> 3, k = 0; k < c; k++) {
              var t = d[2 + k];
              ea()[h + k >>> 0] = t;
            }
            return Na(a, c, g, b);
          });
        }
        function Oa(a) {
          if (D)
            return V(0, 1, a);
          L = a;
          0 < T || (S.lb(), v.onExit?.(a), K = true);
          z(a, new R(a));
        }
        var Qa = (a) => {
          L = a;
          if (D)
            throw Pa(a), "unwind";
          Oa(a);
        };
        function Ra() {
          for (var a = v.numThreads; a--; )
            Ga();
          ua.unshift(() => {
            M++;
            Sa(() => ya());
          });
        }
        function Ga() {
          var a = la("ort-wasm-threaded.worker.js");
          a = new Worker(a);
          S.Pa.push(a);
        }
        function Sa(a) {
          D ? a() : Promise.all(S.Pa.map(S.Ya)).then(a);
        }
        var S = { Pa: [], Qa: [], bb: [], Ma: {}, Wa() {
          D ? (S.receiveObjectTransfer = S.jb, S.threadInitTLS = S.ab, S.setExitStatus = S.$a) : Ra();
        }, $a: (a) => L = a, tb: ["$terminateWorker"], lb: () => {
          for (var a of S.Qa)
            Fa(a);
          for (a of S.Pa)
            Fa(a);
          S.Pa = [];
          S.Qa = [];
          S.Ma = [];
        }, Za: (a) => {
          var b = a.Oa;
          delete S.Ma[b];
          S.Pa.push(a);
          S.Qa.splice(S.Qa.indexOf(a), 1);
          a.Oa = 0;
          Ta(b);
        }, jb() {
        }, ab() {
          S.bb.forEach((a) => a());
        }, Ya: (a) => new Promise((b) => {
          a.onmessage = (h) => {
            h = h.data;
            var k = h.cmd;
            if (h.targetThread && h.targetThread != W()) {
              var t = S.Ma[h.targetThread];
              t ? t.postMessage(h, h.transferList) : J(`Internal error! Worker sent a message "${k}" to target pthread ${h.targetThread}, but that thread no longer exists!`);
            } else if ("checkMailbox" === k)
              X();
            else if ("spawnThread" === k)
              Ha(h);
            else if ("cleanupThread" === k)
              S.Za(S.Ma[h.thread]);
            else if ("killThread" === k)
              h = h.thread, k = S.Ma[h], delete S.Ma[h], Fa(k), Ta(h), S.Qa.splice(S.Qa.indexOf(k), 1), k.Oa = 0;
            else if ("cancelThread" === k)
              S.Ma[h.thread].postMessage({ cmd: "cancel" });
            else if ("loaded" === k)
              a.loaded = true, B && !a.Oa && a.unref(), b(a);
            else if ("alert" === k)
              alert(`Thread ${h.threadId}: ${h.text}`);
            else if ("setimmediate" === h.target)
              a.postMessage(h);
            else if ("callHandler" === k)
              v[h.handler](...h.args);
            else
              k && J(`worker sent an unknown command ${k}`);
          };
          a.onerror = (h) => {
            J(`${"worker sent an error!"} ${h.filename}:${h.lineno}: ${h.message}`);
            throw h;
          };
          B && (a.on("message", (h) => a.onmessage({ data: h })), a.on("error", (h) => a.onerror(h)));
          var c = [], d = ["onExit"], g;
          for (g of d)
            v.hasOwnProperty(g) && c.push(g);
          a.postMessage({ cmd: "load", handlers: c, urlOrBlob: v.mainScriptUrlOrBlob || _scriptDir, wasmMemory: e, wasmModule: sa });
        }) };
        v.PThread = S;
        var Ua = (a) => {
          for (; 0 < a.length; )
            a.shift()(v);
        };
        v.establishStackSpace = () => {
          var a = W(), b = r()[a + 52 >>> 2 >>> 0];
          a = r()[a + 56 >>> 2 >>> 0];
          Va(b, b - a);
          U(b);
        };
        function Pa(a) {
          if (D)
            return V(1, 0, a);
          Qa(a);
        }
        var Wa = [], Xa;
        v.invokeEntryPoint = (a, b) => {
          var c = Wa[a];
          c || (a >= Wa.length && (Wa.length = a + 1), Wa[a] = c = Xa.get(a));
          a = c(b);
          0 < T ? S.$a(a) : Ya(a);
        };
        function Za(a) {
          this.Va = a - 24;
          this.gb = function(b) {
            r()[this.Va + 4 >>> 2 >>> 0] = b;
          };
          this.fb = function(b) {
            r()[this.Va + 8 >>> 2 >>> 0] = b;
          };
          this.Wa = function(b, c) {
            this.eb();
            this.gb(b);
            this.fb(c);
          };
          this.eb = function() {
            r()[this.Va + 16 >>> 2 >>> 0] = 0;
          };
        }
        var $a = 0, ab = 0;
        function bb(a, b, c, d) {
          return D ? V(2, 1, a, b, c, d) : cb(a, b, c, d);
        }
        function cb(a, b, c, d) {
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          if ("undefined" == typeof SharedArrayBuffer)
            return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
          var g = [];
          if (D && 0 === g.length)
            return bb(a, b, c, d);
          a = { kb: c, Oa: a, hb: d, qb: g };
          return D ? (a.sb = "spawnThread", postMessage(a, g), 0) : Ha(a);
        }
        function db(a, b, c) {
          return D ? V(3, 1, a, b, c) : 0;
        }
        function eb(a, b) {
          if (D)
            return V(4, 1, a, b);
        }
        var fb = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
          }
          return b;
        }, gb = (a, b, c, d) => {
          c >>>= 0;
          if (!(0 < d))
            return 0;
          var g = c;
          d = c + d - 1;
          for (var h = 0; h < a.length; ++h) {
            var k = a.charCodeAt(h);
            if (55296 <= k && 57343 >= k) {
              var t = a.charCodeAt(++h);
              k = 65536 + ((k & 1023) << 10) | t & 1023;
            }
            if (127 >= k) {
              if (c >= d)
                break;
              b[c++ >>> 0] = k;
            } else {
              if (2047 >= k) {
                if (c + 1 >= d)
                  break;
                b[c++ >>> 0] = 192 | k >> 6;
              } else {
                if (65535 >= k) {
                  if (c + 2 >= d)
                    break;
                  b[c++ >>> 0] = 224 | k >> 12;
                } else {
                  if (c + 3 >= d)
                    break;
                  b[c++ >>> 0] = 240 | k >> 18;
                  b[c++ >>> 0] = 128 | k >> 12 & 63;
                }
                b[c++ >>> 0] = 128 | k >> 6 & 63;
              }
              b[c++ >>> 0] = 128 | k & 63;
            }
          }
          b[c >>> 0] = 0;
          return c - g;
        }, hb = (a, b, c) => gb(a, n(), b, c);
        function ib(a, b) {
          if (D)
            return V(5, 1, a, b);
        }
        function jb(a, b, c) {
          if (D)
            return V(6, 1, a, b, c);
        }
        function kb(a, b, c) {
          return D ? V(7, 1, a, b, c) : 0;
        }
        function lb(a, b) {
          if (D)
            return V(8, 1, a, b);
        }
        function mb(a, b, c) {
          if (D)
            return V(9, 1, a, b, c);
        }
        function nb(a, b, c, d) {
          if (D)
            return V(10, 1, a, b, c, d);
        }
        function ob(a, b, c, d) {
          if (D)
            return V(11, 1, a, b, c, d);
        }
        function pb(a, b, c, d) {
          if (D)
            return V(12, 1, a, b, c, d);
        }
        function qb(a) {
          if (D)
            return V(13, 1, a);
        }
        function rb(a, b) {
          if (D)
            return V(14, 1, a, b);
        }
        function sb(a, b, c) {
          if (D)
            return V(15, 1, a, b, c);
        }
        function tb(a) {
          a >>>= 0;
          "function" === typeof Atomics.rb && (Atomics.rb(p(), a >>> 2, a).value.then(X), a += 128, Atomics.store(p(), a >>> 2, 1));
        }
        v.__emscripten_thread_mailbox_await = tb;
        var X = () => {
          var a = W();
          if (a && (tb(a), a = ub, !K))
            try {
              if (a(), !(0 < T))
                try {
                  D ? Ya(L) : Qa(L);
                } catch (b) {
                  b instanceof R || "unwind" == b || z(1, b);
                }
            } catch (b) {
              b instanceof R || "unwind" == b || z(1, b);
            }
        };
        v.checkMailbox = X;
        var vb = [], Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        function yb(a, b, c, d, g, h, k, t) {
          return D ? V(16, 1, a, b, c, d, g, h, k, t) : -52;
        }
        function zb(a, b, c, d, g, h, k) {
          if (D)
            return V(17, 1, a, b, c, d, g, h, k);
        }
        var Bb = (a) => {
          var b = fb(a) + 1, c = Ab(b);
          c && hb(a, c, b);
          return c;
        }, Cb = [], Db = {}, Fb = () => {
          if (!Eb) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;
            for (b in Db)
              void 0 === Db[b] ? delete a[b] : a[b] = Db[b];
            var c = [];
            for (b in a)
              c.push(`${b}=${a[b]}`);
            Eb = c;
          }
          return Eb;
        }, Eb;
        function Gb(a, b) {
          if (D)
            return V(18, 1, a, b);
          a >>>= 0;
          b >>>= 0;
          var c = 0;
          Fb().forEach((d, g) => {
            var h = b + c;
            g = r()[a + 4 * g >>> 2 >>> 0] = h;
            for (h = 0; h < d.length; ++h)
              aa()[g++ >>> 0 >>> 0] = d.charCodeAt(h);
            aa()[g >>> 0 >>> 0] = 0;
            c += d.length + 1;
          });
          return 0;
        }
        function Kb(a, b) {
          if (D)
            return V(19, 1, a, b);
          a >>>= 0;
          b >>>= 0;
          var c = Fb();
          r()[a >>> 2 >>> 0] = c.length;
          var d = 0;
          c.forEach((g) => d += g.length + 1);
          r()[b >>> 2 >>> 0] = d;
          return 0;
        }
        function Lb(a) {
          return D ? V(20, 1, a) : 52;
        }
        function Mb(a, b, c, d) {
          return D ? V(21, 1, a, b, c, d) : 52;
        }
        function Nb(a, b, c, d, g) {
          return D ? V(22, 1, a, b, c, d, g) : 70;
        }
        var Ob = [null, [], []];
        function Pb(a, b, c, d) {
          if (D)
            return V(23, 1, a, b, c, d);
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          for (var g = 0, h = 0; h < c; h++) {
            var k = r()[b >>> 2 >>> 0], t = r()[b + 4 >>> 2 >>> 0];
            b += 8;
            for (var C = 0; C < t; C++) {
              var w = n()[k + C >>> 0], y = Ob[a];
              0 === w || 10 === w ? ((1 === a ? qa : J)(Ja(y, 0)), y.length = 0) : y.push(w);
            }
            g += t;
          }
          r()[d >>> 2 >>> 0] = g;
          return 0;
        }
        var Qb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Rb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function Sb(a) {
          var b = Array(fb(a) + 1);
          gb(a, b, 0, b.length);
          return b;
        }
        var Tb = (a, b) => {
          aa().set(a, b >>> 0);
        };
        function Ub(a, b, c, d) {
          function g(f, q, u) {
            for (f = "number" == typeof f ? f.toString() : f || ""; f.length < q; )
              f = u[0] + f;
            return f;
          }
          function h(f, q) {
            return g(f, q, "0");
          }
          function k(f, q) {
            function u(Hb) {
              return 0 > Hb ? -1 : 0 < Hb ? 1 : 0;
            }
            var F;
            0 === (F = u(f.getFullYear() - q.getFullYear())) && 0 === (F = u(f.getMonth() - q.getMonth())) && (F = u(f.getDate() - q.getDate()));
            return F;
          }
          function t(f) {
            switch (f.getDay()) {
              case 0:
                return new Date(f.getFullYear() - 1, 11, 29);
              case 1:
                return f;
              case 2:
                return new Date(f.getFullYear(), 0, 3);
              case 3:
                return new Date(
                  f.getFullYear(),
                  0,
                  2
                );
              case 4:
                return new Date(f.getFullYear(), 0, 1);
              case 5:
                return new Date(f.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(f.getFullYear() - 1, 11, 30);
            }
          }
          function C(f) {
            var q = f.Ra;
            for (f = new Date(new Date(f.Sa + 1900, 0, 1).getTime()); 0 < q; ) {
              var u = f.getMonth(), F = (Y(f.getFullYear()) ? Qb : Rb)[u];
              if (q > F - f.getDate())
                q -= F - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
              else {
                f.setDate(f.getDate() + q);
                break;
              }
            }
            u = new Date(f.getFullYear() + 1, 0, 4);
            q = t(new Date(
              f.getFullYear(),
              0,
              4
            ));
            u = t(u);
            return 0 >= k(q, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
          }
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          var w = r()[d + 40 >>> 2 >>> 0];
          d = { ob: p()[d >>> 2 >>> 0], nb: p()[d + 4 >>> 2 >>> 0], Ta: p()[d + 8 >>> 2 >>> 0], Xa: p()[d + 12 >>> 2 >>> 0], Ua: p()[d + 16 >>> 2 >>> 0], Sa: p()[d + 20 >>> 2 >>> 0], Na: p()[d + 24 >>> 2 >>> 0], Ra: p()[d + 28 >>> 2 >>> 0], ub: p()[d + 32 >>> 2 >>> 0], mb: p()[d + 36 >>> 2 >>> 0], pb: w ? Q(w) : "" };
          c = Q(c);
          w = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y"
          };
          for (var y in w)
            c = c.replace(new RegExp(y, "g"), w[y]);
          var Ib = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Jb = "January February March April May June July August September October November December".split(" ");
          w = {
            "%a": (f) => Ib[f.Na].substring(0, 3),
            "%A": (f) => Ib[f.Na],
            "%b": (f) => Jb[f.Ua].substring(0, 3),
            "%B": (f) => Jb[f.Ua],
            "%C": (f) => h((f.Sa + 1900) / 100 | 0, 2),
            "%d": (f) => h(f.Xa, 2),
            "%e": (f) => g(f.Xa, 2, " "),
            "%g": (f) => C(f).toString().substring(2),
            "%G": (f) => C(f),
            "%H": (f) => h(f.Ta, 2),
            "%I": (f) => {
              f = f.Ta;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return h(f, 2);
            },
            "%j": (f) => {
              for (var q = 0, u = 0; u <= f.Ua - 1; q += (Y(f.Sa + 1900) ? Qb : Rb)[u++])
                ;
              return h(f.Xa + q, 3);
            },
            "%m": (f) => h(f.Ua + 1, 2),
            "%M": (f) => h(f.nb, 2),
            "%n": () => "\n",
            "%p": (f) => 0 <= f.Ta && 12 > f.Ta ? "AM" : "PM",
            "%S": (f) => h(f.ob, 2),
            "%t": () => "	",
            "%u": (f) => f.Na || 7,
            "%U": (f) => h(Math.floor((f.Ra + 7 - f.Na) / 7), 2),
            "%V": (f) => {
              var q = Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7);
              2 >= (f.Na + 371 - f.Ra - 2) % 7 && q++;
              if (q)
                53 == q && (u = (f.Na + 371 - f.Ra) % 7, 4 == u || 3 == u && Y(f.Sa) || (q = 1));
              else {
                q = 52;
                var u = (f.Na + 7 - f.Ra - 1) % 7;
                (4 == u || 5 == u && Y(f.Sa % 400 - 1)) && q++;
              }
              return h(q, 2);
            },
            "%w": (f) => f.Na,
            "%W": (f) => h(Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7), 2),
            "%y": (f) => (f.Sa + 1900).toString().substring(2),
            "%Y": (f) => f.Sa + 1900,
            "%z": (f) => {
              f = f.mb;
              var q = 0 <= f;
              f = Math.abs(f) / 60;
              return (q ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            },
            "%Z": (f) => f.pb,
            "%%": () => "%"
          };
          c = c.replace(
            /%%/g,
            "\0\0"
          );
          for (y in w)
            c.includes(y) && (c = c.replace(new RegExp(y, "g"), w[y](d)));
          c = c.replace(/\0\0/g, "%");
          y = Sb(c);
          if (y.length > b)
            return 0;
          Tb(y, a);
          return y.length - 1;
        }
        S.Wa();
        var Vb = [Oa, Pa, bb, db, eb, ib, jb, kb, lb, mb, nb, ob, pb, qb, rb, sb, yb, zb, Gb, Kb, Lb, Mb, Nb, Pb], Zb = {
          b: function(a, b, c) {
            a >>>= 0;
            new Za(a).Wa(b >>> 0, c >>> 0);
            $a = a;
            ab++;
            throw $a;
          },
          L: function(a) {
            Wb(a >>> 0, !A, 1, !ka, 131072, false);
            S.ab();
          },
          j: function(a) {
            a >>>= 0;
            D ? postMessage({ cmd: "cleanupThread", thread: a }) : S.Za(S.Ma[a]);
          },
          H: cb,
          h: db,
          S: eb,
          D: ib,
          F: jb,
          T: kb,
          Q: lb,
          J: mb,
          P: nb,
          n: ob,
          E: pb,
          B: qb,
          R: rb,
          C: sb,
          p: () => 1,
          z: function(a, b) {
            a >>>= 0;
            a == b >>> 0 ? setTimeout(() => X()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = S.Ma[a]) && a.postMessage({ cmd: "checkMailbox" });
          },
          I: function(a, b, c, d) {
            b >>>= 0;
            vb.length = c;
            d = d >>> 0 >>> 3;
            for (var g = 0; g < c; g++)
              vb[g] = ea()[d + g >>> 0];
            a = 0 > a ? Ea[-a - 1] : Vb[a];
            S.ib = b;
            b = a.apply(null, vb);
            S.ib = 0;
            return b;
          },
          K: tb,
          o: function(a) {
            B && S.Ma[a >>> 0].ref();
          },
          s: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            p()[c >>> 2 >>> 0] = a.getUTCSeconds();
            p()[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();
            p()[c + 8 >>> 2 >>> 0] = a.getUTCHours();
            p()[c + 12 >>> 2 >>> 0] = a.getUTCDate();
            p()[c + 16 >>> 2 >>> 0] = a.getUTCMonth();
            p()[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
            p()[c + 24 >>> 2 >>> 0] = a.getUTCDay();
            a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
            p()[c + 28 >>> 2 >>> 0] = a;
          },
          t: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            p()[c >>> 2 >>> 0] = a.getSeconds();
            p()[c + 4 >>> 2 >>> 0] = a.getMinutes();
            p()[c + 8 >>> 2 >>> 0] = a.getHours();
            p()[c + 12 >>> 2 >>> 0] = a.getDate();
            p()[c + 16 >>> 2 >>> 0] = a.getMonth();
            p()[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
            p()[c + 24 >>> 2 >>> 0] = a.getDay();
            b = (Y(a.getFullYear()) ? wb : xb)[a.getMonth()] + a.getDate() - 1 | 0;
            p()[c + 28 >>> 2 >>> 0] = b;
            p()[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
            var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
            a = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;
            p()[c + 32 >>> 2 >>> 0] = a;
          },
          u: function(a) {
            a >>>= 0;
            var b = new Date(p()[a + 20 >>> 2 >>> 0] + 1900, p()[a + 16 >>> 2 >>> 0], p()[a + 12 >>> 2 >>> 0], p()[a + 8 >>> 2 >>> 0], p()[a + 4 >>> 2 >>> 0], p()[a >>> 2 >>> 0], 0), c = p()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(
              b.getFullYear(),
              0,
              1
            ).getTimezoneOffset(), k = Math.min(h, g);
            0 > c ? p()[a + 32 >>> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));
            p()[a + 24 >>> 2 >>> 0] = b.getDay();
            c = (Y(b.getFullYear()) ? wb : xb)[b.getMonth()] + b.getDate() - 1 | 0;
            p()[a + 28 >>> 2 >>> 0] = c;
            p()[a >>> 2 >>> 0] = b.getSeconds();
            p()[a + 4 >>> 2 >>> 0] = b.getMinutes();
            p()[a + 8 >>> 2 >>> 0] = b.getHours();
            p()[a + 12 >>> 2 >>> 0] = b.getDate();
            p()[a + 16 >>> 2 >>> 0] = b.getMonth();
            p()[a + 20 >>> 2 >>> 0] = b.getYear();
            a = b.getTime();
            isNaN(a) ? (p()[Xb() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;
            return Yb((P = a, 1 <= +Math.abs(P) ? 0 < P ? +Math.floor(P / 4294967296) >>> 0 : ~~+Math.ceil((P - +(~~P >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
          },
          q: yb,
          r: zb,
          y: function(a, b, c) {
            function d(w) {
              return (w = w.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? w[1] : "GMT";
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);
            g = h.getTimezoneOffset();
            var t = k.getTimezoneOffset(), C = Math.max(g, t);
            r()[a >>> 2 >>> 0] = 60 * C;
            p()[b >>> 2 >>> 0] = Number(g != t);
            a = d(h);
            b = d(k);
            a = Bb(a);
            b = Bb(b);
            t < g ? (r()[c >>> 2 >>> 0] = a, r()[c + 4 >>> 2 >>> 0] = b) : (r()[c >>> 2 >>> 0] = b, r()[c + 4 >>> 2 >>> 0] = a);
          },
          c: () => {
            ra("");
          },
          O: function(a, b, c) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            Cb.length = 0;
            for (var d; d = n()[b++ >>> 0]; ) {
              var g = 105 != d;
              g &= 112 != d;
              c += g && c % 8 ? 4 : 0;
              Cb.push(112 == d ? r()[c >>> 2 >>> 0] : 105 == d ? p()[c >>> 2 >>> 0] : ea()[c >>> 3 >>> 0]);
              c += g ? 8 : 4;
            }
            return Ea[a].apply(null, Cb);
          },
          k: () => {
          },
          i: () => Date.now(),
          U: () => {
            T += 1;
            throw "unwind";
          },
          A: function() {
            return 4294901760;
          },
          e: () => performance.timeOrigin + performance.now(),
          f: () => B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,
          x: function(a) {
            a >>>= 0;
            var b = n().length;
            if (a <= b || 4294901760 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, a + 100663296);
              var g = Math;
              d = Math.max(a, d);
              a: {
                g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - e.buffer.byteLength + 65535) / 65536;
                try {
                  e.grow(g);
                  m();
                  var h = 1;
                  break a;
                } catch (k) {
                }
                h = void 0;
              }
              if (h)
                return true;
            }
            return false;
          },
          M: Gb,
          N: Kb,
          G: Qa,
          g: Lb,
          m: Mb,
          v: Nb,
          l: Pb,
          a: e || v.wasmMemory,
          w: Ub,
          d: function(a, b, c, d) {
            return Ub(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
          }
        }, Z = function() {
          function a(c, d) {
            Z = c.exports;
            Z = $b();
            S.bb.push(Z.za);
            Xa = Z.Aa;
            va.unshift(Z.V);
            sa = d;
            ya();
            return Z;
          }
          var b = { a: Zb };
          M++;
          if (v.instantiateWasm)
            try {
              return v.instantiateWasm(b, a);
            } catch (c) {
              J(`Module.instantiateWasm callback failed with error: ${c}`), x(c);
            }
          Da(b, function(c) {
            a(c.instance, c.module);
          }).catch(x);
          return {};
        }();
        v._OrtInit = (a, b) => (v._OrtInit = Z.W)(a, b);
        v._OrtGetLastError = (a, b) => (v._OrtGetLastError = Z.X)(a, b);
        v._OrtCreateSessionOptions = (a, b, c, d, g, h, k, t, C, w) => (v._OrtCreateSessionOptions = Z.Y)(a, b, c, d, g, h, k, t, C, w);
        v._OrtAppendExecutionProvider = (a, b) => (v._OrtAppendExecutionProvider = Z.Z)(a, b);
        v._OrtAddFreeDimensionOverride = (a, b, c) => (v._OrtAddFreeDimensionOverride = Z._)(a, b, c);
        v._OrtAddSessionConfigEntry = (a, b, c) => (v._OrtAddSessionConfigEntry = Z.$)(a, b, c);
        v._OrtReleaseSessionOptions = (a) => (v._OrtReleaseSessionOptions = Z.aa)(a);
        v._OrtCreateSession = (a, b, c) => (v._OrtCreateSession = Z.ba)(a, b, c);
        v._OrtReleaseSession = (a) => (v._OrtReleaseSession = Z.ca)(a);
        v._OrtGetInputOutputCount = (a, b, c) => (v._OrtGetInputOutputCount = Z.da)(a, b, c);
        v._OrtGetInputName = (a, b) => (v._OrtGetInputName = Z.ea)(a, b);
        v._OrtGetOutputName = (a, b) => (v._OrtGetOutputName = Z.fa)(a, b);
        v._OrtFree = (a) => (v._OrtFree = Z.ga)(a);
        v._OrtCreateTensor = (a, b, c, d, g, h) => (v._OrtCreateTensor = Z.ha)(a, b, c, d, g, h);
        v._OrtGetTensorData = (a, b, c, d, g) => (v._OrtGetTensorData = Z.ia)(a, b, c, d, g);
        v._OrtReleaseTensor = (a) => (v._OrtReleaseTensor = Z.ja)(a);
        v._OrtCreateRunOptions = (a, b, c, d) => (v._OrtCreateRunOptions = Z.ka)(a, b, c, d);
        v._OrtAddRunConfigEntry = (a, b, c) => (v._OrtAddRunConfigEntry = Z.la)(a, b, c);
        v._OrtReleaseRunOptions = (a) => (v._OrtReleaseRunOptions = Z.ma)(a);
        v._OrtCreateBinding = (a) => (v._OrtCreateBinding = Z.na)(a);
        v._OrtBindInput = (a, b, c) => (v._OrtBindInput = Z.oa)(a, b, c);
        v._OrtBindOutput = (a, b, c, d) => (v._OrtBindOutput = Z.pa)(a, b, c, d);
        v._OrtClearBoundOutputs = (a) => (v._OrtClearBoundOutputs = Z.qa)(a);
        v._OrtReleaseBinding = (a) => (v._OrtReleaseBinding = Z.ra)(a);
        v._OrtRunWithBinding = (a, b, c, d, g) => (v._OrtRunWithBinding = Z.sa)(a, b, c, d, g);
        v._OrtRun = (a, b, c, d, g, h, k, t) => (v._OrtRun = Z.ta)(a, b, c, d, g, h, k, t);
        v._OrtEndProfiling = (a) => (v._OrtEndProfiling = Z.ua)(a);
        var Xb = () => (Xb = Z.va)(), W = v._pthread_self = () => (W = v._pthread_self = Z.wa)(), Ab = v._malloc = (a) => (Ab = v._malloc = Z.xa)(a);
        v._free = (a) => (v._free = Z.ya)(a);
        v.__emscripten_tls_init = () => (v.__emscripten_tls_init = Z.za)();
        var Wb = v.__emscripten_thread_init = (a, b, c, d, g, h) => (Wb = v.__emscripten_thread_init = Z.Ba)(a, b, c, d, g, h);
        v.__emscripten_thread_crashed = () => (v.__emscripten_thread_crashed = Z.Ca)();
        var Na = (a, b, c, d) => (Na = Z.Da)(a, b, c, d), Ta = (a) => (Ta = Z.Ea)(a), Ya = v.__emscripten_thread_exit = (a) => (Ya = v.__emscripten_thread_exit = Z.Fa)(a), ub = () => (ub = Z.Ga)(), Yb = (a) => (Yb = Z.Ha)(a), Va = (a, b) => (Va = Z.Ia)(a, b), Ka = () => (Ka = Z.Ja)(), U = (a) => (U = Z.Ka)(a), Ma = (a) => (Ma = Z.La)(a);
        function $b() {
          var a = Z;
          a = Object.assign({}, a);
          var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;
          a.va = b(a.va);
          a.wa = b(a.wa);
          a.xa = c(a.xa);
          a.emscripten_main_runtime_thread_id = b(a.emscripten_main_runtime_thread_id);
          a.Ja = b(a.Ja);
          a.La = c(a.La);
          return a;
        }
        v.wasmMemory = e;
        v.stackAlloc = Ma;
        v.stackSave = Ka;
        v.stackRestore = U;
        v.keepRuntimeAlive = () => 0 < T;
        v.UTF8ToString = Q;
        v.stringToUTF8 = hb;
        v.lengthBytesUTF8 = fb;
        v.ExitStatus = R;
        v.PThread = S;
        var ac;
        N = function bc() {
          ac || cc();
          ac || (N = bc);
        };
        function cc() {
          if (!(0 < M))
            if (D)
              ha(v), D || Ua(va), startWorker(v);
            else {
              if (v.preRun)
                for ("function" == typeof v.preRun && (v.preRun = [v.preRun]); v.preRun.length; )
                  ua.unshift(v.preRun.shift());
              Ua(ua);
              0 < M || ac || (ac = true, v.calledRun = true, K || (D || Ua(va), ha(v), D || Ua(wa)));
            }
        }
        cc();
        return moduleArg.ready;
      };
    })();
    if (typeof exports === "object" && typeof module === "object")
      module.exports = ortWasmThreaded;
    else if (typeof define === "function" && define["amd"])
      define([], () => ortWasmThreaded);
  }
});

// web/lib/wasm/binding/ort-wasm-threaded.worker.js
var require_ort_wasm_threaded_worker = __commonJS({
  "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
    module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\n';
  }
});

// web/lib/wasm/wasm-factory.ts
var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
var init_wasm_factory = __esm({
  "web/lib/wasm/wasm-factory.ts"() {
    "use strict";
    init_node_path();
    if (true) {
      ortWasmFactory = require_ort_training_wasm_simd();
    } else {
      ortWasmFactory = true ? null : null;
    }
    ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
    initialized = false;
    initializing = false;
    aborted = false;
    isMultiThreadSupported = (numThreads) => {
      if (numThreads === 1) {
        return false;
      }
      if (typeof SharedArrayBuffer === "undefined") {
        if (typeof self !== "undefined" && !self.crossOriginIsolated) {
          console.warn(
            "env.wasm.numThreads is set to " + numThreads + ", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."
          );
        }
        return false;
      }
      if (typeof process !== "undefined" && process.versions && process.versions.node) {
        console.warn(
          "env.wasm.numThreads is set to " + numThreads + ", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios."
        );
      }
      try {
        if (typeof MessageChannel !== "undefined") {
          new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
        }
        return WebAssembly.validate(new Uint8Array([
          0,
          97,
          115,
          109,
          1,
          0,
          0,
          0,
          1,
          4,
          1,
          96,
          0,
          0,
          3,
          2,
          1,
          0,
          5,
          4,
          1,
          3,
          1,
          1,
          10,
          11,
          1,
          9,
          0,
          65,
          0,
          254,
          16,
          2,
          0,
          26,
          11
        ]));
      } catch (e) {
        return false;
      }
    };
    isSimdSupported = () => {
      try {
        return WebAssembly.validate(new Uint8Array([
          0,
          97,
          115,
          109,
          1,
          0,
          0,
          0,
          1,
          4,
          1,
          96,
          0,
          0,
          3,
          2,
          1,
          0,
          10,
          30,
          1,
          28,
          0,
          65,
          0,
          253,
          15,
          253,
          12,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          253,
          186,
          1,
          26,
          11
        ]));
      } catch (e) {
        return false;
      }
    };
    getWasmFileName = (useSimd, useThreads) => {
      if (useSimd) {
        if (true) {
          return "ort-training-wasm-simd.wasm";
        }
        return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
      } else {
        return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
      }
    };
    initializeWebAssembly = async (flags) => {
      if (initialized) {
        return Promise.resolve();
      }
      if (initializing) {
        throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
      }
      if (aborted) {
        throw new Error("previous call to 'initializeWebAssembly()' failed.");
      }
      initializing = true;
      const timeout = flags.initTimeout;
      const numThreads = flags.numThreads;
      const simd = flags.simd;
      const useThreads = isMultiThreadSupported(numThreads);
      const useSimd = simd && isSimdSupported();
      const wasmPaths = flags.wasmPaths;
      const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
      const wasmFileName = getWasmFileName(useSimd, useThreads);
      const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
      let isTimeout = false;
      const tasks = [];
      if (timeout > 0) {
        tasks.push(new Promise((resolve) => {
          setTimeout(() => {
            isTimeout = true;
            resolve();
          }, timeout);
        }));
      }
      tasks.push(new Promise((resolve, reject) => {
        const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
        const config = {
          locateFile: (fileName, scriptDirectory) => {
            if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
              return URL.createObjectURL(new Blob(
                [
                  // This require() function is handled by esbuild plugin to load file content as string.
                  // eslint-disable-next-line @typescript-eslint/no-require-imports
                  require_ort_wasm_threaded_worker()
                ],
                { type: "text/javascript" }
              ));
            }
            if (fileName.endsWith(".wasm")) {
              if (wasmPathOverride) {
                return wasmPathOverride;
              }
              const prefix = wasmPrefixOverride ?? scriptDirectory;
              if (false) {
                if (wasmFileName === "ort-wasm-simd.wasm") {
                  return prefix + "ort-wasm-simd.jsep.wasm";
                } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                  return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                }
              }
              return prefix + wasmFileName;
            }
            return scriptDirectory + fileName;
          }
        };
        if (useThreads) {
          config.numThreads = numThreads;
          if (typeof Blob === "undefined") {
            config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
          } else {
            const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
            config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
          }
        }
        factory(config).then(
          // wasm module initialized successfully
          (module) => {
            initializing = false;
            initialized = true;
            wasm = module;
            resolve();
          },
          // wasm module failed to initialize
          (what) => {
            initializing = false;
            aborted = true;
            reject(what);
          }
        );
      }));
      await Promise.race(tasks);
      if (isTimeout) {
        throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
      }
    };
    getInstance = () => {
      if (initialized && wasm) {
        return wasm;
      }
      throw new Error("WebAssembly is not initialized yet.");
    };
  }
});

// web/lib/wasm/wasm-utils.ts
var allocWasmString, iterateExtraOptions, checkLastError;
var init_wasm_utils = __esm({
  "web/lib/wasm/wasm-utils.ts"() {
    "use strict";
    init_wasm_factory();
    allocWasmString = (data, allocs) => {
      const wasm2 = getInstance();
      const dataLength = wasm2.lengthBytesUTF8(data) + 1;
      const dataOffset = wasm2._malloc(dataLength);
      wasm2.stringToUTF8(data, dataOffset, dataLength);
      allocs.push(dataOffset);
      return dataOffset;
    };
    iterateExtraOptions = (options, prefix, seen, handler) => {
      if (typeof options == "object" && options !== null) {
        if (seen.has(options)) {
          throw new Error("Circular reference in options");
        } else {
          seen.add(options);
        }
      }
      Object.entries(options).forEach(([key, value]) => {
        const name = prefix ? prefix + key : key;
        if (typeof value === "object") {
          iterateExtraOptions(value, name + ".", seen, handler);
        } else if (typeof value === "string" || typeof value === "number") {
          handler(name, value.toString());
        } else if (typeof value === "boolean") {
          handler(name, value ? "1" : "0");
        } else {
          throw new Error(`Can't handle extra config type: ${typeof value}`);
        }
      });
    };
    checkLastError = (message) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const paramsOffset = wasm2.stackAlloc(8);
        wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
        const errorCode = wasm2.HEAP32[paramsOffset / 4];
        const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
        const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
        throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
      } finally {
        wasm2.stackRestore(stack);
      }
    };
  }
});

// web/lib/wasm/run-options.ts
var setRunOptions;
var init_run_options = __esm({
  "web/lib/wasm/run-options.ts"() {
    "use strict";
    init_wasm_factory();
    init_wasm_utils();
    setRunOptions = (options) => {
      const wasm2 = getInstance();
      let runOptionsHandle = 0;
      const allocs = [];
      const runOptions = options || {};
      try {
        if (options?.logSeverityLevel === void 0) {
          runOptions.logSeverityLevel = 2;
        } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
          throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
        }
        if (options?.logVerbosityLevel === void 0) {
          runOptions.logVerbosityLevel = 0;
        } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
          throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
        }
        if (options?.terminate === void 0) {
          runOptions.terminate = false;
        }
        let tagDataOffset = 0;
        if (options?.tag !== void 0) {
          tagDataOffset = allocWasmString(options.tag, allocs);
        }
        runOptionsHandle = wasm2._OrtCreateRunOptions(
          runOptions.logSeverityLevel,
          runOptions.logVerbosityLevel,
          !!runOptions.terminate,
          tagDataOffset
        );
        if (runOptionsHandle === 0) {
          checkLastError("Can't create run options.");
        }
        if (options?.extra !== void 0) {
          iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
            const keyDataOffset = allocWasmString(key, allocs);
            const valueDataOffset = allocWasmString(value, allocs);
            if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
              checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
            }
          });
        }
        return [runOptionsHandle, allocs];
      } catch (e) {
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        throw e;
      }
    };
  }
});

// web/lib/wasm/session-options.ts
var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
var init_session_options = __esm({
  "web/lib/wasm/session-options.ts"() {
    "use strict";
    init_wasm_factory();
    init_wasm_utils();
    getGraphOptimzationLevel = (graphOptimizationLevel) => {
      switch (graphOptimizationLevel) {
        case "disabled":
          return 0;
        case "basic":
          return 1;
        case "extended":
          return 2;
        case "all":
          return 99;
        default:
          throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
      }
    };
    getExecutionMode = (executionMode) => {
      switch (executionMode) {
        case "sequential":
          return 0;
        case "parallel":
          return 1;
        default:
          throw new Error(`unsupported execution mode: ${executionMode}`);
      }
    };
    appendDefaultOptions = (options) => {
      if (!options.extra) {
        options.extra = {};
      }
      if (!options.extra.session) {
        options.extra.session = {};
      }
      const session = options.extra.session;
      if (!session.use_ort_model_bytes_directly) {
        session.use_ort_model_bytes_directly = "1";
      }
      if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
        options.enableMemPattern = false;
      }
    };
    setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
      for (const ep of executionProviders) {
        let epName = typeof ep === "string" ? ep : ep.name;
        switch (epName) {
          case "webnn":
            epName = "WEBNN";
            if (typeof ep !== "string") {
              const webnnOptions = ep;
              if (webnnOptions?.deviceType) {
                const keyDataOffset = allocWasmString("deviceType", allocs);
                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                }
              }
              if (webnnOptions?.numThreads) {
                let numThreads = webnnOptions.numThreads;
                if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                  numThreads = 0;
                }
                const keyDataOffset = allocWasmString("numThreads", allocs);
                const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                }
              }
              if (webnnOptions?.powerPreference) {
                const keyDataOffset = allocWasmString("powerPreference", allocs);
                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(
                    `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                  );
                }
              }
            }
            break;
          case "webgpu":
            epName = "JS";
            if (typeof ep !== "string") {
              const webgpuOptions = ep;
              if (webgpuOptions?.preferredLayout) {
                if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                  throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                }
                const keyDataOffset = allocWasmString("preferredLayout", allocs);
                const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(
                    `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                  );
                }
              }
            }
            break;
          case "wasm":
          case "cpu":
            continue;
          default:
            throw new Error(`not supported execution provider: ${epName}`);
        }
        const epNameDataOffset = allocWasmString(epName, allocs);
        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
          checkLastError(`Can't append execution provider: ${epName}.`);
        }
      }
    };
    setSessionOptions = (options) => {
      const wasm2 = getInstance();
      let sessionOptionsHandle = 0;
      const allocs = [];
      const sessionOptions = options || {};
      appendDefaultOptions(sessionOptions);
      try {
        const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
        const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
        const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
        const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
        if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
          throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
        }
        const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
        if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
          throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
        }
        const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
        sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
          graphOptimizationLevel,
          !!sessionOptions.enableCpuMemArena,
          !!sessionOptions.enableMemPattern,
          executionMode,
          !!sessionOptions.enableProfiling,
          0,
          logIdDataOffset,
          logSeverityLevel,
          logVerbosityLevel,
          optimizedModelFilePathOffset
        );
        if (sessionOptionsHandle === 0) {
          checkLastError("Can't create session options.");
        }
        if (sessionOptions.executionProviders) {
          setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
        }
        if (sessionOptions.freeDimensionOverrides) {
          for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
            if (typeof name !== "string") {
              throw new Error(`free dimension override name must be a string: ${name}`);
            }
            if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
              throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
            }
            const nameOffset = allocWasmString(name, allocs);
            if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
              checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
            }
          }
        }
        if (sessionOptions.extra !== void 0) {
          iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
            const keyDataOffset = allocWasmString(key, allocs);
            const valueDataOffset = allocWasmString(value, allocs);
            if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
              checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
            }
          });
        }
        return [sessionOptionsHandle, allocs];
      } catch (e) {
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        throw e;
      }
    };
  }
});

// web/lib/wasm/wasm-common.ts
var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
var init_wasm_common = __esm({
  "web/lib/wasm/wasm-common.ts"() {
    "use strict";
    tensorDataTypeStringToEnum = (type) => {
      switch (type) {
        case "int8":
          return 3 /* int8 */;
        case "uint8":
          return 2 /* uint8 */;
        case "bool":
          return 9 /* bool */;
        case "int16":
          return 5 /* int16 */;
        case "uint16":
          return 4 /* uint16 */;
        case "int32":
          return 6 /* int32 */;
        case "uint32":
          return 12 /* uint32 */;
        case "float16":
          return 10 /* float16 */;
        case "float32":
          return 1 /* float */;
        case "float64":
          return 11 /* double */;
        case "string":
          return 8 /* string */;
        case "int64":
          return 7 /* int64 */;
        case "uint64":
          return 13 /* uint64 */;
        default:
          throw new Error(`unsupported data type: ${type}`);
      }
    };
    tensorDataTypeEnumToString = (typeProto) => {
      switch (typeProto) {
        case 3 /* int8 */:
          return "int8";
        case 2 /* uint8 */:
          return "uint8";
        case 9 /* bool */:
          return "bool";
        case 5 /* int16 */:
          return "int16";
        case 4 /* uint16 */:
          return "uint16";
        case 6 /* int32 */:
          return "int32";
        case 12 /* uint32 */:
          return "uint32";
        case 10 /* float16 */:
          return "float16";
        case 1 /* float */:
          return "float32";
        case 11 /* double */:
          return "float64";
        case 8 /* string */:
          return "string";
        case 7 /* int64 */:
          return "int64";
        case 13 /* uint64 */:
          return "uint64";
        default:
          throw new Error(`unsupported data type: ${typeProto}`);
      }
    };
    getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
    tensorTypeToTypedArrayConstructor = (type) => {
      switch (type) {
        case "float16":
          return Uint16Array;
        case "float32":
          return Float32Array;
        case "uint8":
          return Uint8Array;
        case "int8":
          return Int8Array;
        case "uint16":
          return Uint16Array;
        case "int16":
          return Int16Array;
        case "int32":
          return Int32Array;
        case "bool":
          return Uint8Array;
        case "float64":
          return Float64Array;
        case "uint32":
          return Uint32Array;
        case "int64":
          return BigInt64Array;
        case "uint64":
          return BigUint64Array;
        default:
          throw new Error(`unsupported type: ${type}`);
      }
    };
    logLevelStringToEnum = (logLevel) => {
      switch (logLevel) {
        case "verbose":
          return 0;
        case "info":
          return 1;
        case "warning":
          return 2;
        case "error":
          return 3;
        case "fatal":
          return 4;
        default:
          throw new Error(`unsupported logging level: ${logLevel}`);
      }
    };
    isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
    dataLocationStringToEnum = (location) => {
      switch (location) {
        case "none":
          return 0;
        case "cpu":
          return 1;
        case "cpu-pinned":
          return 2;
        case "texture":
          return 3;
        case "gpu-buffer":
          return 4;
        default:
          throw new Error(`unsupported data location: ${location}`);
      }
    };
  }
});

// nodejs-ignore:node:fs/promises
var readFile2;
var init_promises = __esm({
  "nodejs-ignore:node:fs/promises"() {
    readFile2 = void 0;
  }
});

// web/lib/wasm/wasm-utils-load-file.ts
var loadFile;
var init_wasm_utils_load_file = __esm({
  "web/lib/wasm/wasm-utils-load-file.ts"() {
    "use strict";
    init_fs();
    init_promises();
    loadFile = async (file) => {
      if (typeof file === "string") {
        if (typeof process !== "undefined" && process.versions && process.versions.node) {
          try {
            return new Uint8Array(await readFile2(file));
          } catch (e) {
            if (e.code === "ERR_FS_FILE_TOO_LARGE") {
              const stream = createReadStream(file);
              const chunks = [];
              for await (const chunk of stream) {
                chunks.push(chunk);
              }
              return new Uint8Array(Buffer.concat(chunks));
            }
            throw e;
          }
        } else {
          const response = await fetch(file);
          if (!response.ok) {
            throw new Error(`failed to load external data file: ${file}`);
          }
          const contentLengthHeader = response.headers.get("Content-Length");
          const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;
          if (fileSize < 1073741824) {
            return new Uint8Array(await response.arrayBuffer());
          } else {
            if (!response.body) {
              throw new Error(`failed to load external data file: ${file}, no response body.`);
            }
            const reader = response.body.getReader();
            let buffer;
            try {
              buffer = new ArrayBuffer(fileSize);
            } catch (e) {
              if (e instanceof RangeError) {
                const pages = Math.ceil(fileSize / 65536);
                buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;
              } else {
                throw e;
              }
            }
            let offset = 0;
            while (true) {
              const { done, value } = await reader.read();
              if (done) {
                break;
              }
              const chunkSize = value.byteLength;
              const chunk = new Uint8Array(buffer, offset, chunkSize);
              chunk.set(value);
              offset += chunkSize;
            }
            return new Uint8Array(buffer, 0, fileSize);
          }
        }
      } else if (file instanceof Blob) {
        return new Uint8Array(await file.arrayBuffer());
      } else if (file instanceof Uint8Array) {
        return file;
      } else {
        return new Uint8Array(file);
      }
    };
  }
});

// web/lib/wasm/wasm-core-impl.ts
var initOrt, initRuntime, initEp, activeSessions, getSessionInputOutputCount, copyFromExternalBuffer, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
var init_wasm_core_impl = __esm({
  "web/lib/wasm/wasm-core-impl.ts"() {
    "use strict";
    init_run_options();
    init_session_options();
    init_wasm_common();
    init_wasm_factory();
    init_wasm_utils();
    init_wasm_utils_load_file();
    initOrt = (numThreads, loggingLevel) => {
      const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
      if (errorCode !== 0) {
        checkLastError("Can't initialize onnxruntime.");
      }
    };
    initRuntime = async (env3) => {
      initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
    };
    initEp = async (env3, epName) => {
      if (false) {
        if (typeof navigator === "undefined" || !navigator.gpu) {
          throw new Error("WebGPU is not supported in current environment");
        }
        const adapter = await navigator.gpu.requestAdapter();
        if (!adapter) {
          throw new Error(
            'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.'
          );
        }
        if (!env3.wasm.simd) {
          throw new Error(
            "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"
          );
        }
        const initJsep = null.init;
        await initJsep(getInstance(), env3, adapter);
      }
    };
    activeSessions = /* @__PURE__ */ new Map();
    getSessionInputOutputCount = (sessionHandle) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const dataOffset = wasm2.stackAlloc(8);
        const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
        if (errorCode !== 0) {
          checkLastError("Can't get session input/output count.");
        }
        return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    copyFromExternalBuffer = (model) => {
      const wasm2 = getInstance();
      const modelDataOffset = wasm2._malloc(model.byteLength);
      if (modelDataOffset === 0) {
        throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
      }
      wasm2.HEAPU8.set(model, modelDataOffset);
      return [modelDataOffset, model.byteLength];
    };
    createSession = async (modelData, options) => {
      let modelDataOffset, modelDataLength;
      const wasm2 = getInstance();
      if (Array.isArray(modelData)) {
        [modelDataOffset, modelDataLength] = modelData;
      } else if (modelData.buffer === wasm2.HEAPU8.buffer) {
        [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];
      } else {
        [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);
      }
      let sessionHandle = 0;
      let sessionOptionsHandle = 0;
      let ioBindingHandle = 0;
      let allocs = [];
      const inputNamesUTF8Encoded = [];
      const outputNamesUTF8Encoded = [];
      try {
        [sessionOptionsHandle, allocs] = setSessionOptions(options);
        if (options?.externalData && wasm2.mountExternalData) {
          const loadingPromises = [];
          for (const file of options.externalData) {
            const path = typeof file === "string" ? file : file.path;
            loadingPromises.push(loadFile(typeof file === "string" ? file : file.data).then((data) => {
              wasm2.mountExternalData(path, data);
            }));
          }
          await Promise.all(loadingPromises);
        }
        sessionHandle = wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);
        if (sessionHandle === 0) {
          checkLastError("Can't create a session.");
        }
        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
        const inputNames = [];
        const outputNames = [];
        const outputPreferredLocations = [];
        for (let i = 0; i < inputCount; i++) {
          const name = wasm2._OrtGetInputName(sessionHandle, i);
          if (name === 0) {
            checkLastError("Can't get an input name.");
          }
          inputNamesUTF8Encoded.push(name);
          inputNames.push(wasm2.UTF8ToString(name));
        }
        for (let i = 0; i < outputCount; i++) {
          const name = wasm2._OrtGetOutputName(sessionHandle, i);
          if (name === 0) {
            checkLastError("Can't get an output name.");
          }
          outputNamesUTF8Encoded.push(name);
          const nameString = wasm2.UTF8ToString(name);
          outputNames.push(nameString);
          if (false) {
            const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
            if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
              throw new Error(`Not supported preferred output location: ${location}.`);
            }
            outputPreferredLocations.push(location);
          }
        }
        let bindingState = null;
        if (false) {
          ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
          if (ioBindingHandle === 0) {
            checkLastError("Can't create IO binding.");
          }
          bindingState = {
            handle: ioBindingHandle,
            outputPreferredLocations,
            outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
          };
        }
        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
        return [sessionHandle, inputNames, outputNames];
      } catch (e) {
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        if (ioBindingHandle !== 0) {
          wasm2._OrtReleaseBinding(ioBindingHandle);
        }
        if (sessionHandle !== 0) {
          wasm2._OrtReleaseSession(sessionHandle);
        }
        throw e;
      } finally {
        wasm2._free(modelDataOffset);
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        wasm2.unmountExternalData?.();
      }
    };
    releaseSession = (sessionId) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error(`cannot release session. invalid session id: ${sessionId}`);
      }
      const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
      if (ioBindingState) {
        wasm2._OrtReleaseBinding(ioBindingState.handle);
      }
      wasm2.jsepUnregisterBuffers?.(sessionId);
      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
      wasm2._OrtReleaseSession(sessionHandle);
      activeSessions.delete(sessionId);
    };
    prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
      if (!tensor) {
        tensorHandles.push(0);
        return;
      }
      const wasm2 = getInstance();
      const dataType = tensor[0];
      const dims = tensor[1];
      const location = tensor[3];
      let rawData;
      let dataByteLength;
      if (dataType === "string" && location === "gpu-buffer") {
        throw new Error("String tensor is not supported on GPU.");
      }
      if (location === "gpu-buffer") {
        const gpuBuffer = tensor[2].gpuBuffer;
        const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
        dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
        rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
      } else {
        const data = tensor[2];
        if (Array.isArray(data)) {
          dataByteLength = 4 * data.length;
          rawData = wasm2._malloc(dataByteLength);
          allocs.push(rawData);
          let dataIndex = rawData / 4;
          for (let i = 0; i < data.length; i++) {
            if (typeof data[i] !== "string") {
              throw new TypeError(`tensor data at index ${i} is not a string`);
            }
            wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
          }
        } else {
          dataByteLength = data.byteLength;
          rawData = wasm2._malloc(dataByteLength);
          allocs.push(rawData);
          wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
        }
      }
      const stack = wasm2.stackSave();
      const dimsOffset = wasm2.stackAlloc(4 * dims.length);
      try {
        let dimIndex = dimsOffset / 4;
        dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
        const tensor2 = wasm2._OrtCreateTensor(
          tensorDataTypeStringToEnum(dataType),
          rawData,
          dataByteLength,
          dimsOffset,
          dims.length,
          dataLocationStringToEnum(location)
        );
        if (tensor2 === 0) {
          checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
        }
        tensorHandles.push(tensor2);
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
      }
      const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
      const inputCount = inputIndices.length;
      const outputCount = outputIndices.length;
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      const inputTensorHandles = [];
      const outputTensorHandles = [];
      const inputOutputAllocs = [];
      const beforeRunStack = wasm2.stackSave();
      const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
      const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
      const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
      const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        for (let i = 0; i < inputCount; i++) {
          prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
        }
        for (let i = 0; i < outputCount; i++) {
          prepareInputOutputTensor(
            outputTensors[i],
            outputTensorHandles,
            inputOutputAllocs,
            sessionId,
            inputCount + outputIndices[i]
          );
        }
        let inputValuesIndex = inputValuesOffset / 4;
        let inputNamesIndex = inputNamesOffset / 4;
        let outputValuesIndex = outputValuesOffset / 4;
        let outputNamesIndex = outputNamesOffset / 4;
        for (let i = 0; i < inputCount; i++) {
          wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
          wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
        }
        for (let i = 0; i < outputCount; i++) {
          wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
          wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
        }
        if (false) {
          const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
          if (inputNamesUTF8Encoded.length !== inputCount) {
            throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
          }
          for (let i = 0; i < inputCount; i++) {
            const index = inputIndices[i];
            const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
            if (errorCode2 !== 0) {
              checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
            }
          }
          for (let i = 0; i < outputCount; i++) {
            const index = outputIndices[i];
            const location = outputTensors[i]?.[3];
            if (location) {
              const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
              }
            } else {
              const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
              }
            }
          }
        }
        let errorCode;
        if (false) {
          errorCode = await wasm2._OrtRunWithBinding(
            sessionHandle,
            ioBindingState.handle,
            outputCount,
            outputValuesOffset,
            runOptionsHandle
          );
        } else {
          errorCode = await wasm2._OrtRun(
            sessionHandle,
            inputNamesOffset,
            inputValuesOffset,
            inputCount,
            outputNamesOffset,
            outputCount,
            outputValuesOffset,
            runOptionsHandle
          );
        }
        if (errorCode !== 0) {
          checkLastError("failed to call OrtRun().");
        }
        const output = [];
        for (let i = 0; i < outputCount; i++) {
          const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
          if (tensor === outputTensorHandles[i]) {
            output.push(outputTensors[i]);
            continue;
          }
          const beforeGetTensorDataStack = wasm2.stackSave();
          const tensorDataOffset = wasm2.stackAlloc(4 * 4);
          let keepOutputTensor = false;
          let type, dataOffset = 0;
          try {
            const errorCode2 = wasm2._OrtGetTensorData(
              tensor,
              tensorDataOffset,
              tensorDataOffset + 4,
              tensorDataOffset + 8,
              tensorDataOffset + 12
            );
            if (errorCode2 !== 0) {
              checkLastError(`Can't access output tensor data on index ${i}.`);
            }
            let tensorDataIndex = tensorDataOffset / 4;
            const dataType = wasm2.HEAPU32[tensorDataIndex++];
            dataOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
            const dims = [];
            for (let i2 = 0; i2 < dimsLength; i2++) {
              dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
            }
            wasm2._OrtFree(dimsOffset);
            const size = dims.reduce((a, b) => a * b, 1);
            type = tensorDataTypeEnumToString(dataType);
            const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
            if (type === "string") {
              if (preferredLocation === "gpu-buffer") {
                throw new Error("String tensor is not supported on GPU.");
              }
              const stringData = [];
              let dataIndex = dataOffset / 4;
              for (let i2 = 0; i2 < size; i2++) {
                const offset = wasm2.HEAPU32[dataIndex++];
                const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
              }
              output.push([type, dims, stringData, "cpu"]);
            } else {
              if (preferredLocation === "gpu-buffer" && size > 0) {
                const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                const elementSize = getTensorElementSize(dataType);
                if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                  throw new Error(`Unsupported data type: ${type}`);
                }
                keepOutputTensor = true;
                output.push([
                  type,
                  dims,
                  {
                    gpuBuffer,
                    download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                    dispose: () => {
                      wasm2._OrtReleaseTensor(tensor);
                    }
                  },
                  "gpu-buffer"
                ]);
              } else {
                const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                const data = new typedArrayConstructor(size);
                new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                output.push([type, dims, data, "cpu"]);
              }
            }
          } finally {
            wasm2.stackRestore(beforeGetTensorDataStack);
            if (type === "string" && dataOffset) {
              wasm2._free(dataOffset);
            }
            if (!keepOutputTensor) {
              wasm2._OrtReleaseTensor(tensor);
            }
          }
        }
        if (ioBindingState) {
          wasm2._OrtClearBoundOutputs(ioBindingState.handle);
        }
        return output;
      } finally {
        wasm2.stackRestore(beforeRunStack);
        inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        inputOutputAllocs.forEach((p) => wasm2._free(p));
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    endProfiling = (sessionId) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error("invalid session id");
      }
      const sessionHandle = session[0];
      const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
      if (profileFileName === 0) {
        checkLastError("Can't get an profile file name.");
      }
      wasm2._OrtFree(profileFileName);
    };
    extractTransferableBuffers = (tensors) => {
      const buffers = [];
      for (const tensor of tensors) {
        const data = tensor[2];
        if (!Array.isArray(data) && "buffer" in data) {
          buffers.push(data.buffer);
        }
      }
      return buffers;
    };
  }
});

// proxy-worker:./proxy-worker/main
var require_main = __commonJS({
  "proxy-worker:./proxy-worker/main"(exports, module) {
    module.exports = '/*!\n * ONNX Runtime Web v1.18.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    createReadStream: () => createReadStream,\n    readFile: () => readFile,\n    readFileSync: () => readFileSync\n  });\n  var readFile, readFileSync, createReadStream;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n      readFileSync = void 0;\n      createReadStream = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-training-wasm-simd.js\n  var require_ort_training_wasm_simd = __commonJS({\n    "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var e = moduleArg, k, l;\n          e.ready = new Promise((a, b) => {\n            k = a;\n            l = b;\n          });\n          var aa = Object.assign({}, e), ba = "./this.program", ca = "object" == typeof window, q = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, v = "", x, z, A;\n          if (da) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));\n            v = q ? B.dirname(v) + "/" : __dirname + "/";\n            x = (a, b) => {\n              a = C(a) ? new URL(a) : B.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            A = (a) => {\n              a = x(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            z = (a, b, c, d = true) => {\n              a = C(a) ? new URL(a) : B.normalize(a);\n              fs.readFile(a, d ? void 0 : "utf8", (g, h) => {\n                g ? c(g) : b(d ? h.buffer : h);\n              });\n            };\n            !e.thisProgram && 1 < process.argv.length && (ba = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            e.inspect = () => "[Emscripten Module object]";\n          } else if (ca || q)\n            q ? v = self.location.href : "undefined" != typeof document && document.currentScript && (v = document.currentScript.src), _scriptDir && (v = _scriptDir), 0 !== v.indexOf("blob:") ? v = v.substr(0, v.replace(/[?#].*/, "").lastIndexOf("/") + 1) : v = "", x = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, q && (A = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), z = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            };\n          var ea = console.log.bind(console), D = console.error.bind(console);\n          Object.assign(e, aa);\n          aa = null;\n          "object" != typeof WebAssembly && E("no native wasm support detected");\n          var F, fa = false, G, H, I, J, ha;\n          function ia() {\n            var a = F.buffer;\n            e.HEAP8 = G = new Int8Array(a);\n            e.HEAP16 = new Int16Array(a);\n            e.HEAPU8 = H = new Uint8Array(a);\n            e.HEAPU16 = new Uint16Array(a);\n            e.HEAP32 = I = new Int32Array(a);\n            e.HEAPU32 = J = new Uint32Array(a);\n            e.HEAPF32 = new Float32Array(a);\n            e.HEAPF64 = ha = new Float64Array(a);\n          }\n          var K = [], L = [], ja = [], M = 0, N = null, O = null;\n          function E(a) {\n            a = "Aborted(" + a + ")";\n            D(a);\n            fa = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            l(a);\n            throw a;\n          }\n          var ka = (a) => a.startsWith("data:application/octet-stream;base64,"), C = (a) => a.startsWith("file://"), P;\n          P = "ort-training-wasm-simd.wasm";\n          if (!ka(P)) {\n            var la = P;\n            P = e.locateFile ? e.locateFile(la, v) : v + la;\n          }\n          function ma(a) {\n            if (A)\n              return A(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function na(a) {\n            if (ca || q) {\n              if ("function" == typeof fetch && !C(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => ma(a));\n              if (z)\n                return new Promise((b, c) => {\n                  z(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => ma(a));\n          }\n          function oa(a, b, c) {\n            return na(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              D(`failed to asynchronously prepare wasm: ${d}`);\n              E(d);\n            });\n          }\n          function pa(a, b) {\n            var c = P;\n            return "function" != typeof WebAssembly.instantiateStreaming || ka(c) || C(c) || da || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {\n              D(`wasm streaming compile failed: ${g}`);\n              D("falling back to ArrayBuffer instantiation");\n              return oa(c, a, b);\n            }));\n          }\n          var Q, qa = { 989280: (a, b, c, d) => {\n            if ("undefined" == typeof e || !e.Qa)\n              return 1;\n            a = R(a >>> 0);\n            a.startsWith("./") && (a = a.substring(2));\n            a = e.Qa.get(a);\n            if (!a)\n              return 2;\n            b >>>= 0;\n            c >>>= 0;\n            if (b + c > a.byteLength)\n              return 3;\n            try {\n              return H.set(a.subarray(b, b + c), d >>> 0 >>> 0), 0;\n            } catch {\n              return 4;\n            }\n          } };\n          function ra(a) {\n            this.Ka = a - 24;\n            this.Pa = function(b) {\n              J[this.Ka + 4 >>> 2 >>> 0] = b;\n            };\n            this.Oa = function(b) {\n              J[this.Ka + 8 >>> 2 >>> 0] = b;\n            };\n            this.Ma = function(b, c) {\n              this.Na();\n              this.Pa(b);\n              this.Oa(c);\n            };\n            this.Na = function() {\n              J[this.Ka + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var sa = 0, ta = 0, ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, va = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && ua)\n              return ua.decode(a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  d += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var m = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;\n                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                d += String.fromCharCode(g);\n            }\n            return d;\n          }, R = (a, b) => (a >>>= 0) ? va(H, a, b) : "", S = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, T = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var g = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var m = a.charCodeAt(h);\n              if (55296 <= m && 57343 >= m) {\n                var r = a.charCodeAt(++h);\n                m = 65536 + ((m & 1023) << 10) | r & 1023;\n              }\n              if (127 >= m) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = m;\n              } else {\n                if (2047 >= m) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | m >> 6;\n                } else {\n                  if (65535 >= m) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | m >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | m >> 18;\n                    b[c++ >>> 0] = 128 | m >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | m >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | m & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, U = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ca = (a) => {\n            var b = S(a) + 1, c = Ba(b);\n            c && T(a, H, c, b);\n            return c;\n          }, V = [], W = {}, Da = () => {\n            if (!X) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(\n                "-",\n                "_"\n              ) + ".UTF-8", _: ba || "./this.program" }, b;\n              for (b in W)\n                void 0 === W[b] ? delete a[b] : a[b] = W[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              X = c;\n            }\n            return X;\n          }, X, Ea = [null, [], []], Fa = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ga = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ha(a) {\n            var b = Array(S(a) + 1);\n            T(a, b, 0, b.length);\n            return b;\n          }\n          function Ia(a, b, c, d) {\n            function g(f, n, p) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )\n                f = p[0] + f;\n              return f;\n            }\n            function h(f, n) {\n              return g(f, n, "0");\n            }\n            function m(f, n) {\n              function p(ya) {\n                return 0 > ya ? -1 : 0 < ya ? 1 : 0;\n              }\n              var y;\n              0 === (y = p(f.getFullYear() - n.getFullYear())) && 0 === (y = p(f.getMonth() - n.getMonth())) && (y = p(f.getDate() - n.getDate()));\n              return y;\n            }\n            function r(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function w(f) {\n              var n = f.Ga;\n              for (f = new Date(new Date(f.Ha + 1900, 0, 1).getTime()); 0 < n; ) {\n                var p = f.getMonth(), y = (U(f.getFullYear()) ? Fa : Ga)[p];\n                if (n > y - f.getDate())\n                  n -= y - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + n);\n                  break;\n                }\n              }\n              p = new Date(f.getFullYear() + 1, 0, 4);\n              n = r(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              p = r(p);\n              return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var t = J[d + 40 >>> 2 >>> 0];\n            d = { Ta: I[d >>> 2 >>> 0], Sa: I[d + 4 >>> 2 >>> 0], Ia: I[d + 8 >>> 2 >>> 0], La: I[d + 12 >>> 2 >>> 0], Ja: I[d + 16 >>> 2 >>> 0], Ha: I[d + 20 >>> 2 >>> 0], Ba: I[d + 24 >>> 2 >>> 0], Ga: I[d + 28 >>> 2 >>> 0], Va: I[d + 32 >>> 2 >>> 0], Ra: I[d + 36 >>> 2 >>> 0], Ua: t ? R(t) : "" };\n            c = R(c);\n            t = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var u in t)\n              c = c.replace(new RegExp(u, "g"), t[u]);\n            var za = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Aa = "January February March April May June July August September October November December".split(" ");\n            t = {\n              "%a": (f) => za[f.Ba].substring(0, 3),\n              "%A": (f) => za[f.Ba],\n              "%b": (f) => Aa[f.Ja].substring(0, 3),\n              "%B": (f) => Aa[f.Ja],\n              "%C": (f) => h((f.Ha + 1900) / 100 | 0, 2),\n              "%d": (f) => h(f.La, 2),\n              "%e": (f) => g(f.La, 2, " "),\n              "%g": (f) => w(f).toString().substring(2),\n              "%G": (f) => w(f),\n              "%H": (f) => h(f.Ia, 2),\n              "%I": (f) => {\n                f = f.Ia;\n                0 == f ? f = 12 : 12 < f && (f -= 12);\n                return h(f, 2);\n              },\n              "%j": (f) => {\n                for (var n = 0, p = 0; p <= f.Ja - 1; n += (U(f.Ha + 1900) ? Fa : Ga)[p++])\n                  ;\n                return h(f.La + n, 3);\n              },\n              "%m": (f) => h(f.Ja + 1, 2),\n              "%M": (f) => h(f.Sa, 2),\n              "%n": () => "\\n",\n              "%p": (f) => 0 <= f.Ia && 12 > f.Ia ? "AM" : "PM",\n              "%S": (f) => h(f.Ta, 2),\n              "%t": () => "	",\n              "%u": (f) => f.Ba || 7,\n              "%U": (f) => h(\n                Math.floor((f.Ga + 7 - f.Ba) / 7),\n                2\n              ),\n              "%V": (f) => {\n                var n = Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7);\n                2 >= (f.Ba + 371 - f.Ga - 2) % 7 && n++;\n                if (n)\n                  53 == n && (p = (f.Ba + 371 - f.Ga) % 7, 4 == p || 3 == p && U(f.Ha) || (n = 1));\n                else {\n                  n = 52;\n                  var p = (f.Ba + 7 - f.Ga - 1) % 7;\n                  (4 == p || 5 == p && U(f.Ha % 400 - 1)) && n++;\n                }\n                return h(n, 2);\n              },\n              "%w": (f) => f.Ba,\n              "%W": (f) => h(Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7), 2),\n              "%y": (f) => (f.Ha + 1900).toString().substring(2),\n              "%Y": (f) => f.Ha + 1900,\n              "%z": (f) => {\n                f = f.Ra;\n                var n = 0 <= f;\n                f = Math.abs(f) / 60;\n                return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n              },\n              "%Z": (f) => f.Ua,\n              "%%": () => "%"\n            };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (u in t)\n              c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            u = Ha(c);\n            if (u.length > b)\n              return 0;\n            G.set(u, a >>> 0);\n            return u.length - 1;\n          }\n          var La = { a: function(a, b, c) {\n            a >>>= 0;\n            new ra(a).Ma(b >>> 0, c >>> 0);\n            sa = a;\n            ta++;\n            throw sa;\n          }, e: function() {\n            return 0;\n          }, H: function() {\n          }, x: function() {\n          }, z: function() {\n          }, J: function() {\n            return 0;\n          }, F: function() {\n          }, A: function() {\n          }, E: function() {\n          }, g: function() {\n          }, y: function() {\n          }, v: function() {\n          }, G: function() {\n          }, w: function() {\n          }, k: () => 1, n: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            I[c >>> 2 >>> 0] = a.getUTCSeconds();\n            I[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n            I[c + 8 >>> 2 >>> 0] = a.getUTCHours();\n            I[c + 12 >>> 2 >>> 0] = a.getUTCDate();\n            I[c + 16 >>> 2 >>> 0] = a.getUTCMonth();\n            I[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n            I[c + 24 >>> 2 >>> 0] = a.getUTCDay();\n            I[c + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n          }, o: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            I[c >>> 2 >>> 0] = a.getSeconds();\n            I[c + 4 >>> 2 >>> 0] = a.getMinutes();\n            I[c + 8 >>> 2 >>> 0] = a.getHours();\n            I[c + 12 >>> 2 >>> 0] = a.getDate();\n            I[c + 16 >>> 2 >>> 0] = a.getMonth();\n            I[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n            I[c + 24 >>> 2 >>> 0] = a.getDay();\n            I[c + 28 >>> 2 >>> 0] = (U(a.getFullYear()) ? wa : xa)[a.getMonth()] + a.getDate() - 1 | 0;\n            I[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n            var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n            I[c + 32 >>> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;\n          }, p: function(a) {\n            a >>>= 0;\n            var b = new Date(I[a + 20 >>> 2 >>> 0] + 1900, I[a + 16 >>> 2 >>> 0], I[a + 12 >>> 2 >>> 0], I[a + 8 >>> 2 >>> 0], I[a + 4 >>> 2 >>> 0], I[a >>> 2 >>> 0], 0), c = I[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);\n            0 > c ? I[a + 32 >>> 2 >>> 0] = Number(g != h && m == d) : 0 < c != (m == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - d)));\n            I[a + 24 >>> 2 >>> 0] = b.getDay();\n            I[a + 28 >>> 2 >>> 0] = (U(b.getFullYear()) ? wa : xa)[b.getMonth()] + b.getDate() - 1 | 0;\n            I[a >>> 2 >>> 0] = b.getSeconds();\n            I[a + 4 >>> 2 >>> 0] = b.getMinutes();\n            I[a + 8 >>> 2 >>> 0] = b.getHours();\n            I[a + 12 >>> 2 >>> 0] = b.getDate();\n            I[a + 16 >>> 2 >>> 0] = b.getMonth();\n            I[a + 20 >>> 2 >>> 0] = b.getYear();\n            a = b.getTime();\n            isNaN(a) ? (I[Ja() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n            return Ka((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n          }, l: function() {\n            return -52;\n          }, m: function() {\n          }, t: function(a, b, c) {\n            function d(w) {\n              return (w = w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? w[1] : "GMT";\n            }\n            c >>>= 0;\n            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);\n            g = h.getTimezoneOffset();\n            var r = m.getTimezoneOffset();\n            J[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(g, r);\n            I[b >>> 0 >>> 2 >>> 0] = Number(g != r);\n            a = d(h);\n            b = d(m);\n            a = Ca(a);\n            b = Ca(b);\n            r < g ? (J[c >>> 2 >>> 0] = a, J[c + 4 >>> 2 >>> 0] = b) : (J[c >>> 2 >>> 0] = b, J[c + 4 >>> 2 >>> 0] = a);\n          }, d: () => {\n            E("");\n          }, B: function(a, b, c) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            V.length = 0;\n            for (var d; d = H[b++ >>> 0]; ) {\n              var g = 105 != d;\n              g &= 112 != d;\n              c += g && c % 8 ? 4 : 0;\n              V.push(112 == d ? J[c >>> 2 >>> 0] : 105 == d ? I[c >>> 2 >>> 0] : ha[c >>> 3 >>> 0]);\n              c += g ? 8 : 4;\n            }\n            return qa[a].apply(null, V);\n          }, h: () => Date.now(), u: function() {\n            return 4294901760;\n          }, b: () => performance.now(), I: function(a, b, c) {\n            b >>>= 0;\n            return H.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n          }, s: function(a) {\n            a >>>= 0;\n            var b = H.length;\n            if (4294901760 < a)\n              return false;\n            for (var c = 1; 4 >= c; c *= 2) {\n              var d = b * (1 + 0.2 / c);\n              d = Math.min(d, a + 100663296);\n              var g = Math;\n              d = Math.max(a, d);\n              a: {\n                g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535) / 65536;\n                try {\n                  F.grow(g);\n                  ia();\n                  var h = 1;\n                  break a;\n                } catch (m) {\n                }\n                h = void 0;\n              }\n              if (h)\n                return true;\n            }\n            return false;\n          }, C: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Da().forEach((d, g) => {\n              var h = b + c;\n              g = J[a + 4 * g >>> 2 >>> 0] = h;\n              for (h = 0; h < d.length; ++h)\n                G[g++ >>> 0 >>> 0] = d.charCodeAt(h);\n              G[g >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }, D: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = Da();\n            J[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((g) => d += g.length + 1);\n            J[b >>> 2 >>> 0] = d;\n            return 0;\n          }, f: () => 52, j: function() {\n            return 52;\n          }, q: function() {\n            return 70;\n          }, i: function(a, b, c, d) {\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var g = 0, h = 0; h < c; h++) {\n              var m = J[b >>> 2 >>> 0], r = J[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var w = 0; w < r; w++) {\n                var t = H[m + w >>> 0], u = Ea[a];\n                0 === t || 10 === t ? ((1 === a ? ea : D)(va(u, 0)), u.length = 0) : u.push(t);\n              }\n              g += r;\n            }\n            J[d >>> 2 >>> 0] = g;\n            return 0;\n          }, r: Ia, c: function(a, b, c, d) {\n            return Ia(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n          } }, Y = function() {\n            function a(c) {\n              Y = c.exports;\n              Y = Ma();\n              F = Y.K;\n              ia();\n              L.unshift(Y.L);\n              M--;\n              0 == M && (null !== N && (clearInterval(N), N = null), O && (c = O, O = null, c()));\n              return Y;\n            }\n            var b = { a: La };\n            M++;\n            if (e.instantiateWasm)\n              try {\n                return e.instantiateWasm(b, a);\n              } catch (c) {\n                D(`Module.instantiateWasm callback failed with error: ${c}`), l(c);\n              }\n            pa(b, function(c) {\n              a(c.instance);\n            }).catch(l);\n            return {};\n          }();\n          e._OrtInit = (a, b) => (e._OrtInit = Y.M)(a, b);\n          e._OrtGetLastError = (a, b) => (e._OrtGetLastError = Y.N)(a, b);\n          e._OrtCreateSessionOptions = (a, b, c, d, g, h, m, r, w, t) => (e._OrtCreateSessionOptions = Y.O)(a, b, c, d, g, h, m, r, w, t);\n          e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = Y.P)(a, b);\n          e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = Y.Q)(a, b, c);\n          e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = Y.R)(a, b, c);\n          e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = Y.S)(a);\n          e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = Y.T)(a, b, c);\n          e._OrtReleaseSession = (a) => (e._OrtReleaseSession = Y.U)(a);\n          e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = Y.V)(a, b, c);\n          e._OrtGetInputName = (a, b) => (e._OrtGetInputName = Y.W)(a, b);\n          e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = Y.X)(a, b);\n          e._OrtFree = (a) => (e._OrtFree = Y.Y)(a);\n          e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = Y.Z)(a, b, c, d, g, h);\n          e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = Y._)(a, b, c, d, g);\n          e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = Y.$)(a);\n          e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = Y.aa)(a, b, c, d);\n          e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = Y.ba)(a, b, c);\n          e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = Y.ca)(a);\n          e._OrtCreateBinding = (a) => (e._OrtCreateBinding = Y.da)(a);\n          e._OrtBindInput = (a, b, c) => (e._OrtBindInput = Y.ea)(a, b, c);\n          e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = Y.fa)(a, b, c, d);\n          e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = Y.ga)(a);\n          e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = Y.ha)(a);\n          e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = Y.ia)(a, b, c, d, g);\n          e._OrtRun = (a, b, c, d, g, h, m, r) => (e._OrtRun = Y.ja)(a, b, c, d, g, h, m, r);\n          e._OrtEndProfiling = (a) => (e._OrtEndProfiling = Y.ka)(a);\n          e._OrtTrainingLoadCheckpoint = (a, b) => (e._OrtTrainingLoadCheckpoint = Y.la)(a, b);\n          e._OrtTrainingReleaseCheckpoint = (a) => (e._OrtTrainingReleaseCheckpoint = Y.ma)(a);\n          e._OrtTrainingCreateSession = (a, b, c, d, g, h, m, r) => (e._OrtTrainingCreateSession = Y.na)(a, b, c, d, g, h, m, r);\n          e._OrtTrainingLazyResetGrad = (a) => (e._OrtTrainingLazyResetGrad = Y.oa)(a);\n          e._OrtTrainingRunTrainStep = (a, b, c, d, g, h) => (e._OrtTrainingRunTrainStep = Y.pa)(a, b, c, d, g, h);\n          e._OrtTrainingOptimizerStep = (a, b) => (e._OrtTrainingOptimizerStep = Y.qa)(a, b);\n          e._OrtTrainingEvalStep = (a, b, c, d, g, h) => (e._OrtTrainingEvalStep = Y.ra)(a, b, c, d, g, h);\n          e._OrtTrainingGetParametersSize = (a, b, c) => (e._OrtTrainingGetParametersSize = Y.sa)(a, b, c);\n          e._OrtTrainingCopyParametersToBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersToBuffer = Y.ta)(a, b, c, d);\n          e._OrtTrainingCopyParametersFromBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersFromBuffer = Y.ua)(a, b, c, d);\n          e._OrtTrainingGetModelInputOutputCount = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputCount = Y.va)(a, b, c, d);\n          e._OrtTrainingGetModelInputOutputName = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputName = Y.wa)(a, b, c, d);\n          e._OrtTrainingReleaseSession = (a) => (e._OrtTrainingReleaseSession = Y.xa)(a);\n          var Ja = () => (Ja = Y.ya)(), Ba = e._malloc = (a) => (Ba = e._malloc = Y.za)(a);\n          e._free = (a) => (e._free = Y.Aa)(a);\n          var Ka = (a) => (Ka = Y.Ca)(a), Na = () => (Na = Y.Da)(), Oa = (a) => (Oa = Y.Ea)(a), Pa = (a) => (Pa = Y.Fa)(a);\n          function Ma() {\n            var a = Y;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;\n            a.ya = b(a.ya);\n            a.za = c(a.za);\n            a.Da = b(a.Da);\n            a.Fa = c(a.Fa);\n            return a;\n          }\n          e.stackAlloc = Pa;\n          e.stackSave = Na;\n          e.stackRestore = Oa;\n          e.UTF8ToString = R;\n          e.stringToUTF8 = (a, b, c) => T(a, H, b, c);\n          e.lengthBytesUTF8 = S;\n          var Z;\n          O = function Qa() {\n            Z || Ra();\n            Z || (O = Qa);\n          };\n          function Ra() {\n            if (!(0 < M)) {\n              if (e.preRun)\n                for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; ) {\n                  var a = e.preRun.shift();\n                  K.unshift(a);\n                }\n              for (; 0 < K.length; )\n                K.shift()(e);\n              if (!(0 < M || Z || (Z = true, e.calledRun = true, fa))) {\n                for (; 0 < L.length; )\n                  L.shift()(e);\n                for (k(e); 0 < ja.length; )\n                  ja.shift()(e);\n              }\n            }\n          }\n          Ra();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function aa() {\n            e.buffer != l.buffer && m();\n            return l;\n          }\n          function n() {\n            e.buffer != l.buffer && m();\n            return ba;\n          }\n          function p() {\n            e.buffer != l.buffer && m();\n            return ca;\n          }\n          function r() {\n            e.buffer != l.buffer && m();\n            return da;\n          }\n          function ea() {\n            e.buffer != l.buffer && m();\n            return fa;\n          }\n          var v = moduleArg, ha, x;\n          v.ready = new Promise((a, b) => {\n            ha = a;\n            x = b;\n          });\n          var ia = Object.assign({}, v), ja = "./this.program", z = (a, b) => {\n            throw b;\n          }, ka = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = v.ENVIRONMENT_IS_PTHREAD || false, E = "";\n          function la(a) {\n            return v.locateFile ? v.locateFile(a, E) : E + a;\n          }\n          var ma, G, H;\n          if (B) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));\n            E = A ? na.dirname(E) + "/" : __dirname + "/";\n            ma = (b, c) => {\n              b = I(b) ? new URL(b) : na.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            H = (b) => {\n              b = ma(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            G = (b, c, d, g = true) => {\n              b = I(b) ? new URL(b) : na.normalize(b);\n              fs.readFile(b, g ? void 0 : "utf8", (h, k) => {\n                h ? d(h) : c(g ? k.buffer : k);\n              });\n            };\n            !v.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            z = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            v.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (ka || A)\n            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ma = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, A && (H = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), G = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var oa = console.log.bind(console), pa = console.error.bind(console);\n          B && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var qa = oa, J = pa;\n          Object.assign(v, ia);\n          ia = null;\n          "object" != typeof WebAssembly && ra("no native wasm support detected");\n          var e, sa, K = false, L, l, ba, ca, da, fa;\n          function m() {\n            var a = e.buffer;\n            v.HEAP8 = l = new Int8Array(a);\n            v.HEAP16 = new Int16Array(a);\n            v.HEAPU8 = ba = new Uint8Array(a);\n            v.HEAPU16 = new Uint16Array(a);\n            v.HEAP32 = ca = new Int32Array(a);\n            v.HEAPU32 = da = new Uint32Array(a);\n            v.HEAPF32 = new Float32Array(a);\n            v.HEAPF64 = fa = new Float64Array(a);\n          }\n          var ta = 16777216;\n          if (D)\n            e = v.wasmMemory;\n          else if (v.wasmMemory)\n            e = v.wasmMemory;\n          else if (e = new WebAssembly.Memory({ initial: ta / 65536, maximum: 65536, shared: true }), !(e.buffer instanceof SharedArrayBuffer))\n            throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          m();\n          ta = e.buffer.byteLength;\n          var ua = [], va = [], wa = [], M = 0, xa = null, N = null;\n          function ya() {\n            M--;\n            if (0 == M && (null !== xa && (clearInterval(xa), xa = null), N)) {\n              var a = N;\n              N = null;\n              a();\n            }\n          }\n          function ra(a) {\n            a = "Aborted(" + a + ")";\n            J(a);\n            K = true;\n            L = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            x(a);\n            throw a;\n          }\n          var za = (a) => a.startsWith("data:application/octet-stream;base64,"), I = (a) => a.startsWith("file://"), O;\n          O = "ort-wasm-threaded.wasm";\n          za(O) || (O = la(O));\n          function Aa(a) {\n            if (H)\n              return H(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Ba(a) {\n            if (ka || A) {\n              if ("function" == typeof fetch && !I(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Aa(a));\n              if (G)\n                return new Promise((b, c) => {\n                  G(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => Aa(a));\n          }\n          function Ca(a, b, c) {\n            return Ba(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              J(`failed to asynchronously prepare wasm: ${d}`);\n              ra(d);\n            });\n          }\n          function Da(a, b) {\n            var c = O;\n            return "function" != typeof WebAssembly.instantiateStreaming || za(c) || I(c) || B || "function" != typeof fetch ? Ca(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {\n              J(`wasm streaming compile failed: ${g}`);\n              J("falling back to ArrayBuffer instantiation");\n              return Ca(c, a, b);\n            }));\n          }\n          var P, Ea = { 920140: (a, b, c, d) => {\n            if ("undefined" == typeof v || !v.cb)\n              return 1;\n            a = Q(a >>> 0);\n            a.startsWith("./") && (a = a.substring(2));\n            a = v.cb.get(a);\n            if (!a)\n              return 2;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if (b + c > a.byteLength)\n              return 3;\n            try {\n              return n().set(a.subarray(b, b + c), d >>> 0), 0;\n            } catch {\n              return 4;\n            }\n          } };\n          function R(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          var Fa = (a) => {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }, Ha = (a) => {\n            0 == S.Pa.length && (Ga(), S.Ya(S.Pa[0]));\n            var b = S.Pa.pop();\n            if (!b)\n              return 6;\n            S.Qa.push(b);\n            S.Ma[a.Oa] = b;\n            b.Oa = a.Oa;\n            var c = { cmd: "run", start_routine: a.kb, arg: a.hb, pthread_ptr: a.Oa };\n            B && b.unref();\n            b.postMessage(c, a.qb);\n            return 0;\n          }, T = 0, Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Ia)\n              return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  d += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var k = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;\n                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                d += String.fromCharCode(g);\n            }\n            return d;\n          }, Q = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "", La = (a) => {\n            var b = Ka();\n            a = a();\n            U(b);\n            return a;\n          };\n          function V(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return La(() => {\n              for (var g = Ma(8 * c), h = g >>> 3, k = 0; k < c; k++) {\n                var t = d[2 + k];\n                ea()[h + k >>> 0] = t;\n              }\n              return Na(a, c, g, b);\n            });\n          }\n          function Oa(a) {\n            if (D)\n              return V(0, 1, a);\n            L = a;\n            0 < T || (S.lb(), v.onExit?.(a), K = true);\n            z(a, new R(a));\n          }\n          var Qa = (a) => {\n            L = a;\n            if (D)\n              throw Pa(a), "unwind";\n            Oa(a);\n          };\n          function Ra() {\n            for (var a = v.numThreads; a--; )\n              Ga();\n            ua.unshift(() => {\n              M++;\n              Sa(() => ya());\n            });\n          }\n          function Ga() {\n            var a = la("ort-wasm-threaded.worker.js");\n            a = new Worker(a);\n            S.Pa.push(a);\n          }\n          function Sa(a) {\n            D ? a() : Promise.all(S.Pa.map(S.Ya)).then(a);\n          }\n          var S = { Pa: [], Qa: [], bb: [], Ma: {}, Wa() {\n            D ? (S.receiveObjectTransfer = S.jb, S.threadInitTLS = S.ab, S.setExitStatus = S.$a) : Ra();\n          }, $a: (a) => L = a, tb: ["$terminateWorker"], lb: () => {\n            for (var a of S.Qa)\n              Fa(a);\n            for (a of S.Pa)\n              Fa(a);\n            S.Pa = [];\n            S.Qa = [];\n            S.Ma = [];\n          }, Za: (a) => {\n            var b = a.Oa;\n            delete S.Ma[b];\n            S.Pa.push(a);\n            S.Qa.splice(S.Qa.indexOf(a), 1);\n            a.Oa = 0;\n            Ta(b);\n          }, jb() {\n          }, ab() {\n            S.bb.forEach((a) => a());\n          }, Ya: (a) => new Promise((b) => {\n            a.onmessage = (h) => {\n              h = h.data;\n              var k = h.cmd;\n              if (h.targetThread && h.targetThread != W()) {\n                var t = S.Ma[h.targetThread];\n                t ? t.postMessage(h, h.transferList) : J(`Internal error! Worker sent a message "${k}" to target pthread ${h.targetThread}, but that thread no longer exists!`);\n              } else if ("checkMailbox" === k)\n                X();\n              else if ("spawnThread" === k)\n                Ha(h);\n              else if ("cleanupThread" === k)\n                S.Za(S.Ma[h.thread]);\n              else if ("killThread" === k)\n                h = h.thread, k = S.Ma[h], delete S.Ma[h], Fa(k), Ta(h), S.Qa.splice(S.Qa.indexOf(k), 1), k.Oa = 0;\n              else if ("cancelThread" === k)\n                S.Ma[h.thread].postMessage({ cmd: "cancel" });\n              else if ("loaded" === k)\n                a.loaded = true, B && !a.Oa && a.unref(), b(a);\n              else if ("alert" === k)\n                alert(`Thread ${h.threadId}: ${h.text}`);\n              else if ("setimmediate" === h.target)\n                a.postMessage(h);\n              else if ("callHandler" === k)\n                v[h.handler](...h.args);\n              else\n                k && J(`worker sent an unknown command ${k}`);\n            };\n            a.onerror = (h) => {\n              J(`${"worker sent an error!"} ${h.filename}:${h.lineno}: ${h.message}`);\n              throw h;\n            };\n            B && (a.on("message", (h) => a.onmessage({ data: h })), a.on("error", (h) => a.onerror(h)));\n            var c = [], d = ["onExit"], g;\n            for (g of d)\n              v.hasOwnProperty(g) && c.push(g);\n            a.postMessage({ cmd: "load", handlers: c, urlOrBlob: v.mainScriptUrlOrBlob || _scriptDir, wasmMemory: e, wasmModule: sa });\n          }) };\n          v.PThread = S;\n          var Ua = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(v);\n          };\n          v.establishStackSpace = () => {\n            var a = W(), b = r()[a + 52 >>> 2 >>> 0];\n            a = r()[a + 56 >>> 2 >>> 0];\n            Va(b, b - a);\n            U(b);\n          };\n          function Pa(a) {\n            if (D)\n              return V(1, 0, a);\n            Qa(a);\n          }\n          var Wa = [], Xa;\n          v.invokeEntryPoint = (a, b) => {\n            var c = Wa[a];\n            c || (a >= Wa.length && (Wa.length = a + 1), Wa[a] = c = Xa.get(a));\n            a = c(b);\n            0 < T ? S.$a(a) : Ya(a);\n          };\n          function Za(a) {\n            this.Va = a - 24;\n            this.gb = function(b) {\n              r()[this.Va + 4 >>> 2 >>> 0] = b;\n            };\n            this.fb = function(b) {\n              r()[this.Va + 8 >>> 2 >>> 0] = b;\n            };\n            this.Wa = function(b, c) {\n              this.eb();\n              this.gb(b);\n              this.fb(c);\n            };\n            this.eb = function() {\n              r()[this.Va + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var $a = 0, ab = 0;\n          function bb(a, b, c, d) {\n            return D ? V(2, 1, a, b, c, d) : cb(a, b, c, d);\n          }\n          function cb(a, b, c, d) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var g = [];\n            if (D && 0 === g.length)\n              return bb(a, b, c, d);\n            a = { kb: c, Oa: a, hb: d, qb: g };\n            return D ? (a.sb = "spawnThread", postMessage(a, g), 0) : Ha(a);\n          }\n          function db(a, b, c) {\n            return D ? V(3, 1, a, b, c) : 0;\n          }\n          function eb(a, b) {\n            if (D)\n              return V(4, 1, a, b);\n          }\n          var fb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, gb = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var g = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var k = a.charCodeAt(h);\n              if (55296 <= k && 57343 >= k) {\n                var t = a.charCodeAt(++h);\n                k = 65536 + ((k & 1023) << 10) | t & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, hb = (a, b, c) => gb(a, n(), b, c);\n          function ib(a, b) {\n            if (D)\n              return V(5, 1, a, b);\n          }\n          function jb(a, b, c) {\n            if (D)\n              return V(6, 1, a, b, c);\n          }\n          function kb(a, b, c) {\n            return D ? V(7, 1, a, b, c) : 0;\n          }\n          function lb(a, b) {\n            if (D)\n              return V(8, 1, a, b);\n          }\n          function mb(a, b, c) {\n            if (D)\n              return V(9, 1, a, b, c);\n          }\n          function nb(a, b, c, d) {\n            if (D)\n              return V(10, 1, a, b, c, d);\n          }\n          function ob(a, b, c, d) {\n            if (D)\n              return V(11, 1, a, b, c, d);\n          }\n          function pb(a, b, c, d) {\n            if (D)\n              return V(12, 1, a, b, c, d);\n          }\n          function qb(a) {\n            if (D)\n              return V(13, 1, a);\n          }\n          function rb(a, b) {\n            if (D)\n              return V(14, 1, a, b);\n          }\n          function sb(a, b, c) {\n            if (D)\n              return V(15, 1, a, b, c);\n          }\n          function tb(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.rb && (Atomics.rb(p(), a >>> 2, a).value.then(X), a += 128, Atomics.store(p(), a >>> 2, 1));\n          }\n          v.__emscripten_thread_mailbox_await = tb;\n          var X = () => {\n            var a = W();\n            if (a && (tb(a), a = ub, !K))\n              try {\n                if (a(), !(0 < T))\n                  try {\n                    D ? Ya(L) : Qa(L);\n                  } catch (b) {\n                    b instanceof R || "unwind" == b || z(1, b);\n                  }\n              } catch (b) {\n                b instanceof R || "unwind" == b || z(1, b);\n              }\n          };\n          v.checkMailbox = X;\n          var vb = [], Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function yb(a, b, c, d, g, h, k, t) {\n            return D ? V(16, 1, a, b, c, d, g, h, k, t) : -52;\n          }\n          function zb(a, b, c, d, g, h, k) {\n            if (D)\n              return V(17, 1, a, b, c, d, g, h, k);\n          }\n          var Bb = (a) => {\n            var b = fb(a) + 1, c = Ab(b);\n            c && hb(a, c, b);\n            return c;\n          }, Cb = [], Db = {}, Fb = () => {\n            if (!Eb) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;\n              for (b in Db)\n                void 0 === Db[b] ? delete a[b] : a[b] = Db[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Eb = c;\n            }\n            return Eb;\n          }, Eb;\n          function Gb(a, b) {\n            if (D)\n              return V(18, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Fb().forEach((d, g) => {\n              var h = b + c;\n              g = r()[a + 4 * g >>> 2 >>> 0] = h;\n              for (h = 0; h < d.length; ++h)\n                aa()[g++ >>> 0 >>> 0] = d.charCodeAt(h);\n              aa()[g >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Kb(a, b) {\n            if (D)\n              return V(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = Fb();\n            r()[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((g) => d += g.length + 1);\n            r()[b >>> 2 >>> 0] = d;\n            return 0;\n          }\n          function Lb(a) {\n            return D ? V(20, 1, a) : 52;\n          }\n          function Mb(a, b, c, d) {\n            return D ? V(21, 1, a, b, c, d) : 52;\n          }\n          function Nb(a, b, c, d, g) {\n            return D ? V(22, 1, a, b, c, d, g) : 70;\n          }\n          var Ob = [null, [], []];\n          function Pb(a, b, c, d) {\n            if (D)\n              return V(23, 1, a, b, c, d);\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var g = 0, h = 0; h < c; h++) {\n              var k = r()[b >>> 2 >>> 0], t = r()[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var C = 0; C < t; C++) {\n                var w = n()[k + C >>> 0], y = Ob[a];\n                0 === w || 10 === w ? ((1 === a ? qa : J)(Ja(y, 0)), y.length = 0) : y.push(w);\n              }\n              g += t;\n            }\n            r()[d >>> 2 >>> 0] = g;\n            return 0;\n          }\n          var Qb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Rb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Sb(a) {\n            var b = Array(fb(a) + 1);\n            gb(a, b, 0, b.length);\n            return b;\n          }\n          var Tb = (a, b) => {\n            aa().set(a, b >>> 0);\n          };\n          function Ub(a, b, c, d) {\n            function g(f, q, u) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < q; )\n                f = u[0] + f;\n              return f;\n            }\n            function h(f, q) {\n              return g(f, q, "0");\n            }\n            function k(f, q) {\n              function u(Hb) {\n                return 0 > Hb ? -1 : 0 < Hb ? 1 : 0;\n              }\n              var F;\n              0 === (F = u(f.getFullYear() - q.getFullYear())) && 0 === (F = u(f.getMonth() - q.getMonth())) && (F = u(f.getDate() - q.getDate()));\n              return F;\n            }\n            function t(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function C(f) {\n              var q = f.Ra;\n              for (f = new Date(new Date(f.Sa + 1900, 0, 1).getTime()); 0 < q; ) {\n                var u = f.getMonth(), F = (Y(f.getFullYear()) ? Qb : Rb)[u];\n                if (q > F - f.getDate())\n                  q -= F - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + q);\n                  break;\n                }\n              }\n              u = new Date(f.getFullYear() + 1, 0, 4);\n              q = t(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              u = t(u);\n              return 0 >= k(q, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var w = r()[d + 40 >>> 2 >>> 0];\n            d = { ob: p()[d >>> 2 >>> 0], nb: p()[d + 4 >>> 2 >>> 0], Ta: p()[d + 8 >>> 2 >>> 0], Xa: p()[d + 12 >>> 2 >>> 0], Ua: p()[d + 16 >>> 2 >>> 0], Sa: p()[d + 20 >>> 2 >>> 0], Na: p()[d + 24 >>> 2 >>> 0], Ra: p()[d + 28 >>> 2 >>> 0], ub: p()[d + 32 >>> 2 >>> 0], mb: p()[d + 36 >>> 2 >>> 0], pb: w ? Q(w) : "" };\n            c = Q(c);\n            w = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var y in w)\n              c = c.replace(new RegExp(y, "g"), w[y]);\n            var Ib = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Jb = "January February March April May June July August September October November December".split(" ");\n            w = {\n              "%a": (f) => Ib[f.Na].substring(0, 3),\n              "%A": (f) => Ib[f.Na],\n              "%b": (f) => Jb[f.Ua].substring(0, 3),\n              "%B": (f) => Jb[f.Ua],\n              "%C": (f) => h((f.Sa + 1900) / 100 | 0, 2),\n              "%d": (f) => h(f.Xa, 2),\n              "%e": (f) => g(f.Xa, 2, " "),\n              "%g": (f) => C(f).toString().substring(2),\n              "%G": (f) => C(f),\n              "%H": (f) => h(f.Ta, 2),\n              "%I": (f) => {\n                f = f.Ta;\n                0 == f ? f = 12 : 12 < f && (f -= 12);\n                return h(f, 2);\n              },\n              "%j": (f) => {\n                for (var q = 0, u = 0; u <= f.Ua - 1; q += (Y(f.Sa + 1900) ? Qb : Rb)[u++])\n                  ;\n                return h(f.Xa + q, 3);\n              },\n              "%m": (f) => h(f.Ua + 1, 2),\n              "%M": (f) => h(f.nb, 2),\n              "%n": () => "\\n",\n              "%p": (f) => 0 <= f.Ta && 12 > f.Ta ? "AM" : "PM",\n              "%S": (f) => h(f.ob, 2),\n              "%t": () => "	",\n              "%u": (f) => f.Na || 7,\n              "%U": (f) => h(Math.floor((f.Ra + 7 - f.Na) / 7), 2),\n              "%V": (f) => {\n                var q = Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7);\n                2 >= (f.Na + 371 - f.Ra - 2) % 7 && q++;\n                if (q)\n                  53 == q && (u = (f.Na + 371 - f.Ra) % 7, 4 == u || 3 == u && Y(f.Sa) || (q = 1));\n                else {\n                  q = 52;\n                  var u = (f.Na + 7 - f.Ra - 1) % 7;\n                  (4 == u || 5 == u && Y(f.Sa % 400 - 1)) && q++;\n                }\n                return h(q, 2);\n              },\n              "%w": (f) => f.Na,\n              "%W": (f) => h(Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7), 2),\n              "%y": (f) => (f.Sa + 1900).toString().substring(2),\n              "%Y": (f) => f.Sa + 1900,\n              "%z": (f) => {\n                f = f.mb;\n                var q = 0 <= f;\n                f = Math.abs(f) / 60;\n                return (q ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n              },\n              "%Z": (f) => f.pb,\n              "%%": () => "%"\n            };\n            c = c.replace(\n              /%%/g,\n              "\\0\\0"\n            );\n            for (y in w)\n              c.includes(y) && (c = c.replace(new RegExp(y, "g"), w[y](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            y = Sb(c);\n            if (y.length > b)\n              return 0;\n            Tb(y, a);\n            return y.length - 1;\n          }\n          S.Wa();\n          var Vb = [Oa, Pa, bb, db, eb, ib, jb, kb, lb, mb, nb, ob, pb, qb, rb, sb, yb, zb, Gb, Kb, Lb, Mb, Nb, Pb], Zb = {\n            b: function(a, b, c) {\n              a >>>= 0;\n              new Za(a).Wa(b >>> 0, c >>> 0);\n              $a = a;\n              ab++;\n              throw $a;\n            },\n            L: function(a) {\n              Wb(a >>> 0, !A, 1, !ka, 131072, false);\n              S.ab();\n            },\n            j: function(a) {\n              a >>>= 0;\n              D ? postMessage({ cmd: "cleanupThread", thread: a }) : S.Za(S.Ma[a]);\n            },\n            H: cb,\n            h: db,\n            S: eb,\n            D: ib,\n            F: jb,\n            T: kb,\n            Q: lb,\n            J: mb,\n            P: nb,\n            n: ob,\n            E: pb,\n            B: qb,\n            R: rb,\n            C: sb,\n            p: () => 1,\n            z: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => X()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = S.Ma[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            I: function(a, b, c, d) {\n              b >>>= 0;\n              vb.length = c;\n              d = d >>> 0 >>> 3;\n              for (var g = 0; g < c; g++)\n                vb[g] = ea()[d + g >>> 0];\n              a = 0 > a ? Ea[-a - 1] : Vb[a];\n              S.ib = b;\n              b = a.apply(null, vb);\n              S.ib = 0;\n              return b;\n            },\n            K: tb,\n            o: function(a) {\n              B && S.Ma[a >>> 0].ref();\n            },\n            s: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >>> 2 >>> 0] = a.getUTCSeconds();\n              p()[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n              p()[c + 8 >>> 2 >>> 0] = a.getUTCHours();\n              p()[c + 12 >>> 2 >>> 0] = a.getUTCDate();\n              p()[c + 16 >>> 2 >>> 0] = a.getUTCMonth();\n              p()[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              p()[c + 24 >>> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              p()[c + 28 >>> 2 >>> 0] = a;\n            },\n            t: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >>> 2 >>> 0] = a.getSeconds();\n              p()[c + 4 >>> 2 >>> 0] = a.getMinutes();\n              p()[c + 8 >>> 2 >>> 0] = a.getHours();\n              p()[c + 12 >>> 2 >>> 0] = a.getDate();\n              p()[c + 16 >>> 2 >>> 0] = a.getMonth();\n              p()[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n              p()[c + 24 >>> 2 >>> 0] = a.getDay();\n              b = (Y(a.getFullYear()) ? wb : xb)[a.getMonth()] + a.getDate() - 1 | 0;\n              p()[c + 28 >>> 2 >>> 0] = b;\n              p()[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;\n              p()[c + 32 >>> 2 >>> 0] = a;\n            },\n            u: function(a) {\n              a >>>= 0;\n              var b = new Date(p()[a + 20 >>> 2 >>> 0] + 1900, p()[a + 16 >>> 2 >>> 0], p()[a + 12 >>> 2 >>> 0], p()[a + 8 >>> 2 >>> 0], p()[a + 4 >>> 2 >>> 0], p()[a >>> 2 >>> 0], 0), c = p()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(\n                b.getFullYear(),\n                0,\n                1\n              ).getTimezoneOffset(), k = Math.min(h, g);\n              0 > c ? p()[a + 32 >>> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));\n              p()[a + 24 >>> 2 >>> 0] = b.getDay();\n              c = (Y(b.getFullYear()) ? wb : xb)[b.getMonth()] + b.getDate() - 1 | 0;\n              p()[a + 28 >>> 2 >>> 0] = c;\n              p()[a >>> 2 >>> 0] = b.getSeconds();\n              p()[a + 4 >>> 2 >>> 0] = b.getMinutes();\n              p()[a + 8 >>> 2 >>> 0] = b.getHours();\n              p()[a + 12 >>> 2 >>> 0] = b.getDate();\n              p()[a + 16 >>> 2 >>> 0] = b.getMonth();\n              p()[a + 20 >>> 2 >>> 0] = b.getYear();\n              a = b.getTime();\n              isNaN(a) ? (p()[Xb() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n              return Yb((P = a, 1 <= +Math.abs(P) ? 0 < P ? +Math.floor(P / 4294967296) >>> 0 : ~~+Math.ceil((P - +(~~P >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n            },\n            q: yb,\n            r: zb,\n            y: function(a, b, c) {\n              function d(w) {\n                return (w = w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? w[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);\n              g = h.getTimezoneOffset();\n              var t = k.getTimezoneOffset(), C = Math.max(g, t);\n              r()[a >>> 2 >>> 0] = 60 * C;\n              p()[b >>> 2 >>> 0] = Number(g != t);\n              a = d(h);\n              b = d(k);\n              a = Bb(a);\n              b = Bb(b);\n              t < g ? (r()[c >>> 2 >>> 0] = a, r()[c + 4 >>> 2 >>> 0] = b) : (r()[c >>> 2 >>> 0] = b, r()[c + 4 >>> 2 >>> 0] = a);\n            },\n            c: () => {\n              ra("");\n            },\n            O: function(a, b, c) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              Cb.length = 0;\n              for (var d; d = n()[b++ >>> 0]; ) {\n                var g = 105 != d;\n                g &= 112 != d;\n                c += g && c % 8 ? 4 : 0;\n                Cb.push(112 == d ? r()[c >>> 2 >>> 0] : 105 == d ? p()[c >>> 2 >>> 0] : ea()[c >>> 3 >>> 0]);\n                c += g ? 8 : 4;\n              }\n              return Ea[a].apply(null, Cb);\n            },\n            k: () => {\n            },\n            i: () => Date.now(),\n            U: () => {\n              T += 1;\n              throw "unwind";\n            },\n            A: function() {\n              return 4294901760;\n            },\n            e: () => performance.timeOrigin + performance.now(),\n            f: () => B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,\n            x: function(a) {\n              a >>>= 0;\n              var b = n().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var g = Math;\n                d = Math.max(a, d);\n                a: {\n                  g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - e.buffer.byteLength + 65535) / 65536;\n                  try {\n                    e.grow(g);\n                    m();\n                    var h = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  h = void 0;\n                }\n                if (h)\n                  return true;\n              }\n              return false;\n            },\n            M: Gb,\n            N: Kb,\n            G: Qa,\n            g: Lb,\n            m: Mb,\n            v: Nb,\n            l: Pb,\n            a: e || v.wasmMemory,\n            w: Ub,\n            d: function(a, b, c, d) {\n              return Ub(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            }\n          }, Z = function() {\n            function a(c, d) {\n              Z = c.exports;\n              Z = $b();\n              S.bb.push(Z.za);\n              Xa = Z.Aa;\n              va.unshift(Z.V);\n              sa = d;\n              ya();\n              return Z;\n            }\n            var b = { a: Zb };\n            M++;\n            if (v.instantiateWasm)\n              try {\n                return v.instantiateWasm(b, a);\n              } catch (c) {\n                J(`Module.instantiateWasm callback failed with error: ${c}`), x(c);\n              }\n            Da(b, function(c) {\n              a(c.instance, c.module);\n            }).catch(x);\n            return {};\n          }();\n          v._OrtInit = (a, b) => (v._OrtInit = Z.W)(a, b);\n          v._OrtGetLastError = (a, b) => (v._OrtGetLastError = Z.X)(a, b);\n          v._OrtCreateSessionOptions = (a, b, c, d, g, h, k, t, C, w) => (v._OrtCreateSessionOptions = Z.Y)(a, b, c, d, g, h, k, t, C, w);\n          v._OrtAppendExecutionProvider = (a, b) => (v._OrtAppendExecutionProvider = Z.Z)(a, b);\n          v._OrtAddFreeDimensionOverride = (a, b, c) => (v._OrtAddFreeDimensionOverride = Z._)(a, b, c);\n          v._OrtAddSessionConfigEntry = (a, b, c) => (v._OrtAddSessionConfigEntry = Z.$)(a, b, c);\n          v._OrtReleaseSessionOptions = (a) => (v._OrtReleaseSessionOptions = Z.aa)(a);\n          v._OrtCreateSession = (a, b, c) => (v._OrtCreateSession = Z.ba)(a, b, c);\n          v._OrtReleaseSession = (a) => (v._OrtReleaseSession = Z.ca)(a);\n          v._OrtGetInputOutputCount = (a, b, c) => (v._OrtGetInputOutputCount = Z.da)(a, b, c);\n          v._OrtGetInputName = (a, b) => (v._OrtGetInputName = Z.ea)(a, b);\n          v._OrtGetOutputName = (a, b) => (v._OrtGetOutputName = Z.fa)(a, b);\n          v._OrtFree = (a) => (v._OrtFree = Z.ga)(a);\n          v._OrtCreateTensor = (a, b, c, d, g, h) => (v._OrtCreateTensor = Z.ha)(a, b, c, d, g, h);\n          v._OrtGetTensorData = (a, b, c, d, g) => (v._OrtGetTensorData = Z.ia)(a, b, c, d, g);\n          v._OrtReleaseTensor = (a) => (v._OrtReleaseTensor = Z.ja)(a);\n          v._OrtCreateRunOptions = (a, b, c, d) => (v._OrtCreateRunOptions = Z.ka)(a, b, c, d);\n          v._OrtAddRunConfigEntry = (a, b, c) => (v._OrtAddRunConfigEntry = Z.la)(a, b, c);\n          v._OrtReleaseRunOptions = (a) => (v._OrtReleaseRunOptions = Z.ma)(a);\n          v._OrtCreateBinding = (a) => (v._OrtCreateBinding = Z.na)(a);\n          v._OrtBindInput = (a, b, c) => (v._OrtBindInput = Z.oa)(a, b, c);\n          v._OrtBindOutput = (a, b, c, d) => (v._OrtBindOutput = Z.pa)(a, b, c, d);\n          v._OrtClearBoundOutputs = (a) => (v._OrtClearBoundOutputs = Z.qa)(a);\n          v._OrtReleaseBinding = (a) => (v._OrtReleaseBinding = Z.ra)(a);\n          v._OrtRunWithBinding = (a, b, c, d, g) => (v._OrtRunWithBinding = Z.sa)(a, b, c, d, g);\n          v._OrtRun = (a, b, c, d, g, h, k, t) => (v._OrtRun = Z.ta)(a, b, c, d, g, h, k, t);\n          v._OrtEndProfiling = (a) => (v._OrtEndProfiling = Z.ua)(a);\n          var Xb = () => (Xb = Z.va)(), W = v._pthread_self = () => (W = v._pthread_self = Z.wa)(), Ab = v._malloc = (a) => (Ab = v._malloc = Z.xa)(a);\n          v._free = (a) => (v._free = Z.ya)(a);\n          v.__emscripten_tls_init = () => (v.__emscripten_tls_init = Z.za)();\n          var Wb = v.__emscripten_thread_init = (a, b, c, d, g, h) => (Wb = v.__emscripten_thread_init = Z.Ba)(a, b, c, d, g, h);\n          v.__emscripten_thread_crashed = () => (v.__emscripten_thread_crashed = Z.Ca)();\n          var Na = (a, b, c, d) => (Na = Z.Da)(a, b, c, d), Ta = (a) => (Ta = Z.Ea)(a), Ya = v.__emscripten_thread_exit = (a) => (Ya = v.__emscripten_thread_exit = Z.Fa)(a), ub = () => (ub = Z.Ga)(), Yb = (a) => (Yb = Z.Ha)(a), Va = (a, b) => (Va = Z.Ia)(a, b), Ka = () => (Ka = Z.Ja)(), U = (a) => (U = Z.Ka)(a), Ma = (a) => (Ma = Z.La)(a);\n          function $b() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;\n            a.va = b(a.va);\n            a.wa = b(a.wa);\n            a.xa = c(a.xa);\n            a.emscripten_main_runtime_thread_id = b(a.emscripten_main_runtime_thread_id);\n            a.Ja = b(a.Ja);\n            a.La = c(a.La);\n            return a;\n          }\n          v.wasmMemory = e;\n          v.stackAlloc = Ma;\n          v.stackSave = Ka;\n          v.stackRestore = U;\n          v.keepRuntimeAlive = () => 0 < T;\n          v.UTF8ToString = Q;\n          v.stringToUTF8 = hb;\n          v.lengthBytesUTF8 = fb;\n          v.ExitStatus = R;\n          v.PThread = S;\n          var ac;\n          N = function bc() {\n            ac || cc();\n            ac || (N = bc);\n          };\n          function cc() {\n            if (!(0 < M))\n              if (D)\n                ha(v), D || Ua(va), startWorker(v);\n              else {\n                if (v.preRun)\n                  for ("function" == typeof v.preRun && (v.preRun = [v.preRun]); v.preRun.length; )\n                    ua.unshift(v.preRun.shift());\n                Ua(ua);\n                0 < M || ac || (ac = true, v.calledRun = true, K || (D || Ua(va), ha(v), D || Ua(wa)));\n              }\n          }\n          cc();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (true) {\n    ortWasmFactory = require_ort_training_wasm_simd();\n  } else {\n    ortWasmFactory = true ? null : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = (numThreads) => {\n    if (numThreads === 1) {\n      return false;\n    }\n    if (typeof SharedArrayBuffer === "undefined") {\n      if (typeof self !== "undefined" && !self.crossOriginIsolated) {\n        console.warn(\n          "env.wasm.numThreads is set to " + numThreads + ", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."\n        );\n      }\n      return false;\n    }\n    if (typeof process !== "undefined" && process.versions && process.versions.node) {\n      console.warn(\n        "env.wasm.numThreads is set to " + numThreads + ", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios."\n      );\n    }\n    try {\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (true) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = isMultiThreadSupported(numThreads);\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        config.numThreads = numThreads;\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  init_fs();\n\n  // nodejs-ignore:node:fs/promises\n  var readFile2 = void 0;\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  var loadFile = async (file) => {\n    if (typeof file === "string") {\n      if (typeof process !== "undefined" && process.versions && process.versions.node) {\n        try {\n          return new Uint8Array(await readFile2(file));\n        } catch (e) {\n          if (e.code === "ERR_FS_FILE_TOO_LARGE") {\n            const stream = createReadStream(file);\n            const chunks = [];\n            for await (const chunk of stream) {\n              chunks.push(chunk);\n            }\n            return new Uint8Array(Buffer.concat(chunks));\n          }\n          throw e;\n        }\n      } else {\n        const response = await fetch(file);\n        if (!response.ok) {\n          throw new Error(`failed to load external data file: ${file}`);\n        }\n        const contentLengthHeader = response.headers.get("Content-Length");\n        const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n        if (fileSize < 1073741824) {\n          return new Uint8Array(await response.arrayBuffer());\n        } else {\n          if (!response.body) {\n            throw new Error(`failed to load external data file: ${file}, no response body.`);\n          }\n          const reader = response.body.getReader();\n          let buffer;\n          try {\n            buffer = new ArrayBuffer(fileSize);\n          } catch (e) {\n            if (e instanceof RangeError) {\n              const pages = Math.ceil(fileSize / 65536);\n              buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n            } else {\n              throw e;\n            }\n          }\n          let offset = 0;\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n            const chunkSize = value.byteLength;\n            const chunk = new Uint8Array(buffer, offset, chunkSize);\n            chunk.set(value);\n            offset += chunkSize;\n          }\n          return new Uint8Array(buffer, 0, fileSize);\n        }\n      }\n    } else if (file instanceof Blob) {\n      return new Uint8Array(await file.arrayBuffer());\n    } else if (file instanceof Uint8Array) {\n      return file;\n    } else {\n      return new Uint8Array(file);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n  };\n  var initEp = async (env, epName) => {\n    if (false) {\n      if (typeof navigator === "undefined" || !navigator.gpu) {\n        throw new Error("WebGPU is not supported in current environment");\n      }\n      const adapter = await navigator.gpu.requestAdapter();\n      if (!adapter) {\n        throw new Error(\n          \'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\'\n        );\n      }\n      if (!env.wasm.simd) {\n        throw new Error(\n          "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"\n        );\n      }\n      const initJsep = null.init;\n      await initJsep(getInstance(), env, adapter);\n    }\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var copyFromExternalBuffer = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSession = async (modelData, options) => {\n    let modelDataOffset, modelDataLength;\n    const wasm2 = getInstance();\n    if (Array.isArray(modelData)) {\n      [modelDataOffset, modelDataLength] = modelData;\n    } else if (modelData.buffer === wasm2.HEAPU8.buffer) {\n      [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n    } else {\n      [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n    }\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      if (options?.externalData && wasm2.mountExternalData) {\n        const loadingPromises = [];\n        for (const file of options.externalData) {\n          const path = typeof file === "string" ? file : file.path;\n          loadingPromises.push(loadFile(typeof file === "string" ? file : file.data).then((data) => {\n            wasm2.mountExternalData(path, data);\n          }));\n        }\n        await Promise.all(loadingPromises);\n      }\n      sessionHandle = wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelDataOffset);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      wasm2.unmountExternalData?.();\n    }\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case "init-wasm":\n          initializeWebAssembly(message.wasm).then(\n            () => {\n              initRuntime(message).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                }\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        case "init-ep": {\n          const { epName, env } = message;\n          initEp(env, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "copy-from": {\n          const { buffer } = message;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData });\n          break;\n        }\n        case "create": {\n          const { model, options } = message;\n          createSession(model, options).then(\n            (sessionMetadata) => {\n              postMessage({ type, out: sessionMetadata });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "release":\n          releaseSession(message);\n          postMessage({ type });\n          break;\n        case "run": {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== "cpu")) {\n                postMessage({ type, err: "Proxy does not support non-cpu tensor location." });\n              } else {\n                postMessage(\n                  { type, out: outputs },\n                  extractTransferableBuffers(outputs)\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "end-profiling":\n          endProfiling(message);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err });\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
  }
});

// web/lib/wasm/proxy-wrapper.ts
var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, queuedCallbacks, enqueueCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyAndOrtRuntime, initializeOrtEp, copyFromExternalBuffer2, createSession2, releaseSession2, run2, endProfiling2;
var init_proxy_wrapper = __esm({
  "web/lib/wasm/proxy-wrapper.ts"() {
    "use strict";
    init_esm();
    init_wasm_core_impl();
    init_wasm_factory();
    isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
    initializing2 = false;
    initialized2 = false;
    aborted2 = false;
    queuedCallbacks = /* @__PURE__ */ new Map();
    enqueueCallbacks = (type, callbacks) => {
      const queue = queuedCallbacks.get(type);
      if (queue) {
        queue.push(callbacks);
      } else {
        queuedCallbacks.set(type, [callbacks]);
      }
    };
    ensureWorker = () => {
      if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
        throw new Error("worker not ready");
      }
    };
    onProxyWorkerMessage = (ev) => {
      switch (ev.data.type) {
        case "init-wasm":
          initializing2 = false;
          if (ev.data.err) {
            aborted2 = true;
            initWasmCallbacks[1](ev.data.err);
          } else {
            initialized2 = true;
            initWasmCallbacks[0]();
          }
          break;
        case "init-ep":
        case "copy-from":
        case "create":
        case "release":
        case "run":
        case "end-profiling": {
          const callbacks = queuedCallbacks.get(ev.data.type);
          if (ev.data.err) {
            callbacks.shift()[1](ev.data.err);
          } else {
            callbacks.shift()[0](ev.data.out);
          }
          break;
        }
        default:
      }
    };
    scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
    initializeWebAssemblyAndOrtRuntime = async () => {
      if (initialized2) {
        return;
      }
      if (initializing2) {
        throw new Error("multiple calls to 'initWasm()' detected.");
      }
      if (aborted2) {
        throw new Error("previous call to 'initWasm()' failed.");
      }
      initializing2 = true;
      if (isProxy()) {
        if (env2.wasm.wasmPaths === void 0) {
          if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
            env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
          }
        }
        return new Promise((resolve, reject) => {
          proxyWorker?.terminate();
          const workerUrl = URL.createObjectURL(new Blob(
            [
              // This require() function is handled by esbuild plugin to load file content as string.
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              require_main()
            ],
            { type: "text/javascript" }
          ));
          proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
          proxyWorker.onerror = (ev) => reject(ev);
          proxyWorker.onmessage = onProxyWorkerMessage;
          URL.revokeObjectURL(workerUrl);
          initWasmCallbacks = [resolve, reject];
          const message = { type: "init-wasm", in: env2 };
          proxyWorker.postMessage(message);
        });
      } else {
        try {
          await initializeWebAssembly(env2.wasm);
          await initRuntime(env2);
          initialized2 = true;
        } catch (e) {
          aborted2 = true;
          throw e;
        } finally {
          initializing2 = false;
        }
      }
    };
    initializeOrtEp = async (epName) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("init-ep", [resolve, reject]);
          const message = { type: "init-ep", in: { epName, env: env2 } };
          proxyWorker.postMessage(message);
        });
      } else {
        await initEp(env2, epName);
      }
    };
    copyFromExternalBuffer2 = async (buffer) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("copy-from", [resolve, reject]);
          const message = { type: "copy-from", in: { buffer } };
          proxyWorker.postMessage(message, [buffer.buffer]);
        });
      } else {
        return copyFromExternalBuffer(buffer);
      }
    };
    createSession2 = async (model, options) => {
      if (isProxy()) {
        if (options?.preferredOutputLocation) {
          throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
        }
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("create", [resolve, reject]);
          const message = { type: "create", in: { model, options } };
          const transferable = [];
          if (model instanceof Uint8Array) {
            transferable.push(model.buffer);
          }
          proxyWorker.postMessage(message, transferable);
        });
      } else {
        return createSession(model, options);
      }
    };
    releaseSession2 = async (sessionId) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("release", [resolve, reject]);
          const message = { type: "release", in: sessionId };
          proxyWorker.postMessage(message);
        });
      } else {
        releaseSession(sessionId);
      }
    };
    run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
      if (isProxy()) {
        if (inputs.some((t) => t[3] !== "cpu")) {
          throw new Error("input tensor on GPU is not supported for proxy.");
        }
        if (outputs.some((t) => t)) {
          throw new Error("pre-allocated output tensor is not supported for proxy.");
        }
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("run", [resolve, reject]);
          const serializableInputs = inputs;
          const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
          proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
        });
      } else {
        return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
      }
    };
    endProfiling2 = async (sessionId) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("end-profiling", [resolve, reject]);
          const message = { type: "end-profiling", in: sessionId };
          proxyWorker.postMessage(message);
        });
      } else {
        endProfiling(sessionId);
      }
    };
  }
});

// web/lib/wasm/session-handler-inference.ts
var encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
var init_session_handler_inference = __esm({
  "web/lib/wasm/session-handler-inference.ts"() {
    "use strict";
    init_esm();
    init_proxy_wrapper();
    init_wasm_common();
    init_wasm_utils_load_file();
    encodeTensorMetadata = (tensor, getName) => {
      switch (tensor.location) {
        case "cpu":
          return [tensor.type, tensor.dims, tensor.data, "cpu"];
        case "gpu-buffer":
          return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
        default:
          throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
      }
    };
    decodeTensorMetadata = (tensor) => {
      switch (tensor[3]) {
        case "cpu":
          return new Tensor2(tensor[0], tensor[2], tensor[1]);
        case "gpu-buffer": {
          const dataType = tensor[0];
          if (!isGpuBufferSupportedType(dataType)) {
            throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
          }
          const { gpuBuffer, download, dispose } = tensor[2];
          return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
        }
        default:
          throw new Error(`invalid data location: ${tensor[3]}`);
      }
    };
    OnnxruntimeWebAssemblySessionHandler = class {
      async fetchModelAndCopyToWasmMemory(path) {
        return copyFromExternalBuffer2(await loadFile(path));
      }
      async loadModel(pathOrBuffer, options) {
        TRACE_FUNC_BEGIN();
        let model;
        if (typeof pathOrBuffer === "string") {
          if (typeof process !== "undefined" && process.versions && process.versions.node) {
            model = await loadFile(pathOrBuffer);
          } else {
            model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);
          }
        } else {
          model = pathOrBuffer;
        }
        [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
        TRACE_FUNC_END();
      }
      async dispose() {
        return releaseSession2(this.sessionId);
      }
      async run(feeds, fetches, options) {
        TRACE_FUNC_BEGIN();
        const inputArray = [];
        const inputIndices = [];
        Object.entries(feeds).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = this.inputNames.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid input '${name}'`);
          }
          inputArray.push(tensor);
          inputIndices.push(index);
        });
        const outputArray = [];
        const outputIndices = [];
        Object.entries(fetches).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = this.outputNames.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid output '${name}'`);
          }
          outputArray.push(tensor);
          outputIndices.push(index);
        });
        const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
        const outputs = outputArray.map(
          (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
        );
        const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
        const resultMap = {};
        for (let i = 0; i < results.length; i++) {
          resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
        }
        TRACE_FUNC_END();
        return resultMap;
      }
      startProfiling() {
      }
      endProfiling() {
        void endProfiling2(this.sessionId);
      }
    };
  }
});

// web/lib/backend-wasm.ts
var initializeFlags, OnnxruntimeWebAssemblyBackend;
var init_backend_wasm = __esm({
  "web/lib/backend-wasm.ts"() {
    "use strict";
    init_node_os();
    init_esm();
    init_proxy_wrapper();
    init_session_handler_inference();
    initializeFlags = () => {
      if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
        env2.wasm.initTimeout = 0;
      }
      if (typeof env2.wasm.simd !== "boolean") {
        env2.wasm.simd = true;
      }
      if (typeof env2.wasm.proxy !== "boolean") {
        env2.wasm.proxy = false;
      }
      if (typeof env2.wasm.trace !== "boolean") {
        env2.wasm.trace = false;
      }
      if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
        if (typeof self !== "undefined" && !self.crossOriginIsolated || typeof process !== "undefined" && process.versions && process.versions.node) {
          env2.wasm.numThreads = 1;
        }
        const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
        env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
      }
    };
    OnnxruntimeWebAssemblyBackend = class {
      /**
       * This function initializes the WebAssembly backend.
       *
       * This function will be called only once for each backend name. It will be called the first time when
       * `ort.InferenceSession.create()` is called with a registered backend name.
       *
       * @param backendName - the registered backend name.
       */
      async init(backendName) {
        initializeFlags();
        await initializeWebAssemblyAndOrtRuntime();
        await initializeOrtEp(backendName);
      }
      async createInferenceSessionHandler(pathOrBuffer, options) {
        const handler = new OnnxruntimeWebAssemblySessionHandler();
        await handler.loadModel(pathOrBuffer, options);
        return Promise.resolve(handler);
      }
    };
  }
});

// web/lib/wasm/wasm-training-core-impl.ts
var NO_TRAIN_FUNCS_MSG, ifErrCodeCheckLastError, createCheckpointHandle, getModelInputOutputCount, getModelInputOutputNamesLoop, getModelInputOutputNames, createTrainingSessionHandle, createAndAllocateTensors, moveOutputToTensorMetadataArr, lazyResetGrad, runTrainStep, runOptimizerStep, runEvalStep, getParametersSize, getContiguousParameters, loadParametersBuffer, releaseTrainingSessionAndCheckpoint;
var init_wasm_training_core_impl = __esm({
  "web/lib/wasm/wasm-training-core-impl.ts"() {
    "use strict";
    init_run_options();
    init_session_options();
    init_wasm_common();
    init_wasm_core_impl();
    init_wasm_factory();
    init_wasm_utils();
    NO_TRAIN_FUNCS_MSG = "Built without training API's enabled. Use the onnxruntime-web/training import for training functionality, and make sure that all the correct artifacts are built & moved to the correct folder if using a custom build. Check https://onnxruntime.ai/docs/build/web.html for more information.";
    ifErrCodeCheckLastError = (errCode, message, checkNeqZero = true) => {
      if (checkNeqZero && errCode !== 0) {
        checkLastError(message);
      } else if (!checkNeqZero && errCode === 0) {
        checkLastError(message);
      }
    };
    createCheckpointHandle = (checkpointData) => {
      const wasm2 = getInstance();
      const [checkpointDataOffset, checkpointDataLength] = checkpointData;
      let checkpointHandle = 0;
      try {
        if (wasm2._OrtTrainingLoadCheckpoint) {
          checkpointHandle = wasm2._OrtTrainingLoadCheckpoint(checkpointDataOffset, checkpointDataLength);
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        ifErrCodeCheckLastError(checkpointHandle, "Error occurred when trying to create a CheckpointState", false);
        return checkpointHandle;
      } catch (e) {
        if (wasm2._OrtTrainingReleaseCheckpoint && checkpointHandle !== 0) {
          wasm2._OrtTrainingReleaseCheckpoint(checkpointHandle);
        }
        throw e;
      } finally {
        wasm2._OrtFree(checkpointData[0]);
      }
    };
    getModelInputOutputCount = (trainingSessionId, isEvalModel) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const dataOffset = wasm2.stackAlloc(8);
        if (wasm2._OrtTrainingGetModelInputOutputCount) {
          const errorCode = wasm2._OrtTrainingGetModelInputOutputCount(trainingSessionId, dataOffset, dataOffset + 4, isEvalModel);
          ifErrCodeCheckLastError(errorCode, "Can't get session input/output count.");
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    getModelInputOutputNamesLoop = (trainingSessionId, count, isInput, isEvalModel) => {
      const names = [];
      const wasm2 = getInstance();
      for (let i = 0; i < count; i++) {
        if (wasm2._OrtTrainingGetModelInputOutputName) {
          const name = wasm2._OrtTrainingGetModelInputOutputName(trainingSessionId, i, isInput, isEvalModel);
          ifErrCodeCheckLastError(name, `Can't get input or output name -- is input: ${isInput}, index ${i}`, false);
          names.push(wasm2.UTF8ToString(name));
          wasm2._free(name);
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      }
      return names;
    };
    getModelInputOutputNames = (trainingSessionId, isEvalModel) => {
      let inputNames = [];
      let outputNames = [];
      const [inputCount, outputCount] = getModelInputOutputCount(trainingSessionId, isEvalModel);
      inputNames = getModelInputOutputNamesLoop(trainingSessionId, inputCount, true, isEvalModel);
      outputNames = getModelInputOutputNamesLoop(trainingSessionId, outputCount, false, isEvalModel);
      return [inputNames, outputNames];
    };
    createTrainingSessionHandle = (checkpointHandle, trainModelData, evalModelData, optimizerModelData, options) => {
      const wasm2 = getInstance();
      let trainingSessionHandle = 0;
      let sessionOptionsHandle = 0;
      let allocs = [];
      try {
        [sessionOptionsHandle, allocs] = setSessionOptions(options);
        if (wasm2._OrtTrainingCreateSession) {
          trainingSessionHandle = wasm2._OrtTrainingCreateSession(
            sessionOptionsHandle,
            checkpointHandle,
            trainModelData[0],
            trainModelData[1],
            evalModelData[0],
            evalModelData[1],
            optimizerModelData[0],
            optimizerModelData[1]
          );
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        ifErrCodeCheckLastError(trainingSessionHandle, "Error occurred when trying to create a TrainingSession", false);
        return trainingSessionHandle;
      } catch (e) {
        if (wasm2._OrtTrainingReleaseSession && trainingSessionHandle !== 0) {
          wasm2._OrtTrainingReleaseSession(trainingSessionHandle);
        }
        throw e;
      } finally {
        wasm2._free(trainModelData[0]);
        wasm2._free(evalModelData[0]);
        wasm2._free(optimizerModelData[0]);
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
      }
    };
    createAndAllocateTensors = (trainingSessionId, indices, tensors, tensorHandles, inputOutputAllocs, indexAdd) => {
      const count = indices.length;
      for (let i = 0; i < count; i++) {
        prepareInputOutputTensor(
          tensors[i],
          tensorHandles,
          inputOutputAllocs,
          trainingSessionId,
          indexAdd + indices[i]
        );
      }
      const wasm2 = getInstance();
      const valuesOffset = wasm2.stackAlloc(count * 4);
      let valuesIndex = valuesOffset / 4;
      for (let i = 0; i < count; i++) {
        wasm2.HEAPU32[valuesIndex++] = tensorHandles[i];
      }
      return valuesOffset;
    };
    moveOutputToTensorMetadataArr = (outputValuesOffset, outputCount, outputTensorHandles, outputTensors) => {
      const wasm2 = getInstance();
      const output = [];
      for (let i = 0; i < outputCount; i++) {
        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
        if (tensor === outputTensorHandles[i]) {
          output.push(outputTensors[i]);
          continue;
        }
        const beforeGetTensorDataStack = wasm2.stackSave();
        const tensorDataOffset = wasm2.stackAlloc(4 * 4);
        let type, dataOffset = 0;
        try {
          const errorCode = wasm2._OrtGetTensorData(
            tensor,
            tensorDataOffset,
            tensorDataOffset + 4,
            tensorDataOffset + 8,
            tensorDataOffset + 12
          );
          ifErrCodeCheckLastError(errorCode, `Can't access output tensor data on index ${i}.`);
          let tensorDataIndex = tensorDataOffset / 4;
          const dataType = wasm2.HEAPU32[tensorDataIndex++];
          dataOffset = wasm2.HEAPU32[tensorDataIndex++];
          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
          const dims = [];
          for (let i2 = 0; i2 < dimsLength; i2++) {
            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
          }
          wasm2._OrtFree(dimsOffset);
          const size = dims.reduce((a, b) => a * b, 1);
          type = tensorDataTypeEnumToString(dataType);
          if (type === "string") {
            const stringData = [];
            let dataIndex = dataOffset / 4;
            for (let i2 = 0; i2 < size; i2++) {
              const offset = wasm2.HEAPU32[dataIndex++];
              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
            }
            output.push([type, dims, stringData, "cpu"]);
          } else {
            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
            const data = new typedArrayConstructor(size);
            new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
            output.push([type, dims, data, "cpu"]);
          }
        } finally {
          wasm2.stackRestore(beforeGetTensorDataStack);
          if (type === "string" && dataOffset) {
            wasm2._free(dataOffset);
          }
          wasm2._OrtReleaseTensor(tensor);
        }
      }
      return output;
    };
    lazyResetGrad = async (trainingSessionId) => {
      const wasm2 = getInstance();
      if (wasm2._OrtTrainingLazyResetGrad) {
        const errorCode = wasm2._OrtTrainingLazyResetGrad(trainingSessionId);
        ifErrCodeCheckLastError(errorCode, "Can't call lazyResetGrad.");
      } else {
        throw new Error(NO_TRAIN_FUNCS_MSG);
      }
    };
    runTrainStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
      const wasm2 = getInstance();
      const inputCount = inputIndices.length;
      const outputCount = outputIndices.length;
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      const inputTensorHandles = [];
      const outputTensorHandles = [];
      const inputOutputAllocs = [];
      const beforeRunStack = wasm2.stackSave();
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        const inputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          inputIndices,
          inputTensors,
          inputTensorHandles,
          inputOutputAllocs,
          0
        );
        const outputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          outputIndices,
          outputTensors,
          outputTensorHandles,
          inputOutputAllocs,
          inputCount
        );
        if (wasm2._OrtTrainingRunTrainStep) {
          const errorCode = wasm2._OrtTrainingRunTrainStep(
            trainingSessionId,
            inputValuesOffset,
            inputCount,
            outputValuesOffset,
            outputCount,
            runOptionsHandle
          );
          ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingRunTrainStep in the WebAssembly layer");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
      } finally {
        wasm2.stackRestore(beforeRunStack);
        inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        inputOutputAllocs.forEach((p) => wasm2._free(p));
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    runOptimizerStep = async (trainingSessionId, options) => {
      const wasm2 = getInstance();
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        if (wasm2._OrtTrainingOptimizerStep) {
          const errCode = wasm2._OrtTrainingOptimizerStep(trainingSessionId, runOptionsHandle);
          ifErrCodeCheckLastError(errCode, "Failed to call OrtTrainingOptimizerStep in the WebAssembly layer");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    runEvalStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
      const wasm2 = getInstance();
      const inputCount = inputIndices.length;
      const outputCount = outputIndices.length;
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      const inputTensorHandles = [];
      const outputTensorHandles = [];
      const inputOutputAllocs = [];
      const beforeRunStack = wasm2.stackSave();
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        const inputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          inputIndices,
          inputTensors,
          inputTensorHandles,
          inputOutputAllocs,
          0
        );
        const outputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          outputIndices,
          outputTensors,
          outputTensorHandles,
          inputOutputAllocs,
          inputCount
        );
        if (wasm2._OrtTrainingEvalStep) {
          const errorCode = wasm2._OrtTrainingEvalStep(
            trainingSessionId,
            inputValuesOffset,
            inputCount,
            outputValuesOffset,
            outputCount,
            runOptionsHandle
          );
          ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingEvalStep in the WebAssembly layer");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
      } finally {
        wasm2.stackRestore(beforeRunStack);
        inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        inputOutputAllocs.forEach((p) => wasm2._free(p));
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    getParametersSize = (trainingSessionId, trainableOnly) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const sizeOffset = wasm2.stackAlloc(4);
        if (wasm2._OrtTrainingGetParametersSize) {
          const errorCode = wasm2._OrtTrainingGetParametersSize(trainingSessionId, sizeOffset, trainableOnly);
          ifErrCodeCheckLastError(errorCode, "Can't get parameters size");
          return wasm2.HEAP32[sizeOffset / 4];
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    getContiguousParameters = async (trainingSessionId, trainableOnly) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      const tensorTypeAsString = "float32";
      const locationAsString = "cpu";
      const parametersSize = getParametersSize(trainingSessionId, trainableOnly);
      let tensor = 0;
      const paramsByteLength = 4 * parametersSize;
      const paramsOffset = wasm2._malloc(paramsByteLength);
      const dims = [parametersSize];
      const dimsOffset = wasm2.stackAlloc(4);
      const dimsIndex = dimsOffset / 4;
      wasm2.HEAP32[dimsIndex] = parametersSize;
      try {
        tensor = wasm2._OrtCreateTensor(
          tensorDataTypeStringToEnum(tensorTypeAsString),
          paramsOffset,
          paramsByteLength,
          dimsOffset,
          dims.length,
          dataLocationStringToEnum(locationAsString)
        );
        ifErrCodeCheckLastError(
          tensor,
          `Can't create tensor for getContiguousParameters. session=${trainingSessionId}.`,
          false
        );
        if (wasm2._OrtTrainingCopyParametersToBuffer) {
          const errCode = wasm2._OrtTrainingCopyParametersToBuffer(trainingSessionId, tensor, parametersSize, trainableOnly);
          ifErrCodeCheckLastError(errCode, "Can't get contiguous parameters.");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        const typedArrayConstructor = tensorTypeToTypedArrayConstructor(tensorTypeAsString);
        const data = new typedArrayConstructor(parametersSize);
        const output = [];
        new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(paramsOffset, paramsOffset + paramsByteLength));
        output.push([tensorTypeAsString, dims, data, locationAsString]);
        if (output.length !== 1) {
          throw new Error(`something unexpected happened in the getContiguousParameters function. Expected output length of
     one, got ${output.length}`);
        } else {
          return output[0];
        }
      } finally {
        if (tensor !== 0) {
          wasm2._OrtReleaseTensor(tensor);
        }
        wasm2._free(paramsOffset);
        wasm2._free(dimsOffset);
        wasm2.stackRestore(stack);
      }
    };
    loadParametersBuffer = async (trainingSessionId, buffer, trainableOnly) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      const tensorTypeAsString = "float32";
      const locationAsString = "cpu";
      const bufferByteLength = buffer.length;
      const bufferCount = bufferByteLength / 4;
      const bufferOffset = wasm2._malloc(bufferByteLength);
      wasm2.HEAPU8.set(buffer, bufferOffset);
      const dimsOffset = wasm2.stackAlloc(4);
      wasm2.HEAP32[dimsOffset / 4] = bufferCount;
      const dimsLength = 1;
      let tensor = 0;
      try {
        tensor = wasm2._OrtCreateTensor(
          tensorDataTypeStringToEnum(tensorTypeAsString),
          bufferOffset,
          bufferByteLength,
          dimsOffset,
          dimsLength,
          dataLocationStringToEnum(locationAsString)
        );
        ifErrCodeCheckLastError(tensor, `Can't create tensor for input/output. session=${trainingSessionId}`, false);
        if (wasm2._OrtTrainingCopyParametersFromBuffer) {
          const errCode = wasm2._OrtTrainingCopyParametersFromBuffer(trainingSessionId, tensor, bufferCount, trainableOnly);
          ifErrCodeCheckLastError(errCode, "Can't copy buffer to parameters.");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        if (tensor !== 0) {
          wasm2._OrtReleaseTensor(tensor);
        }
        wasm2.stackRestore(stack);
        wasm2._free(bufferOffset);
        wasm2._free(dimsOffset);
      }
    };
    releaseTrainingSessionAndCheckpoint = (checkpointId, sessionId) => {
      const wasm2 = getInstance();
      if (wasm2._OrtTrainingReleaseSession) {
        wasm2._OrtTrainingReleaseSession(sessionId);
      }
      if (wasm2._OrtTrainingReleaseCheckpoint) {
        wasm2._OrtTrainingReleaseCheckpoint(checkpointId);
      }
    };
  }
});

// web/lib/wasm/session-handler-training.ts
var OnnxruntimeWebAssemblyTrainingSessionHandler;
var init_session_handler_training = __esm({
  "web/lib/wasm/session-handler-training.ts"() {
    "use strict";
    init_session_handler_inference();
    init_wasm_core_impl();
    init_wasm_training_core_impl();
    OnnxruntimeWebAssemblyTrainingSessionHandler = class {
      constructor() {
        this.evalInputNames = [];
        this.evalOutputNames = [];
      }
      async uriOrBufferToHeap(uriOrBuffer) {
        let buffer;
        if (typeof uriOrBuffer === "string") {
          const response = await fetch(uriOrBuffer);
          const arrayBuffer = await response.arrayBuffer();
          buffer = new Uint8Array(arrayBuffer);
        } else {
          buffer = uriOrBuffer;
        }
        return copyFromExternalBuffer(buffer);
      }
      async createTrainingSession(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
        const checkpointData = await this.uriOrBufferToHeap(checkpointStateUriOrBuffer);
        const trainModelData = await this.uriOrBufferToHeap(trainModelUriOrBuffer);
        let evalModelData = [0, 0];
        let optimizerModelData = [0, 0];
        if (evalModelUriOrBuffer !== "") {
          evalModelData = await this.uriOrBufferToHeap(evalModelUriOrBuffer);
        }
        if (optimizerModelUriOrBuffer !== "") {
          optimizerModelData = await this.uriOrBufferToHeap(optimizerModelUriOrBuffer);
        }
        this.checkpointId = createCheckpointHandle(checkpointData);
        this.sessionId = createTrainingSessionHandle(this.checkpointId, trainModelData, evalModelData, optimizerModelData, options);
        [this.inputNames, this.outputNames] = getModelInputOutputNames(this.sessionId, false);
        if (evalModelUriOrBuffer !== "") {
          [this.evalInputNames, this.evalOutputNames] = getModelInputOutputNames(this.sessionId, true);
        }
      }
      /**
       * Helper method that converts a feeds or fetches datatype to two arrays, one of values and one that stores the
       * corresponding name as a number referring to the index in the list of names provided.
       *
       * @param feeds meant to match either SessionHandler.FeedsType or SessionHandler.FetchesType
       * @param names either inputNames or outputNames
       * @returns a tuple of a list of values and a list of indices.
       */
      convertMapIntoValuesArrayAndIndicesArray(feeds, names, mapFunc) {
        const values = [];
        const indices = [];
        Object.entries(feeds).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = names.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid input '${name}`);
          }
          values.push(tensor);
          indices.push(index);
        });
        const uList = values.map(mapFunc);
        return [values, indices, uList];
      }
      /**
       * Helper method that converts the TensorMetadata that the wasm-core functions return to the
       * SessionHandler.ReturnType. Any outputs in the provided outputArray that are falsy will be populated with the
       * corresponding result.
       *
       * @param results used to populate the resultMap if there is no value for that outputName already
       * @param outputArray used to populate the resultMap. If null or undefined, use the corresponding result from results
       * @param outputIndices specifies which outputName the corresponding value for outputArray refers to.
       * @returns a map of output names and OnnxValues.
       */
      convertTensorMetadataToReturnType(results, outputArray, outputIndices) {
        const resultMap = {};
        for (let i = 0; i < results.length; i++) {
          resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
        }
        return resultMap;
      }
      async lazyResetGrad() {
        await lazyResetGrad(this.sessionId);
      }
      async runTrainStep(feeds, fetches, options) {
        const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          feeds,
          this.inputNames,
          (t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`)
        );
        const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          fetches,
          this.outputNames,
          (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
        );
        const results = await runTrainStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
        return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
      }
      async runOptimizerStep(options) {
        await runOptimizerStep(this.sessionId, options);
      }
      async runEvalStep(feeds, fetches, options) {
        const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          feeds,
          this.evalInputNames,
          (t, i) => encodeTensorMetadata(t, () => `input "${this.evalInputNames[inputIndices[i]]}"`)
        );
        const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          fetches,
          this.evalOutputNames,
          (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.evalOutputNames[outputIndices[i]]}"`) : null
        );
        const results = await runEvalStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
        return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
      }
      async getParametersSize(trainableOnly) {
        return getParametersSize(this.sessionId, trainableOnly);
      }
      async loadParametersBuffer(array, trainableOnly) {
        await loadParametersBuffer(this.sessionId, array, trainableOnly);
      }
      async getContiguousParameters(trainableOnly) {
        const tensorResult = await getContiguousParameters(this.sessionId, trainableOnly);
        return decodeTensorMetadata(tensorResult);
      }
      async dispose() {
        return releaseTrainingSessionAndCheckpoint(this.checkpointId, this.sessionId);
      }
    };
  }
});

// web/lib/backend-wasm-training.ts
var backend_wasm_training_exports = {};
__export(backend_wasm_training_exports, {
  wasmBackend: () => wasmBackend
});
var OnnxruntimeTrainingWebAssemblyBackend, wasmBackend;
var init_backend_wasm_training = __esm({
  "web/lib/backend-wasm-training.ts"() {
    "use strict";
    init_backend_wasm();
    init_session_handler_training();
    OnnxruntimeTrainingWebAssemblyBackend = class extends OnnxruntimeWebAssemblyBackend {
      async createTrainingSessionHandler(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
        const handler = new OnnxruntimeWebAssemblyTrainingSessionHandler();
        await handler.createTrainingSession(
          checkpointStateUriOrBuffer,
          trainModelUriOrBuffer,
          evalModelUriOrBuffer,
          optimizerModelUriOrBuffer,
          options
        );
        return Promise.resolve(handler);
      }
    };
    wasmBackend = new OnnxruntimeTrainingWebAssemblyBackend();
  }
});

// web/lib/index.ts
init_esm();
init_esm();
init_esm();

// web/lib/version.ts
var version2 = "1.18.0";

// web/lib/index.ts
var lib_default = esm_exports;
if (false) {
  const onnxjsBackend = null.onnxjsBackend;
  registerBackend("webgl", onnxjsBackend, -10);
}
if (true) {
  const wasmBackend2 = false ? null.wasmBackend : (init_backend_wasm_training(), __toCommonJS(backend_wasm_training_exports)).wasmBackend;
  if (false) {
    registerBackend("webgpu", wasmBackend2, 5);
  }
  registerBackend("cpu", wasmBackend2, 10);
  registerBackend("wasm", wasmBackend2, 10);
  if (false) {
    registerBackend("webnn", wasmBackend2, 9);
  }
}
Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
export {
  InferenceSession2 as InferenceSession,
  TRACE,
  TRACE_FUNC_BEGIN,
  TRACE_FUNC_END,
  Tensor2 as Tensor,
  TrainingSession2 as TrainingSession,
  lib_default as default,
  env2 as env,
  registerBackend
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvYmFja2VuZC1pbXBsLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2JhY2tlbmQudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdmVyc2lvbi50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYtaW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdGVuc29yLWNvbnZlcnNpb24taW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItZmFjdG9yeS1pbXBsLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RlbnNvci1pbXBsLXR5cGUtbWFwcGluZy50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItdXRpbHMtaW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItaW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3IudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdHJhY2UudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvaW5mZXJlbmNlLXNlc3Npb24taW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9pbmZlcmVuY2Utc2Vzc2lvbi50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9vbm54LXZhbHVlLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RyYWluaW5nLXNlc3Npb24taW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90cmFpbmluZy1zZXNzaW9uLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2luZGV4LnRzIiwgIm5vZGVqcy1pZ25vcmU6bm9kZTpvcyIsICJub2RlanMtaWdub3JlOm5vZGU6cGF0aCIsICJub2RlanMtaWdub3JlOmZzIiwgIm5vZGVqcy1pZ25vcmU6cGF0aCIsICIuLi8uLi9saWIvd2FzbS9iaW5kaW5nL29ydC10cmFpbmluZy13YXNtLXNpbWQuanMiLCAibm9kZWpzLWlnbm9yZTp3b3JrZXJfdGhyZWFkcyIsICJub2RlanMtaWdub3JlOnBlcmZfaG9va3MiLCAibm9kZWpzLWlnbm9yZTpvcyIsICIuLi8uLi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLmpzIiwgIi4uLy4uL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzIiwgIi4uLy4uL2xpYi93YXNtL3dhc20tZmFjdG9yeS50cyIsICIuLi8uLi9saWIvd2FzbS93YXNtLXV0aWxzLnRzIiwgIi4uLy4uL2xpYi93YXNtL3J1bi1vcHRpb25zLnRzIiwgIi4uLy4uL2xpYi93YXNtL3Nlc3Npb24tb3B0aW9ucy50cyIsICIuLi8uLi9saWIvd2FzbS93YXNtLWNvbW1vbi50cyIsICJub2RlanMtaWdub3JlOm5vZGU6ZnMvcHJvbWlzZXMiLCAiLi4vLi4vbGliL3dhc20vd2FzbS11dGlscy1sb2FkLWZpbGUudHMiLCAiLi4vLi4vbGliL3dhc20vd2FzbS1jb3JlLWltcGwudHMiLCAicHJveHktd29ya2VyOi4vcHJveHktd29ya2VyL21haW4iLCAiLi4vLi4vbGliL3dhc20vcHJveHktd3JhcHBlci50cyIsICIuLi8uLi9saWIvd2FzbS9zZXNzaW9uLWhhbmRsZXItaW5mZXJlbmNlLnRzIiwgIi4uLy4uL2xpYi9iYWNrZW5kLXdhc20udHMiLCAiLi4vLi4vbGliL3dhc20vd2FzbS10cmFpbmluZy1jb3JlLWltcGwudHMiLCAiLi4vLi4vbGliL3dhc20vc2Vzc2lvbi1oYW5kbGVyLXRyYWluaW5nLnRzIiwgIi4uLy4uL2xpYi9iYWNrZW5kLXdhc20tdHJhaW5pbmcudHMiLCAiLi4vLi4vbGliL2luZGV4LnRzIiwgIi4uLy4uL2xpYi92ZXJzaW9uLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQuanMnO1xuXG5pbnRlcmZhY2UgQmFja2VuZEluZm8ge1xuICBiYWNrZW5kOiBCYWNrZW5kO1xuICBwcmlvcml0eTogbnVtYmVyO1xuXG4gIGluaXRQcm9taXNlPzogUHJvbWlzZTx2b2lkPjtcbiAgaW5pdGlhbGl6ZWQ/OiBib29sZWFuO1xuICBhYm9ydGVkPzogYm9vbGVhbjtcbn1cblxuY29uc3QgYmFja2VuZHM6IE1hcDxzdHJpbmcsIEJhY2tlbmRJbmZvPiA9IG5ldyBNYXAoKTtcbmNvbnN0IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eTogc3RyaW5nW10gPSBbXTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGJhY2tlbmQuXG4gKlxuICogQHBhcmFtIG5hbWUgLSB0aGUgbmFtZSBhcyBhIGtleSB0byBsb29rdXAgYXMgYW4gZXhlY3V0aW9uIHByb3ZpZGVyLlxuICogQHBhcmFtIGJhY2tlbmQgLSB0aGUgYmFja2VuZCBvYmplY3QuXG4gKiBAcGFyYW0gcHJpb3JpdHkgLSBhbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIHByaW9yaXR5IG9mIHRoZSBiYWNrZW5kLiBIaWdoZXIgbnVtYmVyIG1lYW5zIGhpZ2hlciBwcmlvcml0eS4gaWYgcHJpb3JpdHlcbiAqIDwgMCwgaXQgd2lsbCBiZSBjb25zaWRlcmVkIGFzIGEgJ2JldGEnIHZlcnNpb24gYW5kIHdpbGwgbm90IGJlIHVzZWQgYXMgYSBmYWxsYmFjayBiYWNrZW5kIGJ5IGRlZmF1bHQuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJCYWNrZW5kID0gKG5hbWU6IHN0cmluZywgYmFja2VuZDogQmFja2VuZCwgcHJpb3JpdHk6IG51bWJlcik6IHZvaWQgPT4ge1xuICBpZiAoYmFja2VuZCAmJiB0eXBlb2YgYmFja2VuZC5pbml0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBiYWNrZW5kLmNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgY3VycmVudEJhY2tlbmQgPSBiYWNrZW5kcy5nZXQobmFtZSk7XG4gICAgaWYgKGN1cnJlbnRCYWNrZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGJhY2tlbmRzLnNldChuYW1lLCB7YmFja2VuZCwgcHJpb3JpdHl9KTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRCYWNrZW5kLnByaW9yaXR5ID4gcHJpb3JpdHkpIHtcbiAgICAgIC8vIHNhbWUgbmFtZSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgd2l0aCBhIGhpZ2hlciBwcmlvcml0eS4gc2tpcCByZWdpc3RlcmF0aW9uLlxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudEJhY2tlbmQucHJpb3JpdHkgPT09IHByaW9yaXR5KSB7XG4gICAgICBpZiAoY3VycmVudEJhY2tlbmQuYmFja2VuZCAhPT0gYmFja2VuZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZWdpc3RlciBiYWNrZW5kIFwiJHtuYW1lfVwiIHVzaW5nIHByaW9yaXR5ICR7cHJpb3JpdHl9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByaW9yaXR5ID49IDApIHtcbiAgICAgIGNvbnN0IGkgPSBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYmFja2VuZHMuZ2V0KGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eVtpXSkhLnByaW9yaXR5IDw9IHByaW9yaXR5KSB7XG4gICAgICAgICAgYmFja2VuZHNTb3J0ZWRCeVByaW9yaXR5LnNwbGljZShpLCAwLCBuYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSB2YWxpZCBiYWNrZW5kJyk7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgYmFja2VuZCBieSBzcGVjaWZpZWQgaGludHMuXG4gKlxuICogQHBhcmFtIGJhY2tlbmRIaW50cyAtIGEgbGlzdCBvZiBleGVjdXRpb24gcHJvdmlkZXIgbmFtZXMgdG8gbG9va3VwLiBJZiBvbWl0dGVkIHVzZSByZWdpc3RlcmVkIGJhY2tlbmRzIGFzIGxpc3QuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgYmFja2VuZC5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjb25zdCByZXNvbHZlQmFja2VuZCA9IGFzeW5jKGJhY2tlbmRIaW50czogcmVhZG9ubHkgc3RyaW5nW10pOiBQcm9taXNlPEJhY2tlbmQ+ID0+IHtcbiAgY29uc3QgYmFja2VuZE5hbWVzID0gYmFja2VuZEhpbnRzLmxlbmd0aCA9PT0gMCA/IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eSA6IGJhY2tlbmRIaW50cztcbiAgY29uc3QgZXJyb3JzID0gW107XG4gIGZvciAoY29uc3QgYmFja2VuZE5hbWUgb2YgYmFja2VuZE5hbWVzKSB7XG4gICAgY29uc3QgYmFja2VuZEluZm8gPSBiYWNrZW5kcy5nZXQoYmFja2VuZE5hbWUpO1xuICAgIGlmIChiYWNrZW5kSW5mbykge1xuICAgICAgaWYgKGJhY2tlbmRJbmZvLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybiBiYWNrZW5kSW5mby5iYWNrZW5kO1xuICAgICAgfSBlbHNlIGlmIChiYWNrZW5kSW5mby5hYm9ydGVkKSB7XG4gICAgICAgIGNvbnRpbnVlOyAgLy8gY3VycmVudCBiYWNrZW5kIGlzIHVuYXZhaWxhYmxlOyB0cnkgbmV4dFxuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0luaXRpYWxpemluZyA9ICEhYmFja2VuZEluZm8uaW5pdFByb21pc2U7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWlzSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgYmFja2VuZEluZm8uaW5pdFByb21pc2UgPSBiYWNrZW5kSW5mby5iYWNrZW5kLmluaXQoYmFja2VuZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGJhY2tlbmRJbmZvLmluaXRQcm9taXNlO1xuICAgICAgICBiYWNrZW5kSW5mby5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBiYWNrZW5kSW5mby5iYWNrZW5kO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoIWlzSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goe25hbWU6IGJhY2tlbmROYW1lLCBlcnI6IGV9KTtcbiAgICAgICAgfVxuICAgICAgICBiYWNrZW5kSW5mby5hYm9ydGVkID0gdHJ1ZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGRlbGV0ZSBiYWNrZW5kSW5mby5pbml0UHJvbWlzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYG5vIGF2YWlsYWJsZSBiYWNrZW5kIGZvdW5kLiBFUlI6ICR7ZXJyb3JzLm1hcChlID0+IGBbJHtlLm5hbWV9XSAke2UuZXJyfWApLmpvaW4oJywgJyl9YCk7XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbn0gZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLmpzJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBTZXNzaW9uSGFuZGxlciB7XG4gIHR5cGUgRmVlZHNUeXBlID0ge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9O1xuICB0eXBlIEZldGNoZXNUeXBlID0ge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWUgfCBudWxsfTtcbiAgdHlwZSBSZXR1cm5UeXBlID0ge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgc2hhcmVkIFNlc3Npb25IYW5kbGVyIGZ1bmN0aW9uYWxpdHlcbiAqXG4gKiBAaWdub3JlXG4gKi9cbmludGVyZmFjZSBTZXNzaW9uSGFuZGxlciB7XG4gIGRpc3Bvc2UoKTogUHJvbWlzZTx2b2lkPjtcblxuICByZWFkb25seSBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhIGhhbmRsZXIgaW5zdGFuY2Ugb2YgYW4gaW5mZXJlbmNlIHNlc3Npb24uXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyIGV4dGVuZHMgU2Vzc2lvbkhhbmRsZXIge1xuICBzdGFydFByb2ZpbGluZygpOiB2b2lkO1xuICBlbmRQcm9maWxpbmcoKTogdm9pZDtcblxuICBydW4oZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhIGhhbmRsZXIgaW5zdGFuY2Ugb2YgYSB0cmFpbmluZyBpbmZlcmVuY2Ugc2Vzc2lvbi5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhaW5pbmdTZXNzaW9uSGFuZGxlciBleHRlbmRzIFNlc3Npb25IYW5kbGVyIHtcbiAgcmVhZG9ubHkgZXZhbElucHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuICByZWFkb25seSBldmFsT3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIGxhenlSZXNldEdyYWQoKTogUHJvbWlzZTx2b2lkPjtcbiAgcnVuVHJhaW5TdGVwKFxuICAgICAgZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+O1xuICBydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gIHJ1bkV2YWxTdGVwKFxuICAgICAgZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+O1xuXG4gIGdldFBhcmFtZXRlcnNTaXplKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPG51bWJlcj47XG4gIGxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5OiBVaW50OEFycmF5LCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcbiAgZ2V0Q29udGlndW91c1BhcmFtZXRlcnModHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8T25ueFZhbHVlPjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBiYWNrZW5kIHRoYXQgcHJvdmlkZXMgaW1wbGVtZW50YXRpb24gb2YgbW9kZWwgaW5mZXJlbmNpbmcuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tlbmQge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgYmFja2VuZCBhc3luY2hyb25vdXNseS4gU2hvdWxkIHRocm93IHdoZW4gZmFpbGVkLlxuICAgKi9cbiAgaW5pdChiYWNrZW5kTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICBjcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcih1cmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI+O1xuXG4gIGNyZWF0ZVRyYWluaW5nU2Vzc2lvbkhhbmRsZXI/XG4gICAgICAoY2hlY2twb2ludFN0YXRlVXJpT3JCdWZmZXI6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlciwgdHJhaW5Nb2RlbFVyaU9yQnVmZmVyOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXIsXG4gICAgICAgZXZhbE1vZGVsVXJpT3JCdWZmZXI6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlciwgb3B0aW1pemVyTW9kZWxVcmlPckJ1ZmZlcjogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyLFxuICAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPFRyYWluaW5nU2Vzc2lvbkhhbmRsZXI+O1xufVxuXG5leHBvcnQge3JlZ2lzdGVyQmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kLWltcGwuanMnO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG4vLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IC9qcy9zY3JpcHRzL3VwZGF0ZS12ZXJzaW9uLnRzXG4vLyBEbyBub3QgbW9kaWZ5IGZpbGUgY29udGVudCBtYW51YWxseS5cblxuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMS4xOC4wJztcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtFbnZ9IGZyb20gJy4vZW52LmpzJztcbmltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi92ZXJzaW9uLmpzJztcblxudHlwZSBMb2dMZXZlbFR5cGUgPSBFbnZbJ2xvZ0xldmVsJ107XG5cbmxldCBsb2dMZXZlbFZhbHVlOiBSZXF1aXJlZDxMb2dMZXZlbFR5cGU+ID0gJ3dhcm5pbmcnO1xuXG5leHBvcnQgY29uc3QgZW52OiBFbnYgPSB7XG4gIHdhc206IHt9IGFzIEVudi5XZWJBc3NlbWJseUZsYWdzLFxuICB3ZWJnbDoge30gYXMgRW52LldlYkdMRmxhZ3MsXG4gIHdlYmdwdToge30gYXMgRW52LldlYkdwdUZsYWdzLFxuICB2ZXJzaW9uczoge2NvbW1vbjogdmVyc2lvbn0sXG5cbiAgc2V0IGxvZ0xldmVsKHZhbHVlOiBMb2dMZXZlbFR5cGUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBbJ3ZlcmJvc2UnLCAnaW5mbycsICd3YXJuaW5nJywgJ2Vycm9yJywgJ2ZhdGFsJ10uaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGxvZ2dpbmcgbGV2ZWw6ICR7dmFsdWV9YCk7XG4gICAgfVxuICAgIGxvZ0xldmVsVmFsdWUgPSB2YWx1ZTtcbiAgfSxcbiAgZ2V0IGxvZ0xldmVsKCk6IFJlcXVpcmVkPExvZ0xldmVsVHlwZT4ge1xuICAgIHJldHVybiBsb2dMZXZlbFZhbHVlO1xuICB9LFxufTtcblxuLy8gc2V0IHByb3BlcnR5ICdsb2dMZXZlbCcgc28gdGhhdCB0aGV5IGNhbiBiZSBjb3JyZWN0bHkgdHJhbnNmZXJyZWQgdG8gd29ya2VyIGJ5IGBwb3N0TWVzc2FnZSgpYC5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbnYsICdsb2dMZXZlbCcsIHtlbnVtZXJhYmxlOiB0cnVlfSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7ZW52IGFzIGVudkltcGx9IGZyb20gJy4vZW52LWltcGwuanMnO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgRW52IHtcbiAgZXhwb3J0IHR5cGUgV2FzbVByZWZpeE9yRmlsZVBhdGhzID0gc3RyaW5nfHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICAnb3J0LXdhc20ud2FzbSc/OiBzdHJpbmc7XG4gICAgJ29ydC13YXNtLXRocmVhZGVkLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtd2FzbS1zaW1kLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtdHJhaW5pbmctd2FzbS1zaW1kLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc20nPzogc3RyaW5nO1xuICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4gIH07XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViQXNzZW1ibHlGbGFncyB7XG4gICAgLyoqXG4gICAgICogc2V0IG9yIGdldCBudW1iZXIgb2YgdGhyZWFkKHMpLiBJZiBvbWl0dGVkIG9yIHNldCB0byAwLCBudW1iZXIgb2YgdGhyZWFkKHMpIHdpbGwgYmUgZGV0ZXJtaW5lZCBieSBzeXN0ZW0uIElmIHNldFxuICAgICAqIHRvIDEsIG5vIHdvcmtlciB0aHJlYWQgd2lsbCBiZSBzcGF3bmVkLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IHdoZW4gV2ViQXNzZW1ibHkgbXVsdGl0aHJlYWQgZmVhdHVyZSBpcyBhdmFpbGFibGUgaW4gY3VycmVudCBjb250ZXh0LlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgMGBcbiAgICAgKi9cbiAgICBudW1UaHJlYWRzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogc2V0IG9yIGdldCBhIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRvIGVuYWJsZSBTSU1ELiBJZiBzZXQgdG8gZmFsc2UsIFNJTUQgd2lsbCBiZSBmb3JjZWx5IGRpc2FibGVkLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IHdoZW4gV2ViQXNzZW1ibHkgU0lNRCBmZWF0dXJlIGlzIGF2YWlsYWJsZSBpbiBjdXJyZW50IGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGB0cnVlYFxuICAgICAqL1xuICAgIHNpbWQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogc2V0IG9yIGdldCBhIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRvIGVuYWJsZSB0cmFjZS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHRyYWNlPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgYSBudW1iZXIgc3BlY2lmeWluZyB0aGUgdGltZW91dCBmb3IgaW5pdGlhbGl6YXRpb24gb2YgV2ViQXNzZW1ibHkgYmFja2VuZCwgaW4gbWlsbGlzZWNvbmRzLiBBIHplcm9cbiAgICAgKiB2YWx1ZSBpbmRpY2F0ZXMgbm8gdGltZW91dCBpcyBzZXQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAwYFxuICAgICAqL1xuICAgIGluaXRUaW1lb3V0PzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0IGEgY3VzdG9tIFVSTCBwcmVmaXggdG8gdGhlIC53YXNtIGZpbGVzIG9yIGEgc2V0IG9mIG92ZXJyaWRlcyBmb3IgZWFjaCAud2FzbSBmaWxlLiBUaGUgb3ZlcnJpZGUgcGF0aCBzaG91bGQgYmVcbiAgICAgKiBhbiBhYnNvbHV0ZSBwYXRoLlxuICAgICAqL1xuICAgIHdhc21QYXRocz86IFdhc21QcmVmaXhPckZpbGVQYXRocztcblxuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0byBwcm94eSB0aGUgZXhlY3V0aW9uIG9mIG1haW4gdGhyZWFkIHRvIGEgd29ya2VyIHRocmVhZC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHByb3h5PzogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR0xGbGFncyB7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgV2ViR0wgQ29udGV4dCBJRCAod2ViZ2wgb3Igd2ViZ2wyKS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYCd3ZWJnbDInYFxuICAgICAqL1xuICAgIGNvbnRleHRJZD86ICd3ZWJnbCd8J3dlYmdsMic7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgbWF4aW11bSBiYXRjaCBzaXplIGZvciBtYXRtdWwuIDAgbWVhbnMgdG8gZGlzYWJsZSBiYXRjaGluZy5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgbWF0bXVsTWF4QmF0Y2hTaXplPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHRleHR1cmUgY2FjaGUgbW9kZS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYCdmdWxsJ2BcbiAgICAgKi9cbiAgICB0ZXh0dXJlQ2FjaGVNb2RlPzogJ2luaXRpYWxpemVyT25seSd8J2Z1bGwnO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHBhY2tlZCB0ZXh0dXJlIG1vZGVcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHBhY2s/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgd2hldGhlciBlbmFibGUgYXN5bmMgZG93bmxvYWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBhc3luYz86IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdwdVByb2ZpbGluZ0RhdGFWMVRlbnNvck1ldGFkYXRhIHtcbiAgICBkaW1zOiByZWFkb25seSBudW1iZXJbXTtcbiAgICBkYXRhVHlwZTogc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR3B1UHJvZmlsaW5nRGF0YVYxIHtcbiAgICB2ZXJzaW9uOiAxO1xuICAgIGlucHV0c01ldGFkYXRhOiByZWFkb25seSBXZWJHcHVQcm9maWxpbmdEYXRhVjFUZW5zb3JNZXRhZGF0YVtdO1xuICAgIG91dHB1dHNNZXRhZGF0YTogcmVhZG9ubHkgV2ViR3B1UHJvZmlsaW5nRGF0YVYxVGVuc29yTWV0YWRhdGFbXTtcbiAgICBrZXJuZWxJZDogbnVtYmVyO1xuICAgIGtlcm5lbFR5cGU6IHN0cmluZztcbiAgICBrZXJuZWxOYW1lOiBzdHJpbmc7XG4gICAgcHJvZ3JhbU5hbWU6IHN0cmluZztcbiAgICBzdGFydFRpbWU6IG51bWJlcjtcbiAgICBlbmRUaW1lOiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgdHlwZSBXZWJHcHVQcm9maWxpbmdEYXRhID0gV2ViR3B1UHJvZmlsaW5nRGF0YVYxO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR3B1RmxhZ3Mge1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHByb2ZpbGluZyBtb2RlLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIGBlbnYud2ViZ3B1LnByb2ZpbGluZy5tb2RlYCBpbnN0ZWFkLiBJZiBgZW52LndlYmdwdS5wcm9maWxpbmcubW9kZWAgaXMgc2V0LCB0aGlzIHByb3BlcnR5IHdpbGwgYmVcbiAgICAgKiBpZ25vcmVkLlxuICAgICAqL1xuICAgIHByb2ZpbGluZ01vZGU/OiAnb2ZmJ3wnZGVmYXVsdCc7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgcHJvZmlsaW5nIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcHJvZmlsaW5nPzoge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXQgb3IgZ2V0IHRoZSBwcm9maWxpbmcgbW9kZS5cbiAgICAgICAqXG4gICAgICAgKiBAZGVmYXVsdFZhbHVlIGAnb2ZmJ2BcbiAgICAgICAqL1xuICAgICAgbW9kZT86ICdvZmYnfCdkZWZhdWx0JztcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgb3IgZ2V0IGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBhIHByb2ZpbGluZyBkYXRhIGlzIHJlY2VpdmVkLiBJZiBub3Qgc2V0LCB0aGUgcHJvZmlsaW5nIGRhdGEgd2lsbCBiZVxuICAgICAgICogcHJpbnRlZCB0byBjb25zb2xlLlxuICAgICAgICovXG4gICAgICBvbmRhdGE/OiAoZGF0YTogV2ViR3B1UHJvZmlsaW5nRGF0YSkgPT4gdm9pZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGV2aWNlIGZvciBXZWJHUFUuXG4gICAgICpcbiAgICAgKiBXaGVuIHVzZSB3aXRoIFR5cGVTY3JpcHQsIHRoZSB0eXBlIG9mIHRoaXMgcHJvcGVydHkgaXMgYEdQVURldmljZWAgZGVmaW5lZCBpbiBcIkB3ZWJncHUvdHlwZXNcIi5cbiAgICAgKiBVc2UgYGNvbnN0IGRldmljZSA9IGVudi53ZWJncHUuZGV2aWNlIGFzIEdQVURldmljZTtgIGluIFR5cGVTY3JpcHQgdG8gYWNjZXNzIHRoaXMgcHJvcGVydHkgd2l0aCBjb3JyZWN0IHR5cGUuXG4gICAgICpcbiAgICAgKiBzZWUgY29tbWVudHMgb24ge0BsaW5rIEdwdUJ1ZmZlclR5cGV9IGZvciBtb3JlIGRldGFpbHMgYWJvdXQgd2h5IG5vdCB1c2UgdHlwZXMgZGVmaW5lZCBpbiBcIkB3ZWJncHUvdHlwZXNcIi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXZpY2U6IHVua25vd247XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB3aGV0aGVyIHZhbGlkYXRlIGlucHV0IGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICB2YWxpZGF0ZUlucHV0Q29udGVudD86IGJvb2xlYW47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnYge1xuICAvKipcbiAgICogc2V0IHRoZSBzZXZlcml0eSBsZXZlbCBmb3IgbG9nZ2luZy5cbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSBgJ3dhcm5pbmcnYFxuICAgKi9cbiAgbG9nTGV2ZWw/OiAndmVyYm9zZSd8J2luZm8nfCd3YXJuaW5nJ3wnZXJyb3InfCdmYXRhbCc7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZSB3aGV0aGVyIHJ1biBpbiBkZWJ1ZyBtb2RlLlxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICovXG4gIGRlYnVnPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogR2V0IHZlcnNpb24gb2YgdGhlIGN1cnJlbnQgcGFja2FnZS5cbiAgICovXG4gIHJlYWRvbmx5IHZlcnNpb25zOiB7XG4gICAgcmVhZG9ubHkgY29tbW9uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgd2ViPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG5vZGU/OiBzdHJpbmc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIHJlYWRvbmx5ICdyZWFjdC1uYXRpdmUnPzogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgZm9yIFdlYkFzc2VtYmx5XG4gICAqL1xuICByZWFkb25seSB3YXNtOiBFbnYuV2ViQXNzZW1ibHlGbGFncztcblxuICAvKipcbiAgICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGZvciBXZWJHTFxuICAgKi9cbiAgcmVhZG9ubHkgd2ViZ2w6IEVudi5XZWJHTEZsYWdzO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgZm9yIFdlYkdQVVxuICAgKi9cbiAgcmVhZG9ubHkgd2ViZ3B1OiBFbnYuV2ViR3B1RmxhZ3M7XG5cbiAgW25hbWU6IHN0cmluZ106IHVua25vd247XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGFzIGEgZ2xvYmFsIHNpbmdsZXRvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gZW52SW1wbDtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtUZW5zb3JUb0RhdGFVcmxPcHRpb25zLCBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnN9IGZyb20gJy4vdGVuc29yLWNvbnZlcnNpb24uanMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLmpzJztcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IudG9EYXRhVVJMKClcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvclRvRGF0YVVSTCA9ICh0ZW5zb3I6IFRlbnNvciwgb3B0aW9ucz86IFRlbnNvclRvRGF0YVVybE9wdGlvbnMpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjYW52YXMgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykgOiAobmV3IE9mZnNjcmVlbkNhbnZhcygxLCAxKSk7XG4gIGNhbnZhcy53aWR0aCA9IHRlbnNvci5kaW1zWzNdO1xuICBjYW52YXMuaGVpZ2h0ID0gdGVuc29yLmRpbXNbMl07XG4gIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9XG4gICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSBhcyAoQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgT2Zmc2NyZWVuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbCk7XG5cbiAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgLy8gRGVmYXVsdCB2YWx1ZXMgZm9yIGhlaWdodCBhbmQgd2lkdGggJiBmb3JtYXRcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gICAgaWYgKG9wdGlvbnM/LnRlbnNvckxheW91dCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbMl07XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1szXTtcbiAgICB9IGVsc2UgeyAgLy8gRGVmYXVsdCBsYXlvdXQgaXMgTkNXSFxuICAgICAgd2lkdGggPSB0ZW5zb3IuZGltc1szXTtcbiAgICAgIGhlaWdodCA9IHRlbnNvci5kaW1zWzJdO1xuICAgIH1cblxuICAgIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucz8uZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcm1hdCA6ICdSR0InO1xuXG4gICAgY29uc3Qgbm9ybSA9IG9wdGlvbnM/Lm5vcm07XG4gICAgbGV0IG5vcm1NZWFuOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5tZWFuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1NZWFuID0gWzI1NSwgMjU1LCAyNTUsIDI1NV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW5bMF0sIG5vcm0ubWVhblsxXSwgbm9ybS5tZWFuWzJdLCAwXTtcbiAgICAgICAgaWYgKG5vcm0ubWVhblszXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybU1lYW5bM10gPSBub3JtLm1lYW5bM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm0gPT09IHVuZGVmaW5lZCB8fCBub3JtLmJpYXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9ybUJpYXMgPSBbMCwgMCwgMCwgMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0uYmlhcykgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtQmlhcyA9IFtub3JtLmJpYXNbMF0sIG5vcm0uYmlhc1sxXSwgbm9ybS5iaWFzWzJdLCAwXTtcbiAgICAgICAgaWYgKG5vcm0uYmlhc1szXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybUJpYXNbM10gPSBub3JtLmJpYXNbM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdHJpZGUgPSBoZWlnaHQgKiB3aWR0aDtcbiAgICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgICBsZXQgclRlbnNvclBvaW50ZXIgPSAwLCBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSwgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyLCBhVGVuc29yUG9pbnRlciA9IC0xO1xuXG4gICAgLy8gVXBkYXRpbmcgdGhlIHBvaW50ZXIgYXNzaWdubWVudHMgYmFzZWQgb24gdGhlIGlucHV0IGltYWdlIGZvcm1hdFxuICAgIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQkEnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICAgIGFUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMztcbiAgICB9IGVsc2UgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkdCJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JCRycpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2lkdGg7IGorKykge1xuICAgICAgICBjb25zdCBSID0gKCh0ZW5zb3IuZGF0YVtyVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMF0pICogbm9ybU1lYW5bMF07ICAvLyBSIHZhbHVlXG4gICAgICAgIGNvbnN0IEcgPSAoKHRlbnNvci5kYXRhW2dUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1sxXSkgKiBub3JtTWVhblsxXTsgIC8vIEcgdmFsdWVcbiAgICAgICAgY29uc3QgQiA9ICgodGVuc29yLmRhdGFbYlRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzJdKSAqIG5vcm1NZWFuWzJdOyAgLy8gQiB2YWx1ZVxuICAgICAgICBjb25zdCBBID0gYVRlbnNvclBvaW50ZXIgPT09IC0xID9cbiAgICAgICAgICAgIDI1NSA6XG4gICAgICAgICAgICAoKHRlbnNvci5kYXRhW2FUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1szXSkgKiBub3JtTWVhblszXTsgIC8vIEEgdmFsdWVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzXG4gICAgICAgIHBpeGVsczJEQ29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgnICsgUiArICcsJyArIEcgKyAnLCcgKyBCICsgJywnICsgQSArICcpJztcbiAgICAgICAgcGl4ZWxzMkRDb250ZXh0LmZpbGxSZWN0KGosIGksIDEsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoJ3RvRGF0YVVSTCcgaW4gY2FudmFzKSB7XG4gICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvRGF0YVVSTCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICB9XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci50b0ltYWdlRGF0YSgpXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JUb0ltYWdlRGF0YSA9ICh0ZW5zb3I6IFRlbnNvciwgb3B0aW9ucz86IFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9ucyk6IEltYWdlRGF0YSA9PiB7XG4gIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKSA6XG4gICAgICBuZXcgT2Zmc2NyZWVuQ2FudmFzKDEsIDEpLmdldENvbnRleHQoJzJkJykgYXMgT2Zmc2NyZWVuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICBsZXQgaW1hZ2U6IEltYWdlRGF0YTtcbiAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgLy8gRGVmYXVsdCB2YWx1ZXMgZm9yIGhlaWdodCBhbmQgd2lkdGggJiBmb3JtYXRcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gICAgbGV0IGNoYW5uZWxzOiBudW1iZXI7XG4gICAgaWYgKG9wdGlvbnM/LnRlbnNvckxheW91dCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbMl07XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1sxXTtcbiAgICAgIGNoYW5uZWxzID0gdGVuc29yLmRpbXNbM107XG4gICAgfSBlbHNlIHsgIC8vIERlZmF1bHQgbGF5b3V0IGlzIE5DV0hcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbM107XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1syXTtcbiAgICAgIGNoYW5uZWxzID0gdGVuc29yLmRpbXNbMV07XG4gICAgfVxuICAgIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gKG9wdGlvbnMuZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcm1hdCA6ICdSR0InKSA6ICdSR0InO1xuXG4gICAgY29uc3Qgbm9ybSA9IG9wdGlvbnM/Lm5vcm07XG4gICAgbGV0IG5vcm1NZWFuOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5tZWFuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1NZWFuID0gWzI1NSwgMjU1LCAyNTUsIDI1NV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW5bMF0sIG5vcm0ubWVhblsxXSwgbm9ybS5tZWFuWzJdLCAyNTVdO1xuICAgICAgICBpZiAobm9ybS5tZWFuWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtTWVhblszXSA9IG5vcm0ubWVhblszXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9ybSA9PT0gdW5kZWZpbmVkIHx8IG5vcm0uYmlhcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBub3JtQmlhcyA9IFswLCAwLCAwLCAwXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiAobm9ybS5iaWFzKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhc1swXSwgbm9ybS5iaWFzWzFdLCBub3JtLmJpYXNbMl0sIDBdO1xuICAgICAgICBpZiAobm9ybS5iaWFzWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtQmlhc1szXSA9IG5vcm0uYmlhc1szXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0cmlkZSA9IGhlaWdodCAqIHdpZHRoO1xuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIChjaGFubmVscyA9PT0gNCAmJiBvcHRpb25zLmZvcm1hdCAhPT0gJ1JHQkEnKSB8fFxuICAgICAgICAgIChjaGFubmVscyA9PT0gMyAmJiAob3B0aW9ucy5mb3JtYXQgIT09ICdSR0InICYmIG9wdGlvbnMuZm9ybWF0ICE9PSAnQkdSJykpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGVuc29yIGZvcm1hdCBkb2VzblxcJ3QgbWF0Y2ggaW5wdXQgdGVuc29yIGRpbXMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgICBjb25zdCBzdGVwID0gNDtcbiAgICBsZXQgckltYWdlUG9pbnRlciA9IDAsIGdJbWFnZVBvaW50ZXIgPSAxLCBiSW1hZ2VQb2ludGVyID0gMiwgYUltYWdlUG9pbnRlciA9IDM7XG4gICAgbGV0IHJUZW5zb3JQb2ludGVyID0gMCwgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUsIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMiwgYVRlbnNvclBvaW50ZXIgPSAtMTtcblxuICAgIC8vIFVwZGF0aW5nIHRoZSBwb2ludGVyIGFzc2lnbm1lbnRzIGJhc2VkIG9uIHRoZSBpbnB1dCBpbWFnZSBmb3JtYXRcbiAgICBpZiAoaW5wdXRmb3JtYXQgPT09ICdSR0JBJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgICBhVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDM7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQicpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRmb3JtYXQgPT09ICdSQkcnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICB9XG5cbiAgICBpbWFnZSA9IHBpeGVsczJEQ29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodCAqIHdpZHRoO1xuICAgICAgICAgckltYWdlUG9pbnRlciArPSBzdGVwLCBnSW1hZ2VQb2ludGVyICs9IHN0ZXAsIGJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgYUltYWdlUG9pbnRlciArPSBzdGVwLCBpKyspIHtcbiAgICAgIGltYWdlLmRhdGFbckltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW3JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1swXSkgKiBub3JtTWVhblswXTsgIC8vIFIgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbZ0ltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW2dUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1sxXSkgKiBub3JtTWVhblsxXTsgIC8vIEcgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbYkltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW2JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1syXSkgKiBub3JtTWVhblsyXTsgIC8vIEIgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbYUltYWdlUG9pbnRlcl0gPSBhVGVuc29yUG9pbnRlciA9PT0gLTEgP1xuICAgICAgICAgIDI1NSA6XG4gICAgICAgICAgKCh0ZW5zb3IuZGF0YVthVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbM10pICogbm9ybU1lYW5bM107ICAvLyBBIHZhbHVlXG4gICAgfVxuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gIH1cbiAgcmV0dXJuIGltYWdlO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtPcHRpb25zRGltZW5zaW9ucywgT3B0aW9uc0Zvcm1hdCwgT3B0aW9uc05vcm1hbGl6YXRpb25QYXJhbWV0ZXJzLCBPcHRpb25zVGVuc29yRm9ybWF0LCBPcHRpb25zVGVuc29yTGF5b3V0LCBUZW5zb3JGcm9tR3B1QnVmZmVyT3B0aW9ucywgVGVuc29yRnJvbUltYWdlQml0bWFwT3B0aW9ucywgVGVuc29yRnJvbUltYWdlRGF0YU9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zLCBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnMsIFRlbnNvckZyb21VcmxPcHRpb25zfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci1pbXBsLmpzJztcbmltcG9ydCB7VGVuc29yIGFzIFRlbnNvckludGVyZmFjZX0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG5pbnRlcmZhY2UgQnVmZmVyVG9UZW5zb3JPcHRpb25zIGV4dGVuZHMgT3B0aW9uc0RpbWVuc2lvbnMsIE9wdGlvbnNUZW5zb3JMYXlvdXQsIE9wdGlvbnNOb3JtYWxpemF0aW9uUGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcHRpb25zRm9ybWF0LCBPcHRpb25zVGVuc29yRm9ybWF0IHt9XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSBpbWFnZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0gYnVmZmVyIC0gRXh0cmFjdGVkIGltYWdlIGJ1ZmZlciBkYXRhIC0gYXNzdW1pbmcgUkdCQSBmb3JtYXRcbiAqIEBwYXJhbSBpbWFnZUZvcm1hdCAtIGlucHV0IGltYWdlIGNvbmZpZ3VyYXRpb24gLSByZXF1aXJlZCBjb25maWd1cmF0aW9ucyBoZWlnaHQsIHdpZHRoLCBmb3JtYXRcbiAqIEBwYXJhbSB0ZW5zb3JGb3JtYXQgLSBvdXRwdXQgdGVuc29yIGNvbmZpZ3VyYXRpb24gLSBEZWZhdWx0IGlzIFJHQiBmb3JtYXRcbiAqL1xuZXhwb3J0IGNvbnN0IGJ1ZmZlclRvVGVuc29yID0gKGJ1ZmZlcjogVWludDhDbGFtcGVkQXJyYXl8dW5kZWZpbmVkLCBvcHRpb25zOiBCdWZmZXJUb1RlbnNvck9wdGlvbnMpOiBUZW5zb3IgPT4ge1xuICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIGJ1ZmZlciBtdXN0IGJlIGRlZmluZWQnKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oZWlnaHQgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLndpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIGhlaWdodCBhbmQgd2lkdGggbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05IV0MgVGVuc29yIGxheW91dCBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgY29uc3Qge2hlaWdodCwgd2lkdGh9ID0gb3B0aW9ucztcblxuICBjb25zdCBub3JtID0gb3B0aW9ucy5ub3JtID8/IHttZWFuOiAyNTUsIGJpYXM6IDB9O1xuICBsZXQgbm9ybU1lYW46IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuXG4gIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuXTtcbiAgfSBlbHNlIHtcbiAgICBub3JtTWVhbiA9IFtub3JtLm1lYW4hWzBdLCBub3JtLm1lYW4hWzFdLCBub3JtLm1lYW4hWzJdLCBub3JtLm1lYW4hWzNdID8/IDI1NV07XG4gIH1cblxuICBpZiAodHlwZW9mIChub3JtLmJpYXMpID09PSAnbnVtYmVyJykge1xuICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhc107XG4gIH0gZWxzZSB7XG4gICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzIVswXSwgbm9ybS5iaWFzIVsxXSwgbm9ybS5iaWFzIVsyXSwgbm9ybS5iaWFzIVszXSA/PyAwXTtcbiAgfVxuXG4gIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZm9ybWF0IDogJ1JHQkEnO1xuICAvLyBkZWZhdWx0IHZhbHVlIGlzIFJHQkEgc2luY2UgaW1hZ2VkYXRhIGFuZCBIVE1MSW1hZ2VFbGVtZW50IHVzZXMgaXRcblxuICBjb25zdCBvdXRwdXRmb3JtYXQgPVxuICAgICAgb3B0aW9ucy50ZW5zb3JGb3JtYXQgIT09IHVuZGVmaW5lZCA/IChvcHRpb25zLnRlbnNvckZvcm1hdCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50ZW5zb3JGb3JtYXQgOiAnUkdCJykgOiAnUkdCJztcbiAgY29uc3Qgc3RyaWRlID0gaGVpZ2h0ICogd2lkdGg7XG4gIGNvbnN0IGZsb2F0MzJEYXRhID0gb3V0cHV0Zm9ybWF0ID09PSAnUkdCQScgPyBuZXcgRmxvYXQzMkFycmF5KHN0cmlkZSAqIDQpIDogbmV3IEZsb2F0MzJBcnJheShzdHJpZGUgKiAzKTtcblxuICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgbGV0IHN0ZXAgPSA0LCBySW1hZ2VQb2ludGVyID0gMCwgZ0ltYWdlUG9pbnRlciA9IDEsIGJJbWFnZVBvaW50ZXIgPSAyLCBhSW1hZ2VQb2ludGVyID0gMztcbiAgbGV0IHJUZW5zb3JQb2ludGVyID0gMCwgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUsIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMiwgYVRlbnNvclBvaW50ZXIgPSAtMTtcblxuICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgaW5wdXQgaW1hZ2UgZm9ybWF0XG4gIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQicpIHtcbiAgICBzdGVwID0gMztcbiAgICBySW1hZ2VQb2ludGVyID0gMDtcbiAgICBnSW1hZ2VQb2ludGVyID0gMTtcbiAgICBiSW1hZ2VQb2ludGVyID0gMjtcbiAgICBhSW1hZ2VQb2ludGVyID0gLTE7XG4gIH1cblxuICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgb3V0cHV0IHRlbnNvciBmb3JtYXRcbiAgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ1JHQkEnKSB7XG4gICAgYVRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAzO1xuICB9IGVsc2UgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ1JCRycpIHtcbiAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICB9IGVsc2UgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ0JHUicpIHtcbiAgICBiVGVuc29yUG9pbnRlciA9IDA7XG4gICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgclRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpZGU7XG4gICAgICAgaSsrLCBySW1hZ2VQb2ludGVyICs9IHN0ZXAsIGJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgZ0ltYWdlUG9pbnRlciArPSBzdGVwLCBhSW1hZ2VQb2ludGVyICs9IHN0ZXApIHtcbiAgICBmbG9hdDMyRGF0YVtyVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbckltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1swXSkgLyBub3JtTWVhblswXTtcbiAgICBmbG9hdDMyRGF0YVtnVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbZ0ltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1sxXSkgLyBub3JtTWVhblsxXTtcbiAgICBmbG9hdDMyRGF0YVtiVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbYkltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1syXSkgLyBub3JtTWVhblsyXTtcbiAgICBpZiAoYVRlbnNvclBvaW50ZXIgIT09IC0xICYmIGFJbWFnZVBvaW50ZXIgIT09IC0xKSB7XG4gICAgICBmbG9hdDMyRGF0YVthVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbYUltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1szXSkgLyBub3JtTWVhblszXTtcbiAgICB9XG4gIH1cblxuICAvLyBGbG9hdDMyQXJyYXkgLT4gb3J0LlRlbnNvclxuICBjb25zdCBvdXRwdXRUZW5zb3IgPSBvdXRwdXRmb3JtYXQgPT09ICdSR0JBJyA/IG5ldyBUZW5zb3IoJ2Zsb2F0MzInLCBmbG9hdDMyRGF0YSwgWzEsIDQsIGhlaWdodCwgd2lkdGhdKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRlbnNvcignZmxvYXQzMicsIGZsb2F0MzJEYXRhLCBbMSwgMywgaGVpZ2h0LCB3aWR0aF0pO1xuICByZXR1cm4gb3V0cHV0VGVuc29yO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbUltYWdlKCkuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JGcm9tSW1hZ2UgPSBhc3luYyhcbiAgICBpbWFnZTogSW1hZ2VEYXRhfEhUTUxJbWFnZUVsZW1lbnR8SW1hZ2VCaXRtYXB8c3RyaW5nLFxuICAgIG9wdGlvbnM/OiBUZW5zb3JGcm9tSW1hZ2VEYXRhT3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VCaXRtYXBPcHRpb25zfFxuICAgIFRlbnNvckZyb21VcmxPcHRpb25zKTogUHJvbWlzZTxUZW5zb3I+ID0+IHtcbiAgLy8gY2hlY2tpbmcgdGhlIHR5cGUgb2YgaW1hZ2Ugb2JqZWN0XG4gIGNvbnN0IGlzSFRNTEltYWdlRWxlID0gdHlwZW9mIChIVE1MSW1hZ2VFbGVtZW50KSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50O1xuICBjb25zdCBpc0ltYWdlRGF0YUVsZSA9IHR5cGVvZiAoSW1hZ2VEYXRhKSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZURhdGE7XG4gIGNvbnN0IGlzSW1hZ2VCaXRtYXAgPSB0eXBlb2YgKEltYWdlQml0bWFwKSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcDtcbiAgY29uc3QgaXNTdHJpbmcgPSB0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnO1xuXG4gIGxldCBkYXRhOiBVaW50OENsYW1wZWRBcnJheXx1bmRlZmluZWQ7XG4gIGxldCBidWZmZXJUb1RlbnNvck9wdGlvbnM6IEJ1ZmZlclRvVGVuc29yT3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG5cbiAgY29uc3QgY3JlYXRlQ2FudmFzID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBPZmZzY3JlZW5DYW52YXMoMSwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudmFzIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUNhbnZhc0NvbnRleHQgPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudHxPZmZzY3JlZW5DYW52YXMpID0+IHtcbiAgICBpZiAoY2FudmFzIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB9IGVsc2UgaWYgKGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykge1xuICAgICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIGFzIE9mZnNjcmVlbkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuICAvLyBmaWxsaW5nIGFuZCBjaGVja2luZyBpbWFnZSBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgaWYgKGlzSFRNTEltYWdlRWxlKSB7XG4gICAgLy8gSFRNTEltYWdlRWxlbWVudCAtIGltYWdlIG9iamVjdCAtIGZvcm1hdCBpcyBSR0JBIGJ5IGRlZmF1bHRcbiAgICBjb25zdCBjYW52YXMgPSBjcmVhdGVDYW52YXMoKTtcbiAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGNyZWF0ZUNhbnZhc0NvbnRleHQoY2FudmFzKTtcblxuICAgIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgbGV0IGhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICAgIGxldCB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRIZWlnaHQgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhlaWdodCA9IG9wdGlvbnMucmVzaXplZEhlaWdodDtcbiAgICAgICAgd2lkdGggPSBvcHRpb25zLnJlc2l6ZWRXaWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy50ZW5zb3JGb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgaW5wdXQgY29uZmlnIGZvcm1hdCBtdXN0IGJlIFJHQkEgZm9yIEhUTUxJbWFnZUVsZW1lbnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMudGVuc29yRm9ybWF0ID0gJ1JHQkEnO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLnRlbnNvckZvcm1hdCA9ICdSR0JBJztcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gd2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHBpeGVsczJEQ29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgICAgZGF0YSA9IHBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSW1hZ2VEYXRhRWxlKSB7XG4gICAgbGV0IGhlaWdodDogbnVtYmVyO1xuICAgIGxldCB3aWR0aDogbnVtYmVyO1xuXG4gICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRXaWR0aCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMucmVzaXplZEhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoZWlnaHQgPSBvcHRpb25zLnJlc2l6ZWRIZWlnaHQ7XG4gICAgICB3aWR0aCA9IG9wdGlvbnMucmVzaXplZFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5mb3JtYXQgPSAnUkdCQSc7XG4gICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMud2lkdGggPSB3aWR0aDtcblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHRlbXBDYW52YXMgPSBjcmVhdGVDYW52YXMoKTtcblxuICAgICAgdGVtcENhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgdGVtcENhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGNyZWF0ZUNhbnZhc0NvbnRleHQodGVtcENhbnZhcyk7XG5cbiAgICAgIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgICBwaXhlbHMyRENvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKTtcbiAgICAgICAgZGF0YSA9IHBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gaW1hZ2UuZGF0YTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNJbWFnZUJpdG1hcCkge1xuICAgIC8vIEltYWdlQml0bWFwIC0gaW1hZ2Ugb2JqZWN0IC0gZm9ybWF0IG11c3QgYmUgcHJvdmlkZWQgYnkgdXNlclxuICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgaW1hZ2UgY29uZmlnIHdpdGggZm9ybWF0IGZvciBJbWFnZWJpdG1hcCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbnZhcyA9IGNyZWF0ZUNhbnZhcygpO1xuICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgY29uc3QgcGl4ZWxzMkRDb250ZXh0ID0gY3JlYXRlQ2FudmFzQ29udGV4dChjYW52YXMpO1xuXG4gICAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICBjb25zdCB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgcGl4ZWxzMkRDb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBkYXRhID0gcGl4ZWxzMkRDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhO1xuICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuICAgICAgcmV0dXJuIGJ1ZmZlclRvVGVuc29yKGRhdGEsIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1N0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjYW52YXMgPSBjcmVhdGVDYW52YXMoKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVDYW52YXNDb250ZXh0KGNhbnZhcyk7XG4gICAgICBpZiAoIWltYWdlIHx8ICFjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld0ltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICBuZXdJbWFnZS5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xuICAgICAgbmV3SW1hZ2Uuc3JjID0gaW1hZ2U7XG4gICAgICBuZXdJbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IG5ld0ltYWdlLndpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gbmV3SW1hZ2UuaGVpZ2h0O1xuICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShuZXdJbWFnZSwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgaW1nID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICByZXNvbHZlKGJ1ZmZlclRvVGVuc29yKGltZy5kYXRhLCBidWZmZXJUb1RlbnNvck9wdGlvbnMpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBkYXRhIHByb3ZpZGVkIGlzIG5vdCBzdXBwb3J0ZWQgLSBhYm9ydGVkIHRlbnNvciBjcmVhdGlvbicpO1xuICB9XG5cbiAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBidWZmZXJUb1RlbnNvcihkYXRhLCBidWZmZXJUb1RlbnNvck9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgZGF0YSBwcm92aWRlZCBpcyBub3Qgc3VwcG9ydGVkIC0gYWJvcnRlZCB0ZW5zb3IgY3JlYXRpb24nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbVRleHR1cmUoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21UZXh0dXJlID0gPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZURhdGFUeXBlcz4oXG4gICAgdGV4dHVyZTogVGVuc29ySW50ZXJmYWNlLlRleHR1cmVUeXBlLCBvcHRpb25zOiBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnM8VD4pOiBUZW5zb3IgPT4ge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodCwgZG93bmxvYWQsIGRpc3Bvc2V9ID0gb3B0aW9ucztcbiAgLy8gQWx3YXlzIGFzc3VtZSBSR0JBRjMyLiBUT0RPOiBzdXBwb3J0IGRpZmZlcmVudCB0ZXh0dXJlIGZvcm1hdFxuICBjb25zdCBkaW1zID0gWzEsIGhlaWdodCwgd2lkdGgsIDRdO1xuICByZXR1cm4gbmV3IFRlbnNvcih7bG9jYXRpb246ICd0ZXh0dXJlJywgdHlwZTogJ2Zsb2F0MzInLCB0ZXh0dXJlLCBkaW1zLCBkb3dubG9hZCwgZGlzcG9zZX0pO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbUdwdUJ1ZmZlcigpLlxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRnJvbUdwdUJ1ZmZlciA9IDxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkdwdUJ1ZmZlckRhdGFUeXBlcz4oXG4gICAgZ3B1QnVmZmVyOiBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnM8VD4pOiBUZW5zb3IgPT4ge1xuICBjb25zdCB7ZGF0YVR5cGUsIGRpbXMsIGRvd25sb2FkLCBkaXNwb3NlfSA9IG9wdGlvbnM7XG4gIHJldHVybiBuZXcgVGVuc29yKHtsb2NhdGlvbjogJ2dwdS1idWZmZXInLCB0eXBlOiBkYXRhVHlwZSA/PyAnZmxvYXQzMicsIGdwdUJ1ZmZlciwgZGltcywgZG93bmxvYWQsIGRpc3Bvc2V9KTtcbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLmZyb21QaW5uZWRCdWZmZXIoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21QaW5uZWRCdWZmZXIgPSA8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5DcHVQaW5uZWREYXRhVHlwZXM+KFxuICAgIHR5cGU6IFQsIGJ1ZmZlcjogVGVuc29ySW50ZXJmYWNlLkRhdGFUeXBlTWFwW1RdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3IgPT5cbiAgICBuZXcgVGVuc29yKHtsb2NhdGlvbjogJ2NwdS1waW5uZWQnLCB0eXBlLCBkYXRhOiBidWZmZXIsIGRpbXM6IGRpbXMgPz8gW2J1ZmZlci5sZW5ndGhdfSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbmV4cG9ydCB0eXBlIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSBGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8SW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgVWludDE2QXJyYXlDb25zdHJ1Y3RvcnxJbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MzJBcnJheUNvbnN0cnVjdG9yfEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgRmxvYXQ2NEFycmF5Q29uc3RydWN0b3J8VWludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yO1xuZXhwb3J0IHR5cGUgU3VwcG9ydGVkVHlwZWRBcnJheSA9IEluc3RhbmNlVHlwZTxTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzPjtcblxuLy8gYSBydW50aW1lIG1hcCB0aGF0IG1hcHMgdHlwZSBzdHJpbmcgdG8gVHlwZWRBcnJheSBjb25zdHJ1Y3Rvci4gU2hvdWxkIG1hdGNoIFRlbnNvci5EYXRhVHlwZU1hcC5cbmV4cG9ydCBjb25zdCBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQID0gbmV3IE1hcDxzdHJpbmcsIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnM+KFtcbiAgWydmbG9hdDMyJywgRmxvYXQzMkFycmF5XSxcbiAgWyd1aW50OCcsIFVpbnQ4QXJyYXldLFxuICBbJ2ludDgnLCBJbnQ4QXJyYXldLFxuICBbJ3VpbnQxNicsIFVpbnQxNkFycmF5XSxcbiAgWydmbG9hdDE2JywgVWludDE2QXJyYXldLFxuICBbJ2ludDE2JywgSW50MTZBcnJheV0sXG4gIFsnaW50MzInLCBJbnQzMkFycmF5XSxcbiAgWydib29sJywgVWludDhBcnJheV0sXG4gIFsnZmxvYXQ2NCcsIEZsb2F0NjRBcnJheV0sXG4gIFsndWludDMyJywgVWludDMyQXJyYXldLFxuXSk7XG5cbi8vIGEgcnVudGltZSBtYXAgdGhhdCBtYXBzIHR5cGUgc3RyaW5nIHRvIFR5cGVkQXJyYXkgY29uc3RydWN0b3IuIFNob3VsZCBtYXRjaCBUZW5zb3IuRGF0YVR5cGVNYXAuXG5leHBvcnQgY29uc3QgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUCA9IG5ldyBNYXA8U3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycywgVGVuc29yLlR5cGU+KFtcbiAgW0Zsb2F0MzJBcnJheSwgJ2Zsb2F0MzInXSxcbiAgW1VpbnQ4QXJyYXksICd1aW50OCddLFxuICBbSW50OEFycmF5LCAnaW50OCddLFxuICBbVWludDE2QXJyYXksICd1aW50MTYnXSxcbiAgW0ludDE2QXJyYXksICdpbnQxNiddLFxuICBbSW50MzJBcnJheSwgJ2ludDMyJ10sXG4gIFtGbG9hdDY0QXJyYXksICdmbG9hdDY0J10sXG4gIFtVaW50MzJBcnJheSwgJ3VpbnQzMiddLFxuXSk7XG5cbi8vIHRoZSBmb2xsb3dpbmcgY29kZSBhbGxvd3MgZGVsYXlpbmcgZXhlY3V0aW9uIG9mIEJpZ0ludCBjaGVja2luZy4gVGhpcyBhbGxvd3MgbGF6eSBpbml0aWFsaXphdGlvbiBmb3Jcbi8vIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAgYW5kIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAsIHdoaWNoIGFsbG93cyBCaWdJbnQgcG9seWZpbGxcbi8vIGlmIGF2YWlsYWJsZS5cbmxldCBpc0JpZ0ludENoZWNrZWQgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBjaGVja0JpZ0ludCA9ICgpID0+IHtcbiAgaWYgKCFpc0JpZ0ludENoZWNrZWQpIHtcbiAgICBpc0JpZ0ludENoZWNrZWQgPSB0cnVlO1xuICAgIGNvbnN0IGlzQmlnSW50NjRBcnJheUF2YWlsYWJsZSA9IHR5cGVvZiBCaWdJbnQ2NEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQmlnSW50NjRBcnJheS5mcm9tID09PSAnZnVuY3Rpb24nO1xuICAgIGNvbnN0IGlzQmlnVWludDY0QXJyYXlBdmFpbGFibGUgPVxuICAgICAgICB0eXBlb2YgQmlnVWludDY0QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBCaWdVaW50NjRBcnJheS5mcm9tID09PSAnZnVuY3Rpb24nO1xuXG4gICAgaWYgKGlzQmlnSW50NjRBcnJheUF2YWlsYWJsZSkge1xuICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5zZXQoJ2ludDY0JywgQmlnSW50NjRBcnJheSk7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLnNldChCaWdJbnQ2NEFycmF5LCAnaW50NjQnKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnVWludDY0QXJyYXlBdmFpbGFibGUpIHtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAuc2V0KCd1aW50NjQnLCBCaWdVaW50NjRBcnJheSk7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLnNldChCaWdVaW50NjRBcnJheSwgJ3VpbnQ2NCcpO1xuICAgIH1cbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnMsIEdwdUJ1ZmZlckNvbnN0cnVjdG9yUGFyYW1ldGVycywgVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVyc30gZnJvbSAnLi90ZW5zb3ItZmFjdG9yeS5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3ItaW1wbC5qcyc7XG5cbi8qKlxuICogY2FsY3VsYXRlIHNpemUgZnJvbSBkaW1zLlxuICpcbiAqIEBwYXJhbSBkaW1zIHRoZSBkaW1zIGFycmF5LiBNYXkgYmUgYW4gaWxsZWdhbCBpbnB1dC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVNpemUgPSAoZGltczogcmVhZG9ubHkgdW5rbm93bltdKTogbnVtYmVyID0+IHtcbiAgbGV0IHNpemUgPSAxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpbXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkaW0gPSBkaW1zW2ldO1xuICAgIGlmICh0eXBlb2YgZGltICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzU2FmZUludGVnZXIoZGltKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgZGltc1ske2l9XSBtdXN0IGJlIGFuIGludGVnZXIsIGdvdDogJHtkaW19YCk7XG4gICAgfVxuICAgIGlmIChkaW0gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgZGltc1ske2l9XSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIsIGdvdDogJHtkaW19YCk7XG4gICAgfVxuICAgIHNpemUgKj0gZGltO1xuICB9XG4gIHJldHVybiBzaXplO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IucmVzaGFwZSgpXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JSZXNoYXBlID0gKHRlbnNvcjogVGVuc29yLCBkaW1zOiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvciA9PiB7XG4gIHN3aXRjaCAodGVuc29yLmxvY2F0aW9uKSB7XG4gICAgY2FzZSAnY3B1JzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHRlbnNvci50eXBlLCB0ZW5zb3IuZGF0YSwgZGltcyk7XG4gICAgY2FzZSAnY3B1LXBpbm5lZCc6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih7XG4gICAgICAgIGxvY2F0aW9uOiAnY3B1LXBpbm5lZCcsXG4gICAgICAgIGRhdGE6IHRlbnNvci5kYXRhIGFzIENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVyc1snZGF0YSddLFxuICAgICAgICB0eXBlOiB0ZW5zb3IudHlwZSBhcyBDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnNbJ3R5cGUnXSxcbiAgICAgICAgZGltcyxcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgcmV0dXJuIG5ldyBUZW5zb3Ioe1xuICAgICAgICBsb2NhdGlvbjogJ3RleHR1cmUnLFxuICAgICAgICB0ZXh0dXJlOiB0ZW5zb3IudGV4dHVyZSxcbiAgICAgICAgdHlwZTogdGVuc29yLnR5cGUgYXMgVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVyc1sndHlwZSddLFxuICAgICAgICBkaW1zLFxuICAgICAgfSk7XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih7XG4gICAgICAgIGxvY2F0aW9uOiAnZ3B1LWJ1ZmZlcicsXG4gICAgICAgIGdwdUJ1ZmZlcjogdGVuc29yLmdwdUJ1ZmZlcixcbiAgICAgICAgdHlwZTogdGVuc29yLnR5cGUgYXMgR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzWyd0eXBlJ10sXG4gICAgICAgIGRpbXMsXG4gICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0ZW5zb3JSZXNoYXBlOiB0ZW5zb3IgbG9jYXRpb24gJHt0ZW5zb3IubG9jYXRpb259IGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHt0ZW5zb3JUb0RhdGFVUkwsIHRlbnNvclRvSW1hZ2VEYXRhfSBmcm9tICcuL3RlbnNvci1jb252ZXJzaW9uLWltcGwuanMnO1xuaW1wb3J0IHtUZW5zb3JUb0RhdGFVcmxPcHRpb25zLCBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnN9IGZyb20gJy4vdGVuc29yLWNvbnZlcnNpb24uanMnO1xuaW1wb3J0IHt0ZW5zb3JGcm9tR3B1QnVmZmVyLCB0ZW5zb3JGcm9tSW1hZ2UsIHRlbnNvckZyb21QaW5uZWRCdWZmZXIsIHRlbnNvckZyb21UZXh0dXJlfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LWltcGwuanMnO1xuaW1wb3J0IHtDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnMsIEdwdUJ1ZmZlckNvbnN0cnVjdG9yUGFyYW1ldGVycywgVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUJpdG1hcE9wdGlvbnMsIFRlbnNvckZyb21JbWFnZURhdGFPcHRpb25zLCBUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9ucywgVGVuc29yRnJvbVRleHR1cmVPcHRpb25zLCBUZW5zb3JGcm9tVXJsT3B0aW9ucywgVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVyc30gZnJvbSAnLi90ZW5zb3ItZmFjdG9yeS5qcyc7XG5pbXBvcnQge2NoZWNrQmlnSW50LCBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLCBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLCBTdXBwb3J0ZWRUeXBlZEFycmF5LCBTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzfSBmcm9tICcuL3RlbnNvci1pbXBsLXR5cGUtbWFwcGluZy5qcyc7XG5pbXBvcnQge2NhbGN1bGF0ZVNpemUsIHRlbnNvclJlc2hhcGV9IGZyb20gJy4vdGVuc29yLXV0aWxzLWltcGwuanMnO1xuaW1wb3J0IHtUZW5zb3IgYXMgVGVuc29ySW50ZXJmYWNlfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbi8vIHR5cGUgYWxpYXNlcyBmb3IgdGhvc2UgZXhwb3J0ZWQgZnJvbSBUZW5zb3IgaW50ZXJmYWNlXG5cbnR5cGUgVGVuc29yVHlwZSA9IFRlbnNvckludGVyZmFjZS5UeXBlO1xudHlwZSBUZW5zb3JEYXRhVHlwZSA9IFRlbnNvckludGVyZmFjZS5EYXRhVHlwZTtcbnR5cGUgVGVuc29yRGF0YUxvY2F0aW9uID0gVGVuc29ySW50ZXJmYWNlLkRhdGFMb2NhdGlvbjtcbnR5cGUgVGVuc29yVGV4dHVyZVR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZVR5cGU7XG50eXBlIFRlbnNvckdwdUJ1ZmZlclR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyVHlwZTtcblxuLyoqXG4gKiB0aGUgaW1wbGVtZW50YXRpb24gb2YgVGVuc29yIGludGVyZmFjZS5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5zb3IgaW1wbGVtZW50cyBUZW5zb3JJbnRlcmZhY2Uge1xuICAvLyAjcmVnaW9uIGNvbnN0cnVjdG9yc1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgQ1BVIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgdHlwZTogVGVuc29yVHlwZSwgZGF0YTogVGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgbnVtYmVyW118cmVhZG9ubHkgYm9vbGVhbltdLFxuICAgICAgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBDUFUgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLiBUeXBlIGlzIGluZmVycmVkIGZyb20gZGF0YS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJvb2xlYW5bXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIHBpbm5lZCBDUFUgZGF0YSB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCBkaW1zLlxuICAgKlxuICAgKiBUZW5zb3IncyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAnY3B1LXBpbm5lZCcuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBTcGVjaWZ5IHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnN0cnVjdCB0aGUgdGVuc29yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zOiBDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnMpO1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgV2ViR0wgdGV4dHVyZSB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCBkaW1zLlxuICAgKlxuICAgKiBUZW5zb3IncyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAndGV4dHVyZScuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBTcGVjaWZ5IHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnN0cnVjdCB0aGUgdGVuc29yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zOiBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIFdlYkdQVSBidWZmZXIgd2l0aCB0aGUgZ2l2ZW4gdHlwZSBhbmQgZGltcy5cbiAgICpcbiAgICogVGVuc29yJ3MgbG9jYXRpb24gd2lsbCBiZSBzZXQgdG8gJ2dwdS1idWZmZXInLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gU3BlY2lmeSB0aGUgcGFyYW1ldGVycyB0byBjb25zdHJ1Y3QgdGhlIHRlbnNvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzKTtcblxuICAvKipcbiAgICogaW1wbGVtZW50YXRpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIGFyZzA6IFRlbnNvclR5cGV8VGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgYm9vbGVhbltdfENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVyc3xcbiAgICAgIFRleHR1cmVDb25zdHJ1Y3RvclBhcmFtZXRlcnN8R3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzLFxuICAgICAgYXJnMT86IFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IG51bWJlcltdfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJvb2xlYW5bXSwgYXJnMj86IHJlYWRvbmx5IG51bWJlcltdKSB7XG4gICAgLy8gcGVyZm9ybSBvbmUtdGltZSBjaGVjayBmb3IgQmlnSW50IHN1cHBvcnRcbiAgICBjaGVja0JpZ0ludCgpO1xuXG4gICAgbGV0IHR5cGU6IFRlbnNvclR5cGU7XG4gICAgbGV0IGRpbXM6IHJlYWRvbmx5IG51bWJlcltdO1xuXG4gICAgaWYgKHR5cGVvZiBhcmcwID09PSAnb2JqZWN0JyAmJiAnbG9jYXRpb24nIGluIGFyZzApIHtcbiAgICAgIC8vXG4gICAgICAvLyBjb25zdHJ1Y3RpbmcgdGVuc29yIGZyb20gc3BlY2lmaWMgbG9jYXRpb25cbiAgICAgIC8vXG4gICAgICB0aGlzLmRhdGFMb2NhdGlvbiA9IGFyZzAubG9jYXRpb247XG4gICAgICB0eXBlID0gYXJnMC50eXBlO1xuICAgICAgZGltcyA9IGFyZzAuZGltcztcbiAgICAgIHN3aXRjaCAoYXJnMC5sb2NhdGlvbikge1xuICAgICAgICBjYXNlICdjcHUtcGlubmVkJzoge1xuICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5nZXQodHlwZSk7XG4gICAgICAgICAgaWYgKCFleHBlY3RlZFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZSBcIiR7dHlwZX1cIiB0byBjcmVhdGUgdGVuc29yIGZyb20gcGlubmVkIGJ1ZmZlcmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShhcmcwLmRhdGEgaW5zdGFuY2VvZiBleHBlY3RlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGJ1ZmZlciBzaG91bGQgYmUgb2YgdHlwZSAke2V4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY3B1RGF0YSA9IGFyZzAuZGF0YTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0ZXh0dXJlJzoge1xuICAgICAgICAgIGlmICh0eXBlICE9PSAnZmxvYXQzMicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHVuc3VwcG9ydGVkIHR5cGUgXCIke3R5cGV9XCIgdG8gY3JlYXRlIHRlbnNvciBmcm9tIHRleHR1cmVgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ncHVUZXh0dXJlRGF0YSA9IGFyZzAudGV4dHVyZTtcbiAgICAgICAgICB0aGlzLmRvd25sb2FkZXIgPSBhcmcwLmRvd25sb2FkO1xuICAgICAgICAgIHRoaXMuZGlzcG9zZXIgPSBhcmcwLmRpc3Bvc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZ3B1LWJ1ZmZlcic6IHtcbiAgICAgICAgICBpZiAoKHR5cGUgIT09ICdmbG9hdDMyJyAmJiB0eXBlICE9PSAnZmxvYXQxNicgJiYgdHlwZSAhPT0gJ2ludDMyJyAmJiB0eXBlICE9PSAnaW50NjQnICYmIHR5cGUgIT09ICd1aW50MzInICYmXG4gICAgICAgICAgICAgICB0eXBlICE9PSAnYm9vbCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB1bnN1cHBvcnRlZCB0eXBlIFwiJHt0eXBlfVwiIHRvIGNyZWF0ZSB0ZW5zb3IgZnJvbSBncHUgYnVmZmVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ3B1QnVmZmVyRGF0YSA9IGFyZzAuZ3B1QnVmZmVyO1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRlciA9IGFyZzAuZG93bmxvYWQ7XG4gICAgICAgICAgdGhpcy5kaXNwb3NlciA9IGFyZzAuZGlzcG9zZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGVuc29yIGNvbnN0cnVjdG9yOiB1bnN1cHBvcnRlZCBsb2NhdGlvbiAnJHt0aGlzLmRhdGFMb2NhdGlvbn0nYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vXG4gICAgICAvLyBjb25zdHJ1Y3RpbmcgdGVuc29yIG9mIGxvY2F0aW9uICdjcHUnXG4gICAgICAvL1xuICAgICAgbGV0IGRhdGE6IFRlbnNvckRhdGFUeXBlO1xuICAgICAgbGV0IG1heWJlRGltczogdHlwZW9mIGFyZzF8dHlwZW9mIGFyZzI7XG4gICAgICAvLyBjaGVjayB3aGV0aGVyIGFyZzAgaXMgdHlwZSBvciBkYXRhXG4gICAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIE92ZXJyaWRlOiBjb25zdHJ1Y3Rvcih0eXBlLCBkYXRhLCAuLi4pXG4gICAgICAgIC8vXG4gICAgICAgIHR5cGUgPSBhcmcwO1xuICAgICAgICBtYXliZURpbXMgPSBhcmcyO1xuICAgICAgICBpZiAoYXJnMCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBzdHJpbmcgdGVuc29yXG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZzEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHN0cmluZyB0ZW5zb3JcXCdzIGRhdGEgbXVzdCBiZSBhIHN0cmluZyBhcnJheS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgZG9uJ3QgY2hlY2sgd2hldGhlciBldmVyeSBlbGVtZW50IGluIHRoZSBhcnJheSBpcyBzdHJpbmc7IHRoaXMgaXMgdG9vIHNsb3cuIHdlIGFzc3VtZSBpdCdzIGNvcnJlY3QgYW5kXG4gICAgICAgICAgLy8gZXJyb3Igd2lsbCBiZSBwb3B1bGF0ZWQgYXQgaW5mZXJlbmNlXG4gICAgICAgICAgZGF0YSA9IGFyZzE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbnVtZXJpYyB0ZW5zb3JcbiAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLmdldChhcmcwKTtcbiAgICAgICAgICBpZiAodHlwZWRBcnJheUNvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVuc3VwcG9ydGVkIHRlbnNvciB0eXBlOiAke2FyZzB9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcxKSkge1xuICAgICAgICAgICAgaWYgKGFyZzAgPT09ICdmbG9hdDE2Jykge1xuICAgICAgICAgICAgICAvLyBUaHJvdyBlcnJvciBoZXJlIGJlY2F1c2Ugd2hlbiB1c2VyIHRyeSB0byB1c2UgbnVtYmVyIGFycmF5IGFzIGRhdGEsXG4gICAgICAgICAgICAgIC8vIGUuZy4gbmV3IFRlbnNvcignZmxvYXQxNicsIFsxLCAyLCAzLCA0XSwgZGltcykpLCBpdCB3aWxsIGFjdHVhbGx5IGNhbGxcbiAgICAgICAgICAgICAgLy8gVWludDE2QXJyYXkuZnJvbShhcmcxKSB3aGljaCBnZW5lcmF0ZXMgd3JvbmcgZGF0YS5cbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICAgICdDcmVhdGluZyBhIGZsb2F0MTYgdGVuc29yIGZyb20gbnVtYmVyIGFycmF5IGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgVWludDE2QXJyYXkgYXMgZGF0YS4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnMCA9PT0gJ3VpbnQ2NCcgfHwgYXJnMCA9PT0gJ2ludDY0Jykge1xuICAgICAgICAgICAgICAvLyB1c2UgJ2FzIGFueScgaGVyZSBiZWNhdXNlOlxuICAgICAgICAgICAgICAvLyAxLiBUeXBlU2NyaXB0J3MgY2hlY2sgb24gdHlwZSBvZiAnQXJyYXkuaXNBcnJheSgpJyBkb2VzIG5vdCB3b3JrIHdpdGggcmVhZG9ubHkgYXJyYXlzLlxuICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xNzAwMlxuICAgICAgICAgICAgICAvLyAyLiBUeXBlU2NyaXB0J3MgY2hlY2sgb24gdW5pb24gdHlwZSBvZiAnKEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yKS5mcm9tKCknXG4gICAgICAgICAgICAgIC8vIGRvZXMgbm90IGFjY2VwdCBwYXJhbWV0ZXIgbWFwRm4uXG4gICAgICAgICAgICAgIC8vIDMuIHBhcmFtZXRlcnMgb2YgJ1N1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMuZnJvbSgpJyBkb2VzIG5vdCBtYXRjaCB0aGUgcmVxdWlyZW1lbnQgb2YgdGhlIHVuaW9uXG4gICAgICAgICAgICAgIC8vIHR5cGUuXG5cbiAgICAgICAgICAgICAgLy8gYXNzdW1lICdhcmcxJyBpcyBvZiB0eXBlIFwicmVhZG9ubHkgbnVtYmVyW118cmVhZG9ubHkgYmlnaW50W11cIiBoZXJlLlxuXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgIGRhdGEgPSAodHlwZWRBcnJheUNvbnN0cnVjdG9yIGFzIGFueSkuZnJvbShhcmcxLCBCaWdJbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gYXNzdW1lICdhcmcxJyBpcyBvZiB0eXBlIFwicmVhZG9ubHkgbnVtYmVyW11cIiBoZXJlLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICBkYXRhID0gKHR5cGVkQXJyYXlDb25zdHJ1Y3RvciBhcyBhbnkpLmZyb20oYXJnMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhcmcxIGluc3RhbmNlb2YgdHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBkYXRhID0gYXJnMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQSAke3R5cGV9IHRlbnNvcidzIGRhdGEgbXVzdCBiZSB0eXBlIG9mICR7dHlwZWRBcnJheUNvbnN0cnVjdG9yfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gT3ZlcnJpZGU6IGNvbnN0cnVjdG9yKGRhdGEsIC4uLilcbiAgICAgICAgLy9cbiAgICAgICAgbWF5YmVEaW1zID0gYXJnMTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMCkpIHtcbiAgICAgICAgICAvLyBvbmx5IGJvb2xlYW5bXSBhbmQgc3RyaW5nW10gaXMgc3VwcG9ydGVkXG4gICAgICAgICAgaWYgKGFyZzAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUZW5zb3IgdHlwZSBjYW5ub3QgYmUgaW5mZXJyZWQgZnJvbSBhbiBlbXB0eSBhcnJheS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZmlyc3RFbGVtZW50VHlwZSA9IHR5cGVvZiBhcmcwWzBdO1xuICAgICAgICAgIGlmIChmaXJzdEVsZW1lbnRUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICAgICAgZGF0YSA9IGFyZzA7XG4gICAgICAgICAgfSBlbHNlIGlmIChmaXJzdEVsZW1lbnRUeXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHR5cGUgPSAnYm9vbCc7XG4gICAgICAgICAgICAvLyAnYXJnMCcgaXMgb2YgdHlwZSAnYm9vbGVhbltdJy4gVWludDhBcnJheS5mcm9tKGJvb2xlYW5bXSkgYWN0dWFsbHkgd29ya3MsIGJ1dCB0eXBlc2NyaXB0IHRoaW5rcyB0aGlzIGlzXG4gICAgICAgICAgICAvLyB3cm9uZyB0eXBlLiBXZSB1c2UgJ2FzIGFueScgdG8gbWFrZSBpdCBoYXBweS5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBkYXRhID0gVWludDhBcnJheS5mcm9tKGFyZzAgYXMgYW55W10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGVsZW1lbnQgdHlwZSBvZiBkYXRhIGFycmF5OiAke2ZpcnN0RWxlbWVudFR5cGV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBnZXQgdGVuc29yIHR5cGUgZnJvbSBUeXBlZEFycmF5XG4gICAgICAgICAgY29uc3QgbWFwcGVkVHlwZSA9XG4gICAgICAgICAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAuZ2V0KGFyZzAuY29uc3RydWN0b3IgYXMgU3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycyk7XG4gICAgICAgICAgaWYgKG1hcHBlZFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZSBmb3IgdGVuc29yIGRhdGE6ICR7YXJnMC5jb25zdHJ1Y3Rvcn0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHR5cGUgPSBtYXBwZWRUeXBlO1xuICAgICAgICAgIGRhdGEgPSBhcmcwIGFzIFN1cHBvcnRlZFR5cGVkQXJyYXk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdHlwZSBhbmQgZGF0YSBpcyBwcm9jZXNzZWQsIG5vdyBwcm9jZXNzaW5nIGRpbXNcbiAgICAgIGlmIChtYXliZURpbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBhc3N1bWUgMS1EIHRlbnNvciBpZiBkaW1zIG9taXR0ZWRcbiAgICAgICAgbWF5YmVEaW1zID0gW2RhdGEubGVuZ3RoXTtcbiAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkobWF5YmVEaW1zKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHRlbnNvclxcJ3MgZGltcyBtdXN0IGJlIGEgbnVtYmVyIGFycmF5Jyk7XG4gICAgICB9XG4gICAgICBkaW1zID0gbWF5YmVEaW1zIGFzIHJlYWRvbmx5IG51bWJlcltdO1xuXG4gICAgICB0aGlzLmNwdURhdGEgPSBkYXRhO1xuICAgICAgdGhpcy5kYXRhTG9jYXRpb24gPSAnY3B1JztcbiAgICB9XG5cbiAgICAvLyBwZXJmb3JtIGNoZWNrIG9uIGRpbXNcbiAgICBjb25zdCBzaXplID0gY2FsY3VsYXRlU2l6ZShkaW1zKTtcbiAgICAvLyBpZiBkYXRhIGlzIG9uIENQVSwgY2hlY2sgd2hldGhlciBkYXRhIGxlbmd0aCBtYXRjaGVzIHRlbnNvciBzaXplXG4gICAgaWYgKHRoaXMuY3B1RGF0YSAmJiBzaXplICE9PSB0aGlzLmNwdURhdGEubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlbnNvcidzIHNpemUoJHtzaXplfSkgZG9lcyBub3QgbWF0Y2ggZGF0YSBsZW5ndGgoJHt0aGlzLmNwdURhdGEubGVuZ3RofSkuYCk7XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmRpbXMgPSBkaW1zO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gZmFjdG9yeVxuICBzdGF0aWMgYXN5bmMgZnJvbUltYWdlKFxuICAgICAgaW1hZ2U6IEltYWdlRGF0YXxIVE1MSW1hZ2VFbGVtZW50fEltYWdlQml0bWFwfHN0cmluZyxcbiAgICAgIG9wdGlvbnM/OiBUZW5zb3JGcm9tSW1hZ2VEYXRhT3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VCaXRtYXBPcHRpb25zfFxuICAgICAgVGVuc29yRnJvbVVybE9wdGlvbnMpOiBQcm9taXNlPFRlbnNvckludGVyZmFjZT4ge1xuICAgIHJldHVybiB0ZW5zb3JGcm9tSW1hZ2UoaW1hZ2UsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21UZXh0dXJlPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZURhdGFUeXBlcz4oXG4gICAgICB0ZXh0dXJlOiBUZW5zb3JUZXh0dXJlVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbVRleHR1cmVPcHRpb25zPFQ+KTogVGVuc29ySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gdGVuc29yRnJvbVRleHR1cmUodGV4dHVyZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUdwdUJ1ZmZlcjxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkdwdUJ1ZmZlckRhdGFUeXBlcz4oXG4gICAgICBncHVCdWZmZXI6IFRlbnNvckdwdUJ1ZmZlclR5cGUsIG9wdGlvbnM6IFRlbnNvckZyb21HcHVCdWZmZXJPcHRpb25zPFQ+KTogVGVuc29ySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gdGVuc29yRnJvbUdwdUJ1ZmZlcihncHVCdWZmZXIsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21QaW5uZWRCdWZmZXI8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5DcHVQaW5uZWREYXRhVHlwZXM+KFxuICAgICAgdHlwZTogVCwgYnVmZmVyOiBUZW5zb3JJbnRlcmZhY2UuRGF0YVR5cGVNYXBbVF0sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRlbnNvckZyb21QaW5uZWRCdWZmZXIodHlwZSwgYnVmZmVyLCBkaW1zKTtcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIGNvbnZlcnNpb25zXG4gIHRvRGF0YVVSTChvcHRpb25zPzogVGVuc29yVG9EYXRhVXJsT3B0aW9ucyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRlbnNvclRvRGF0YVVSTCh0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHRvSW1hZ2VEYXRhKG9wdGlvbnM/OiBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnMpOiBJbWFnZURhdGEge1xuICAgIHJldHVybiB0ZW5zb3JUb0ltYWdlRGF0YSh0aGlzLCBvcHRpb25zKTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBwdWJsaWMgZmllbGRzXG4gIHJlYWRvbmx5IGRpbXM6IHJlYWRvbmx5IG51bWJlcltdO1xuICByZWFkb25seSB0eXBlOiBUZW5zb3JUeXBlO1xuICByZWFkb25seSBzaXplOiBudW1iZXI7XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHByaXZhdGUgZmllbGRzXG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgbG9jYXRpb24gb2YgdGhlIGRhdGEuXG4gICAqL1xuICBwcml2YXRlIGRhdGFMb2NhdGlvbjogVGVuc29yRGF0YUxvY2F0aW9uO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgdGhlIGRhdGEgb24gQ1BVLCBpZiBsb2NhdGlvbiBpcyAnY3B1JyBvciAnY3B1LXBpbm5lZCcuIG90aGVyd2lzZSBlbXB0eS5cbiAgICovXG4gIHByaXZhdGUgY3B1RGF0YT86IFRlbnNvckRhdGFUeXBlO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgdGhlIHVuZGVybHlpbmcgdGV4dHVyZSB3aGVuIGxvY2F0aW9uIGlzICd0ZXh0dXJlJy4gb3RoZXJ3aXNlIGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSBncHVUZXh0dXJlRGF0YT86IFRlbnNvclRleHR1cmVUeXBlO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgdGhlIHVuZGVybHlpbmcgR1BVIGJ1ZmZlciB3aGVuIGxvY2F0aW9uIGlzICdncHUtYnVmZmVyJy4gb3RoZXJ3aXNlIGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSBncHVCdWZmZXJEYXRhPzogVGVuc29yR3B1QnVmZmVyVHlwZTtcblxuICAvKipcbiAgICogc3RvcmVzIGFuIG9wdGlvbmFsIGRvd25sb2FkZXIgZnVuY3Rpb24gdG8gZG93bmxvYWQgZGF0YSBmcm9tIEdQVSB0byBDUFUuXG4gICAqL1xuICBwcml2YXRlIGRvd25sb2FkZXI/KCk6IFByb21pc2U8VGVuc29yRGF0YVR5cGU+O1xuXG4gIC8qKlxuICAgKiBhIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBkYXRhIGlzIGJlaW5nIGRvd25sb2FkZWQgZnJvbSBHUFUgdG8gQ1BVLlxuICAgKi9cbiAgcHJpdmF0ZSBpc0Rvd25sb2FkaW5nPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogc3RvcmVzIGFuIG9wdGlvbmFsIGRpc3Bvc2VyIGZ1bmN0aW9uIHRvIGRpc3Bvc2UgdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAgICovXG4gIHByaXZhdGUgZGlzcG9zZXI/KCk6IHZvaWQ7XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHByb3BlcnRpZXNcbiAgZ2V0IGRhdGEoKTogVGVuc29yRGF0YVR5cGUge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAoIXRoaXMuY3B1RGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdUaGUgZGF0YSBpcyBub3Qgb24gQ1BVLiBVc2UgYGdldERhdGEoKWAgdG8gZG93bmxvYWQgR1BVIGRhdGEgdG8gQ1BVLCAnICtcbiAgICAgICAgICAnb3IgdXNlIGB0ZXh0dXJlYCBvciBgZ3B1QnVmZmVyYCBwcm9wZXJ0eSB0byBhY2Nlc3MgdGhlIEdQVSBkYXRhIGRpcmVjdGx5LicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jcHVEYXRhO1xuICB9XG5cbiAgZ2V0IGxvY2F0aW9uKCk6IFRlbnNvckRhdGFMb2NhdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YUxvY2F0aW9uO1xuICB9XG5cbiAgZ2V0IHRleHR1cmUoKTogVGVuc29yVGV4dHVyZVR5cGUge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAoIXRoaXMuZ3B1VGV4dHVyZURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGRhdGEgaXMgbm90IHN0b3JlZCBhcyBhIFdlYkdMIHRleHR1cmUuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdwdVRleHR1cmVEYXRhO1xuICB9XG5cbiAgZ2V0IGdwdUJ1ZmZlcigpOiBUZW5zb3JHcHVCdWZmZXJUeXBlIHtcbiAgICB0aGlzLmVuc3VyZVZhbGlkKCk7XG4gICAgaWYgKCF0aGlzLmdwdUJ1ZmZlckRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGRhdGEgaXMgbm90IHN0b3JlZCBhcyBhIFdlYkdQVSBidWZmZXIuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdwdUJ1ZmZlckRhdGE7XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0aG9kc1xuXG4gIGFzeW5jIGdldERhdGEocmVsZWFzZURhdGE/OiBib29sZWFuKTogUHJvbWlzZTxUZW5zb3JEYXRhVHlwZT4ge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBzd2l0Y2ggKHRoaXMuZGF0YUxvY2F0aW9uKSB7XG4gICAgICBjYXNlICdjcHUnOlxuICAgICAgY2FzZSAnY3B1LXBpbm5lZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgICBjYXNlICd0ZXh0dXJlJzpcbiAgICAgIGNhc2UgJ2dwdS1idWZmZXInOiB7XG4gICAgICAgIGlmICghdGhpcy5kb3dubG9hZGVyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VycmVudCB0ZW5zb3IgaXMgbm90IGNyZWF0ZWQgd2l0aCBhIHNwZWNpZmllZCBkYXRhIGRvd25sb2FkZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNEb3dubG9hZGluZykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGN1cnJlbnQgdGVuc29yIGlzIGJlaW5nIGRvd25sb2FkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmRvd25sb2FkZXIoKTtcbiAgICAgICAgICB0aGlzLmRvd25sb2FkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdGhpcy5kYXRhTG9jYXRpb24gPSAnY3B1JztcbiAgICAgICAgICB0aGlzLmNwdURhdGEgPSBkYXRhO1xuXG4gICAgICAgICAgaWYgKHJlbGVhc2VEYXRhICYmIHRoaXMuZGlzcG9zZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG5cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZ2V0IGRhdGEgZnJvbSBsb2NhdGlvbjogJHt0aGlzLmRhdGFMb2NhdGlvbn1gKTtcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRG93bmxvYWRpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGN1cnJlbnQgdGVuc29yIGlzIGJlaW5nIGRvd25sb2FkZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGlzcG9zZXIpIHtcbiAgICAgIHRoaXMuZGlzcG9zZXIoKTtcbiAgICAgIHRoaXMuZGlzcG9zZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMuY3B1RGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmdwdVRleHR1cmVEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3B1QnVmZmVyRGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRvd25sb2FkZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pc0Rvd25sb2FkaW5nID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5kYXRhTG9jYXRpb24gPSAnbm9uZSc7XG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiB0ZW5zb3IgdXRpbGl0aWVzXG4gIHByaXZhdGUgZW5zdXJlVmFsaWQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGF0YUxvY2F0aW9uID09PSAnbm9uZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHRlbnNvciBpcyBkaXNwb3NlZC4nKTtcbiAgICB9XG4gIH1cblxuICByZXNoYXBlKGRpbXM6IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29ySW50ZXJmYWNlIHtcbiAgICB0aGlzLmVuc3VyZVZhbGlkKCk7XG4gICAgaWYgKHRoaXMuZG93bmxvYWRlciB8fCB0aGlzLmRpc3Bvc2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZXNoYXBlIGEgdGVuc29yIHRoYXQgb3ducyBHUFUgcmVzb3VyY2UuJyk7XG4gICAgfVxuICAgIHJldHVybiB0ZW5zb3JSZXNoYXBlKHRoaXMsIGRpbXMpO1xuICB9XG4gIC8vICNlbmRyZWdpb25cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtUZW5zb3JGYWN0b3J5fSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVuc29yIGFzIFRlbnNvckltcGx9IGZyb20gJy4vdGVuc29yLWltcGwuanMnO1xuaW1wb3J0IHtUeXBlZFRlbnNvclV0aWxzfSBmcm9tICcuL3RlbnNvci11dGlscy5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgKi9cblxuLyoqXG4gKiByZXByZXNlbnQgYSBiYXNpYyB0ZW5zb3Igd2l0aCBzcGVjaWZpZWQgZGltZW5zaW9ucyBhbmQgZGF0YSB0eXBlLlxuICovXG5pbnRlcmZhY2UgVHlwZWRUZW5zb3JCYXNlPFQgZXh0ZW5kcyBUZW5zb3IuVHlwZT4ge1xuICAvKipcbiAgICogR2V0IHRoZSBkaW1lbnNpb25zIG9mIHRoZSB0ZW5zb3IuXG4gICAqL1xuICByZWFkb25seSBkaW1zOiByZWFkb25seSBudW1iZXJbXTtcbiAgLyoqXG4gICAqIEdldCB0aGUgZGF0YSB0eXBlIG9mIHRoZSB0ZW5zb3IuXG4gICAqL1xuICByZWFkb25seSB0eXBlOiBUO1xuICAvKipcbiAgICogR2V0IHRoZSBidWZmZXIgZGF0YSBvZiB0aGUgdGVuc29yLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBub3Qgb24gQ1BVIChlZy4gaXQncyBpbiB0aGUgZm9ybSBvZiBXZWJHTCB0ZXh0dXJlIG9yIFdlYkdQVSBidWZmZXIpLCB0aHJvdyBlcnJvci5cbiAgICovXG4gIHJlYWRvbmx5IGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFtUXTtcbiAgLyoqXG4gICAqIEdldCB0aGUgbG9jYXRpb24gb2YgdGhlIGRhdGEuXG4gICAqL1xuICByZWFkb25seSBsb2NhdGlvbjogVGVuc29yLkRhdGFMb2NhdGlvbjtcbiAgLyoqXG4gICAqIEdldCB0aGUgV2ViR0wgdGV4dHVyZSB0aGF0IGhvbGRzIHRoZSB0ZW5zb3IgZGF0YS5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgbm90IG9uIEdQVSBhcyBXZWJHTCB0ZXh0dXJlLCB0aHJvdyBlcnJvci5cbiAgICovXG4gIHJlYWRvbmx5IHRleHR1cmU6IFRlbnNvci5UZXh0dXJlVHlwZTtcbiAgLyoqXG4gICAqIEdldCB0aGUgV2ViR1BVIGJ1ZmZlciB0aGF0IGhvbGRzIHRoZSB0ZW5zb3IgZGF0YS5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgbm90IG9uIEdQVSBhcyBXZWJHUFUgYnVmZmVyLCB0aHJvdyBlcnJvci5cbiAgICovXG4gIHJlYWRvbmx5IGdwdUJ1ZmZlcjogVGVuc29yLkdwdUJ1ZmZlclR5cGU7XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYnVmZmVyIGRhdGEgb2YgdGhlIHRlbnNvci5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgb24gQ1BVLCByZXR1cm5zIHRoZSBkYXRhIGltbWVkaWF0ZWx5LlxuICAgKiBJZiB0aGUgZGF0YSBpcyBvbiBHUFUsIGRvd25sb2FkcyB0aGUgZGF0YSBhbmQgcmV0dXJucyB0aGUgcHJvbWlzZS5cbiAgICpcbiAgICogQHBhcmFtIHJlbGVhc2VEYXRhIC0gd2hldGhlciByZWxlYXNlIHRoZSBkYXRhIG9uIEdQVS4gSWdub3JlIGlmIGRhdGEgaXMgYWxyZWFkeSBvbiBDUFUuXG4gICAqL1xuICBnZXREYXRhKHJlbGVhc2VEYXRhPzogYm9vbGVhbik6IFByb21pc2U8VGVuc29yLkRhdGFUeXBlTWFwW1RdPjtcblxuICAvKipcbiAgICogRGlzcG9zZSB0aGUgdGVuc29yIGRhdGEuXG4gICAqXG4gICAqIElmIHRoZSBkYXRhIGlzIG9uIENQVSwgcmVtb3ZlIGl0cyBpbnRlcm5hbCByZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAgICogSWYgdGhlIGRhdGEgaXMgb24gR1BVLCByZWxlYXNlIHRoZSBkYXRhIG9uIEdQVS5cbiAgICpcbiAgICogQWZ0ZXIgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCB0aGUgdGVuc29yIGlzIGNvbnNpZGVyZWQgbm8gbG9uZ2VyIHZhbGlkLiBJdHMgbG9jYXRpb24gd2lsbCBiZSBzZXQgdG8gJ25vbmUnLlxuICAgKi9cbiAgZGlzcG9zZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgVGVuc29yIHtcbiAgaW50ZXJmYWNlIERhdGFUeXBlTWFwIHtcbiAgICBmbG9hdDMyOiBGbG9hdDMyQXJyYXk7XG4gICAgdWludDg6IFVpbnQ4QXJyYXk7XG4gICAgaW50ODogSW50OEFycmF5O1xuICAgIHVpbnQxNjogVWludDE2QXJyYXk7XG4gICAgaW50MTY6IEludDE2QXJyYXk7XG4gICAgaW50MzI6IEludDMyQXJyYXk7XG4gICAgaW50NjQ6IEJpZ0ludDY0QXJyYXk7XG4gICAgc3RyaW5nOiBzdHJpbmdbXTtcbiAgICBib29sOiBVaW50OEFycmF5O1xuICAgIGZsb2F0MTY6IFVpbnQxNkFycmF5OyAgLy8gS2VlcCB1c2luZyBVaW50MTZBcnJheSB1bnRpbCB3ZSBoYXZlIGEgY29uY3JldGUgc29sdXRpb24gZm9yIGZsb2F0IDE2LlxuICAgIGZsb2F0NjQ6IEZsb2F0NjRBcnJheTtcbiAgICB1aW50MzI6IFVpbnQzMkFycmF5O1xuICAgIHVpbnQ2NDogQmlnVWludDY0QXJyYXk7XG4gICAgLy8gY29tcGxleDY0OiBuZXZlcjtcbiAgICAvLyBjb21wbGV4MTI4OiBuZXZlcjtcbiAgICAvLyBiZmxvYXQxNjogbmV2ZXI7XG4gIH1cblxuICBpbnRlcmZhY2UgRWxlbWVudFR5cGVNYXAge1xuICAgIGZsb2F0MzI6IG51bWJlcjtcbiAgICB1aW50ODogbnVtYmVyO1xuICAgIGludDg6IG51bWJlcjtcbiAgICB1aW50MTY6IG51bWJlcjtcbiAgICBpbnQxNjogbnVtYmVyO1xuICAgIGludDMyOiBudW1iZXI7XG4gICAgaW50NjQ6IGJpZ2ludDtcbiAgICBzdHJpbmc6IHN0cmluZztcbiAgICBib29sOiBib29sZWFuO1xuICAgIGZsb2F0MTY6IG51bWJlcjsgIC8vIEtlZXAgdXNpbmcgVWludDE2QXJyYXkgdW50aWwgd2UgaGF2ZSBhIGNvbmNyZXRlIHNvbHV0aW9uIGZvciBmbG9hdCAxNi5cbiAgICBmbG9hdDY0OiBudW1iZXI7XG4gICAgdWludDMyOiBudW1iZXI7XG4gICAgdWludDY0OiBiaWdpbnQ7XG4gICAgLy8gY29tcGxleDY0OiBuZXZlcjtcbiAgICAvLyBjb21wbGV4MTI4OiBuZXZlcjtcbiAgICAvLyBiZmxvYXQxNjogbmV2ZXI7XG4gIH1cblxuICB0eXBlIERhdGFUeXBlID0gRGF0YVR5cGVNYXBbVHlwZV07XG4gIHR5cGUgRWxlbWVudFR5cGUgPSBFbGVtZW50VHlwZU1hcFtUeXBlXTtcblxuICAvKipcbiAgICogc3VwcG9ydGVkIGRhdGEgdHlwZXMgZm9yIGNvbnN0cnVjdGluZyBhIHRlbnNvciBmcm9tIGEgcGlubmVkIENQVSBidWZmZXJcbiAgICovXG4gIGV4cG9ydCB0eXBlIENwdVBpbm5lZERhdGFUeXBlcyA9IEV4Y2x1ZGU8VGVuc29yLlR5cGUsICdzdHJpbmcnPjtcblxuICAvKipcbiAgICogdHlwZSBhbGlhcyBmb3IgV2ViR0wgdGV4dHVyZVxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVGV4dHVyZVR5cGUgPSBXZWJHTFRleHR1cmU7XG5cbiAgLyoqXG4gICAqIHN1cHBvcnRlZCBkYXRhIHR5cGVzIGZvciBjb25zdHJ1Y3RpbmcgYSB0ZW5zb3IgZnJvbSBhIFdlYkdMIHRleHR1cmVcbiAgICovXG4gIGV4cG9ydCB0eXBlIFRleHR1cmVEYXRhVHlwZXMgPSAnZmxvYXQzMic7XG5cbiAgLyoqXG4gICAqIHR5cGUgYWxpYXMgZm9yIFdlYkdQVSBidWZmZXJcbiAgICpcbiAgICogVGhlIHJlYXNvbiB3aHkgd2UgZG9uJ3QgdXNlIHR5cGUgXCJHUFVCdWZmZXJcIiBkZWZpbmVkIGluIHdlYmdwdS5kLnRzIGZyb20gQHdlYmdwdS90eXBlcyBpcyBiZWNhdXNlIFwiQHdlYmdwdS90eXBlc1wiXG4gICAqIHJlcXVpcmVzIFwiQHR5cGVzL2RvbS13ZWJjb2RlY3NcIiBhcyBwZWVyIGRlcGVuZGVuY3kgd2hlbiB1c2luZyBUeXBlU2NyaXB0IDwgdjUuMSBhbmQgaXRzIHZlcnNpb24gbmVlZCB0byBiZSBjaG9zZW5cbiAgICogY2FyZWZ1bGx5IGFjY29yZGluZyB0byB0aGUgVHlwZVNjcmlwdCB2ZXJzaW9uIGJlaW5nIHVzZWQuIFRoaXMgbWVhbnMgc28gZmFyIHRoZXJlIGlzIG5vdCBhIHdheSB0byBrZWVwIGV2ZXJ5XG4gICAqIFR5cGVTY3JpcHQgdmVyc2lvbiBoYXBweS4gSXQgdHVybnMgb3V0IHRoYXQgd2Ugd2lsbCBlYXNpbHkgYnJva2UgdXNlcnMgb24gc29tZSBUeXBlU2NyaXB0IHZlcnNpb24uXG4gICAqXG4gICAqIGZvciBtb3JlIGluZm8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncHV3ZWIvdHlwZXMvaXNzdWVzLzEyN1xuICAgKi9cbiAgZXhwb3J0IHR5cGUgR3B1QnVmZmVyVHlwZSA9IHtzaXplOiBudW1iZXI7IG1hcFN0YXRlOiAndW5tYXBwZWQnIHwgJ3BlbmRpbmcnIHwgJ21hcHBlZCd9O1xuXG4gIC8qKlxuICAgKiBzdXBwb3J0ZWQgZGF0YSB0eXBlcyBmb3IgY29uc3RydWN0aW5nIGEgdGVuc29yIGZyb20gYSBXZWJHUFUgYnVmZmVyXG4gICAqL1xuICBleHBvcnQgdHlwZSBHcHVCdWZmZXJEYXRhVHlwZXMgPSAnZmxvYXQzMid8J2Zsb2F0MTYnfCdpbnQzMid8J2ludDY0J3wndWludDMyJ3wnYm9vbCc7XG5cbiAgLyoqXG4gICAqIHJlcHJlc2VudCB3aGVyZSB0aGUgdGVuc29yIGRhdGEgaXMgc3RvcmVkXG4gICAqL1xuICBleHBvcnQgdHlwZSBEYXRhTG9jYXRpb24gPSAnbm9uZSd8J2NwdSd8J2NwdS1waW5uZWQnfCd0ZXh0dXJlJ3wnZ3B1LWJ1ZmZlcic7XG5cbiAgLyoqXG4gICAqIHJlcHJlc2VudCB0aGUgZGF0YSB0eXBlIG9mIGEgdGVuc29yXG4gICAqL1xuICBleHBvcnQgdHlwZSBUeXBlID0ga2V5b2YgRGF0YVR5cGVNYXA7XG59XG5cbi8qKlxuICogUmVwcmVzZW50IG11bHRpLWRpbWVuc2lvbmFsIGFycmF5cyB0byBmZWVkIHRvIG9yIGZldGNoIGZyb20gbW9kZWwgaW5mZXJlbmNpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZWRUZW5zb3I8VCBleHRlbmRzIFRlbnNvci5UeXBlPiBleHRlbmRzIFR5cGVkVGVuc29yQmFzZTxUPiwgVHlwZWRUZW5zb3JVdGlsczxUPiB7fVxuLyoqXG4gKiBSZXByZXNlbnQgbXVsdGktZGltZW5zaW9uYWwgYXJyYXlzIHRvIGZlZWQgdG8gb3IgZmV0Y2ggZnJvbSBtb2RlbCBpbmZlcmVuY2luZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZW5zb3IgZXh0ZW5kcyBUeXBlZFRlbnNvckJhc2U8VGVuc29yLlR5cGU+LCBUeXBlZFRlbnNvclV0aWxzPFRlbnNvci5UeXBlPiB7fVxuXG4vKipcbiAqIHR5cGUgVGVuc29yQ29uc3RydWN0b3IgZGVmaW5lcyB0aGUgY29uc3RydWN0b3JzIG9mICdUZW5zb3InIHRvIGNyZWF0ZSBDUFUgdGVuc29yIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZW5zb3JDb25zdHJ1Y3RvciB7XG4gIC8vICNyZWdpb24gQ1BVIHRlbnNvciAtIHNwZWNpZnkgZWxlbWVudCB0eXBlXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgc3RyaW5nIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyh0eXBlOiAnc3RyaW5nJywgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwWydzdHJpbmcnXXxyZWFkb25seSBzdHJpbmdbXSxcbiAgICAgIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdzdHJpbmcnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGJvb2wgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KHR5cGU6ICdib29sJywgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwWydib29sJ118cmVhZG9ubHkgYm9vbGVhbltdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnYm9vbCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgNjQtYml0IGludGVnZXIgdHlwZWQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3PFQgZXh0ZW5kcyAndWludDY0J3wnaW50NjQnPihcbiAgICAgIHR5cGU6IFQsIGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFtUXXxyZWFkb25seSBiaWdpbnRbXXxyZWFkb25seSBudW1iZXJbXSxcbiAgICAgIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPFQ+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgbnVtZXJpYyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXc8VCBleHRlbmRzIEV4Y2x1ZGU8VGVuc29yLlR5cGUsICdzdHJpbmcnfCdib29sJ3wndWludDY0J3wnaW50NjQnPj4oXG4gICAgICB0eXBlOiBULCBkYXRhOiBUZW5zb3IuRGF0YVR5cGVNYXBbVF18cmVhZG9ubHkgbnVtYmVyW10sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPFQ+O1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBDUFUgdGVuc29yIC0gaW5mZXIgZWxlbWVudCB0eXBlc1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgZmxvYXQzMiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBGbG9hdDMyQXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdmbG9hdDMyJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBpbnQ4IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEludDhBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2ludDgnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHVpbnQ4IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFVpbnQ4QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCd1aW50OCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdWludDE2IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFVpbnQxNkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwndWludDE2Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBpbnQxNiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBJbnQxNkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnaW50MTYnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGludDMyIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEludDMyQXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdpbnQzMic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgaW50NjQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogQmlnSW50NjRBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2ludDY0Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBzdHJpbmcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogcmVhZG9ubHkgc3RyaW5nW10sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdzdHJpbmcnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGJvb2wgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogcmVhZG9ubHkgYm9vbGVhbltdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnYm9vbCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgZmxvYXQ2NCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBGbG9hdDY0QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdmbG9hdDY0Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB1aW50MzIgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogVWludDMyQXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCd1aW50MzInPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHVpbnQ2NCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBCaWdVaW50NjRBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3VpbnQ2NCc+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIENQVSB0ZW5zb3IgLSBmYWxsIGJhY2sgdG8gbm9uLWdlbmVyaWMgdGVuc29yIHR5cGUgZGVjbGFyYXRpb25cblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyh0eXBlOiBUZW5zb3IuVHlwZSwgZGF0YTogVGVuc29yLkRhdGFUeXBlfHJlYWRvbmx5IG51bWJlcltdfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJpZ2ludFtdfHJlYWRvbmx5IGJvb2xlYW5bXSxcbiAgICAgIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFRlbnNvci5EYXRhVHlwZSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yO1xuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBUZW5zb3IgPSBUZW5zb3JJbXBsIGFzIChUZW5zb3JDb25zdHJ1Y3RvciAmIFRlbnNvckZhY3RvcnkpO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge2Vudn0gZnJvbSAnLi9lbnYtaW1wbC5qcyc7XG5cbmV4cG9ydCBjb25zdCBUUkFDRSA9IChkZXZpY2VUeXBlOiBzdHJpbmcsIGxhYmVsOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFlbnYud2FzbS50cmFjZSkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLnRpbWVTdGFtcChgJHtkZXZpY2VUeXBlfTo6T1JUOjoke2xhYmVsfWApO1xufTtcblxuY29uc3QgVFJBQ0VfRlVOQyA9IChtc2c6IHN0cmluZywgZXh0cmFNc2c/OiBzdHJpbmcpID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaz8uc3BsaXQoL1xcclxcbnxcXHJ8XFxuL2cpIHx8IFtdO1xuICBsZXQgaGFzVHJhY2VGdW5jID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaGFzVHJhY2VGdW5jICYmICFzdGFja1tpXS5pbmNsdWRlcygnVFJBQ0VfRlVOQycpKSB7XG4gICAgICBsZXQgbGFiZWwgPSBgRlVOQ18ke21zZ306OiR7c3RhY2tbaV0udHJpbSgpLnNwbGl0KCcgJylbMV19YDtcbiAgICAgIGlmIChleHRyYU1zZykge1xuICAgICAgICBsYWJlbCArPSBgOjoke2V4dHJhTXNnfWA7XG4gICAgICB9XG4gICAgICBUUkFDRSgnQ1BVJywgbGFiZWwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3RhY2tbaV0uaW5jbHVkZXMoJ1RSQUNFX0ZVTkMnKSkge1xuICAgICAgaGFzVHJhY2VGdW5jID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBUUkFDRV9GVU5DX0JFR0lOID0gKGV4dHJhTXNnPzogc3RyaW5nKSA9PiB7XG4gIGlmICghZW52Lndhc20udHJhY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgVFJBQ0VfRlVOQygnQkVHSU4nLCBleHRyYU1zZyk7XG59O1xuXG5leHBvcnQgY29uc3QgVFJBQ0VfRlVOQ19FTkQgPSAoZXh0cmFNc2c/OiBzdHJpbmcpID0+IHtcbiAgaWYgKCFlbnYud2FzbS50cmFjZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBUUkFDRV9GVU5DKCdFTkQnLCBleHRyYU1zZyk7XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge3Jlc29sdmVCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtaW1wbC5qcyc7XG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb25IYW5kbGVyfSBmcm9tICcuL2JhY2tlbmQuanMnO1xuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uIGFzIEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2V9IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuaW1wb3J0IHtUUkFDRV9GVU5DX0JFR0lOLCBUUkFDRV9GVU5DX0VORH0gZnJvbSAnLi90cmFjZS5qcyc7XG5cbnR5cGUgU2Vzc2lvbk9wdGlvbnMgPSBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLlNlc3Npb25PcHRpb25zO1xudHlwZSBSdW5PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5SdW5PcHRpb25zO1xudHlwZSBGZWVkc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLkZlZWRzVHlwZTtcbnR5cGUgRmV0Y2hlc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLkZldGNoZXNUeXBlO1xudHlwZSBSZXR1cm5UeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5SZXR1cm5UeXBlO1xuXG5leHBvcnQgY2xhc3MgSW5mZXJlbmNlU2Vzc2lvbiBpbXBsZW1lbnRzIEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2Uge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKGhhbmRsZXI6IEluZmVyZW5jZVNlc3Npb25IYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgfVxuICBydW4oZmVlZHM6IEZlZWRzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW4oZmVlZHM6IEZlZWRzVHlwZSwgZmV0Y2hlczogRmV0Y2hlc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIGFyZzE/OiBGZXRjaGVzVHlwZXxSdW5PcHRpb25zLCBhcmcyPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT4ge1xuICAgIFRSQUNFX0ZVTkNfQkVHSU4oKTtcbiAgICBjb25zdCBmZXRjaGVzOiB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZXxudWxsfSA9IHt9O1xuICAgIGxldCBvcHRpb25zOiBSdW5PcHRpb25zID0ge307XG4gICAgLy8gY2hlY2sgaW5wdXRzXG4gICAgaWYgKHR5cGVvZiBmZWVkcyAhPT0gJ29iamVjdCcgfHwgZmVlZHMgPT09IG51bGwgfHwgZmVlZHMgaW5zdGFuY2VvZiBUZW5zb3IgfHwgQXJyYXkuaXNBcnJheShmZWVkcykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ1xcJ2ZlZWRzXFwnIG11c3QgYmUgYW4gb2JqZWN0IHRoYXQgdXNlIGlucHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy4nKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGZXRjaGVzRW1wdHkgPSB0cnVlO1xuICAgIC8vIGRldGVybWluZSB3aGljaCBvdmVycmlkZSBpcyBiZWluZyB1c2VkXG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGFyZzEgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBhcmd1bWVudFsxXTogY2Fubm90IGJlIG51bGwuJyk7XG4gICAgICB9XG4gICAgICBpZiAoYXJnMSBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdmZXRjaGVzXFwnIGNhbm5vdCBiZSBhIFRlbnNvcicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcxKSkge1xuICAgICAgICBpZiAoYXJnMS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdmZXRjaGVzXFwnIGNhbm5vdCBiZSBhbiBlbXB0eSBhcnJheS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpc0ZldGNoZXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAvLyBvdXRwdXQgbmFtZXNcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIGFyZzEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdmZXRjaGVzXFwnIG11c3QgYmUgYSBzdHJpbmcgYXJyYXkgb3IgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5vdXRwdXROYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCdmZXRjaGVzJyBjb250YWlucyBpbnZhbGlkIG91dHB1dCBuYW1lOiAke25hbWV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmZXRjaGVzW25hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gJ29iamVjdCcgJiYgYXJnMiAhPT0gbnVsbCkge1xuICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlY2lkZSB3aGV0aGVyIGFyZzEgaXMgZmV0Y2hlcyBvciBvcHRpb25zXG4gICAgICAgIC8vIGlmIGFueSBvdXRwdXQgbmFtZSBpcyBwcmVzZW50IGFuZCBpdHMgdmFsdWUgaXMgdmFsaWQgT25ueFZhbHVlLCB3ZSBjb25zaWRlciBpdCBmZXRjaGVzXG4gICAgICAgIGxldCBpc0ZldGNoZXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgYXJnMUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcmcxKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMub3V0cHV0TmFtZXMpIHtcbiAgICAgICAgICBpZiAoYXJnMUtleXMuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAoYXJnMSBhcyBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLk51bGxhYmxlT25ueFZhbHVlTWFwVHlwZSlbbmFtZV07XG4gICAgICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB2IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ZldGNoZXMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMSBhcyBSdW5PcHRpb25zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IG11c3QgYmUgXFwnZmV0Y2hlc1xcJyBvciBcXCdvcHRpb25zXFwnLicpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGFsbCBpbnB1dHMgYXJlIGluIGZlZWRcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5pbnB1dE5hbWVzKSB7XG4gICAgICBpZiAodHlwZW9mIGZlZWRzW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGlucHV0ICcke25hbWV9JyBpcyBtaXNzaW5nIGluICdmZWVkcycuYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgbm8gZmV0Y2hlcyBpcyBzcGVjaWZpZWQsIHdlIHVzZSB0aGUgZnVsbCBvdXRwdXQgbmFtZXMgbGlzdFxuICAgIGlmIChpc0ZldGNoZXNFbXB0eSkge1xuICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMub3V0cHV0TmFtZXMpIHtcbiAgICAgICAgZmV0Y2hlc1tuYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmVlZHMsIGZldGNoZXMgYW5kIG9wdGlvbnMgYXJlIHByZXBhcmVkXG5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5oYW5kbGVyLnJ1bihmZWVkcywgZmV0Y2hlcywgb3B0aW9ucyk7XG4gICAgY29uc3QgcmV0dXJuVmFsdWU6IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJlc3VsdHMpIHtcbiAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHRzLCBrZXkpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNba2V5XTtcbiAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICAgIHJldHVyblZhbHVlW2tleV0gPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IG5ldyBUZW5zb3IocmVzdWx0LnR5cGUsIHJlc3VsdC5kYXRhLCByZXN1bHQuZGltcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgVFJBQ0VfRlVOQ19FTkQoKTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICBhc3luYyByZWxlYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT47XG4gIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlckxpa2UsIG9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT47XG4gIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlckxpa2UsIGJ5dGVPZmZzZXQ6IG51bWJlciwgYnl0ZUxlbmd0aD86IG51bWJlciwgb3B0aW9ucz86IFNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT47XG4gIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBVaW50OEFycmF5LCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgYXN5bmMgY3JlYXRlKFxuICAgICAgYXJnMDogc3RyaW5nfEFycmF5QnVmZmVyTGlrZXxVaW50OEFycmF5LCBhcmcxPzogU2Vzc2lvbk9wdGlvbnN8bnVtYmVyLCBhcmcyPzogbnVtYmVyLFxuICAgICAgYXJnMz86IFNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlPiB7XG4gICAgVFJBQ0VfRlVOQ19CRUdJTigpO1xuICAgIC8vIGVpdGhlciBsb2FkIGZyb20gYSBmaWxlIG9yIGJ1ZmZlclxuICAgIGxldCBmaWxlUGF0aE9yVWludDhBcnJheTogc3RyaW5nfFVpbnQ4QXJyYXk7XG4gICAgbGV0IG9wdGlvbnM6IFNlc3Npb25PcHRpb25zID0ge307XG5cbiAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmaWxlUGF0aE9yVWludDhBcnJheSA9IGFyZzA7XG4gICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnICYmIGFyZzEgIT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJnMCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgIGZpbGVQYXRoT3JVaW50OEFycmF5ID0gYXJnMDtcbiAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcgJiYgYXJnMSAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0gYXJnMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgYXJnMCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgICAgICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGFyZzAgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGFyZzA7XG4gICAgICBsZXQgYnl0ZU9mZnNldCA9IDA7XG4gICAgICBsZXQgYnl0ZUxlbmd0aCA9IGFyZzAuYnl0ZUxlbmd0aDtcbiAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcgJiYgYXJnMSAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0gYXJnMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGJ5dGVPZmZzZXQgPSBhcmcxO1xuICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2J5dGVPZmZzZXRcXCcgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBieXRlT2Zmc2V0ID49IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCdieXRlT2Zmc2V0JyBpcyBvdXQgb2YgcmFuZ2UgWzAsICR7YnVmZmVyLmJ5dGVMZW5ndGh9KS5gKTtcbiAgICAgICAgfVxuICAgICAgICBieXRlTGVuZ3RoID0gYXJnMC5ieXRlTGVuZ3RoIC0gYnl0ZU9mZnNldDtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBhcmcyO1xuICAgICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoYnl0ZUxlbmd0aCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdieXRlTGVuZ3RoXFwnIG11c3QgYmUgYW4gaW50ZWdlci4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPD0gMCB8fCBieXRlT2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJ2J5dGVMZW5ndGgnIGlzIG91dCBvZiByYW5nZSAoMCwgJHtidWZmZXIuYnl0ZUxlbmd0aCAtIGJ5dGVPZmZzZXR9XS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmczID09PSAnb2JqZWN0JyAmJiBhcmczICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gYXJnMztcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmczICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnYnl0ZUxlbmd0aFxcJyBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgfVxuICAgICAgZmlsZVBhdGhPclVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzBdOiBtdXN0IGJlIFxcJ3BhdGhcXCcgb3IgXFwnYnVmZmVyXFwnLicpO1xuICAgIH1cblxuICAgIC8vIGdldCBiYWNrZW5kIGhpbnRzXG4gICAgY29uc3QgZXBzID0gb3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMgfHwgW107XG4gICAgY29uc3QgYmFja2VuZEhpbnRzID0gZXBzLm1hcChpID0+IHR5cGVvZiBpID09PSAnc3RyaW5nJyA/IGkgOiBpLm5hbWUpO1xuICAgIGNvbnN0IGJhY2tlbmQgPSBhd2FpdCByZXNvbHZlQmFja2VuZChiYWNrZW5kSGludHMpO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBhd2FpdCBiYWNrZW5kLmNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKGZpbGVQYXRoT3JVaW50OEFycmF5LCBvcHRpb25zKTtcbiAgICBUUkFDRV9GVU5DX0VORCgpO1xuICAgIHJldHVybiBuZXcgSW5mZXJlbmNlU2Vzc2lvbihoYW5kbGVyKTtcbiAgfVxuXG4gIHN0YXJ0UHJvZmlsaW5nKCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlci5zdGFydFByb2ZpbGluZygpO1xuICB9XG4gIGVuZFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZXIuZW5kUHJvZmlsaW5nKCk7XG4gIH1cblxuICBnZXQgaW5wdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5pbnB1dE5hbWVzO1xuICB9XG4gIGdldCBvdXRwdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5vdXRwdXROYW1lcztcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlcjogSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI7XG59XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbiBhcyBJbmZlcmVuY2VTZXNzaW9uSW1wbH0gZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi1pbXBsLmpzJztcbmltcG9ydCB7T25ueE1vZGVsT3B0aW9uc30gZnJvbSAnLi9vbm54LW1vZGVsLmpzJztcbmltcG9ydCB7T25ueFZhbHVlLCBPbm54VmFsdWVEYXRhTG9jYXRpb259IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgKi9cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEluZmVyZW5jZVNlc3Npb24ge1xuICAvLyAjcmVnaW9uIGlucHV0L291dHB1dCB0eXBlc1xuXG4gIHR5cGUgT25ueFZhbHVlTWFwVHlwZSA9IHtyZWFkb25seSBbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfTtcbiAgdHlwZSBOdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGUgPSB7cmVhZG9ubHkgW25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZSB8IG51bGx9O1xuXG4gIC8qKlxuICAgKiBBIGZlZWRzIChtb2RlbCBpbnB1dHMpIGlzIGFuIG9iamVjdCB0aGF0IHVzZXMgaW5wdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgKi9cbiAgdHlwZSBGZWVkc1R5cGUgPSBPbm54VmFsdWVNYXBUeXBlO1xuXG4gIC8qKlxuICAgKiBBIGZldGNoZXMgKG1vZGVsIG91dHB1dHMpIGNvdWxkIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICAgKlxuICAgKiAtIE9taXR0ZWQuIFVzZSBtb2RlbCdzIG91dHB1dCBuYW1lcyBkZWZpbml0aW9uLlxuICAgKiAtIEFuIGFycmF5IG9mIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBvdXRwdXQgbmFtZXMuXG4gICAqIC0gQW4gb2JqZWN0IHRoYXQgdXNlIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgb3IgbnVsbCBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBkaWZmZXJlbnQgZnJvbSBpbnB1dCBhcmd1bWVudCwgaW4gb3V0cHV0LCBPbm54VmFsdWUgaXMgb3B0aW9uYWwuIElmIGFuIE9ubnhWYWx1ZSBpcyBwcmVzZW50IGl0IHdpbGwgYmVcbiAgICogdXNlZCBhcyBhIHByZS1hbGxvY2F0ZWQgdmFsdWUgYnkgdGhlIGluZmVyZW5jZSBlbmdpbmU7IGlmIG9taXR0ZWQsIGluZmVyZW5jZSBlbmdpbmUgd2lsbCBhbGxvY2F0ZSBidWZmZXJcbiAgICogaW50ZXJuYWxseS5cbiAgICovXG4gIHR5cGUgRmV0Y2hlc1R5cGUgPSByZWFkb25seSBzdHJpbmdbXXxOdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGU7XG5cbiAgLyoqXG4gICAqIEEgaW5mZXJlbmNpbmcgcmV0dXJuIHR5cGUgaXMgYW4gb2JqZWN0IHRoYXQgdXNlcyBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgKi9cbiAgdHlwZSBSZXR1cm5UeXBlID0gT25ueFZhbHVlTWFwVHlwZTtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBzZXNzaW9uIG9wdGlvbnNcblxuICAvKipcbiAgICogQSBzZXQgb2YgY29uZmlndXJhdGlvbnMgZm9yIHNlc3Npb24gYmVoYXZpb3IuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFNlc3Npb25PcHRpb25zIGV4dGVuZHMgT25ueE1vZGVsT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgZXhlY3V0aW9uIHByb3ZpZGVyIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBBbiBleGVjdXRpb24gcHJvdmlkZXIgb3B0aW9uIGNhbiBiZSBhIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBuYW1lIG9mIHRoZSBleGVjdXRpb24gcHJvdmlkZXIsXG4gICAgICogb3IgYW4gb2JqZWN0IG9mIGNvcnJlc3BvbmRpbmcgdHlwZS5cbiAgICAgKi9cbiAgICBleGVjdXRpb25Qcm92aWRlcnM/OiByZWFkb25seSBFeGVjdXRpb25Qcm92aWRlckNvbmZpZ1tdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGludHJhIE9QIHRocmVhZHMgbnVtYmVyLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkuXG4gICAgICovXG4gICAgaW50cmFPcE51bVRocmVhZHM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZXIgT1AgdGhyZWFkcyBudW1iZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKS5cbiAgICAgKi9cbiAgICBpbnRlck9wTnVtVGhyZWFkcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZS5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBmcmVlRGltZW5zaW9uT3ZlcnJpZGVzPzoge3JlYWRvbmx5IFtkaW1lbnNpb25OYW1lOiBzdHJpbmddOiBudW1iZXJ9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGltaXphdGlvbiBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBncmFwaE9wdGltaXphdGlvbkxldmVsPzogJ2Rpc2FibGVkJ3wnYmFzaWMnfCdleHRlbmRlZCd8J2FsbCc7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGVuYWJsZSBDUFUgbWVtb3J5IGFyZW5hLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGVuYWJsZUNwdU1lbUFyZW5hPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZW5hYmxlIG1lbW9yeSBwYXR0ZXJuLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGVuYWJsZU1lbVBhdHRlcm4/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0aW9uIG1vZGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgZXhlY3V0aW9uTW9kZT86ICdzZXF1ZW50aWFsJ3wncGFyYWxsZWwnO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW1pemVkIG1vZGVsIGZpbGUgcGF0aC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgc2V0dGluZyBpcyBzcGVjaWZpZWQsIHRoZSBvcHRpbWl6ZWQgbW9kZWwgd2lsbCBiZSBkdW1wZWQuIEluIGJyb3dzZXIsIGEgYmxvYiB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgKiB3aXRoIGEgcG9wLXVwIHdpbmRvdy5cbiAgICAgKi9cbiAgICBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2V0aGVyIGVuYWJsZSBwcm9maWxpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSBmdXR1cmUgdXNlLlxuICAgICAqL1xuICAgIGVuYWJsZVByb2ZpbGluZz86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBGaWxlIHByZWZpeCBmb3IgcHJvZmlsaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGEgcGxhY2Vob2xkZXIgZm9yIGEgZnV0dXJlIHVzZS5cbiAgICAgKi9cbiAgICBwcm9maWxlRmlsZVByZWZpeD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIExvZyBJRC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dJZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIExvZyBzZXZlcml0eSBsZXZlbC4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL2NvbW1vbi9sb2dnaW5nL3NldmVyaXR5LmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dTZXZlcml0eUxldmVsPzogMHwxfDJ8M3w0O1xuXG4gICAgLyoqXG4gICAgICogTG9nIHZlcmJvc2l0eSBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKi9cbiAgICBsb2dWZXJib3NpdHlMZXZlbD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgc3RyaW5nIGFzIGEgcHJlZmVycmVkIGRhdGEgbG9jYXRpb24gZm9yIGFsbCBvdXRwdXRzLCBvciBhbiBvYmplY3QgdGhhdCB1c2Ugb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIGFcbiAgICAgKiBwcmVmZXJyZWQgZGF0YSBsb2NhdGlvbiBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSBXZWIgZm9yIFdlYkdMIGFuZCBXZWJHUFUgRVAuXG4gICAgICovXG4gICAgcHJlZmVycmVkT3V0cHV0TG9jYXRpb24/OiBPbm54VmFsdWVEYXRhTG9jYXRpb258e3JlYWRvbmx5IFtvdXRwdXROYW1lOiBzdHJpbmddOiBPbm54VmFsdWVEYXRhTG9jYXRpb259O1xuXG4gICAgLyoqXG4gICAgICogU3RvcmUgY29uZmlndXJhdGlvbnMgZm9yIGEgc2Vzc2lvbi4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL3Nlc3Npb24vXG4gICAgICogb25ueHJ1bnRpbWVfc2Vzc2lvbl9vcHRpb25zX2NvbmZpZ19rZXlzLmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBganNcbiAgICAgKiBleHRyYToge1xuICAgICAqICAgc2Vzc2lvbjoge1xuICAgICAqICAgICBzZXRfZGVub3JtYWxfYXNfemVybzogXCIxXCIsXG4gICAgICogICAgIGRpc2FibGVfcHJlcGFja2luZzogXCIxXCJcbiAgICAgKiAgIH0sXG4gICAgICogICBvcHRpbWl6YXRpb246IHtcbiAgICAgKiAgICAgZW5hYmxlX2dlbHVfYXBwcm94aW1hdGlvbjogXCIxXCJcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXh0cmE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgfVxuXG4gIC8vICNyZWdpb24gZXhlY3V0aW9uIHByb3ZpZGVyc1xuXG4gIC8vIEN1cnJlbnRseSwgd2UgaGF2ZSB0aGUgZm9sbG93aW5nIGJhY2tlbmRzIHRvIHN1cHBvcnQgZXhlY3V0aW9uIHByb3ZpZGVyczpcbiAgLy8gQmFja2VuZCBOb2RlLmpzIGJpbmRpbmc6IHN1cHBvcnRzICdjcHUnIGFuZCAnY3VkYScuXG4gIC8vIEJhY2tlbmQgV2ViQXNzZW1ibHk6IHN1cHBvcnRzICdjcHUnLCAnd2FzbScsICd3ZWJncHUnIGFuZCAnd2Vibm4nLlxuICAvLyBCYWNrZW5kIE9OTlguanM6IHN1cHBvcnRzICd3ZWJnbCcuXG4gIC8vIEJhY2tlbmQgUmVhY3QgTmF0aXZlOiBzdXBwb3J0cyAnY3B1JywgJ3hubnBhY2snLCAnY29yZW1sJyAoaU9TKSwgJ25uYXBpJyAoQW5kcm9pZCkuXG4gIGludGVyZmFjZSBFeGVjdXRpb25Qcm92aWRlck9wdGlvbk1hcCB7XG4gICAgY3B1OiBDcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBjb3JlbWw6IENvcmVNbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIGN1ZGE6IEN1ZGFFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBkbWw6IERtbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHRlbnNvcnJ0OiBUZW5zb3JSdEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdhc206IFdlYkFzc2VtYmx5RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgd2ViZ2w6IFdlYkdMRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgeG5ucGFjazogWG5ucGFja0V4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdlYmdwdTogV2ViR3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgd2Vibm46IFdlYk5ORXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgbm5hcGk6IE5uYXBpRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gIH1cblxuICB0eXBlIEV4ZWN1dGlvblByb3ZpZGVyTmFtZSA9IGtleW9mIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uTWFwO1xuICB0eXBlIEV4ZWN1dGlvblByb3ZpZGVyQ29uZmlnID1cbiAgICAgIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uTWFwW0V4ZWN1dGlvblByb3ZpZGVyTmFtZV18RXhlY3V0aW9uUHJvdmlkZXJPcHRpb258RXhlY3V0aW9uUHJvdmlkZXJOYW1lfHN0cmluZztcblxuICBleHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnY3B1JztcbiAgICB1c2VBcmVuYT86IGJvb2xlYW47XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDdWRhRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2N1ZGEnO1xuICAgIGRldmljZUlkPzogbnVtYmVyO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29yZU1sRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2NvcmVtbCc7XG4gICAgY29yZU1sRmxhZ3M/OiBudW1iZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBEbWxFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnZG1sJztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFRlbnNvclJ0RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3RlbnNvcnJ0JztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkFzc2VtYmx5RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3dhc20nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR0xFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnd2ViZ2wnO1xuICAgIC8vIFRPRE86IGFkZCBmbGFnc1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgWG5ucGFja0V4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd4bm5wYWNrJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdwdUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3ZWJncHUnO1xuICAgIHByZWZlcnJlZExheW91dD86ICdOQ0hXJ3wnTkhXQyc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3ZWJubic7XG4gICAgZGV2aWNlVHlwZT86ICdjcHUnfCdncHUnO1xuICAgIG51bVRocmVhZHM/OiBudW1iZXI7XG4gICAgcG93ZXJQcmVmZXJlbmNlPzogJ2RlZmF1bHQnfCdsb3ctcG93ZXInfCdoaWdoLXBlcmZvcm1hbmNlJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIENvcmVNTEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdjb3JlbWwnO1xuICAgIHVzZUNQVU9ubHk/OiBib29sZWFuO1xuICAgIGVuYWJsZU9uU3ViZ3JhcGg/OiBib29sZWFuO1xuICAgIG9ubHlFbmFibGVEZXZpY2VXaXRoQU5FPzogYm9vbGVhbjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIE5uYXBpRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ25uYXBpJztcbiAgICB1c2VGUDE2PzogYm9vbGVhbjtcbiAgICB1c2VOQ0hXPzogYm9vbGVhbjtcbiAgICBjcHVEaXNhYmxlZD86IGJvb2xlYW47XG4gICAgY3B1T25seT86IGJvb2xlYW47XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHJ1biBvcHRpb25zXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGNvbmZpZ3VyYXRpb25zIGZvciBpbmZlcmVuY2UgcnVuIGJlaGF2aW9yXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJ1bk9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIExvZyBzZXZlcml0eSBsZXZlbC4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL2NvbW1vbi9sb2dnaW5nL3NldmVyaXR5LmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dTZXZlcml0eUxldmVsPzogMHwxfDJ8M3w0O1xuXG4gICAgLyoqXG4gICAgICogTG9nIHZlcmJvc2l0eSBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKi9cbiAgICBsb2dWZXJib3NpdHlMZXZlbD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRlcm1pbmF0ZSBhbGwgaW5jb21wbGV0ZSBPcnRSdW4gY2FsbHMgYXMgc29vbiBhcyBwb3NzaWJsZSBpZiB0cnVlXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gV2ViQXNzZW1ibHkgYmFja2VuZC4gV2lsbCBzdXBwb3J0IE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlIGxhdGVyXG4gICAgICovXG4gICAgdGVybWluYXRlPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEEgdGFnIGZvciB0aGUgUnVuKCkgY2FsbHMgdXNpbmcgdGhpc1xuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIHRhZz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFNldCBhIHNpbmdsZSBydW4gY29uZmlndXJhdGlvbiBlbnRyeS4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL3Nlc3Npb24vXG4gICAgICogb25ueHJ1bnRpbWVfcnVuX29wdGlvbnNfY29uZmlnX2tleXMuaFxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogZXh0cmE6IHtcbiAgICAgKiAgIG1lbW9yeToge1xuICAgICAqICAgICBlbmFibGVfbWVtb3J5X2FyZW5hX3Nocmlua2FnZTogXCIxXCIsXG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGV4dHJhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiB2YWx1ZSBtZXRhZGF0YVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktaW50ZXJmYWNlXG4gIGludGVyZmFjZSBWYWx1ZU1ldGFkYXRhIHtcbiAgICAvLyBUQkRcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBydW50aW1lIGluc3RhbmNlIG9mIGFuIE9OTlggbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5mZXJlbmNlU2Vzc2lvbiB7XG4gIC8vICNyZWdpb24gcnVuKClcblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgbW9kZWwgYXN5bmNocm9ub3VzbHkgd2l0aCB0aGUgZ2l2ZW4gZmVlZHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uSW5wdXRUeXBlYCBmb3IgZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGluZmVyZW5jZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1bihmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIG1vZGVsIGFzeW5jaHJvbm91c2x5IHdpdGggdGhlIGdpdmVuIGZlZWRzLCBmZXRjaGVzIGFuZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuIFNlZSB0eXBlIGRlc2NyaXB0aW9uIG9mIGBJbmZlcmVuY2VTZXNzaW9uLklucHV0VHlwZWAgZm9yIGRldGFpbC5cbiAgICogQHBhcmFtIGZldGNoZXMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgb3V0cHV0LiBTZWUgdHlwZSBkZXNjcmlwdGlvbiBvZiBgSW5mZXJlbmNlU2Vzc2lvbi5PdXRwdXRUeXBlYCBmb3JcbiAgICogZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGluZmVyZW5jZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1bihmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIGZldGNoZXM6IEluZmVyZW5jZVNlc3Npb24uRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHJlbGVhc2UoKVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlIHRoZSBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgdGhlIHVuZGVybHlpbmcgcmVzb3VyY2VzLlxuICAgKi9cbiAgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHByb2ZpbGluZ1xuXG4gIC8qKlxuICAgKiBTdGFydCBwcm9maWxpbmcuXG4gICAqL1xuICBzdGFydFByb2ZpbGluZygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBFbmQgcHJvZmlsaW5nLlxuICAgKi9cbiAgZW5kUHJvZmlsaW5nKCk6IHZvaWQ7XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0YWRhdGFcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IG91dHB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8vIC8qKlxuICAvLyAgKiBHZXQgaW5wdXQgbWV0YWRhdGEgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgLy8gICovXG4gIC8vIHJlYWRvbmx5IGlucHV0TWV0YWRhdGE6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8SW5mZXJlbmNlU2Vzc2lvbi5WYWx1ZU1ldGFkYXRhPj47XG5cbiAgLy8gLyoqXG4gIC8vICAqIEdldCBvdXRwdXQgbWV0YWRhdGEgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgLy8gICovXG4gIC8vIHJlYWRvbmx5IG91dHB1dE1ldGFkYXRhOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEluZmVyZW5jZVNlc3Npb24uVmFsdWVNZXRhZGF0YT4+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmZlcmVuY2VTZXNzaW9uRmFjdG9yeSB7XG4gIC8vICNyZWdpb24gY3JlYXRlKClcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uIGFuZCBsb2FkIG1vZGVsIGFzeW5jaHJvbm91c2x5IGZyb20gYW4gT05OWCBtb2RlbCBmaWxlLlxuICAgKlxuICAgKiBAcGFyYW0gdXJpIC0gVGhlIFVSSSBvciBmaWxlIHBhdGggb2YgdGhlIG1vZGVsIHRvIGxvYWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gc3BlY2lmeSBjb25maWd1cmF0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbi5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gSW5mZXJlbmNlU2Vzc2lvbiBvYmplY3QuXG4gICAqL1xuICBjcmVhdGUodXJpOiBzdHJpbmcsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uPjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uIGFuZCBsb2FkIG1vZGVsIGFzeW5jaHJvbm91c2x5IGZyb20gYW4gYXJyYXkgYnVmZXIuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBbiBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIHNlZ21lbnQgb2YgYW4gYXJyYXkgYnVmZXIuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBbiBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gYnl0ZU9mZnNldCAtIFRoZSBiZWdpbm5pbmcgb2YgdGhlIHNwZWNpZmllZCBwb3J0aW9uIG9mIHRoZSBhcnJheSBidWZmZXIuXG4gICAqIEBwYXJhbSBieXRlTGVuZ3RoIC0gVGhlIGxlbmd0aCBpbiBieXRlcyBvZiB0aGUgYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBieXRlT2Zmc2V0OiBudW1iZXIsIGJ5dGVMZW5ndGg/OiBudW1iZXIsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIGEgVWludDhBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAtIEEgVWludDhBcnJheSByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IEluZmVyZW5jZVNlc3Npb246IEluZmVyZW5jZVNlc3Npb25GYWN0b3J5ID0gSW5mZXJlbmNlU2Vzc2lvbkltcGw7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbnR5cGUgTm9uVGVuc29yVHlwZSA9IG5ldmVyO1xuXG4vKipcbiAqIFR5cGUgT25ueFZhbHVlIFJlcHJlc2VudHMgYm90aCB0ZW5zb3JzIGFuZCBub24tdGVuc29ycyB2YWx1ZSBmb3IgbW9kZWwncyBpbnB1dHMvb3V0cHV0cy5cbiAqXG4gKiBOT1RFOiBjdXJyZW50bHkgbm90IHN1cHBvcnQgbm9uLXRlbnNvclxuICovXG5leHBvcnQgdHlwZSBPbm54VmFsdWUgPSBUZW5zb3J8Tm9uVGVuc29yVHlwZTtcblxuLyoqXG4gKiBUeXBlIE9ubnhWYWx1ZURhdGFMb2NhdGlvbiByZXByZXNlbnRzIHRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YSBvZiBhbiBPbm54VmFsdWUuXG4gKi9cbmV4cG9ydCB0eXBlIE9ubnhWYWx1ZURhdGFMb2NhdGlvbiA9IFRlbnNvci5EYXRhTG9jYXRpb247XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7cmVzb2x2ZUJhY2tlbmR9IGZyb20gJy4vYmFja2VuZC1pbXBsLmpzJztcbmltcG9ydCB7U2Vzc2lvbkhhbmRsZXIsIFRyYWluaW5nU2Vzc2lvbkhhbmRsZXJ9IGZyb20gJy4vYmFja2VuZC5qcyc7XG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24gYXMgSW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZX0gZnJvbSAnLi9vbm54LXZhbHVlLmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbiBhcyBUcmFpbmluZ1Nlc3Npb25JbnRlcmZhY2UsIFRyYWluaW5nU2Vzc2lvbkNyZWF0ZU9wdGlvbnN9IGZyb20gJy4vdHJhaW5pbmctc2Vzc2lvbi5qcyc7XG5cbnR5cGUgU2Vzc2lvbk9wdGlvbnMgPSBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zO1xudHlwZSBGZWVkc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZTtcbnR5cGUgRmV0Y2hlc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlO1xudHlwZSBSZXR1cm5UeXBlID0gSW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlO1xudHlwZSBSdW5PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zO1xuXG5jb25zdCBub0JhY2tlbmRFcnJNc2c6IHN0cmluZyA9ICdUcmFpbmluZyBiYWNrZW5kIGNvdWxkIG5vdCBiZSByZXNvbHZlZC4gJyArXG4gICAgJ01ha2Ugc3VyZSB5b3VcXCdyZSB1c2luZyB0aGUgY29ycmVjdCBjb25maWd1cmF0aW9uICYgV2ViQXNzZW1ibHkgZmlsZXMuJztcblxuZXhwb3J0IGNsYXNzIFRyYWluaW5nU2Vzc2lvbiBpbXBsZW1lbnRzIFRyYWluaW5nU2Vzc2lvbkludGVyZmFjZSB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IoaGFuZGxlcjogVHJhaW5pbmdTZXNzaW9uSGFuZGxlciwgaGFzT3B0aW1pemVyTW9kZWw6IGJvb2xlYW4sIGhhc0V2YWxNb2RlbDogYm9vbGVhbikge1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdGhpcy5oYXNPcHRpbWl6ZXJNb2RlbCA9IGhhc09wdGltaXplck1vZGVsO1xuICAgIHRoaXMuaGFzRXZhbE1vZGVsID0gaGFzRXZhbE1vZGVsO1xuICB9XG4gIHByaXZhdGUgaGFuZGxlcjogVHJhaW5pbmdTZXNzaW9uSGFuZGxlcjtcbiAgcHJpdmF0ZSBoYXNPcHRpbWl6ZXJNb2RlbDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBoYXNFdmFsTW9kZWw6IGJvb2xlYW47XG5cbiAgZ2V0IHRyYWluaW5nSW5wdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5pbnB1dE5hbWVzO1xuICB9XG4gIGdldCB0cmFpbmluZ091dHB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm91dHB1dE5hbWVzO1xuICB9XG5cbiAgZ2V0IGV2YWxJbnB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICBpZiAodGhpcy5oYXNFdmFsTW9kZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZXZhbElucHV0TmFtZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB0cmFpbmluZyBzZXNzaW9uIGhhcyBubyBldmFsTW9kZWwgbG9hZGVkLicpO1xuICAgIH1cbiAgfVxuICBnZXQgZXZhbE91dHB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICBpZiAodGhpcy5oYXNFdmFsTW9kZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZXZhbE91dHB1dE5hbWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgdHJhaW5pbmcgc2Vzc2lvbiBoYXMgbm8gZXZhbE1vZGVsIGxvYWRlZC4nKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlKHRyYWluaW5nT3B0aW9uczogVHJhaW5pbmdTZXNzaW9uQ3JlYXRlT3B0aW9ucywgc2Vzc2lvbk9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPFRyYWluaW5nU2Vzc2lvbj4ge1xuICAgIGNvbnN0IGV2YWxNb2RlbDogc3RyaW5nfFVpbnQ4QXJyYXkgPSB0cmFpbmluZ09wdGlvbnMuZXZhbE1vZGVsIHx8ICcnO1xuICAgIGNvbnN0IG9wdGltaXplck1vZGVsOiBzdHJpbmd8VWludDhBcnJheSA9IHRyYWluaW5nT3B0aW9ucy5vcHRpbWl6ZXJNb2RlbCB8fCAnJztcbiAgICBjb25zdCBvcHRpb25zOiBTZXNzaW9uT3B0aW9ucyA9IHNlc3Npb25PcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gZ2V0IGJhY2tlbmQgaGludHNcbiAgICBjb25zdCBlcHMgPSBvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycyB8fCBbXTtcbiAgICBjb25zdCBiYWNrZW5kSGludHMgPSBlcHMubWFwKGkgPT4gdHlwZW9mIGkgPT09ICdzdHJpbmcnID8gaSA6IGkubmFtZSk7XG4gICAgY29uc3QgYmFja2VuZCA9IGF3YWl0IHJlc29sdmVCYWNrZW5kKGJhY2tlbmRIaW50cyk7XG4gICAgaWYgKGJhY2tlbmQuY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcikge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGF3YWl0IGJhY2tlbmQuY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcihcbiAgICAgICAgICB0cmFpbmluZ09wdGlvbnMuY2hlY2twb2ludFN0YXRlLCB0cmFpbmluZ09wdGlvbnMudHJhaW5Nb2RlbCwgZXZhbE1vZGVsLCBvcHRpbWl6ZXJNb2RlbCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbmV3IFRyYWluaW5nU2Vzc2lvbihoYW5kbGVyLCAhIXRyYWluaW5nT3B0aW9ucy5vcHRpbWl6ZXJNb2RlbCwgISF0cmFpbmluZ09wdGlvbnMuZXZhbE1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQmFja2VuZEVyck1zZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgcnVuVHJhaW5TdGVwIGFuZCBmdXR1cmUgcnVuU3RlcCBtZXRob2RzIHRoYXQgaGFuZGxlcyB0aGUgdHlwZS1uYXJyb3dpbmcgY29udmVyc2lvbiBmcm9tXG4gICAqIHRoZSBnaXZlbiBwYXJhbWV0ZXJzIHRvIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlIGFuZCBSdW5PcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXROYW1lcyB0aGUgZmVlZHMgb2JqZWN0IGlzIGNoZWNrZWQgdGhhdCB0aGV5IGNvbnRhaW4gYWxsIGlucHV0IG5hbWVzIGluIHRoZSBwcm92aWRlZCBsaXN0IG9mIGlucHV0XG4gICAqIG5hbWVzLlxuICAgKiBAcGFyYW0gb3V0cHV0TmFtZXMgdGhlIGZldGNoZXMgb2JqZWN0IGlzIGNoZWNrZWQgdGhhdCB0aGVpciBrZXlzIG1hdGNoIHVwIHdpdGggdmFsaWQgbmFtZXMgaW4gdGhlIGxpc3Qgb2Ygb3V0cHV0XG4gICAqIG5hbWVzLlxuICAgKiBAcGFyYW0gZmVlZHMgdGhlIHJlcXVpcmVkIGlucHV0XG4gICAqIEBwYXJhbSBhcmcxIG5hcnJvd2VkICYgY29udmVydGVkIGludG8gdGhlIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlIG9yIFJ1bk9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSBhcmcyIG9wdGlvbmFsIFJ1bk9wdGlvbnMgb2JqZWN0LlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgdHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAoXG4gICAgICBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXSwgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdLCBmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucyxcbiAgICAgIGFyZzI/OiBSdW5PcHRpb25zKTogW1Nlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBSdW5PcHRpb25zXSB7XG4gICAgY29uc3QgZmV0Y2hlczoge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV8bnVsbH0gPSB7fTtcbiAgICBsZXQgb3B0aW9uczogUnVuT3B0aW9ucyA9IHt9O1xuICAgIC8vIGNoZWNrIGlucHV0c1xuICAgIGlmICh0eXBlb2YgZmVlZHMgIT09ICdvYmplY3QnIHx8IGZlZWRzID09PSBudWxsIHx8IGZlZWRzIGluc3RhbmNlb2YgVGVuc29yIHx8IEFycmF5LmlzQXJyYXkoZmVlZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdcXCdmZWVkc1xcJyBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IHVzZSBpbnB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuJyk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmV0Y2hlc0VtcHR5ID0gdHJ1ZTtcbiAgICAvLyBkZXRlcm1pbmUgd2hpY2ggb3ZlcnJpZGUgaXMgYmVpbmcgdXNlZFxuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChhcmcxID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IGNhbm5vdCBiZSBudWxsLicpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYSBUZW5zb3InKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgaWYgKGFyZzEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYW4gZW1wdHkgYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaXNGZXRjaGVzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgLy8gb3V0cHV0IG5hbWVzXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBhcmcxKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBtdXN0IGJlIGEgc3RyaW5nIGFycmF5IG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG91dHB1dE5hbWVzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJ2ZldGNoZXMnIGNvbnRhaW5zIGludmFsaWQgb3V0cHV0IG5hbWU6ICR7bmFtZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVjaWRlIHdoZXRoZXIgYXJnMSBpcyBmZXRjaGVzIG9yIG9wdGlvbnNcbiAgICAgICAgLy8gaWYgYW55IG91dHB1dCBuYW1lIGlzIHByZXNlbnQgYW5kIGl0cyB2YWx1ZSBpcyB2YWxpZCBPbm54VmFsdWUsIHdlIGNvbnNpZGVyIGl0IGZldGNoZXNcbiAgICAgICAgbGV0IGlzRmV0Y2hlcyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBhcmcxS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFyZzEpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygb3V0cHV0TmFtZXMpIHtcbiAgICAgICAgICBpZiAoYXJnMUtleXMuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAoYXJnMSBhcyBJbmZlcmVuY2VTZXNzaW9uLk51bGxhYmxlT25ueFZhbHVlTWFwVHlwZSlbbmFtZV07XG4gICAgICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB2IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ZldGNoZXMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMSBhcyBSdW5PcHRpb25zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IG11c3QgYmUgXFwnZmV0Y2hlc1xcJyBvciBcXCdvcHRpb25zXFwnLicpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGFsbCBpbnB1dHMgYXJlIGluIGZlZWRcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgaW5wdXROYW1lcykge1xuICAgICAgaWYgKHR5cGVvZiBmZWVkc1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCAnJHtuYW1lfScgaXMgbWlzc2luZyBpbiAnZmVlZHMnLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIG5vIGZldGNoZXMgaXMgc3BlY2lmaWVkLCB3ZSB1c2UgdGhlIGZ1bGwgb3V0cHV0IG5hbWVzIGxpc3RcbiAgICBpZiAoaXNGZXRjaGVzRW1wdHkpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBvdXRwdXROYW1lcykge1xuICAgICAgICBmZXRjaGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW2ZldGNoZXMsIG9wdGlvbnNdO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgZm9yIHJ1blRyYWluU3RlcCBhbmQgYW55IG90aGVyIHJ1blN0ZXAgbWV0aG9kcy4gVGFrZXMgdGhlIFJldHVyblR5cGUgcmVzdWx0IGZyb20gdGhlIFNlc3Npb25IYW5kbGVyXG4gICAqIGFuZCBjaGFuZ2VzIGl0IGludG8gYSBtYXAgb2YgVGVuc29ycy5cbiAgICpcbiAgICogQHBhcmFtIHJlc3VsdHNcbiAgICogQHJldHVybnNcbiAgICovXG4gIGNvbnZlcnRIYW5kbGVyUmV0dXJuVHlwZVRvTWFwT2ZUZW5zb3JzKHJlc3VsdHM6IFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGUpOiBSZXR1cm5UeXBlIHtcbiAgICBjb25zdCByZXR1cm5WYWx1ZToge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVzdWx0cykge1xuICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdHMsIGtleSkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0c1trZXldO1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZVtrZXldID0gbmV3IFRlbnNvcihyZXN1bHQudHlwZSwgcmVzdWx0LmRhdGEsIHJlc3VsdC5kaW1zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICBhc3luYyBsYXp5UmVzZXRHcmFkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuaGFuZGxlci5sYXp5UmVzZXRHcmFkKCk7XG4gIH1cblxuICBydW5UcmFpblN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW5UcmFpblN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgZmV0Y2hlczogRmV0Y2hlc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuVHJhaW5TdGVwKGZlZWRzOiBGZWVkc1R5cGUsIGFyZzE/OiBGZXRjaGVzVHlwZXxSdW5PcHRpb25zLCBhcmcyPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IFtmZXRjaGVzLCBvcHRpb25zXSA9XG4gICAgICAgIHRoaXMudHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAodGhpcy50cmFpbmluZ0lucHV0TmFtZXMsIHRoaXMudHJhaW5pbmdPdXRwdXROYW1lcywgZmVlZHMsIGFyZzEsIGFyZzIpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmhhbmRsZXIucnVuVHJhaW5TdGVwKGZlZWRzLCBmZXRjaGVzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jb252ZXJ0SGFuZGxlclJldHVyblR5cGVUb01hcE9mVGVuc29ycyhyZXN1bHRzKTtcbiAgfVxuXG4gIGFzeW5jIHJ1bk9wdGltaXplclN0ZXAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9uc3x1bmRlZmluZWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5oYXNPcHRpbWl6ZXJNb2RlbCkge1xuICAgICAgYXdhaXQgdGhpcy5oYW5kbGVyLnJ1bk9wdGltaXplclN0ZXAob3B0aW9ucyB8fCB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUcmFpbmluZ1Nlc3Npb24gaGFzIG5vIE9wdGltaXplck1vZGVsIGxvYWRlZC4nKTtcbiAgICB9XG4gIH1cblxuICBydW5FdmFsU3RlcChmZWVkczogRmVlZHNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9uc3x1bmRlZmluZWQpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW5FdmFsU3RlcChmZWVkczogRmVlZHNUeXBlLCBmZXRjaGVzOiBGZXRjaGVzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnN8dW5kZWZpbmVkKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuRXZhbFN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgYXJnMT86IEZldGNoZXNUeXBlfFJ1bk9wdGlvbnMsIGFyZzI/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPiB7XG4gICAgaWYgKHRoaXMuaGFzRXZhbE1vZGVsKSB7XG4gICAgICBjb25zdCBbZmV0Y2hlcywgb3B0aW9uc10gPVxuICAgICAgICAgIHRoaXMudHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAodGhpcy5ldmFsSW5wdXROYW1lcywgdGhpcy5ldmFsT3V0cHV0TmFtZXMsIGZlZWRzLCBhcmcxLCBhcmcyKTtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmhhbmRsZXIucnVuRXZhbFN0ZXAoZmVlZHMsIGZldGNoZXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXMuY29udmVydEhhbmRsZXJSZXR1cm5UeXBlVG9NYXBPZlRlbnNvcnMocmVzdWx0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUcmFpbmluZ1Nlc3Npb24gaGFzIG5vIEV2YWxNb2RlbCBsb2FkZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seSA9IHRydWUpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seSk7XG4gIH1cblxuICBhc3luYyBsb2FkUGFyYW1ldGVyc0J1ZmZlcihhcnJheTogVWludDhBcnJheSwgdHJhaW5hYmxlT25seSA9IHRydWUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBwYXJhbXNTaXplID0gYXdhaXQgdGhpcy5nZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5KTtcbiAgICAvLyBjaGVja2luZyB0aGF0IHRoZSBzaXplIG9mIHRoZSBVaW50OEFycmF5IGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJ5dGUgbGVuZ3RoIG9mIGEgRmxvYXQzMkFycmF5IG9mIHRoZSBudW1iZXJcbiAgICAvLyBvZiBwYXJhbWV0ZXJzXG4gICAgaWYgKGFycmF5Lmxlbmd0aCAhPT0gNCAqIHBhcmFtc1NpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnU2l6ZSBvZiB0aGUgYnVmZmVyIHBhc3NlZCBpbnRvIGxvYWRQYXJhbWV0ZXJzQnVmZmVyIG11c3QgbWF0Y2ggdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzIGluICcgK1xuICAgICAgICAgICd0aGUgbW9kZWwuIFBsZWFzZSB1c2UgZ2V0UGFyYW1ldGVyc1NpemUgbWV0aG9kIHRvIGNoZWNrLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5LCB0cmFpbmFibGVPbmx5KTtcbiAgfVxuXG4gIGFzeW5jIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHkgPSB0cnVlKTogUHJvbWlzZTxPbm54VmFsdWU+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHkpO1xuICB9XG5cbiAgYXN5bmMgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbiBhcyBUcmFpbmluZ1Nlc3Npb25JbXBsfSBmcm9tICcuL3RyYWluaW5nLXNlc3Npb24taW1wbC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgKi9cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFRyYWluaW5nU2Vzc2lvbiB7XG4gIC8qKlxuICAgKiBFaXRoZXIgVVJJIGZpbGUgcGF0aCAoc3RyaW5nKSBvciBVaW50OEFycmF5IGNvbnRhaW5pbmcgbW9kZWwgb3IgY2hlY2twb2ludCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHR5cGUgVVJJb3JCdWZmZXIgPSBzdHJpbmd8VWludDhBcnJheTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBydW50aW1lIGluc3RhbmNlIG9mIGFuIE9OTlggdHJhaW5pbmcgc2Vzc2lvbixcbiAqIHdoaWNoIGNvbnRhaW5zIGEgbW9kZWwgdGhhdCBjYW4gYmUgdHJhaW5lZCwgYW5kLCBvcHRpb25hbGx5LFxuICogYW4gZXZhbCBhbmQgb3B0aW1pemVyIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbiB7XG4gIC8vICNyZWdpb24gcnVuKClcblxuICAvKipcbiAgICogTGF6aWx5IHJlc2V0cyB0aGUgZ3JhZGllbnRzIG9mIGFsbCB0cmFpbmFibGUgcGFyYW1ldGVycyB0byB6ZXJvLiBTaG91bGQgaGFwcGVuIGFmdGVyIHRoZSBpbnZvY2F0aW9uIG9mXG4gICAqIHJ1bk9wdGltaXplclN0ZXAuXG4gICAqL1xuICBsYXp5UmVzZXRHcmFkKCk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFJ1biBUcmFpblN0ZXAgYXN5bmNocm9ub3VzbHkgd2l0aCB0aGUgZ2l2ZW4gZmVlZHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uSW5wdXRUeXBlYCBmb3JcbiAgIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCB0cmFpbmluZy5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1blRyYWluU3RlcChmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBSdW4gYSBzaW5nbGUgdHJhaW4gc3RlcCB3aXRoIHRoZSBnaXZlbiBpbnB1dHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC5cbiAgICogQHBhcmFtIGZldGNoZXMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgb3V0cHV0LlxuICAgKiBkZXRhaWwuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgbW9kZWwgdHJhaW5pbmcuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZ1xuICAgdmFsdWVzLlxuICAgKi9cbiAgcnVuVHJhaW5TdGVwKFxuICAgICAgZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBmZXRjaGVzOiBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlPjtcblxuICAvKipcbiAgICogUnVucyBhIHNpbmdsZSBvcHRpbWl6ZXIgc3RlcCwgd2hpY2ggcGVyZm9ybXMgd2VpZ2h0IHVwZGF0ZXMgZm9yIHRoZSB0cmFpbmFibGUgcGFyYW1ldGVycyB1c2luZyB0aGUgb3B0aW1pemVyIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIG9wdGltaXppbmcuXG4gICAqL1xuICBydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSdW4gYSBzaW5nbGUgZXZhbCBzdGVwIHdpdGggdGhlIGdpdmVuIGlucHV0cyBhbmQgb3B0aW9ucyB1c2luZyB0aGUgZXZhbCBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGV2YWwgc3RlcC5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nXG4gICB2YWx1ZXMuXG4gICAqL1xuICBydW5FdmFsU3RlcChmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBSdW4gYSBzaW5nbGUgZXZhbCBzdGVwIHdpdGggdGhlIGdpdmVuIGlucHV0cyBhbmQgb3B0aW9ucyB1c2luZyB0aGUgZXZhbCBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LlxuICAgKiBAcGFyYW0gZmV0Y2hlcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBvdXRwdXQuXG4gICAqIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBldmFsIHN0ZXAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZ1xuICAgdmFsdWVzLlxuICAgKi9cbiAgcnVuRXZhbFN0ZXAoXG4gICAgICBmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIGZldGNoZXM6IEluZmVyZW5jZVNlc3Npb24uRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIGNvcHkgcGFyYW1ldGVyc1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIHNpemUgb2YgYWxsIHBhcmFtZXRlcnMgZm9yIHRoZSB0cmFpbmluZyBzdGF0ZS4gQ2FsY3VsYXRlcyB0aGUgdG90YWwgbnVtYmVyIG9mIHByaW1pdGl2ZSAoZGF0YXR5cGUgb2ZcbiAgICogdGhlIHBhcmFtZXRlcnMpIGVsZW1lbnRzIG9mIGFsbCB0aGUgcGFyYW1ldGVycyBpbiB0aGUgdHJhaW5pbmcgc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB0cmFpbmFibGVPbmx5IC0gV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIHNpemUgaXMgY2FsY3VsYXRlZCBmb3IgdHJhaW5hYmxlIHBhcmFtcyBvbmx5LiBEZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICBnZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+O1xuXG4gIC8qKlxuICAgKiBDb3BpZXMgcGFyYW1ldGVyIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBhcnJheSB0byB0aGUgdHJhaW5pbmcgc3RhdGUuIEN1cnJlbnRseSwgb25seSBzdXBwb3J0aW5nIG1vZGVscyB3aXRoXG4gICAqIHBhcmFtZXRlcnMgb2YgdHlwZSBGbG9hdDMyLlxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gRmxvYXQzMiBidWZmZXIgY29udGFpbmluZyBwYXJhbWV0ZXJzIGNvbnZlcnRlZCB0byBhIFVpbnQ4QXJyYXkuXG4gICAqIEBwYXJhbSB0cmFpbmFibGVPbmx5IC0gVHJ1ZSBpZiB0cmFpbmFibGUgcGFyYW1ldGVycyBvbmx5IHRvIGJlIG1vZGlmaWVkLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIGxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5OiBVaW50OEFycmF5LCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ29waWVzIHRoZSBtb2RlbCBwYXJhbWV0ZXJzIHRvIGEgY29udGlndW91cyBidWZmZXIuIFVzdWFsbHkgdXNlZCBpbiB0aGUgY29udGV4dCBvZiBGZWRlcmF0ZWQgTGVhcm5pbmcuXG4gICAqIEN1cnJlbnRseSwgb25seSBzdXBwb3J0aW5nIG1vZGVscyB3aXRoIHBhcmFtZXRlcnMgb2YgdHlwZSBGbG9hdDMyLlxuICAgKlxuICAgKiBAcGFyYW0gdHJhaW5hYmxlT25seSAtIFdoZW4gc2V0IHRvIHRydWUsIG9ubHkgdHJhaW5hYmxlIHBhcmFtZXRlcnMgYXJlIGNvcGllZC4gVHJhaW5hYmxlIHBhcmFtZXRlcnMgYXJlIHBhcmFtZXRlcnNcbiAgICogZm9yIHdoaWNoIHJlcXVpcmVzX2dyYWQgaXMgc2V0IHRvIHRydWUuIERlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBGbG9hdDMyIE9ubnhWYWx1ZSBvZiB0aGUgcmVxdWVzdGVkIHBhcmFtZXRlcnMuXG4gICAqL1xuICBnZXRDb250aWd1b3VzUGFyYW1ldGVycyh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxPbm54VmFsdWU+O1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiByZWxlYXNlKClcblxuICAvKipcbiAgICogUmVsZWFzZSB0aGUgaW5mZXJlbmNlIHNlc3Npb24gYW5kIHRoZSB1bmRlcmx5aW5nIHJlc291cmNlcy5cbiAgICovXG4gIHJlbGVhc2UoKTogUHJvbWlzZTx2b2lkPjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0YWRhdGFcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgdHJhaW5pbmcgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSB0cmFpbmluZ0lucHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBHZXQgb3V0cHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgdHJhaW5pbmcgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSB0cmFpbmluZ091dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgZXZhbCBtb2RlbC4gSXMgYW4gZW1wdHkgYXJyYXkgaWYgbm8gZXZhbCBtb2RlbCBpcyBsb2FkZWQuXG4gICAqL1xuICByZWFkb25seSBldmFsSW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEdldCBvdXRwdXQgbmFtZXMgb2YgdGhlIGxvYWRlZCBldmFsIG1vZGVsLiBJcyBhbiBlbXB0eSBhcnJheSBpZiBubyBldmFsIG1vZGVsIGlzIGxvYWRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGV2YWxPdXRwdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLy8gI2VuZHJlZ2lvblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIG9wdGlvbmFsIHBhcmFtZXRlcnMgdGhhdCBjYW4gYmUgcGFzc2VkIGludG8gdGhlIFRyYWluaW5nU2Vzc2lvbkZhY3RvcnkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhaW5pbmdTZXNzaW9uQ3JlYXRlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBVUkkgb3IgYnVmZmVyIGZvciBhIC5ja3B0IGZpbGUgdGhhdCBjb250YWlucyB0aGUgY2hlY2twb2ludCBmb3IgdGhlIHRyYWluaW5nIG1vZGVsLlxuICAgKi9cbiAgY2hlY2twb2ludFN0YXRlOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXI7XG4gIC8qKlxuICAgKiBVUkkgb3IgYnVmZmVyIGZvciB0aGUgLm9ubnggdHJhaW5pbmcgZmlsZS5cbiAgICovXG4gIHRyYWluTW9kZWw6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsLiBVUkkgb3IgYnVmZmVyIGZvciB0aGUgLm9ubnggb3B0aW1pemVyIG1vZGVsIGZpbGUuXG4gICAqL1xuICBvcHRpbWl6ZXJNb2RlbD86IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsLiBVUkkgb3IgYnVmZmVyIGZvciB0aGUgLm9ubnggZXZhbCBtb2RlbCBmaWxlLlxuICAgKi9cbiAgZXZhbE1vZGVsPzogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyO1xufVxuXG4vKipcbiAqIERlZmluZXMgbWV0aG9kIG92ZXJsb2FkIHBvc3NpYmlsaXRpZXMgZm9yIGNyZWF0aW5nIGEgVHJhaW5pbmdTZXNzaW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbkZhY3Rvcnkge1xuICAvLyAjcmVnaW9uIGNyZWF0ZSgpXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgVHJhaW5pbmdTZXNzaW9uIGFuZCBhc3luY2hyb25vdXNseSBsb2FkcyBhbnkgbW9kZWxzIHBhc3NlZCBpbiB0aHJvdWdoIHRyYWluaW5nT3B0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gdHJhaW5pbmdPcHRpb25zIHNwZWNpZnkgbW9kZWxzIGFuZCBjaGVja3BvaW50cyB0byBsb2FkIGludG8gdGhlIFRyYWluaW5nIFNlc3Npb25cbiAgICogQHBhcmFtIHNlc3Npb25PcHRpb25zIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgdHJhaW5pbmcgc2Vzc2lvbiBiZWhhdmlvclxuICAgKlxuICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBUcmFpbmluZ1Nlc3Npb24gb2JqZWN0XG4gICAqL1xuICBjcmVhdGUodHJhaW5pbmdPcHRpb25zOiBUcmFpbmluZ1Nlc3Npb25DcmVhdGVPcHRpb25zLCBzZXNzaW9uT3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxUcmFpbmluZ1Nlc3Npb24+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IFRyYWluaW5nU2Vzc2lvbjogVHJhaW5pbmdTZXNzaW9uRmFjdG9yeSA9IFRyYWluaW5nU2Vzc2lvbkltcGw7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbi8qKlxuICogIyBPTk5YIFJ1bnRpbWUgSmF2YVNjcmlwdCBBUElcbiAqXG4gKiBPTk5YIFJ1bnRpbWUgSmF2YVNjcmlwdCBBUEkgaXMgYSB1bmlmaWVkIEFQSSBmb3IgYWxsIEphdmFTY3JpcHQgdXNhZ2VzLCBpbmNsdWRpbmcgdGhlIGZvbGxvd2luZyBOUE0gcGFja2FnZXM6XG4gKlxuICogLSBbb25ueHJ1bnRpbWUtbm9kZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb25ueHJ1bnRpbWUtbm9kZSlcbiAqIC0gW29ubnhydW50aW1lLXdlYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb25ueHJ1bnRpbWUtd2ViKVxuICogLSBbb25ueHJ1bnRpbWUtcmVhY3QtbmF0aXZlXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9vbm54cnVudGltZS1yZWFjdC1uYXRpdmUpXG4gKlxuICogU2VlIGFsc286XG4gKiAtIFtHZXQgU3RhcnRlZF0oaHR0cHM6Ly9vbm54cnVudGltZS5haS9kb2NzL2dldC1zdGFydGVkL3dpdGgtamF2YXNjcmlwdC5odG1sKVxuICogLSBbSW5mZXJlbmNlIGV4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L29ubnhydW50aW1lLWluZmVyZW5jZS1leGFtcGxlcy90cmVlL21haW4vanMpXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuZXhwb3J0ICogZnJvbSAnLi9iYWNrZW5kLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZW52LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90ZW5zb3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFjZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLmpzJztcbiIsICJleHBvcnQgY29uc3QgY3B1cyA9IHVuZGVmaW5lZDsiLCAiZXhwb3J0IGNvbnN0IGpvaW4gPSB1bmRlZmluZWQ7IiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDtleHBvcnQgY29uc3QgcmVhZEZpbGVTeW5jID0gdW5kZWZpbmVkO2V4cG9ydCBjb25zdCBjcmVhdGVSZWFkU3RyZWFtID0gdW5kZWZpbmVkOyIsICJleHBvcnQgY29uc3Qgam9pbiA9IHVuZGVmaW5lZDsiLCAiXG52YXIgb3J0V2FzbSA9ICgoKSA9PiB7XG4gIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gJ3VuZGVmaW5lZCcpIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gIHJldHVybiAoXG5mdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuXG52YXIgZT1tb2R1bGVBcmcsayxsO2UucmVhZHk9bmV3IFByb21pc2UoKGEsYik9PntrPWE7bD1ifSk7dmFyIGFhPU9iamVjdC5hc3NpZ24oe30sZSksYmE9XCIuL3RoaXMucHJvZ3JhbVwiLGNhPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cscT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzLGRhPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSx2PVwiXCIseCx6LEE7XG5pZihkYSl7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKSxCPXJlcXVpcmUoXCJwYXRoXCIpO3Y9cT9CLmRpcm5hbWUodikrXCIvXCI6X19kaXJuYW1lK1wiL1wiO3g9KGEsYik9PnthPUMoYSk/bmV3IFVSTChhKTpCLm5vcm1hbGl6ZShhKTtyZXR1cm4gZnMucmVhZEZpbGVTeW5jKGEsYj92b2lkIDA6XCJ1dGY4XCIpfTtBPWE9PnthPXgoYSwhMCk7YS5idWZmZXJ8fChhPW5ldyBVaW50OEFycmF5KGEpKTtyZXR1cm4gYX07ej0oYSxiLGMsZD0hMCk9PnthPUMoYSk/bmV3IFVSTChhKTpCLm5vcm1hbGl6ZShhKTtmcy5yZWFkRmlsZShhLGQ/dm9pZCAwOlwidXRmOFwiLChnLGgpPT57Zz9jKGcpOmIoZD9oLmJ1ZmZlcjpoKX0pfTshZS50aGlzUHJvZ3JhbSYmMTxwcm9jZXNzLmFyZ3YubGVuZ3RoJiYoYmE9cHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikpO3Byb2Nlc3MuYXJndi5zbGljZSgyKTtlLmluc3BlY3Q9KCk9PlwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIn1lbHNlIGlmKGNhfHxxKXE/dj1cbnNlbGYubG9jYXRpb24uaHJlZjpcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQmJih2PWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjKSxfc2NyaXB0RGlyJiYodj1fc2NyaXB0RGlyKSwwIT09di5pbmRleE9mKFwiYmxvYjpcIik/dj12LnN1YnN0cigwLHYucmVwbGFjZSgvWz8jXS4qLyxcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikrMSk6dj1cIlwiLHg9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnNlbmQobnVsbCk7cmV0dXJuIGIucmVzcG9uc2VUZXh0fSxxJiYoQT1hPT57dmFyIGI9bmV3IFhNTEh0dHBSZXF1ZXN0O2Iub3BlbihcIkdFVFwiLGEsITEpO2IucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjtiLnNlbmQobnVsbCk7cmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpfSksej0oYSxiLGMpPT57dmFyIGQ9bmV3IFhNTEh0dHBSZXF1ZXN0O2Qub3BlbihcIkdFVFwiLGEsITApO2QucmVzcG9uc2VUeXBlPVxuXCJhcnJheWJ1ZmZlclwiO2Qub25sb2FkPSgpPT57MjAwPT1kLnN0YXR1c3x8MD09ZC5zdGF0dXMmJmQucmVzcG9uc2U/YihkLnJlc3BvbnNlKTpjKCl9O2Qub25lcnJvcj1jO2Quc2VuZChudWxsKX07dmFyIGVhPWNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksRD1jb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7T2JqZWN0LmFzc2lnbihlLGFhKTthYT1udWxsO1wib2JqZWN0XCIhPXR5cGVvZiBXZWJBc3NlbWJseSYmRShcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7dmFyIEYsZmE9ITEsRyxILEksSixoYTtcbmZ1bmN0aW9uIGlhKCl7dmFyIGE9Ri5idWZmZXI7ZS5IRUFQOD1HPW5ldyBJbnQ4QXJyYXkoYSk7ZS5IRUFQMTY9bmV3IEludDE2QXJyYXkoYSk7ZS5IRUFQVTg9SD1uZXcgVWludDhBcnJheShhKTtlLkhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGEpO2UuSEVBUDMyPUk9bmV3IEludDMyQXJyYXkoYSk7ZS5IRUFQVTMyPUo9bmV3IFVpbnQzMkFycmF5KGEpO2UuSEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGEpO2UuSEVBUEY2ND1oYT1uZXcgRmxvYXQ2NEFycmF5KGEpfXZhciBLPVtdLEw9W10samE9W10sTT0wLE49bnVsbCxPPW51bGw7ZnVuY3Rpb24gRShhKXthPVwiQWJvcnRlZChcIithK1wiKVwiO0QoYSk7ZmE9ITA7YT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKGErXCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCIpO2woYSk7dGhyb3cgYTt9XG52YXIga2E9YT0+YS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKSxDPWE9PmEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIiksUDtQPVwib3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtXCI7aWYoIWthKFApKXt2YXIgbGE9UDtQPWUubG9jYXRlRmlsZT9lLmxvY2F0ZUZpbGUobGEsdik6ditsYX1mdW5jdGlvbiBtYShhKXtpZihBKXJldHVybiBBKGEpO3Rocm93XCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO31cbmZ1bmN0aW9uIG5hKGEpe2lmKGNhfHxxKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBmZXRjaCYmIUMoYSkpcmV0dXJuIGZldGNoKGEse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oYj0+e2lmKCFiLm9rKXRocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIithK1wiJ1wiO3JldHVybiBiLmFycmF5QnVmZmVyKCl9KS5jYXRjaCgoKT0+bWEoYSkpO2lmKHopcmV0dXJuIG5ldyBQcm9taXNlKChiLGMpPT57eihhLGQ9PmIobmV3IFVpbnQ4QXJyYXkoZCkpLGMpfSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9Pm1hKGEpKX1mdW5jdGlvbiBvYShhLGIsYyl7cmV0dXJuIG5hKGEpLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCxiKSkudGhlbihkPT5kKS50aGVuKGMsZD0+e0QoYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7ZH1gKTtFKGQpfSl9XG5mdW5jdGlvbiBwYShhLGIpe3ZhciBjPVA7cmV0dXJuXCJmdW5jdGlvblwiIT10eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmd8fGthKGMpfHxDKGMpfHxkYXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZmV0Y2g/b2EoYyxhLGIpOmZldGNoKGMse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCxhKS50aGVuKGIsZnVuY3Rpb24oZyl7RChgd2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6ICR7Z31gKTtEKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIG9hKGMsYSxiKX0pKX1cbnZhciBRLHFhPXs5ODkyODA6KGEsYixjLGQpPT57aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGV8fCFlLlFhKXJldHVybiAxO2E9UihhPj4+MCk7YS5zdGFydHNXaXRoKFwiLi9cIikmJihhPWEuc3Vic3RyaW5nKDIpKTthPWUuUWEuZ2V0KGEpO2lmKCFhKXJldHVybiAyO2I+Pj49MDtjPj4+PTA7aWYoYitjPmEuYnl0ZUxlbmd0aClyZXR1cm4gMzt0cnl7cmV0dXJuIEguc2V0KGEuc3ViYXJyYXkoYixiK2MpLGQ+Pj4wPj4+MCksMH1jYXRjaHtyZXR1cm4gNH19fTtmdW5jdGlvbiByYShhKXt0aGlzLkthPWEtMjQ7dGhpcy5QYT1mdW5jdGlvbihiKXtKW3RoaXMuS2ErND4+PjI+Pj4wXT1ifTt0aGlzLk9hPWZ1bmN0aW9uKGIpe0pbdGhpcy5LYSs4Pj4+Mj4+PjBdPWJ9O3RoaXMuTWE9ZnVuY3Rpb24oYixjKXt0aGlzLk5hKCk7dGhpcy5QYShiKTt0aGlzLk9hKGMpfTt0aGlzLk5hPWZ1bmN0aW9uKCl7Slt0aGlzLkthKzE2Pj4+Mj4+PjBdPTB9fVxudmFyIHNhPTAsdGE9MCx1YT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp2b2lkIDAsdmE9KGEsYixjKT0+e2I+Pj49MDt2YXIgZD1iK2M7Zm9yKGM9YjthW2NdJiYhKGM+PWQpOykrK2M7aWYoMTY8Yy1iJiZhLmJ1ZmZlciYmdWEpcmV0dXJuIHVhLmRlY29kZShhLnN1YmFycmF5KGIsYykpO2ZvcihkPVwiXCI7YjxjOyl7dmFyIGc9YVtiKytdO2lmKGcmMTI4KXt2YXIgaD1hW2IrK10mNjM7aWYoMTkyPT0oZyYyMjQpKWQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGcmMzEpPDw2fGgpO2Vsc2V7dmFyIG09YVtiKytdJjYzO2c9MjI0PT0oZyYyNDApPyhnJjE1KTw8MTJ8aDw8NnxtOihnJjcpPDwxOHxoPDwxMnxtPDw2fGFbYisrXSY2Mzs2NTUzNj5nP2QrPVN0cmluZy5mcm9tQ2hhckNvZGUoZyk6KGctPTY1NTM2LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Zz4+MTAsNTYzMjB8ZyYxMDIzKSl9fWVsc2UgZCs9U3RyaW5nLmZyb21DaGFyQ29kZShnKX1yZXR1cm4gZH0sXG5SPShhLGIpPT4oYT4+Pj0wKT92YShILGEsYik6XCJcIixTPWE9Pntmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBkPWEuY2hhckNvZGVBdChjKTsxMjc+PWQ/YisrOjIwNDc+PWQ/Yis9Mjo1NTI5Njw9ZCYmNTczNDM+PWQ/KGIrPTQsKytjKTpiKz0zfXJldHVybiBifSxUPShhLGIsYyxkKT0+e2M+Pj49MDtpZighKDA8ZCkpcmV0dXJuIDA7dmFyIGc9YztkPWMrZC0xO2Zvcih2YXIgaD0wO2g8YS5sZW5ndGg7KytoKXt2YXIgbT1hLmNoYXJDb2RlQXQoaCk7aWYoNTUyOTY8PW0mJjU3MzQzPj1tKXt2YXIgcj1hLmNoYXJDb2RlQXQoKytoKTttPTY1NTM2KygobSYxMDIzKTw8MTApfHImMTAyM31pZigxMjc+PW0pe2lmKGM+PWQpYnJlYWs7YltjKys+Pj4wXT1tfWVsc2V7aWYoMjA0Nz49bSl7aWYoYysxPj1kKWJyZWFrO2JbYysrPj4+MF09MTkyfG0+PjZ9ZWxzZXtpZig2NTUzNT49bSl7aWYoYysyPj1kKWJyZWFrO2JbYysrPj4+MF09MjI0fG0+PjEyfWVsc2V7aWYoYyszPj1cbmQpYnJlYWs7YltjKys+Pj4wXT0yNDB8bT4+MTg7YltjKys+Pj4wXT0xMjh8bT4+MTImNjN9YltjKys+Pj4wXT0xMjh8bT4+NiY2M31iW2MrKz4+PjBdPTEyOHxtJjYzfX1iW2M+Pj4wXT0wO3JldHVybiBjLWd9LFU9YT0+MD09PWElNCYmKDAhPT1hJTEwMHx8MD09PWElNDAwKSx3YT1bMCwzMSw2MCw5MSwxMjEsMTUyLDE4MiwyMTMsMjQ0LDI3NCwzMDUsMzM1XSx4YT1bMCwzMSw1OSw5MCwxMjAsMTUxLDE4MSwyMTIsMjQzLDI3MywzMDQsMzM0XSxDYT1hPT57dmFyIGI9UyhhKSsxLGM9QmEoYik7YyYmVChhLEgsYyxiKTtyZXR1cm4gY30sVj1bXSxXPXt9LERhPSgpPT57aWYoIVgpe3ZhciBhPXtVU0VSOlwid2ViX3VzZXJcIixMT0dOQU1FOlwid2ViX3VzZXJcIixQQVRIOlwiL1wiLFBXRDpcIi9cIixIT01FOlwiL2hvbWUvd2ViX3VzZXJcIixMQU5HOihcIm9iamVjdFwiPT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdfHxcIkNcIikucmVwbGFjZShcIi1cIixcblwiX1wiKStcIi5VVEYtOFwiLF86YmF8fFwiLi90aGlzLnByb2dyYW1cIn0sYjtmb3IoYiBpbiBXKXZvaWQgMD09PVdbYl0/ZGVsZXRlIGFbYl06YVtiXT1XW2JdO3ZhciBjPVtdO2ZvcihiIGluIGEpYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtYPWN9cmV0dXJuIFh9LFgsRWE9W251bGwsW10sW11dLEZhPVszMSwyOSwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV0sR2E9WzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtmdW5jdGlvbiBIYShhKXt2YXIgYj1BcnJheShTKGEpKzEpO1QoYSxiLDAsYi5sZW5ndGgpO3JldHVybiBifVxuZnVuY3Rpb24gSWEoYSxiLGMsZCl7ZnVuY3Rpb24gZyhmLG4scCl7Zm9yKGY9XCJudW1iZXJcIj09dHlwZW9mIGY/Zi50b1N0cmluZygpOmZ8fFwiXCI7Zi5sZW5ndGg8bjspZj1wWzBdK2Y7cmV0dXJuIGZ9ZnVuY3Rpb24gaChmLG4pe3JldHVybiBnKGYsbixcIjBcIil9ZnVuY3Rpb24gbShmLG4pe2Z1bmN0aW9uIHAoeWEpe3JldHVybiAwPnlhPy0xOjA8eWE/MTowfXZhciB5OzA9PT0oeT1wKGYuZ2V0RnVsbFllYXIoKS1uLmdldEZ1bGxZZWFyKCkpKSYmMD09PSh5PXAoZi5nZXRNb250aCgpLW4uZ2V0TW9udGgoKSkpJiYoeT1wKGYuZ2V0RGF0ZSgpLW4uZ2V0RGF0ZSgpKSk7cmV0dXJuIHl9ZnVuY3Rpb24gcihmKXtzd2l0Y2goZi5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwyOSk7Y2FzZSAxOnJldHVybiBmO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMSk7Y2FzZSA1OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIHcoZil7dmFyIG49Zi5HYTtmb3IoZj1uZXcgRGF0ZSgobmV3IERhdGUoZi5IYSsxOTAwLDAsMSkpLmdldFRpbWUoKSk7MDxuOyl7dmFyIHA9Zi5nZXRNb250aCgpLHk9KFUoZi5nZXRGdWxsWWVhcigpKT9GYTpHYSlbcF07aWYobj55LWYuZ2V0RGF0ZSgpKW4tPXktZi5nZXREYXRlKCkrMSxmLnNldERhdGUoMSksMTE+cD9mLnNldE1vbnRoKHArMSk6KGYuc2V0TW9udGgoMCksZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkrMSkpO2Vsc2V7Zi5zZXREYXRlKGYuZ2V0RGF0ZSgpK24pO2JyZWFrfX1wPW5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSsxLDAsNCk7bj1yKG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSxcbjAsNCkpO3A9cihwKTtyZXR1cm4gMD49bShuLGYpPzA+PW0ocCxmKT9mLmdldEZ1bGxZZWFyKCkrMTpmLmdldEZ1bGxZZWFyKCk6Zi5nZXRGdWxsWWVhcigpLTF9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO3ZhciB0PUpbZCs0MD4+PjI+Pj4wXTtkPXtUYTpJW2Q+Pj4yPj4+MF0sU2E6SVtkKzQ+Pj4yPj4+MF0sSWE6SVtkKzg+Pj4yPj4+MF0sTGE6SVtkKzEyPj4+Mj4+PjBdLEphOklbZCsxNj4+PjI+Pj4wXSxIYTpJW2QrMjA+Pj4yPj4+MF0sQmE6SVtkKzI0Pj4+Mj4+PjBdLEdhOklbZCsyOD4+PjI+Pj4wXSxWYTpJW2QrMzI+Pj4yPj4+MF0sUmE6SVtkKzM2Pj4+Mj4+PjBdLFVhOnQ/Uih0KTpcIlwifTtjPVIoYyk7dD17XCIlY1wiOlwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcIiVEXCI6XCIlbS8lZC8leVwiLFwiJUZcIjpcIiVZLSVtLSVkXCIsXCIlaFwiOlwiJWJcIixcIiVyXCI6XCIlSTolTTolUyAlcFwiLFwiJVJcIjpcIiVIOiVNXCIsXCIlVFwiOlwiJUg6JU06JVNcIixcIiV4XCI6XCIlbS8lZC8leVwiLFwiJVhcIjpcIiVIOiVNOiVTXCIsXG5cIiVFY1wiOlwiJWNcIixcIiVFQ1wiOlwiJUNcIixcIiVFeFwiOlwiJW0vJWQvJXlcIixcIiVFWFwiOlwiJUg6JU06JVNcIixcIiVFeVwiOlwiJXlcIixcIiVFWVwiOlwiJVlcIixcIiVPZFwiOlwiJWRcIixcIiVPZVwiOlwiJWVcIixcIiVPSFwiOlwiJUhcIixcIiVPSVwiOlwiJUlcIixcIiVPbVwiOlwiJW1cIixcIiVPTVwiOlwiJU1cIixcIiVPU1wiOlwiJVNcIixcIiVPdVwiOlwiJXVcIixcIiVPVVwiOlwiJVVcIixcIiVPVlwiOlwiJVZcIixcIiVPd1wiOlwiJXdcIixcIiVPV1wiOlwiJVdcIixcIiVPeVwiOlwiJXlcIn07Zm9yKHZhciB1IGluIHQpYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh1LFwiZ1wiKSx0W3VdKTt2YXIgemE9XCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSxBYT1cIkphbnVhcnkgRmVicnVhcnkgTWFyY2ggQXByaWwgTWF5IEp1bmUgSnVseSBBdWd1c3QgU2VwdGVtYmVyIE9jdG9iZXIgTm92ZW1iZXIgRGVjZW1iZXJcIi5zcGxpdChcIiBcIik7dD17XCIlYVwiOmY9PnphW2YuQmFdLnN1YnN0cmluZygwLDMpLFwiJUFcIjpmPT56YVtmLkJhXSxcblwiJWJcIjpmPT5BYVtmLkphXS5zdWJzdHJpbmcoMCwzKSxcIiVCXCI6Zj0+QWFbZi5KYV0sXCIlQ1wiOmY9PmgoKGYuSGErMTkwMCkvMTAwfDAsMiksXCIlZFwiOmY9PmgoZi5MYSwyKSxcIiVlXCI6Zj0+ZyhmLkxhLDIsXCIgXCIpLFwiJWdcIjpmPT53KGYpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFwiJUdcIjpmPT53KGYpLFwiJUhcIjpmPT5oKGYuSWEsMiksXCIlSVwiOmY9PntmPWYuSWE7MD09Zj9mPTEyOjEyPGYmJihmLT0xMik7cmV0dXJuIGgoZiwyKX0sXCIlalwiOmY9Pntmb3IodmFyIG49MCxwPTA7cDw9Zi5KYS0xO24rPShVKGYuSGErMTkwMCk/RmE6R2EpW3ArK10pO3JldHVybiBoKGYuTGErbiwzKX0sXCIlbVwiOmY9PmgoZi5KYSsxLDIpLFwiJU1cIjpmPT5oKGYuU2EsMiksXCIlblwiOigpPT5cIlxcblwiLFwiJXBcIjpmPT4wPD1mLklhJiYxMj5mLklhP1wiQU1cIjpcIlBNXCIsXCIlU1wiOmY9PmgoZi5UYSwyKSxcIiV0XCI6KCk9PlwiXFx0XCIsXCIldVwiOmY9PmYuQmF8fDcsXCIlVVwiOmY9PmgoTWF0aC5mbG9vcigoZi5HYSs3LWYuQmEpLzcpLFxuMiksXCIlVlwiOmY9Pnt2YXIgbj1NYXRoLmZsb29yKChmLkdhKzctKGYuQmErNiklNykvNyk7Mj49KGYuQmErMzcxLWYuR2EtMiklNyYmbisrO2lmKG4pNTM9PW4mJihwPShmLkJhKzM3MS1mLkdhKSU3LDQ9PXB8fDM9PXAmJlUoZi5IYSl8fChuPTEpKTtlbHNle249NTI7dmFyIHA9KGYuQmErNy1mLkdhLTEpJTc7KDQ9PXB8fDU9PXAmJlUoZi5IYSU0MDAtMSkpJiZuKyt9cmV0dXJuIGgobiwyKX0sXCIld1wiOmY9PmYuQmEsXCIlV1wiOmY9PmgoTWF0aC5mbG9vcigoZi5HYSs3LShmLkJhKzYpJTcpLzcpLDIpLFwiJXlcIjpmPT4oZi5IYSsxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVZXCI6Zj0+Zi5IYSsxOTAwLFwiJXpcIjpmPT57Zj1mLlJhO3ZhciBuPTA8PWY7Zj1NYXRoLmFicyhmKS82MDtyZXR1cm4obj9cIitcIjpcIi1cIikrU3RyaW5nKFwiMDAwMFwiKyhmLzYwKjEwMCtmJTYwKSkuc2xpY2UoLTQpfSxcIiVaXCI6Zj0+Zi5VYSxcIiUlXCI6KCk9PlwiJVwifTtjPWMucmVwbGFjZSgvJSUvZyxcIlxceDAwXFx4MDBcIik7XG5mb3IodSBpbiB0KWMuaW5jbHVkZXModSkmJihjPWMucmVwbGFjZShuZXcgUmVnRXhwKHUsXCJnXCIpLHRbdV0oZCkpKTtjPWMucmVwbGFjZSgvXFwwXFwwL2csXCIlXCIpO3U9SGEoYyk7aWYodS5sZW5ndGg+YilyZXR1cm4gMDtHLnNldCh1LGE+Pj4wKTtyZXR1cm4gdS5sZW5ndGgtMX1cbnZhciBMYT17YTpmdW5jdGlvbihhLGIsYyl7YT4+Pj0wOyhuZXcgcmEoYSkpLk1hKGI+Pj4wLGM+Pj4wKTtzYT1hO3RhKys7dGhyb3cgc2E7fSxlOmZ1bmN0aW9uKCl7cmV0dXJuIDB9LEg6ZnVuY3Rpb24oKXt9LHg6ZnVuY3Rpb24oKXt9LHo6ZnVuY3Rpb24oKXt9LEo6ZnVuY3Rpb24oKXtyZXR1cm4gMH0sRjpmdW5jdGlvbigpe30sQTpmdW5jdGlvbigpe30sRTpmdW5jdGlvbigpe30sZzpmdW5jdGlvbigpe30seTpmdW5jdGlvbigpe30sdjpmdW5jdGlvbigpe30sRzpmdW5jdGlvbigpe30sdzpmdW5jdGlvbigpe30sazooKT0+MSxuOmZ1bmN0aW9uKGEsYixjKXthPWIrMjA5NzE1Mj4+PjA8NDE5NDMwNS0hIWE/KGE+Pj4wKSs0Mjk0OTY3Mjk2KmI6TmFOO2M+Pj49MDthPW5ldyBEYXRlKDFFMyphKTtJW2M+Pj4yPj4+MF09YS5nZXRVVENTZWNvbmRzKCk7SVtjKzQ+Pj4yPj4+MF09YS5nZXRVVENNaW51dGVzKCk7SVtjKzg+Pj4yPj4+MF09YS5nZXRVVENIb3VycygpO0lbYysxMj4+PlxuMj4+PjBdPWEuZ2V0VVRDRGF0ZSgpO0lbYysxNj4+PjI+Pj4wXT1hLmdldFVUQ01vbnRoKCk7SVtjKzIwPj4+Mj4+PjBdPWEuZ2V0VVRDRnVsbFllYXIoKS0xOTAwO0lbYysyND4+PjI+Pj4wXT1hLmdldFVUQ0RheSgpO0lbYysyOD4+PjI+Pj4wXT0oYS5nZXRUaW1lKCktRGF0ZS5VVEMoYS5nZXRVVENGdWxsWWVhcigpLDAsMSwwLDAsMCwwKSkvODY0RTV8MH0sbzpmdW5jdGlvbihhLGIsYyl7YT1iKzIwOTcxNTI+Pj4wPDQxOTQzMDUtISFhPyhhPj4+MCkrNDI5NDk2NzI5NipiOk5hTjtjPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7SVtjPj4+Mj4+PjBdPWEuZ2V0U2Vjb25kcygpO0lbYys0Pj4+Mj4+PjBdPWEuZ2V0TWludXRlcygpO0lbYys4Pj4+Mj4+PjBdPWEuZ2V0SG91cnMoKTtJW2MrMTI+Pj4yPj4+MF09YS5nZXREYXRlKCk7SVtjKzE2Pj4+Mj4+PjBdPWEuZ2V0TW9udGgoKTtJW2MrMjA+Pj4yPj4+MF09YS5nZXRGdWxsWWVhcigpLTE5MDA7SVtjKzI0Pj4+Mj4+PjBdPWEuZ2V0RGF5KCk7XG5JW2MrMjg+Pj4yPj4+MF09KFUoYS5nZXRGdWxsWWVhcigpKT93YTp4YSlbYS5nZXRNb250aCgpXSthLmdldERhdGUoKS0xfDA7SVtjKzM2Pj4+Mj4+PjBdPS0oNjAqYS5nZXRUaW1lem9uZU9mZnNldCgpKTtiPShuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksNiwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgZD0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7SVtjKzMyPj4+Mj4+PjBdPShiIT1kJiZhLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKGQsYikpfDB9LHA6ZnVuY3Rpb24oYSl7YT4+Pj0wO3ZhciBiPW5ldyBEYXRlKElbYSsyMD4+PjI+Pj4wXSsxOTAwLElbYSsxNj4+PjI+Pj4wXSxJW2ErMTI+Pj4yPj4+MF0sSVthKzg+Pj4yPj4+MF0sSVthKzQ+Pj4yPj4+MF0sSVthPj4+Mj4+PjBdLDApLGM9SVthKzMyPj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLFxuaD0obmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLDAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCksbT1NYXRoLm1pbihoLGcpOzA+Yz9JW2ErMzI+Pj4yPj4+MF09TnVtYmVyKGchPWgmJm09PWQpOjA8YyE9KG09PWQpJiYoZz1NYXRoLm1heChoLGcpLGIuc2V0VGltZShiLmdldFRpbWUoKSs2RTQqKCgwPGM/bTpnKS1kKSkpO0lbYSsyND4+PjI+Pj4wXT1iLmdldERheSgpO0lbYSsyOD4+PjI+Pj4wXT0oVShiLmdldEZ1bGxZZWFyKCkpP3dhOnhhKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDtJW2E+Pj4yPj4+MF09Yi5nZXRTZWNvbmRzKCk7SVthKzQ+Pj4yPj4+MF09Yi5nZXRNaW51dGVzKCk7SVthKzg+Pj4yPj4+MF09Yi5nZXRIb3VycygpO0lbYSsxMj4+PjI+Pj4wXT1iLmdldERhdGUoKTtJW2ErMTY+Pj4yPj4+MF09Yi5nZXRNb250aCgpO0lbYSsyMD4+PjI+Pj4wXT1iLmdldFllYXIoKTthPWIuZ2V0VGltZSgpO2lzTmFOKGEpPyhJW0phKCk+Pj4yPj4+MF09NjEsYT0tMSk6XG5hLz0xRTM7cmV0dXJuIEthKChRPWEsMTw9K01hdGguYWJzKFEpPzA8UT8rTWF0aC5mbG9vcihRLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKFEtKyh+flE+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApKSxhPj4+MH0sbDpmdW5jdGlvbigpe3JldHVybi01Mn0sbTpmdW5jdGlvbigpe30sdDpmdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZCh3KXtyZXR1cm4odz13LnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLykpP3dbMV06XCJHTVRcIn1jPj4+PTA7dmFyIGc9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpLGg9bmV3IERhdGUoZywwLDEpLG09bmV3IERhdGUoZyw2LDEpO2c9aC5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciByPW0uZ2V0VGltZXpvbmVPZmZzZXQoKTtKW2E+Pj4wPj4+Mj4+PjBdPTYwKk1hdGgubWF4KGcscik7SVtiPj4+MD4+PjI+Pj4wXT1OdW1iZXIoZyE9cik7YT1kKGgpO2I9ZChtKTthPUNhKGEpO2I9Q2EoYik7cjxnPyhKW2M+Pj4yPj4+MF09XG5hLEpbYys0Pj4+Mj4+PjBdPWIpOihKW2M+Pj4yPj4+MF09YixKW2MrND4+PjI+Pj4wXT1hKX0sZDooKT0+e0UoXCJcIil9LEI6ZnVuY3Rpb24oYSxiLGMpe2E+Pj49MDtiPj4+PTA7Yz4+Pj0wO1YubGVuZ3RoPTA7Zm9yKHZhciBkO2Q9SFtiKys+Pj4wXTspe3ZhciBnPTEwNSE9ZDtnJj0xMTIhPWQ7Yys9ZyYmYyU4PzQ6MDtWLnB1c2goMTEyPT1kP0pbYz4+PjI+Pj4wXToxMDU9PWQ/SVtjPj4+Mj4+PjBdOmhhW2M+Pj4zPj4+MF0pO2MrPWc/ODo0fXJldHVybiBxYVthXS5hcHBseShudWxsLFYpfSxoOigpPT5EYXRlLm5vdygpLHU6ZnVuY3Rpb24oKXtyZXR1cm4gNDI5NDkwMTc2MH0sYjooKT0+cGVyZm9ybWFuY2Uubm93KCksSTpmdW5jdGlvbihhLGIsYyl7Yj4+Pj0wO3JldHVybiBILmNvcHlXaXRoaW4oYT4+PjA+Pj4wLGI+Pj4wLGIrKGM+Pj4wKT4+PjApfSxzOmZ1bmN0aW9uKGEpe2E+Pj49MDt2YXIgYj1ILmxlbmd0aDtpZig0Mjk0OTAxNzYwPGEpcmV0dXJuITE7Zm9yKHZhciBjPVxuMTs0Pj1jO2MqPTIpe3ZhciBkPWIqKDErLjIvYyk7ZD1NYXRoLm1pbihkLGErMTAwNjYzMjk2KTt2YXIgZz1NYXRoO2Q9TWF0aC5tYXgoYSxkKTthOntnPShnLm1pbi5jYWxsKGcsNDI5NDkwMTc2MCxkKyg2NTUzNi1kJTY1NTM2KSU2NTUzNiktRi5idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNSkvNjU1MzY7dHJ5e0YuZ3JvdyhnKTtpYSgpO3ZhciBoPTE7YnJlYWsgYX1jYXRjaChtKXt9aD12b2lkIDB9aWYoaClyZXR1cm4hMH1yZXR1cm4hMX0sQzpmdW5jdGlvbihhLGIpe2E+Pj49MDtiPj4+PTA7dmFyIGM9MDtEYSgpLmZvckVhY2goKGQsZyk9Pnt2YXIgaD1iK2M7Zz1KW2ErNCpnPj4+Mj4+PjBdPWg7Zm9yKGg9MDtoPGQubGVuZ3RoOysraClHW2crKz4+PjA+Pj4wXT1kLmNoYXJDb2RlQXQoaCk7R1tnPj4+MD4+PjBdPTA7Yys9ZC5sZW5ndGgrMX0pO3JldHVybiAwfSxEOmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2I+Pj49MDt2YXIgYz1EYSgpO0pbYT4+PjI+Pj4wXT1jLmxlbmd0aDt2YXIgZD1cbjA7Yy5mb3JFYWNoKGc9PmQrPWcubGVuZ3RoKzEpO0pbYj4+PjI+Pj4wXT1kO3JldHVybiAwfSxmOigpPT41MixqOmZ1bmN0aW9uKCl7cmV0dXJuIDUyfSxxOmZ1bmN0aW9uKCl7cmV0dXJuIDcwfSxpOmZ1bmN0aW9uKGEsYixjLGQpe2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO2Zvcih2YXIgZz0wLGg9MDtoPGM7aCsrKXt2YXIgbT1KW2I+Pj4yPj4+MF0scj1KW2IrND4+PjI+Pj4wXTtiKz04O2Zvcih2YXIgdz0wO3c8cjt3Kyspe3ZhciB0PUhbbSt3Pj4+MF0sdT1FYVthXTswPT09dHx8MTA9PT10PygoMT09PWE/ZWE6RCkodmEodSwwKSksdS5sZW5ndGg9MCk6dS5wdXNoKHQpfWcrPXJ9SltkPj4+Mj4+PjBdPWc7cmV0dXJuIDB9LHI6SWEsYzpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gSWEoYT4+PjAsYj4+PjAsYz4+PjAsZD4+PjApfX0sWT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYyl7WT1jLmV4cG9ydHM7WT1NYSgpO0Y9WS5LO2lhKCk7TC51bnNoaWZ0KFkuTCk7TS0tOzA9PU0mJihudWxsIT09XG5OJiYoY2xlYXJJbnRlcnZhbChOKSxOPW51bGwpLE8mJihjPU8sTz1udWxsLGMoKSkpO3JldHVybiBZfXZhciBiPXthOkxhfTtNKys7aWYoZS5pbnN0YW50aWF0ZVdhc20pdHJ5e3JldHVybiBlLmluc3RhbnRpYXRlV2FzbShiLGEpfWNhdGNoKGMpe0QoYE1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6ICR7Y31gKSxsKGMpfXBhKGIsZnVuY3Rpb24oYyl7YShjLmluc3RhbmNlKX0pLmNhdGNoKGwpO3JldHVybnt9fSgpO2UuX09ydEluaXQ9KGEsYik9PihlLl9PcnRJbml0PVkuTSkoYSxiKTtlLl9PcnRHZXRMYXN0RXJyb3I9KGEsYik9PihlLl9PcnRHZXRMYXN0RXJyb3I9WS5OKShhLGIpO2UuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxkLGcsaCxtLHIsdyx0KT0+KGUuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPVkuTykoYSxiLGMsZCxnLGgsbSxyLHcsdCk7XG5lLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj0oYSxiKT0+KGUuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyPVkuUCkoYSxiKTtlLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9KGEsYixjKT0+KGUuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZT1ZLlEpKGEsYixjKTtlLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9KGEsYixjKT0+KGUuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeT1ZLlIpKGEsYixjKTtlLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9YT0+KGUuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucz1ZLlMpKGEpO2UuX09ydENyZWF0ZVNlc3Npb249KGEsYixjKT0+KGUuX09ydENyZWF0ZVNlc3Npb249WS5UKShhLGIsYyk7ZS5fT3J0UmVsZWFzZVNlc3Npb249YT0+KGUuX09ydFJlbGVhc2VTZXNzaW9uPVkuVSkoYSk7ZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD0oYSxiLGMpPT4oZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD1ZLlYpKGEsYixjKTtcbmUuX09ydEdldElucHV0TmFtZT0oYSxiKT0+KGUuX09ydEdldElucHV0TmFtZT1ZLlcpKGEsYik7ZS5fT3J0R2V0T3V0cHV0TmFtZT0oYSxiKT0+KGUuX09ydEdldE91dHB1dE5hbWU9WS5YKShhLGIpO2UuX09ydEZyZWU9YT0+KGUuX09ydEZyZWU9WS5ZKShhKTtlLl9PcnRDcmVhdGVUZW5zb3I9KGEsYixjLGQsZyxoKT0+KGUuX09ydENyZWF0ZVRlbnNvcj1ZLlopKGEsYixjLGQsZyxoKTtlLl9PcnRHZXRUZW5zb3JEYXRhPShhLGIsYyxkLGcpPT4oZS5fT3J0R2V0VGVuc29yRGF0YT1ZLl8pKGEsYixjLGQsZyk7ZS5fT3J0UmVsZWFzZVRlbnNvcj1hPT4oZS5fT3J0UmVsZWFzZVRlbnNvcj1ZLiQpKGEpO2UuX09ydENyZWF0ZVJ1bk9wdGlvbnM9KGEsYixjLGQpPT4oZS5fT3J0Q3JlYXRlUnVuT3B0aW9ucz1ZLmFhKShhLGIsYyxkKTtlLl9PcnRBZGRSdW5Db25maWdFbnRyeT0oYSxiLGMpPT4oZS5fT3J0QWRkUnVuQ29uZmlnRW50cnk9WS5iYSkoYSxiLGMpO1xuZS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnM9YT0+KGUuX09ydFJlbGVhc2VSdW5PcHRpb25zPVkuY2EpKGEpO2UuX09ydENyZWF0ZUJpbmRpbmc9YT0+KGUuX09ydENyZWF0ZUJpbmRpbmc9WS5kYSkoYSk7ZS5fT3J0QmluZElucHV0PShhLGIsYyk9PihlLl9PcnRCaW5kSW5wdXQ9WS5lYSkoYSxiLGMpO2UuX09ydEJpbmRPdXRwdXQ9KGEsYixjLGQpPT4oZS5fT3J0QmluZE91dHB1dD1ZLmZhKShhLGIsYyxkKTtlLl9PcnRDbGVhckJvdW5kT3V0cHV0cz1hPT4oZS5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9WS5nYSkoYSk7ZS5fT3J0UmVsZWFzZUJpbmRpbmc9YT0+KGUuX09ydFJlbGVhc2VCaW5kaW5nPVkuaGEpKGEpO2UuX09ydFJ1bldpdGhCaW5kaW5nPShhLGIsYyxkLGcpPT4oZS5fT3J0UnVuV2l0aEJpbmRpbmc9WS5pYSkoYSxiLGMsZCxnKTtlLl9PcnRSdW49KGEsYixjLGQsZyxoLG0scik9PihlLl9PcnRSdW49WS5qYSkoYSxiLGMsZCxnLGgsbSxyKTtcbmUuX09ydEVuZFByb2ZpbGluZz1hPT4oZS5fT3J0RW5kUHJvZmlsaW5nPVkua2EpKGEpO2UuX09ydFRyYWluaW5nTG9hZENoZWNrcG9pbnQ9KGEsYik9PihlLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50PVkubGEpKGEsYik7ZS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludD1hPT4oZS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludD1ZLm1hKShhKTtlLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb249KGEsYixjLGQsZyxoLG0scik9PihlLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb249WS5uYSkoYSxiLGMsZCxnLGgsbSxyKTtlLl9PcnRUcmFpbmluZ0xhenlSZXNldEdyYWQ9YT0+KGUuX09ydFRyYWluaW5nTGF6eVJlc2V0R3JhZD1ZLm9hKShhKTtlLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcD0oYSxiLGMsZCxnLGgpPT4oZS5fT3J0VHJhaW5pbmdSdW5UcmFpblN0ZXA9WS5wYSkoYSxiLGMsZCxnLGgpO1xuZS5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwPShhLGIpPT4oZS5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwPVkucWEpKGEsYik7ZS5fT3J0VHJhaW5pbmdFdmFsU3RlcD0oYSxiLGMsZCxnLGgpPT4oZS5fT3J0VHJhaW5pbmdFdmFsU3RlcD1ZLnJhKShhLGIsYyxkLGcsaCk7ZS5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZT0oYSxiLGMpPT4oZS5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZT1ZLnNhKShhLGIsYyk7ZS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc1RvQnVmZmVyPShhLGIsYyxkKT0+KGUuX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNUb0J1ZmZlcj1ZLnRhKShhLGIsYyxkKTtlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlcj0oYSxiLGMsZCk9PihlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlcj1ZLnVhKShhLGIsYyxkKTtcbmUuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dENvdW50PShhLGIsYyxkKT0+KGUuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dENvdW50PVkudmEpKGEsYixjLGQpO2UuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dE5hbWU9KGEsYixjLGQpPT4oZS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0TmFtZT1ZLndhKShhLGIsYyxkKTtlLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uPWE9PihlLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uPVkueGEpKGEpO3ZhciBKYT0oKT0+KEphPVkueWEpKCksQmE9ZS5fbWFsbG9jPWE9PihCYT1lLl9tYWxsb2M9WS56YSkoYSk7ZS5fZnJlZT1hPT4oZS5fZnJlZT1ZLkFhKShhKTt2YXIgS2E9YT0+KEthPVkuQ2EpKGEpLE5hPSgpPT4oTmE9WS5EYSkoKSxPYT1hPT4oT2E9WS5FYSkoYSksUGE9YT0+KFBhPVkuRmEpKGEpO1xuZnVuY3Rpb24gTWEoKXt2YXIgYT1ZO2E9T2JqZWN0LmFzc2lnbih7fSxhKTt2YXIgYj1kPT4oKT0+ZCgpPj4+MCxjPWQ9Pmc9PmQoZyk+Pj4wO2EueWE9YihhLnlhKTthLnphPWMoYS56YSk7YS5EYT1iKGEuRGEpO2EuRmE9YyhhLkZhKTtyZXR1cm4gYX1lLnN0YWNrQWxsb2M9UGE7ZS5zdGFja1NhdmU9TmE7ZS5zdGFja1Jlc3RvcmU9T2E7ZS5VVEY4VG9TdHJpbmc9UjtlLnN0cmluZ1RvVVRGOD0oYSxiLGMpPT5UKGEsSCxiLGMpO2UubGVuZ3RoQnl0ZXNVVEY4PVM7dmFyIFo7Tz1mdW5jdGlvbiBRYSgpe1p8fFJhKCk7Wnx8KE89UWEpfTtcbmZ1bmN0aW9uIFJhKCl7aWYoISgwPE0pKXtpZihlLnByZVJ1bilmb3IoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5wcmVSdW4mJihlLnByZVJ1bj1bZS5wcmVSdW5dKTtlLnByZVJ1bi5sZW5ndGg7KXt2YXIgYT1lLnByZVJ1bi5zaGlmdCgpO0sudW5zaGlmdChhKX1mb3IoOzA8Sy5sZW5ndGg7KUsuc2hpZnQoKShlKTtpZighKDA8TXx8Wnx8KFo9ITAsZS5jYWxsZWRSdW49ITAsZmEpKSl7Zm9yKDswPEwubGVuZ3RoOylMLnNoaWZ0KCkoZSk7Zm9yKGsoZSk7MDxqYS5sZW5ndGg7KWphLnNoaWZ0KCkoZSl9fX1SYSgpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuKTtcbn0pKCk7XG47XG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc207XG5lbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10pXG4gIGRlZmluZShbXSwgKCkgPT4gb3J0V2FzbSk7XG4iLCAiIiwgIiIsICJleHBvcnQgY29uc3QgY3B1cyA9IHVuZGVmaW5lZDsiLCAiXG52YXIgb3J0V2FzbVRocmVhZGVkID0gKCgpID0+IHtcbiAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSAndW5kZWZpbmVkJykgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTtcbiAgcmV0dXJuIChcbmZ1bmN0aW9uKG1vZHVsZUFyZyA9IHt9KSB7XG5cbmZ1bmN0aW9uIGFhKCl7ZS5idWZmZXIhPWwuYnVmZmVyJiZtKCk7cmV0dXJuIGx9ZnVuY3Rpb24gbigpe2UuYnVmZmVyIT1sLmJ1ZmZlciYmbSgpO3JldHVybiBiYX1mdW5jdGlvbiBwKCl7ZS5idWZmZXIhPWwuYnVmZmVyJiZtKCk7cmV0dXJuIGNhfWZ1bmN0aW9uIHIoKXtlLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gZGF9ZnVuY3Rpb24gZWEoKXtlLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gZmF9dmFyIHY9bW9kdWxlQXJnLGhhLHg7di5yZWFkeT1uZXcgUHJvbWlzZSgoYSxiKT0+e2hhPWE7eD1ifSk7XG52YXIgaWE9T2JqZWN0LmFzc2lnbih7fSx2KSxqYT1cIi4vdGhpcy5wcm9ncmFtXCIsej0oYSxiKT0+e3Rocm93IGI7fSxrYT1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93LEE9XCJmdW5jdGlvblwiPT10eXBlb2YgaW1wb3J0U2NyaXB0cyxCPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSxEPXYuRU5WSVJPTk1FTlRfSVNfUFRIUkVBRHx8ITEsRT1cIlwiO2Z1bmN0aW9uIGxhKGEpe3JldHVybiB2LmxvY2F0ZUZpbGU/di5sb2NhdGVGaWxlKGEsRSk6RSthfXZhciBtYSxHLEg7XG5pZihCKXt2YXIgZnM9cmVxdWlyZShcImZzXCIpLG5hPXJlcXVpcmUoXCJwYXRoXCIpO0U9QT9uYS5kaXJuYW1lKEUpK1wiL1wiOl9fZGlybmFtZStcIi9cIjttYT0oYixjKT0+e2I9SShiKT9uZXcgVVJMKGIpOm5hLm5vcm1hbGl6ZShiKTtyZXR1cm4gZnMucmVhZEZpbGVTeW5jKGIsYz92b2lkIDA6XCJ1dGY4XCIpfTtIPWI9PntiPW1hKGIsITApO2IuYnVmZmVyfHwoYj1uZXcgVWludDhBcnJheShiKSk7cmV0dXJuIGJ9O0c9KGIsYyxkLGc9ITApPT57Yj1JKGIpP25ldyBVUkwoYik6bmEubm9ybWFsaXplKGIpO2ZzLnJlYWRGaWxlKGIsZz92b2lkIDA6XCJ1dGY4XCIsKGgsayk9PntoP2QoaCk6YyhnP2suYnVmZmVyOmspfSl9OyF2LnRoaXNQcm9ncmFtJiYxPHByb2Nlc3MuYXJndi5sZW5ndGgmJihqYT1wcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXFxcXC9nLFwiL1wiKSk7cHJvY2Vzcy5hcmd2LnNsaWNlKDIpO3o9KGIsYyk9Pntwcm9jZXNzLmV4aXRDb2RlPWI7dGhyb3cgYzt9O3YuaW5zcGVjdD0oKT0+XCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwiO1xubGV0IGE7dHJ5e2E9cmVxdWlyZShcIndvcmtlcl90aHJlYWRzXCIpfWNhdGNoKGIpe3Rocm93IGNvbnNvbGUuZXJyb3IoJ1RoZSBcIndvcmtlcl90aHJlYWRzXCIgbW9kdWxlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBub2RlLmpzIGJ1aWxkIC0gcGVyaGFwcyBhIG5ld2VyIHZlcnNpb24gaXMgbmVlZGVkPycpLGI7fWdsb2JhbC5Xb3JrZXI9YS5Xb3JrZXJ9ZWxzZSBpZihrYXx8QSlBP0U9c2VsZi5sb2NhdGlvbi5ocmVmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCYmZG9jdW1lbnQuY3VycmVudFNjcmlwdCYmKEU9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCh0eXBlb2YgX3NjcmlwdERpciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfc2NyaXB0RGlyKSYmKEU9X3NjcmlwdERpciksMCE9PUUuaW5kZXhPZihcImJsb2I6XCIpP0U9RS5zdWJzdHIoMCxFLnJlcGxhY2UoL1s/I10uKi8sXCJcIikubGFzdEluZGV4T2YoXCIvXCIpKzEpOkU9XCJcIixCfHwobWE9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnNlbmQobnVsbCk7XG5yZXR1cm4gYi5yZXNwb25zZVRleHR9LEEmJihIPWE9Pnt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Iuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYi5yZXNwb25zZSl9KSxHPShhLGIsYyk9Pnt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSwhMCk7ZC5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Qub25sb2FkPSgpPT57MjAwPT1kLnN0YXR1c3x8MD09ZC5zdGF0dXMmJmQucmVzcG9uc2U/YihkLnJlc3BvbnNlKTpjKCl9O2Qub25lcnJvcj1jO2Quc2VuZChudWxsKX0pO0ImJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBwZXJmb3JtYW5jZSYmKGdsb2JhbC5wZXJmb3JtYW5jZT1yZXF1aXJlKFwicGVyZl9ob29rc1wiKS5wZXJmb3JtYW5jZSk7dmFyIG9hPWNvbnNvbGUubG9nLmJpbmQoY29uc29sZSkscGE9Y29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuQiYmKG9hPSguLi5hKT0+ZnMud3JpdGVTeW5jKDEsYS5qb2luKFwiIFwiKStcIlxcblwiKSxwYT0oLi4uYSk9PmZzLndyaXRlU3luYygyLGEuam9pbihcIiBcIikrXCJcXG5cIikpO3ZhciBxYT1vYSxKPXBhO09iamVjdC5hc3NpZ24odixpYSk7aWE9bnVsbDtcIm9iamVjdFwiIT10eXBlb2YgV2ViQXNzZW1ibHkmJnJhKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgZSxzYSxLPSExLEwsbCxiYSxjYSxkYSxmYTtmdW5jdGlvbiBtKCl7dmFyIGE9ZS5idWZmZXI7di5IRUFQOD1sPW5ldyBJbnQ4QXJyYXkoYSk7di5IRUFQMTY9bmV3IEludDE2QXJyYXkoYSk7di5IRUFQVTg9YmE9bmV3IFVpbnQ4QXJyYXkoYSk7di5IRUFQVTE2PW5ldyBVaW50MTZBcnJheShhKTt2LkhFQVAzMj1jYT1uZXcgSW50MzJBcnJheShhKTt2LkhFQVBVMzI9ZGE9bmV3IFVpbnQzMkFycmF5KGEpO3YuSEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGEpO3YuSEVBUEY2ND1mYT1uZXcgRmxvYXQ2NEFycmF5KGEpfVxudmFyIHRhPTE2Nzc3MjE2O1xuaWYoRCllPXYud2FzbU1lbW9yeTtlbHNlIGlmKHYud2FzbU1lbW9yeSllPXYud2FzbU1lbW9yeTtlbHNlIGlmKGU9bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDp0YS82NTUzNixtYXhpbXVtOjY1NTM2LHNoYXJlZDohMH0pLCEoZS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpdGhyb3cgSihcInJlcXVlc3RlZCBhIHNoYXJlZCBXZWJBc3NlbWJseS5NZW1vcnkgYnV0IHRoZSByZXR1cm5lZCBidWZmZXIgaXMgbm90IGEgU2hhcmVkQXJyYXlCdWZmZXIsIGluZGljYXRpbmcgdGhhdCB3aGlsZSB0aGUgYnJvd3NlciBoYXMgU2hhcmVkQXJyYXlCdWZmZXIgaXQgZG9lcyBub3QgaGF2ZSBXZWJBc3NlbWJseSB0aHJlYWRzIHN1cHBvcnQgLSB5b3UgbWF5IG5lZWQgdG8gc2V0IGEgZmxhZ1wiKSxCJiZKKFwiKG9uIG5vZGUgeW91IG1heSBuZWVkOiAtLWV4cGVyaW1lbnRhbC13YXNtLXRocmVhZHMgLS1leHBlcmltZW50YWwtd2FzbS1idWxrLW1lbW9yeSBhbmQvb3IgcmVjZW50IHZlcnNpb24pXCIpLEVycm9yKFwiYmFkIG1lbW9yeVwiKTtcbm0oKTt0YT1lLmJ1ZmZlci5ieXRlTGVuZ3RoO3ZhciB1YT1bXSx2YT1bXSx3YT1bXSxNPTAseGE9bnVsbCxOPW51bGw7ZnVuY3Rpb24geWEoKXtNLS07aWYoMD09TSYmKG51bGwhPT14YSYmKGNsZWFySW50ZXJ2YWwoeGEpLHhhPW51bGwpLE4pKXt2YXIgYT1OO049bnVsbDthKCl9fWZ1bmN0aW9uIHJhKGEpe2E9XCJBYm9ydGVkKFwiK2ErXCIpXCI7SihhKTtLPSEwO0w9MTthPW5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYStcIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIik7eChhKTt0aHJvdyBhO312YXIgemE9YT0+YS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKSxJPWE9PmEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIiksTztPPVwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiO3phKE8pfHwoTz1sYShPKSk7XG5mdW5jdGlvbiBBYShhKXtpZihIKXJldHVybiBIKGEpO3Rocm93XCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO31mdW5jdGlvbiBCYShhKXtpZihrYXx8QSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZmV0Y2gmJiFJKGEpKXJldHVybiBmZXRjaChhLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGI9PntpZighYi5vayl0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrYStcIidcIjtyZXR1cm4gYi5hcnJheUJ1ZmZlcigpfSkuY2F0Y2goKCk9PkFhKGEpKTtpZihHKXJldHVybiBuZXcgUHJvbWlzZSgoYixjKT0+e0coYSxkPT5iKG5ldyBVaW50OEFycmF5KGQpKSxjKX0pfXJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5BYShhKSl9XG5mdW5jdGlvbiBDYShhLGIsYyl7cmV0dXJuIEJhKGEpLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCxiKSkudGhlbihkPT5kKS50aGVuKGMsZD0+e0ooYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7ZH1gKTtyYShkKX0pfWZ1bmN0aW9uIERhKGEsYil7dmFyIGM9TztyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ3x8emEoYyl8fEkoYyl8fEJ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGZldGNoP0NhKGMsYSxiKTpmZXRjaChjLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGQ9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGQsYSkudGhlbihiLGZ1bmN0aW9uKGcpe0ooYHdhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiAke2d9YCk7SihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO3JldHVybiBDYShjLGEsYil9KSl9XG52YXIgUCxFYT17OTIwMTQwOihhLGIsYyxkKT0+e2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB2fHwhdi5jYilyZXR1cm4gMTthPVEoYT4+PjApO2Euc3RhcnRzV2l0aChcIi4vXCIpJiYoYT1hLnN1YnN0cmluZygyKSk7YT12LmNiLmdldChhKTtpZighYSlyZXR1cm4gMjtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDtpZihiK2M+YS5ieXRlTGVuZ3RoKXJldHVybiAzO3RyeXtyZXR1cm4gbigpLnNldChhLnN1YmFycmF5KGIsYitjKSxkPj4+MCksMH1jYXRjaHtyZXR1cm4gNH19fTtmdW5jdGlvbiBSKGEpe3RoaXMubmFtZT1cIkV4aXRTdGF0dXNcIjt0aGlzLm1lc3NhZ2U9YFByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoJHthfSlgO3RoaXMuc3RhdHVzPWF9XG52YXIgRmE9YT0+e2EudGVybWluYXRlKCk7YS5vbm1lc3NhZ2U9KCk9Pnt9fSxIYT1hPT57MD09Uy5QYS5sZW5ndGgmJihHYSgpLFMuWWEoUy5QYVswXSkpO3ZhciBiPVMuUGEucG9wKCk7aWYoIWIpcmV0dXJuIDY7Uy5RYS5wdXNoKGIpO1MuTWFbYS5PYV09YjtiLk9hPWEuT2E7dmFyIGM9e2NtZDpcInJ1blwiLHN0YXJ0X3JvdXRpbmU6YS5rYixhcmc6YS5oYixwdGhyZWFkX3B0cjphLk9hfTtCJiZiLnVucmVmKCk7Yi5wb3N0TWVzc2FnZShjLGEucWIpO3JldHVybiAwfSxUPTAsSWE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dm9pZCAwLEphPShhLGIsYyk9PntiPj4+PTA7dmFyIGQ9YitjO2ZvcihjPWI7YVtjXSYmIShjPj1kKTspKytjO2lmKDE2PGMtYiYmYS5idWZmZXImJklhKXJldHVybiBJYS5kZWNvZGUoYS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj9hLnNsaWNlKGIsYyk6YS5zdWJhcnJheShiLGMpKTtcbmZvcihkPVwiXCI7YjxjOyl7dmFyIGc9YVtiKytdO2lmKGcmMTI4KXt2YXIgaD1hW2IrK10mNjM7aWYoMTkyPT0oZyYyMjQpKWQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGcmMzEpPDw2fGgpO2Vsc2V7dmFyIGs9YVtiKytdJjYzO2c9MjI0PT0oZyYyNDApPyhnJjE1KTw8MTJ8aDw8NnxrOihnJjcpPDwxOHxoPDwxMnxrPDw2fGFbYisrXSY2Mzs2NTUzNj5nP2QrPVN0cmluZy5mcm9tQ2hhckNvZGUoZyk6KGctPTY1NTM2LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Zz4+MTAsNTYzMjB8ZyYxMDIzKSl9fWVsc2UgZCs9U3RyaW5nLmZyb21DaGFyQ29kZShnKX1yZXR1cm4gZH0sUT0oYSxiKT0+KGE+Pj49MCk/SmEobigpLGEsYik6XCJcIixMYT1hPT57dmFyIGI9S2EoKTthPWEoKTtVKGIpO3JldHVybiBhfTtcbmZ1bmN0aW9uIFYoYSxiKXt2YXIgYz1hcmd1bWVudHMubGVuZ3RoLTIsZD1hcmd1bWVudHM7cmV0dXJuIExhKCgpPT57Zm9yKHZhciBnPU1hKDgqYyksaD1nPj4+MyxrPTA7azxjO2srKyl7dmFyIHQ9ZFsyK2tdO2VhKClbaCtrPj4+MF09dH1yZXR1cm4gTmEoYSxjLGcsYil9KX1mdW5jdGlvbiBPYShhKXtpZihEKXJldHVybiBWKDAsMSxhKTtMPWE7MDxUfHwoUy5sYigpLHYub25FeGl0Py4oYSksSz0hMCk7eihhLG5ldyBSKGEpKX12YXIgUWE9YT0+e0w9YTtpZihEKXRocm93IFBhKGEpLFwidW53aW5kXCI7T2EoYSl9O2Z1bmN0aW9uIFJhKCl7Zm9yKHZhciBhPXYubnVtVGhyZWFkczthLS07KUdhKCk7dWEudW5zaGlmdCgoKT0+e00rKztTYSgoKT0+eWEoKSl9KX1mdW5jdGlvbiBHYSgpe3ZhciBhPWxhKFwib3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIpO2E9bmV3IFdvcmtlcihhKTtTLlBhLnB1c2goYSl9XG5mdW5jdGlvbiBTYShhKXtEP2EoKTpQcm9taXNlLmFsbChTLlBhLm1hcChTLllhKSkudGhlbihhKX1cbnZhciBTPXtQYTpbXSxRYTpbXSxiYjpbXSxNYTp7fSxXYSgpe0Q/KFMucmVjZWl2ZU9iamVjdFRyYW5zZmVyPVMuamIsUy50aHJlYWRJbml0VExTPVMuYWIsUy5zZXRFeGl0U3RhdHVzPVMuJGEpOlJhKCl9LCRhOmE9Pkw9YSx0YjpbXCIkdGVybWluYXRlV29ya2VyXCJdLGxiOigpPT57Zm9yKHZhciBhIG9mIFMuUWEpRmEoYSk7Zm9yKGEgb2YgUy5QYSlGYShhKTtTLlBhPVtdO1MuUWE9W107Uy5NYT1bXX0sWmE6YT0+e3ZhciBiPWEuT2E7ZGVsZXRlIFMuTWFbYl07Uy5QYS5wdXNoKGEpO1MuUWEuc3BsaWNlKFMuUWEuaW5kZXhPZihhKSwxKTthLk9hPTA7VGEoYil9LGpiKCl7fSxhYigpe1MuYmIuZm9yRWFjaChhPT5hKCkpfSxZYTphPT5uZXcgUHJvbWlzZShiPT57YS5vbm1lc3NhZ2U9aD0+e2g9aC5kYXRhO3ZhciBrPWguY21kO2lmKGgudGFyZ2V0VGhyZWFkJiZoLnRhcmdldFRocmVhZCE9VygpKXt2YXIgdD1TLk1hW2gudGFyZ2V0VGhyZWFkXTt0P3QucG9zdE1lc3NhZ2UoaCxoLnRyYW5zZmVyTGlzdCk6XG5KKGBJbnRlcm5hbCBlcnJvciEgV29ya2VyIHNlbnQgYSBtZXNzYWdlIFwiJHtrfVwiIHRvIHRhcmdldCBwdGhyZWFkICR7aC50YXJnZXRUaHJlYWR9LCBidXQgdGhhdCB0aHJlYWQgbm8gbG9uZ2VyIGV4aXN0cyFgKX1lbHNlIGlmKFwiY2hlY2tNYWlsYm94XCI9PT1rKVgoKTtlbHNlIGlmKFwic3Bhd25UaHJlYWRcIj09PWspSGEoaCk7ZWxzZSBpZihcImNsZWFudXBUaHJlYWRcIj09PWspUy5aYShTLk1hW2gudGhyZWFkXSk7ZWxzZSBpZihcImtpbGxUaHJlYWRcIj09PWspaD1oLnRocmVhZCxrPVMuTWFbaF0sZGVsZXRlIFMuTWFbaF0sRmEoayksVGEoaCksUy5RYS5zcGxpY2UoUy5RYS5pbmRleE9mKGspLDEpLGsuT2E9MDtlbHNlIGlmKFwiY2FuY2VsVGhyZWFkXCI9PT1rKVMuTWFbaC50aHJlYWRdLnBvc3RNZXNzYWdlKHtjbWQ6XCJjYW5jZWxcIn0pO2Vsc2UgaWYoXCJsb2FkZWRcIj09PWspYS5sb2FkZWQ9ITAsQiYmIWEuT2EmJmEudW5yZWYoKSxiKGEpO2Vsc2UgaWYoXCJhbGVydFwiPT09aylhbGVydChgVGhyZWFkICR7aC50aHJlYWRJZH06ICR7aC50ZXh0fWApO1xuZWxzZSBpZihcInNldGltbWVkaWF0ZVwiPT09aC50YXJnZXQpYS5wb3N0TWVzc2FnZShoKTtlbHNlIGlmKFwiY2FsbEhhbmRsZXJcIj09PWspdltoLmhhbmRsZXJdKC4uLmguYXJncyk7ZWxzZSBrJiZKKGB3b3JrZXIgc2VudCBhbiB1bmtub3duIGNvbW1hbmQgJHtrfWApfTthLm9uZXJyb3I9aD0+e0ooYCR7XCJ3b3JrZXIgc2VudCBhbiBlcnJvciFcIn0gJHtoLmZpbGVuYW1lfToke2gubGluZW5vfTogJHtoLm1lc3NhZ2V9YCk7dGhyb3cgaDt9O0ImJihhLm9uKFwibWVzc2FnZVwiLGg9PmEub25tZXNzYWdlKHtkYXRhOmh9KSksYS5vbihcImVycm9yXCIsaD0+YS5vbmVycm9yKGgpKSk7dmFyIGM9W10sZD1bXCJvbkV4aXRcIl0sZztmb3IoZyBvZiBkKXYuaGFzT3duUHJvcGVydHkoZykmJmMucHVzaChnKTthLnBvc3RNZXNzYWdlKHtjbWQ6XCJsb2FkXCIsaGFuZGxlcnM6Yyx1cmxPckJsb2I6di5tYWluU2NyaXB0VXJsT3JCbG9ifHxfc2NyaXB0RGlyLHdhc21NZW1vcnk6ZSx3YXNtTW9kdWxlOnNhfSl9KX07XG52LlBUaHJlYWQ9Uzt2YXIgVWE9YT0+e2Zvcig7MDxhLmxlbmd0aDspYS5zaGlmdCgpKHYpfTt2LmVzdGFibGlzaFN0YWNrU3BhY2U9KCk9Pnt2YXIgYT1XKCksYj1yKClbYSs1Mj4+PjI+Pj4wXTthPXIoKVthKzU2Pj4+Mj4+PjBdO1ZhKGIsYi1hKTtVKGIpfTtmdW5jdGlvbiBQYShhKXtpZihEKXJldHVybiBWKDEsMCxhKTtRYShhKX12YXIgV2E9W10sWGE7di5pbnZva2VFbnRyeVBvaW50PShhLGIpPT57dmFyIGM9V2FbYV07Y3x8KGE+PVdhLmxlbmd0aCYmKFdhLmxlbmd0aD1hKzEpLFdhW2FdPWM9WGEuZ2V0KGEpKTthPWMoYik7MDxUP1MuJGEoYSk6WWEoYSl9O1xuZnVuY3Rpb24gWmEoYSl7dGhpcy5WYT1hLTI0O3RoaXMuZ2I9ZnVuY3Rpb24oYil7cigpW3RoaXMuVmErND4+PjI+Pj4wXT1ifTt0aGlzLmZiPWZ1bmN0aW9uKGIpe3IoKVt0aGlzLlZhKzg+Pj4yPj4+MF09Yn07dGhpcy5XYT1mdW5jdGlvbihiLGMpe3RoaXMuZWIoKTt0aGlzLmdiKGIpO3RoaXMuZmIoYyl9O3RoaXMuZWI9ZnVuY3Rpb24oKXtyKClbdGhpcy5WYSsxNj4+PjI+Pj4wXT0wfX12YXIgJGE9MCxhYj0wO2Z1bmN0aW9uIGJiKGEsYixjLGQpe3JldHVybiBEP1YoMiwxLGEsYixjLGQpOmNiKGEsYixjLGQpfVxuZnVuY3Rpb24gY2IoYSxiLGMsZCl7YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcilyZXR1cm4gSihcIkN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTaGFyZWRBcnJheUJ1ZmZlciwgcHRocmVhZHMgYXJlIG5vdCBhdmFpbGFibGUhXCIpLDY7dmFyIGc9W107aWYoRCYmMD09PWcubGVuZ3RoKXJldHVybiBiYihhLGIsYyxkKTthPXtrYjpjLE9hOmEsaGI6ZCxxYjpnfTtyZXR1cm4gRD8oYS5zYj1cInNwYXduVGhyZWFkXCIscG9zdE1lc3NhZ2UoYSxnKSwwKTpIYShhKX1mdW5jdGlvbiBkYihhLGIsYyl7cmV0dXJuIEQ/VigzLDEsYSxiLGMpOjB9ZnVuY3Rpb24gZWIoYSxiKXtpZihEKXJldHVybiBWKDQsMSxhLGIpfVxudmFyIGZiPWE9Pntmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBkPWEuY2hhckNvZGVBdChjKTsxMjc+PWQ/YisrOjIwNDc+PWQ/Yis9Mjo1NTI5Njw9ZCYmNTczNDM+PWQ/KGIrPTQsKytjKTpiKz0zfXJldHVybiBifSxnYj0oYSxiLGMsZCk9PntjPj4+PTA7aWYoISgwPGQpKXJldHVybiAwO3ZhciBnPWM7ZD1jK2QtMTtmb3IodmFyIGg9MDtoPGEubGVuZ3RoOysraCl7dmFyIGs9YS5jaGFyQ29kZUF0KGgpO2lmKDU1Mjk2PD1rJiY1NzM0Mz49ayl7dmFyIHQ9YS5jaGFyQ29kZUF0KCsraCk7az02NTUzNisoKGsmMTAyMyk8PDEwKXx0JjEwMjN9aWYoMTI3Pj1rKXtpZihjPj1kKWJyZWFrO2JbYysrPj4+MF09a31lbHNle2lmKDIwNDc+PWspe2lmKGMrMT49ZClicmVhaztiW2MrKz4+PjBdPTE5MnxrPj42fWVsc2V7aWYoNjU1MzU+PWspe2lmKGMrMj49ZClicmVhaztiW2MrKz4+PjBdPTIyNHxrPj4xMn1lbHNle2lmKGMrMz49ZClicmVhaztiW2MrKz4+PjBdPTI0MHxrPj5cbjE4O2JbYysrPj4+MF09MTI4fGs+PjEyJjYzfWJbYysrPj4+MF09MTI4fGs+PjYmNjN9YltjKys+Pj4wXT0xMjh8ayY2M319YltjPj4+MF09MDtyZXR1cm4gYy1nfSxoYj0oYSxiLGMpPT5nYihhLG4oKSxiLGMpO2Z1bmN0aW9uIGliKGEsYil7aWYoRClyZXR1cm4gVig1LDEsYSxiKX1mdW5jdGlvbiBqYihhLGIsYyl7aWYoRClyZXR1cm4gVig2LDEsYSxiLGMpfWZ1bmN0aW9uIGtiKGEsYixjKXtyZXR1cm4gRD9WKDcsMSxhLGIsYyk6MH1mdW5jdGlvbiBsYihhLGIpe2lmKEQpcmV0dXJuIFYoOCwxLGEsYil9ZnVuY3Rpb24gbWIoYSxiLGMpe2lmKEQpcmV0dXJuIFYoOSwxLGEsYixjKX1mdW5jdGlvbiBuYihhLGIsYyxkKXtpZihEKXJldHVybiBWKDEwLDEsYSxiLGMsZCl9ZnVuY3Rpb24gb2IoYSxiLGMsZCl7aWYoRClyZXR1cm4gVigxMSwxLGEsYixjLGQpfWZ1bmN0aW9uIHBiKGEsYixjLGQpe2lmKEQpcmV0dXJuIFYoMTIsMSxhLGIsYyxkKX1cbmZ1bmN0aW9uIHFiKGEpe2lmKEQpcmV0dXJuIFYoMTMsMSxhKX1mdW5jdGlvbiByYihhLGIpe2lmKEQpcmV0dXJuIFYoMTQsMSxhLGIpfWZ1bmN0aW9uIHNiKGEsYixjKXtpZihEKXJldHVybiBWKDE1LDEsYSxiLGMpfWZ1bmN0aW9uIHRiKGEpe2E+Pj49MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQXRvbWljcy5yYiYmKEF0b21pY3MucmIocCgpLGE+Pj4yLGEpLnZhbHVlLnRoZW4oWCksYSs9MTI4LEF0b21pY3Muc3RvcmUocCgpLGE+Pj4yLDEpKX12Ll9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdD10Yjt2YXIgWD0oKT0+e3ZhciBhPVcoKTtpZihhJiYodGIoYSksYT11YiwhSykpdHJ5e2lmKGEoKSwhKDA8VCkpdHJ5e0Q/WWEoTCk6UWEoTCl9Y2F0Y2goYil7YiBpbnN0YW5jZW9mIFJ8fFwidW53aW5kXCI9PWJ8fHooMSxiKX19Y2F0Y2goYil7YiBpbnN0YW5jZW9mIFJ8fFwidW53aW5kXCI9PWJ8fHooMSxiKX19O3YuY2hlY2tNYWlsYm94PVg7XG52YXIgdmI9W10sWT1hPT4wPT09YSU0JiYoMCE9PWElMTAwfHwwPT09YSU0MDApLHdiPVswLDMxLDYwLDkxLDEyMSwxNTIsMTgyLDIxMywyNDQsMjc0LDMwNSwzMzVdLHhiPVswLDMxLDU5LDkwLDEyMCwxNTEsMTgxLDIxMiwyNDMsMjczLDMwNCwzMzRdO2Z1bmN0aW9uIHliKGEsYixjLGQsZyxoLGssdCl7cmV0dXJuIEQ/VigxNiwxLGEsYixjLGQsZyxoLGssdCk6LTUyfWZ1bmN0aW9uIHpiKGEsYixjLGQsZyxoLGspe2lmKEQpcmV0dXJuIFYoMTcsMSxhLGIsYyxkLGcsaCxrKX1cbnZhciBCYj1hPT57dmFyIGI9ZmIoYSkrMSxjPUFiKGIpO2MmJmhiKGEsYyxiKTtyZXR1cm4gY30sQ2I9W10sRGI9e30sRmI9KCk9PntpZighRWIpe3ZhciBhPXtVU0VSOlwid2ViX3VzZXJcIixMT0dOQU1FOlwid2ViX3VzZXJcIixQQVRIOlwiL1wiLFBXRDpcIi9cIixIT01FOlwiL2hvbWUvd2ViX3VzZXJcIixMQU5HOihcIm9iamVjdFwiPT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdfHxcIkNcIikucmVwbGFjZShcIi1cIixcIl9cIikrXCIuVVRGLThcIixfOmphfHxcIi4vdGhpcy5wcm9ncmFtXCJ9LGI7Zm9yKGIgaW4gRGIpdm9pZCAwPT09RGJbYl0/ZGVsZXRlIGFbYl06YVtiXT1EYltiXTt2YXIgYz1bXTtmb3IoYiBpbiBhKWMucHVzaChgJHtifT0ke2FbYl19YCk7RWI9Y31yZXR1cm4gRWJ9LEViO1xuZnVuY3Rpb24gR2IoYSxiKXtpZihEKXJldHVybiBWKDE4LDEsYSxiKTthPj4+PTA7Yj4+Pj0wO3ZhciBjPTA7RmIoKS5mb3JFYWNoKChkLGcpPT57dmFyIGg9YitjO2c9cigpW2ErNCpnPj4+Mj4+PjBdPWg7Zm9yKGg9MDtoPGQubGVuZ3RoOysraClhYSgpW2crKz4+PjA+Pj4wXT1kLmNoYXJDb2RlQXQoaCk7YWEoKVtnPj4+MD4+PjBdPTA7Yys9ZC5sZW5ndGgrMX0pO3JldHVybiAwfWZ1bmN0aW9uIEtiKGEsYil7aWYoRClyZXR1cm4gVigxOSwxLGEsYik7YT4+Pj0wO2I+Pj49MDt2YXIgYz1GYigpO3IoKVthPj4+Mj4+PjBdPWMubGVuZ3RoO3ZhciBkPTA7Yy5mb3JFYWNoKGc9PmQrPWcubGVuZ3RoKzEpO3IoKVtiPj4+Mj4+PjBdPWQ7cmV0dXJuIDB9ZnVuY3Rpb24gTGIoYSl7cmV0dXJuIEQ/VigyMCwxLGEpOjUyfWZ1bmN0aW9uIE1iKGEsYixjLGQpe3JldHVybiBEP1YoMjEsMSxhLGIsYyxkKTo1Mn1cbmZ1bmN0aW9uIE5iKGEsYixjLGQsZyl7cmV0dXJuIEQ/VigyMiwxLGEsYixjLGQsZyk6NzB9dmFyIE9iPVtudWxsLFtdLFtdXTtmdW5jdGlvbiBQYihhLGIsYyxkKXtpZihEKXJldHVybiBWKDIzLDEsYSxiLGMsZCk7Yj4+Pj0wO2M+Pj49MDtkPj4+PTA7Zm9yKHZhciBnPTAsaD0wO2g8YztoKyspe3ZhciBrPXIoKVtiPj4+Mj4+PjBdLHQ9cigpW2IrND4+PjI+Pj4wXTtiKz04O2Zvcih2YXIgQz0wO0M8dDtDKyspe3ZhciB3PW4oKVtrK0M+Pj4wXSx5PU9iW2FdOzA9PT13fHwxMD09PXc/KCgxPT09YT9xYTpKKShKYSh5LDApKSx5Lmxlbmd0aD0wKTp5LnB1c2godyl9Zys9dH1yKClbZD4+PjI+Pj4wXT1nO3JldHVybiAwfXZhciBRYj1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLFJiPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07XG5mdW5jdGlvbiBTYihhKXt2YXIgYj1BcnJheShmYihhKSsxKTtnYihhLGIsMCxiLmxlbmd0aCk7cmV0dXJuIGJ9dmFyIFRiPShhLGIpPT57YWEoKS5zZXQoYSxiPj4+MCl9O1xuZnVuY3Rpb24gVWIoYSxiLGMsZCl7ZnVuY3Rpb24gZyhmLHEsdSl7Zm9yKGY9XCJudW1iZXJcIj09dHlwZW9mIGY/Zi50b1N0cmluZygpOmZ8fFwiXCI7Zi5sZW5ndGg8cTspZj11WzBdK2Y7cmV0dXJuIGZ9ZnVuY3Rpb24gaChmLHEpe3JldHVybiBnKGYscSxcIjBcIil9ZnVuY3Rpb24gayhmLHEpe2Z1bmN0aW9uIHUoSGIpe3JldHVybiAwPkhiPy0xOjA8SGI/MTowfXZhciBGOzA9PT0oRj11KGYuZ2V0RnVsbFllYXIoKS1xLmdldEZ1bGxZZWFyKCkpKSYmMD09PShGPXUoZi5nZXRNb250aCgpLXEuZ2V0TW9udGgoKSkpJiYoRj11KGYuZ2V0RGF0ZSgpLXEuZ2V0RGF0ZSgpKSk7cmV0dXJuIEZ9ZnVuY3Rpb24gdChmKXtzd2l0Y2goZi5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwyOSk7Y2FzZSAxOnJldHVybiBmO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMSk7Y2FzZSA1OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIEMoZil7dmFyIHE9Zi5SYTtmb3IoZj1uZXcgRGF0ZSgobmV3IERhdGUoZi5TYSsxOTAwLDAsMSkpLmdldFRpbWUoKSk7MDxxOyl7dmFyIHU9Zi5nZXRNb250aCgpLEY9KFkoZi5nZXRGdWxsWWVhcigpKT9RYjpSYilbdV07aWYocT5GLWYuZ2V0RGF0ZSgpKXEtPUYtZi5nZXREYXRlKCkrMSxmLnNldERhdGUoMSksMTE+dT9mLnNldE1vbnRoKHUrMSk6KGYuc2V0TW9udGgoMCksZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkrMSkpO2Vsc2V7Zi5zZXREYXRlKGYuZ2V0RGF0ZSgpK3EpO2JyZWFrfX11PW5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSsxLDAsNCk7cT10KG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSxcbjAsNCkpO3U9dCh1KTtyZXR1cm4gMD49ayhxLGYpPzA+PWsodSxmKT9mLmdldEZ1bGxZZWFyKCkrMTpmLmdldEZ1bGxZZWFyKCk6Zi5nZXRGdWxsWWVhcigpLTF9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO3ZhciB3PXIoKVtkKzQwPj4+Mj4+PjBdO2Q9e29iOnAoKVtkPj4+Mj4+PjBdLG5iOnAoKVtkKzQ+Pj4yPj4+MF0sVGE6cCgpW2QrOD4+PjI+Pj4wXSxYYTpwKClbZCsxMj4+PjI+Pj4wXSxVYTpwKClbZCsxNj4+PjI+Pj4wXSxTYTpwKClbZCsyMD4+PjI+Pj4wXSxOYTpwKClbZCsyND4+PjI+Pj4wXSxSYTpwKClbZCsyOD4+PjI+Pj4wXSx1YjpwKClbZCszMj4+PjI+Pj4wXSxtYjpwKClbZCszNj4+PjI+Pj4wXSxwYjp3P1Eodyk6XCJcIn07Yz1RKGMpO3c9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcblwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgeSBpbiB3KWM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAoeSxcImdcIiksd1t5XSk7dmFyIEliPVwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksSmI9XCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO3c9e1wiJWFcIjpmPT5JYltmLk5hXS5zdWJzdHJpbmcoMCwzKSxcblwiJUFcIjpmPT5JYltmLk5hXSxcIiViXCI6Zj0+SmJbZi5VYV0uc3Vic3RyaW5nKDAsMyksXCIlQlwiOmY9PkpiW2YuVWFdLFwiJUNcIjpmPT5oKChmLlNhKzE5MDApLzEwMHwwLDIpLFwiJWRcIjpmPT5oKGYuWGEsMiksXCIlZVwiOmY9PmcoZi5YYSwyLFwiIFwiKSxcIiVnXCI6Zj0+QyhmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVHXCI6Zj0+QyhmKSxcIiVIXCI6Zj0+aChmLlRhLDIpLFwiJUlcIjpmPT57Zj1mLlRhOzA9PWY/Zj0xMjoxMjxmJiYoZi09MTIpO3JldHVybiBoKGYsMil9LFwiJWpcIjpmPT57Zm9yKHZhciBxPTAsdT0wO3U8PWYuVWEtMTtxKz0oWShmLlNhKzE5MDApP1FiOlJiKVt1KytdKTtyZXR1cm4gaChmLlhhK3EsMyl9LFwiJW1cIjpmPT5oKGYuVWErMSwyKSxcIiVNXCI6Zj0+aChmLm5iLDIpLFwiJW5cIjooKT0+XCJcXG5cIixcIiVwXCI6Zj0+MDw9Zi5UYSYmMTI+Zi5UYT9cIkFNXCI6XCJQTVwiLFwiJVNcIjpmPT5oKGYub2IsMiksXCIldFwiOigpPT5cIlxcdFwiLFwiJXVcIjpmPT5mLk5hfHw3LFwiJVVcIjpmPT5oKE1hdGguZmxvb3IoKGYuUmErXG43LWYuTmEpLzcpLDIpLFwiJVZcIjpmPT57dmFyIHE9TWF0aC5mbG9vcigoZi5SYSs3LShmLk5hKzYpJTcpLzcpOzI+PShmLk5hKzM3MS1mLlJhLTIpJTcmJnErKztpZihxKTUzPT1xJiYodT0oZi5OYSszNzEtZi5SYSklNyw0PT11fHwzPT11JiZZKGYuU2EpfHwocT0xKSk7ZWxzZXtxPTUyO3ZhciB1PShmLk5hKzctZi5SYS0xKSU3Oyg0PT11fHw1PT11JiZZKGYuU2ElNDAwLTEpKSYmcSsrfXJldHVybiBoKHEsMil9LFwiJXdcIjpmPT5mLk5hLFwiJVdcIjpmPT5oKE1hdGguZmxvb3IoKGYuUmErNy0oZi5OYSs2KSU3KS83KSwyKSxcIiV5XCI6Zj0+KGYuU2ErMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlWVwiOmY9PmYuU2ErMTkwMCxcIiV6XCI6Zj0+e2Y9Zi5tYjt2YXIgcT0wPD1mO2Y9TWF0aC5hYnMoZikvNjA7cmV0dXJuKHE/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIisoZi82MCoxMDArZiU2MCkpLnNsaWNlKC00KX0sXCIlWlwiOmY9PmYucGIsXCIlJVwiOigpPT5cIiVcIn07Yz1jLnJlcGxhY2UoLyUlL2csXG5cIlxceDAwXFx4MDBcIik7Zm9yKHkgaW4gdyljLmluY2x1ZGVzKHkpJiYoYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh5LFwiZ1wiKSx3W3ldKGQpKSk7Yz1jLnJlcGxhY2UoL1xcMFxcMC9nLFwiJVwiKTt5PVNiKGMpO2lmKHkubGVuZ3RoPmIpcmV0dXJuIDA7VGIoeSxhKTtyZXR1cm4geS5sZW5ndGgtMX1TLldhKCk7XG52YXIgVmI9W09hLFBhLGJiLGRiLGViLGliLGpiLGtiLGxiLG1iLG5iLG9iLHBiLHFiLHJiLHNiLHliLHpiLEdiLEtiLExiLE1iLE5iLFBiXSxaYj17YjpmdW5jdGlvbihhLGIsYyl7YT4+Pj0wOyhuZXcgWmEoYSkpLldhKGI+Pj4wLGM+Pj4wKTskYT1hO2FiKys7dGhyb3cgJGE7fSxMOmZ1bmN0aW9uKGEpe1diKGE+Pj4wLCFBLDEsIWthLDEzMTA3MiwhMSk7Uy5hYigpfSxqOmZ1bmN0aW9uKGEpe2E+Pj49MDtEP3Bvc3RNZXNzYWdlKHtjbWQ6XCJjbGVhbnVwVGhyZWFkXCIsdGhyZWFkOmF9KTpTLlphKFMuTWFbYV0pfSxIOmNiLGg6ZGIsUzplYixEOmliLEY6amIsVDprYixROmxiLEo6bWIsUDpuYixuOm9iLEU6cGIsQjpxYixSOnJiLEM6c2IscDooKT0+MSx6OmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2E9PWI+Pj4wP3NldFRpbWVvdXQoKCk9PlgoKSk6RD9wb3N0TWVzc2FnZSh7dGFyZ2V0VGhyZWFkOmEsY21kOlwiY2hlY2tNYWlsYm94XCJ9KTooYT1TLk1hW2FdKSYmYS5wb3N0TWVzc2FnZSh7Y21kOlwiY2hlY2tNYWlsYm94XCJ9KX0sXG5JOmZ1bmN0aW9uKGEsYixjLGQpe2I+Pj49MDt2Yi5sZW5ndGg9YztkPWQ+Pj4wPj4+Mztmb3IodmFyIGc9MDtnPGM7ZysrKXZiW2ddPWVhKClbZCtnPj4+MF07YT0wPmE/RWFbLWEtMV06VmJbYV07Uy5pYj1iO2I9YS5hcHBseShudWxsLHZiKTtTLmliPTA7cmV0dXJuIGJ9LEs6dGIsbzpmdW5jdGlvbihhKXtCJiZTLk1hW2E+Pj4wXS5yZWYoKX0sczpmdW5jdGlvbihhLGIsYyl7YT1iKzIwOTcxNTI+Pj4wPDQxOTQzMDUtISFhPyhhPj4+MCkrNDI5NDk2NzI5NipiOk5hTjtjPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7cCgpW2M+Pj4yPj4+MF09YS5nZXRVVENTZWNvbmRzKCk7cCgpW2MrND4+PjI+Pj4wXT1hLmdldFVUQ01pbnV0ZXMoKTtwKClbYys4Pj4+Mj4+PjBdPWEuZ2V0VVRDSG91cnMoKTtwKClbYysxMj4+PjI+Pj4wXT1hLmdldFVUQ0RhdGUoKTtwKClbYysxNj4+PjI+Pj4wXT1hLmdldFVUQ01vbnRoKCk7cCgpW2MrMjA+Pj4yPj4+MF09YS5nZXRVVENGdWxsWWVhcigpLTE5MDA7XG5wKClbYysyND4+PjI+Pj4wXT1hLmdldFVUQ0RheSgpO2E9KGEuZ2V0VGltZSgpLURhdGUuVVRDKGEuZ2V0VVRDRnVsbFllYXIoKSwwLDEsMCwwLDAsMCkpLzg2NEU1fDA7cCgpW2MrMjg+Pj4yPj4+MF09YX0sdDpmdW5jdGlvbihhLGIsYyl7YT1iKzIwOTcxNTI+Pj4wPDQxOTQzMDUtISFhPyhhPj4+MCkrNDI5NDk2NzI5NipiOk5hTjtjPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7cCgpW2M+Pj4yPj4+MF09YS5nZXRTZWNvbmRzKCk7cCgpW2MrND4+PjI+Pj4wXT1hLmdldE1pbnV0ZXMoKTtwKClbYys4Pj4+Mj4+PjBdPWEuZ2V0SG91cnMoKTtwKClbYysxMj4+PjI+Pj4wXT1hLmdldERhdGUoKTtwKClbYysxNj4+PjI+Pj4wXT1hLmdldE1vbnRoKCk7cCgpW2MrMjA+Pj4yPj4+MF09YS5nZXRGdWxsWWVhcigpLTE5MDA7cCgpW2MrMjQ+Pj4yPj4+MF09YS5nZXREYXkoKTtiPShZKGEuZ2V0RnVsbFllYXIoKSk/d2I6eGIpW2EuZ2V0TW9udGgoKV0rYS5nZXREYXRlKCktMXwwO3AoKVtjKzI4Pj4+XG4yPj4+MF09YjtwKClbYyszNj4+PjI+Pj4wXT0tKDYwKmEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7Yj0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGQ9KG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpO2E9KGIhPWQmJmEuZ2V0VGltZXpvbmVPZmZzZXQoKT09TWF0aC5taW4oZCxiKSl8MDtwKClbYyszMj4+PjI+Pj4wXT1hfSx1OmZ1bmN0aW9uKGEpe2E+Pj49MDt2YXIgYj1uZXcgRGF0ZShwKClbYSsyMD4+PjI+Pj4wXSsxOTAwLHAoKVthKzE2Pj4+Mj4+PjBdLHAoKVthKzEyPj4+Mj4+PjBdLHAoKVthKzg+Pj4yPj4+MF0scCgpW2ErND4+PjI+Pj4wXSxwKClbYT4+PjI+Pj4wXSwwKSxjPXAoKVthKzMyPj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGg9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSxcbjAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCksaz1NYXRoLm1pbihoLGcpOzA+Yz9wKClbYSszMj4+PjI+Pj4wXT1OdW1iZXIoZyE9aCYmaz09ZCk6MDxjIT0oaz09ZCkmJihnPU1hdGgubWF4KGgsZyksYi5zZXRUaW1lKGIuZ2V0VGltZSgpKzZFNCooKDA8Yz9rOmcpLWQpKSk7cCgpW2ErMjQ+Pj4yPj4+MF09Yi5nZXREYXkoKTtjPShZKGIuZ2V0RnVsbFllYXIoKSk/d2I6eGIpW2IuZ2V0TW9udGgoKV0rYi5nZXREYXRlKCktMXwwO3AoKVthKzI4Pj4+Mj4+PjBdPWM7cCgpW2E+Pj4yPj4+MF09Yi5nZXRTZWNvbmRzKCk7cCgpW2ErND4+PjI+Pj4wXT1iLmdldE1pbnV0ZXMoKTtwKClbYSs4Pj4+Mj4+PjBdPWIuZ2V0SG91cnMoKTtwKClbYSsxMj4+PjI+Pj4wXT1iLmdldERhdGUoKTtwKClbYSsxNj4+PjI+Pj4wXT1iLmdldE1vbnRoKCk7cCgpW2ErMjA+Pj4yPj4+MF09Yi5nZXRZZWFyKCk7YT1iLmdldFRpbWUoKTtpc05hTihhKT8ocCgpW1hiKCk+Pj4yPj4+MF09NjEsYT0tMSk6YS89MUUzO1xucmV0dXJuIFliKChQPWEsMTw9K01hdGguYWJzKFApPzA8UD8rTWF0aC5mbG9vcihQLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKFAtKyh+flA+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApKSxhPj4+MH0scTp5YixyOnpiLHk6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQodyl7cmV0dXJuKHc9dy50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKT93WzFdOlwiR01UXCJ9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7dmFyIGc9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpLGg9bmV3IERhdGUoZywwLDEpLGs9bmV3IERhdGUoZyw2LDEpO2c9aC5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciB0PWsuZ2V0VGltZXpvbmVPZmZzZXQoKSxDPU1hdGgubWF4KGcsdCk7cigpW2E+Pj4yPj4+MF09NjAqQztwKClbYj4+PjI+Pj4wXT1OdW1iZXIoZyE9dCk7YT1kKGgpO2I9ZChrKTthPUJiKGEpO2I9QmIoYik7dDxnPyhyKClbYz4+PjI+Pj4wXT1hLHIoKVtjKzQ+Pj4yPj4+MF09Yik6XG4ocigpW2M+Pj4yPj4+MF09YixyKClbYys0Pj4+Mj4+PjBdPWEpfSxjOigpPT57cmEoXCJcIil9LE86ZnVuY3Rpb24oYSxiLGMpe2E+Pj49MDtiPj4+PTA7Yz4+Pj0wO0NiLmxlbmd0aD0wO2Zvcih2YXIgZDtkPW4oKVtiKys+Pj4wXTspe3ZhciBnPTEwNSE9ZDtnJj0xMTIhPWQ7Yys9ZyYmYyU4PzQ6MDtDYi5wdXNoKDExMj09ZD9yKClbYz4+PjI+Pj4wXToxMDU9PWQ/cCgpW2M+Pj4yPj4+MF06ZWEoKVtjPj4+Mz4+PjBdKTtjKz1nPzg6NH1yZXR1cm4gRWFbYV0uYXBwbHkobnVsbCxDYil9LGs6KCk9Pnt9LGk6KCk9PkRhdGUubm93KCksVTooKT0+e1QrPTE7dGhyb3dcInVud2luZFwiO30sQTpmdW5jdGlvbigpe3JldHVybiA0Mjk0OTAxNzYwfSxlOigpPT5wZXJmb3JtYW5jZS50aW1lT3JpZ2luK3BlcmZvcm1hbmNlLm5vdygpLGY6KCk9PkI/cmVxdWlyZShcIm9zXCIpLmNwdXMoKS5sZW5ndGg6bmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3kseDpmdW5jdGlvbihhKXthPj4+PTA7dmFyIGI9XG5uKCkubGVuZ3RoO2lmKGE8PWJ8fDQyOTQ5MDE3NjA8YSlyZXR1cm4hMTtmb3IodmFyIGM9MTs0Pj1jO2MqPTIpe3ZhciBkPWIqKDErLjIvYyk7ZD1NYXRoLm1pbihkLGErMTAwNjYzMjk2KTt2YXIgZz1NYXRoO2Q9TWF0aC5tYXgoYSxkKTthOntnPShnLm1pbi5jYWxsKGcsNDI5NDkwMTc2MCxkKyg2NTUzNi1kJTY1NTM2KSU2NTUzNiktZS5idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNSkvNjU1MzY7dHJ5e2UuZ3JvdyhnKTttKCk7dmFyIGg9MTticmVhayBhfWNhdGNoKGspe31oPXZvaWQgMH1pZihoKXJldHVybiEwfXJldHVybiExfSxNOkdiLE46S2IsRzpRYSxnOkxiLG06TWIsdjpOYixsOlBiLGE6ZXx8di53YXNtTWVtb3J5LHc6VWIsZDpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gVWIoYT4+PjAsYj4+PjAsYz4+PjAsZD4+PjApfX0sWj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYyxkKXtaPWMuZXhwb3J0cztaPSRiKCk7Uy5iYi5wdXNoKFouemEpO1hhPVouQWE7dmEudW5zaGlmdChaLlYpO1xuc2E9ZDt5YSgpO3JldHVybiBafXZhciBiPXthOlpifTtNKys7aWYodi5pbnN0YW50aWF0ZVdhc20pdHJ5e3JldHVybiB2Lmluc3RhbnRpYXRlV2FzbShiLGEpfWNhdGNoKGMpe0ooYE1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6ICR7Y31gKSx4KGMpfURhKGIsZnVuY3Rpb24oYyl7YShjLmluc3RhbmNlLGMubW9kdWxlKX0pLmNhdGNoKHgpO3JldHVybnt9fSgpO3YuX09ydEluaXQ9KGEsYik9Pih2Ll9PcnRJbml0PVouVykoYSxiKTt2Ll9PcnRHZXRMYXN0RXJyb3I9KGEsYik9Pih2Ll9PcnRHZXRMYXN0RXJyb3I9Wi5YKShhLGIpO3YuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxkLGcsaCxrLHQsQyx3KT0+KHYuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPVouWSkoYSxiLGMsZCxnLGgsayx0LEMsdyk7XG52Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj0oYSxiKT0+KHYuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyPVouWikoYSxiKTt2Ll9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9KGEsYixjKT0+KHYuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZT1aLl8pKGEsYixjKTt2Ll9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9KGEsYixjKT0+KHYuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeT1aLiQpKGEsYixjKTt2Ll9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9YT0+KHYuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucz1aLmFhKShhKTt2Ll9PcnRDcmVhdGVTZXNzaW9uPShhLGIsYyk9Pih2Ll9PcnRDcmVhdGVTZXNzaW9uPVouYmEpKGEsYixjKTt2Ll9PcnRSZWxlYXNlU2Vzc2lvbj1hPT4odi5fT3J0UmVsZWFzZVNlc3Npb249Wi5jYSkoYSk7di5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD0oYSxiLGMpPT4odi5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD1aLmRhKShhLGIsYyk7XG52Ll9PcnRHZXRJbnB1dE5hbWU9KGEsYik9Pih2Ll9PcnRHZXRJbnB1dE5hbWU9Wi5lYSkoYSxiKTt2Ll9PcnRHZXRPdXRwdXROYW1lPShhLGIpPT4odi5fT3J0R2V0T3V0cHV0TmFtZT1aLmZhKShhLGIpO3YuX09ydEZyZWU9YT0+KHYuX09ydEZyZWU9Wi5nYSkoYSk7di5fT3J0Q3JlYXRlVGVuc29yPShhLGIsYyxkLGcsaCk9Pih2Ll9PcnRDcmVhdGVUZW5zb3I9Wi5oYSkoYSxiLGMsZCxnLGgpO3YuX09ydEdldFRlbnNvckRhdGE9KGEsYixjLGQsZyk9Pih2Ll9PcnRHZXRUZW5zb3JEYXRhPVouaWEpKGEsYixjLGQsZyk7di5fT3J0UmVsZWFzZVRlbnNvcj1hPT4odi5fT3J0UmVsZWFzZVRlbnNvcj1aLmphKShhKTt2Ll9PcnRDcmVhdGVSdW5PcHRpb25zPShhLGIsYyxkKT0+KHYuX09ydENyZWF0ZVJ1bk9wdGlvbnM9Wi5rYSkoYSxiLGMsZCk7di5fT3J0QWRkUnVuQ29uZmlnRW50cnk9KGEsYixjKT0+KHYuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5PVoubGEpKGEsYixjKTtcbnYuX09ydFJlbGVhc2VSdW5PcHRpb25zPWE9Pih2Ll9PcnRSZWxlYXNlUnVuT3B0aW9ucz1aLm1hKShhKTt2Ll9PcnRDcmVhdGVCaW5kaW5nPWE9Pih2Ll9PcnRDcmVhdGVCaW5kaW5nPVoubmEpKGEpO3YuX09ydEJpbmRJbnB1dD0oYSxiLGMpPT4odi5fT3J0QmluZElucHV0PVoub2EpKGEsYixjKTt2Ll9PcnRCaW5kT3V0cHV0PShhLGIsYyxkKT0+KHYuX09ydEJpbmRPdXRwdXQ9Wi5wYSkoYSxiLGMsZCk7di5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9YT0+KHYuX09ydENsZWFyQm91bmRPdXRwdXRzPVoucWEpKGEpO3YuX09ydFJlbGVhc2VCaW5kaW5nPWE9Pih2Ll9PcnRSZWxlYXNlQmluZGluZz1aLnJhKShhKTt2Ll9PcnRSdW5XaXRoQmluZGluZz0oYSxiLGMsZCxnKT0+KHYuX09ydFJ1bldpdGhCaW5kaW5nPVouc2EpKGEsYixjLGQsZyk7di5fT3J0UnVuPShhLGIsYyxkLGcsaCxrLHQpPT4odi5fT3J0UnVuPVoudGEpKGEsYixjLGQsZyxoLGssdCk7XG52Ll9PcnRFbmRQcm9maWxpbmc9YT0+KHYuX09ydEVuZFByb2ZpbGluZz1aLnVhKShhKTt2YXIgWGI9KCk9PihYYj1aLnZhKSgpLFc9di5fcHRocmVhZF9zZWxmPSgpPT4oVz12Ll9wdGhyZWFkX3NlbGY9Wi53YSkoKSxBYj12Ll9tYWxsb2M9YT0+KEFiPXYuX21hbGxvYz1aLnhhKShhKTt2Ll9mcmVlPWE9Pih2Ll9mcmVlPVoueWEpKGEpO3YuX19lbXNjcmlwdGVuX3Rsc19pbml0PSgpPT4odi5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQ9Wi56YSkoKTt2YXIgV2I9di5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQ9KGEsYixjLGQsZyxoKT0+KFdiPXYuX19lbXNjcmlwdGVuX3RocmVhZF9pbml0PVouQmEpKGEsYixjLGQsZyxoKTt2Ll9fZW1zY3JpcHRlbl90aHJlYWRfY3Jhc2hlZD0oKT0+KHYuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkPVouQ2EpKCk7XG52YXIgTmE9KGEsYixjLGQpPT4oTmE9Wi5EYSkoYSxiLGMsZCksVGE9YT0+KFRhPVouRWEpKGEpLFlhPXYuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0PWE9PihZYT12Ll9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdD1aLkZhKShhKSx1Yj0oKT0+KHViPVouR2EpKCksWWI9YT0+KFliPVouSGEpKGEpLFZhPShhLGIpPT4oVmE9Wi5JYSkoYSxiKSxLYT0oKT0+KEthPVouSmEpKCksVT1hPT4oVT1aLkthKShhKSxNYT1hPT4oTWE9Wi5MYSkoYSk7ZnVuY3Rpb24gJGIoKXt2YXIgYT1aO2E9T2JqZWN0LmFzc2lnbih7fSxhKTt2YXIgYj1kPT4oKT0+ZCgpPj4+MCxjPWQ9Pmc9PmQoZyk+Pj4wO2EudmE9YihhLnZhKTthLndhPWIoYS53YSk7YS54YT1jKGEueGEpO2EuZW1zY3JpcHRlbl9tYWluX3J1bnRpbWVfdGhyZWFkX2lkPWIoYS5lbXNjcmlwdGVuX21haW5fcnVudGltZV90aHJlYWRfaWQpO2EuSmE9YihhLkphKTthLkxhPWMoYS5MYSk7cmV0dXJuIGF9di53YXNtTWVtb3J5PWU7XG52LnN0YWNrQWxsb2M9TWE7di5zdGFja1NhdmU9S2E7di5zdGFja1Jlc3RvcmU9VTt2LmtlZXBSdW50aW1lQWxpdmU9KCk9PjA8VDt2LlVURjhUb1N0cmluZz1RO3Yuc3RyaW5nVG9VVEY4PWhiO3YubGVuZ3RoQnl0ZXNVVEY4PWZiO3YuRXhpdFN0YXR1cz1SO3YuUFRocmVhZD1TO3ZhciBhYztOPWZ1bmN0aW9uIGJjKCl7YWN8fGNjKCk7YWN8fChOPWJjKX07ZnVuY3Rpb24gY2MoKXtpZighKDA8TSkpaWYoRCloYSh2KSxEfHxVYSh2YSksc3RhcnRXb3JrZXIodik7ZWxzZXtpZih2LnByZVJ1bilmb3IoXCJmdW5jdGlvblwiPT10eXBlb2Ygdi5wcmVSdW4mJih2LnByZVJ1bj1bdi5wcmVSdW5dKTt2LnByZVJ1bi5sZW5ndGg7KXVhLnVuc2hpZnQodi5wcmVSdW4uc2hpZnQoKSk7VWEodWEpOzA8TXx8YWN8fChhYz0hMCx2LmNhbGxlZFJ1bj0hMCxLfHwoRHx8VWEodmEpLGhhKHYpLER8fFVhKHdhKSkpfX1jYygpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuKTtcbn0pKCk7XG47XG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc21UaHJlYWRlZDtcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSlcbiAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtVGhyZWFkZWQpO1xuIiwgIlwidXNlIHN0cmljdFwiO3ZhciBNb2R1bGU9e307dmFyIEVOVklST05NRU5UX0lTX05PREU9dHlwZW9mIHByb2Nlc3M9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlPT1cInN0cmluZ1wiO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBub2RlV29ya2VyVGhyZWFkcz1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIik7dmFyIHBhcmVudFBvcnQ9bm9kZVdvcmtlclRocmVhZHMucGFyZW50UG9ydDtwYXJlbnRQb3J0Lm9uKFwibWVzc2FnZVwiLGRhdGE9Pm9ubWVzc2FnZSh7ZGF0YTpkYXRhfSkpO3ZhciBmcz1yZXF1aXJlKFwiZnNcIik7dmFyIHZtPXJlcXVpcmUoXCJ2bVwiKTtPYmplY3QuYXNzaWduKGdsb2JhbCx7c2VsZjpnbG9iYWwscmVxdWlyZTpyZXF1aXJlLE1vZHVsZTpNb2R1bGUsbG9jYXRpb246e2hyZWY6X19maWxlbmFtZX0sV29ya2VyOm5vZGVXb3JrZXJUaHJlYWRzLldvcmtlcixpbXBvcnRTY3JpcHRzOmY9PnZtLnJ1bkluVGhpc0NvbnRleHQoZnMucmVhZEZpbGVTeW5jKGYsXCJ1dGY4XCIpLHtmaWxlbmFtZTpmfSkscG9zdE1lc3NhZ2U6bXNnPT5wYXJlbnRQb3J0LnBvc3RNZXNzYWdlKG1zZykscGVyZm9ybWFuY2U6Z2xvYmFsLnBlcmZvcm1hbmNlfHx7bm93OkRhdGUubm93fX0pfXZhciBpbml0aWFsaXplZEpTPWZhbHNlO2Z1bmN0aW9uIHRocmVhZFByaW50RXJyKCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXtmcy53cml0ZVN5bmMoMix0ZXh0K1wiXFxuXCIpO3JldHVybn1jb25zb2xlLmVycm9yKHRleHQpfWZ1bmN0aW9uIHRocmVhZEFsZXJ0KCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtwb3N0TWVzc2FnZSh7Y21kOlwiYWxlcnRcIix0ZXh0OnRleHQsdGhyZWFkSWQ6TW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXSgpfSl9dmFyIGVycj10aHJlYWRQcmludEVycjtzZWxmLmFsZXJ0PXRocmVhZEFsZXJ0O01vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXT0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpPT57dmFyIG1vZHVsZT1Nb2R1bGVbXCJ3YXNtTW9kdWxlXCJdO01vZHVsZVtcIndhc21Nb2R1bGVcIl09bnVsbDt2YXIgaW5zdGFuY2U9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZHVsZSxpbmZvKTtyZXR1cm4gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKX07c2VsZi5vbnVuaGFuZGxlZHJlamVjdGlvbj1lPT57dGhyb3cgZS5yZWFzb258fGV9O2Z1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZSl7dHJ5e2lmKGUuZGF0YS5jbWQ9PT1cImxvYWRcIil7bGV0IG1lc3NhZ2VRdWV1ZT1bXTtzZWxmLm9ubWVzc2FnZT1lPT5tZXNzYWdlUXVldWUucHVzaChlKTtzZWxmLnN0YXJ0V29ya2VyPWluc3RhbmNlPT57TW9kdWxlPWluc3RhbmNlO3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwibG9hZGVkXCJ9KTtmb3IobGV0IG1zZyBvZiBtZXNzYWdlUXVldWUpe2hhbmRsZU1lc3NhZ2UobXNnKX1zZWxmLm9ubWVzc2FnZT1oYW5kbGVNZXNzYWdlfTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPWUuZGF0YS53YXNtTW9kdWxlO2Zvcihjb25zdCBoYW5kbGVyIG9mIGUuZGF0YS5oYW5kbGVycyl7TW9kdWxlW2hhbmRsZXJdPSguLi5hcmdzKT0+e3Bvc3RNZXNzYWdlKHtjbWQ6XCJjYWxsSGFuZGxlclwiLGhhbmRsZXI6aGFuZGxlcixhcmdzOmFyZ3N9KX19TW9kdWxlW1wid2FzbU1lbW9yeVwiXT1lLmRhdGEud2FzbU1lbW9yeTtNb2R1bGVbXCJidWZmZXJcIl09TW9kdWxlW1wid2FzbU1lbW9yeVwiXS5idWZmZXI7TW9kdWxlW1wiRU5WSVJPTk1FTlRfSVNfUFRIUkVBRFwiXT10cnVlO2lmKHR5cGVvZiBlLmRhdGEudXJsT3JCbG9iPT1cInN0cmluZ1wiKXtpbXBvcnRTY3JpcHRzKGUuZGF0YS51cmxPckJsb2IpfWVsc2V7dmFyIG9iamVjdFVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKGUuZGF0YS51cmxPckJsb2IpO2ltcG9ydFNjcmlwdHMob2JqZWN0VXJsKTtVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCl9b3J0V2FzbVRocmVhZGVkKE1vZHVsZSl9ZWxzZSBpZihlLmRhdGEuY21kPT09XCJydW5cIil7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0XCJdKGUuZGF0YS5wdGhyZWFkX3B0ciwvKmlzX21haW49Ki8wLC8qaXNfcnVudGltZT0qLzAsLypjYW5fYmxvY2s9Ki8xKTtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyKTtNb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdKCk7TW9kdWxlW1wiUFRocmVhZFwiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnRocmVhZEluaXRUTFMoKTtpZighaW5pdGlhbGl6ZWRKUyl7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtNb2R1bGVbXCJpbnZva2VFbnRyeVBvaW50XCJdKGUuZGF0YS5zdGFydF9yb3V0aW5lLGUuZGF0YS5hcmcpfWNhdGNoKGV4KXtpZihleCE9XCJ1bndpbmRcIil7dGhyb3cgZXh9fX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNhbmNlbFwiKXtpZihNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCkpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdFwiXSgtMSl9fWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe31lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJjaGVja01haWxib3hcIl0oKX19ZWxzZSBpZihlLmRhdGEuY21kKXtlcnIoYHdvcmtlci5qcyByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgJHtlLmRhdGEuY21kfWApO2VycihlLmRhdGEpfX1jYXRjaChleCl7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdPy4oKTt0aHJvdyBleH19c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHtFbnZ9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7T3J0V2FzbU1vZHVsZX0gZnJvbSAnLi9iaW5kaW5nL29ydC13YXNtJztcbmltcG9ydCB7T3J0V2FzbVRocmVhZGVkTW9kdWxlfSBmcm9tICcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzICovXG5sZXQgb3J0V2FzbUZhY3Rvcnk6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+O1xuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICBvcnRXYXNtRmFjdG9yeSA9IHJlcXVpcmUoJy4vYmluZGluZy9vcnQtdHJhaW5pbmctd2FzbS1zaW1kLmpzJyk7XG59IGVsc2Uge1xuICBvcnRXYXNtRmFjdG9yeSA9XG4gICAgICBCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVID8gcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLmpzJykgOiByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC5qc2VwLmpzJyk7XG59XG5cbmNvbnN0IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQ6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+ID0gIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCA/XG4gICAgKEJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgPyByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanMnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC10aHJlYWRlZC5qc2VwLmpzJykpIDpcbiAgICBvcnRXYXNtRmFjdG9yeTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuXG5sZXQgd2FzbTogT3J0V2FzbU1vZHVsZXx1bmRlZmluZWQ7XG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmxldCBpbml0aWFsaXppbmcgPSBmYWxzZTtcbmxldCBhYm9ydGVkID0gZmFsc2U7XG5cbmNvbnN0IGlzTXVsdGlUaHJlYWRTdXBwb3J0ZWQgPSAobnVtVGhyZWFkczogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gIC8vIFdlYkFzc2VtYmx5IHRocmVhZHMgYXJlIHNldCB0byAxIChzaW5nbGUgdGhyZWFkKS5cbiAgaWYgKG51bVRocmVhZHMgPT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBJZiAnU2hhcmVkQXJyYXlCdWZmZXInIGlzIG5vdCBhdmFpbGFibGUsIFdlYkFzc2VtYmx5IHRocmVhZHMgd2lsbCBub3Qgd29yay5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmICFzZWxmLmNyb3NzT3JpZ2luSXNvbGF0ZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ2Vudi53YXNtLm51bVRocmVhZHMgaXMgc2V0IHRvICcgKyBudW1UaHJlYWRzICtcbiAgICAgICAgICAnLCBidXQgdGhpcyB3aWxsIG5vdCB3b3JrIHVubGVzcyB5b3UgZW5hYmxlIGNyb3NzT3JpZ2luSXNvbGF0ZWQgbW9kZS4gJyArXG4gICAgICAgICAgJ1NlZSBodHRwczovL3dlYi5kZXYvY3Jvc3Mtb3JpZ2luLWlzb2xhdGlvbi1ndWlkZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gb25ueHJ1bnRpbWUtd2ViIGRvZXMgbm90IHN1cHBvcnQgbXVsdGktdGhyZWFkcyBpbiBOb2RlLmpzLlxuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdlbnYud2FzbS5udW1UaHJlYWRzIGlzIHNldCB0byAnICsgbnVtVGhyZWFkcyArXG4gICAgICAgICcsIGhvd2V2ZXIsIGN1cnJlbnRseSBvbm54cnVudGltZS13ZWIgZG9lcyBub3Qgc3VwcG9ydCBtdWx0aS10aHJlYWRzIGluIE5vZGUuanMuICcgK1xuICAgICAgICAnUGxlYXNlIGNvbnNpZGVyIHVzaW5nIG9ubnhydW50aW1lLW5vZGUgZm9yIHBlcmZvcm1hbmNlIGNyaXRpY2FsIHNjZW5hcmlvcy4nKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gVGVzdCBmb3IgdHJhbnNmZXJhYmlsaXR5IG9mIFNBQnMgKGZvciBicm93c2Vycy4gbmVlZGVkIGZvciBGaXJlZm94KVxuICAgIC8vIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZm9ydW0vIyFtc2cvbW96aWxsYS5kZXYucGxhdGZvcm0vSUhrQlpsSEVUcEEvZHdzTU5jaFdFUUFKXG4gICAgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG5ldyBNZXNzYWdlQ2hhbm5lbCgpLnBvcnQxLnBvc3RNZXNzYWdlKG5ldyBTaGFyZWRBcnJheUJ1ZmZlcigxKSk7XG4gICAgfVxuXG4gICAgLy8gVGVzdCBmb3IgV2ViQXNzZW1ibHkgdGhyZWFkcyBjYXBhYmlsaXR5IChmb3IgYm90aCBicm93c2VycyBhbmQgTm9kZS5qcylcbiAgICAvLyBUaGlzIHR5cGVkIGFycmF5IGlzIGEgV2ViQXNzZW1ibHkgcHJvZ3JhbSBjb250YWluaW5nIHRocmVhZGVkIGluc3RydWN0aW9ucy5cbiAgICByZXR1cm4gV2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMCwgOTcsIDExNSwgMTA5LCAxLCAwLCAgMCwgIDAsIDEsIDQsIDEsICA5NiwgMCwgICAwLCAgMywgMiwgMSwgIDAsIDUsXG4gICAgICA0LCAxLCAgMywgICAxLCAgIDEsIDEwLCAxMSwgMSwgOSwgMCwgNjUsIDAsICAyNTQsIDE2LCAyLCAwLCAyNiwgMTFcbiAgICBdKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IGlzU2ltZFN1cHBvcnRlZCA9ICgpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBUZXN0IGZvciBXZWJBc3NlbWJseSBTSU1EIGNhcGFiaWxpdHkgKGZvciBib3RoIGJyb3dzZXJzIGFuZCBOb2RlLmpzKVxuICAgIC8vIFRoaXMgdHlwZWQgYXJyYXkgaXMgYSBXZWJBc3NlbWJseSBwcm9ncmFtIGNvbnRhaW5pbmcgU0lNRCBpbnN0cnVjdGlvbnMuXG5cbiAgICAvLyBUaGUgYmluYXJ5IGRhdGEgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIGZvbGxvd2luZyBjb2RlIGJ5IHdhdDJ3YXNtOlxuICAgIC8vXG4gICAgLy8gKG1vZHVsZVxuICAgIC8vICAgKHR5cGUgJHQwIChmdW5jKSlcbiAgICAvLyAgIChmdW5jICRmMCAodHlwZSAkdDApXG4gICAgLy8gICAgIChkcm9wXG4gICAgLy8gICAgICAgKGkzMng0LmRvdF9pMTZ4OF9zXG4gICAgLy8gICAgICAgICAoaTh4MTYuc3BsYXRcbiAgICAvLyAgICAgICAgICAgKGkzMi5jb25zdCAwKSlcbiAgICAvLyAgICAgICAgICh2MTI4LmNvbnN0IGkzMng0IDB4MDAwMDAwMDAgMHgwMDAwMDAwMCAweDAwMDAwMDAwIDB4MDAwMDAwMDApKSkpKVxuXG4gICAgcmV0dXJuIFdlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDAsICAgOTcsIDExNSwgMTA5LCAxLCAwLCAwLCAwLCAxLCA0LCAxLCA5NiwgMCwgMCwgMywgMiwgMSwgMCwgMTAsIDMwLCAxLCAgIDI4LCAgMCwgNjUsIDAsXG4gICAgICAyNTMsIDE1LCAyNTMsIDEyLCAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgIDAsIDAsIDAsIDAsIDAsIDAsIDAsICAwLCAgMjUzLCAxODYsIDEsIDI2LCAxMVxuICAgIF0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuY29uc3QgZ2V0V2FzbUZpbGVOYW1lID0gKHVzZVNpbWQ6IGJvb2xlYW4sIHVzZVRocmVhZHM6IGJvb2xlYW4pID0+IHtcbiAgaWYgKHVzZVNpbWQpIHtcbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICAgICAgcmV0dXJuICdvcnQtdHJhaW5pbmctd2FzbS1zaW1kLndhc20nO1xuICAgIH1cbiAgICByZXR1cm4gdXNlVGhyZWFkcyA/ICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc20nIDogJ29ydC13YXNtLXNpbWQud2FzbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVzZVRocmVhZHMgPyAnb3J0LXdhc20tdGhyZWFkZWQud2FzbScgOiAnb3J0LXdhc20ud2FzbSc7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplV2ViQXNzZW1ibHkgPSBhc3luYyhmbGFnczogRW52LldlYkFzc2VtYmx5RmxhZ3MpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ211bHRpcGxlIGNhbGxzIHRvIFxcJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpXFwnIGRldGVjdGVkLicpO1xuICB9XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcmV2aW91cyBjYWxsIHRvIFxcJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpXFwnIGZhaWxlZC4nKTtcbiAgfVxuXG4gIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgLy8gd2FzbSBmbGFncyBhcmUgYWxyZWFkeSBpbml0aWFsaXplZFxuICBjb25zdCB0aW1lb3V0ID0gZmxhZ3MuaW5pdFRpbWVvdXQhO1xuICBjb25zdCBudW1UaHJlYWRzID0gZmxhZ3MubnVtVGhyZWFkcyE7XG4gIGNvbnN0IHNpbWQgPSBmbGFncy5zaW1kITtcblxuICBjb25zdCB1c2VUaHJlYWRzID0gaXNNdWx0aVRocmVhZFN1cHBvcnRlZChudW1UaHJlYWRzKTtcbiAgY29uc3QgdXNlU2ltZCA9IHNpbWQgJiYgaXNTaW1kU3VwcG9ydGVkKCk7XG5cbiAgY29uc3Qgd2FzbVBhdGhzID0gZmxhZ3Mud2FzbVBhdGhzO1xuICBjb25zdCB3YXNtUHJlZml4T3ZlcnJpZGUgPSB0eXBlb2Ygd2FzbVBhdGhzID09PSAnc3RyaW5nJyA/IHdhc21QYXRocyA6IHVuZGVmaW5lZDtcbiAgY29uc3Qgd2FzbUZpbGVOYW1lID0gZ2V0V2FzbUZpbGVOYW1lKHVzZVNpbWQsIHVzZVRocmVhZHMpO1xuICBjb25zdCB3YXNtUGF0aE92ZXJyaWRlID0gdHlwZW9mIHdhc21QYXRocyA9PT0gJ29iamVjdCcgPyB3YXNtUGF0aHNbd2FzbUZpbGVOYW1lXSA6IHVuZGVmaW5lZDtcblxuICBsZXQgaXNUaW1lb3V0ID0gZmFsc2U7XG5cbiAgY29uc3QgdGFza3M6IEFycmF5PFByb21pc2U8dm9pZD4+ID0gW107XG5cbiAgLy8gcHJvbWlzZSBmb3IgdGltZW91dFxuICBpZiAodGltZW91dCA+IDApIHtcbiAgICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaXNUaW1lb3V0ID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gcHJvbWlzZSBmb3IgbW9kdWxlIGluaXRpYWxpemF0aW9uXG4gIHRhc2tzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGZhY3RvcnkgPSB1c2VUaHJlYWRzID8gb3J0V2FzbUZhY3RvcnlUaHJlYWRlZCA6IG9ydFdhc21GYWN0b3J5O1xuICAgIGNvbnN0IGNvbmZpZzogUGFydGlhbDxPcnRXYXNtTW9kdWxlPiA9IHtcbiAgICAgIGxvY2F0ZUZpbGU6IChmaWxlTmFtZTogc3RyaW5nLCBzY3JpcHREaXJlY3Rvcnk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCAmJiB1c2VUaHJlYWRzICYmIGZpbGVOYW1lLmVuZHNXaXRoKCcud29ya2VyLmpzJykgJiZcbiAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgLy8gVGhpcyByZXF1aXJlKCkgZnVuY3Rpb24gaXMgaGFuZGxlZCBieSBlc2J1aWxkIHBsdWdpbiB0byBsb2FkIGZpbGUgY29udGVudCBhcyBzdHJpbmcuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzJylcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAge3R5cGU6ICd0ZXh0L2phdmFzY3JpcHQnfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbGVOYW1lLmVuZHNXaXRoKCcud2FzbScpKSB7XG4gICAgICAgICAgaWYgKHdhc21QYXRoT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB3YXNtUGF0aE92ZXJyaWRlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHByZWZpeCA9IHdhc21QcmVmaXhPdmVycmlkZSA/PyBzY3JpcHREaXJlY3Rvcnk7XG5cbiAgICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUpIHtcbiAgICAgICAgICAgIGlmICh3YXNtRmlsZU5hbWUgPT09ICdvcnQtd2FzbS1zaW1kLndhc20nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnb3J0LXdhc20tc2ltZC5qc2VwLndhc20nO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3YXNtRmlsZU5hbWUgPT09ICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc20nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnb3J0LXdhc20tc2ltZC10aHJlYWRlZC5qc2VwLndhc20nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBwcmVmaXggKyB3YXNtRmlsZU5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2NyaXB0RGlyZWN0b3J5ICsgZmlsZU5hbWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fVEhSRUFEICYmIHVzZVRocmVhZHMpIHtcbiAgICAgIGNvbmZpZy5udW1UaHJlYWRzID0gbnVtVGhyZWFkcztcbiAgICAgIGlmICh0eXBlb2YgQmxvYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uZmlnLm1haW5TY3JpcHRVcmxPckJsb2IgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnb3J0LXdhc20tdGhyZWFkZWQuanMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdFNvdXJjZUNvZGUgPSBgdmFyIG9ydFdhc21UaHJlYWRlZD0ke2ZhY3RvcnkudG9TdHJpbmcoKX07YDtcbiAgICAgICAgY29uZmlnLm1haW5TY3JpcHRVcmxPckJsb2IgPSBuZXcgQmxvYihbc2NyaXB0U291cmNlQ29kZV0sIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZhY3RvcnkoY29uZmlnKS50aGVuKFxuICAgICAgICAvLyB3YXNtIG1vZHVsZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHlcbiAgICAgICAgbW9kdWxlID0+IHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgd2FzbSA9IG1vZHVsZTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHdhc20gbW9kdWxlIGZhaWxlZCB0byBpbml0aWFsaXplXG4gICAgICAgICh3aGF0KSA9PiB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgcmVqZWN0KHdoYXQpO1xuICAgICAgICB9KTtcbiAgfSkpO1xuXG4gIGF3YWl0IFByb21pc2UucmFjZSh0YXNrcyk7XG5cbiAgaWYgKGlzVGltZW91dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgV2ViQXNzZW1ibHkgYmFja2VuZCBpbml0aWFsaXppbmcgZmFpbGVkIGR1ZSB0byB0aW1lb3V0OiAke3RpbWVvdXR9bXNgKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldEluc3RhbmNlID0gKCk6IE9ydFdhc21Nb2R1bGUgPT4ge1xuICBpZiAoaW5pdGlhbGl6ZWQgJiYgd2FzbSkge1xuICAgIHJldHVybiB3YXNtO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdXZWJBc3NlbWJseSBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0LicpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpc3Bvc2UgPSAoKTogdm9pZCA9PiB7XG4gIGlmIChpbml0aWFsaXplZCAmJiAhaW5pdGlhbGl6aW5nICYmICFhYm9ydGVkKSB7XG4gICAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgICh3YXNtIGFzIE9ydFdhc21UaHJlYWRlZE1vZHVsZSkuUFRocmVhZD8udGVybWluYXRlQWxsVGhyZWFkcygpO1xuICAgIHdhc20gPSB1bmRlZmluZWQ7XG5cbiAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIGFib3J0ZWQgPSB0cnVlO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge2dldEluc3RhbmNlfSBmcm9tICcuL3dhc20tZmFjdG9yeSc7XG5cbmV4cG9ydCBjb25zdCBhbGxvY1dhc21TdHJpbmcgPSAoZGF0YTogc3RyaW5nLCBhbGxvY3M6IG51bWJlcltdKTogbnVtYmVyID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgY29uc3QgZGF0YUxlbmd0aCA9IHdhc20ubGVuZ3RoQnl0ZXNVVEY4KGRhdGEpICsgMTtcbiAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uX21hbGxvYyhkYXRhTGVuZ3RoKTtcbiAgd2FzbS5zdHJpbmdUb1VURjgoZGF0YSwgZGF0YU9mZnNldCwgZGF0YUxlbmd0aCk7XG4gIGFsbG9jcy5wdXNoKGRhdGFPZmZzZXQpO1xuXG4gIHJldHVybiBkYXRhT2Zmc2V0O1xufTtcblxuaW50ZXJmYWNlIEV4dHJhT3B0aW9uc0hhbmRsZXIge1xuICAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IGl0ZXJhdGVFeHRyYU9wdGlvbnMgPVxuICAgIChvcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgcHJlZml4OiBzdHJpbmcsIHNlZW46IFdlYWtTZXQ8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+LFxuICAgICBoYW5kbGVyOiBFeHRyYU9wdGlvbnNIYW5kbGVyKTogdm9pZCA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ29iamVjdCcgJiYgb3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc2Vlbi5oYXMob3B0aW9ucykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBpbiBvcHRpb25zJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2Vlbi5hZGQob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmVudHJpZXMob3B0aW9ucykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAocHJlZml4KSA/IHByZWZpeCArIGtleSA6IGtleTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKHZhbHVlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBuYW1lICsgJy4nLCBzZWVuLCBoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBoYW5kbGVyKG5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgaGFuZGxlcihuYW1lLCAodmFsdWUpID8gJzEnIDogJzAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGhhbmRsZSBleHRyYSBjb25maWcgdHlwZTogJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbi8qKlxuICogY2hlY2sgd2ViIGFzc2VtYmx5IEFQSSdzIGxhc3QgZXJyb3IgYW5kIHRocm93IGVycm9yIGlmIGFueSBlcnJvciBvY2N1cnJlZC5cbiAqIEBwYXJhbSBtZXNzYWdlIGEgbWVzc2FnZSB1c2VkIHdoZW4gYW4gZXJyb3Igb2NjdXJyZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja0xhc3RFcnJvciA9IChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICB0cnkge1xuICAgIGNvbnN0IHBhcmFtc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICB3YXNtLl9PcnRHZXRMYXN0RXJyb3IocGFyYW1zT2Zmc2V0LCBwYXJhbXNPZmZzZXQgKyA0KTtcbiAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLkhFQVAzMltwYXJhbXNPZmZzZXQgLyA0XTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VQb2ludGVyID0gd2FzbS5IRUFQVTMyW3BhcmFtc09mZnNldCAvIDQgKyAxXTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VQb2ludGVyID8gd2FzbS5VVEY4VG9TdHJpbmcoZXJyb3JNZXNzYWdlUG9pbnRlcikgOiAnJztcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWVzc2FnZX0gRVJST1JfQ09ERTogJHtlcnJvckNvZGV9LCBFUlJPUl9NRVNTQUdFOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yLCBpdGVyYXRlRXh0cmFPcHRpb25zfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuXG5leHBvcnQgY29uc3Qgc2V0UnVuT3B0aW9ucyA9IChvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBbbnVtYmVyLCBudW1iZXJbXV0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICBjb25zdCBhbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgcnVuT3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB0cnkge1xuICAgIGlmIChvcHRpb25zPy5sb2dTZXZlcml0eUxldmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA9IDI7ICAvLyBEZWZhdWx0IHRvIHdhcm5pbmdcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwpIHx8XG4gICAgICAgIG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA8IDAgfHwgb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnM/LmxvZ1ZlcmJvc2l0eUxldmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPSAwOyAgLy8gRGVmYXVsdCB0byAwXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbH1gKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucz8udGVybWluYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bk9wdGlvbnMudGVybWluYXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHRhZ0RhdGFPZmZzZXQgPSAwO1xuICAgIGlmIChvcHRpb25zPy50YWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFnRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhvcHRpb25zLnRhZywgYWxsb2NzKTtcbiAgICB9XG5cbiAgICBydW5PcHRpb25zSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlUnVuT3B0aW9ucyhcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsISwgcnVuT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCEsICEhcnVuT3B0aW9ucy50ZXJtaW5hdGUhLCB0YWdEYXRhT2Zmc2V0KTtcbiAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIHJ1biBvcHRpb25zLicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy5leHRyYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKG9wdGlvbnMuZXh0cmEsICcnLCBuZXcgV2Vha1NldDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcblxuICAgICAgICBpZiAod2FzbS5fT3J0QWRkUnVuQ29uZmlnRW50cnkocnVuT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBydW4gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtydW5PcHRpb25zSGFuZGxlLCBhbGxvY3NdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBhbGxvY3MuZm9yRWFjaChhbGxvYyA9PiB3YXNtLl9mcmVlKGFsbG9jKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge2dldEluc3RhbmNlfSBmcm9tICcuL3dhc20tZmFjdG9yeSc7XG5pbXBvcnQge2FsbG9jV2FzbVN0cmluZywgY2hlY2tMYXN0RXJyb3IsIGl0ZXJhdGVFeHRyYU9wdGlvbnN9IGZyb20gJy4vd2FzbS11dGlscyc7XG5cbmNvbnN0IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbCA9IChncmFwaE9wdGltaXphdGlvbkxldmVsOiBzdHJpbmd8dW5rbm93bik6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCkge1xuICAgIGNhc2UgJ2Rpc2FibGVkJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2Jhc2ljJzpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgJ2V4dGVuZGVkJzpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgJ2FsbCc6XG4gICAgICByZXR1cm4gOTk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZ3JhcGggb3B0aW1pemF0aW9uIGxldmVsOiAke2dyYXBoT3B0aW1pemF0aW9uTGV2ZWx9YCk7XG4gIH1cbn07XG5cbmNvbnN0IGdldEV4ZWN1dGlvbk1vZGUgPSAoZXhlY3V0aW9uTW9kZTogJ3NlcXVlbnRpYWwnfCdwYXJhbGxlbCcpOiBudW1iZXIgPT4ge1xuICBzd2l0Y2ggKGV4ZWN1dGlvbk1vZGUpIHtcbiAgICBjYXNlICdzZXF1ZW50aWFsJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ3BhcmFsbGVsJzpcbiAgICAgIHJldHVybiAxO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGV4ZWN1dGlvbiBtb2RlOiAke2V4ZWN1dGlvbk1vZGV9YCk7XG4gIH1cbn07XG5cbmNvbnN0IGFwcGVuZERlZmF1bHRPcHRpb25zID0gKG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiB2b2lkID0+IHtcbiAgaWYgKCFvcHRpb25zLmV4dHJhKSB7XG4gICAgb3B0aW9ucy5leHRyYSA9IHt9O1xuICB9XG4gIGlmICghb3B0aW9ucy5leHRyYS5zZXNzaW9uKSB7XG4gICAgb3B0aW9ucy5leHRyYS5zZXNzaW9uID0ge307XG4gIH1cbiAgY29uc3Qgc2Vzc2lvbiA9IG9wdGlvbnMuZXh0cmEuc2Vzc2lvbiBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBpZiAoIXNlc3Npb24udXNlX29ydF9tb2RlbF9ieXRlc19kaXJlY3RseSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkgPSAnMSc7XG4gIH1cblxuICAvLyBpZiB1c2luZyBKU0VQIHdpdGggV2ViR1BVLCBhbHdheXMgZGlzYWJsZSBtZW1vcnkgcGF0dGVyblxuICBpZiAob3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMgJiZcbiAgICAgIG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzLnNvbWUoZXAgPT4gKHR5cGVvZiBlcCA9PT0gJ3N0cmluZycgPyBlcCA6IGVwLm5hbWUpID09PSAnd2ViZ3B1JykpIHtcbiAgICBvcHRpb25zLmVuYWJsZU1lbVBhdHRlcm4gPSBmYWxzZTtcbiAgfVxufTtcblxuY29uc3Qgc2V0RXhlY3V0aW9uUHJvdmlkZXJzID1cbiAgICAoc2Vzc2lvbk9wdGlvbnNIYW5kbGU6IG51bWJlciwgZXhlY3V0aW9uUHJvdmlkZXJzOiByZWFkb25seSBJbmZlcmVuY2VTZXNzaW9uLkV4ZWN1dGlvblByb3ZpZGVyQ29uZmlnW10sXG4gICAgIGFsbG9jczogbnVtYmVyW10pOiB2b2lkID0+IHtcbiAgICAgIGZvciAoY29uc3QgZXAgb2YgZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICAgIGxldCBlcE5hbWUgPSB0eXBlb2YgZXAgPT09ICdzdHJpbmcnID8gZXAgOiBlcC5uYW1lO1xuXG4gICAgICAgIC8vIGNoZWNrIEVQIG5hbWVcbiAgICAgICAgc3dpdGNoIChlcE5hbWUpIHtcbiAgICAgICAgICBjYXNlICd3ZWJubic6XG4gICAgICAgICAgICBlcE5hbWUgPSAnV0VCTk4nO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29uc3Qgd2Vibm5PcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5kZXZpY2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnZGV2aWNlVHlwZScsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYm5uT3B0aW9ucy5kZXZpY2VUeXBlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ2RldmljZVR5cGUnIC0gJHt3ZWJubk9wdGlvbnMuZGV2aWNlVHlwZX0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/Lm51bVRocmVhZHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbnVtVGhyZWFkcyA9IHdlYm5uT3B0aW9ucy5udW1UaHJlYWRzO1xuICAgICAgICAgICAgICAgIC8vIEp1c3QgaWdub3JlIGludmFsaWQgd2Vibm5PcHRpb25zLm51bVRocmVhZHMuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudW1UaHJlYWRzICE9ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG51bVRocmVhZHMpIHx8IG51bVRocmVhZHMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBudW1UaHJlYWRzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnbnVtVGhyZWFkcycsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG51bVRocmVhZHMudG9TdHJpbmcoKSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PVxuICAgICAgICAgICAgICAgICAgICAwKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdudW1UaHJlYWRzJyAtICR7d2Vibm5PcHRpb25zLm51bVRocmVhZHN9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5wb3dlclByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKCdwb3dlclByZWZlcmVuY2UnLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3Bvd2VyUHJlZmVyZW5jZScgLSAke3dlYm5uT3B0aW9ucy5wb3dlclByZWZlcmVuY2V9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnd2ViZ3B1JzpcbiAgICAgICAgICAgIGVwTmFtZSA9ICdKUyc7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb25zdCB3ZWJncHVPcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJHcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICAgICAgICAgICAgaWYgKHdlYmdwdU9wdGlvbnM/LnByZWZlcnJlZExheW91dCkge1xuICAgICAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gJ05DSFcnICYmIHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0ICE9PSAnTkhXQycpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJlZmVycmVkTGF5b3V0IG11c3QgYmUgZWl0aGVyICdOQ0hXJyBvciAnTkhXQyc6ICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoJ3ByZWZlcnJlZExheW91dCcsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0LCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3ByZWZlcnJlZExheW91dCcgLSAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3dhc20nOlxuICAgICAgICAgIGNhc2UgJ2NwdSc6XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlcE5hbWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGVwTmFtZSwgYWxsb2NzKTtcbiAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyKHNlc3Npb25PcHRpb25zSGFuZGxlLCBlcE5hbWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhcHBlbmQgZXhlY3V0aW9uIHByb3ZpZGVyOiAke2VwTmFtZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgY29uc3Qgc2V0U2Vzc2lvbk9wdGlvbnMgPSAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBbbnVtYmVyLCBudW1iZXJbXV0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgY29uc3QgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IHNlc3Npb25PcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgYXBwZW5kRGVmYXVsdE9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA9IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbChzZXNzaW9uT3B0aW9ucy5ncmFwaE9wdGltaXphdGlvbkxldmVsID8/ICdhbGwnKTtcbiAgICBjb25zdCBleGVjdXRpb25Nb2RlID0gZ2V0RXhlY3V0aW9uTW9kZShzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Nb2RlID8/ICdzZXF1ZW50aWFsJyk7XG4gICAgY29uc3QgbG9nSWREYXRhT2Zmc2V0ID1cbiAgICAgICAgdHlwZW9mIHNlc3Npb25PcHRpb25zLmxvZ0lkID09PSAnc3RyaW5nJyA/IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5sb2dJZCwgYWxsb2NzKSA6IDA7XG5cbiAgICBjb25zdCBsb2dTZXZlcml0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA/PyAyOyAgLy8gRGVmYXVsdCB0byAyIC0gd2FybmluZ1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsb2dTZXZlcml0eUxldmVsKSB8fCBsb2dTZXZlcml0eUxldmVsIDwgMCB8fCBsb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dTZXZlcml0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGxvZ1ZlcmJvc2l0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPz8gMDsgIC8vIERlZmF1bHQgdG8gMCAtIHZlcmJvc2VcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nVmVyYm9zaXR5TGV2ZWwpIHx8IGxvZ1ZlcmJvc2l0eUxldmVsIDwgMCB8fCBsb2dWZXJib3NpdHlMZXZlbCA+IDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW1pemVkTW9kZWxGaWxlUGF0aE9mZnNldCA9IHR5cGVvZiBzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoID09PSAnc3RyaW5nJyA/XG4gICAgICAgIGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoLCBhbGxvY3MpIDpcbiAgICAgICAgMDtcblxuICAgIHNlc3Npb25PcHRpb25zSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMoXG4gICAgICAgIGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlQ3B1TWVtQXJlbmEsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybiwgZXhlY3V0aW9uTW9kZSxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVQcm9maWxpbmcsIDAsIGxvZ0lkRGF0YU9mZnNldCwgbG9nU2V2ZXJpdHlMZXZlbCwgbG9nVmVyYm9zaXR5TGV2ZWwsXG4gICAgICAgIG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXQpO1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIHNlc3Npb24gb3B0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICBzZXRFeGVjdXRpb25Qcm92aWRlcnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycywgYWxsb2NzKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykge1xuICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIG5hbWUgbXVzdCBiZSBhIHN0cmluZzogJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSB8fCB2YWx1ZSA8IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIHZhbHVlIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG5hbWUsIGFsbG9jcyk7XG4gICAgICAgIGlmICh3YXNtLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIG5hbWVPZmZzZXQsIHZhbHVlKSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZTogJHtuYW1lfSAtICR7dmFsdWV9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlc3Npb25PcHRpb25zLmV4dHJhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMuZXh0cmEsICcnLCBuZXcgV2Vha1NldDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcblxuICAgICAgICBpZiAod2FzbS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG4vLyBUaGlzIGZpbGUgaW5jbHVkZXMgY29tbW9uIGRlZmluaXRpb25zLiBUaGV5IGRvIE5PVCBoYXZlIGRlcGVuZGVuY3kgb24gdGhlIFdlYkFzc2VtYmx5IGluc3RhbmNlLlxuXG4vKipcbiAqIENvcGllZCBmcm9tIE9OTlggZGVmaW5pdGlvbi4gVXNlIHRoaXMgdG8gZHJvcCBkZXBlbmRlbmN5ICdvbm54X3Byb3RvJyB0byBkZWNyZWFzZSBjb21waWxlZCAuanMgZmlsZSBzaXplLlxuICovXG5leHBvcnQgY29uc3QgZW51bSBEYXRhVHlwZSB7XG4gIHVuZGVmaW5lZCA9IDAsXG4gIGZsb2F0ID0gMSxcbiAgdWludDggPSAyLFxuICBpbnQ4ID0gMyxcbiAgdWludDE2ID0gNCxcbiAgaW50MTYgPSA1LFxuICBpbnQzMiA9IDYsXG4gIGludDY0ID0gNyxcbiAgc3RyaW5nID0gOCxcbiAgYm9vbCA9IDksXG4gIGZsb2F0MTYgPSAxMCxcbiAgZG91YmxlID0gMTEsXG4gIHVpbnQzMiA9IDEyLFxuICB1aW50NjQgPSAxMyxcbiAgY29tcGxleDY0ID0gMTQsXG4gIGNvbXBsZXgxMjggPSAxNSxcbiAgYmZsb2F0MTYgPSAxNlxufVxuXG4vKipcbiAqIE1hcCBzdHJpbmcgdGVuc29yIGRhdGEgdG8gZW51bSB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0gPSAodHlwZTogc3RyaW5nKTogRGF0YVR5cGUgPT4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdpbnQ4JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQ4O1xuICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50ODtcbiAgICBjYXNlICdib29sJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5ib29sO1xuICAgIGNhc2UgJ2ludDE2JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQxNjtcbiAgICBjYXNlICd1aW50MTYnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLnVpbnQxNjtcbiAgICBjYXNlICdpbnQzMic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuaW50MzI7XG4gICAgY2FzZSAndWludDMyJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50MzI7XG4gICAgY2FzZSAnZmxvYXQxNic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuZmxvYXQxNjtcbiAgICBjYXNlICdmbG9hdDMyJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5mbG9hdDtcbiAgICBjYXNlICdmbG9hdDY0JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5kb3VibGU7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5zdHJpbmc7XG4gICAgY2FzZSAnaW50NjQnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLmludDY0O1xuICAgIGNhc2UgJ3VpbnQ2NCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUudWludDY0O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogTWFwIGVudW0gdmFsdWUgdG8gc3RyaW5nIHRlbnNvciBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyA9ICh0eXBlUHJvdG86IERhdGFUeXBlKTogVGVuc29yLlR5cGUgPT4ge1xuICBzd2l0Y2ggKHR5cGVQcm90bykge1xuICAgIGNhc2UgRGF0YVR5cGUuaW50ODpcbiAgICAgIHJldHVybiAnaW50OCc7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50ODpcbiAgICAgIHJldHVybiAndWludDgnO1xuICAgIGNhc2UgRGF0YVR5cGUuYm9vbDpcbiAgICAgIHJldHVybiAnYm9vbCc7XG4gICAgY2FzZSBEYXRhVHlwZS5pbnQxNjpcbiAgICAgIHJldHVybiAnaW50MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUudWludDE2OlxuICAgICAgcmV0dXJuICd1aW50MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUuaW50MzI6XG4gICAgICByZXR1cm4gJ2ludDMyJztcbiAgICBjYXNlIERhdGFUeXBlLnVpbnQzMjpcbiAgICAgIHJldHVybiAndWludDMyJztcbiAgICBjYXNlIERhdGFUeXBlLmZsb2F0MTY6XG4gICAgICByZXR1cm4gJ2Zsb2F0MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUuZmxvYXQ6XG4gICAgICByZXR1cm4gJ2Zsb2F0MzInO1xuICAgIGNhc2UgRGF0YVR5cGUuZG91YmxlOlxuICAgICAgcmV0dXJuICdmbG9hdDY0JztcbiAgICBjYXNlIERhdGFUeXBlLnN0cmluZzpcbiAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICBjYXNlIERhdGFUeXBlLmludDY0OlxuICAgICAgcmV0dXJuICdpbnQ2NCc7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50NjQ6XG4gICAgICByZXR1cm4gJ3VpbnQ2NCc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZVByb3RvfWApO1xuICB9XG59O1xuXG4vKipcbiAqIGdldCB0ZW5zb3IgZWxlbWVudCBzaXplIGluIGJ5dGVzIGJ5IHRoZSBnaXZlbiBkYXRhIHR5cGVcbiAqIEByZXR1cm5zIHNpemUgaW4gaW50ZWdlciBvciB1bmRlZmluZWQgaWYgdGhlIGRhdGEgdHlwZSBpcyBub3Qgc3VwcG9ydGVkXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUZW5zb3JFbGVtZW50U2l6ZSA9IChkYXRlVHlwZTogbnVtYmVyKTogbnVtYmVyfFxuICAgIHVuZGVmaW5lZCA9PiBbdW5kZWZpbmVkLCA0LCAxLCAxLCAyLCAyLCA0LCA4LCB1bmRlZmluZWQsIDEsIDIsIDgsIDQsIDgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdW2RhdGVUeXBlXTtcblxuLyoqXG4gKiBnZXQgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IgYnkgdGhlIGdpdmVuIHRlbnNvciB0eXBlXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IgPSAodHlwZTogVGVuc29yLlR5cGUpOiBGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgSW50OEFycmF5Q29uc3RydWN0b3J8VWludDE2QXJyYXlDb25zdHJ1Y3RvcnxJbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MzJBcnJheUNvbnN0cnVjdG9yfEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxcbiAgICBVaW50OEFycmF5Q29uc3RydWN0b3J8RmxvYXQ2NEFycmF5Q29uc3RydWN0b3J8VWludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yID0+IHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdmbG9hdDE2JzpcbiAgICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2Zsb2F0MzInOlxuICAgICAgICAgIHJldHVybiBGbG9hdDMyQXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgICAgY2FzZSAnaW50OCc6XG4gICAgICAgICAgcmV0dXJuIEludDhBcnJheTtcbiAgICAgICAgY2FzZSAndWludDE2JzpcbiAgICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDE2JzpcbiAgICAgICAgICByZXR1cm4gSW50MTZBcnJheTtcbiAgICAgICAgY2FzZSAnaW50MzInOlxuICAgICAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgICAgICBjYXNlICdib29sJzpcbiAgICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgICAgY2FzZSAnZmxvYXQ2NCc6XG4gICAgICAgICAgcmV0dXJuIEZsb2F0NjRBcnJheTtcbiAgICAgICAgY2FzZSAndWludDMyJzpcbiAgICAgICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDY0JzpcbiAgICAgICAgICByZXR1cm4gQmlnSW50NjRBcnJheTtcbiAgICAgICAgY2FzZSAndWludDY0JzpcbiAgICAgICAgICByZXR1cm4gQmlnVWludDY0QXJyYXk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCB0eXBlOiAke3R5cGV9YCk7XG4gICAgICB9XG4gICAgfTtcblxuLyoqXG4gKiBNYXAgc3RyaW5nIGxvZyBsZXZlbCB0byBpbnRlZ2VyIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBsb2dMZXZlbFN0cmluZ1RvRW51bSA9IChsb2dMZXZlbD86ICd2ZXJib3NlJ3wnaW5mbyd8J3dhcm5pbmcnfCdlcnJvcid8J2ZhdGFsJyk6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAobG9nTGV2ZWwpIHtcbiAgICBjYXNlICd2ZXJib3NlJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2luZm8nOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAnd2FybmluZyc6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlICdmYXRhbCc6XG4gICAgICByZXR1cm4gNDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke2xvZ0xldmVsfWApO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHRlbnNvciB0eXBlIGlzIHN1cHBvcnRlZCBieSBHUFUgYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUgPSAodHlwZTogVGVuc29yLlR5cGUpOiB0eXBlIGlzIFRlbnNvci5HcHVCdWZmZXJEYXRhVHlwZXMgPT4gdHlwZSA9PT0gJ2Zsb2F0MzInIHx8XG4gICAgdHlwZSA9PT0gJ2ludDMyJyB8fCB0eXBlID09PSAnaW50NjQnIHx8IHR5cGUgPT09ICdib29sJyB8fCB0eXBlID09PSAnZmxvYXQxNicgfHwgdHlwZSA9PT0gJ3VpbnQzMic7XG5cbi8qKlxuICogTWFwIHN0cmluZyBkYXRhIGxvY2F0aW9uIHRvIGludGVnZXIgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bSA9IChsb2NhdGlvbjogVGVuc29yLkRhdGFMb2NhdGlvbik6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAobG9jYXRpb24pIHtcbiAgICBjYXNlICdub25lJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2NwdSc6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlICdjcHUtcGlubmVkJzpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gNDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIGxvY2F0aW9uOiAke2xvY2F0aW9ufWApO1xuICB9XG59O1xuXG4vKipcbiAqIE1hcCBpbnRlZ2VyIGRhdGEgbG9jYXRpb24gdG8gc3RyaW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBkYXRhTG9jYXRpb25FbnVtVG9TdHJpbmcgPSAobG9jYXRpb246IG51bWJlcik6IFRlbnNvci5EYXRhTG9jYXRpb258dW5kZWZpbmVkID0+XG4gICAgKFsnbm9uZScsICdjcHUnLCAnY3B1LXBpbm5lZCcsICd0ZXh0dXJlJywgJ2dwdS1idWZmZXInXSBhcyBjb25zdClbbG9jYXRpb25dO1xuIiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDtleHBvcnQgY29uc3QgcmVhZEZpbGVTeW5jID0gdW5kZWZpbmVkO2V4cG9ydCBjb25zdCBjcmVhdGVSZWFkU3RyZWFtID0gdW5kZWZpbmVkOyIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHtyZWFkRmlsZX0gZnJvbSAnbm9kZTpmcy9wcm9taXNlcyc7XG5cbi8qKlxuICogTG9hZCBhIGZpbGUgaW50byBhIFVpbnQ4QXJyYXkuXG4gKlxuICogQHBhcmFtIGZpbGUgLSB0aGUgZmlsZSB0byBsb2FkLiBDYW4gYmUgYSBVUkwvcGF0aCwgYSBCbG9iLCBhbiBBcnJheUJ1ZmZlciwgb3IgYSBVaW50OEFycmF5LlxuICogQHJldHVybnMgYSBVaW50OEFycmF5IGNvbnRhaW5pbmcgdGhlIGZpbGUgZGF0YS5cbiAqL1xuZXhwb3J0IGNvbnN0IGxvYWRGaWxlID0gYXN5bmMoZmlsZTogc3RyaW5nfEJsb2J8QXJyYXlCdWZmZXJMaWtlfFVpbnQ4QXJyYXkpOiBQcm9taXNlPFVpbnQ4QXJyYXk+ID0+IHtcbiAgaWYgKHR5cGVvZiBmaWxlID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUpIHtcbiAgICAgIC8vIGxvYWQgZmlsZSBpbnRvIEFycmF5QnVmZmVyIGluIE5vZGUuanNcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCByZWFkRmlsZShmaWxlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLmNvZGUgPT09ICdFUlJfRlNfRklMRV9UT09fTEFSR0UnKSB7XG4gICAgICAgICAgLy8gZmlsZSBpcyB0b28gbGFyZ2UsIHVzZSBmcy5jcmVhdGVSZWFkU3RyZWFtIGluc3RlYWRcbiAgICAgICAgICBjb25zdCBzdHJlYW0gPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGUpO1xuICAgICAgICAgIGNvbnN0IGNodW5rczogVWludDhBcnJheVtdID0gW107XG4gICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5jb25jYXQoY2h1bmtzKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbG9hZCBmaWxlIGludG8gQXJyYXlCdWZmZXIgaW4gYnJvd3NlcnNcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZmlsZSk7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZmFpbGVkIHRvIGxvYWQgZXh0ZXJuYWwgZGF0YSBmaWxlOiAke2ZpbGV9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb250ZW50TGVuZ3RoSGVhZGVyID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtTGVuZ3RoJyk7XG4gICAgICBjb25zdCBmaWxlU2l6ZSA9IGNvbnRlbnRMZW5ndGhIZWFkZXIgPyBwYXJzZUludChjb250ZW50TGVuZ3RoSGVhZGVyLCAxMCkgOiAwO1xuICAgICAgaWYgKGZpbGVTaXplIDwgMTA3Mzc0MTgyNCAvKiAxR0IgKi8pIHtcbiAgICAgICAgLy8gd2hlbiBDb250ZW50LUxlbmd0aCBoZWFkZXIgaXMgbm90IHNldCwgd2UgY2Fubm90IGRldGVybWluZSB0aGUgZmlsZSBzaXplLiBXZSBhc3N1bWUgaXQgaXMgc21hbGwgZW5vdWdoIHRvXG4gICAgICAgIC8vIGxvYWQgaW50byBtZW1vcnkuXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZpbGUgaXMgdG9vIGxhcmdlLCB1c2Ugc3RyZWFtIGluc3RlYWRcbiAgICAgICAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmYWlsZWQgdG8gbG9hZCBleHRlcm5hbCBkYXRhIGZpbGU6ICR7ZmlsZX0sIG5vIHJlc3BvbnNlIGJvZHkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcblxuICAgICAgICBsZXQgYnVmZmVyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIHRyeSB0byBjcmVhdGUgQXJyYXlCdWZmZXIgZGlyZWN0bHlcbiAgICAgICAgICBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoZmlsZVNpemUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAgICAgICAgICAvLyB1c2UgV2ViQXNzZW1ibHkgTWVtb3J5IHRvIGFsbG9jYXRlIGxhcmdlciBBcnJheUJ1ZmZlclxuICAgICAgICAgICAgY29uc3QgcGFnZXMgPSBNYXRoLmNlaWwoZmlsZVNpemUgLyA2NTUzNik7XG4gICAgICAgICAgICBidWZmZXIgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtpbml0aWFsOiBwYWdlcywgbWF4aW11bTogcGFnZXN9KS5idWZmZXI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBjb25zdCB7ZG9uZSwgdmFsdWV9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDhBcnJheShidWZmZXIsIG9mZnNldCwgY2h1bmtTaXplKTtcbiAgICAgICAgICBjaHVuay5zZXQodmFsdWUpO1xuICAgICAgICAgIG9mZnNldCArPSBjaHVua1NpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgMCwgZmlsZVNpemUpO1xuICAgICAgfVxuICAgIH1cblxuICB9IGVsc2UgaWYgKGZpbGUgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGZpbGUuYXJyYXlCdWZmZXIoKSk7XG4gIH0gZWxzZSBpZiAoZmlsZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gZmlsZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZmlsZSk7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7RW52LCBJbmZlcmVuY2VTZXNzaW9uLCBUZW5zb3J9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7U2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsIFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YSwgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGEsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCB7c2V0UnVuT3B0aW9uc30gZnJvbSAnLi9ydW4tb3B0aW9ucyc7XG5pbXBvcnQge3NldFNlc3Npb25PcHRpb25zfSBmcm9tICcuL3Nlc3Npb24tb3B0aW9ucyc7XG5pbXBvcnQge2RhdGFMb2NhdGlvblN0cmluZ1RvRW51bSwgZ2V0VGVuc29yRWxlbWVudFNpemUsIGlzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZSwgbG9nTGV2ZWxTdHJpbmdUb0VudW0sIHRlbnNvckRhdGFUeXBlRW51bVRvU3RyaW5nLCB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bSwgdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yfSBmcm9tICcuL3dhc20tY29tbW9uJztcbmltcG9ydCB7Z2V0SW5zdGFuY2V9IGZyb20gJy4vd2FzbS1mYWN0b3J5JztcbmltcG9ydCB7YWxsb2NXYXNtU3RyaW5nLCBjaGVja0xhc3RFcnJvcn0gZnJvbSAnLi93YXNtLXV0aWxzJztcbmltcG9ydCB7bG9hZEZpbGV9IGZyb20gJy4vd2FzbS11dGlscy1sb2FkLWZpbGUnO1xuXG4vLyAjcmVnaW9uIEluaXRpYWxpemF0aW9uc1xuXG4vKipcbiAqIFRoZXJlIGFyZSA0IGRpZmZlcmVudCBcImluaXRpYWxpemF0aW9uXCIgc3RlcHMgZm9yIE9SVC4gVGhleSBoYXBwZW4gaW4gZGlmZmVyZW50IHBsYWNlcyBhbmQgZGlmZmVyZW50IHRpbWUuXG4gKlxuICogMS4gSmF2YVNjcmlwdCBpbml0aWFsaXphdGlvbiBmb3Igb25ueHJ1bnRpbWUtY29tbW9uIGFuZCBvbm54cnVudGltZS13ZWIuXG4gKiAgICBUaGlzIGlzIHRoZSBmaXJzdCBpbml0aWFsaXphdGlvbiBzdGVwLiBJbiB0aGlzIHN0ZXAsIG9ubnhydW50aW1lLXdlYiBjYWxscyBvbm54cnVudGltZS1jb21tb24ncyByZWdpc3RlckJhY2tlbmQoKVxuICogZnVuY3Rpb24gbXVsdGlwbGUgdGltZXMgdG8gcmVnaXN0ZXIgYWxsIHRoZSBhdmFpbGFibGUgYmFja2VuZHMuIFRoZSBiYWNrZW5kIHJlZ2lzdHJhdGlvbiBpcyB2ZXJ5IGZhc3QuIEl0IG9ubHlcbiAqIHJlZ2lzdGVycyB0aGUgYmFja2VuZCBuYW1lIHdpdGggdGhlIHVuaW5pdGlhbGl6ZWQgYmFja2VuZCBvYmplY3QuIE5vIGhlYXZ5IGluaXRpYWxpemF0aW9uIGlzIGRvbmUgaW4gdGhpcyBzdGVwLlxuICogICAgUmVmZXIgdG8gd2ViL2xpYi9pbmRleC50cyBmb3IgdGhlIGJhY2tlbmQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIDIuIFdlYkFzc2VtYmx5IGFydGlmYWN0IGluaXRpYWxpemF0aW9uLlxuICogICAgVGhpcyBoYXBwZW5zIHdoZW4gYW55IHJlZ2lzdGVyZWQgd2FzbSBiYWNrZW5kIGlzIHVzZWQgZm9yIHRoZSBmaXJzdCB0aW1lIChpZS4gYG9ydC5JbmZlcmVuY2VTZXNzaW9uLmNyZWF0ZSgpYCBvclxuICogYG9ydC5UcmFpbmluZ1Nlc3Npb24uY3JlYXRlKClgIGlzIGNhbGxlZCkuIEluIHRoaXMgc3RlcCwgb25ueHJ1bnRpbWUtd2ViIGRvZXMgdGhlIGZvbGxvd2luZ3M6XG4gKiAgICAgLSBjcmVhdGUgYSBwcm94eSB3b3JrZXIgYW5kIG1ha2Ugc3VyZSB0aGUgcHJveHkgd29ya2VyIGlzIHJlYWR5IHRvIHJlY2VpdmUgbWVzc2FnZXMsIGlmIHByb3h5IGlzIGVuYWJsZWQuXG4gKiAgICAgLSBwZXJmb3JtIGZlYXR1cmUgZGV0ZWN0aW9uLCBsb2NhdGUgY29ycmVjdCBXZWJBc3NlbWJseSBhcnRpZmFjdCBwYXRoIGFuZCBjYWxsIHRoZSBFbXNjcmlwdGVuIGdlbmVyYXRlZFxuICogSmF2YVNjcmlwdCBjb2RlIHRvIGluaXRpYWxpemUgdGhlIFdlYkFzc2VtYmx5IHJ1bnRpbWUuXG4gKiAgICAgICAgIC0gaWYgcHJveHkgaXMgZW5hYmxlZCwgdGhpcyBzdGVwIGhhcHBlbnMgaW4gdGhlIHByb3h5IHdvcmtlciB1c2luZyBtZXNzYWdlICdpbml0LXdhc20nLlxuICogICAgICAgICAtIGRvd25sb2FkaW5nIHRoZSAnb3J0LXdhc217Li4ufS53YXNtJyBmaWxlIGlzIGRvbmUgaW4gdGhpcyBzdGVwLlxuICogICAgICAgICAtIGlmIG11bHRpLXRocmVhZCBpcyBlbmFibGVkLCBvbmUgb3IgbW9yZSB3ZWJ3b3JrZXIgd2lsbCBiZSBjcmVhdGVkIHRvIGluaXRpYWxpemUgdGhlIFBUaHJlYWQgdGhyZWFkcG9vbC5cbiAqXG4gKiAzLiBPUlQgZW52aXJvbm1lbnQgaW5pdGlhbGl6YXRpb24uXG4gKiAgICBUaGlzIGhhcHBlbnMgYWZ0ZXIgc3RlcCAyLiBJbiB0aGlzIHN0ZXAsIG9ubnhydW50aW1lLXdlYiBwZXJmb3JtcyBPTk5YIFJ1bnRpbWUgZW52aXJvbm1lbnQgaW5pdGlhbGl6YXRpb24uXG4gKiBGdW5jdGlvbiBgX09ydEluaXQoKWAgaXMgY2FsbGVkIGluIHRoaXMgc3RlcC5cbiAqICAgICAtIGlmIHByb3h5IGlzIGVuYWJsZWQsIHRoaXMgc3RlcCBoYXBwZW5zIGluIHRoZSBwcm94eSB3b3JrZXIgdXNpbmcgbWVzc2FnZSAnaW5pdC1vcnQnLlxuICogICAgIC0gbG9nZ2luZyBsZXZlbCAob3J0LmVudi5sb2dMZXZlbCkgYW5kIHRocmVhZCBudW1iZXIgKG9ydC5lbnYud2FzbS5udW1UaHJlYWRzKSBhcmUgc2V0IGluIHRoaXMgc3RlcC5cbiAqXG4gKiA0LiBTZXNzaW9uIGluaXRpYWxpemF0aW9uLlxuICogICAgVGhpcyBoYXBwZW5zIHdoZW4gYG9ydC5JbmZlcmVuY2VTZXNzaW9uLmNyZWF0ZSgpYCBvciBgb3J0LlRyYWluaW5nU2Vzc2lvbi5jcmVhdGUoKWAgaXMgY2FsbGVkLiBVbmxpa2UgdGhlIGZpcnN0IDNcbiAqIHN0ZXBzICh0aGV5IG9ubHkgY2FsbGVkIG9uY2UpLCB0aGlzIHN0ZXAgd2lsbCBiZSBkb25lIGZvciBlYWNoIHNlc3Npb24uIEluIHRoaXMgc3RlcCwgb25ueHJ1bnRpbWUtd2ViIGRvZXMgdGhlXG4gKiBmb2xsb3dpbmdzOlxuICogICAgSWYgdGhlIHBhcmFtZXRlciBpcyBhIFVSTDpcbiAqICAgIC0gZG93bmxvYWQgdGhlIG1vZGVsIGRhdGEgZnJvbSB0aGUgVVJMLlxuICogICAgLSBjb3B5IHRoZSBtb2RlbCBkYXRhIHRvIHRoZSBXQVNNIGhlYXAuIChwcm94eTogJ2NvcHktZnJvbScpXG4gKiAgICAtIGRlcmVmZXJlbmNlIHRoZSBtb2RlbCBidWZmZXIuIFRoaXMgc3RlcCBhbGxvd3MgdGhlIG9yaWdpbmFsIEFycmF5QnVmZmVyIHRvIGJlIGdhcmJhZ2UgY29sbGVjdGVkLlxuICogICAgLSBjYWxsIGBfT3J0Q3JlYXRlU2Vzc2lvbigpYCB0byBjcmVhdGUgdGhlIHNlc3Npb24uIChwcm94eTogJ2NyZWF0ZScpXG4gKlxuICogICAgSWYgdGhlIHBhcmFtZXRlciBpcyBhIFVpbnQ4QXJyYXkgb2JqZWN0OlxuICogICAgLSBjb3B5IHRoZSBtb2RlbCBkYXRhIHRvIHRoZSBXQVNNIGhlYXAuIChwcm94eTogJ2NvcHktZnJvbScpXG4gKiAgICAtIGNhbGwgYF9PcnRDcmVhdGVTZXNzaW9uKClgIHRvIGNyZWF0ZSB0aGUgc2Vzc2lvbi4gKHByb3h5OiAnY3JlYXRlJylcbiAqXG4gKlxuICovXG5cbi8qKlxuICogaW5pdGlhbGl6ZSBPUlQgZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIG51bVRocmVhZHMgU2V0R2xvYmFsSW50cmFPcE51bVRocmVhZHMobnVtVGhyZWFkcylcbiAqIEBwYXJhbSBsb2dnaW5nTGV2ZWwgQ3JlYXRlRW52KHN0YXRpY19jYXN0PE9ydExvZ2dpbmdMZXZlbD4obG9nZ2luZ19sZXZlbCkpXG4gKi9cbmNvbnN0IGluaXRPcnQgPSAobnVtVGhyZWFkczogbnVtYmVyLCBsb2dnaW5nTGV2ZWw6IG51bWJlcik6IHZvaWQgPT4ge1xuICBjb25zdCBlcnJvckNvZGUgPSBnZXRJbnN0YW5jZSgpLl9PcnRJbml0KG51bVRocmVhZHMsIGxvZ2dpbmdMZXZlbCk7XG4gIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBpbml0aWFsaXplIG9ubnhydW50aW1lLicpO1xuICB9XG59O1xuXG4vKipcbiAqIGludGlhbGl6ZSBydW50aW1lIGVudmlyb25tZW50LlxuICogQHBhcmFtIGVudiBwYXNzZWQgaW4gdGhlIGVudmlyb25tZW50IGNvbmZpZyBvYmplY3QuXG4gKi9cbmV4cG9ydCBjb25zdCBpbml0UnVudGltZSA9IGFzeW5jKGVudjogRW52KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIC8vIGluaXQgT1JUXG4gIGluaXRPcnQoZW52Lndhc20ubnVtVGhyZWFkcyEsIGxvZ0xldmVsU3RyaW5nVG9FbnVtKGVudi5sb2dMZXZlbCkpO1xufTtcblxuLyoqXG4gKiBwZXJmb3JtIEVQIHNwZWNpZmljIGluaXRpYWxpemF0aW9uLlxuICpcbiAqIEBwYXJhbSBlbnZcbiAqIEBwYXJhbSBlcE5hbWVcbiAqL1xuZXhwb3J0IGNvbnN0IGluaXRFcCA9IGFzeW5jKGVudjogRW52LCBlcE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgZXBOYW1lID09PSAnd2ViZ3B1Jykge1xuICAgIC8vIHBlcmZvcm0gV2ViR1BVIGF2YWlsYWJpbGl0eSBjaGVja1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yLmdwdSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJHUFUgaXMgbm90IHN1cHBvcnRlZCBpbiBjdXJyZW50IGVudmlyb25tZW50Jyk7XG4gICAgfVxuICAgIGNvbnN0IGFkYXB0ZXIgPSBhd2FpdCBuYXZpZ2F0b3IuZ3B1LnJlcXVlc3RBZGFwdGVyKCk7XG4gICAgaWYgKCFhZGFwdGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0ZhaWxlZCB0byBnZXQgR1BVIGFkYXB0ZXIuIFlvdSBtYXkgbmVlZCB0byBlbmFibGUgZmxhZyBcIi0tZW5hYmxlLXVuc2FmZS13ZWJncHVcIiBpZiB5b3UgYXJlIHVzaW5nIENocm9tZS4nKTtcbiAgICB9XG5cbiAgICBpZiAoIWVudi53YXNtLnNpbWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnTm90IHN1cHBvcnRlZCBmb3IgV2ViR1BVPU9OIGFuZCBTSU1EPU9GRi4gUGxlYXNlIHNldCBgZW52Lndhc20uc2ltZGAgdG8gdHJ1ZSB3aGVuIHVzaW5nIGB3ZWJncHVgIEVQJyk7XG4gICAgfVxuXG4gICAgLy8gaW5pdCBKU0VQIGlmIGF2YWlsYWJsZVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHMsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICBjb25zdCBpbml0SnNlcCA9IHJlcXVpcmUoJy4vanNlcC9pbml0JykuaW5pdDtcbiAgICBhd2FpdCBpbml0SnNlcChnZXRJbnN0YW5jZSgpLCBlbnYsIGFkYXB0ZXIpO1xuICB9XG59O1xuXG4vLyAjZW5kcmVnaW9uIEluaXRpYWxpemF0aW9uc1xuXG4vKipcbiAqIHZhbGlkIGRhdGEgbG9jYXRpb25zIGZvciBpbnB1dC9vdXRwdXQgdGVuc29ycy5cbiAqL1xudHlwZSBTdXBwb3J0ZWRUZW5zb3JEYXRhTG9jYXRpb25Gb3JJbnB1dE91dHB1dCA9ICdjcHUnfCdjcHUtcGlubmVkJ3wnZ3B1LWJ1ZmZlcic7XG5cbnR5cGUgSU9CaW5kaW5nU3RhdGUgPSB7XG4gIC8qKlxuICAgKiB0aGUgaGFuZGxlIG9mIElPIGJpbmRpbmcuXG4gICAqL1xuICByZWFkb25seSBoYW5kbGU6IG51bWJlcjtcblxuICAvKipcbiAgICogdGhlIHByZWZlcnJlZCBsb2NhdGlvbiBmb3IgZWFjaCBvdXRwdXQgdGVuc29yLlxuICAgKlxuICAgKiB2YWx1ZSBpcyBvbmUgb2YgJ2NwdScsICdjcHUtcGlubmVkJywgJ2dwdS1idWZmZXInLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zOiByZWFkb25seSBTdXBwb3J0ZWRUZW5zb3JEYXRhTG9jYXRpb25Gb3JJbnB1dE91dHB1dFtdO1xuXG4gIC8qKlxuICAgKiBlbnVtIHZhbHVlIG9mIHRoZSBwcmVmZXJyZWQgbG9jYXRpb24gZm9yIGVhY2ggb3V0cHV0IHRlbnNvci5cbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQ6IHJlYWRvbmx5IG51bWJlcltdO1xufTtcblxuLyoqXG4gKiAgdHVwbGUgZWxlbWVudHMgYXJlOiBJbmZlcmVuY2VTZXNzaW9uIElEOyBpbnB1dE5hbWVzVVRGOEVuY29kZWQ7IG91dHB1dE5hbWVzVVRGOEVuY29kZWQ7IGJpbmRpbmdTdGF0ZVxuICovXG50eXBlIFNlc3Npb25NZXRhZGF0YSA9IFtcbiAgaW5mZXJlbmNlU2Vzc2lvbklkOiBudW1iZXIsIGlucHV0TmFtZXNVVEY4RW5jb2RlZDogbnVtYmVyW10sIG91dHB1dE5hbWVzVVRGOEVuY29kZWQ6IG51bWJlcltdLFxuICBiaW5kaW5nU3RhdGU6IElPQmluZGluZ1N0YXRlfG51bGxcbl07XG5cbmNvbnN0IGFjdGl2ZVNlc3Npb25zID0gbmV3IE1hcDxudW1iZXIsIFNlc3Npb25NZXRhZGF0YT4oKTtcblxuLyoqXG4gKiBnZXQgdGhlIGlucHV0L291dHB1dCBjb3VudCBvZiB0aGUgc2Vzc2lvbi5cbiAqIEBwYXJhbSBzZXNzaW9uSGFuZGxlIHRoZSBoYW5kbGUgcmVwcmVzZW50aW5nIHRoZSBzZXNzaW9uLiBzaG91bGQgYmUgbm9uLXplcm8uXG4gKiBAcmV0dXJucyBhIHR1cGxlIGluY2x1ZGluZyAyIG51bWJlcnMsIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgY291bnQgYW5kIG91dHB1dCBjb3VudC5cbiAqL1xuY29uc3QgZ2V0U2Vzc2lvbklucHV0T3V0cHV0Q291bnQgPSAoc2Vzc2lvbkhhbmRsZTogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRJbnB1dE91dHB1dENvdW50KHNlc3Npb25IYW5kbGUsIGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyA0KTtcbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgc2Vzc2lvbiBpbnB1dC9vdXRwdXQgY291bnQuJyk7XG4gICAgfVxuICAgIHJldHVybiBbd2FzbS5IRUFQMzJbZGF0YU9mZnNldCAvIDRdLCB3YXNtLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogYWxsb2NhdGUgdGhlIG1lbW9yeSBhbmQgbWVtY3B5IHRoZSBleHRlcm5hbCBidWZmZXIuXG4gKlxuICogQHBhcmFtIG1vZGVsIC0gdGhlIGV4dGVybmFsIGJ1ZmZlciBjb250YWluaW5nIHRoZSBtb2RlbCBkYXRhLiBNdXN0IG5vdCBiZSB0aGUgc2FtZSBidWZmZXIgYXMgdGhlIFdBU00gaGVhcC5cbiAqIEByZXR1cm5zIGEgMi1lbGVtZW50cyB0dXBsZSAtIHRoZSBwb2ludGVyIGFuZCBzaXplIG9mIHRoZSBhbGxvY2F0ZWQgYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5RnJvbUV4dGVybmFsQnVmZmVyID0gKG1vZGVsOiBVaW50OEFycmF5KTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBtb2RlbERhdGFPZmZzZXQgPSB3YXNtLl9tYWxsb2MobW9kZWwuYnl0ZUxlbmd0aCk7XG4gIGlmIChtb2RlbERhdGFPZmZzZXQgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGNyZWF0ZSBhIHNlc3Npb24uIGZhaWxlZCB0byBhbGxvY2F0ZSBhIGJ1ZmZlciBvZiBzaXplICR7bW9kZWwuYnl0ZUxlbmd0aH0uYCk7XG4gIH1cbiAgd2FzbS5IRUFQVTguc2V0KG1vZGVsLCBtb2RlbERhdGFPZmZzZXQpO1xuICByZXR1cm4gW21vZGVsRGF0YU9mZnNldCwgbW9kZWwuYnl0ZUxlbmd0aF07XG59O1xuXG4vKipcbiAqIGNyZWF0ZSBhbiBpbmZlcmVuY2Ugc2Vzc2lvbiBmcm9tIGEgbW9kZWwgZGF0YSBidWZmZXIuXG4gKlxuICogQHBhcmFtIG1vZGVsRGF0YSAtIGVpdGhlciBhIFVpbnQ4QXJyYXkgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbW9kZWwgZGF0YSwgb3IgYSAyLWVsZW1lbnRzIHR1cGxlIGNvbnRhaW5pbmcgdGhlXG4gKiAgICAgcG9pbnRlciBhbmQgc2l6ZSBvZiB0aGUgbW9kZWwgZGF0YSBidWZmZXIuXG4gKiBAcGFyYW0gb3B0aW9ucyBhbiBvcHRpb25hbCBzZXNzaW9uIG9wdGlvbnMgb2JqZWN0LlxuICogQHJldHVybnMgYSAzLWVsZW1lbnRzIHR1cGxlIGNvbnRhaW5pbmcgW3Nlc3Npb24gaGFuZGxlLCBpbnB1dCBuYW1lcywgb3V0cHV0IG5hbWVzXVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2Vzc2lvbiA9IGFzeW5jKFxuICAgIG1vZGVsRGF0YTogVWludDhBcnJheXxTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcixcbiAgICBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPiA9PiB7XG4gIGxldCBtb2RlbERhdGFPZmZzZXQ6IG51bWJlciwgbW9kZWxEYXRhTGVuZ3RoOiBudW1iZXI7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG1vZGVsRGF0YSkpIHtcbiAgICAvLyBpZiBtb2RlbCBkYXRhIGlzIGFuIGFycmF5LCBpdCBtdXN0IGJlIGEgMi1lbGVtZW50cyB0dXBsZSBjb250YWluaW5nIHRoZSBwb2ludGVyIGFuZCBzaXplIG9mIHRoZSBtb2RlbCBkYXRhXG4gICAgW21vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoXSA9IG1vZGVsRGF0YTtcbiAgfSBlbHNlIGlmIChtb2RlbERhdGEuYnVmZmVyID09PSB3YXNtLkhFQVBVOC5idWZmZXIpIHtcbiAgICAvLyBpZiBtb2RlbCBkYXRhIHVzZXMgdGhlIHNhbWUgYnVmZmVyIGFzIHRoZSBXQVNNIGhlYXAsIHdlIGRvbid0IG5lZWQgdG8gY29weSBpdC5cbiAgICBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGhdID0gW21vZGVsRGF0YS5ieXRlT2Zmc2V0LCBtb2RlbERhdGEuYnl0ZUxlbmd0aF07XG4gIH0gZWxzZSB7XG4gICAgLy8gb3RoZXJ3aXNlLCBjb3B5IHRoZSBtb2RlbCBkYXRhIHRvIHRoZSBXQVNNIGhlYXAuXG4gICAgW21vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoXSA9IGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIobW9kZWxEYXRhKTtcbiAgfVxuXG4gIGxldCBzZXNzaW9uSGFuZGxlID0gMDtcbiAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgbGV0IGlvQmluZGluZ0hhbmRsZSA9IDA7XG4gIGxldCBhbGxvY3M6IG51bWJlcltdID0gW107XG4gIGNvbnN0IGlucHV0TmFtZXNVVEY4RW5jb2RlZCA9IFtdO1xuICBjb25zdCBvdXRwdXROYW1lc1VURjhFbmNvZGVkID0gW107XG5cbiAgdHJ5IHtcbiAgICBbc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGFsbG9jc10gPSBzZXRTZXNzaW9uT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIGlmIChvcHRpb25zPy5leHRlcm5hbERhdGEgJiYgd2FzbS5tb3VudEV4dGVybmFsRGF0YSkge1xuICAgICAgY29uc3QgbG9hZGluZ1Byb21pc2VzID0gW107XG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2Ygb3B0aW9ucy5leHRlcm5hbERhdGEpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHR5cGVvZiBmaWxlID09PSAnc3RyaW5nJyA/IGZpbGUgOiBmaWxlLnBhdGg7XG4gICAgICAgIGxvYWRpbmdQcm9taXNlcy5wdXNoKGxvYWRGaWxlKHR5cGVvZiBmaWxlID09PSAnc3RyaW5nJyA/IGZpbGUgOiBmaWxlLmRhdGEpLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgd2FzbS5tb3VudEV4dGVybmFsRGF0YSEocGF0aCwgZGF0YSk7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgLy8gd2FpdCBmb3IgYWxsIGV4dGVybmFsIGRhdGEgZmlsZXMgdG8gYmUgbG9hZGVkXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChsb2FkaW5nUHJvbWlzZXMpO1xuICAgIH1cblxuICAgIHNlc3Npb25IYW5kbGUgPSB3YXNtLl9PcnRDcmVhdGVTZXNzaW9uKG1vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoLCBzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgaWYgKHNlc3Npb25IYW5kbGUgPT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGNyZWF0ZSBhIHNlc3Npb24uJyk7XG4gICAgfVxuXG4gICAgY29uc3QgW2lucHV0Q291bnQsIG91dHB1dENvdW50XSA9IGdldFNlc3Npb25JbnB1dE91dHB1dENvdW50KHNlc3Npb25IYW5kbGUpO1xuXG4gICAgY29uc3QgaW5wdXROYW1lcyA9IFtdO1xuICAgIGNvbnN0IG91dHB1dE5hbWVzID0gW107XG4gICAgY29uc3Qgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zOiBTdXBwb3J0ZWRUZW5zb3JEYXRhTG9jYXRpb25Gb3JJbnB1dE91dHB1dFtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IG5hbWUgPSB3YXNtLl9PcnRHZXRJbnB1dE5hbWUoc2Vzc2lvbkhhbmRsZSwgaSk7XG4gICAgICBpZiAobmFtZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgYW4gaW5wdXQgbmFtZS4nKTtcbiAgICAgIH1cbiAgICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5wdXNoKG5hbWUpO1xuICAgICAgaW5wdXROYW1lcy5wdXNoKHdhc20uVVRGOFRvU3RyaW5nKG5hbWUpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBuYW1lID0gd2FzbS5fT3J0R2V0T3V0cHV0TmFtZShzZXNzaW9uSGFuZGxlLCBpKTtcbiAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGdldCBhbiBvdXRwdXQgbmFtZS4nKTtcbiAgICAgIH1cbiAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgIGNvbnN0IG5hbWVTdHJpbmcgPSB3YXNtLlVURjhUb1N0cmluZyhuYW1lKTtcbiAgICAgIG91dHB1dE5hbWVzLnB1c2gobmFtZVN0cmluZyk7XG5cbiAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSkge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHR5cGVvZiBvcHRpb25zPy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbiA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgICAgb3B0aW9ucy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbiA6XG4gICAgICAgICAgICBvcHRpb25zPy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbj8uW25hbWVTdHJpbmddID8/ICdjcHUnO1xuICAgICAgICBpZiAobG9jYXRpb24gIT09ICdjcHUnICYmIGxvY2F0aW9uICE9PSAnY3B1LXBpbm5lZCcgJiYgbG9jYXRpb24gIT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IHN1cHBvcnRlZCBwcmVmZXJyZWQgb3V0cHV0IGxvY2F0aW9uOiAke2xvY2F0aW9ufS5gKTtcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdXNlIElPIGJpbmRpbmcgb25seSB3aGVuIGF0IGxlYXN0IG9uZSBvdXRwdXQgaXMgcHJlZmZlcmVkIHRvIGJlIG9uIEdQVS5cbiAgICBsZXQgYmluZGluZ1N0YXRlOiBJT0JpbmRpbmdTdGF0ZXxudWxsID0gbnVsbDtcbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnNvbWUobCA9PiBsID09PSAnZ3B1LWJ1ZmZlcicpKSB7XG4gICAgICBpb0JpbmRpbmdIYW5kbGUgPSB3YXNtLl9PcnRDcmVhdGVCaW5kaW5nKHNlc3Npb25IYW5kbGUpO1xuICAgICAgaWYgKGlvQmluZGluZ0hhbmRsZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBjcmVhdGUgSU8gYmluZGluZy4nKTtcbiAgICAgIH1cblxuICAgICAgYmluZGluZ1N0YXRlID0ge1xuICAgICAgICBoYW5kbGU6IGlvQmluZGluZ0hhbmRsZSxcbiAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLFxuICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkOiBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMubWFwKGwgPT4gZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGwpKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgYWN0aXZlU2Vzc2lvbnMuc2V0KHNlc3Npb25IYW5kbGUsIFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGJpbmRpbmdTdGF0ZV0pO1xuICAgIHJldHVybiBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lcywgb3V0cHV0TmFtZXNdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goYnVmID0+IHdhc20uX09ydEZyZWUoYnVmKSk7XG4gICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuXG4gICAgaWYgKGlvQmluZGluZ0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nSGFuZGxlKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbkhhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb24oc2Vzc2lvbkhhbmRsZSk7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5fZnJlZShtb2RlbERhdGFPZmZzZXQpO1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuXG4gICAgLy8gdW5tb3VudCBleHRlcm5hbCBkYXRhIGlmIG5lY2Vzc2FyeVxuICAgIHdhc20udW5tb3VudEV4dGVybmFsRGF0YT8uKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCByZWxlYXNlU2Vzc2lvbiA9IChzZXNzaW9uSWQ6IG51bWJlcik6IHZvaWQgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICBpZiAoIXNlc3Npb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZWxlYXNlIHNlc3Npb24uIGludmFsaWQgc2Vzc2lvbiBpZDogJHtzZXNzaW9uSWR9YCk7XG4gIH1cbiAgY29uc3QgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgaW9CaW5kaW5nU3RhdGVdID0gc2Vzc2lvbjtcblxuICBpZiAoaW9CaW5kaW5nU3RhdGUpIHtcbiAgICB3YXNtLl9PcnRSZWxlYXNlQmluZGluZyhpb0JpbmRpbmdTdGF0ZS5oYW5kbGUpO1xuICB9XG5cbiAgd2FzbS5qc2VwVW5yZWdpc3RlckJ1ZmZlcnM/LihzZXNzaW9uSWQpO1xuXG4gIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuICBvdXRwdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goYnVmID0+IHdhc20uX09ydEZyZWUoYnVmKSk7XG4gIHdhc20uX09ydFJlbGVhc2VTZXNzaW9uKHNlc3Npb25IYW5kbGUpO1xuICBhY3RpdmVTZXNzaW9ucy5kZWxldGUoc2Vzc2lvbklkKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IgPVxuICAgICh0ZW5zb3I6IFRlbnNvck1ldGFkYXRhfG51bGwsIHRlbnNvckhhbmRsZXM6IG51bWJlcltdLCBhbGxvY3M6IG51bWJlcltdLCBzZXNzaW9uSWQ6IG51bWJlciwgaW5kZXg6IG51bWJlcik6XG4gICAgICAgIHZvaWQgPT4ge1xuICAgICAgICAgIGlmICghdGVuc29yKSB7XG4gICAgICAgICAgICB0ZW5zb3JIYW5kbGVzLnB1c2goMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgICBjb25zdCBkYXRhVHlwZSA9IHRlbnNvclswXTtcbiAgICAgICAgICBjb25zdCBkaW1zID0gdGVuc29yWzFdO1xuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGVuc29yWzNdO1xuXG4gICAgICAgICAgbGV0IHJhd0RhdGE6IG51bWJlcjtcbiAgICAgICAgICBsZXQgZGF0YUJ5dGVMZW5ndGg6IG51bWJlcjtcblxuICAgICAgICAgIGlmIChkYXRhVHlwZSA9PT0gJ3N0cmluZycgJiYgbG9jYXRpb24gPT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gJ2dwdS1idWZmZXInKSB7XG4gICAgICAgICAgICBjb25zdCBncHVCdWZmZXIgPSB0ZW5zb3JbMl0uZ3B1QnVmZmVyIGFzIEdQVUJ1ZmZlcjtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRTaXplSW5CeXRlcyA9IGdldFRlbnNvckVsZW1lbnRTaXplKHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKGRhdGFUeXBlKSkhO1xuICAgICAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpICogZWxlbWVudFNpemVJbkJ5dGVzO1xuICAgICAgICAgICAgcmF3RGF0YSA9IHdhc20uanNlcFJlZ2lzdGVyQnVmZmVyKHNlc3Npb25JZCwgaW5kZXgsIGdwdUJ1ZmZlciwgZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gdGVuc29yWzJdO1xuXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAvLyBzdHJpbmcgdGVuc29yXG4gICAgICAgICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gNCAqIGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICByYXdEYXRhID0gd2FzbS5fbWFsbG9jKGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgYWxsb2NzLnB1c2gocmF3RGF0YSk7XG4gICAgICAgICAgICAgIGxldCBkYXRhSW5kZXggPSByYXdEYXRhIC8gNDtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdGVuc29yIGRhdGEgYXQgaW5kZXggJHtpfSBpcyBub3QgYSBzdHJpbmdgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2FzbS5IRUFQVTMyW2RhdGFJbmRleCsrXSA9IGFsbG9jV2FzbVN0cmluZyhkYXRhW2ldLCBhbGxvY3MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgcmF3RGF0YSA9IHdhc20uX21hbGxvYyhkYXRhQnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgIGFsbG9jcy5wdXNoKHJhd0RhdGEpO1xuICAgICAgICAgICAgICB3YXNtLkhFQVBVOC5zZXQobmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YUJ5dGVMZW5ndGgpLCByYXdEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gICAgICAgICAgY29uc3QgZGltc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg0ICogZGltcy5sZW5ndGgpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgZGltSW5kZXggPSBkaW1zT2Zmc2V0IC8gNDtcbiAgICAgICAgICAgIGRpbXMuZm9yRWFjaChkID0+IHdhc20uSEVBUDMyW2RpbUluZGV4KytdID0gZCk7XG4gICAgICAgICAgICBjb25zdCB0ZW5zb3IgPSB3YXNtLl9PcnRDcmVhdGVUZW5zb3IoXG4gICAgICAgICAgICAgICAgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0oZGF0YVR5cGUpLCByYXdEYXRhLCBkYXRhQnl0ZUxlbmd0aCwgZGltc09mZnNldCwgZGltcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGxvY2F0aW9uKSk7XG4gICAgICAgICAgICBpZiAodGVuc29yID09PSAwKSB7XG4gICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBjcmVhdGUgdGVuc29yIGZvciBpbnB1dC9vdXRwdXQuIHNlc3Npb249JHtzZXNzaW9uSWR9LCBpbmRleD0ke2luZGV4fS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbnNvckhhbmRsZXMucHVzaCh0ZW5zb3IpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4vKipcbiAqIHBlcmZvcm0gaW5mZXJlbmNlIHJ1blxuICovXG5leHBvcnQgY29uc3QgcnVuID0gYXN5bmMoXG4gICAgc2Vzc2lvbklkOiBudW1iZXIsIGlucHV0SW5kaWNlczogbnVtYmVyW10sIGlucHV0VGVuc29yczogVGVuc29yTWV0YWRhdGFbXSwgb3V0cHV0SW5kaWNlczogbnVtYmVyW10sXG4gICAgb3V0cHV0VGVuc29yczogQXJyYXk8VGVuc29yTWV0YWRhdGF8bnVsbD4sIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8VGVuc29yTWV0YWRhdGFbXT4gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICBpZiAoIXNlc3Npb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBydW4gaW5mZXJlbmNlLiBpbnZhbGlkIHNlc3Npb24gaWQ6ICR7c2Vzc2lvbklkfWApO1xuICB9XG4gIGNvbnN0IFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGlvQmluZGluZ1N0YXRlXSA9IHNlc3Npb247XG5cbiAgY29uc3QgaW5wdXRDb3VudCA9IGlucHV0SW5kaWNlcy5sZW5ndGg7XG4gIGNvbnN0IG91dHB1dENvdW50ID0gb3V0cHV0SW5kaWNlcy5sZW5ndGg7XG5cbiAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICBsZXQgcnVuT3B0aW9uc0FsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBpbnB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IG91dHB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IGlucHV0T3V0cHV0QWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IGJlZm9yZVJ1blN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgY29uc3QgaW5wdXRWYWx1ZXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoaW5wdXRDb3VudCAqIDQpO1xuICBjb25zdCBpbnB1dE5hbWVzT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgY29uc3Qgb3V0cHV0VmFsdWVzT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKG91dHB1dENvdW50ICogNCk7XG4gIGNvbnN0IG91dHB1dE5hbWVzT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKG91dHB1dENvdW50ICogNCk7XG5cbiAgdHJ5IHtcbiAgICBbcnVuT3B0aW9uc0hhbmRsZSwgcnVuT3B0aW9uc0FsbG9jc10gPSBzZXRSdW5PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgLy8gY3JlYXRlIGlucHV0IHRlbnNvcnNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKGlucHV0VGVuc29yc1tpXSwgaW5wdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgc2Vzc2lvbklkLCBpbnB1dEluZGljZXNbaV0pO1xuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBvdXRwdXQgdGVuc29yc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKFxuICAgICAgICAgIG91dHB1dFRlbnNvcnNbaV0sIG91dHB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCBzZXNzaW9uSWQsIGlucHV0Q291bnQgKyBvdXRwdXRJbmRpY2VzW2ldKTtcbiAgICB9XG5cbiAgICBsZXQgaW5wdXRWYWx1ZXNJbmRleCA9IGlucHV0VmFsdWVzT2Zmc2V0IC8gNDtcbiAgICBsZXQgaW5wdXROYW1lc0luZGV4ID0gaW5wdXROYW1lc09mZnNldCAvIDQ7XG4gICAgbGV0IG91dHB1dFZhbHVlc0luZGV4ID0gb3V0cHV0VmFsdWVzT2Zmc2V0IC8gNDtcbiAgICBsZXQgb3V0cHV0TmFtZXNJbmRleCA9IG91dHB1dE5hbWVzT2Zmc2V0IC8gNDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgd2FzbS5IRUFQVTMyW2lucHV0VmFsdWVzSW5kZXgrK10gPSBpbnB1dFRlbnNvckhhbmRsZXNbaV07XG4gICAgICB3YXNtLkhFQVBVMzJbaW5wdXROYW1lc0luZGV4KytdID0gaW5wdXROYW1lc1VURjhFbmNvZGVkW2lucHV0SW5kaWNlc1tpXV07XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgd2FzbS5IRUFQVTMyW291dHB1dFZhbHVlc0luZGV4KytdID0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXTtcbiAgICAgIHdhc20uSEVBUFUzMltvdXRwdXROYW1lc0luZGV4KytdID0gb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtvdXRwdXRJbmRpY2VzW2ldXTtcbiAgICB9XG5cbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgaW9CaW5kaW5nU3RhdGUpIHtcbiAgICAgIGNvbnN0IHtoYW5kbGUsIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucywgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZH0gPSBpb0JpbmRpbmdTdGF0ZTtcblxuICAgICAgaWYgKGlucHV0TmFtZXNVVEY4RW5jb2RlZC5sZW5ndGggIT09IGlucHV0Q291bnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCBjb3VudCBmcm9tIGZlZWRzICgke1xuICAgICAgICAgICAgaW5wdXRDb3VudH0pIGlzIGV4cGVjdGVkIHRvIGJlIGFsd2F5cyBlcXVhbCB0byBtb2RlbCdzIGlucHV0IGNvdW50ICgke2lucHV0TmFtZXNVVEY4RW5jb2RlZC5sZW5ndGh9KS5gKTtcbiAgICAgIH1cblxuICAgICAgLy8gcHJvY2VzcyBpbnB1dHNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaW5wdXRJbmRpY2VzW2ldO1xuICAgICAgICBjb25zdCBlcnJvckNvZGUgPSBhd2FpdCB3YXNtLl9PcnRCaW5kSW5wdXQoaGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBpbnB1dFRlbnNvckhhbmRsZXNbaV0pO1xuICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGJpbmQgaW5wdXRbJHtpfV0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHByb2Nlc3MgcHJlLWFsbG9jYXRlZCBvdXRwdXRzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBvdXRwdXRJbmRpY2VzW2ldO1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG91dHB1dFRlbnNvcnNbaV0/LlszXTsgIC8vIHVuZGVmaW5lZCBtZWFucyBvdXRwdXQgaXMgbm90IHByZS1hbGxvY2F0ZWQuXG5cbiAgICAgICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICAgICAgLy8gb3V0cHV0IGlzIHByZS1hbGxvY2F0ZWQuIGJpbmQgdGhlIHRlbnNvci5cbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRCaW5kT3V0cHV0KGhhbmRsZSwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIG91dHB1dFRlbnNvckhhbmRsZXNbaV0sIDApO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIHByZS1hbGxvY2F0ZWQgb3V0cHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gb3V0cHV0IGlzIG5vdCBwcmUtYWxsb2NhdGVkLiByZXNldCBwcmVmZXJyZWQgbG9jYXRpb24uXG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlID1cbiAgICAgICAgICAgICAgd2FzbS5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCAwLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkW2luZGV4XSk7XG4gICAgICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGJpbmQgb3V0cHV0WyR7aX1dIHRvICR7b3V0cHV0UHJlZmVycmVkTG9jYXRpb25zW2ldfSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGVycm9yQ29kZTogbnVtYmVyO1xuXG4gICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVICYmIGlvQmluZGluZ1N0YXRlKSB7XG4gICAgICBlcnJvckNvZGUgPSBhd2FpdCB3YXNtLl9PcnRSdW5XaXRoQmluZGluZyhcbiAgICAgICAgICBzZXNzaW9uSGFuZGxlLCBpb0JpbmRpbmdTdGF0ZS5oYW5kbGUsIG91dHB1dENvdW50LCBvdXRwdXRWYWx1ZXNPZmZzZXQsIHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvckNvZGUgPSBhd2FpdCB3YXNtLl9PcnRSdW4oXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc09mZnNldCwgaW5wdXRWYWx1ZXNPZmZzZXQsIGlucHV0Q291bnQsIG91dHB1dE5hbWVzT2Zmc2V0LCBvdXRwdXRDb3VudCxcbiAgICAgICAgICBvdXRwdXRWYWx1ZXNPZmZzZXQsIHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cblxuICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKCdmYWlsZWQgdG8gY2FsbCBPcnRSdW4oKS4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBvdXRwdXQ6IFRlbnNvck1ldGFkYXRhW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgY29uc3QgdGVuc29yID0gd2FzbS5IRUFQVTMyW291dHB1dFZhbHVlc09mZnNldCAvIDQgKyBpXTtcbiAgICAgIGlmICh0ZW5zb3IgPT09IG91dHB1dFRlbnNvckhhbmRsZXNbaV0pIHtcbiAgICAgICAgLy8gb3V0cHV0IHRlbnNvciBpcyBwcmUtYWxsb2NhdGVkLiBubyBuZWVkIHRvIGNvcHkgZGF0YS5cbiAgICAgICAgb3V0cHV0LnB1c2gob3V0cHV0VGVuc29yc1tpXSEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgICAgIC8vIHN0YWNrIGFsbG9jYXRlIDQgcG9pbnRlciB2YWx1ZVxuICAgICAgY29uc3QgdGVuc29yRGF0YU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg0ICogNCk7XG5cbiAgICAgIGxldCBrZWVwT3V0cHV0VGVuc29yID0gZmFsc2U7XG4gICAgICBsZXQgdHlwZTogVGVuc29yLlR5cGV8dW5kZWZpbmVkLCBkYXRhT2Zmc2V0ID0gMDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uX09ydEdldFRlbnNvckRhdGEoXG4gICAgICAgICAgICB0ZW5zb3IsIHRlbnNvckRhdGFPZmZzZXQsIHRlbnNvckRhdGFPZmZzZXQgKyA0LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgOCwgdGVuc29yRGF0YU9mZnNldCArIDEyKTtcbiAgICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhY2Nlc3Mgb3V0cHV0IHRlbnNvciBkYXRhIG9uIGluZGV4ICR7aX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRlbnNvckRhdGFJbmRleCA9IHRlbnNvckRhdGFPZmZzZXQgLyA0O1xuICAgICAgICBjb25zdCBkYXRhVHlwZSA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgIGRhdGFPZmZzZXQgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbS5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgY29uc3QgZGltc0xlbmd0aCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgIGNvbnN0IGRpbXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaW1zTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkaW1zLnB1c2god2FzbS5IRUFQVTMyW2RpbXNPZmZzZXQgLyA0ICsgaV0pO1xuICAgICAgICB9XG4gICAgICAgIHdhc20uX09ydEZyZWUoZGltc09mZnNldCk7XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IGRpbXMucmVkdWNlKChhLCBiKSA9PiBhICogYiwgMSk7XG4gICAgICAgIHR5cGUgPSB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyhkYXRhVHlwZSk7XG5cbiAgICAgICAgY29uc3QgcHJlZmVycmVkTG9jYXRpb24gPSBpb0JpbmRpbmdTdGF0ZT8ub3V0cHV0UHJlZmVycmVkTG9jYXRpb25zW291dHB1dEluZGljZXNbaV1dO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChwcmVmZXJyZWRMb2NhdGlvbiA9PT0gJ2dwdS1idWZmZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0cmluZyB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBvbiBHUFUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHN0cmluZ0RhdGE6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgbGV0IGRhdGFJbmRleCA9IGRhdGFPZmZzZXQgLyA0O1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3YXNtLkhFQVBVMzJbZGF0YUluZGV4KytdO1xuICAgICAgICAgICAgY29uc3QgbWF4Qnl0ZXNUb1JlYWQgPSBpID09PSBzaXplIC0gMSA/IHVuZGVmaW5lZCA6IHdhc20uSEVBUFUzMltkYXRhSW5kZXhdIC0gb2Zmc2V0O1xuICAgICAgICAgICAgc3RyaW5nRGF0YS5wdXNoKHdhc20uVVRGOFRvU3RyaW5nKG9mZnNldCwgbWF4Qnl0ZXNUb1JlYWQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LnB1c2goW3R5cGUsIGRpbXMsIHN0cmluZ0RhdGEsICdjcHUnXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgYSBjZXJ0YWluIG91dHB1dCdzIHByZWZlcnJlZCBsb2NhdGlvbiBpcyBHUFUgYnV0IHRoZSB0ZW5zb3IgaXMgZW1wdHksIHdlIHN0aWxsIG5lZWQgdG8gY3JlYXRlIGEgQ1BVXG4gICAgICAgICAgLy8gdGVuc29yIGZvciBpdC4gVGhlcmUgaXMgbm8gbWFwcGluZyBHUFUgYnVmZmVyIGZvciBhbiBlbXB0eSB0ZW5zb3IuXG4gICAgICAgICAgaWYgKHByZWZlcnJlZExvY2F0aW9uID09PSAnZ3B1LWJ1ZmZlcicgJiYgc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHdhc20uanNlcEdldEJ1ZmZlcihkYXRhT2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRTaXplID0gZ2V0VGVuc29yRWxlbWVudFNpemUoZGF0YVR5cGUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRTaXplID09PSB1bmRlZmluZWQgfHwgIWlzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRhdGEgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkbyBub3QgcmVsZWFzZSB0aGUgdGVuc29yIHJpZ2h0IG5vdy4gaXQgd2lsbCBiZSByZWxlYXNlZCB3aGVuIHVzZXIgY2FsbHMgdGVuc29yLmRpc3Bvc2UoKS5cbiAgICAgICAgICAgIGtlZXBPdXRwdXRUZW5zb3IgPSB0cnVlO1xuXG4gICAgICAgICAgICBvdXRwdXQucHVzaChbXG4gICAgICAgICAgICAgIHR5cGUsIGRpbXMsIHtcbiAgICAgICAgICAgICAgICBncHVCdWZmZXIsXG4gICAgICAgICAgICAgICAgZG93bmxvYWQ6IHdhc20uanNlcENyZWF0ZURvd25sb2FkZXIoZ3B1QnVmZmVyLCBzaXplICogZWxlbWVudFNpemUsIHR5cGUpLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHdhc20uX09ydFJlbGVhc2VUZW5zb3IodGVuc29yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdncHUtYnVmZmVyJ1xuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHRlbnNvclR5cGVUb1R5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0eXBlKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgdHlwZWRBcnJheUNvbnN0cnVjdG9yKHNpemUpO1xuICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIC5zZXQod2FzbS5IRUFQVTguc3ViYXJyYXkoZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIGRhdGEuYnl0ZUxlbmd0aCkpO1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goW3R5cGUsIGRpbXMsIGRhdGEsICdjcHUnXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB3YXNtLnN0YWNrUmVzdG9yZShiZWZvcmVHZXRUZW5zb3JEYXRhU3RhY2spO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgZGF0YU9mZnNldCkge1xuICAgICAgICAgIHdhc20uX2ZyZWUoZGF0YU9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFrZWVwT3V0cHV0VGVuc29yKSB7XG4gICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlvQmluZGluZ1N0YXRlKSB7XG4gICAgICB3YXNtLl9PcnRDbGVhckJvdW5kT3V0cHV0cyhpb0JpbmRpbmdTdGF0ZS5oYW5kbGUpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoYmVmb3JlUnVuU3RhY2spO1xuXG4gICAgaW5wdXRUZW5zb3JIYW5kbGVzLmZvckVhY2godiA9PiB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICBvdXRwdXRUZW5zb3JIYW5kbGVzLmZvckVhY2godiA9PiB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICBpbnB1dE91dHB1dEFsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG5cbiAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuICAgIHJ1bk9wdGlvbnNBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuICB9XG59O1xuXG4vKipcbiAqIGVuZCBwcm9maWxpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGVuZFByb2ZpbGluZyA9IChzZXNzaW9uSWQ6IG51bWJlcik6IHZvaWQgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICBpZiAoIXNlc3Npb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2Vzc2lvbiBpZCcpO1xuICB9XG4gIGNvbnN0IHNlc3Npb25IYW5kbGUgPSBzZXNzaW9uWzBdO1xuXG4gIC8vIHByb2ZpbGUgZmlsZSBuYW1lIGlzIG5vdCB1c2VkIHlldCwgYnV0IGl0IG11c3QgYmUgZnJlZWQuXG4gIGNvbnN0IHByb2ZpbGVGaWxlTmFtZSA9IHdhc20uX09ydEVuZFByb2ZpbGluZyhzZXNzaW9uSGFuZGxlKTtcbiAgaWYgKHByb2ZpbGVGaWxlTmFtZSA9PT0gMCkge1xuICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGdldCBhbiBwcm9maWxlIGZpbGUgbmFtZS4nKTtcbiAgfVxuICB3YXNtLl9PcnRGcmVlKHByb2ZpbGVGaWxlTmFtZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZXh0cmFjdFRyYW5zZmVyYWJsZUJ1ZmZlcnMgPSAodGVuc29yczogcmVhZG9ubHkgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGFbXSk6IEFycmF5QnVmZmVyTGlrZVtdID0+IHtcbiAgY29uc3QgYnVmZmVyczogQXJyYXlCdWZmZXJMaWtlW10gPSBbXTtcbiAgZm9yIChjb25zdCB0ZW5zb3Igb2YgdGVuc29ycykge1xuICAgIGNvbnN0IGRhdGEgPSB0ZW5zb3JbMl07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpICYmICdidWZmZXInIGluIGRhdGEpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChkYXRhLmJ1ZmZlcik7XG4gICAgfVxuICB9XG4gIHJldHVybiBidWZmZXJzO1xufTtcbiIsICIvKiFcbiAqIE9OTlggUnVudGltZSBXZWIgdjEuMTguMFxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuKCgpID0+IHtcbiAgdmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgdmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICB2YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgdmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gIHZhciBfX2VzbSA9IChmbiwgcmVzKSA9PiBmdW5jdGlvbiBfX2luaXQoKSB7XG4gICAgcmV0dXJuIGZuICYmIChyZXMgPSAoMCwgZm5bX19nZXRPd25Qcm9wTmFtZXMoZm4pWzBdXSkoZm4gPSAwKSksIHJlcztcbiAgfTtcbiAgdmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlKCkge1xuICAgIHJldHVybiBtb2QgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKChtb2QgPSB7IGV4cG9ydHM6IHt9IH0pLmV4cG9ydHMsIG1vZCksIG1vZC5leHBvcnRzO1xuICB9O1xuICB2YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gIH07XG4gIHZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gICAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRvO1xuICB9O1xuICB2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuICAvLyBub2RlanMtaWdub3JlOmZzXG4gIHZhciBmc19leHBvcnRzID0ge307XG4gIF9fZXhwb3J0KGZzX2V4cG9ydHMsIHtcbiAgICBjcmVhdGVSZWFkU3RyZWFtOiAoKSA9PiBjcmVhdGVSZWFkU3RyZWFtLFxuICAgIHJlYWRGaWxlOiAoKSA9PiByZWFkRmlsZSxcbiAgICByZWFkRmlsZVN5bmM6ICgpID0+IHJlYWRGaWxlU3luY1xuICB9KTtcbiAgdmFyIHJlYWRGaWxlLCByZWFkRmlsZVN5bmMsIGNyZWF0ZVJlYWRTdHJlYW07XG4gIHZhciBpbml0X2ZzID0gX19lc20oe1xuICAgIFwibm9kZWpzLWlnbm9yZTpmc1wiKCkge1xuICAgICAgcmVhZEZpbGUgPSB2b2lkIDA7XG4gICAgICByZWFkRmlsZVN5bmMgPSB2b2lkIDA7XG4gICAgICBjcmVhdGVSZWFkU3RyZWFtID0gdm9pZCAwO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpwYXRoXG4gIHZhciBwYXRoX2V4cG9ydHMgPSB7fTtcbiAgX19leHBvcnQocGF0aF9leHBvcnRzLCB7XG4gICAgam9pbjogKCkgPT4gam9pbjJcbiAgfSk7XG4gIHZhciBqb2luMjtcbiAgdmFyIGluaXRfcGF0aCA9IF9fZXNtKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6cGF0aFwiKCkge1xuICAgICAgam9pbjIgPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyB3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtdHJhaW5pbmctd2FzbS1zaW1kLmpzXG4gIHZhciByZXF1aXJlX29ydF90cmFpbmluZ193YXNtX3NpbWQgPSBfX2NvbW1vbkpTKHtcbiAgICBcIndlYi9saWIvd2FzbS9iaW5kaW5nL29ydC10cmFpbmluZy13YXNtLXNpbWQuanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgdmFyIG9ydFdhc20gPSAoKCkgPT4ge1xuICAgICAgICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB2b2lkIDA7XG4gICAgICAgIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcbiAgICAgICAgICB2YXIgZSA9IG1vZHVsZUFyZywgaywgbDtcbiAgICAgICAgICBlLnJlYWR5ID0gbmV3IFByb21pc2UoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGsgPSBhO1xuICAgICAgICAgICAgbCA9IGI7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGFhID0gT2JqZWN0LmFzc2lnbih7fSwgZSksIGJhID0gXCIuL3RoaXMucHJvZ3JhbVwiLCBjYSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHdpbmRvdywgcSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW1wb3J0U2NyaXB0cywgZGEgPSBcIm9iamVjdFwiID09IHR5cGVvZiBwcm9jZXNzICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLCB2ID0gXCJcIiwgeCwgeiwgQTtcbiAgICAgICAgICBpZiAoZGEpIHtcbiAgICAgICAgICAgIHZhciBmcyA9IChpbml0X2ZzKCksIF9fdG9Db21tb25KUyhmc19leHBvcnRzKSksIEIgPSAoaW5pdF9wYXRoKCksIF9fdG9Db21tb25KUyhwYXRoX2V4cG9ydHMpKTtcbiAgICAgICAgICAgIHYgPSBxID8gQi5kaXJuYW1lKHYpICsgXCIvXCIgOiBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICAgICAgICAgIHggPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgICBhID0gQyhhKSA/IG5ldyBVUkwoYSkgOiBCLm5vcm1hbGl6ZShhKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhhLCBiID8gdm9pZCAwIDogXCJ1dGY4XCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICBhID0geChhLCB0cnVlKTtcbiAgICAgICAgICAgICAgYS5idWZmZXIgfHwgKGEgPSBuZXcgVWludDhBcnJheShhKSk7XG4gICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHogPSAoYSwgYiwgYywgZCA9IHRydWUpID0+IHtcbiAgICAgICAgICAgICAgYSA9IEMoYSkgPyBuZXcgVVJMKGEpIDogQi5ub3JtYWxpemUoYSk7XG4gICAgICAgICAgICAgIGZzLnJlYWRGaWxlKGEsIGQgPyB2b2lkIDAgOiBcInV0ZjhcIiwgKGcsIGgpID0+IHtcbiAgICAgICAgICAgICAgICBnID8gYyhnKSA6IGIoZCA/IGguYnVmZmVyIDogaCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICFlLnRoaXNQcm9ncmFtICYmIDEgPCBwcm9jZXNzLmFyZ3YubGVuZ3RoICYmIChiYSA9IHByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKSk7XG4gICAgICAgICAgICBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gICAgICAgICAgICBlLmluc3BlY3QgPSAoKSA9PiBcIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChjYSB8fCBxKVxuICAgICAgICAgICAgcSA/IHYgPSBzZWxmLmxvY2F0aW9uLmhyZWYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmICh2ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCBfc2NyaXB0RGlyICYmICh2ID0gX3NjcmlwdERpciksIDAgIT09IHYuaW5kZXhPZihcImJsb2I6XCIpID8gdiA9IHYuc3Vic3RyKDAsIHYucmVwbGFjZSgvWz8jXS4qLywgXCJcIikubGFzdEluZGV4T2YoXCIvXCIpICsgMSkgOiB2ID0gXCJcIiwgeCA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGIub3BlbihcIkdFVFwiLCBhLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgfSwgcSAmJiAoQSA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGIub3BlbihcIkdFVFwiLCBhLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pLCB6ID0gKGEsIGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgZC5vcGVuKFwiR0VUXCIsIGEsIHRydWUpO1xuICAgICAgICAgICAgICBkLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgZC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgMjAwID09IGQuc3RhdHVzIHx8IDAgPT0gZC5zdGF0dXMgJiYgZC5yZXNwb25zZSA/IGIoZC5yZXNwb25zZSkgOiBjKCk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGQub25lcnJvciA9IGM7XG4gICAgICAgICAgICAgIGQuc2VuZChudWxsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGVhID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwgRCA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGUsIGFhKTtcbiAgICAgICAgICBhYSA9IG51bGw7XG4gICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYgRShcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgdmFyIEYsIGZhID0gZmFsc2UsIEcsIEgsIEksIEosIGhhO1xuICAgICAgICAgIGZ1bmN0aW9uIGlhKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBGLmJ1ZmZlcjtcbiAgICAgICAgICAgIGUuSEVBUDggPSBHID0gbmV3IEludDhBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUDE2ID0gbmV3IEludDE2QXJyYXkoYSk7XG4gICAgICAgICAgICBlLkhFQVBVOCA9IEggPSBuZXcgVWludDhBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUDMyID0gSSA9IG5ldyBJbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgZS5IRUFQVTMyID0gSiA9IG5ldyBVaW50MzJBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUEYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoYSk7XG4gICAgICAgICAgICBlLkhFQVBGNjQgPSBoYSA9IG5ldyBGbG9hdDY0QXJyYXkoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBLID0gW10sIEwgPSBbXSwgamEgPSBbXSwgTSA9IDAsIE4gPSBudWxsLCBPID0gbnVsbDtcbiAgICAgICAgICBmdW5jdGlvbiBFKGEpIHtcbiAgICAgICAgICAgIGEgPSBcIkFib3J0ZWQoXCIgKyBhICsgXCIpXCI7XG4gICAgICAgICAgICBEKGEpO1xuICAgICAgICAgICAgZmEgPSB0cnVlO1xuICAgICAgICAgICAgYSA9IG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYSArIFwiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTtcbiAgICAgICAgICAgIGwoYSk7XG4gICAgICAgICAgICB0aHJvdyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIga2EgPSAoYSkgPT4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKSwgQyA9IChhKSA9PiBhLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpLCBQO1xuICAgICAgICAgIFAgPSBcIm9ydC10cmFpbmluZy13YXNtLXNpbWQud2FzbVwiO1xuICAgICAgICAgIGlmICgha2EoUCkpIHtcbiAgICAgICAgICAgIHZhciBsYSA9IFA7XG4gICAgICAgICAgICBQID0gZS5sb2NhdGVGaWxlID8gZS5sb2NhdGVGaWxlKGxhLCB2KSA6IHYgKyBsYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbWEoYSkge1xuICAgICAgICAgICAgaWYgKEEpXG4gICAgICAgICAgICAgIHJldHVybiBBKGEpO1xuICAgICAgICAgICAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBuYShhKSB7XG4gICAgICAgICAgICBpZiAoY2EgfHwgcSkge1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBmZXRjaCAmJiAhQyhhKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goYSwgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICghYi5vaylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIiArIGEgKyBcIidcIjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBiLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4gbWEoYSkpO1xuICAgICAgICAgICAgICBpZiAoeilcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgICAgIHooYSwgKGQpID0+IGIobmV3IFVpbnQ4QXJyYXkoZCkpLCBjKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IG1hKGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gb2EoYSwgYiwgYykge1xuICAgICAgICAgICAgcmV0dXJuIG5hKGEpLnRoZW4oKGQpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGQsIGIpKS50aGVuKChkKSA9PiBkKS50aGVuKGMsIChkKSA9PiB7XG4gICAgICAgICAgICAgIEQoYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7ZH1gKTtcbiAgICAgICAgICAgICAgRShkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBwYShhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IFA7XG4gICAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyB8fCBrYShjKSB8fCBDKGMpIHx8IGRhIHx8IFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZmV0Y2ggPyBvYShjLCBhLCBiKSA6IGZldGNoKGMsIHsgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIiB9KS50aGVuKChkKSA9PiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhkLCBhKS50aGVuKGIsIGZ1bmN0aW9uKGcpIHtcbiAgICAgICAgICAgICAgRChgd2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6ICR7Z31gKTtcbiAgICAgICAgICAgICAgRChcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO1xuICAgICAgICAgICAgICByZXR1cm4gb2EoYywgYSwgYik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBRLCBxYSA9IHsgOTg5MjgwOiAoYSwgYiwgYywgZCkgPT4ge1xuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGUgfHwgIWUuUWEpXG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgYSA9IFIoYSA+Pj4gMCk7XG4gICAgICAgICAgICBhLnN0YXJ0c1dpdGgoXCIuL1wiKSAmJiAoYSA9IGEuc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgICAgIGEgPSBlLlFhLmdldChhKTtcbiAgICAgICAgICAgIGlmICghYSlcbiAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGIgKyBjID4gYS5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBILnNldChhLnN1YmFycmF5KGIsIGIgKyBjKSwgZCA+Pj4gMCA+Pj4gMCksIDA7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB9O1xuICAgICAgICAgIGZ1bmN0aW9uIHJhKGEpIHtcbiAgICAgICAgICAgIHRoaXMuS2EgPSBhIC0gMjQ7XG4gICAgICAgICAgICB0aGlzLlBhID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICBKW3RoaXMuS2EgKyA0ID4+PiAyID4+PiAwXSA9IGI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5PYSA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgSlt0aGlzLkthICsgOCA+Pj4gMiA+Pj4gMF0gPSBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuTWEgPSBmdW5jdGlvbihiLCBjKSB7XG4gICAgICAgICAgICAgIHRoaXMuTmEoKTtcbiAgICAgICAgICAgICAgdGhpcy5QYShiKTtcbiAgICAgICAgICAgICAgdGhpcy5PYShjKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLk5hID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIEpbdGhpcy5LYSArIDE2ID4+PiAyID4+PiAwXSA9IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgc2EgPSAwLCB0YSA9IDAsIHVhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpIDogdm9pZCAwLCB2YSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBkID0gYiArIGM7XG4gICAgICAgICAgICBmb3IgKGMgPSBiOyBhW2NdICYmICEoYyA+PSBkKTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBhLmJ1ZmZlciAmJiB1YSlcbiAgICAgICAgICAgICAgcmV0dXJuIHVhLmRlY29kZShhLnN1YmFycmF5KGIsIGMpKTtcbiAgICAgICAgICAgIGZvciAoZCA9IFwiXCI7IGIgPCBjOyApIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSBhW2IrK107XG4gICAgICAgICAgICAgIGlmIChnICYgMTI4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGggPSBhW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICBpZiAoMTkyID09IChnICYgMjI0KSlcbiAgICAgICAgICAgICAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoZyAmIDMxKSA8PCA2IHwgaCk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbSA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgZyA9IDIyNCA9PSAoZyAmIDI0MCkgPyAoZyAmIDE1KSA8PCAxMiB8IGggPDwgNiB8IG0gOiAoZyAmIDcpIDw8IDE4IHwgaCA8PCAxMiB8IG0gPDwgNiB8IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgNjU1MzYgPiBnID8gZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpIDogKGcgLT0gNjU1MzYsIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGcgPj4gMTAsIDU2MzIwIHwgZyAmIDEwMjMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH0sIFIgPSAoYSwgYikgPT4gKGEgPj4+PSAwKSA/IHZhKEgsIGEsIGIpIDogXCJcIiwgUyA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYS5jaGFyQ29kZUF0KGMpO1xuICAgICAgICAgICAgICAxMjcgPj0gZCA/IGIrKyA6IDIwNDcgPj0gZCA/IGIgKz0gMiA6IDU1Mjk2IDw9IGQgJiYgNTczNDMgPj0gZCA/IChiICs9IDQsICsrYykgOiBiICs9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9LCBUID0gKGEsIGIsIGMsIGQpID0+IHtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKCEoMCA8IGQpKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIHZhciBnID0gYztcbiAgICAgICAgICAgIGQgPSBjICsgZCAtIDE7XG4gICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IGEubGVuZ3RoOyArK2gpIHtcbiAgICAgICAgICAgICAgdmFyIG0gPSBhLmNoYXJDb2RlQXQoaCk7XG4gICAgICAgICAgICAgIGlmICg1NTI5NiA8PSBtICYmIDU3MzQzID49IG0pIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGEuY2hhckNvZGVBdCgrK2gpO1xuICAgICAgICAgICAgICAgIG0gPSA2NTUzNiArICgobSAmIDEwMjMpIDw8IDEwKSB8IHIgJiAxMDIzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgxMjcgPj0gbSkge1xuICAgICAgICAgICAgICAgIGlmIChjID49IGQpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSBtO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgyMDQ3ID49IG0pIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjICsgMSA+PSBkKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDE5MiB8IG0gPj4gNjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKDY1NTM1ID49IG0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAyID49IGQpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDIyNCB8IG0gPj4gMTI7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDMgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMjQwIHwgbSA+PiAxODtcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgbSA+PiAxMiAmIDYzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgbSA+PiA2ICYgNjM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IG0gJiA2MztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYltjID4+PiAwXSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gYyAtIGc7XG4gICAgICAgICAgfSwgVSA9IChhKSA9PiAwID09PSBhICUgNCAmJiAoMCAhPT0gYSAlIDEwMCB8fCAwID09PSBhICUgNDAwKSwgd2EgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdLCB4YSA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sIENhID0gKGEpID0+IHtcbiAgICAgICAgICAgIHZhciBiID0gUyhhKSArIDEsIGMgPSBCYShiKTtcbiAgICAgICAgICAgIGMgJiYgVChhLCBILCBjLCBiKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIFYgPSBbXSwgVyA9IHt9LCBEYSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghWCkge1xuICAgICAgICAgICAgICB2YXIgYSA9IHsgVVNFUjogXCJ3ZWJfdXNlclwiLCBMT0dOQU1FOiBcIndlYl91c2VyXCIsIFBBVEg6IFwiL1wiLCBQV0Q6IFwiL1wiLCBIT01FOiBcIi9ob21lL3dlYl91c2VyXCIsIExBTkc6IChcIm9iamVjdFwiID09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IFwiQ1wiKS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICAgIFwiX1wiXG4gICAgICAgICAgICAgICkgKyBcIi5VVEYtOFwiLCBfOiBiYSB8fCBcIi4vdGhpcy5wcm9ncmFtXCIgfSwgYjtcbiAgICAgICAgICAgICAgZm9yIChiIGluIFcpXG4gICAgICAgICAgICAgICAgdm9pZCAwID09PSBXW2JdID8gZGVsZXRlIGFbYl0gOiBhW2JdID0gV1tiXTtcbiAgICAgICAgICAgICAgdmFyIGMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChiIGluIGEpXG4gICAgICAgICAgICAgICAgYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtcbiAgICAgICAgICAgICAgWCA9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWDtcbiAgICAgICAgICB9LCBYLCBFYSA9IFtudWxsLCBbXSwgW11dLCBGYSA9IFszMSwgMjksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXSwgR2EgPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG4gICAgICAgICAgZnVuY3Rpb24gSGEoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSBBcnJheShTKGEpICsgMSk7XG4gICAgICAgICAgICBUKGEsIGIsIDAsIGIubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBJYShhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBnKGYsIG4sIHApIHtcbiAgICAgICAgICAgICAgZm9yIChmID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgZiA/IGYudG9TdHJpbmcoKSA6IGYgfHwgXCJcIjsgZi5sZW5ndGggPCBuOyApXG4gICAgICAgICAgICAgICAgZiA9IHBbMF0gKyBmO1xuICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGgoZiwgbikge1xuICAgICAgICAgICAgICByZXR1cm4gZyhmLCBuLCBcIjBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtKGYsIG4pIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gcCh5YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwID4geWEgPyAtMSA6IDAgPCB5YSA/IDEgOiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciB5O1xuICAgICAgICAgICAgICAwID09PSAoeSA9IHAoZi5nZXRGdWxsWWVhcigpIC0gbi5nZXRGdWxsWWVhcigpKSkgJiYgMCA9PT0gKHkgPSBwKGYuZ2V0TW9udGgoKSAtIG4uZ2V0TW9udGgoKSkpICYmICh5ID0gcChmLmdldERhdGUoKSAtIG4uZ2V0RGF0ZSgpKSk7XG4gICAgICAgICAgICAgIHJldHVybiB5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcihmKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZi5nZXREYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMjkpO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDMpO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgZi5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB3KGYpIHtcbiAgICAgICAgICAgICAgdmFyIG4gPSBmLkdhO1xuICAgICAgICAgICAgICBmb3IgKGYgPSBuZXcgRGF0ZShuZXcgRGF0ZShmLkhhICsgMTkwMCwgMCwgMSkuZ2V0VGltZSgpKTsgMCA8IG47ICkge1xuICAgICAgICAgICAgICAgIHZhciBwID0gZi5nZXRNb250aCgpLCB5ID0gKFUoZi5nZXRGdWxsWWVhcigpKSA/IEZhIDogR2EpW3BdO1xuICAgICAgICAgICAgICAgIGlmIChuID4geSAtIGYuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgbiAtPSB5IC0gZi5nZXREYXRlKCkgKyAxLCBmLnNldERhdGUoMSksIDExID4gcCA/IGYuc2V0TW9udGgocCArIDEpIDogKGYuc2V0TW9udGgoMCksIGYuc2V0RnVsbFllYXIoZi5nZXRGdWxsWWVhcigpICsgMSkpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZi5zZXREYXRlKGYuZ2V0RGF0ZSgpICsgbik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcCA9IG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSArIDEsIDAsIDQpO1xuICAgICAgICAgICAgICBuID0gcihuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICBmLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICBwID0gcihwKTtcbiAgICAgICAgICAgICAgcmV0dXJuIDAgPj0gbShuLCBmKSA/IDAgPj0gbShwLCBmKSA/IGYuZ2V0RnVsbFllYXIoKSArIDEgOiBmLmdldEZ1bGxZZWFyKCkgOiBmLmdldEZ1bGxZZWFyKCkgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgdCA9IEpbZCArIDQwID4+PiAyID4+PiAwXTtcbiAgICAgICAgICAgIGQgPSB7IFRhOiBJW2QgPj4+IDIgPj4+IDBdLCBTYTogSVtkICsgNCA+Pj4gMiA+Pj4gMF0sIElhOiBJW2QgKyA4ID4+PiAyID4+PiAwXSwgTGE6IElbZCArIDEyID4+PiAyID4+PiAwXSwgSmE6IElbZCArIDE2ID4+PiAyID4+PiAwXSwgSGE6IElbZCArIDIwID4+PiAyID4+PiAwXSwgQmE6IElbZCArIDI0ID4+PiAyID4+PiAwXSwgR2E6IElbZCArIDI4ID4+PiAyID4+PiAwXSwgVmE6IElbZCArIDMyID4+PiAyID4+PiAwXSwgUmE6IElbZCArIDM2ID4+PiAyID4+PiAwXSwgVWE6IHQgPyBSKHQpIDogXCJcIiB9O1xuICAgICAgICAgICAgYyA9IFIoYyk7XG4gICAgICAgICAgICB0ID0ge1xuICAgICAgICAgICAgICBcIiVjXCI6IFwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcbiAgICAgICAgICAgICAgXCIlRFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUZcIjogXCIlWS0lbS0lZFwiLFxuICAgICAgICAgICAgICBcIiVoXCI6IFwiJWJcIixcbiAgICAgICAgICAgICAgXCIlclwiOiBcIiVJOiVNOiVTICVwXCIsXG4gICAgICAgICAgICAgIFwiJVJcIjogXCIlSDolTVwiLFxuICAgICAgICAgICAgICBcIiVUXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIleFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJVhcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiVFY1wiOiBcIiVjXCIsXG4gICAgICAgICAgICAgIFwiJUVDXCI6IFwiJUNcIixcbiAgICAgICAgICAgICAgXCIlRXhcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVFWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUV5XCI6IFwiJXlcIixcbiAgICAgICAgICAgICAgXCIlRVlcIjogXCIlWVwiLFxuICAgICAgICAgICAgICBcIiVPZFwiOiBcIiVkXCIsXG4gICAgICAgICAgICAgIFwiJU9lXCI6IFwiJWVcIixcbiAgICAgICAgICAgICAgXCIlT0hcIjogXCIlSFwiLFxuICAgICAgICAgICAgICBcIiVPSVwiOiBcIiVJXCIsXG4gICAgICAgICAgICAgIFwiJU9tXCI6IFwiJW1cIixcbiAgICAgICAgICAgICAgXCIlT01cIjogXCIlTVwiLFxuICAgICAgICAgICAgICBcIiVPU1wiOiBcIiVTXCIsXG4gICAgICAgICAgICAgIFwiJU91XCI6IFwiJXVcIixcbiAgICAgICAgICAgICAgXCIlT1VcIjogXCIlVVwiLFxuICAgICAgICAgICAgICBcIiVPVlwiOiBcIiVWXCIsXG4gICAgICAgICAgICAgIFwiJU93XCI6IFwiJXdcIixcbiAgICAgICAgICAgICAgXCIlT1dcIjogXCIlV1wiLFxuICAgICAgICAgICAgICBcIiVPeVwiOiBcIiV5XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciB1IGluIHQpXG4gICAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UobmV3IFJlZ0V4cCh1LCBcImdcIiksIHRbdV0pO1xuICAgICAgICAgICAgdmFyIHphID0gXCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSwgQWEgPSBcIkphbnVhcnkgRmVicnVhcnkgTWFyY2ggQXByaWwgTWF5IEp1bmUgSnVseSBBdWd1c3QgU2VwdGVtYmVyIE9jdG9iZXIgTm92ZW1iZXIgRGVjZW1iZXJcIi5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICB0ID0ge1xuICAgICAgICAgICAgICBcIiVhXCI6IChmKSA9PiB6YVtmLkJhXS5zdWJzdHJpbmcoMCwgMyksXG4gICAgICAgICAgICAgIFwiJUFcIjogKGYpID0+IHphW2YuQmFdLFxuICAgICAgICAgICAgICBcIiViXCI6IChmKSA9PiBBYVtmLkphXS5zdWJzdHJpbmcoMCwgMyksXG4gICAgICAgICAgICAgIFwiJUJcIjogKGYpID0+IEFhW2YuSmFdLFxuICAgICAgICAgICAgICBcIiVDXCI6IChmKSA9PiBoKChmLkhhICsgMTkwMCkgLyAxMDAgfCAwLCAyKSxcbiAgICAgICAgICAgICAgXCIlZFwiOiAoZikgPT4gaChmLkxhLCAyKSxcbiAgICAgICAgICAgICAgXCIlZVwiOiAoZikgPT4gZyhmLkxhLCAyLCBcIiBcIiksXG4gICAgICAgICAgICAgIFwiJWdcIjogKGYpID0+IHcoZikudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgICAgIFwiJUdcIjogKGYpID0+IHcoZiksXG4gICAgICAgICAgICAgIFwiJUhcIjogKGYpID0+IGgoZi5JYSwgMiksXG4gICAgICAgICAgICAgIFwiJUlcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmID0gZi5JYTtcbiAgICAgICAgICAgICAgICAwID09IGYgPyBmID0gMTIgOiAxMiA8IGYgJiYgKGYgLT0gMTIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBoKGYsIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiVqXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHAgPSAwOyBwIDw9IGYuSmEgLSAxOyBuICs9IChVKGYuSGEgKyAxOTAwKSA/IEZhIDogR2EpW3ArK10pXG4gICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGgoZi5MYSArIG4sIDMpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiVtXCI6IChmKSA9PiBoKGYuSmEgKyAxLCAyKSxcbiAgICAgICAgICAgICAgXCIlTVwiOiAoZikgPT4gaChmLlNhLCAyKSxcbiAgICAgICAgICAgICAgXCIlblwiOiAoKSA9PiBcIlxcblwiLFxuICAgICAgICAgICAgICBcIiVwXCI6IChmKSA9PiAwIDw9IGYuSWEgJiYgMTIgPiBmLklhID8gXCJBTVwiIDogXCJQTVwiLFxuICAgICAgICAgICAgICBcIiVTXCI6IChmKSA9PiBoKGYuVGEsIDIpLFxuICAgICAgICAgICAgICBcIiV0XCI6ICgpID0+IFwiXHRcIixcbiAgICAgICAgICAgICAgXCIldVwiOiAoZikgPT4gZi5CYSB8fCA3LFxuICAgICAgICAgICAgICBcIiVVXCI6IChmKSA9PiBoKFxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoKGYuR2EgKyA3IC0gZi5CYSkgLyA3KSxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFwiJVZcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IE1hdGguZmxvb3IoKGYuR2EgKyA3IC0gKGYuQmEgKyA2KSAlIDcpIC8gNyk7XG4gICAgICAgICAgICAgICAgMiA+PSAoZi5CYSArIDM3MSAtIGYuR2EgLSAyKSAlIDcgJiYgbisrO1xuICAgICAgICAgICAgICAgIGlmIChuKVxuICAgICAgICAgICAgICAgICAgNTMgPT0gbiAmJiAocCA9IChmLkJhICsgMzcxIC0gZi5HYSkgJSA3LCA0ID09IHAgfHwgMyA9PSBwICYmIFUoZi5IYSkgfHwgKG4gPSAxKSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBuID0gNTI7XG4gICAgICAgICAgICAgICAgICB2YXIgcCA9IChmLkJhICsgNyAtIGYuR2EgLSAxKSAlIDc7XG4gICAgICAgICAgICAgICAgICAoNCA9PSBwIHx8IDUgPT0gcCAmJiBVKGYuSGEgJSA0MDAgLSAxKSkgJiYgbisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaChuLCAyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCIld1wiOiAoZikgPT4gZi5CYSxcbiAgICAgICAgICAgICAgXCIlV1wiOiAoZikgPT4gaChNYXRoLmZsb29yKChmLkdhICsgNyAtIChmLkJhICsgNikgJSA3KSAvIDcpLCAyKSxcbiAgICAgICAgICAgICAgXCIleVwiOiAoZikgPT4gKGYuSGEgKyAxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcbiAgICAgICAgICAgICAgXCIlWVwiOiAoZikgPT4gZi5IYSArIDE5MDAsXG4gICAgICAgICAgICAgIFwiJXpcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmID0gZi5SYTtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IDAgPD0gZjtcbiAgICAgICAgICAgICAgICBmID0gTWF0aC5hYnMoZikgLyA2MDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG4gPyBcIitcIiA6IFwiLVwiKSArIFN0cmluZyhcIjAwMDBcIiArIChmIC8gNjAgKiAxMDAgKyBmICUgNjApKS5zbGljZSgtNCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJVpcIjogKGYpID0+IGYuVWEsXG4gICAgICAgICAgICAgIFwiJSVcIjogKCkgPT4gXCIlXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKC8lJS9nLCBcIlxcMFxcMFwiKTtcbiAgICAgICAgICAgIGZvciAodSBpbiB0KVxuICAgICAgICAgICAgICBjLmluY2x1ZGVzKHUpICYmIChjID0gYy5yZXBsYWNlKG5ldyBSZWdFeHAodSwgXCJnXCIpLCB0W3VdKGQpKSk7XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKC9cXDBcXDAvZywgXCIlXCIpO1xuICAgICAgICAgICAgdSA9IEhhKGMpO1xuICAgICAgICAgICAgaWYgKHUubGVuZ3RoID4gYilcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBHLnNldCh1LCBhID4+PiAwKTtcbiAgICAgICAgICAgIHJldHVybiB1Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBMYSA9IHsgYTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBuZXcgcmEoYSkuTWEoYiA+Pj4gMCwgYyA+Pj4gMCk7XG4gICAgICAgICAgICBzYSA9IGE7XG4gICAgICAgICAgICB0YSsrO1xuICAgICAgICAgICAgdGhyb3cgc2E7XG4gICAgICAgICAgfSwgZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9LCBIOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB9LCB4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB9LCB6OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB9LCBKOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0sIEY6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIEE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIEU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIGc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIHY6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIEc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIHc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIGs6ICgpID0+IDEsIG46IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGEgPSBiICsgMjA5NzE1MiA+Pj4gMCA8IDQxOTQzMDUgLSAhIWEgPyAoYSA+Pj4gMCkgKyA0Mjk0OTY3Mjk2ICogYiA6IE5hTjtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgYSA9IG5ldyBEYXRlKDFlMyAqIGEpO1xuICAgICAgICAgICAgSVtjID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgICAgICAgSVtjICsgNCA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgICAgICAgIElbYyArIDggPj4+IDIgPj4+IDBdID0gYS5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgSVtjICsgMTIgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENEYXRlKCk7XG4gICAgICAgICAgICBJW2MgKyAxNiA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBJW2MgKyAyMCA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwO1xuICAgICAgICAgICAgSVtjICsgMjQgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENEYXkoKTtcbiAgICAgICAgICAgIElbYyArIDI4ID4+PiAyID4+PiAwXSA9IChhLmdldFRpbWUoKSAtIERhdGUuVVRDKGEuZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSwgMCwgMCwgMCwgMCkpIC8gODY0ZTUgfCAwO1xuICAgICAgICAgIH0sIG86IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGEgPSBiICsgMjA5NzE1MiA+Pj4gMCA8IDQxOTQzMDUgLSAhIWEgPyAoYSA+Pj4gMCkgKyA0Mjk0OTY3Mjk2ICogYiA6IE5hTjtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgYSA9IG5ldyBEYXRlKDFlMyAqIGEpO1xuICAgICAgICAgICAgSVtjID4+PiAyID4+PiAwXSA9IGEuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgSVtjICsgNCA+Pj4gMiA+Pj4gMF0gPSBhLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIElbYyArIDggPj4+IDIgPj4+IDBdID0gYS5nZXRIb3VycygpO1xuICAgICAgICAgICAgSVtjICsgMTIgPj4+IDIgPj4+IDBdID0gYS5nZXREYXRlKCk7XG4gICAgICAgICAgICBJW2MgKyAxNiA+Pj4gMiA+Pj4gMF0gPSBhLmdldE1vbnRoKCk7XG4gICAgICAgICAgICBJW2MgKyAyMCA+Pj4gMiA+Pj4gMF0gPSBhLmdldEZ1bGxZZWFyKCkgLSAxOTAwO1xuICAgICAgICAgICAgSVtjICsgMjQgPj4+IDIgPj4+IDBdID0gYS5nZXREYXkoKTtcbiAgICAgICAgICAgIElbYyArIDI4ID4+PiAyID4+PiAwXSA9IChVKGEuZ2V0RnVsbFllYXIoKSkgPyB3YSA6IHhhKVthLmdldE1vbnRoKCldICsgYS5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgIElbYyArIDM2ID4+PiAyID4+PiAwXSA9IC0oNjAgKiBhLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgYiA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgNiwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgSVtjICsgMzIgPj4+IDIgPj4+IDBdID0gKGIgIT0gZCAmJiBhLmdldFRpbWV6b25lT2Zmc2V0KCkgPT0gTWF0aC5taW4oZCwgYikpIHwgMDtcbiAgICAgICAgICB9LCBwOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBiID0gbmV3IERhdGUoSVthICsgMjAgPj4+IDIgPj4+IDBdICsgMTkwMCwgSVthICsgMTYgPj4+IDIgPj4+IDBdLCBJW2EgKyAxMiA+Pj4gMiA+Pj4gMF0sIElbYSArIDggPj4+IDIgPj4+IDBdLCBJW2EgKyA0ID4+PiAyID4+PiAwXSwgSVthID4+PiAyID4+PiAwXSwgMCksIGMgPSBJW2EgKyAzMiA+Pj4gMiA+Pj4gMF0sIGQgPSBiLmdldFRpbWV6b25lT2Zmc2V0KCksIGcgPSBuZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksIDYsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCksIGggPSBuZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksIDAsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCksIG0gPSBNYXRoLm1pbihoLCBnKTtcbiAgICAgICAgICAgIDAgPiBjID8gSVthICsgMzIgPj4+IDIgPj4+IDBdID0gTnVtYmVyKGcgIT0gaCAmJiBtID09IGQpIDogMCA8IGMgIT0gKG0gPT0gZCkgJiYgKGcgPSBNYXRoLm1heChoLCBnKSwgYi5zZXRUaW1lKGIuZ2V0VGltZSgpICsgNmU0ICogKCgwIDwgYyA/IG0gOiBnKSAtIGQpKSk7XG4gICAgICAgICAgICBJW2EgKyAyNCA+Pj4gMiA+Pj4gMF0gPSBiLmdldERheSgpO1xuICAgICAgICAgICAgSVthICsgMjggPj4+IDIgPj4+IDBdID0gKFUoYi5nZXRGdWxsWWVhcigpKSA/IHdhIDogeGEpW2IuZ2V0TW9udGgoKV0gKyBiLmdldERhdGUoKSAtIDEgfCAwO1xuICAgICAgICAgICAgSVthID4+PiAyID4+PiAwXSA9IGIuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgSVthICsgNCA+Pj4gMiA+Pj4gMF0gPSBiLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIElbYSArIDggPj4+IDIgPj4+IDBdID0gYi5nZXRIb3VycygpO1xuICAgICAgICAgICAgSVthICsgMTIgPj4+IDIgPj4+IDBdID0gYi5nZXREYXRlKCk7XG4gICAgICAgICAgICBJW2EgKyAxNiA+Pj4gMiA+Pj4gMF0gPSBiLmdldE1vbnRoKCk7XG4gICAgICAgICAgICBJW2EgKyAyMCA+Pj4gMiA+Pj4gMF0gPSBiLmdldFllYXIoKTtcbiAgICAgICAgICAgIGEgPSBiLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGlzTmFOKGEpID8gKElbSmEoKSA+Pj4gMiA+Pj4gMF0gPSA2MSwgYSA9IC0xKSA6IGEgLz0gMWUzO1xuICAgICAgICAgICAgcmV0dXJuIEthKChRID0gYSwgMSA8PSArTWF0aC5hYnMoUSkgPyAwIDwgUSA/ICtNYXRoLmZsb29yKFEgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IH5+K01hdGguY2VpbCgoUSAtICsofn5RID4+PiAwKSkgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IDApKSwgYSA+Pj4gMDtcbiAgICAgICAgICB9LCBsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAtNTI7XG4gICAgICAgICAgfSwgbTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgdDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgZnVuY3Rpb24gZCh3KSB7XG4gICAgICAgICAgICAgIHJldHVybiAodyA9IHcudG9UaW1lU3RyaW5nKCkubWF0Y2goL1xcKChbQS1aYS16IF0rKVxcKSQvKSkgPyB3WzFdIDogXCJHTVRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGcgPSAoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCksIGggPSBuZXcgRGF0ZShnLCAwLCAxKSwgbSA9IG5ldyBEYXRlKGcsIDYsIDEpO1xuICAgICAgICAgICAgZyA9IGguZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciByID0gbS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgSlthID4+PiAwID4+PiAyID4+PiAwXSA9IDYwICogTWF0aC5tYXgoZywgcik7XG4gICAgICAgICAgICBJW2IgPj4+IDAgPj4+IDIgPj4+IDBdID0gTnVtYmVyKGcgIT0gcik7XG4gICAgICAgICAgICBhID0gZChoKTtcbiAgICAgICAgICAgIGIgPSBkKG0pO1xuICAgICAgICAgICAgYSA9IENhKGEpO1xuICAgICAgICAgICAgYiA9IENhKGIpO1xuICAgICAgICAgICAgciA8IGcgPyAoSltjID4+PiAyID4+PiAwXSA9IGEsIEpbYyArIDQgPj4+IDIgPj4+IDBdID0gYikgOiAoSltjID4+PiAyID4+PiAwXSA9IGIsIEpbYyArIDQgPj4+IDIgPj4+IDBdID0gYSk7XG4gICAgICAgICAgfSwgZDogKCkgPT4ge1xuICAgICAgICAgICAgRShcIlwiKTtcbiAgICAgICAgICB9LCBCOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBWLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBkOyBkID0gSFtiKysgPj4+IDBdOyApIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSAxMDUgIT0gZDtcbiAgICAgICAgICAgICAgZyAmPSAxMTIgIT0gZDtcbiAgICAgICAgICAgICAgYyArPSBnICYmIGMgJSA4ID8gNCA6IDA7XG4gICAgICAgICAgICAgIFYucHVzaCgxMTIgPT0gZCA/IEpbYyA+Pj4gMiA+Pj4gMF0gOiAxMDUgPT0gZCA/IElbYyA+Pj4gMiA+Pj4gMF0gOiBoYVtjID4+PiAzID4+PiAwXSk7XG4gICAgICAgICAgICAgIGMgKz0gZyA/IDggOiA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHFhW2FdLmFwcGx5KG51bGwsIFYpO1xuICAgICAgICAgIH0sIGg6ICgpID0+IERhdGUubm93KCksIHU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIDQyOTQ5MDE3NjA7XG4gICAgICAgICAgfSwgYjogKCkgPT4gcGVyZm9ybWFuY2Uubm93KCksIEk6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgcmV0dXJuIEguY29weVdpdGhpbihhID4+PiAwID4+PiAwLCBiID4+PiAwLCBiICsgKGMgPj4+IDApID4+PiAwKTtcbiAgICAgICAgICB9LCBzOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBiID0gSC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoNDI5NDkwMTc2MCA8IGEpXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyA0ID49IGM7IGMgKj0gMikge1xuICAgICAgICAgICAgICB2YXIgZCA9IGIgKiAoMSArIDAuMiAvIGMpO1xuICAgICAgICAgICAgICBkID0gTWF0aC5taW4oZCwgYSArIDEwMDY2MzI5Nik7XG4gICAgICAgICAgICAgIHZhciBnID0gTWF0aDtcbiAgICAgICAgICAgICAgZCA9IE1hdGgubWF4KGEsIGQpO1xuICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgZyA9IChnLm1pbi5jYWxsKGcsIDQyOTQ5MDE3NjAsIGQgKyAoNjU1MzYgLSBkICUgNjU1MzYpICUgNjU1MzYpIC0gRi5idWZmZXIuYnl0ZUxlbmd0aCArIDY1NTM1KSAvIDY1NTM2O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBGLmdyb3coZyk7XG4gICAgICAgICAgICAgICAgICBpYSgpO1xuICAgICAgICAgICAgICAgICAgdmFyIGggPSAxO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChtKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGggPSB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSwgQzogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgIERhKCkuZm9yRWFjaCgoZCwgZykgPT4ge1xuICAgICAgICAgICAgICB2YXIgaCA9IGIgKyBjO1xuICAgICAgICAgICAgICBnID0gSlthICsgNCAqIGcgPj4+IDIgPj4+IDBdID0gaDtcbiAgICAgICAgICAgICAgZm9yIChoID0gMDsgaCA8IGQubGVuZ3RoOyArK2gpXG4gICAgICAgICAgICAgICAgR1tnKysgPj4+IDAgPj4+IDBdID0gZC5jaGFyQ29kZUF0KGgpO1xuICAgICAgICAgICAgICBHW2cgPj4+IDAgPj4+IDBdID0gMDtcbiAgICAgICAgICAgICAgYyArPSBkLmxlbmd0aCArIDE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0sIEQ6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgYyA9IERhKCk7XG4gICAgICAgICAgICBKW2EgPj4+IDIgPj4+IDBdID0gYy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZCA9IDA7XG4gICAgICAgICAgICBjLmZvckVhY2goKGcpID0+IGQgKz0gZy5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIEpbYiA+Pj4gMiA+Pj4gMF0gPSBkO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSwgZjogKCkgPT4gNTIsIGo6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIDUyO1xuICAgICAgICAgIH0sIHE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIDcwO1xuICAgICAgICAgIH0sIGk6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwLCBoID0gMDsgaCA8IGM7IGgrKykge1xuICAgICAgICAgICAgICB2YXIgbSA9IEpbYiA+Pj4gMiA+Pj4gMF0sIHIgPSBKW2IgKyA0ID4+PiAyID4+PiAwXTtcbiAgICAgICAgICAgICAgYiArPSA4O1xuICAgICAgICAgICAgICBmb3IgKHZhciB3ID0gMDsgdyA8IHI7IHcrKykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gSFttICsgdyA+Pj4gMF0sIHUgPSBFYVthXTtcbiAgICAgICAgICAgICAgICAwID09PSB0IHx8IDEwID09PSB0ID8gKCgxID09PSBhID8gZWEgOiBEKSh2YSh1LCAwKSksIHUubGVuZ3RoID0gMCkgOiB1LnB1c2godCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZyArPSByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSltkID4+PiAyID4+PiAwXSA9IGc7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9LCByOiBJYSwgYzogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIElhKGEgPj4+IDAsIGIgPj4+IDAsIGMgPj4+IDAsIGQgPj4+IDApO1xuICAgICAgICAgIH0gfSwgWSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gYShjKSB7XG4gICAgICAgICAgICAgIFkgPSBjLmV4cG9ydHM7XG4gICAgICAgICAgICAgIFkgPSBNYSgpO1xuICAgICAgICAgICAgICBGID0gWS5LO1xuICAgICAgICAgICAgICBpYSgpO1xuICAgICAgICAgICAgICBMLnVuc2hpZnQoWS5MKTtcbiAgICAgICAgICAgICAgTS0tO1xuICAgICAgICAgICAgICAwID09IE0gJiYgKG51bGwgIT09IE4gJiYgKGNsZWFySW50ZXJ2YWwoTiksIE4gPSBudWxsKSwgTyAmJiAoYyA9IE8sIE8gPSBudWxsLCBjKCkpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYiA9IHsgYTogTGEgfTtcbiAgICAgICAgICAgIE0rKztcbiAgICAgICAgICAgIGlmIChlLmluc3RhbnRpYXRlV2FzbSlcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5pbnN0YW50aWF0ZVdhc20oYiwgYSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgICBEKGBNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAke2N9YCksIGwoYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhKGIsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgYShjLmluc3RhbmNlKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGwpO1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgIH0oKTtcbiAgICAgICAgICBlLl9PcnRJbml0ID0gKGEsIGIpID0+IChlLl9PcnRJbml0ID0gWS5NKShhLCBiKTtcbiAgICAgICAgICBlLl9PcnRHZXRMYXN0RXJyb3IgPSAoYSwgYikgPT4gKGUuX09ydEdldExhc3RFcnJvciA9IFkuTikoYSwgYik7XG4gICAgICAgICAgZS5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSAoYSwgYiwgYywgZCwgZywgaCwgbSwgciwgdywgdCkgPT4gKGUuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zID0gWS5PKShhLCBiLCBjLCBkLCBnLCBoLCBtLCByLCB3LCB0KTtcbiAgICAgICAgICBlLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IChhLCBiKSA9PiAoZS5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXIgPSBZLlApKGEsIGIpO1xuICAgICAgICAgIGUuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZSA9IChhLCBiLCBjKSA9PiAoZS5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gWS5RKShhLCBiLCBjKTtcbiAgICAgICAgICBlLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKGUuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IFkuUikoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zID0gKGEpID0+IChlLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSBZLlMpKGEpO1xuICAgICAgICAgIGUuX09ydENyZWF0ZVNlc3Npb24gPSAoYSwgYiwgYykgPT4gKGUuX09ydENyZWF0ZVNlc3Npb24gPSBZLlQpKGEsIGIsIGMpO1xuICAgICAgICAgIGUuX09ydFJlbGVhc2VTZXNzaW9uID0gKGEpID0+IChlLl9PcnRSZWxlYXNlU2Vzc2lvbiA9IFkuVSkoYSk7XG4gICAgICAgICAgZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IChhLCBiLCBjKSA9PiAoZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IFkuVikoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0R2V0SW5wdXROYW1lID0gKGEsIGIpID0+IChlLl9PcnRHZXRJbnB1dE5hbWUgPSBZLlcpKGEsIGIpO1xuICAgICAgICAgIGUuX09ydEdldE91dHB1dE5hbWUgPSAoYSwgYikgPT4gKGUuX09ydEdldE91dHB1dE5hbWUgPSBZLlgpKGEsIGIpO1xuICAgICAgICAgIGUuX09ydEZyZWUgPSAoYSkgPT4gKGUuX09ydEZyZWUgPSBZLlkpKGEpO1xuICAgICAgICAgIGUuX09ydENyZWF0ZVRlbnNvciA9IChhLCBiLCBjLCBkLCBnLCBoKSA9PiAoZS5fT3J0Q3JlYXRlVGVuc29yID0gWS5aKShhLCBiLCBjLCBkLCBnLCBoKTtcbiAgICAgICAgICBlLl9PcnRHZXRUZW5zb3JEYXRhID0gKGEsIGIsIGMsIGQsIGcpID0+IChlLl9PcnRHZXRUZW5zb3JEYXRhID0gWS5fKShhLCBiLCBjLCBkLCBnKTtcbiAgICAgICAgICBlLl9PcnRSZWxlYXNlVGVuc29yID0gKGEpID0+IChlLl9PcnRSZWxlYXNlVGVuc29yID0gWS4kKShhKTtcbiAgICAgICAgICBlLl9PcnRDcmVhdGVSdW5PcHRpb25zID0gKGEsIGIsIGMsIGQpID0+IChlLl9PcnRDcmVhdGVSdW5PcHRpb25zID0gWS5hYSkoYSwgYiwgYywgZCk7XG4gICAgICAgICAgZS5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKGUuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gWS5iYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSAoYSkgPT4gKGUuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gWS5jYSkoYSk7XG4gICAgICAgICAgZS5fT3J0Q3JlYXRlQmluZGluZyA9IChhKSA9PiAoZS5fT3J0Q3JlYXRlQmluZGluZyA9IFkuZGEpKGEpO1xuICAgICAgICAgIGUuX09ydEJpbmRJbnB1dCA9IChhLCBiLCBjKSA9PiAoZS5fT3J0QmluZElucHV0ID0gWS5lYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0QmluZE91dHB1dCA9IChhLCBiLCBjLCBkKSA9PiAoZS5fT3J0QmluZE91dHB1dCA9IFkuZmEpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIGUuX09ydENsZWFyQm91bmRPdXRwdXRzID0gKGEpID0+IChlLl9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IFkuZ2EpKGEpO1xuICAgICAgICAgIGUuX09ydFJlbGVhc2VCaW5kaW5nID0gKGEpID0+IChlLl9PcnRSZWxlYXNlQmluZGluZyA9IFkuaGEpKGEpO1xuICAgICAgICAgIGUuX09ydFJ1bldpdGhCaW5kaW5nID0gKGEsIGIsIGMsIGQsIGcpID0+IChlLl9PcnRSdW5XaXRoQmluZGluZyA9IFkuaWEpKGEsIGIsIGMsIGQsIGcpO1xuICAgICAgICAgIGUuX09ydFJ1biA9IChhLCBiLCBjLCBkLCBnLCBoLCBtLCByKSA9PiAoZS5fT3J0UnVuID0gWS5qYSkoYSwgYiwgYywgZCwgZywgaCwgbSwgcik7XG4gICAgICAgICAgZS5fT3J0RW5kUHJvZmlsaW5nID0gKGEpID0+IChlLl9PcnRFbmRQcm9maWxpbmcgPSBZLmthKShhKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50ID0gKGEsIGIpID0+IChlLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50ID0gWS5sYSkoYSwgYik7XG4gICAgICAgICAgZS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludCA9IChhKSA9PiAoZS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludCA9IFkubWEpKGEpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nQ3JlYXRlU2Vzc2lvbiA9IChhLCBiLCBjLCBkLCBnLCBoLCBtLCByKSA9PiAoZS5fT3J0VHJhaW5pbmdDcmVhdGVTZXNzaW9uID0gWS5uYSkoYSwgYiwgYywgZCwgZywgaCwgbSwgcik7XG4gICAgICAgICAgZS5fT3J0VHJhaW5pbmdMYXp5UmVzZXRHcmFkID0gKGEpID0+IChlLl9PcnRUcmFpbmluZ0xhenlSZXNldEdyYWQgPSBZLm9hKShhKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcCA9IChhLCBiLCBjLCBkLCBnLCBoKSA9PiAoZS5fT3J0VHJhaW5pbmdSdW5UcmFpblN0ZXAgPSBZLnBhKShhLCBiLCBjLCBkLCBnLCBoKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ09wdGltaXplclN0ZXAgPSAoYSwgYikgPT4gKGUuX09ydFRyYWluaW5nT3B0aW1pemVyU3RlcCA9IFkucWEpKGEsIGIpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nRXZhbFN0ZXAgPSAoYSwgYiwgYywgZCwgZywgaCkgPT4gKGUuX09ydFRyYWluaW5nRXZhbFN0ZXAgPSBZLnJhKShhLCBiLCBjLCBkLCBnLCBoKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ0dldFBhcmFtZXRlcnNTaXplID0gKGEsIGIsIGMpID0+IChlLl9PcnRUcmFpbmluZ0dldFBhcmFtZXRlcnNTaXplID0gWS5zYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc1RvQnVmZmVyID0gKGEsIGIsIGMsIGQpID0+IChlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzVG9CdWZmZXIgPSBZLnRhKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlciA9IChhLCBiLCBjLCBkKSA9PiAoZS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc0Zyb21CdWZmZXIgPSBZLnVhKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXRDb3VudCA9IChhLCBiLCBjLCBkKSA9PiAoZS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0Q291bnQgPSBZLnZhKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXROYW1lID0gKGEsIGIsIGMsIGQpID0+IChlLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXROYW1lID0gWS53YSkoYSwgYiwgYywgZCk7XG4gICAgICAgICAgZS5fT3J0VHJhaW5pbmdSZWxlYXNlU2Vzc2lvbiA9IChhKSA9PiAoZS5fT3J0VHJhaW5pbmdSZWxlYXNlU2Vzc2lvbiA9IFkueGEpKGEpO1xuICAgICAgICAgIHZhciBKYSA9ICgpID0+IChKYSA9IFkueWEpKCksIEJhID0gZS5fbWFsbG9jID0gKGEpID0+IChCYSA9IGUuX21hbGxvYyA9IFkuemEpKGEpO1xuICAgICAgICAgIGUuX2ZyZWUgPSAoYSkgPT4gKGUuX2ZyZWUgPSBZLkFhKShhKTtcbiAgICAgICAgICB2YXIgS2EgPSAoYSkgPT4gKEthID0gWS5DYSkoYSksIE5hID0gKCkgPT4gKE5hID0gWS5EYSkoKSwgT2EgPSAoYSkgPT4gKE9hID0gWS5FYSkoYSksIFBhID0gKGEpID0+IChQYSA9IFkuRmEpKGEpO1xuICAgICAgICAgIGZ1bmN0aW9uIE1hKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBZO1xuICAgICAgICAgICAgYSA9IE9iamVjdC5hc3NpZ24oe30sIGEpO1xuICAgICAgICAgICAgdmFyIGIgPSAoZCkgPT4gKCkgPT4gZCgpID4+PiAwLCBjID0gKGQpID0+IChnKSA9PiBkKGcpID4+PiAwO1xuICAgICAgICAgICAgYS55YSA9IGIoYS55YSk7XG4gICAgICAgICAgICBhLnphID0gYyhhLnphKTtcbiAgICAgICAgICAgIGEuRGEgPSBiKGEuRGEpO1xuICAgICAgICAgICAgYS5GYSA9IGMoYS5GYSk7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdGFja0FsbG9jID0gUGE7XG4gICAgICAgICAgZS5zdGFja1NhdmUgPSBOYTtcbiAgICAgICAgICBlLnN0YWNrUmVzdG9yZSA9IE9hO1xuICAgICAgICAgIGUuVVRGOFRvU3RyaW5nID0gUjtcbiAgICAgICAgICBlLnN0cmluZ1RvVVRGOCA9IChhLCBiLCBjKSA9PiBUKGEsIEgsIGIsIGMpO1xuICAgICAgICAgIGUubGVuZ3RoQnl0ZXNVVEY4ID0gUztcbiAgICAgICAgICB2YXIgWjtcbiAgICAgICAgICBPID0gZnVuY3Rpb24gUWEoKSB7XG4gICAgICAgICAgICBaIHx8IFJhKCk7XG4gICAgICAgICAgICBaIHx8IChPID0gUWEpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gUmEoKSB7XG4gICAgICAgICAgICBpZiAoISgwIDwgTSkpIHtcbiAgICAgICAgICAgICAgaWYgKGUucHJlUnVuKVxuICAgICAgICAgICAgICAgIGZvciAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLnByZVJ1biAmJiAoZS5wcmVSdW4gPSBbZS5wcmVSdW5dKTsgZS5wcmVSdW4ubGVuZ3RoOyApIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZS5wcmVSdW4uc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgIEsudW5zaGlmdChhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAoOyAwIDwgSy5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICBLLnNoaWZ0KCkoZSk7XG4gICAgICAgICAgICAgIGlmICghKDAgPCBNIHx8IFogfHwgKFogPSB0cnVlLCBlLmNhbGxlZFJ1biA9IHRydWUsIGZhKSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IEwubGVuZ3RoOyApXG4gICAgICAgICAgICAgICAgICBMLnNoaWZ0KCkoZSk7XG4gICAgICAgICAgICAgICAgZm9yIChrKGUpOyAwIDwgamEubGVuZ3RoOyApXG4gICAgICAgICAgICAgICAgICBqYS5zaGlmdCgpKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFJhKCk7XG4gICAgICAgICAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeTtcbiAgICAgICAgfTtcbiAgICAgIH0pKCk7XG4gICAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBvcnRXYXNtO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVtcImFtZFwiXSlcbiAgICAgICAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHNcbiAgdmFyIHJlcXVpcmVfd29ya2VyX3RocmVhZHMgPSBfX2NvbW1vbkpTKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHNcIigpIHtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6cGVyZl9ob29rc1xuICB2YXIgcmVxdWlyZV9wZXJmX2hvb2tzID0gX19jb21tb25KUyh7XG4gICAgXCJub2RlanMtaWdub3JlOnBlcmZfaG9va3NcIigpIHtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6b3NcbiAgdmFyIG9zX2V4cG9ydHMgPSB7fTtcbiAgX19leHBvcnQob3NfZXhwb3J0cywge1xuICAgIGNwdXM6ICgpID0+IGNwdXNcbiAgfSk7XG4gIHZhciBjcHVzO1xuICB2YXIgaW5pdF9vcyA9IF9fZXNtKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6b3NcIigpIHtcbiAgICAgIGNwdXMgPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyB3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC5qc1xuICB2YXIgcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZCA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgdmFyIG9ydFdhc21UaHJlYWRlZCA9ICgoKSA9PiB7XG4gICAgICAgIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuICAgICAgICAgIGZ1bmN0aW9uIGFhKCkge1xuICAgICAgICAgICAgZS5idWZmZXIgIT0gbC5idWZmZXIgJiYgbSgpO1xuICAgICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gYmE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHAoKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gY2E7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHIoKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gZGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGVhKCkge1xuICAgICAgICAgICAgZS5idWZmZXIgIT0gbC5idWZmZXIgJiYgbSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdiA9IG1vZHVsZUFyZywgaGEsIHg7XG4gICAgICAgICAgdi5yZWFkeSA9IG5ldyBQcm9taXNlKChhLCBiKSA9PiB7XG4gICAgICAgICAgICBoYSA9IGE7XG4gICAgICAgICAgICB4ID0gYjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgaWEgPSBPYmplY3QuYXNzaWduKHt9LCB2KSwgamEgPSBcIi4vdGhpcy5wcm9ncmFtXCIsIHogPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgdGhyb3cgYjtcbiAgICAgICAgICB9LCBrYSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHdpbmRvdywgQSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW1wb3J0U2NyaXB0cywgQiA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsIEQgPSB2LkVOVklST05NRU5UX0lTX1BUSFJFQUQgfHwgZmFsc2UsIEUgPSBcIlwiO1xuICAgICAgICAgIGZ1bmN0aW9uIGxhKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB2LmxvY2F0ZUZpbGUgPyB2LmxvY2F0ZUZpbGUoYSwgRSkgOiBFICsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG1hLCBHLCBIO1xuICAgICAgICAgIGlmIChCKSB7XG4gICAgICAgICAgICB2YXIgZnMgPSAoaW5pdF9mcygpLCBfX3RvQ29tbW9uSlMoZnNfZXhwb3J0cykpLCBuYSA9IChpbml0X3BhdGgoKSwgX190b0NvbW1vbkpTKHBhdGhfZXhwb3J0cykpO1xuICAgICAgICAgICAgRSA9IEEgPyBuYS5kaXJuYW1lKEUpICsgXCIvXCIgOiBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICAgICAgICAgIG1hID0gKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgYiA9IEkoYikgPyBuZXcgVVJMKGIpIDogbmEubm9ybWFsaXplKGIpO1xuICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGIsIGMgPyB2b2lkIDAgOiBcInV0ZjhcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgSCA9IChiKSA9PiB7XG4gICAgICAgICAgICAgIGIgPSBtYShiLCB0cnVlKTtcbiAgICAgICAgICAgICAgYi5idWZmZXIgfHwgKGIgPSBuZXcgVWludDhBcnJheShiKSk7XG4gICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEcgPSAoYiwgYywgZCwgZyA9IHRydWUpID0+IHtcbiAgICAgICAgICAgICAgYiA9IEkoYikgPyBuZXcgVVJMKGIpIDogbmEubm9ybWFsaXplKGIpO1xuICAgICAgICAgICAgICBmcy5yZWFkRmlsZShiLCBnID8gdm9pZCAwIDogXCJ1dGY4XCIsIChoLCBrKSA9PiB7XG4gICAgICAgICAgICAgICAgaCA/IGQoaCkgOiBjKGcgPyBrLmJ1ZmZlciA6IGspO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAhdi50aGlzUHJvZ3JhbSAmJiAxIDwgcHJvY2Vzcy5hcmd2Lmxlbmd0aCAmJiAoamEgPSBwcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikpO1xuICAgICAgICAgICAgcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuICAgICAgICAgICAgeiA9IChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSBiO1xuICAgICAgICAgICAgICB0aHJvdyBjO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHYuaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICAgIGxldCBhO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYSA9IHJlcXVpcmVfd29ya2VyX3RocmVhZHMoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgY29uc29sZS5lcnJvcignVGhlIFwid29ya2VyX3RocmVhZHNcIiBtb2R1bGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIG5vZGUuanMgYnVpbGQgLSBwZXJoYXBzIGEgbmV3ZXIgdmVyc2lvbiBpcyBuZWVkZWQ/JyksIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbG9iYWwuV29ya2VyID0gYS5Xb3JrZXI7XG4gICAgICAgICAgfSBlbHNlIGlmIChrYSB8fCBBKVxuICAgICAgICAgICAgQSA/IEUgPSBzZWxmLmxvY2F0aW9uLmhyZWYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIChFID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCB0eXBlb2YgX3NjcmlwdERpciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfc2NyaXB0RGlyICYmIChFID0gX3NjcmlwdERpciksIDAgIT09IEUuaW5kZXhPZihcImJsb2I6XCIpID8gRSA9IEUuc3Vic3RyKDAsIEUucmVwbGFjZSgvWz8jXS4qLywgXCJcIikubGFzdEluZGV4T2YoXCIvXCIpICsgMSkgOiBFID0gXCJcIiwgQiB8fCAobWEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBiLm9wZW4oXCJHRVRcIiwgYSwgZmFsc2UpO1xuICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybiBiLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH0sIEEgJiYgKEggPSAoYSkgPT4ge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBiLm9wZW4oXCJHRVRcIiwgYSwgZmFsc2UpO1xuICAgICAgICAgICAgICBiLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgYi5zZW5kKG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYi5yZXNwb25zZSk7XG4gICAgICAgICAgICB9KSwgRyA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBkID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGQub3BlbihcIkdFVFwiLCBhLCB0cnVlKTtcbiAgICAgICAgICAgICAgZC5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgIGQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIDIwMCA9PSBkLnN0YXR1cyB8fCAwID09IGQuc3RhdHVzICYmIGQucmVzcG9uc2UgPyBiKGQucmVzcG9uc2UpIDogYygpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBkLm9uZXJyb3IgPSBjO1xuICAgICAgICAgICAgICBkLnNlbmQobnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBCICYmIFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHBlcmZvcm1hbmNlICYmIChnbG9iYWwucGVyZm9ybWFuY2UgPSByZXF1aXJlX3BlcmZfaG9va3MoKS5wZXJmb3JtYW5jZSk7XG4gICAgICAgICAgdmFyIG9hID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwgcGEgPSBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7XG4gICAgICAgICAgQiAmJiAob2EgPSAoLi4uYSkgPT4gZnMud3JpdGVTeW5jKDEsIGEuam9pbihcIiBcIikgKyBcIlxcblwiKSwgcGEgPSAoLi4uYSkgPT4gZnMud3JpdGVTeW5jKDIsIGEuam9pbihcIiBcIikgKyBcIlxcblwiKSk7XG4gICAgICAgICAgdmFyIHFhID0gb2EsIEogPSBwYTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHYsIGlhKTtcbiAgICAgICAgICBpYSA9IG51bGw7XG4gICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYgcmEoXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXCIpO1xuICAgICAgICAgIHZhciBlLCBzYSwgSyA9IGZhbHNlLCBMLCBsLCBiYSwgY2EsIGRhLCBmYTtcbiAgICAgICAgICBmdW5jdGlvbiBtKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBlLmJ1ZmZlcjtcbiAgICAgICAgICAgIHYuSEVBUDggPSBsID0gbmV3IEludDhBcnJheShhKTtcbiAgICAgICAgICAgIHYuSEVBUDE2ID0gbmV3IEludDE2QXJyYXkoYSk7XG4gICAgICAgICAgICB2LkhFQVBVOCA9IGJhID0gbmV3IFVpbnQ4QXJyYXkoYSk7XG4gICAgICAgICAgICB2LkhFQVBVMTYgPSBuZXcgVWludDE2QXJyYXkoYSk7XG4gICAgICAgICAgICB2LkhFQVAzMiA9IGNhID0gbmV3IEludDMyQXJyYXkoYSk7XG4gICAgICAgICAgICB2LkhFQVBVMzIgPSBkYSA9IG5ldyBVaW50MzJBcnJheShhKTtcbiAgICAgICAgICAgIHYuSEVBUEYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoYSk7XG4gICAgICAgICAgICB2LkhFQVBGNjQgPSBmYSA9IG5ldyBGbG9hdDY0QXJyYXkoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0YSA9IDE2Nzc3MjE2O1xuICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgZSA9IHYud2FzbU1lbW9yeTtcbiAgICAgICAgICBlbHNlIGlmICh2Lndhc21NZW1vcnkpXG4gICAgICAgICAgICBlID0gdi53YXNtTWVtb3J5O1xuICAgICAgICAgIGVsc2UgaWYgKGUgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHsgaW5pdGlhbDogdGEgLyA2NTUzNiwgbWF4aW11bTogNjU1MzYsIHNoYXJlZDogdHJ1ZSB9KSwgIShlLmJ1ZmZlciBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyKSlcbiAgICAgICAgICAgIHRocm93IEooXCJyZXF1ZXN0ZWQgYSBzaGFyZWQgV2ViQXNzZW1ibHkuTWVtb3J5IGJ1dCB0aGUgcmV0dXJuZWQgYnVmZmVyIGlzIG5vdCBhIFNoYXJlZEFycmF5QnVmZmVyLCBpbmRpY2F0aW5nIHRoYXQgd2hpbGUgdGhlIGJyb3dzZXIgaGFzIFNoYXJlZEFycmF5QnVmZmVyIGl0IGRvZXMgbm90IGhhdmUgV2ViQXNzZW1ibHkgdGhyZWFkcyBzdXBwb3J0IC0geW91IG1heSBuZWVkIHRvIHNldCBhIGZsYWdcIiksIEIgJiYgSihcIihvbiBub2RlIHlvdSBtYXkgbmVlZDogLS1leHBlcmltZW50YWwtd2FzbS10aHJlYWRzIC0tZXhwZXJpbWVudGFsLXdhc20tYnVsay1tZW1vcnkgYW5kL29yIHJlY2VudCB2ZXJzaW9uKVwiKSwgRXJyb3IoXCJiYWQgbWVtb3J5XCIpO1xuICAgICAgICAgIG0oKTtcbiAgICAgICAgICB0YSA9IGUuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgdmFyIHVhID0gW10sIHZhID0gW10sIHdhID0gW10sIE0gPSAwLCB4YSA9IG51bGwsIE4gPSBudWxsO1xuICAgICAgICAgIGZ1bmN0aW9uIHlhKCkge1xuICAgICAgICAgICAgTS0tO1xuICAgICAgICAgICAgaWYgKDAgPT0gTSAmJiAobnVsbCAhPT0geGEgJiYgKGNsZWFySW50ZXJ2YWwoeGEpLCB4YSA9IG51bGwpLCBOKSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IE47XG4gICAgICAgICAgICAgIE4gPSBudWxsO1xuICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHJhKGEpIHtcbiAgICAgICAgICAgIGEgPSBcIkFib3J0ZWQoXCIgKyBhICsgXCIpXCI7XG4gICAgICAgICAgICBKKGEpO1xuICAgICAgICAgICAgSyA9IHRydWU7XG4gICAgICAgICAgICBMID0gMTtcbiAgICAgICAgICAgIGEgPSBuZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKGEgKyBcIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIik7XG4gICAgICAgICAgICB4KGEpO1xuICAgICAgICAgICAgdGhyb3cgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHphID0gKGEpID0+IGEuc3RhcnRzV2l0aChcImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxcIiksIEkgPSAoYSkgPT4gYS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSwgTztcbiAgICAgICAgICBPID0gXCJvcnQtd2FzbS10aHJlYWRlZC53YXNtXCI7XG4gICAgICAgICAgemEoTykgfHwgKE8gPSBsYShPKSk7XG4gICAgICAgICAgZnVuY3Rpb24gQWEoYSkge1xuICAgICAgICAgICAgaWYgKEgpXG4gICAgICAgICAgICAgIHJldHVybiBIKGEpO1xuICAgICAgICAgICAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBCYShhKSB7XG4gICAgICAgICAgICBpZiAoa2EgfHwgQSkge1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBmZXRjaCAmJiAhSShhKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goYSwgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICghYi5vaylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIiArIGEgKyBcIidcIjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBiLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4gQWEoYSkpO1xuICAgICAgICAgICAgICBpZiAoRylcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgICAgIEcoYSwgKGQpID0+IGIobmV3IFVpbnQ4QXJyYXkoZCkpLCBjKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IEFhKGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gQ2EoYSwgYiwgYykge1xuICAgICAgICAgICAgcmV0dXJuIEJhKGEpLnRoZW4oKGQpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGQsIGIpKS50aGVuKChkKSA9PiBkKS50aGVuKGMsIChkKSA9PiB7XG4gICAgICAgICAgICAgIEooYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7ZH1gKTtcbiAgICAgICAgICAgICAgcmEoZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gRGEoYSwgYikge1xuICAgICAgICAgICAgdmFyIGMgPSBPO1xuICAgICAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgfHwgemEoYykgfHwgSShjKSB8fCBCIHx8IFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZmV0Y2ggPyBDYShjLCBhLCBiKSA6IGZldGNoKGMsIHsgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIiB9KS50aGVuKChkKSA9PiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhkLCBhKS50aGVuKGIsIGZ1bmN0aW9uKGcpIHtcbiAgICAgICAgICAgICAgSihgd2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6ICR7Z31gKTtcbiAgICAgICAgICAgICAgSihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO1xuICAgICAgICAgICAgICByZXR1cm4gQ2EoYywgYSwgYik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBQLCBFYSA9IHsgOTIwMTQwOiAoYSwgYiwgYywgZCkgPT4ge1xuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHYgfHwgIXYuY2IpXG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgYSA9IFEoYSA+Pj4gMCk7XG4gICAgICAgICAgICBhLnN0YXJ0c1dpdGgoXCIuL1wiKSAmJiAoYSA9IGEuc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgICAgIGEgPSB2LmNiLmdldChhKTtcbiAgICAgICAgICAgIGlmICghYSlcbiAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYiArIGMgPiBhLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG4oKS5zZXQoYS5zdWJhcnJheShiLCBiICsgYyksIGQgPj4+IDApLCAwO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gfTtcbiAgICAgICAgICBmdW5jdGlvbiBSKGEpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiRXhpdFN0YXR1c1wiO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gYFByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoJHthfSlgO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgRmEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgYS50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIGEub25tZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LCBIYSA9IChhKSA9PiB7XG4gICAgICAgICAgICAwID09IFMuUGEubGVuZ3RoICYmIChHYSgpLCBTLllhKFMuUGFbMF0pKTtcbiAgICAgICAgICAgIHZhciBiID0gUy5QYS5wb3AoKTtcbiAgICAgICAgICAgIGlmICghYilcbiAgICAgICAgICAgICAgcmV0dXJuIDY7XG4gICAgICAgICAgICBTLlFhLnB1c2goYik7XG4gICAgICAgICAgICBTLk1hW2EuT2FdID0gYjtcbiAgICAgICAgICAgIGIuT2EgPSBhLk9hO1xuICAgICAgICAgICAgdmFyIGMgPSB7IGNtZDogXCJydW5cIiwgc3RhcnRfcm91dGluZTogYS5rYiwgYXJnOiBhLmhiLCBwdGhyZWFkX3B0cjogYS5PYSB9O1xuICAgICAgICAgICAgQiAmJiBiLnVucmVmKCk7XG4gICAgICAgICAgICBiLnBvc3RNZXNzYWdlKGMsIGEucWIpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSwgVCA9IDAsIElhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpIDogdm9pZCAwLCBKYSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBkID0gYiArIGM7XG4gICAgICAgICAgICBmb3IgKGMgPSBiOyBhW2NdICYmICEoYyA+PSBkKTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBhLmJ1ZmZlciAmJiBJYSlcbiAgICAgICAgICAgICAgcmV0dXJuIElhLmRlY29kZShhLmJ1ZmZlciBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyID8gYS5zbGljZShiLCBjKSA6IGEuc3ViYXJyYXkoYiwgYykpO1xuICAgICAgICAgICAgZm9yIChkID0gXCJcIjsgYiA8IGM7ICkge1xuICAgICAgICAgICAgICB2YXIgZyA9IGFbYisrXTtcbiAgICAgICAgICAgICAgaWYgKGcgJiAxMjgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICgxOTIgPT0gKGcgJiAyMjQpKVxuICAgICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChnICYgMzEpIDw8IDYgfCBoKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBrID0gYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICBnID0gMjI0ID09IChnICYgMjQwKSA/IChnICYgMTUpIDw8IDEyIHwgaCA8PCA2IHwgayA6IChnICYgNykgPDwgMTggfCBoIDw8IDEyIHwgayA8PCA2IHwgYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICA2NTUzNiA+IGcgPyBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZykgOiAoZyAtPSA2NTUzNiwgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgZyA+PiAxMCwgNTYzMjAgfCBnICYgMTAyMykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgfSwgUSA9IChhLCBiKSA9PiAoYSA+Pj49IDApID8gSmEobigpLCBhLCBiKSA6IFwiXCIsIExhID0gKGEpID0+IHtcbiAgICAgICAgICAgIHZhciBiID0gS2EoKTtcbiAgICAgICAgICAgIGEgPSBhKCk7XG4gICAgICAgICAgICBVKGIpO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBWKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCAtIDIsIGQgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICByZXR1cm4gTGEoKCkgPT4ge1xuICAgICAgICAgICAgICBmb3IgKHZhciBnID0gTWEoOCAqIGMpLCBoID0gZyA+Pj4gMywgayA9IDA7IGsgPCBjOyBrKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGRbMiArIGtdO1xuICAgICAgICAgICAgICAgIGVhKClbaCArIGsgPj4+IDBdID0gdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gTmEoYSwgYywgZywgYik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gT2EoYSkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDAsIDEsIGEpO1xuICAgICAgICAgICAgTCA9IGE7XG4gICAgICAgICAgICAwIDwgVCB8fCAoUy5sYigpLCB2Lm9uRXhpdD8uKGEpLCBLID0gdHJ1ZSk7XG4gICAgICAgICAgICB6KGEsIG5ldyBSKGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFFhID0gKGEpID0+IHtcbiAgICAgICAgICAgIEwgPSBhO1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHRocm93IFBhKGEpLCBcInVud2luZFwiO1xuICAgICAgICAgICAgT2EoYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBSYSgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSB2Lm51bVRocmVhZHM7IGEtLTsgKVxuICAgICAgICAgICAgICBHYSgpO1xuICAgICAgICAgICAgdWEudW5zaGlmdCgoKSA9PiB7XG4gICAgICAgICAgICAgIE0rKztcbiAgICAgICAgICAgICAgU2EoKCkgPT4geWEoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gR2EoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGxhKFwib3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIpO1xuICAgICAgICAgICAgYSA9IG5ldyBXb3JrZXIoYSk7XG4gICAgICAgICAgICBTLlBhLnB1c2goYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFNhKGEpIHtcbiAgICAgICAgICAgIEQgPyBhKCkgOiBQcm9taXNlLmFsbChTLlBhLm1hcChTLllhKSkudGhlbihhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFMgPSB7IFBhOiBbXSwgUWE6IFtdLCBiYjogW10sIE1hOiB7fSwgV2EoKSB7XG4gICAgICAgICAgICBEID8gKFMucmVjZWl2ZU9iamVjdFRyYW5zZmVyID0gUy5qYiwgUy50aHJlYWRJbml0VExTID0gUy5hYiwgUy5zZXRFeGl0U3RhdHVzID0gUy4kYSkgOiBSYSgpO1xuICAgICAgICAgIH0sICRhOiAoYSkgPT4gTCA9IGEsIHRiOiBbXCIkdGVybWluYXRlV29ya2VyXCJdLCBsYjogKCkgPT4ge1xuICAgICAgICAgICAgZm9yICh2YXIgYSBvZiBTLlFhKVxuICAgICAgICAgICAgICBGYShhKTtcbiAgICAgICAgICAgIGZvciAoYSBvZiBTLlBhKVxuICAgICAgICAgICAgICBGYShhKTtcbiAgICAgICAgICAgIFMuUGEgPSBbXTtcbiAgICAgICAgICAgIFMuUWEgPSBbXTtcbiAgICAgICAgICAgIFMuTWEgPSBbXTtcbiAgICAgICAgICB9LCBaYTogKGEpID0+IHtcbiAgICAgICAgICAgIHZhciBiID0gYS5PYTtcbiAgICAgICAgICAgIGRlbGV0ZSBTLk1hW2JdO1xuICAgICAgICAgICAgUy5QYS5wdXNoKGEpO1xuICAgICAgICAgICAgUy5RYS5zcGxpY2UoUy5RYS5pbmRleE9mKGEpLCAxKTtcbiAgICAgICAgICAgIGEuT2EgPSAwO1xuICAgICAgICAgICAgVGEoYik7XG4gICAgICAgICAgfSwgamIoKSB7XG4gICAgICAgICAgfSwgYWIoKSB7XG4gICAgICAgICAgICBTLmJiLmZvckVhY2goKGEpID0+IGEoKSk7XG4gICAgICAgICAgfSwgWWE6IChhKSA9PiBuZXcgUHJvbWlzZSgoYikgPT4ge1xuICAgICAgICAgICAgYS5vbm1lc3NhZ2UgPSAoaCkgPT4ge1xuICAgICAgICAgICAgICBoID0gaC5kYXRhO1xuICAgICAgICAgICAgICB2YXIgayA9IGguY21kO1xuICAgICAgICAgICAgICBpZiAoaC50YXJnZXRUaHJlYWQgJiYgaC50YXJnZXRUaHJlYWQgIT0gVygpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBTLk1hW2gudGFyZ2V0VGhyZWFkXTtcbiAgICAgICAgICAgICAgICB0ID8gdC5wb3N0TWVzc2FnZShoLCBoLnRyYW5zZmVyTGlzdCkgOiBKKGBJbnRlcm5hbCBlcnJvciEgV29ya2VyIHNlbnQgYSBtZXNzYWdlIFwiJHtrfVwiIHRvIHRhcmdldCBwdGhyZWFkICR7aC50YXJnZXRUaHJlYWR9LCBidXQgdGhhdCB0aHJlYWQgbm8gbG9uZ2VyIGV4aXN0cyFgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcImNoZWNrTWFpbGJveFwiID09PSBrKVxuICAgICAgICAgICAgICAgIFgoKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJzcGF3blRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgIEhhKGgpO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcImNsZWFudXBUaHJlYWRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICBTLlphKFMuTWFbaC50aHJlYWRdKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJraWxsVGhyZWFkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgaCA9IGgudGhyZWFkLCBrID0gUy5NYVtoXSwgZGVsZXRlIFMuTWFbaF0sIEZhKGspLCBUYShoKSwgUy5RYS5zcGxpY2UoUy5RYS5pbmRleE9mKGspLCAxKSwgay5PYSA9IDA7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwiY2FuY2VsVGhyZWFkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgUy5NYVtoLnRocmVhZF0ucG9zdE1lc3NhZ2UoeyBjbWQ6IFwiY2FuY2VsXCIgfSk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwibG9hZGVkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgYS5sb2FkZWQgPSB0cnVlLCBCICYmICFhLk9hICYmIGEudW5yZWYoKSwgYihhKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJhbGVydFwiID09PSBrKVxuICAgICAgICAgICAgICAgIGFsZXJ0KGBUaHJlYWQgJHtoLnRocmVhZElkfTogJHtoLnRleHR9YCk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwic2V0aW1tZWRpYXRlXCIgPT09IGgudGFyZ2V0KVxuICAgICAgICAgICAgICAgIGEucG9zdE1lc3NhZ2UoaCk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwiY2FsbEhhbmRsZXJcIiA9PT0gaylcbiAgICAgICAgICAgICAgICB2W2guaGFuZGxlcl0oLi4uaC5hcmdzKTtcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGsgJiYgSihgd29ya2VyIHNlbnQgYW4gdW5rbm93biBjb21tYW5kICR7a31gKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhLm9uZXJyb3IgPSAoaCkgPT4ge1xuICAgICAgICAgICAgICBKKGAke1wid29ya2VyIHNlbnQgYW4gZXJyb3IhXCJ9ICR7aC5maWxlbmFtZX06JHtoLmxpbmVub306ICR7aC5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICB0aHJvdyBoO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEIgJiYgKGEub24oXCJtZXNzYWdlXCIsIChoKSA9PiBhLm9ubWVzc2FnZSh7IGRhdGE6IGggfSkpLCBhLm9uKFwiZXJyb3JcIiwgKGgpID0+IGEub25lcnJvcihoKSkpO1xuICAgICAgICAgICAgdmFyIGMgPSBbXSwgZCA9IFtcIm9uRXhpdFwiXSwgZztcbiAgICAgICAgICAgIGZvciAoZyBvZiBkKVxuICAgICAgICAgICAgICB2Lmhhc093blByb3BlcnR5KGcpICYmIGMucHVzaChnKTtcbiAgICAgICAgICAgIGEucG9zdE1lc3NhZ2UoeyBjbWQ6IFwibG9hZFwiLCBoYW5kbGVyczogYywgdXJsT3JCbG9iOiB2Lm1haW5TY3JpcHRVcmxPckJsb2IgfHwgX3NjcmlwdERpciwgd2FzbU1lbW9yeTogZSwgd2FzbU1vZHVsZTogc2EgfSk7XG4gICAgICAgICAgfSkgfTtcbiAgICAgICAgICB2LlBUaHJlYWQgPSBTO1xuICAgICAgICAgIHZhciBVYSA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKDsgMCA8IGEubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGEuc2hpZnQoKSh2KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHYuZXN0YWJsaXNoU3RhY2tTcGFjZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHZhciBhID0gVygpLCBiID0gcigpW2EgKyA1MiA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICBhID0gcigpW2EgKyA1NiA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICBWYShiLCBiIC0gYSk7XG4gICAgICAgICAgICBVKGIpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gUGEoYSkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDEsIDAsIGEpO1xuICAgICAgICAgICAgUWEoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBXYSA9IFtdLCBYYTtcbiAgICAgICAgICB2Lmludm9rZUVudHJ5UG9pbnQgPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgdmFyIGMgPSBXYVthXTtcbiAgICAgICAgICAgIGMgfHwgKGEgPj0gV2EubGVuZ3RoICYmIChXYS5sZW5ndGggPSBhICsgMSksIFdhW2FdID0gYyA9IFhhLmdldChhKSk7XG4gICAgICAgICAgICBhID0gYyhiKTtcbiAgICAgICAgICAgIDAgPCBUID8gUy4kYShhKSA6IFlhKGEpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gWmEoYSkge1xuICAgICAgICAgICAgdGhpcy5WYSA9IGEgLSAyNDtcbiAgICAgICAgICAgIHRoaXMuZ2IgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgIHIoKVt0aGlzLlZhICsgNCA+Pj4gMiA+Pj4gMF0gPSBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZmIgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgIHIoKVt0aGlzLlZhICsgOCA+Pj4gMiA+Pj4gMF0gPSBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuV2EgPSBmdW5jdGlvbihiLCBjKSB7XG4gICAgICAgICAgICAgIHRoaXMuZWIoKTtcbiAgICAgICAgICAgICAgdGhpcy5nYihiKTtcbiAgICAgICAgICAgICAgdGhpcy5mYihjKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmViID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHIoKVt0aGlzLlZhICsgMTYgPj4+IDIgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciAkYSA9IDAsIGFiID0gMDtcbiAgICAgICAgICBmdW5jdGlvbiBiYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFYoMiwgMSwgYSwgYiwgYywgZCkgOiBjYihhLCBiLCBjLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gY2IoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIpXG4gICAgICAgICAgICAgIHJldHVybiBKKFwiQ3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IFNoYXJlZEFycmF5QnVmZmVyLCBwdGhyZWFkcyBhcmUgbm90IGF2YWlsYWJsZSFcIiksIDY7XG4gICAgICAgICAgICB2YXIgZyA9IFtdO1xuICAgICAgICAgICAgaWYgKEQgJiYgMCA9PT0gZy5sZW5ndGgpXG4gICAgICAgICAgICAgIHJldHVybiBiYihhLCBiLCBjLCBkKTtcbiAgICAgICAgICAgIGEgPSB7IGtiOiBjLCBPYTogYSwgaGI6IGQsIHFiOiBnIH07XG4gICAgICAgICAgICByZXR1cm4gRCA/IChhLnNiID0gXCJzcGF3blRocmVhZFwiLCBwb3N0TWVzc2FnZShhLCBnKSwgMCkgOiBIYShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZGIoYSwgYiwgYykge1xuICAgICAgICAgICAgcmV0dXJuIEQgPyBWKDMsIDEsIGEsIGIsIGMpIDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZWIoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDQsIDEsIGEsIGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZmIgPSAoYSkgPT4ge1xuICAgICAgICAgICAgZm9yICh2YXIgYiA9IDAsIGMgPSAwOyBjIDwgYS5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgICB2YXIgZCA9IGEuY2hhckNvZGVBdChjKTtcbiAgICAgICAgICAgICAgMTI3ID49IGQgPyBiKysgOiAyMDQ3ID49IGQgPyBiICs9IDIgOiA1NTI5NiA8PSBkICYmIDU3MzQzID49IGQgPyAoYiArPSA0LCArK2MpIDogYiArPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfSwgZ2IgPSAoYSwgYiwgYywgZCkgPT4ge1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoISgwIDwgZCkpXG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgdmFyIGcgPSBjO1xuICAgICAgICAgICAgZCA9IGMgKyBkIC0gMTtcbiAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgYS5sZW5ndGg7ICsraCkge1xuICAgICAgICAgICAgICB2YXIgayA9IGEuY2hhckNvZGVBdChoKTtcbiAgICAgICAgICAgICAgaWYgKDU1Mjk2IDw9IGsgJiYgNTczNDMgPj0gaykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gYS5jaGFyQ29kZUF0KCsraCk7XG4gICAgICAgICAgICAgICAgayA9IDY1NTM2ICsgKChrICYgMTAyMykgPDwgMTApIHwgdCAmIDEwMjM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKDEyNyA+PSBrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPj0gZClcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IGs7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKDIwNDcgPj0gaykge1xuICAgICAgICAgICAgICAgICAgaWYgKGMgKyAxID49IGQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTkyIHwgayA+PiA2O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNjU1MzUgPj0gaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDIgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMjI0IHwgayA+PiAxMjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICsgMyA+PSBkKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAyNDAgfCBrID4+IDE4O1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBrID4+IDEyICYgNjM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBrID4+IDYgJiA2MztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgayAmIDYzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiW2MgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIHJldHVybiBjIC0gZztcbiAgICAgICAgICB9LCBoYiA9IChhLCBiLCBjKSA9PiBnYihhLCBuKCksIGIsIGMpO1xuICAgICAgICAgIGZ1bmN0aW9uIGliKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVig1LCAxLCBhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gamIoYSwgYiwgYykge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDYsIDEsIGEsIGIsIGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBrYihhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFYoNywgMSwgYSwgYiwgYykgOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBsYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoOCwgMSwgYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG1iKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVig5LCAxLCBhLCBiLCBjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbmIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDEwLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gb2IoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDExLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcGIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDEyLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcWIoYSkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDEzLCAxLCBhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcmIoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDE0LCAxLCBhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gc2IoYSwgYiwgYykge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDE1LCAxLCBhLCBiLCBjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gdGIoYSkge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBBdG9taWNzLnJiICYmIChBdG9taWNzLnJiKHAoKSwgYSA+Pj4gMiwgYSkudmFsdWUudGhlbihYKSwgYSArPSAxMjgsIEF0b21pY3Muc3RvcmUocCgpLCBhID4+PiAyLCAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHYuX19lbXNjcmlwdGVuX3RocmVhZF9tYWlsYm94X2F3YWl0ID0gdGI7XG4gICAgICAgICAgdmFyIFggPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgYSA9IFcoKTtcbiAgICAgICAgICAgIGlmIChhICYmICh0YihhKSwgYSA9IHViLCAhSykpXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGEoKSwgISgwIDwgVCkpXG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBEID8gWWEoTCkgOiBRYShMKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgYiBpbnN0YW5jZW9mIFIgfHwgXCJ1bndpbmRcIiA9PSBiIHx8IHooMSwgYik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBiIGluc3RhbmNlb2YgUiB8fCBcInVud2luZFwiID09IGIgfHwgeigxLCBiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdi5jaGVja01haWxib3ggPSBYO1xuICAgICAgICAgIHZhciB2YiA9IFtdLCBZID0gKGEpID0+IDAgPT09IGEgJSA0ICYmICgwICE9PSBhICUgMTAwIHx8IDAgPT09IGEgJSA0MDApLCB3YiA9IFswLCAzMSwgNjAsIDkxLCAxMjEsIDE1MiwgMTgyLCAyMTMsIDI0NCwgMjc0LCAzMDUsIDMzNV0sIHhiID0gWzAsIDMxLCA1OSwgOTAsIDEyMCwgMTUxLCAxODEsIDIxMiwgMjQzLCAyNzMsIDMwNCwgMzM0XTtcbiAgICAgICAgICBmdW5jdGlvbiB5YihhLCBiLCBjLCBkLCBnLCBoLCBrLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFYoMTYsIDEsIGEsIGIsIGMsIGQsIGcsIGgsIGssIHQpIDogLTUyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB6YihhLCBiLCBjLCBkLCBnLCBoLCBrKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTcsIDEsIGEsIGIsIGMsIGQsIGcsIGgsIGspO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgQmIgPSAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBmYihhKSArIDEsIGMgPSBBYihiKTtcbiAgICAgICAgICAgIGMgJiYgaGIoYSwgYywgYik7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9LCBDYiA9IFtdLCBEYiA9IHt9LCBGYiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghRWIpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSB7IFVTRVI6IFwid2ViX3VzZXJcIiwgTE9HTkFNRTogXCJ3ZWJfdXNlclwiLCBQQVRIOiBcIi9cIiwgUFdEOiBcIi9cIiwgSE9NRTogXCIvaG9tZS93ZWJfdXNlclwiLCBMQU5HOiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgbmF2aWdhdG9yICYmIG5hdmlnYXRvci5sYW5ndWFnZXMgJiYgbmF2aWdhdG9yLmxhbmd1YWdlc1swXSB8fCBcIkNcIikucmVwbGFjZShcIi1cIiwgXCJfXCIpICsgXCIuVVRGLThcIiwgXzogamEgfHwgXCIuL3RoaXMucHJvZ3JhbVwiIH0sIGI7XG4gICAgICAgICAgICAgIGZvciAoYiBpbiBEYilcbiAgICAgICAgICAgICAgICB2b2lkIDAgPT09IERiW2JdID8gZGVsZXRlIGFbYl0gOiBhW2JdID0gRGJbYl07XG4gICAgICAgICAgICAgIHZhciBjID0gW107XG4gICAgICAgICAgICAgIGZvciAoYiBpbiBhKVxuICAgICAgICAgICAgICAgIGMucHVzaChgJHtifT0ke2FbYl19YCk7XG4gICAgICAgICAgICAgIEViID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBFYjtcbiAgICAgICAgICB9LCBFYjtcbiAgICAgICAgICBmdW5jdGlvbiBHYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTgsIDEsIGEsIGIpO1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgIEZiKCkuZm9yRWFjaCgoZCwgZykgPT4ge1xuICAgICAgICAgICAgICB2YXIgaCA9IGIgKyBjO1xuICAgICAgICAgICAgICBnID0gcigpW2EgKyA0ICogZyA+Pj4gMiA+Pj4gMF0gPSBoO1xuICAgICAgICAgICAgICBmb3IgKGggPSAwOyBoIDwgZC5sZW5ndGg7ICsraClcbiAgICAgICAgICAgICAgICBhYSgpW2crKyA+Pj4gMCA+Pj4gMF0gPSBkLmNoYXJDb2RlQXQoaCk7XG4gICAgICAgICAgICAgIGFhKClbZyA+Pj4gMCA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgICBjICs9IGQubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEtiKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVigxOSwgMSwgYSwgYik7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGMgPSBGYigpO1xuICAgICAgICAgICAgcigpW2EgPj4+IDIgPj4+IDBdID0gYy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZCA9IDA7XG4gICAgICAgICAgICBjLmZvckVhY2goKGcpID0+IGQgKz0gZy5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIHIoKVtiID4+PiAyID4+PiAwXSA9IGQ7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gTGIoYSkge1xuICAgICAgICAgICAgcmV0dXJuIEQgPyBWKDIwLCAxLCBhKSA6IDUyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBNYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFYoMjEsIDEsIGEsIGIsIGMsIGQpIDogNTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIE5iKGEsIGIsIGMsIGQsIGcpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVigyMiwgMSwgYSwgYiwgYywgZCwgZykgOiA3MDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIE9iID0gW251bGwsIFtdLCBbXV07XG4gICAgICAgICAgZnVuY3Rpb24gUGIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDIzLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwLCBoID0gMDsgaCA8IGM7IGgrKykge1xuICAgICAgICAgICAgICB2YXIgayA9IHIoKVtiID4+PiAyID4+PiAwXSwgdCA9IHIoKVtiICsgNCA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgIGIgKz0gODtcbiAgICAgICAgICAgICAgZm9yICh2YXIgQyA9IDA7IEMgPCB0OyBDKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdyA9IG4oKVtrICsgQyA+Pj4gMF0sIHkgPSBPYlthXTtcbiAgICAgICAgICAgICAgICAwID09PSB3IHx8IDEwID09PSB3ID8gKCgxID09PSBhID8gcWEgOiBKKShKYSh5LCAwKSksIHkubGVuZ3RoID0gMCkgOiB5LnB1c2godyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZyArPSB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcigpW2QgPj4+IDIgPj4+IDBdID0gZztcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgUWIgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0sIFJiID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuICAgICAgICAgIGZ1bmN0aW9uIFNiKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gQXJyYXkoZmIoYSkgKyAxKTtcbiAgICAgICAgICAgIGdiKGEsIGIsIDAsIGIubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgVGIgPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgYWEoKS5zZXQoYSwgYiA+Pj4gMCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBVYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBnKGYsIHEsIHUpIHtcbiAgICAgICAgICAgICAgZm9yIChmID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgZiA/IGYudG9TdHJpbmcoKSA6IGYgfHwgXCJcIjsgZi5sZW5ndGggPCBxOyApXG4gICAgICAgICAgICAgICAgZiA9IHVbMF0gKyBmO1xuICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGgoZiwgcSkge1xuICAgICAgICAgICAgICByZXR1cm4gZyhmLCBxLCBcIjBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBrKGYsIHEpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gdShIYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAwID4gSGIgPyAtMSA6IDAgPCBIYiA/IDEgOiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBGO1xuICAgICAgICAgICAgICAwID09PSAoRiA9IHUoZi5nZXRGdWxsWWVhcigpIC0gcS5nZXRGdWxsWWVhcigpKSkgJiYgMCA9PT0gKEYgPSB1KGYuZ2V0TW9udGgoKSAtIHEuZ2V0TW9udGgoKSkpICYmIChGID0gdShmLmdldERhdGUoKSAtIHEuZ2V0RGF0ZSgpKSk7XG4gICAgICAgICAgICAgIHJldHVybiBGO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdChmKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZi5nZXREYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMjkpO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDMpO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgZi5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBDKGYpIHtcbiAgICAgICAgICAgICAgdmFyIHEgPSBmLlJhO1xuICAgICAgICAgICAgICBmb3IgKGYgPSBuZXcgRGF0ZShuZXcgRGF0ZShmLlNhICsgMTkwMCwgMCwgMSkuZ2V0VGltZSgpKTsgMCA8IHE7ICkge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gZi5nZXRNb250aCgpLCBGID0gKFkoZi5nZXRGdWxsWWVhcigpKSA/IFFiIDogUmIpW3VdO1xuICAgICAgICAgICAgICAgIGlmIChxID4gRiAtIGYuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgcSAtPSBGIC0gZi5nZXREYXRlKCkgKyAxLCBmLnNldERhdGUoMSksIDExID4gdSA/IGYuc2V0TW9udGgodSArIDEpIDogKGYuc2V0TW9udGgoMCksIGYuc2V0RnVsbFllYXIoZi5nZXRGdWxsWWVhcigpICsgMSkpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZi5zZXREYXRlKGYuZ2V0RGF0ZSgpICsgcSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdSA9IG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSArIDEsIDAsIDQpO1xuICAgICAgICAgICAgICBxID0gdChuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICBmLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICB1ID0gdCh1KTtcbiAgICAgICAgICAgICAgcmV0dXJuIDAgPj0gayhxLCBmKSA/IDAgPj0gayh1LCBmKSA/IGYuZ2V0RnVsbFllYXIoKSArIDEgOiBmLmdldEZ1bGxZZWFyKCkgOiBmLmdldEZ1bGxZZWFyKCkgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgdyA9IHIoKVtkICsgNDAgPj4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgZCA9IHsgb2I6IHAoKVtkID4+PiAyID4+PiAwXSwgbmI6IHAoKVtkICsgNCA+Pj4gMiA+Pj4gMF0sIFRhOiBwKClbZCArIDggPj4+IDIgPj4+IDBdLCBYYTogcCgpW2QgKyAxMiA+Pj4gMiA+Pj4gMF0sIFVhOiBwKClbZCArIDE2ID4+PiAyID4+PiAwXSwgU2E6IHAoKVtkICsgMjAgPj4+IDIgPj4+IDBdLCBOYTogcCgpW2QgKyAyNCA+Pj4gMiA+Pj4gMF0sIFJhOiBwKClbZCArIDI4ID4+PiAyID4+PiAwXSwgdWI6IHAoKVtkICsgMzIgPj4+IDIgPj4+IDBdLCBtYjogcCgpW2QgKyAzNiA+Pj4gMiA+Pj4gMF0sIHBiOiB3ID8gUSh3KSA6IFwiXCIgfTtcbiAgICAgICAgICAgIGMgPSBRKGMpO1xuICAgICAgICAgICAgdyA9IHtcbiAgICAgICAgICAgICAgXCIlY1wiOiBcIiVhICViICVkICVIOiVNOiVTICVZXCIsXG4gICAgICAgICAgICAgIFwiJURcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVGXCI6IFwiJVktJW0tJWRcIixcbiAgICAgICAgICAgICAgXCIlaFwiOiBcIiViXCIsXG4gICAgICAgICAgICAgIFwiJXJcIjogXCIlSTolTTolUyAlcFwiLFxuICAgICAgICAgICAgICBcIiVSXCI6IFwiJUg6JU1cIixcbiAgICAgICAgICAgICAgXCIlVFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJXhcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVYXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIlRWNcIjogXCIlY1wiLFxuICAgICAgICAgICAgICBcIiVFQ1wiOiBcIiVDXCIsXG4gICAgICAgICAgICAgIFwiJUV4XCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlRVhcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiVFeVwiOiBcIiV5XCIsXG4gICAgICAgICAgICAgIFwiJUVZXCI6IFwiJVlcIixcbiAgICAgICAgICAgICAgXCIlT2RcIjogXCIlZFwiLFxuICAgICAgICAgICAgICBcIiVPZVwiOiBcIiVlXCIsXG4gICAgICAgICAgICAgIFwiJU9IXCI6IFwiJUhcIixcbiAgICAgICAgICAgICAgXCIlT0lcIjogXCIlSVwiLFxuICAgICAgICAgICAgICBcIiVPbVwiOiBcIiVtXCIsXG4gICAgICAgICAgICAgIFwiJU9NXCI6IFwiJU1cIixcbiAgICAgICAgICAgICAgXCIlT1NcIjogXCIlU1wiLFxuICAgICAgICAgICAgICBcIiVPdVwiOiBcIiV1XCIsXG4gICAgICAgICAgICAgIFwiJU9VXCI6IFwiJVVcIixcbiAgICAgICAgICAgICAgXCIlT1ZcIjogXCIlVlwiLFxuICAgICAgICAgICAgICBcIiVPd1wiOiBcIiV3XCIsXG4gICAgICAgICAgICAgIFwiJU9XXCI6IFwiJVdcIixcbiAgICAgICAgICAgICAgXCIlT3lcIjogXCIleVwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgeSBpbiB3KVxuICAgICAgICAgICAgICBjID0gYy5yZXBsYWNlKG5ldyBSZWdFeHAoeSwgXCJnXCIpLCB3W3ldKTtcbiAgICAgICAgICAgIHZhciBJYiA9IFwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksIEpiID0gXCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgdyA9IHtcbiAgICAgICAgICAgICAgXCIlYVwiOiAoZikgPT4gSWJbZi5OYV0uc3Vic3RyaW5nKDAsIDMpLFxuICAgICAgICAgICAgICBcIiVBXCI6IChmKSA9PiBJYltmLk5hXSxcbiAgICAgICAgICAgICAgXCIlYlwiOiAoZikgPT4gSmJbZi5VYV0uc3Vic3RyaW5nKDAsIDMpLFxuICAgICAgICAgICAgICBcIiVCXCI6IChmKSA9PiBKYltmLlVhXSxcbiAgICAgICAgICAgICAgXCIlQ1wiOiAoZikgPT4gaCgoZi5TYSArIDE5MDApIC8gMTAwIHwgMCwgMiksXG4gICAgICAgICAgICAgIFwiJWRcIjogKGYpID0+IGgoZi5YYSwgMiksXG4gICAgICAgICAgICAgIFwiJWVcIjogKGYpID0+IGcoZi5YYSwgMiwgXCIgXCIpLFxuICAgICAgICAgICAgICBcIiVnXCI6IChmKSA9PiBDKGYpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFxuICAgICAgICAgICAgICBcIiVHXCI6IChmKSA9PiBDKGYpLFxuICAgICAgICAgICAgICBcIiVIXCI6IChmKSA9PiBoKGYuVGEsIDIpLFxuICAgICAgICAgICAgICBcIiVJXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgICAgZiA9IGYuVGE7XG4gICAgICAgICAgICAgICAgMCA9PSBmID8gZiA9IDEyIDogMTIgPCBmICYmIChmIC09IDEyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaChmLCAyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCIlalwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHEgPSAwLCB1ID0gMDsgdSA8PSBmLlVhIC0gMTsgcSArPSAoWShmLlNhICsgMTkwMCkgPyBRYiA6IFJiKVt1KytdKVxuICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIHJldHVybiBoKGYuWGEgKyBxLCAzKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCIlbVwiOiAoZikgPT4gaChmLlVhICsgMSwgMiksXG4gICAgICAgICAgICAgIFwiJU1cIjogKGYpID0+IGgoZi5uYiwgMiksXG4gICAgICAgICAgICAgIFwiJW5cIjogKCkgPT4gXCJcXG5cIixcbiAgICAgICAgICAgICAgXCIlcFwiOiAoZikgPT4gMCA8PSBmLlRhICYmIDEyID4gZi5UYSA/IFwiQU1cIiA6IFwiUE1cIixcbiAgICAgICAgICAgICAgXCIlU1wiOiAoZikgPT4gaChmLm9iLCAyKSxcbiAgICAgICAgICAgICAgXCIldFwiOiAoKSA9PiBcIlx0XCIsXG4gICAgICAgICAgICAgIFwiJXVcIjogKGYpID0+IGYuTmEgfHwgNyxcbiAgICAgICAgICAgICAgXCIlVVwiOiAoZikgPT4gaChNYXRoLmZsb29yKChmLlJhICsgNyAtIGYuTmEpIC8gNyksIDIpLFxuICAgICAgICAgICAgICBcIiVWXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHEgPSBNYXRoLmZsb29yKChmLlJhICsgNyAtIChmLk5hICsgNikgJSA3KSAvIDcpO1xuICAgICAgICAgICAgICAgIDIgPj0gKGYuTmEgKyAzNzEgLSBmLlJhIC0gMikgJSA3ICYmIHErKztcbiAgICAgICAgICAgICAgICBpZiAocSlcbiAgICAgICAgICAgICAgICAgIDUzID09IHEgJiYgKHUgPSAoZi5OYSArIDM3MSAtIGYuUmEpICUgNywgNCA9PSB1IHx8IDMgPT0gdSAmJiBZKGYuU2EpIHx8IChxID0gMSkpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcSA9IDUyO1xuICAgICAgICAgICAgICAgICAgdmFyIHUgPSAoZi5OYSArIDcgLSBmLlJhIC0gMSkgJSA3O1xuICAgICAgICAgICAgICAgICAgKDQgPT0gdSB8fCA1ID09IHUgJiYgWShmLlNhICUgNDAwIC0gMSkpICYmIHErKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGgocSwgMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJXdcIjogKGYpID0+IGYuTmEsXG4gICAgICAgICAgICAgIFwiJVdcIjogKGYpID0+IGgoTWF0aC5mbG9vcigoZi5SYSArIDcgLSAoZi5OYSArIDYpICUgNykgLyA3KSwgMiksXG4gICAgICAgICAgICAgIFwiJXlcIjogKGYpID0+IChmLlNhICsgMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgICAgIFwiJVlcIjogKGYpID0+IGYuU2EgKyAxOTAwLFxuICAgICAgICAgICAgICBcIiV6XCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgICAgZiA9IGYubWI7XG4gICAgICAgICAgICAgICAgdmFyIHEgPSAwIDw9IGY7XG4gICAgICAgICAgICAgICAgZiA9IE1hdGguYWJzKGYpIC8gNjA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChxID8gXCIrXCIgOiBcIi1cIikgKyBTdHJpbmcoXCIwMDAwXCIgKyAoZiAvIDYwICogMTAwICsgZiAlIDYwKSkuc2xpY2UoLTQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiVaXCI6IChmKSA9PiBmLnBiLFxuICAgICAgICAgICAgICBcIiUlXCI6ICgpID0+IFwiJVwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYyA9IGMucmVwbGFjZShcbiAgICAgICAgICAgICAgLyUlL2csXG4gICAgICAgICAgICAgIFwiXFwwXFwwXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmb3IgKHkgaW4gdylcbiAgICAgICAgICAgICAgYy5pbmNsdWRlcyh5KSAmJiAoYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHksIFwiZ1wiKSwgd1t5XShkKSkpO1xuICAgICAgICAgICAgYyA9IGMucmVwbGFjZSgvXFwwXFwwL2csIFwiJVwiKTtcbiAgICAgICAgICAgIHkgPSBTYihjKTtcbiAgICAgICAgICAgIGlmICh5Lmxlbmd0aCA+IGIpXG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgVGIoeSwgYSk7XG4gICAgICAgICAgICByZXR1cm4geS5sZW5ndGggLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBTLldhKCk7XG4gICAgICAgICAgdmFyIFZiID0gW09hLCBQYSwgYmIsIGRiLCBlYiwgaWIsIGpiLCBrYiwgbGIsIG1iLCBuYiwgb2IsIHBiLCBxYiwgcmIsIHNiLCB5YiwgemIsIEdiLCBLYiwgTGIsIE1iLCBOYiwgUGJdLCBaYiA9IHtcbiAgICAgICAgICAgIGI6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIG5ldyBaYShhKS5XYShiID4+PiAwLCBjID4+PiAwKTtcbiAgICAgICAgICAgICAgJGEgPSBhO1xuICAgICAgICAgICAgICBhYisrO1xuICAgICAgICAgICAgICB0aHJvdyAkYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBMOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIFdiKGEgPj4+IDAsICFBLCAxLCAha2EsIDEzMTA3MiwgZmFsc2UpO1xuICAgICAgICAgICAgICBTLmFiKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgajogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgRCA/IHBvc3RNZXNzYWdlKHsgY21kOiBcImNsZWFudXBUaHJlYWRcIiwgdGhyZWFkOiBhIH0pIDogUy5aYShTLk1hW2FdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBIOiBjYixcbiAgICAgICAgICAgIGg6IGRiLFxuICAgICAgICAgICAgUzogZWIsXG4gICAgICAgICAgICBEOiBpYixcbiAgICAgICAgICAgIEY6IGpiLFxuICAgICAgICAgICAgVDoga2IsXG4gICAgICAgICAgICBROiBsYixcbiAgICAgICAgICAgIEo6IG1iLFxuICAgICAgICAgICAgUDogbmIsXG4gICAgICAgICAgICBuOiBvYixcbiAgICAgICAgICAgIEU6IHBiLFxuICAgICAgICAgICAgQjogcWIsXG4gICAgICAgICAgICBSOiByYixcbiAgICAgICAgICAgIEM6IHNiLFxuICAgICAgICAgICAgcDogKCkgPT4gMSxcbiAgICAgICAgICAgIHo6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPT0gYiA+Pj4gMCA/IHNldFRpbWVvdXQoKCkgPT4gWCgpKSA6IEQgPyBwb3N0TWVzc2FnZSh7IHRhcmdldFRocmVhZDogYSwgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pIDogKGEgPSBTLk1hW2FdKSAmJiBhLnBvc3RNZXNzYWdlKHsgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEk6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIHZiLmxlbmd0aCA9IGM7XG4gICAgICAgICAgICAgIGQgPSBkID4+PiAwID4+PiAzO1xuICAgICAgICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IGM7IGcrKylcbiAgICAgICAgICAgICAgICB2YltnXSA9IGVhKClbZCArIGcgPj4+IDBdO1xuICAgICAgICAgICAgICBhID0gMCA+IGEgPyBFYVstYSAtIDFdIDogVmJbYV07XG4gICAgICAgICAgICAgIFMuaWIgPSBiO1xuICAgICAgICAgICAgICBiID0gYS5hcHBseShudWxsLCB2Yik7XG4gICAgICAgICAgICAgIFMuaWIgPSAwO1xuICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBLOiB0YixcbiAgICAgICAgICAgIG86IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgQiAmJiBTLk1hW2EgPj4+IDBdLnJlZigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHM6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgYSA9IGIgKyAyMDk3MTUyID4+PiAwIDwgNDE5NDMwNSAtICEhYSA/IChhID4+PiAwKSArIDQyOTQ5NjcyOTYgKiBiIDogTmFOO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9IG5ldyBEYXRlKDFlMyAqIGEpO1xuICAgICAgICAgICAgICBwKClbYyA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyA0ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTWludXRlcygpO1xuICAgICAgICAgICAgICBwKClbYyArIDggPj4+IDIgPj4+IDBdID0gYS5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgICBwKClbYyArIDEyID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgICBwKClbYyArIDE2ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyMCA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwO1xuICAgICAgICAgICAgICBwKClbYyArIDI0ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICAgIGEgPSAoYS5nZXRUaW1lKCkgLSBEYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEsIDAsIDAsIDAsIDApKSAvIDg2NGU1IHwgMDtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyOCA+Pj4gMiA+Pj4gMF0gPSBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHQ6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgYSA9IGIgKyAyMDk3MTUyID4+PiAwIDwgNDE5NDMwNSAtICEhYSA/IChhID4+PiAwKSArIDQyOTQ5NjcyOTYgKiBiIDogTmFOO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9IG5ldyBEYXRlKDFlMyAqIGEpO1xuICAgICAgICAgICAgICBwKClbYyA+Pj4gMiA+Pj4gMF0gPSBhLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyA0ID4+PiAyID4+PiAwXSA9IGEuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBwKClbYyArIDggPj4+IDIgPj4+IDBdID0gYS5nZXRIb3VycygpO1xuICAgICAgICAgICAgICBwKClbYyArIDEyID4+PiAyID4+PiAwXSA9IGEuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICBwKClbYyArIDE2ID4+PiAyID4+PiAwXSA9IGEuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyMCA+Pj4gMiA+Pj4gMF0gPSBhLmdldEZ1bGxZZWFyKCkgLSAxOTAwO1xuICAgICAgICAgICAgICBwKClbYyArIDI0ID4+PiAyID4+PiAwXSA9IGEuZ2V0RGF5KCk7XG4gICAgICAgICAgICAgIGIgPSAoWShhLmdldEZ1bGxZZWFyKCkpID8gd2IgOiB4YilbYS5nZXRNb250aCgpXSArIGEuZ2V0RGF0ZSgpIC0gMSB8IDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMjggPj4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgICAgcCgpW2MgKyAzNiA+Pj4gMiA+Pj4gMF0gPSAtKDYwICogYS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgICAgICAgYiA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgNiwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksIDAsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICAgIGEgPSAoYiAhPSBkICYmIGEuZ2V0VGltZXpvbmVPZmZzZXQoKSA9PSBNYXRoLm1pbihkLCBiKSkgfCAwO1xuICAgICAgICAgICAgICBwKClbYyArIDMyID4+PiAyID4+PiAwXSA9IGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgRGF0ZShwKClbYSArIDIwID4+PiAyID4+PiAwXSArIDE5MDAsIHAoKVthICsgMTYgPj4+IDIgPj4+IDBdLCBwKClbYSArIDEyID4+PiAyID4+PiAwXSwgcCgpW2EgKyA4ID4+PiAyID4+PiAwXSwgcCgpW2EgKyA0ID4+PiAyID4+PiAwXSwgcCgpW2EgPj4+IDIgPj4+IDBdLCAwKSwgYyA9IHAoKVthICsgMzIgPj4+IDIgPj4+IDBdLCBkID0gYi5nZXRUaW1lem9uZU9mZnNldCgpLCBnID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBoID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgYi5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICApLmdldFRpbWV6b25lT2Zmc2V0KCksIGsgPSBNYXRoLm1pbihoLCBnKTtcbiAgICAgICAgICAgICAgMCA+IGMgPyBwKClbYSArIDMyID4+PiAyID4+PiAwXSA9IE51bWJlcihnICE9IGggJiYgayA9PSBkKSA6IDAgPCBjICE9IChrID09IGQpICYmIChnID0gTWF0aC5tYXgoaCwgZyksIGIuc2V0VGltZShiLmdldFRpbWUoKSArIDZlNCAqICgoMCA8IGMgPyBrIDogZykgLSBkKSkpO1xuICAgICAgICAgICAgICBwKClbYSArIDI0ID4+PiAyID4+PiAwXSA9IGIuZ2V0RGF5KCk7XG4gICAgICAgICAgICAgIGMgPSAoWShiLmdldEZ1bGxZZWFyKCkpID8gd2IgOiB4YilbYi5nZXRNb250aCgpXSArIGIuZ2V0RGF0ZSgpIC0gMSB8IDA7XG4gICAgICAgICAgICAgIHAoKVthICsgMjggPj4+IDIgPj4+IDBdID0gYztcbiAgICAgICAgICAgICAgcCgpW2EgPj4+IDIgPj4+IDBdID0gYi5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIHAoKVthICsgNCA+Pj4gMiA+Pj4gMF0gPSBiLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyA4ID4+PiAyID4+PiAwXSA9IGIuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyAxMiA+Pj4gMiA+Pj4gMF0gPSBiLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyAxNiA+Pj4gMiA+Pj4gMF0gPSBiLmdldE1vbnRoKCk7XG4gICAgICAgICAgICAgIHAoKVthICsgMjAgPj4+IDIgPj4+IDBdID0gYi5nZXRZZWFyKCk7XG4gICAgICAgICAgICAgIGEgPSBiLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgaXNOYU4oYSkgPyAocCgpW1hiKCkgPj4+IDIgPj4+IDBdID0gNjEsIGEgPSAtMSkgOiBhIC89IDFlMztcbiAgICAgICAgICAgICAgcmV0dXJuIFliKChQID0gYSwgMSA8PSArTWF0aC5hYnMoUCkgPyAwIDwgUCA/ICtNYXRoLmZsb29yKFAgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IH5+K01hdGguY2VpbCgoUCAtICsofn5QID4+PiAwKSkgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IDApKSwgYSA+Pj4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBxOiB5YixcbiAgICAgICAgICAgIHI6IHpiLFxuICAgICAgICAgICAgeTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBkKHcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHcgPSB3LnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLykpID8gd1sxXSA6IFwiR01UXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGcgPSAoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCksIGggPSBuZXcgRGF0ZShnLCAwLCAxKSwgayA9IG5ldyBEYXRlKGcsIDYsIDEpO1xuICAgICAgICAgICAgICBnID0gaC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgdCA9IGsuZ2V0VGltZXpvbmVPZmZzZXQoKSwgQyA9IE1hdGgubWF4KGcsIHQpO1xuICAgICAgICAgICAgICByKClbYSA+Pj4gMiA+Pj4gMF0gPSA2MCAqIEM7XG4gICAgICAgICAgICAgIHAoKVtiID4+PiAyID4+PiAwXSA9IE51bWJlcihnICE9IHQpO1xuICAgICAgICAgICAgICBhID0gZChoKTtcbiAgICAgICAgICAgICAgYiA9IGQoayk7XG4gICAgICAgICAgICAgIGEgPSBCYihhKTtcbiAgICAgICAgICAgICAgYiA9IEJiKGIpO1xuICAgICAgICAgICAgICB0IDwgZyA/IChyKClbYyA+Pj4gMiA+Pj4gMF0gPSBhLCByKClbYyArIDQgPj4+IDIgPj4+IDBdID0gYikgOiAocigpW2MgPj4+IDIgPj4+IDBdID0gYiwgcigpW2MgKyA0ID4+PiAyID4+PiAwXSA9IGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGM6ICgpID0+IHtcbiAgICAgICAgICAgICAgcmEoXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgTzogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBDYi5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICBmb3IgKHZhciBkOyBkID0gbigpW2IrKyA+Pj4gMF07ICkge1xuICAgICAgICAgICAgICAgIHZhciBnID0gMTA1ICE9IGQ7XG4gICAgICAgICAgICAgICAgZyAmPSAxMTIgIT0gZDtcbiAgICAgICAgICAgICAgICBjICs9IGcgJiYgYyAlIDggPyA0IDogMDtcbiAgICAgICAgICAgICAgICBDYi5wdXNoKDExMiA9PSBkID8gcigpW2MgPj4+IDIgPj4+IDBdIDogMTA1ID09IGQgPyBwKClbYyA+Pj4gMiA+Pj4gMF0gOiBlYSgpW2MgPj4+IDMgPj4+IDBdKTtcbiAgICAgICAgICAgICAgICBjICs9IGcgPyA4IDogNDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gRWFbYV0uYXBwbHkobnVsbCwgQ2IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGs6ICgpID0+IHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpOiAoKSA9PiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgVTogKCkgPT4ge1xuICAgICAgICAgICAgICBUICs9IDE7XG4gICAgICAgICAgICAgIHRocm93IFwidW53aW5kXCI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiA0Mjk0OTAxNzYwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGU6ICgpID0+IHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gKyBwZXJmb3JtYW5jZS5ub3coKSxcbiAgICAgICAgICAgIGY6ICgpID0+IEIgPyAoaW5pdF9vcygpLCBfX3RvQ29tbW9uSlMob3NfZXhwb3J0cykpLmNwdXMoKS5sZW5ndGggOiBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSxcbiAgICAgICAgICAgIHg6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gbigpLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKGEgPD0gYiB8fCA0Mjk0OTAxNzYwIDwgYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyA0ID49IGM7IGMgKj0gMikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYiAqICgxICsgMC4yIC8gYyk7XG4gICAgICAgICAgICAgICAgZCA9IE1hdGgubWluKGQsIGEgKyAxMDA2NjMyOTYpO1xuICAgICAgICAgICAgICAgIHZhciBnID0gTWF0aDtcbiAgICAgICAgICAgICAgICBkID0gTWF0aC5tYXgoYSwgZCk7XG4gICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgZyA9IChnLm1pbi5jYWxsKGcsIDQyOTQ5MDE3NjAsIGQgKyAoNjU1MzYgLSBkICUgNjU1MzYpICUgNjU1MzYpIC0gZS5idWZmZXIuYnl0ZUxlbmd0aCArIDY1NTM1KSAvIDY1NTM2O1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZS5ncm93KGcpO1xuICAgICAgICAgICAgICAgICAgICBtKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGggPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE06IEdiLFxuICAgICAgICAgICAgTjogS2IsXG4gICAgICAgICAgICBHOiBRYSxcbiAgICAgICAgICAgIGc6IExiLFxuICAgICAgICAgICAgbTogTWIsXG4gICAgICAgICAgICB2OiBOYixcbiAgICAgICAgICAgIGw6IFBiLFxuICAgICAgICAgICAgYTogZSB8fCB2Lndhc21NZW1vcnksXG4gICAgICAgICAgICB3OiBVYixcbiAgICAgICAgICAgIGQ6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFViKGEgPj4+IDAsIGIgPj4+IDAsIGMgPj4+IDAsIGQgPj4+IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIFogPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGEoYywgZCkge1xuICAgICAgICAgICAgICBaID0gYy5leHBvcnRzO1xuICAgICAgICAgICAgICBaID0gJGIoKTtcbiAgICAgICAgICAgICAgUy5iYi5wdXNoKFouemEpO1xuICAgICAgICAgICAgICBYYSA9IFouQWE7XG4gICAgICAgICAgICAgIHZhLnVuc2hpZnQoWi5WKTtcbiAgICAgICAgICAgICAgc2EgPSBkO1xuICAgICAgICAgICAgICB5YSgpO1xuICAgICAgICAgICAgICByZXR1cm4gWjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiID0geyBhOiBaYiB9O1xuICAgICAgICAgICAgTSsrO1xuICAgICAgICAgICAgaWYgKHYuaW5zdGFudGlhdGVXYXNtKVxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2Lmluc3RhbnRpYXRlV2FzbShiLCBhKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoYykge1xuICAgICAgICAgICAgICAgIEooYE1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6ICR7Y31gKSwgeChjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgRGEoYiwgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICBhKGMuaW5zdGFuY2UsIGMubW9kdWxlKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKHgpO1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgIH0oKTtcbiAgICAgICAgICB2Ll9PcnRJbml0ID0gKGEsIGIpID0+ICh2Ll9PcnRJbml0ID0gWi5XKShhLCBiKTtcbiAgICAgICAgICB2Ll9PcnRHZXRMYXN0RXJyb3IgPSAoYSwgYikgPT4gKHYuX09ydEdldExhc3RFcnJvciA9IFouWCkoYSwgYik7XG4gICAgICAgICAgdi5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSAoYSwgYiwgYywgZCwgZywgaCwgaywgdCwgQywgdykgPT4gKHYuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zID0gWi5ZKShhLCBiLCBjLCBkLCBnLCBoLCBrLCB0LCBDLCB3KTtcbiAgICAgICAgICB2Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IChhLCBiKSA9PiAodi5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXIgPSBaLlopKGEsIGIpO1xuICAgICAgICAgIHYuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZSA9IChhLCBiLCBjKSA9PiAodi5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gWi5fKShhLCBiLCBjKTtcbiAgICAgICAgICB2Ll9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKHYuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IFouJCkoYSwgYiwgYyk7XG4gICAgICAgICAgdi5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zID0gKGEpID0+ICh2Ll9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSBaLmFhKShhKTtcbiAgICAgICAgICB2Ll9PcnRDcmVhdGVTZXNzaW9uID0gKGEsIGIsIGMpID0+ICh2Ll9PcnRDcmVhdGVTZXNzaW9uID0gWi5iYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdi5fT3J0UmVsZWFzZVNlc3Npb24gPSAoYSkgPT4gKHYuX09ydFJlbGVhc2VTZXNzaW9uID0gWi5jYSkoYSk7XG4gICAgICAgICAgdi5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IChhLCBiLCBjKSA9PiAodi5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IFouZGEpKGEsIGIsIGMpO1xuICAgICAgICAgIHYuX09ydEdldElucHV0TmFtZSA9IChhLCBiKSA9PiAodi5fT3J0R2V0SW5wdXROYW1lID0gWi5lYSkoYSwgYik7XG4gICAgICAgICAgdi5fT3J0R2V0T3V0cHV0TmFtZSA9IChhLCBiKSA9PiAodi5fT3J0R2V0T3V0cHV0TmFtZSA9IFouZmEpKGEsIGIpO1xuICAgICAgICAgIHYuX09ydEZyZWUgPSAoYSkgPT4gKHYuX09ydEZyZWUgPSBaLmdhKShhKTtcbiAgICAgICAgICB2Ll9PcnRDcmVhdGVUZW5zb3IgPSAoYSwgYiwgYywgZCwgZywgaCkgPT4gKHYuX09ydENyZWF0ZVRlbnNvciA9IFouaGEpKGEsIGIsIGMsIGQsIGcsIGgpO1xuICAgICAgICAgIHYuX09ydEdldFRlbnNvckRhdGEgPSAoYSwgYiwgYywgZCwgZykgPT4gKHYuX09ydEdldFRlbnNvckRhdGEgPSBaLmlhKShhLCBiLCBjLCBkLCBnKTtcbiAgICAgICAgICB2Ll9PcnRSZWxlYXNlVGVuc29yID0gKGEpID0+ICh2Ll9PcnRSZWxlYXNlVGVuc29yID0gWi5qYSkoYSk7XG4gICAgICAgICAgdi5fT3J0Q3JlYXRlUnVuT3B0aW9ucyA9IChhLCBiLCBjLCBkKSA9PiAodi5fT3J0Q3JlYXRlUnVuT3B0aW9ucyA9IFoua2EpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIHYuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gKGEsIGIsIGMpID0+ICh2Ll9PcnRBZGRSdW5Db25maWdFbnRyeSA9IFoubGEpKGEsIGIsIGMpO1xuICAgICAgICAgIHYuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gKGEpID0+ICh2Ll9PcnRSZWxlYXNlUnVuT3B0aW9ucyA9IFoubWEpKGEpO1xuICAgICAgICAgIHYuX09ydENyZWF0ZUJpbmRpbmcgPSAoYSkgPT4gKHYuX09ydENyZWF0ZUJpbmRpbmcgPSBaLm5hKShhKTtcbiAgICAgICAgICB2Ll9PcnRCaW5kSW5wdXQgPSAoYSwgYiwgYykgPT4gKHYuX09ydEJpbmRJbnB1dCA9IFoub2EpKGEsIGIsIGMpO1xuICAgICAgICAgIHYuX09ydEJpbmRPdXRwdXQgPSAoYSwgYiwgYywgZCkgPT4gKHYuX09ydEJpbmRPdXRwdXQgPSBaLnBhKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICB2Ll9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IChhKSA9PiAodi5fT3J0Q2xlYXJCb3VuZE91dHB1dHMgPSBaLnFhKShhKTtcbiAgICAgICAgICB2Ll9PcnRSZWxlYXNlQmluZGluZyA9IChhKSA9PiAodi5fT3J0UmVsZWFzZUJpbmRpbmcgPSBaLnJhKShhKTtcbiAgICAgICAgICB2Ll9PcnRSdW5XaXRoQmluZGluZyA9IChhLCBiLCBjLCBkLCBnKSA9PiAodi5fT3J0UnVuV2l0aEJpbmRpbmcgPSBaLnNhKShhLCBiLCBjLCBkLCBnKTtcbiAgICAgICAgICB2Ll9PcnRSdW4gPSAoYSwgYiwgYywgZCwgZywgaCwgaywgdCkgPT4gKHYuX09ydFJ1biA9IFoudGEpKGEsIGIsIGMsIGQsIGcsIGgsIGssIHQpO1xuICAgICAgICAgIHYuX09ydEVuZFByb2ZpbGluZyA9IChhKSA9PiAodi5fT3J0RW5kUHJvZmlsaW5nID0gWi51YSkoYSk7XG4gICAgICAgICAgdmFyIFhiID0gKCkgPT4gKFhiID0gWi52YSkoKSwgVyA9IHYuX3B0aHJlYWRfc2VsZiA9ICgpID0+IChXID0gdi5fcHRocmVhZF9zZWxmID0gWi53YSkoKSwgQWIgPSB2Ll9tYWxsb2MgPSAoYSkgPT4gKEFiID0gdi5fbWFsbG9jID0gWi54YSkoYSk7XG4gICAgICAgICAgdi5fZnJlZSA9IChhKSA9PiAodi5fZnJlZSA9IFoueWEpKGEpO1xuICAgICAgICAgIHYuX19lbXNjcmlwdGVuX3Rsc19pbml0ID0gKCkgPT4gKHYuX19lbXNjcmlwdGVuX3Rsc19pbml0ID0gWi56YSkoKTtcbiAgICAgICAgICB2YXIgV2IgPSB2Ll9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IChhLCBiLCBjLCBkLCBnLCBoKSA9PiAoV2IgPSB2Ll9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IFouQmEpKGEsIGIsIGMsIGQsIGcsIGgpO1xuICAgICAgICAgIHYuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gKCkgPT4gKHYuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gWi5DYSkoKTtcbiAgICAgICAgICB2YXIgTmEgPSAoYSwgYiwgYywgZCkgPT4gKE5hID0gWi5EYSkoYSwgYiwgYywgZCksIFRhID0gKGEpID0+IChUYSA9IFouRWEpKGEpLCBZYSA9IHYuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gKGEpID0+IChZYSA9IHYuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gWi5GYSkoYSksIHViID0gKCkgPT4gKHViID0gWi5HYSkoKSwgWWIgPSAoYSkgPT4gKFliID0gWi5IYSkoYSksIFZhID0gKGEsIGIpID0+IChWYSA9IFouSWEpKGEsIGIpLCBLYSA9ICgpID0+IChLYSA9IFouSmEpKCksIFUgPSAoYSkgPT4gKFUgPSBaLkthKShhKSwgTWEgPSAoYSkgPT4gKE1hID0gWi5MYSkoYSk7XG4gICAgICAgICAgZnVuY3Rpb24gJGIoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IFo7XG4gICAgICAgICAgICBhID0gT2JqZWN0LmFzc2lnbih7fSwgYSk7XG4gICAgICAgICAgICB2YXIgYiA9IChkKSA9PiAoKSA9PiBkKCkgPj4+IDAsIGMgPSAoZCkgPT4gKGcpID0+IGQoZykgPj4+IDA7XG4gICAgICAgICAgICBhLnZhID0gYihhLnZhKTtcbiAgICAgICAgICAgIGEud2EgPSBiKGEud2EpO1xuICAgICAgICAgICAgYS54YSA9IGMoYS54YSk7XG4gICAgICAgICAgICBhLmVtc2NyaXB0ZW5fbWFpbl9ydW50aW1lX3RocmVhZF9pZCA9IGIoYS5lbXNjcmlwdGVuX21haW5fcnVudGltZV90aHJlYWRfaWQpO1xuICAgICAgICAgICAgYS5KYSA9IGIoYS5KYSk7XG4gICAgICAgICAgICBhLkxhID0gYyhhLkxhKTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2Lndhc21NZW1vcnkgPSBlO1xuICAgICAgICAgIHYuc3RhY2tBbGxvYyA9IE1hO1xuICAgICAgICAgIHYuc3RhY2tTYXZlID0gS2E7XG4gICAgICAgICAgdi5zdGFja1Jlc3RvcmUgPSBVO1xuICAgICAgICAgIHYua2VlcFJ1bnRpbWVBbGl2ZSA9ICgpID0+IDAgPCBUO1xuICAgICAgICAgIHYuVVRGOFRvU3RyaW5nID0gUTtcbiAgICAgICAgICB2LnN0cmluZ1RvVVRGOCA9IGhiO1xuICAgICAgICAgIHYubGVuZ3RoQnl0ZXNVVEY4ID0gZmI7XG4gICAgICAgICAgdi5FeGl0U3RhdHVzID0gUjtcbiAgICAgICAgICB2LlBUaHJlYWQgPSBTO1xuICAgICAgICAgIHZhciBhYztcbiAgICAgICAgICBOID0gZnVuY3Rpb24gYmMoKSB7XG4gICAgICAgICAgICBhYyB8fCBjYygpO1xuICAgICAgICAgICAgYWMgfHwgKE4gPSBiYyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBjYygpIHtcbiAgICAgICAgICAgIGlmICghKDAgPCBNKSlcbiAgICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgICAgaGEodiksIEQgfHwgVWEodmEpLCBzdGFydFdvcmtlcih2KTtcbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHYucHJlUnVuKVxuICAgICAgICAgICAgICAgICAgZm9yIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHYucHJlUnVuICYmICh2LnByZVJ1biA9IFt2LnByZVJ1bl0pOyB2LnByZVJ1bi5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICAgICAgdWEudW5zaGlmdCh2LnByZVJ1bi5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICBVYSh1YSk7XG4gICAgICAgICAgICAgICAgMCA8IE0gfHwgYWMgfHwgKGFjID0gdHJ1ZSwgdi5jYWxsZWRSdW4gPSB0cnVlLCBLIHx8IChEIHx8IFVhKHZhKSwgaGEodiksIEQgfHwgVWEod2EpKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY2MoKTtcbiAgICAgICAgICByZXR1cm4gbW9kdWxlQXJnLnJlYWR5O1xuICAgICAgICB9O1xuICAgICAgfSkoKTtcbiAgICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiKVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc21UaHJlYWRlZDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmVbXCJhbWRcIl0pXG4gICAgICAgIGRlZmluZShbXSwgKCkgPT4gb3J0V2FzbVRocmVhZGVkKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHdlYi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qc1xuICB2YXIgcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZF93b3JrZXIgPSBfX2NvbW1vbkpTKHtcbiAgICBcIndlYi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAnXCJ1c2Ugc3RyaWN0XCI7dmFyIE1vZHVsZT17fTt2YXIgRU5WSVJPTk1FTlRfSVNfTk9ERT10eXBlb2YgcHJvY2Vzcz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnM9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGU9PVwic3RyaW5nXCI7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIG5vZGVXb3JrZXJUaHJlYWRzPXJlcXVpcmUoXCJ3b3JrZXJfdGhyZWFkc1wiKTt2YXIgcGFyZW50UG9ydD1ub2RlV29ya2VyVGhyZWFkcy5wYXJlbnRQb3J0O3BhcmVudFBvcnQub24oXCJtZXNzYWdlXCIsZGF0YT0+b25tZXNzYWdlKHtkYXRhOmRhdGF9KSk7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTt2YXIgdm09cmVxdWlyZShcInZtXCIpO09iamVjdC5hc3NpZ24oZ2xvYmFsLHtzZWxmOmdsb2JhbCxyZXF1aXJlOnJlcXVpcmUsTW9kdWxlOk1vZHVsZSxsb2NhdGlvbjp7aHJlZjpfX2ZpbGVuYW1lfSxXb3JrZXI6bm9kZVdvcmtlclRocmVhZHMuV29ya2VyLGltcG9ydFNjcmlwdHM6Zj0+dm0ucnVuSW5UaGlzQ29udGV4dChmcy5yZWFkRmlsZVN5bmMoZixcInV0ZjhcIikse2ZpbGVuYW1lOmZ9KSxwb3N0TWVzc2FnZTptc2c9PnBhcmVudFBvcnQucG9zdE1lc3NhZ2UobXNnKSxwZXJmb3JtYW5jZTpnbG9iYWwucGVyZm9ybWFuY2V8fHtub3c6RGF0ZS5ub3d9fSl9dmFyIGluaXRpYWxpemVkSlM9ZmFsc2U7ZnVuY3Rpb24gdGhyZWFkUHJpbnRFcnIoKXt2YXIgdGV4dD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oXCIgXCIpO2lmKEVOVklST05NRU5UX0lTX05PREUpe2ZzLndyaXRlU3luYygyLHRleHQrXCJcXFxcblwiKTtyZXR1cm59Y29uc29sZS5lcnJvcih0ZXh0KX1mdW5jdGlvbiB0aHJlYWRBbGVydCgpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7cG9zdE1lc3NhZ2Uoe2NtZDpcImFsZXJ0XCIsdGV4dDp0ZXh0LHRocmVhZElkOk1vZHVsZVtcIl9wdGhyZWFkX3NlbGZcIl0oKX0pfXZhciBlcnI9dGhyZWFkUHJpbnRFcnI7c2VsZi5hbGVydD10aHJlYWRBbGVydDtNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl09KGluZm8scmVjZWl2ZUluc3RhbmNlKT0+e3ZhciBtb2R1bGU9TW9kdWxlW1wid2FzbU1vZHVsZVwiXTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPW51bGw7dmFyIGluc3RhbmNlPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUsaW5mbyk7cmV0dXJuIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSl9O3NlbGYub251bmhhbmRsZWRyZWplY3Rpb249ZT0+e3Rocm93IGUucmVhc29ufHxlfTtmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGUpe3RyeXtpZihlLmRhdGEuY21kPT09XCJsb2FkXCIpe2xldCBtZXNzYWdlUXVldWU9W107c2VsZi5vbm1lc3NhZ2U9ZT0+bWVzc2FnZVF1ZXVlLnB1c2goZSk7c2VsZi5zdGFydFdvcmtlcj1pbnN0YW5jZT0+e01vZHVsZT1pbnN0YW5jZTtwb3N0TWVzc2FnZSh7XCJjbWRcIjpcImxvYWRlZFwifSk7Zm9yKGxldCBtc2cgb2YgbWVzc2FnZVF1ZXVlKXtoYW5kbGVNZXNzYWdlKG1zZyl9c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZX07TW9kdWxlW1wid2FzbU1vZHVsZVwiXT1lLmRhdGEud2FzbU1vZHVsZTtmb3IoY29uc3QgaGFuZGxlciBvZiBlLmRhdGEuaGFuZGxlcnMpe01vZHVsZVtoYW5kbGVyXT0oLi4uYXJncyk9Pntwb3N0TWVzc2FnZSh7Y21kOlwiY2FsbEhhbmRsZXJcIixoYW5kbGVyOmhhbmRsZXIsYXJnczphcmdzfSl9fU1vZHVsZVtcIndhc21NZW1vcnlcIl09ZS5kYXRhLndhc21NZW1vcnk7TW9kdWxlW1wiYnVmZmVyXCJdPU1vZHVsZVtcIndhc21NZW1vcnlcIl0uYnVmZmVyO01vZHVsZVtcIkVOVklST05NRU5UX0lTX1BUSFJFQURcIl09dHJ1ZTtpZih0eXBlb2YgZS5kYXRhLnVybE9yQmxvYj09XCJzdHJpbmdcIil7aW1wb3J0U2NyaXB0cyhlLmRhdGEudXJsT3JCbG9iKX1lbHNle3ZhciBvYmplY3RVcmw9VVJMLmNyZWF0ZU9iamVjdFVSTChlLmRhdGEudXJsT3JCbG9iKTtpbXBvcnRTY3JpcHRzKG9iamVjdFVybCk7VVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVcmwpfW9ydFdhc21UaHJlYWRlZChNb2R1bGUpfWVsc2UgaWYoZS5kYXRhLmNtZD09PVwicnVuXCIpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdFwiXShlLmRhdGEucHRocmVhZF9wdHIsLyppc19tYWluPSovMCwvKmlzX3J1bnRpbWU9Ki8wLC8qY2FuX2Jsb2NrPSovMSk7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9tYWlsYm94X2F3YWl0XCJdKGUuZGF0YS5wdGhyZWFkX3B0cik7TW9kdWxlW1wiZXN0YWJsaXNoU3RhY2tTcGFjZVwiXSgpO01vZHVsZVtcIlBUaHJlYWRcIl0ucmVjZWl2ZU9iamVjdFRyYW5zZmVyKGUuZGF0YSk7TW9kdWxlW1wiUFRocmVhZFwiXS50aHJlYWRJbml0VExTKCk7aWYoIWluaXRpYWxpemVkSlMpe2luaXRpYWxpemVkSlM9dHJ1ZX10cnl7TW9kdWxlW1wiaW52b2tlRW50cnlQb2ludFwiXShlLmRhdGEuc3RhcnRfcm91dGluZSxlLmRhdGEuYXJnKX1jYXRjaChleCl7aWYoZXghPVwidW53aW5kXCIpe3Rocm93IGV4fX19ZWxzZSBpZihlLmRhdGEuY21kPT09XCJjYW5jZWxcIil7aWYoTW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXSgpKXtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXRcIl0oLTEpfX1lbHNlIGlmKGUuZGF0YS50YXJnZXQ9PT1cInNldGltbWVkaWF0ZVwiKXt9ZWxzZSBpZihlLmRhdGEuY21kPT09XCJjaGVja01haWxib3hcIil7aWYoaW5pdGlhbGl6ZWRKUyl7TW9kdWxlW1wiY2hlY2tNYWlsYm94XCJdKCl9fWVsc2UgaWYoZS5kYXRhLmNtZCl7ZXJyKGB3b3JrZXIuanMgcmVjZWl2ZWQgdW5rbm93biBjb21tYW5kICR7ZS5kYXRhLmNtZH1gKTtlcnIoZS5kYXRhKX19Y2F0Y2goZXgpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfY3Jhc2hlZFwiXT8uKCk7dGhyb3cgZXh9fXNlbGYub25tZXNzYWdlPWhhbmRsZU1lc3NhZ2U7XFxuJztcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6bm9kZTpwYXRoXG4gIHZhciBqb2luID0gdm9pZCAwO1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLWZhY3RvcnkudHNcbiAgdmFyIG9ydFdhc21GYWN0b3J5O1xuICBpZiAodHJ1ZSkge1xuICAgIG9ydFdhc21GYWN0b3J5ID0gcmVxdWlyZV9vcnRfdHJhaW5pbmdfd2FzbV9zaW1kKCk7XG4gIH0gZWxzZSB7XG4gICAgb3J0V2FzbUZhY3RvcnkgPSB0cnVlID8gbnVsbCA6IG51bGw7XG4gIH1cbiAgdmFyIG9ydFdhc21GYWN0b3J5VGhyZWFkZWQgPSB0cnVlID8gdHJ1ZSA/IHJlcXVpcmVfb3J0X3dhc21fdGhyZWFkZWQoKSA6IG51bGwgOiBvcnRXYXNtRmFjdG9yeTtcbiAgdmFyIHdhc207XG4gIHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuICB2YXIgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gIHZhciBhYm9ydGVkID0gZmFsc2U7XG4gIHZhciBpc011bHRpVGhyZWFkU3VwcG9ydGVkID0gKG51bVRocmVhZHMpID0+IHtcbiAgICBpZiAobnVtVGhyZWFkcyA9PT0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgIXNlbGYuY3Jvc3NPcmlnaW5Jc29sYXRlZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJlbnYud2FzbS5udW1UaHJlYWRzIGlzIHNldCB0byBcIiArIG51bVRocmVhZHMgKyBcIiwgYnV0IHRoaXMgd2lsbCBub3Qgd29yayB1bmxlc3MgeW91IGVuYWJsZSBjcm9zc09yaWdpbklzb2xhdGVkIG1vZGUuIFNlZSBodHRwczovL3dlYi5kZXYvY3Jvc3Mtb3JpZ2luLWlzb2xhdGlvbi1ndWlkZS8gZm9yIG1vcmUgaW5mby5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJlbnYud2FzbS5udW1UaHJlYWRzIGlzIHNldCB0byBcIiArIG51bVRocmVhZHMgKyBcIiwgaG93ZXZlciwgY3VycmVudGx5IG9ubnhydW50aW1lLXdlYiBkb2VzIG5vdCBzdXBwb3J0IG11bHRpLXRocmVhZHMgaW4gTm9kZS5qcy4gUGxlYXNlIGNvbnNpZGVyIHVzaW5nIG9ubnhydW50aW1lLW5vZGUgZm9yIHBlcmZvcm1hbmNlIGNyaXRpY2FsIHNjZW5hcmlvcy5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEucG9zdE1lc3NhZ2UobmV3IFNoYXJlZEFycmF5QnVmZmVyKDEpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBXZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIDAsXG4gICAgICAgIDk3LFxuICAgICAgICAxMTUsXG4gICAgICAgIDEwOSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgNCxcbiAgICAgICAgMSxcbiAgICAgICAgOTYsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDMsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDUsXG4gICAgICAgIDQsXG4gICAgICAgIDEsXG4gICAgICAgIDMsXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDEwLFxuICAgICAgICAxMSxcbiAgICAgICAgMSxcbiAgICAgICAgOSxcbiAgICAgICAgMCxcbiAgICAgICAgNjUsXG4gICAgICAgIDAsXG4gICAgICAgIDI1NCxcbiAgICAgICAgMTYsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDI2LFxuICAgICAgICAxMVxuICAgICAgXSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIHZhciBpc1NpbWRTdXBwb3J0ZWQgPSAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBXZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIDAsXG4gICAgICAgIDk3LFxuICAgICAgICAxMTUsXG4gICAgICAgIDEwOSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgNCxcbiAgICAgICAgMSxcbiAgICAgICAgOTYsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDMsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEwLFxuICAgICAgICAzMCxcbiAgICAgICAgMSxcbiAgICAgICAgMjgsXG4gICAgICAgIDAsXG4gICAgICAgIDY1LFxuICAgICAgICAwLFxuICAgICAgICAyNTMsXG4gICAgICAgIDE1LFxuICAgICAgICAyNTMsXG4gICAgICAgIDEyLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAyNTMsXG4gICAgICAgIDE4NixcbiAgICAgICAgMSxcbiAgICAgICAgMjYsXG4gICAgICAgIDExXG4gICAgICBdKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldFdhc21GaWxlTmFtZSA9ICh1c2VTaW1kLCB1c2VUaHJlYWRzKSA9PiB7XG4gICAgaWYgKHVzZVNpbWQpIHtcbiAgICAgIGlmICh0cnVlKSB7XG4gICAgICAgIHJldHVybiBcIm9ydC10cmFpbmluZy13YXNtLXNpbWQud2FzbVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVzZVRocmVhZHMgPyBcIm9ydC13YXNtLXNpbWQtdGhyZWFkZWQud2FzbVwiIDogXCJvcnQtd2FzbS1zaW1kLndhc21cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVzZVRocmVhZHMgPyBcIm9ydC13YXNtLXRocmVhZGVkLndhc21cIiA6IFwib3J0LXdhc20ud2FzbVwiO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluaXRpYWxpemVXZWJBc3NlbWJseSA9IGFzeW5jIChmbGFncykgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBpZiAoaW5pdGlhbGl6aW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSBjYWxscyB0byAnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KCknIGRldGVjdGVkLlwiKTtcbiAgICB9XG4gICAgaWYgKGFib3J0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInByZXZpb3VzIGNhbGwgdG8gJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpJyBmYWlsZWQuXCIpO1xuICAgIH1cbiAgICBpbml0aWFsaXppbmcgPSB0cnVlO1xuICAgIGNvbnN0IHRpbWVvdXQgPSBmbGFncy5pbml0VGltZW91dDtcbiAgICBjb25zdCBudW1UaHJlYWRzID0gZmxhZ3MubnVtVGhyZWFkcztcbiAgICBjb25zdCBzaW1kID0gZmxhZ3Muc2ltZDtcbiAgICBjb25zdCB1c2VUaHJlYWRzID0gaXNNdWx0aVRocmVhZFN1cHBvcnRlZChudW1UaHJlYWRzKTtcbiAgICBjb25zdCB1c2VTaW1kID0gc2ltZCAmJiBpc1NpbWRTdXBwb3J0ZWQoKTtcbiAgICBjb25zdCB3YXNtUGF0aHMgPSBmbGFncy53YXNtUGF0aHM7XG4gICAgY29uc3Qgd2FzbVByZWZpeE92ZXJyaWRlID0gdHlwZW9mIHdhc21QYXRocyA9PT0gXCJzdHJpbmdcIiA/IHdhc21QYXRocyA6IHZvaWQgMDtcbiAgICBjb25zdCB3YXNtRmlsZU5hbWUgPSBnZXRXYXNtRmlsZU5hbWUodXNlU2ltZCwgdXNlVGhyZWFkcyk7XG4gICAgY29uc3Qgd2FzbVBhdGhPdmVycmlkZSA9IHR5cGVvZiB3YXNtUGF0aHMgPT09IFwib2JqZWN0XCIgPyB3YXNtUGF0aHNbd2FzbUZpbGVOYW1lXSA6IHZvaWQgMDtcbiAgICBsZXQgaXNUaW1lb3V0ID0gZmFsc2U7XG4gICAgY29uc3QgdGFza3MgPSBbXTtcbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHRhc2tzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaXNUaW1lb3V0ID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGZhY3RvcnkgPSB1c2VUaHJlYWRzID8gb3J0V2FzbUZhY3RvcnlUaHJlYWRlZCA6IG9ydFdhc21GYWN0b3J5O1xuICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBsb2NhdGVGaWxlOiAoZmlsZU5hbWUsIHNjcmlwdERpcmVjdG9yeSkgPT4ge1xuICAgICAgICAgIGlmICh1c2VUaHJlYWRzICYmIGZpbGVOYW1lLmVuZHNXaXRoKFwiLndvcmtlci5qc1wiKSAmJiB0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmUoKSBmdW5jdGlvbiBpcyBoYW5kbGVkIGJ5IGVzYnVpbGQgcGx1Z2luIHRvIGxvYWQgZmlsZSBjb250ZW50IGFzIHN0cmluZy5cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgICAgICAgICAgICAgIHJlcXVpcmVfb3J0X3dhc21fdGhyZWFkZWRfd29ya2VyKClcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgeyB0eXBlOiBcInRleHQvamF2YXNjcmlwdFwiIH1cbiAgICAgICAgICAgICkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmlsZU5hbWUuZW5kc1dpdGgoXCIud2FzbVwiKSkge1xuICAgICAgICAgICAgaWYgKHdhc21QYXRoT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHdhc21QYXRoT3ZlcnJpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcmVmaXggPSB3YXNtUHJlZml4T3ZlcnJpZGUgPz8gc2NyaXB0RGlyZWN0b3J5O1xuICAgICAgICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgICAgICAgIGlmICh3YXNtRmlsZU5hbWUgPT09IFwib3J0LXdhc20tc2ltZC53YXNtXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgXCJvcnQtd2FzbS1zaW1kLmpzZXAud2FzbVwiO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdhc21GaWxlTmFtZSA9PT0gXCJvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc21cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBcIm9ydC13YXNtLXNpbWQtdGhyZWFkZWQuanNlcC53YXNtXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyB3YXNtRmlsZU5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzY3JpcHREaXJlY3RvcnkgKyBmaWxlTmFtZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlmICh1c2VUaHJlYWRzKSB7XG4gICAgICAgIGNvbmZpZy5udW1UaHJlYWRzID0gbnVtVGhyZWFkcztcbiAgICAgICAgaWYgKHR5cGVvZiBCbG9iID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgY29uZmlnLm1haW5TY3JpcHRVcmxPckJsb2IgPSBqb2luKF9fZGlybmFtZSwgXCJvcnQtd2FzbS10aHJlYWRlZC5qc1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzY3JpcHRTb3VyY2VDb2RlID0gYHZhciBvcnRXYXNtVGhyZWFkZWQ9JHtmYWN0b3J5LnRvU3RyaW5nKCl9O2A7XG4gICAgICAgICAgY29uZmlnLm1haW5TY3JpcHRVcmxPckJsb2IgPSBuZXcgQmxvYihbc2NyaXB0U291cmNlQ29kZV0sIHsgdHlwZTogXCJ0ZXh0L2phdmFzY3JpcHRcIiB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmFjdG9yeShjb25maWcpLnRoZW4oXG4gICAgICAgIC8vIHdhc20gbW9kdWxlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseVxuICAgICAgICAobW9kdWxlKSA9PiB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIHdhc20gPSBtb2R1bGU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyB3YXNtIG1vZHVsZSBmYWlsZWQgdG8gaW5pdGlhbGl6ZVxuICAgICAgICAod2hhdCkgPT4ge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgIHJlamVjdCh3aGF0KTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSk7XG4gICAgYXdhaXQgUHJvbWlzZS5yYWNlKHRhc2tzKTtcbiAgICBpZiAoaXNUaW1lb3V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFdlYkFzc2VtYmx5IGJhY2tlbmQgaW5pdGlhbGl6aW5nIGZhaWxlZCBkdWUgdG8gdGltZW91dDogJHt0aW1lb3V0fW1zYCk7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0SW5zdGFuY2UgPSAoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkICYmIHdhc20pIHtcbiAgICAgIHJldHVybiB3YXNtO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZWJBc3NlbWJseSBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0LlwiKTtcbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vd2FzbS11dGlscy50c1xuICB2YXIgYWxsb2NXYXNtU3RyaW5nID0gKGRhdGEsIGFsbG9jcykgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBkYXRhTGVuZ3RoID0gd2FzbTIubGVuZ3RoQnl0ZXNVVEY4KGRhdGEpICsgMTtcbiAgICBjb25zdCBkYXRhT2Zmc2V0ID0gd2FzbTIuX21hbGxvYyhkYXRhTGVuZ3RoKTtcbiAgICB3YXNtMi5zdHJpbmdUb1VURjgoZGF0YSwgZGF0YU9mZnNldCwgZGF0YUxlbmd0aCk7XG4gICAgYWxsb2NzLnB1c2goZGF0YU9mZnNldCk7XG4gICAgcmV0dXJuIGRhdGFPZmZzZXQ7XG4gIH07XG4gIHZhciBpdGVyYXRlRXh0cmFPcHRpb25zID0gKG9wdGlvbnMsIHByZWZpeCwgc2VlbiwgaGFuZGxlcikgPT4ge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSBcIm9iamVjdFwiICYmIG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZWVuLmhhcyhvcHRpb25zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaXJjdWxhciByZWZlcmVuY2UgaW4gb3B0aW9uc1wiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZW4uYWRkKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZW50cmllcyhvcHRpb25zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwcmVmaXggPyBwcmVmaXggKyBrZXkgOiBrZXk7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnModmFsdWUsIG5hbWUgKyBcIi5cIiwgc2VlbiwgaGFuZGxlcik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaGFuZGxlcihuYW1lLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBoYW5kbGVyKG5hbWUsIHZhbHVlID8gXCIxXCIgOiBcIjBcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGhhbmRsZSBleHRyYSBjb25maWcgdHlwZTogJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHZhciBjaGVja0xhc3RFcnJvciA9IChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcmFtc09mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoOCk7XG4gICAgICB3YXNtMi5fT3J0R2V0TGFzdEVycm9yKHBhcmFtc09mZnNldCwgcGFyYW1zT2Zmc2V0ICsgNCk7XG4gICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtMi5IRUFQMzJbcGFyYW1zT2Zmc2V0IC8gNF07XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2VQb2ludGVyID0gd2FzbTIuSEVBUFUzMltwYXJhbXNPZmZzZXQgLyA0ICsgMV07XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VQb2ludGVyID8gd2FzbTIuVVRGOFRvU3RyaW5nKGVycm9yTWVzc2FnZVBvaW50ZXIpIDogXCJcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHttZXNzYWdlfSBFUlJPUl9DT0RFOiAke2Vycm9yQ29kZX0sIEVSUk9SX01FU1NBR0U6ICR7ZXJyb3JNZXNzYWdlfWApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgIH1cbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vcnVuLW9wdGlvbnMudHNcbiAgdmFyIHNldFJ1bk9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBsZXQgcnVuT3B0aW9uc0hhbmRsZSA9IDA7XG4gICAgY29uc3QgYWxsb2NzID0gW107XG4gICAgY29uc3QgcnVuT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdHJ5IHtcbiAgICAgIGlmIChvcHRpb25zPy5sb2dTZXZlcml0eUxldmVsID09PSB2b2lkIDApIHtcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsID0gMjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCAhPT0gXCJudW1iZXJcIiB8fCAhTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwpIHx8IG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA8IDAgfHwgb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyBzZXJ2ZXJpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke29wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbH1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zPy5sb2dWZXJib3NpdHlMZXZlbCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJ1bk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPSAwO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCAhPT0gXCJudW1iZXJcIiB8fCAhTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyB2ZXJib3NpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke29wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucz8udGVybWluYXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgcnVuT3B0aW9ucy50ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGxldCB0YWdEYXRhT2Zmc2V0ID0gMDtcbiAgICAgIGlmIChvcHRpb25zPy50YWcgIT09IHZvaWQgMCkge1xuICAgICAgICB0YWdEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG9wdGlvbnMudGFnLCBhbGxvY3MpO1xuICAgICAgfVxuICAgICAgcnVuT3B0aW9uc0hhbmRsZSA9IHdhc20yLl9PcnRDcmVhdGVSdW5PcHRpb25zKFxuICAgICAgICBydW5PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwsXG4gICAgICAgIHJ1bk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwsXG4gICAgICAgICEhcnVuT3B0aW9ucy50ZXJtaW5hdGUsXG4gICAgICAgIHRhZ0RhdGFPZmZzZXRcbiAgICAgICk7XG4gICAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGNyZWF0ZSBydW4gb3B0aW9ucy5cIik7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucz8uZXh0cmEgIT09IHZvaWQgMCkge1xuICAgICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKG9wdGlvbnMuZXh0cmEsIFwiXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoa2V5LCBhbGxvY3MpO1xuICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcbiAgICAgICAgICBpZiAod2FzbTIuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5KHJ1bk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBydW4gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtydW5PcHRpb25zSGFuZGxlLCBhbGxvY3NdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGFsbG9jcy5mb3JFYWNoKChhbGxvYykgPT4gd2FzbTIuX2ZyZWUoYWxsb2MpKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS9zZXNzaW9uLW9wdGlvbnMudHNcbiAgdmFyIGdldEdyYXBoT3B0aW16YXRpb25MZXZlbCA9IChncmFwaE9wdGltaXphdGlvbkxldmVsKSA9PiB7XG4gICAgc3dpdGNoIChncmFwaE9wdGltaXphdGlvbkxldmVsKSB7XG4gICAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwiYmFzaWNcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwiZXh0ZW5kZWRcIjpcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICBjYXNlIFwiYWxsXCI6XG4gICAgICAgIHJldHVybiA5OTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZ3JhcGggb3B0aW1pemF0aW9uIGxldmVsOiAke2dyYXBoT3B0aW1pemF0aW9uTGV2ZWx9YCk7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0RXhlY3V0aW9uTW9kZSA9IChleGVjdXRpb25Nb2RlKSA9PiB7XG4gICAgc3dpdGNoIChleGVjdXRpb25Nb2RlKSB7XG4gICAgICBjYXNlIFwic2VxdWVudGlhbFwiOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgXCJwYXJhbGxlbFwiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZXhlY3V0aW9uIG1vZGU6ICR7ZXhlY3V0aW9uTW9kZX1gKTtcbiAgICB9XG4gIH07XG4gIHZhciBhcHBlbmREZWZhdWx0T3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFvcHRpb25zLmV4dHJhKSB7XG4gICAgICBvcHRpb25zLmV4dHJhID0ge307XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5leHRyYS5zZXNzaW9uKSB7XG4gICAgICBvcHRpb25zLmV4dHJhLnNlc3Npb24gPSB7fTtcbiAgICB9XG4gICAgY29uc3Qgc2Vzc2lvbiA9IG9wdGlvbnMuZXh0cmEuc2Vzc2lvbjtcbiAgICBpZiAoIXNlc3Npb24udXNlX29ydF9tb2RlbF9ieXRlc19kaXJlY3RseSkge1xuICAgICAgc2Vzc2lvbi51c2Vfb3J0X21vZGVsX2J5dGVzX2RpcmVjdGx5ID0gXCIxXCI7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycyAmJiBvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycy5zb21lKChlcCkgPT4gKHR5cGVvZiBlcCA9PT0gXCJzdHJpbmdcIiA/IGVwIDogZXAubmFtZSkgPT09IFwid2ViZ3B1XCIpKSB7XG4gICAgICBvcHRpb25zLmVuYWJsZU1lbVBhdHRlcm4gPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIHZhciBzZXRFeGVjdXRpb25Qcm92aWRlcnMgPSAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGV4ZWN1dGlvblByb3ZpZGVycywgYWxsb2NzKSA9PiB7XG4gICAgZm9yIChjb25zdCBlcCBvZiBleGVjdXRpb25Qcm92aWRlcnMpIHtcbiAgICAgIGxldCBlcE5hbWUgPSB0eXBlb2YgZXAgPT09IFwic3RyaW5nXCIgPyBlcCA6IGVwLm5hbWU7XG4gICAgICBzd2l0Y2ggKGVwTmFtZSkge1xuICAgICAgICBjYXNlIFwid2Vibm5cIjpcbiAgICAgICAgICBlcE5hbWUgPSBcIldFQk5OXCI7XG4gICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3Qgd2Vibm5PcHRpb25zID0gZXA7XG4gICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5kZXZpY2VUeXBlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoXCJkZXZpY2VUeXBlXCIsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMuZGV2aWNlVHlwZSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ2RldmljZVR5cGUnIC0gJHt3ZWJubk9wdGlvbnMuZGV2aWNlVHlwZX0uYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/Lm51bVRocmVhZHMpIHtcbiAgICAgICAgICAgICAgbGV0IG51bVRocmVhZHMgPSB3ZWJubk9wdGlvbnMubnVtVGhyZWFkcztcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudW1UaHJlYWRzICE9IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIobnVtVGhyZWFkcykgfHwgbnVtVGhyZWFkcyA8IDApIHtcbiAgICAgICAgICAgICAgICBudW1UaHJlYWRzID0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKFwibnVtVGhyZWFkc1wiLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcobnVtVGhyZWFkcy50b1N0cmluZygpLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAnbnVtVGhyZWFkcycgLSAke3dlYm5uT3B0aW9ucy5udW1UaHJlYWRzfS5gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdlYm5uT3B0aW9ucz8ucG93ZXJQcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoXCJwb3dlclByZWZlcmVuY2VcIiwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYm5uT3B0aW9ucy5wb3dlclByZWZlcmVuY2UsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihcbiAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3Bvd2VyUHJlZmVyZW5jZScgLSAke3dlYm5uT3B0aW9ucy5wb3dlclByZWZlcmVuY2V9LmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwid2ViZ3B1XCI6XG4gICAgICAgICAgZXBOYW1lID0gXCJKU1wiO1xuICAgICAgICAgIGlmICh0eXBlb2YgZXAgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHdlYmdwdU9wdGlvbnMgPSBlcDtcbiAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zPy5wcmVmZXJyZWRMYXlvdXQpIHtcbiAgICAgICAgICAgICAgaWYgKHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0ICE9PSBcIk5DSFdcIiAmJiB3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gXCJOSFdDXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHByZWZlcnJlZExheW91dCBtdXN0IGJlIGVpdGhlciAnTkNIVycgb3IgJ05IV0MnOiAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoXCJwcmVmZXJyZWRMYXlvdXRcIiwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0LCBhbGxvY3MpO1xuICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXG4gICAgICAgICAgICAgICAgICBgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdwcmVmZXJyZWRMYXlvdXQnIC0gJHt3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dH0uYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ3YXNtXCI6XG4gICAgICAgIGNhc2UgXCJjcHVcIjpcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBzdXBwb3J0ZWQgZXhlY3V0aW9uIHByb3ZpZGVyOiAke2VwTmFtZX1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVwTmFtZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoZXBOYW1lLCBhbGxvY3MpO1xuICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyKHNlc3Npb25PcHRpb25zSGFuZGxlLCBlcE5hbWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYXBwZW5kIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9LmApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIHNldFNlc3Npb25PcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgICBjb25zdCBhbGxvY3MgPSBbXTtcbiAgICBjb25zdCBzZXNzaW9uT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgYXBwZW5kRGVmYXVsdE9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBncmFwaE9wdGltaXphdGlvbkxldmVsID0gZ2V0R3JhcGhPcHRpbXphdGlvbkxldmVsKHNlc3Npb25PcHRpb25zLmdyYXBoT3B0aW1pemF0aW9uTGV2ZWwgPz8gXCJhbGxcIik7XG4gICAgICBjb25zdCBleGVjdXRpb25Nb2RlID0gZ2V0RXhlY3V0aW9uTW9kZShzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Nb2RlID8/IFwic2VxdWVudGlhbFwiKTtcbiAgICAgIGNvbnN0IGxvZ0lkRGF0YU9mZnNldCA9IHR5cGVvZiBzZXNzaW9uT3B0aW9ucy5sb2dJZCA9PT0gXCJzdHJpbmdcIiA/IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5sb2dJZCwgYWxsb2NzKSA6IDA7XG4gICAgICBjb25zdCBsb2dTZXZlcml0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA/PyAyO1xuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGxvZ1NldmVyaXR5TGV2ZWwpIHx8IGxvZ1NldmVyaXR5TGV2ZWwgPCAwIHx8IGxvZ1NldmVyaXR5TGV2ZWwgPiA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHNlcnZlcml0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nU2V2ZXJpdHlMZXZlbH1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxvZ1ZlcmJvc2l0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPz8gMDtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsb2dWZXJib3NpdHlMZXZlbCkgfHwgbG9nVmVyYm9zaXR5TGV2ZWwgPCAwIHx8IGxvZ1ZlcmJvc2l0eUxldmVsID4gNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyB2ZXJib3NpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke2xvZ1ZlcmJvc2l0eUxldmVsfWApO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3B0aW1pemVkTW9kZWxGaWxlUGF0aE9mZnNldCA9IHR5cGVvZiBzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoID09PSBcInN0cmluZ1wiID8gYWxsb2NXYXNtU3RyaW5nKHNlc3Npb25PcHRpb25zLm9wdGltaXplZE1vZGVsRmlsZVBhdGgsIGFsbG9jcykgOiAwO1xuICAgICAgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSB3YXNtMi5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMoXG4gICAgICAgIGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwsXG4gICAgICAgICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlQ3B1TWVtQXJlbmEsXG4gICAgICAgICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybixcbiAgICAgICAgZXhlY3V0aW9uTW9kZSxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVQcm9maWxpbmcsXG4gICAgICAgIDAsXG4gICAgICAgIGxvZ0lkRGF0YU9mZnNldCxcbiAgICAgICAgbG9nU2V2ZXJpdHlMZXZlbCxcbiAgICAgICAgbG9nVmVyYm9zaXR5TGV2ZWwsXG4gICAgICAgIG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXRcbiAgICAgICk7XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBjcmVhdGUgc2Vzc2lvbiBvcHRpb25zLlwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMpIHtcbiAgICAgICAgc2V0RXhlY3V0aW9uUHJvdmlkZXJzKHNlc3Npb25PcHRpb25zSGFuZGxlLCBzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMsIGFsbG9jcyk7XG4gICAgICB9XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykge1xuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nOiAke25hbWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIodmFsdWUpIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZSB2YWx1ZSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXI6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG5hbWVPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcobmFtZSwgYWxsb2NzKTtcbiAgICAgICAgICBpZiAod2FzbTIuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZShzZXNzaW9uT3B0aW9uc0hhbmRsZSwgbmFtZU9mZnNldCwgdmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGU6ICR7bmFtZX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzZXNzaW9uT3B0aW9ucy5leHRyYSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMuZXh0cmEsIFwiXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoa2V5LCBhbGxvY3MpO1xuICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcbiAgICAgICAgICBpZiAod2FzbTIuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyhzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBhbGxvY3MuZm9yRWFjaCgoYWxsb2MpID0+IHdhc20yLl9mcmVlKGFsbG9jKSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vd2FzbS1jb21tb24udHNcbiAgdmFyIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtID0gKHR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJpbnQ4XCI6XG4gICAgICAgIHJldHVybiAzIC8qIGludDggKi87XG4gICAgICBjYXNlIFwidWludDhcIjpcbiAgICAgICAgcmV0dXJuIDIgLyogdWludDggKi87XG4gICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICByZXR1cm4gOSAvKiBib29sICovO1xuICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgIHJldHVybiA1IC8qIGludDE2ICovO1xuICAgICAgY2FzZSBcInVpbnQxNlwiOlxuICAgICAgICByZXR1cm4gNCAvKiB1aW50MTYgKi87XG4gICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgcmV0dXJuIDYgLyogaW50MzIgKi87XG4gICAgICBjYXNlIFwidWludDMyXCI6XG4gICAgICAgIHJldHVybiAxMiAvKiB1aW50MzIgKi87XG4gICAgICBjYXNlIFwiZmxvYXQxNlwiOlxuICAgICAgICByZXR1cm4gMTAgLyogZmxvYXQxNiAqLztcbiAgICAgIGNhc2UgXCJmbG9hdDMyXCI6XG4gICAgICAgIHJldHVybiAxIC8qIGZsb2F0ICovO1xuICAgICAgY2FzZSBcImZsb2F0NjRcIjpcbiAgICAgICAgcmV0dXJuIDExIC8qIGRvdWJsZSAqLztcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgcmV0dXJuIDggLyogc3RyaW5nICovO1xuICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgIHJldHVybiA3IC8qIGludDY0ICovO1xuICAgICAgY2FzZSBcInVpbnQ2NFwiOlxuICAgICAgICByZXR1cm4gMTMgLyogdWludDY0ICovO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZX1gKTtcbiAgICB9XG4gIH07XG4gIHZhciB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyA9ICh0eXBlUHJvdG8pID0+IHtcbiAgICBzd2l0Y2ggKHR5cGVQcm90bykge1xuICAgICAgY2FzZSAzIC8qIGludDggKi86XG4gICAgICAgIHJldHVybiBcImludDhcIjtcbiAgICAgIGNhc2UgMiAvKiB1aW50OCAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDhcIjtcbiAgICAgIGNhc2UgOSAvKiBib29sICovOlxuICAgICAgICByZXR1cm4gXCJib29sXCI7XG4gICAgICBjYXNlIDUgLyogaW50MTYgKi86XG4gICAgICAgIHJldHVybiBcImludDE2XCI7XG4gICAgICBjYXNlIDQgLyogdWludDE2ICovOlxuICAgICAgICByZXR1cm4gXCJ1aW50MTZcIjtcbiAgICAgIGNhc2UgNiAvKiBpbnQzMiAqLzpcbiAgICAgICAgcmV0dXJuIFwiaW50MzJcIjtcbiAgICAgIGNhc2UgMTIgLyogdWludDMyICovOlxuICAgICAgICByZXR1cm4gXCJ1aW50MzJcIjtcbiAgICAgIGNhc2UgMTAgLyogZmxvYXQxNiAqLzpcbiAgICAgICAgcmV0dXJuIFwiZmxvYXQxNlwiO1xuICAgICAgY2FzZSAxIC8qIGZsb2F0ICovOlxuICAgICAgICByZXR1cm4gXCJmbG9hdDMyXCI7XG4gICAgICBjYXNlIDExIC8qIGRvdWJsZSAqLzpcbiAgICAgICAgcmV0dXJuIFwiZmxvYXQ2NFwiO1xuICAgICAgY2FzZSA4IC8qIHN0cmluZyAqLzpcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICBjYXNlIDcgLyogaW50NjQgKi86XG4gICAgICAgIHJldHVybiBcImludDY0XCI7XG4gICAgICBjYXNlIDEzIC8qIHVpbnQ2NCAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDY0XCI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgdHlwZTogJHt0eXBlUHJvdG99YCk7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0VGVuc29yRWxlbWVudFNpemUgPSAoZGF0ZVR5cGUpID0+IFt2b2lkIDAsIDQsIDEsIDEsIDIsIDIsIDQsIDgsIHZvaWQgMCwgMSwgMiwgOCwgNCwgOCwgdm9pZCAwLCB2b2lkIDAsIHZvaWQgMF1bZGF0ZVR5cGVdO1xuICB2YXIgdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gKHR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJmbG9hdDE2XCI6XG4gICAgICAgIHJldHVybiBVaW50MTZBcnJheTtcbiAgICAgIGNhc2UgXCJmbG9hdDMyXCI6XG4gICAgICAgIHJldHVybiBGbG9hdDMyQXJyYXk7XG4gICAgICBjYXNlIFwidWludDhcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICBjYXNlIFwiaW50OFwiOlxuICAgICAgICByZXR1cm4gSW50OEFycmF5O1xuICAgICAgY2FzZSBcInVpbnQxNlwiOlxuICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICBjYXNlIFwiaW50MTZcIjpcbiAgICAgICAgcmV0dXJuIEludDE2QXJyYXk7XG4gICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgcmV0dXJuIEludDMyQXJyYXk7XG4gICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgIGNhc2UgXCJmbG9hdDY0XCI6XG4gICAgICAgIHJldHVybiBGbG9hdDY0QXJyYXk7XG4gICAgICBjYXNlIFwidWludDMyXCI6XG4gICAgICAgIHJldHVybiBVaW50MzJBcnJheTtcbiAgICAgIGNhc2UgXCJpbnQ2NFwiOlxuICAgICAgICByZXR1cm4gQmlnSW50NjRBcnJheTtcbiAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgcmV0dXJuIEJpZ1VpbnQ2NEFycmF5O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCB0eXBlOiAke3R5cGV9YCk7XG4gICAgfVxuICB9O1xuICB2YXIgbG9nTGV2ZWxTdHJpbmdUb0VudW0gPSAobG9nTGV2ZWwpID0+IHtcbiAgICBzd2l0Y2ggKGxvZ0xldmVsKSB7XG4gICAgICBjYXNlIFwidmVyYm9zZVwiOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgXCJpbmZvXCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBcIndhcm5pbmdcIjpcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgcmV0dXJuIDM7XG4gICAgICBjYXNlIFwiZmF0YWxcIjpcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGxvZ2dpbmcgbGV2ZWw6ICR7bG9nTGV2ZWx9YCk7XG4gICAgfVxuICB9O1xuICB2YXIgaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlID0gKHR5cGUpID0+IHR5cGUgPT09IFwiZmxvYXQzMlwiIHx8IHR5cGUgPT09IFwiaW50MzJcIiB8fCB0eXBlID09PSBcImludDY0XCIgfHwgdHlwZSA9PT0gXCJib29sXCIgfHwgdHlwZSA9PT0gXCJmbG9hdDE2XCIgfHwgdHlwZSA9PT0gXCJ1aW50MzJcIjtcbiAgdmFyIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bSA9IChsb2NhdGlvbikgPT4ge1xuICAgIHN3aXRjaCAobG9jYXRpb24pIHtcbiAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSBcImNwdVwiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgXCJjcHUtcGlubmVkXCI6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSBcInRleHR1cmVcIjpcbiAgICAgICAgcmV0dXJuIDM7XG4gICAgICBjYXNlIFwiZ3B1LWJ1ZmZlclwiOlxuICAgICAgICByZXR1cm4gNDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSBsb2NhdGlvbjogJHtsb2NhdGlvbn1gKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tdXRpbHMtbG9hZC1maWxlLnRzXG4gIGluaXRfZnMoKTtcblxuICAvLyBub2RlanMtaWdub3JlOm5vZGU6ZnMvcHJvbWlzZXNcbiAgdmFyIHJlYWRGaWxlMiA9IHZvaWQgMDtcblxuICAvLyB3ZWIvbGliL3dhc20vd2FzbS11dGlscy1sb2FkLWZpbGUudHNcbiAgdmFyIGxvYWRGaWxlID0gYXN5bmMgKGZpbGUpID0+IHtcbiAgICBpZiAodHlwZW9mIGZpbGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLnZlcnNpb25zICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCByZWFkRmlsZTIoZmlsZSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKGUuY29kZSA9PT0gXCJFUlJfRlNfRklMRV9UT09fTEFSR0VcIikge1xuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gY3JlYXRlUmVhZFN0cmVhbShmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgICAgICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5jb25jYXQoY2h1bmtzKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZmlsZSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZhaWxlZCB0byBsb2FkIGV4dGVybmFsIGRhdGEgZmlsZTogJHtmaWxlfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRlbnRMZW5ndGhIZWFkZXIgPSByZXNwb25zZS5oZWFkZXJzLmdldChcIkNvbnRlbnQtTGVuZ3RoXCIpO1xuICAgICAgICBjb25zdCBmaWxlU2l6ZSA9IGNvbnRlbnRMZW5ndGhIZWFkZXIgPyBwYXJzZUludChjb250ZW50TGVuZ3RoSGVhZGVyLCAxMCkgOiAwO1xuICAgICAgICBpZiAoZmlsZVNpemUgPCAxMDczNzQxODI0KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghcmVzcG9uc2UuYm9keSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmYWlsZWQgdG8gbG9hZCBleHRlcm5hbCBkYXRhIGZpbGU6ICR7ZmlsZX0sIG5vIHJlc3BvbnNlIGJvZHkuYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgbGV0IGJ1ZmZlcjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGZpbGVTaXplKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc3QgcGFnZXMgPSBNYXRoLmNlaWwoZmlsZVNpemUgLyA2NTUzNik7XG4gICAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoeyBpbml0aWFsOiBwYWdlcywgbWF4aW11bTogcGFnZXMgfSkuYnVmZmVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgb2Zmc2V0LCBjaHVua1NpemUpO1xuICAgICAgICAgICAgY2h1bmsuc2V0KHZhbHVlKTtcbiAgICAgICAgICAgIG9mZnNldCArPSBjaHVua1NpemU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIsIDAsIGZpbGVTaXplKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmlsZSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBmaWxlLmFycmF5QnVmZmVyKCkpO1xuICAgIH0gZWxzZSBpZiAoZmlsZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgIHJldHVybiBmaWxlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZmlsZSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLWNvcmUtaW1wbC50c1xuICB2YXIgaW5pdE9ydCA9IChudW1UaHJlYWRzLCBsb2dnaW5nTGV2ZWwpID0+IHtcbiAgICBjb25zdCBlcnJvckNvZGUgPSBnZXRJbnN0YW5jZSgpLl9PcnRJbml0KG51bVRocmVhZHMsIGxvZ2dpbmdMZXZlbCk7XG4gICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBpbml0aWFsaXplIG9ubnhydW50aW1lLlwiKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbml0UnVudGltZSA9IGFzeW5jIChlbnYpID0+IHtcbiAgICBpbml0T3J0KGVudi53YXNtLm51bVRocmVhZHMsIGxvZ0xldmVsU3RyaW5nVG9FbnVtKGVudi5sb2dMZXZlbCkpO1xuICB9O1xuICB2YXIgaW5pdEVwID0gYXN5bmMgKGVudiwgZXBOYW1lKSA9PiB7XG4gICAgaWYgKGZhbHNlKSB7XG4gICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhbmF2aWdhdG9yLmdwdSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZWJHUFUgaXMgbm90IHN1cHBvcnRlZCBpbiBjdXJyZW50IGVudmlyb25tZW50XCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgYWRhcHRlciA9IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoKTtcbiAgICAgIGlmICghYWRhcHRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0ZhaWxlZCB0byBnZXQgR1BVIGFkYXB0ZXIuIFlvdSBtYXkgbmVlZCB0byBlbmFibGUgZmxhZyBcIi0tZW5hYmxlLXVuc2FmZS13ZWJncHVcIiBpZiB5b3UgYXJlIHVzaW5nIENocm9tZS4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWVudi53YXNtLnNpbWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiTm90IHN1cHBvcnRlZCBmb3IgV2ViR1BVPU9OIGFuZCBTSU1EPU9GRi4gUGxlYXNlIHNldCBgZW52Lndhc20uc2ltZGAgdG8gdHJ1ZSB3aGVuIHVzaW5nIGB3ZWJncHVgIEVQXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluaXRKc2VwID0gbnVsbC5pbml0O1xuICAgICAgYXdhaXQgaW5pdEpzZXAoZ2V0SW5zdGFuY2UoKSwgZW52LCBhZGFwdGVyKTtcbiAgICB9XG4gIH07XG4gIHZhciBhY3RpdmVTZXNzaW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIHZhciBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudCA9IChzZXNzaW9uSGFuZGxlKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDgpO1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbTIuX09ydEdldElucHV0T3V0cHV0Q291bnQoc2Vzc2lvbkhhbmRsZSwgZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIDQpO1xuICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGdldCBzZXNzaW9uIGlucHV0L291dHB1dCBjb3VudC5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3dhc20yLkhFQVAzMltkYXRhT2Zmc2V0IC8gNF0sIHdhc20yLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB9XG4gIH07XG4gIHZhciBjb3B5RnJvbUV4dGVybmFsQnVmZmVyID0gKG1vZGVsKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IG1vZGVsRGF0YU9mZnNldCA9IHdhc20yLl9tYWxsb2MobW9kZWwuYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG1vZGVsRGF0YU9mZnNldCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLiBmYWlsZWQgdG8gYWxsb2NhdGUgYSBidWZmZXIgb2Ygc2l6ZSAke21vZGVsLmJ5dGVMZW5ndGh9LmApO1xuICAgIH1cbiAgICB3YXNtMi5IRUFQVTguc2V0KG1vZGVsLCBtb2RlbERhdGFPZmZzZXQpO1xuICAgIHJldHVybiBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbC5ieXRlTGVuZ3RoXTtcbiAgfTtcbiAgdmFyIGNyZWF0ZVNlc3Npb24gPSBhc3luYyAobW9kZWxEYXRhLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IG1vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoO1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2RlbERhdGEpKSB7XG4gICAgICBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGhdID0gbW9kZWxEYXRhO1xuICAgIH0gZWxzZSBpZiAobW9kZWxEYXRhLmJ1ZmZlciA9PT0gd2FzbTIuSEVBUFU4LmJ1ZmZlcikge1xuICAgICAgW21vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoXSA9IFttb2RlbERhdGEuYnl0ZU9mZnNldCwgbW9kZWxEYXRhLmJ5dGVMZW5ndGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGhdID0gY29weUZyb21FeHRlcm5hbEJ1ZmZlcihtb2RlbERhdGEpO1xuICAgIH1cbiAgICBsZXQgc2Vzc2lvbkhhbmRsZSA9IDA7XG4gICAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgICBsZXQgaW9CaW5kaW5nSGFuZGxlID0gMDtcbiAgICBsZXQgYWxsb2NzID0gW107XG4gICAgY29uc3QgaW5wdXROYW1lc1VURjhFbmNvZGVkID0gW107XG4gICAgY29uc3Qgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBbc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGFsbG9jc10gPSBzZXRTZXNzaW9uT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zPy5leHRlcm5hbERhdGEgJiYgd2FzbTIubW91bnRFeHRlcm5hbERhdGEpIHtcbiAgICAgICAgY29uc3QgbG9hZGluZ1Byb21pc2VzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBvcHRpb25zLmV4dGVybmFsRGF0YSkge1xuICAgICAgICAgIGNvbnN0IHBhdGggPSB0eXBlb2YgZmlsZSA9PT0gXCJzdHJpbmdcIiA/IGZpbGUgOiBmaWxlLnBhdGg7XG4gICAgICAgICAgbG9hZGluZ1Byb21pc2VzLnB1c2gobG9hZEZpbGUodHlwZW9mIGZpbGUgPT09IFwic3RyaW5nXCIgPyBmaWxlIDogZmlsZS5kYXRhKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB3YXNtMi5tb3VudEV4dGVybmFsRGF0YShwYXRoLCBkYXRhKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwobG9hZGluZ1Byb21pc2VzKTtcbiAgICAgIH1cbiAgICAgIHNlc3Npb25IYW5kbGUgPSB3YXNtMi5fT3J0Q3JlYXRlU2Vzc2lvbihtb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aCwgc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgaWYgKHNlc3Npb25IYW5kbGUgPT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtpbnB1dENvdW50LCBvdXRwdXRDb3VudF0gPSBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlKTtcbiAgICAgIGNvbnN0IGlucHV0TmFtZXMgPSBbXTtcbiAgICAgIGNvbnN0IG91dHB1dE5hbWVzID0gW107XG4gICAgICBjb25zdCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtMi5fT3J0R2V0SW5wdXROYW1lKHNlc3Npb25IYW5kbGUsIGkpO1xuICAgICAgICBpZiAobmFtZSA9PT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IGFuIGlucHV0IG5hbWUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5wdXNoKG5hbWUpO1xuICAgICAgICBpbnB1dE5hbWVzLnB1c2god2FzbTIuVVRGOFRvU3RyaW5nKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBuYW1lID0gd2FzbTIuX09ydEdldE91dHB1dE5hbWUoc2Vzc2lvbkhhbmRsZSwgaSk7XG4gICAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBnZXQgYW4gb3V0cHV0IG5hbWUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgY29uc3QgbmFtZVN0cmluZyA9IHdhc20yLlVURjhUb1N0cmluZyhuYW1lKTtcbiAgICAgICAgb3V0cHV0TmFtZXMucHVzaChuYW1lU3RyaW5nKTtcbiAgICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0eXBlb2Ygb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBvcHRpb25zLnByZWZlcnJlZE91dHB1dExvY2F0aW9uIDogb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24/LltuYW1lU3RyaW5nXSA/PyBcImNwdVwiO1xuICAgICAgICAgIGlmIChsb2NhdGlvbiAhPT0gXCJjcHVcIiAmJiBsb2NhdGlvbiAhPT0gXCJjcHUtcGlubmVkXCIgJiYgbG9jYXRpb24gIT09IFwiZ3B1LWJ1ZmZlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBzdXBwb3J0ZWQgcHJlZmVycmVkIG91dHB1dCBsb2NhdGlvbjogJHtsb2NhdGlvbn0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGJpbmRpbmdTdGF0ZSA9IG51bGw7XG4gICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgaW9CaW5kaW5nSGFuZGxlID0gd2FzbTIuX09ydENyZWF0ZUJpbmRpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gICAgICAgIGlmIChpb0JpbmRpbmdIYW5kbGUgPT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGNyZWF0ZSBJTyBiaW5kaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBiaW5kaW5nU3RhdGUgPSB7XG4gICAgICAgICAgaGFuZGxlOiBpb0JpbmRpbmdIYW5kbGUsXG4gICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLFxuICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQ6IG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5tYXAoKGwpID0+IGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsKSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZVNlc3Npb25zLnNldChzZXNzaW9uSGFuZGxlLCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBiaW5kaW5nU3RhdGVdKTtcbiAgICAgIHJldHVybiBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lcywgb3V0cHV0TmFtZXNdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgICAgaWYgKGlvQmluZGluZ0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXNzaW9uSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHdhc20yLl9mcmVlKG1vZGVsRGF0YU9mZnNldCk7XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyhzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBhbGxvY3MuZm9yRWFjaCgoYWxsb2MpID0+IHdhc20yLl9mcmVlKGFsbG9jKSk7XG4gICAgICB3YXNtMi51bm1vdW50RXh0ZXJuYWxEYXRhPy4oKTtcbiAgICB9XG4gIH07XG4gIHZhciByZWxlYXNlU2Vzc2lvbiA9IChzZXNzaW9uSWQpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVsZWFzZSBzZXNzaW9uLiBpbnZhbGlkIHNlc3Npb24gaWQ6ICR7c2Vzc2lvbklkfWApO1xuICAgIH1cbiAgICBjb25zdCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZV0gPSBzZXNzaW9uO1xuICAgIGlmIChpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgd2FzbTIuX09ydFJlbGVhc2VCaW5kaW5nKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gICAgfVxuICAgIHdhc20yLmpzZXBVbnJlZ2lzdGVyQnVmZmVycz8uKHNlc3Npb25JZCk7XG4gICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goKGJ1ZikgPT4gd2FzbTIuX09ydEZyZWUoYnVmKSk7XG4gICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgIHdhc20yLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgICBhY3RpdmVTZXNzaW9ucy5kZWxldGUoc2Vzc2lvbklkKTtcbiAgfTtcbiAgdmFyIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvciA9ICh0ZW5zb3IsIHRlbnNvckhhbmRsZXMsIGFsbG9jcywgc2Vzc2lvbklkLCBpbmRleCkgPT4ge1xuICAgIGlmICghdGVuc29yKSB7XG4gICAgICB0ZW5zb3JIYW5kbGVzLnB1c2goMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBkYXRhVHlwZSA9IHRlbnNvclswXTtcbiAgICBjb25zdCBkaW1zID0gdGVuc29yWzFdO1xuICAgIGNvbnN0IGxvY2F0aW9uID0gdGVuc29yWzNdO1xuICAgIGxldCByYXdEYXRhO1xuICAgIGxldCBkYXRhQnl0ZUxlbmd0aDtcbiAgICBpZiAoZGF0YVR5cGUgPT09IFwic3RyaW5nXCIgJiYgbG9jYXRpb24gPT09IFwiZ3B1LWJ1ZmZlclwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLlwiKTtcbiAgICB9XG4gICAgaWYgKGxvY2F0aW9uID09PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgY29uc3QgZ3B1QnVmZmVyID0gdGVuc29yWzJdLmdwdUJ1ZmZlcjtcbiAgICAgIGNvbnN0IGVsZW1lbnRTaXplSW5CeXRlcyA9IGdldFRlbnNvckVsZW1lbnRTaXplKHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKGRhdGFUeXBlKSk7XG4gICAgICBkYXRhQnl0ZUxlbmd0aCA9IGRpbXMucmVkdWNlKChhLCBiKSA9PiBhICogYiwgMSkgKiBlbGVtZW50U2l6ZUluQnl0ZXM7XG4gICAgICByYXdEYXRhID0gd2FzbTIuanNlcFJlZ2lzdGVyQnVmZmVyKHNlc3Npb25JZCwgaW5kZXgsIGdwdUJ1ZmZlciwgZGF0YUJ5dGVMZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkYXRhID0gdGVuc29yWzJdO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSA0ICogZGF0YS5sZW5ndGg7XG4gICAgICAgIHJhd0RhdGEgPSB3YXNtMi5fbWFsbG9jKGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgYWxsb2NzLnB1c2gocmF3RGF0YSk7XG4gICAgICAgIGxldCBkYXRhSW5kZXggPSByYXdEYXRhIC8gNDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2ldICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB0ZW5zb3IgZGF0YSBhdCBpbmRleCAke2l9IGlzIG5vdCBhIHN0cmluZ2ApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXNtMi5IRUFQVTMyW2RhdGFJbmRleCsrXSA9IGFsbG9jV2FzbVN0cmluZyhkYXRhW2ldLCBhbGxvY3MpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgcmF3RGF0YSA9IHdhc20yLl9tYWxsb2MoZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICBhbGxvY3MucHVzaChyYXdEYXRhKTtcbiAgICAgICAgd2FzbTIuSEVBUFU4LnNldChuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhQnl0ZUxlbmd0aCksIHJhd0RhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDQgKiBkaW1zLmxlbmd0aCk7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBkaW1JbmRleCA9IGRpbXNPZmZzZXQgLyA0O1xuICAgICAgZGltcy5mb3JFYWNoKChkKSA9PiB3YXNtMi5IRUFQMzJbZGltSW5kZXgrK10gPSBkKTtcbiAgICAgIGNvbnN0IHRlbnNvcjIgPSB3YXNtMi5fT3J0Q3JlYXRlVGVuc29yKFxuICAgICAgICB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSksXG4gICAgICAgIHJhd0RhdGEsXG4gICAgICAgIGRhdGFCeXRlTGVuZ3RoLFxuICAgICAgICBkaW1zT2Zmc2V0LFxuICAgICAgICBkaW1zLmxlbmd0aCxcbiAgICAgICAgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGxvY2F0aW9uKVxuICAgICAgKTtcbiAgICAgIGlmICh0ZW5zb3IyID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBjcmVhdGUgdGVuc29yIGZvciBpbnB1dC9vdXRwdXQuIHNlc3Npb249JHtzZXNzaW9uSWR9LCBpbmRleD0ke2luZGV4fS5gKTtcbiAgICAgIH1cbiAgICAgIHRlbnNvckhhbmRsZXMucHVzaCh0ZW5zb3IyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB9XG4gIH07XG4gIHZhciBydW4gPSBhc3luYyAoc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0VGVuc29ycywgb3V0cHV0SW5kaWNlcywgb3V0cHV0VGVuc29ycywgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBydW4gaW5mZXJlbmNlLiBpbnZhbGlkIHNlc3Npb24gaWQ6ICR7c2Vzc2lvbklkfWApO1xuICAgIH1cbiAgICBjb25zdCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZV0gPSBzZXNzaW9uO1xuICAgIGNvbnN0IGlucHV0Q291bnQgPSBpbnB1dEluZGljZXMubGVuZ3RoO1xuICAgIGNvbnN0IG91dHB1dENvdW50ID0gb3V0cHV0SW5kaWNlcy5sZW5ndGg7XG4gICAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGxldCBydW5PcHRpb25zQWxsb2NzID0gW107XG4gICAgY29uc3QgaW5wdXRUZW5zb3JIYW5kbGVzID0gW107XG4gICAgY29uc3Qgb3V0cHV0VGVuc29ySGFuZGxlcyA9IFtdO1xuICAgIGNvbnN0IGlucHV0T3V0cHV0QWxsb2NzID0gW107XG4gICAgY29uc3QgYmVmb3JlUnVuU3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICBjb25zdCBpbnB1dFZhbHVlc09mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoaW5wdXRDb3VudCAqIDQpO1xuICAgIGNvbnN0IGlucHV0TmFtZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgICBjb25zdCBvdXRwdXRWYWx1ZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKG91dHB1dENvdW50ICogNCk7XG4gICAgY29uc3Qgb3V0cHV0TmFtZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKG91dHB1dENvdW50ICogNCk7XG4gICAgdHJ5IHtcbiAgICAgIFtydW5PcHRpb25zSGFuZGxlLCBydW5PcHRpb25zQWxsb2NzXSA9IHNldFJ1bk9wdGlvbnMob3B0aW9ucyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IoaW5wdXRUZW5zb3JzW2ldLCBpbnB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCBzZXNzaW9uSWQsIGlucHV0SW5kaWNlc1tpXSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKFxuICAgICAgICAgIG91dHB1dFRlbnNvcnNbaV0sXG4gICAgICAgICAgb3V0cHV0VGVuc29ySGFuZGxlcyxcbiAgICAgICAgICBpbnB1dE91dHB1dEFsbG9jcyxcbiAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgaW5wdXRDb3VudCArIG91dHB1dEluZGljZXNbaV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGxldCBpbnB1dFZhbHVlc0luZGV4ID0gaW5wdXRWYWx1ZXNPZmZzZXQgLyA0O1xuICAgICAgbGV0IGlucHV0TmFtZXNJbmRleCA9IGlucHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgICAgbGV0IG91dHB1dFZhbHVlc0luZGV4ID0gb3V0cHV0VmFsdWVzT2Zmc2V0IC8gNDtcbiAgICAgIGxldCBvdXRwdXROYW1lc0luZGV4ID0gb3V0cHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgd2FzbTIuSEVBUFUzMltpbnB1dFZhbHVlc0luZGV4KytdID0gaW5wdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgICB3YXNtMi5IRUFQVTMyW2lucHV0TmFtZXNJbmRleCsrXSA9IGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbnB1dEluZGljZXNbaV1dO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIHdhc20yLkhFQVBVMzJbb3V0cHV0VmFsdWVzSW5kZXgrK10gPSBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgICB3YXNtMi5IRUFQVTMyW291dHB1dE5hbWVzSW5kZXgrK10gPSBvdXRwdXROYW1lc1VURjhFbmNvZGVkW291dHB1dEluZGljZXNbaV1dO1xuICAgICAgfVxuICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHsgaGFuZGxlLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQgfSA9IGlvQmluZGluZ1N0YXRlO1xuICAgICAgICBpZiAoaW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aCAhPT0gaW5wdXRDb3VudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgY291bnQgZnJvbSBmZWVkcyAoJHtpbnB1dENvdW50fSkgaXMgZXhwZWN0ZWQgdG8gYmUgYWx3YXlzIGVxdWFsIHRvIG1vZGVsJ3MgaW5wdXQgY291bnQgKCR7aW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aH0pLmApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBpbnB1dEluZGljZXNbaV07XG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IGF3YWl0IHdhc20yLl9PcnRCaW5kSW5wdXQoaGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBpbnB1dFRlbnNvckhhbmRsZXNbaV0pO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBpbnB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gb3V0cHV0SW5kaWNlc1tpXTtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG91dHB1dFRlbnNvcnNbaV0/LlszXTtcbiAgICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ29kZTIgPSB3YXNtMi5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldLCAwKTtcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIHByZS1hbGxvY2F0ZWQgb3V0cHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IHdhc20yLl9PcnRCaW5kT3V0cHV0KGhhbmRsZSwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIDAsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWRbaW5kZXhdKTtcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIG91dHB1dFske2l9XSB0byAke291dHB1dFByZWZlcnJlZExvY2F0aW9uc1tpXX0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGVycm9yQ29kZTtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBlcnJvckNvZGUgPSBhd2FpdCB3YXNtMi5fT3J0UnVuV2l0aEJpbmRpbmcoXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSxcbiAgICAgICAgICBpb0JpbmRpbmdTdGF0ZS5oYW5kbGUsXG4gICAgICAgICAgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIHJ1bk9wdGlvbnNIYW5kbGVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20yLl9PcnRSdW4oXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSxcbiAgICAgICAgICBpbnB1dE5hbWVzT2Zmc2V0LFxuICAgICAgICAgIGlucHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIGlucHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0TmFtZXNPZmZzZXQsXG4gICAgICAgICAgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIHJ1bk9wdGlvbnNIYW5kbGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJmYWlsZWQgdG8gY2FsbCBPcnRSdW4oKS5cIik7XG4gICAgICB9XG4gICAgICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCB0ZW5zb3IgPSB3YXNtMi5IRUFQVTMyW291dHB1dFZhbHVlc09mZnNldCAvIDQgKyBpXTtcbiAgICAgICAgaWYgKHRlbnNvciA9PT0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXSkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKG91dHB1dFRlbnNvcnNbaV0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgICAgICBjb25zdCB0ZW5zb3JEYXRhT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyg0ICogNCk7XG4gICAgICAgIGxldCBrZWVwT3V0cHV0VGVuc29yID0gZmFsc2U7XG4gICAgICAgIGxldCB0eXBlLCBkYXRhT2Zmc2V0ID0gMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUyID0gd2FzbTIuX09ydEdldFRlbnNvckRhdGEoXG4gICAgICAgICAgICB0ZW5zb3IsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0LFxuICAgICAgICAgICAgdGVuc29yRGF0YU9mZnNldCArIDQsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0ICsgOCxcbiAgICAgICAgICAgIHRlbnNvckRhdGFPZmZzZXQgKyAxMlxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGVycm9yQ29kZTIgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhY2Nlc3Mgb3V0cHV0IHRlbnNvciBkYXRhIG9uIGluZGV4ICR7aX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCB0ZW5zb3JEYXRhSW5kZXggPSB0ZW5zb3JEYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICBjb25zdCBkYXRhVHlwZSA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGRhdGFPZmZzZXQgPSB3YXNtMi5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbTIuSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltc0xlbmd0aCA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgZGltc0xlbmd0aDsgaTIrKykge1xuICAgICAgICAgICAgZGltcy5wdXNoKHdhc20yLkhFQVBVMzJbZGltc09mZnNldCAvIDQgKyBpMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXNtMi5fT3J0RnJlZShkaW1zT2Zmc2V0KTtcbiAgICAgICAgICBjb25zdCBzaXplID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKTtcbiAgICAgICAgICB0eXBlID0gdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcoZGF0YVR5cGUpO1xuICAgICAgICAgIGNvbnN0IHByZWZlcnJlZExvY2F0aW9uID0gaW9CaW5kaW5nU3RhdGU/Lm91dHB1dFByZWZlcnJlZExvY2F0aW9uc1tvdXRwdXRJbmRpY2VzW2ldXTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHByZWZlcnJlZExvY2F0aW9uID09PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ0RhdGEgPSBbXTtcbiAgICAgICAgICAgIGxldCBkYXRhSW5kZXggPSBkYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBzaXplOyBpMisrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdhc20yLkhFQVBVMzJbZGF0YUluZGV4KytdO1xuICAgICAgICAgICAgICBjb25zdCBtYXhCeXRlc1RvUmVhZCA9IGkyID09PSBzaXplIC0gMSA/IHZvaWQgMCA6IHdhc20yLkhFQVBVMzJbZGF0YUluZGV4XSAtIG9mZnNldDtcbiAgICAgICAgICAgICAgc3RyaW5nRGF0YS5wdXNoKHdhc20yLlVURjhUb1N0cmluZyhvZmZzZXQsIG1heEJ5dGVzVG9SZWFkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgc3RyaW5nRGF0YSwgXCJjcHVcIl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09IFwiZ3B1LWJ1ZmZlclwiICYmIHNpemUgPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHdhc20yLmpzZXBHZXRCdWZmZXIoZGF0YU9mZnNldCk7XG4gICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRTaXplID0gZ2V0VGVuc29yRWxlbWVudFNpemUoZGF0YVR5cGUpO1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudFNpemUgPT09IHZvaWQgMCB8fCAhaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBrZWVwT3V0cHV0VGVuc29yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgb3V0cHV0LnB1c2goW1xuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgZGltcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBncHVCdWZmZXIsXG4gICAgICAgICAgICAgICAgICBkb3dubG9hZDogd2FzbTIuanNlcENyZWF0ZURvd25sb2FkZXIoZ3B1QnVmZmVyLCBzaXplICogZWxlbWVudFNpemUsIHR5cGUpLFxuICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJncHUtYnVmZmVyXCJcbiAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IodHlwZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgdHlwZWRBcnJheUNvbnN0cnVjdG9yKHNpemUpO1xuICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLnNldCh3YXNtMi5IRUFQVTguc3ViYXJyYXkoZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIGRhdGEuYnl0ZUxlbmd0aCkpO1xuICAgICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgZGF0YSwgXCJjcHVcIl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrKTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBkYXRhT2Zmc2V0KSB7XG4gICAgICAgICAgICB3YXNtMi5fZnJlZShkYXRhT2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFrZWVwT3V0cHV0VGVuc29yKSB7XG4gICAgICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlvQmluZGluZ1N0YXRlKSB7XG4gICAgICAgIHdhc20yLl9PcnRDbGVhckJvdW5kT3V0cHV0cyhpb0JpbmRpbmdTdGF0ZS5oYW5kbGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKGJlZm9yZVJ1blN0YWNrKTtcbiAgICAgIGlucHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKCh2KSA9PiB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgICBvdXRwdXRUZW5zb3JIYW5kbGVzLmZvckVhY2goKHYpID0+IHdhc20yLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICAgIGlucHV0T3V0cHV0QWxsb2NzLmZvckVhY2goKHApID0+IHdhc20yLl9mcmVlKHApKTtcbiAgICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIHJ1bk9wdGlvbnNBbGxvY3MuZm9yRWFjaCgocCkgPT4gd2FzbTIuX2ZyZWUocCkpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGVuZFByb2ZpbGluZyA9IChzZXNzaW9uSWQpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzZXNzaW9uIGlkXCIpO1xuICAgIH1cbiAgICBjb25zdCBzZXNzaW9uSGFuZGxlID0gc2Vzc2lvblswXTtcbiAgICBjb25zdCBwcm9maWxlRmlsZU5hbWUgPSB3YXNtMi5fT3J0RW5kUHJvZmlsaW5nKHNlc3Npb25IYW5kbGUpO1xuICAgIGlmIChwcm9maWxlRmlsZU5hbWUgPT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IGFuIHByb2ZpbGUgZmlsZSBuYW1lLlwiKTtcbiAgICB9XG4gICAgd2FzbTIuX09ydEZyZWUocHJvZmlsZUZpbGVOYW1lKTtcbiAgfTtcbiAgdmFyIGV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzID0gKHRlbnNvcnMpID0+IHtcbiAgICBjb25zdCBidWZmZXJzID0gW107XG4gICAgZm9yIChjb25zdCB0ZW5zb3Igb2YgdGVuc29ycykge1xuICAgICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSAmJiBcImJ1ZmZlclwiIGluIGRhdGEpIHtcbiAgICAgICAgYnVmZmVycy5wdXNoKGRhdGEuYnVmZmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlcnM7XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3Byb3h5LXdvcmtlci9tYWluLnRzXG4gIHNlbGYub25tZXNzYWdlID0gKGV2KSA9PiB7XG4gICAgY29uc3QgeyB0eXBlLCBpbjogbWVzc2FnZSB9ID0gZXYuZGF0YTtcbiAgICB0cnkge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJpbml0LXdhc21cIjpcbiAgICAgICAgICBpbml0aWFsaXplV2ViQXNzZW1ibHkobWVzc2FnZS53YXNtKS50aGVuKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICBpbml0UnVudGltZShtZXNzYWdlKS50aGVuKFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSwgZXJyIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSwgZXJyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbml0LWVwXCI6IHtcbiAgICAgICAgICBjb25zdCB7IGVwTmFtZSwgZW52IH0gPSBtZXNzYWdlO1xuICAgICAgICAgIGluaXRFcChlbnYsIGVwTmFtZSkudGhlbihcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBlcnIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY29weS1mcm9tXCI6IHtcbiAgICAgICAgICBjb25zdCB7IGJ1ZmZlciB9ID0gbWVzc2FnZTtcbiAgICAgICAgICBjb25zdCBidWZmZXJEYXRhID0gY29weUZyb21FeHRlcm5hbEJ1ZmZlcihidWZmZXIpO1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSwgb3V0OiBidWZmZXJEYXRhIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJjcmVhdGVcIjoge1xuICAgICAgICAgIGNvbnN0IHsgbW9kZWwsIG9wdGlvbnMgfSA9IG1lc3NhZ2U7XG4gICAgICAgICAgY3JlYXRlU2Vzc2lvbihtb2RlbCwgb3B0aW9ucykudGhlbihcbiAgICAgICAgICAgIChzZXNzaW9uTWV0YWRhdGEpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBvdXQ6IHNlc3Npb25NZXRhZGF0YSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSwgZXJyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJlbGVhc2VcIjpcbiAgICAgICAgICByZWxlYXNlU2Vzc2lvbihtZXNzYWdlKTtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJydW5cIjoge1xuICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgb3B0aW9ucyB9ID0gbWVzc2FnZTtcbiAgICAgICAgICBydW4oc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgbmV3IEFycmF5KG91dHB1dEluZGljZXMubGVuZ3RoKS5maWxsKG51bGwpLCBvcHRpb25zKS50aGVuKFxuICAgICAgICAgICAgKG91dHB1dHMpID0+IHtcbiAgICAgICAgICAgICAgaWYgKG91dHB1dHMuc29tZSgobykgPT4gb1szXSAhPT0gXCJjcHVcIikpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVycjogXCJQcm94eSBkb2VzIG5vdCBzdXBwb3J0IG5vbi1jcHUgdGVuc29yIGxvY2F0aW9uLlwiIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgeyB0eXBlLCBvdXQ6IG91dHB1dHMgfSxcbiAgICAgICAgICAgICAgICAgIGV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzKG91dHB1dHMpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBlcnIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZW5kLXByb2ZpbGluZ1wiOlxuICAgICAgICAgIGVuZFByb2ZpbGluZyhtZXNzYWdlKTtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVyciB9KTtcbiAgICB9XG4gIH07XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxld29nSUNKMlpYSnphVzl1SWpvZ015d0tJQ0FpYzI5MWNtTmxjeUk2SUZzaWJtOWtaV3B6TFdsbmJtOXlaVHBtY3lJc0lDSnViMlJsYW5NdGFXZHViM0psT25CaGRHZ2lMQ0FpTGk0dkxpNHZiR2xpTDNkaGMyMHZZbWx1WkdsdVp5OXZjblF0ZEhKaGFXNXBibWN0ZDJGemJTMXphVzFrTG1weklpd2dJbTV2WkdWcWN5MXBaMjV2Y21VNmQyOXlhMlZ5WDNSb2NtVmhaSE1pTENBaWJtOWtaV3B6TFdsbmJtOXlaVHB3WlhKbVgyaHZiMnR6SWl3Z0ltNXZaR1ZxY3kxcFoyNXZjbVU2YjNNaUxDQWlMaTR2TGk0dmJHbGlMM2RoYzIwdlltbHVaR2x1Wnk5dmNuUXRkMkZ6YlMxMGFISmxZV1JsWkM1cWN5SXNJQ0l1TGk4dUxpOXNhV0l2ZDJGemJTOWlhVzVrYVc1bkwyOXlkQzEzWVhOdExYUm9jbVZoWkdWa0xuZHZjbXRsY2k1cWN5SXNJQ0p1YjJSbGFuTXRhV2R1YjNKbE9tNXZaR1U2Y0dGMGFDSXNJQ0l1TGk4dUxpOXNhV0l2ZDJGemJTOTNZWE50TFdaaFkzUnZjbmt1ZEhNaUxDQWlMaTR2TGk0dmJHbGlMM2RoYzIwdmQyRnpiUzExZEdsc2N5NTBjeUlzSUNJdUxpOHVMaTlzYVdJdmQyRnpiUzl5ZFc0dGIzQjBhVzl1Y3k1MGN5SXNJQ0l1TGk4dUxpOXNhV0l2ZDJGemJTOXpaWE56YVc5dUxXOXdkR2x2Ym5NdWRITWlMQ0FpTGk0dkxpNHZiR2xpTDNkaGMyMHZkMkZ6YlMxamIyMXRiMjR1ZEhNaUxDQWlMaTR2TGk0dmJHbGlMM2RoYzIwdmQyRnpiUzExZEdsc2N5MXNiMkZrTFdacGJHVXVkSE1pTENBaWJtOWtaV3B6TFdsbmJtOXlaVHB1YjJSbE9tWnpMM0J5YjIxcGMyVnpJaXdnSWk0dUx5NHVMMnhwWWk5M1lYTnRMM2RoYzIwdFkyOXlaUzFwYlhCc0xuUnpJaXdnSWk0dUx5NHVMMnhwWWk5M1lYTnRMM0J5YjNoNUxYZHZjbXRsY2k5dFlXbHVMblJ6SWwwc0NpQWdJbk52ZFhKalpYTkRiMjUwWlc1MElqb2dXeUpsZUhCdmNuUWdZMjl1YzNRZ2NtVmhaRVpwYkdVZ1BTQjFibVJsWm1sdVpXUTdaWGh3YjNKMElHTnZibk4wSUhKbFlXUkdhV3hsVTNsdVl5QTlJSFZ1WkdWbWFXNWxaRHRsZUhCdmNuUWdZMjl1YzNRZ1kzSmxZWFJsVW1WaFpGTjBjbVZoYlNBOUlIVnVaR1ZtYVc1bFpEc2lMQ0FpWlhod2IzSjBJR052Ym5OMElHcHZhVzRnUFNCMWJtUmxabWx1WldRN0lpd2dJbHh1ZG1GeUlHOXlkRmRoYzIwZ1BTQW9LQ2tnUFQ0Z2UxeHVJQ0IyWVhJZ1gzTmpjbWx3ZEVScGNpQTlJSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdaRzlqZFcxbGJuUXVZM1Z5Y21WdWRGTmpjbWx3ZENBL0lHUnZZM1Z0Wlc1MExtTjFjbkpsYm5SVFkzSnBjSFF1YzNKaklEb2dkVzVrWldacGJtVmtPMXh1SUNCcFppQW9kSGx3Wlc5bUlGOWZabWxzWlc1aGJXVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQmZjMk55YVhCMFJHbHlJRDBnWDNOamNtbHdkRVJwY2lCOGZDQmZYMlpwYkdWdVlXMWxPMXh1SUNCeVpYUjFjbTRnS0Z4dVpuVnVZM1JwYjI0b2JXOWtkV3hsUVhKbklEMGdlMzBwSUh0Y2JseHVkbUZ5SUdVOWJXOWtkV3hsUVhKbkxHc3NiRHRsTG5KbFlXUjVQVzVsZHlCUWNtOXRhWE5sS0NoaExHSXBQVDU3YXoxaE8ydzlZbjBwTzNaaGNpQmhZVDFQWW1wbFkzUXVZWE56YVdkdUtIdDlMR1VwTEdKaFBWd2lMaTkwYUdsekxuQnliMmR5WVcxY0lpeGpZVDFjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnZDJsdVpHOTNMSEU5WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2FXMXdiM0owVTJOeWFYQjBjeXhrWVQxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2NISnZZMlZ6Y3lZbVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIQnliMk5sYzNNdWRtVnljMmx2Ym5NbUpsd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekxuWmxjbk5wYjI1ekxtNXZaR1VzZGoxY0lsd2lMSGdzZWl4Qk8xeHVhV1lvWkdFcGUzWmhjaUJtY3oxeVpYRjFhWEpsS0Z3aVpuTmNJaWtzUWoxeVpYRjFhWEpsS0Z3aWNHRjBhRndpS1R0MlBYRS9RaTVrYVhKdVlXMWxLSFlwSzF3aUwxd2lPbDlmWkdseWJtRnRaU3RjSWk5Y0lqdDRQU2hoTEdJcFBUNTdZVDFES0dFcFAyNWxkeUJWVWt3b1lTazZRaTV1YjNKdFlXeHBlbVVvWVNrN2NtVjBkWEp1SUdaekxuSmxZV1JHYVd4bFUzbHVZeWhoTEdJL2RtOXBaQ0F3T2x3aWRYUm1PRndpS1gwN1FUMWhQVDU3WVQxNEtHRXNJVEFwTzJFdVluVm1abVZ5Zkh3b1lUMXVaWGNnVldsdWREaEJjbkpoZVNoaEtTazdjbVYwZFhKdUlHRjlPM285S0dFc1lpeGpMR1E5SVRBcFBUNTdZVDFES0dFcFAyNWxkeUJWVWt3b1lTazZRaTV1YjNKdFlXeHBlbVVvWVNrN1puTXVjbVZoWkVacGJHVW9ZU3hrUDNadmFXUWdNRHBjSW5WMFpqaGNJaXdvWnl4b0tUMCtlMmMvWXlobktUcGlLR1EvYUM1aWRXWm1aWEk2YUNsOUtYMDdJV1V1ZEdocGMxQnliMmR5WVcwbUpqRThjSEp2WTJWemN5NWhjbWQyTG14bGJtZDBhQ1ltS0dKaFBYQnliMk5sYzNNdVlYSm5kbHN4WFM1eVpYQnNZV05sS0M5Y1hGeGNMMmNzWENJdlhDSXBLVHR3Y205alpYTnpMbUZ5WjNZdWMyeHBZMlVvTWlrN1pTNXBibk53WldOMFBTZ3BQVDVjSWx0RmJYTmpjbWx3ZEdWdUlFMXZaSFZzWlNCdlltcGxZM1JkWENKOVpXeHpaU0JwWmloallYeDhjU2x4UDNZOVhHNXpaV3htTG14dlkyRjBhVzl1TG1oeVpXWTZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUdSdlkzVnRaVzUwSmlaa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBKaVlvZGoxa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBMbk55WXlrc1gzTmpjbWx3ZEVScGNpWW1LSFk5WDNOamNtbHdkRVJwY2lrc01DRTlQWFl1YVc1a1pYaFBaaWhjSW1Kc2IySTZYQ0lwUDNZOWRpNXpkV0p6ZEhJb01DeDJMbkpsY0d4aFkyVW9MMXMvSTEwdUtpOHNYQ0pjSWlrdWJHRnpkRWx1WkdWNFQyWW9YQ0l2WENJcEt6RXBPblk5WENKY0lpeDRQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXpaVzVrS0c1MWJHd3BPM0psZEhWeWJpQmlMbkpsYzNCdmJuTmxWR1Y0ZEgwc2NTWW1LRUU5WVQwK2UzWmhjaUJpUFc1bGR5QllUVXhJZEhSd1VtVnhkV1Z6ZER0aUxtOXdaVzRvWENKSFJWUmNJaXhoTENFeEtUdGlMbkpsYzNCdmJuTmxWSGx3WlQxY0ltRnljbUY1WW5WbVptVnlYQ0k3WWk1elpXNWtLRzUxYkd3cE8zSmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hpTG5KbGMzQnZibk5sS1gwcExIbzlLR0VzWWl4aktUMCtlM1poY2lCa1BXNWxkeUJZVFV4SWRIUndVbVZ4ZFdWemREdGtMbTl3Wlc0b1hDSkhSVlJjSWl4aExDRXdLVHRrTG5KbGMzQnZibk5sVkhsd1pUMWNibHdpWVhKeVlYbGlkV1ptWlhKY0lqdGtMbTl1Ykc5aFpEMG9LVDArZXpJd01EMDlaQzV6ZEdGMGRYTjhmREE5UFdRdWMzUmhkSFZ6Smlaa0xuSmxjM0J2Ym5ObFAySW9aQzV5WlhOd2IyNXpaU2s2WXlncGZUdGtMbTl1WlhKeWIzSTlZenRrTG5ObGJtUW9iblZzYkNsOU8zWmhjaUJsWVQxamIyNXpiMnhsTG14dlp5NWlhVzVrS0dOdmJuTnZiR1VwTEVROVkyOXVjMjlzWlM1bGNuSnZjaTVpYVc1a0tHTnZibk52YkdVcE8wOWlhbVZqZEM1aGMzTnBaMjRvWlN4aFlTazdZV0U5Ym5Wc2JEdGNJbTlpYW1WamRGd2lJVDEwZVhCbGIyWWdWMlZpUVhOelpXMWliSGttSmtVb1hDSnVieUJ1WVhScGRtVWdkMkZ6YlNCemRYQndiM0owSUdSbGRHVmpkR1ZrWENJcE8zWmhjaUJHTEdaaFBTRXhMRWNzU0N4SkxFb3NhR0U3WEc1bWRXNWpkR2x2YmlCcFlTZ3BlM1poY2lCaFBVWXVZblZtWm1WeU8yVXVTRVZCVURnOVJ6MXVaWGNnU1c1ME9FRnljbUY1S0dFcE8yVXVTRVZCVURFMlBXNWxkeUJKYm5ReE5rRnljbUY1S0dFcE8yVXVTRVZCVUZVNFBVZzlibVYzSUZWcGJuUTRRWEp5WVhrb1lTazdaUzVJUlVGUVZURTJQVzVsZHlCVmFXNTBNVFpCY25KaGVTaGhLVHRsTGtoRlFWQXpNajFKUFc1bGR5QkpiblF6TWtGeWNtRjVLR0VwTzJVdVNFVkJVRlV6TWoxS1BXNWxkeUJWYVc1ME16SkJjbkpoZVNoaEtUdGxMa2hGUVZCR016STlibVYzSUVac2IyRjBNekpCY25KaGVTaGhLVHRsTGtoRlFWQkdOalE5YUdFOWJtVjNJRVpzYjJGME5qUkJjbkpoZVNoaEtYMTJZWElnU3oxYlhTeE1QVnRkTEdwaFBWdGRMRTA5TUN4T1BXNTFiR3dzVHoxdWRXeHNPMloxYm1OMGFXOXVJRVVvWVNsN1lUMWNJa0ZpYjNKMFpXUW9YQ0lyWVN0Y0lpbGNJanRFS0dFcE8yWmhQU0V3TzJFOWJtVjNJRmRsWWtGemMyVnRZbXg1TGxKMWJuUnBiV1ZGY25KdmNpaGhLMXdpTGlCQ2RXbHNaQ0IzYVhSb0lDMXpRVk5UUlZKVVNVOU9VeUJtYjNJZ2JXOXlaU0JwYm1adkxsd2lLVHRzS0dFcE8zUm9jbTkzSUdFN2ZWeHVkbUZ5SUd0aFBXRTlQbUV1YzNSaGNuUnpWMmwwYUNoY0ltUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmIyTjBaWFF0YzNSeVpXRnRPMkpoYzJVMk5DeGNJaWtzUXoxaFBUNWhMbk4wWVhKMGMxZHBkR2dvWENKbWFXeGxPaTh2WENJcExGQTdVRDFjSW05eWRDMTBjbUZwYm1sdVp5MTNZWE50TFhOcGJXUXVkMkZ6YlZ3aU8ybG1LQ0ZyWVNoUUtTbDdkbUZ5SUd4aFBWQTdVRDFsTG14dlkyRjBaVVpwYkdVL1pTNXNiMk5oZEdWR2FXeGxLR3hoTEhZcE9uWXJiR0Y5Wm5WdVkzUnBiMjRnYldFb1lTbDdhV1lvUVNseVpYUjFjbTRnUVNoaEtUdDBhSEp2ZDF3aVltOTBhQ0JoYzNsdVl5QmhibVFnYzNsdVl5Qm1aWFJqYUdsdVp5QnZaaUIwYUdVZ2QyRnpiU0JtWVdsc1pXUmNJanQ5WEc1bWRXNWpkR2x2YmlCdVlTaGhLWHRwWmloallYeDhjU2w3YVdZb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdabVYwWTJnbUppRkRLR0VwS1hKbGRIVnliaUJtWlhSamFDaGhMSHRqY21Wa1pXNTBhV0ZzY3pwY0luTmhiV1V0YjNKcFoybHVYQ0o5S1M1MGFHVnVLR0k5UG50cFppZ2hZaTV2YXlsMGFISnZkMXdpWm1GcGJHVmtJSFJ2SUd4dllXUWdkMkZ6YlNCaWFXNWhjbmtnWm1sc1pTQmhkQ0FuWENJcllTdGNJaWRjSWp0eVpYUjFjbTRnWWk1aGNuSmhlVUoxWm1abGNpZ3BmU2t1WTJGMFkyZ29LQ2s5UG0xaEtHRXBLVHRwWmloNktYSmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29ZaXhqS1QwK2Uzb29ZU3hrUFQ1aUtHNWxkeUJWYVc1ME9FRnljbUY1S0dRcEtTeGpLWDBwZlhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LUzUwYUdWdUtDZ3BQVDV0WVNoaEtTbDlablZ1WTNScGIyNGdiMkVvWVN4aUxHTXBlM0psZEhWeWJpQnVZU2hoS1M1MGFHVnVLR1E5UGxkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxLR1FzWWlrcExuUm9aVzRvWkQwK1pDa3VkR2hsYmloakxHUTlQbnRFS0dCbVlXbHNaV1FnZEc4Z1lYTjVibU5vY205dWIzVnpiSGtnY0hKbGNHRnlaU0IzWVhOdE9pQWtlMlI5WUNrN1JTaGtLWDBwZlZ4dVpuVnVZM1JwYjI0Z2NHRW9ZU3hpS1h0MllYSWdZejFRTzNKbGRIVnlibHdpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUZkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxVM1J5WldGdGFXNW5mSHhyWVNoaktYeDhReWhqS1h4OFpHRjhmRndpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUdabGRHTm9QMjloS0dNc1lTeGlLVHBtWlhSamFDaGpMSHRqY21Wa1pXNTBhV0ZzY3pwY0luTmhiV1V0YjNKcFoybHVYQ0o5S1M1MGFHVnVLR1E5UGxkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxVM1J5WldGdGFXNW5LR1FzWVNrdWRHaGxiaWhpTEdaMWJtTjBhVzl1S0djcGUwUW9ZSGRoYzIwZ2MzUnlaV0Z0YVc1bklHTnZiWEJwYkdVZ1ptRnBiR1ZrT2lBa2UyZDlZQ2s3UkNoY0ltWmhiR3hwYm1jZ1ltRmpheUIwYnlCQmNuSmhlVUoxWm1abGNpQnBibk4wWVc1MGFXRjBhVzl1WENJcE8zSmxkSFZ5YmlCdllTaGpMR0VzWWlsOUtTbDlYRzUyWVhJZ1VTeHhZVDE3T1RnNU1qZ3dPaWhoTEdJc1l5eGtLVDArZTJsbUtGd2lkVzVrWldacGJtVmtYQ0k5UFhSNWNHVnZaaUJsZkh3aFpTNVJZU2x5WlhSMWNtNGdNVHRoUFZJb1lUNCtQakFwTzJFdWMzUmhjblJ6VjJsMGFDaGNJaTR2WENJcEppWW9ZVDFoTG5OMVluTjBjbWx1WnlneUtTazdZVDFsTGxGaExtZGxkQ2hoS1R0cFppZ2hZU2x5WlhSMWNtNGdNanRpUGo0K1BUQTdZejQrUGowd08ybG1LR0lyWXo1aExtSjVkR1ZNWlc1bmRHZ3BjbVYwZFhKdUlETTdkSEo1ZTNKbGRIVnliaUJJTG5ObGRDaGhMbk4xWW1GeWNtRjVLR0lzWWl0aktTeGtQajQrTUQ0K1BqQXBMREI5WTJGMFkyaDdjbVYwZFhKdUlEUjlmWDA3Wm5WdVkzUnBiMjRnY21Fb1lTbDdkR2hwY3k1TFlUMWhMVEkwTzNSb2FYTXVVR0U5Wm5WdVkzUnBiMjRvWWlsN1NsdDBhR2x6TGt0aEt6UStQajR5UGo0K01GMDlZbjA3ZEdocGN5NVBZVDFtZFc1amRHbHZiaWhpS1h0S1czUm9hWE11UzJFck9ENCtQakkrUGo0d1hUMWlmVHQwYUdsekxrMWhQV1oxYm1OMGFXOXVLR0lzWXlsN2RHaHBjeTVPWVNncE8zUm9hWE11VUdFb1lpazdkR2hwY3k1UFlTaGpLWDA3ZEdocGN5NU9ZVDFtZFc1amRHbHZiaWdwZTBwYmRHaHBjeTVMWVNzeE5qNCtQakkrUGo0d1hUMHdmWDFjYm5aaGNpQnpZVDB3TEhSaFBUQXNkV0U5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlGUmxlSFJFWldOdlpHVnlQMjVsZHlCVVpYaDBSR1ZqYjJSbGNpaGNJblYwWmpoY0lpazZkbTlwWkNBd0xIWmhQU2hoTEdJc1l5azlQbnRpUGo0K1BUQTdkbUZ5SUdROVlpdGpPMlp2Y2loalBXSTdZVnRqWFNZbUlTaGpQajFrS1RzcEt5dGpPMmxtS0RFMlBHTXRZaVltWVM1aWRXWm1aWEltSm5WaEtYSmxkSFZ5YmlCMVlTNWtaV052WkdVb1lTNXpkV0poY25KaGVTaGlMR01wS1R0bWIzSW9aRDFjSWx3aU8ySThZenNwZTNaaGNpQm5QV0ZiWWlzclhUdHBaaWhuSmpFeU9DbDdkbUZ5SUdnOVlWdGlLeXRkSmpZek8ybG1LREU1TWowOUtHY21NakkwS1Nsa0t6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLQ2huSmpNeEtUdzhObnhvS1R0bGJITmxlM1poY2lCdFBXRmJZaXNyWFNZMk16dG5QVEl5TkQwOUtHY21NalF3S1Q4b1p5WXhOU2s4UERFeWZHZzhQRFo4YlRvb1p5WTNLVHc4TVRoOGFEdzhNVEo4YlR3OE5ueGhXMklySzEwbU5qTTdOalUxTXpZK1p6OWtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0djcE9paG5MVDAyTlRVek5peGtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0RVMU1qazJmR2MrUGpFd0xEVTJNekl3ZkdjbU1UQXlNeWtwZlgxbGJITmxJR1FyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1p5bDljbVYwZFhKdUlHUjlMRnh1VWowb1lTeGlLVDArS0dFK1BqNDlNQ2svZG1Fb1NDeGhMR0lwT2x3aVhDSXNVejFoUFQ1N1ptOXlLSFpoY2lCaVBUQXNZejB3TzJNOFlTNXNaVzVuZEdnN0t5dGpLWHQyWVhJZ1pEMWhMbU5vWVhKRGIyUmxRWFFvWXlrN01USTNQajFrUDJJckt6b3lNRFEzUGoxa1AySXJQVEk2TlRVeU9UWThQV1FtSmpVM016UXpQajFrUHloaUt6MDBMQ3NyWXlrNllpczlNMzF5WlhSMWNtNGdZbjBzVkQwb1lTeGlMR01zWkNrOVBudGpQajQrUFRBN2FXWW9JU2d3UEdRcEtYSmxkSFZ5YmlBd08zWmhjaUJuUFdNN1pEMWpLMlF0TVR0bWIzSW9kbUZ5SUdnOU1EdG9QR0V1YkdWdVozUm9PeXNyYUNsN2RtRnlJRzA5WVM1amFHRnlRMjlrWlVGMEtHZ3BPMmxtS0RVMU1qazJQRDF0SmlZMU56TTBNejQ5YlNsN2RtRnlJSEk5WVM1amFHRnlRMjlrWlVGMEtDc3JhQ2s3YlQwMk5UVXpOaXNvS0cwbU1UQXlNeWs4UERFd0tYeHlKakV3TWpOOWFXWW9NVEkzUGoxdEtYdHBaaWhqUGoxa0tXSnlaV0ZyTzJKYll5c3JQajQrTUYwOWJYMWxiSE5sZTJsbUtESXdORGMrUFcwcGUybG1LR01yTVQ0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBURTVNbnh0UGo0MmZXVnNjMlY3YVdZb05qVTFNelUrUFcwcGUybG1LR01yTWo0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBUSXlOSHh0UGo0eE1uMWxiSE5sZTJsbUtHTXJNejQ5WEc1a0tXSnlaV0ZyTzJKYll5c3JQajQrTUYwOU1qUXdmRzArUGpFNE8ySmJZeXNyUGo0K01GMDlNVEk0ZkcwK1BqRXlKall6ZldKYll5c3JQajQrTUYwOU1USTRmRzArUGpZbU5qTjlZbHRqS3lzK1BqNHdYVDB4TWpoOGJTWTJNMzE5WWx0alBqNCtNRjA5TUR0eVpYUjFjbTRnWXkxbmZTeFZQV0U5UGpBOVBUMWhKVFFtSmlnd0lUMDlZU1V4TURCOGZEQTlQVDFoSlRRd01Da3NkMkU5V3pBc016RXNOakFzT1RFc01USXhMREUxTWl3eE9ESXNNakV6TERJME5Dd3lOelFzTXpBMUxETXpOVjBzZUdFOVd6QXNNekVzTlRrc09UQXNNVEl3TERFMU1Td3hPREVzTWpFeUxESTBNeXd5TnpNc016QTBMRE16TkYwc1EyRTlZVDArZTNaaGNpQmlQVk1vWVNrck1TeGpQVUpoS0dJcE8yTW1KbFFvWVN4SUxHTXNZaWs3Y21WMGRYSnVJR045TEZZOVcxMHNWejE3ZlN4RVlUMG9LVDArZTJsbUtDRllLWHQyWVhJZ1lUMTdWVk5GVWpwY0luZGxZbDkxYzJWeVhDSXNURTlIVGtGTlJUcGNJbmRsWWw5MWMyVnlYQ0lzVUVGVVNEcGNJaTljSWl4UVYwUTZYQ0l2WENJc1NFOU5SVHBjSWk5b2IyMWxMM2RsWWw5MWMyVnlYQ0lzVEVGT1J6b29YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JRzVoZG1sbllYUnZjaVltYm1GMmFXZGhkRzl5TG14aGJtZDFZV2RsY3lZbWJtRjJhV2RoZEc5eUxteGhibWQxWVdkbGMxc3dYWHg4WENKRFhDSXBMbkpsY0d4aFkyVW9YQ0l0WENJc1hHNWNJbDljSWlrclhDSXVWVlJHTFRoY0lpeGZPbUpoZkh4Y0lpNHZkR2hwY3k1d2NtOW5jbUZ0WENKOUxHSTdabTl5S0dJZ2FXNGdWeWwyYjJsa0lEQTlQVDFYVzJKZFAyUmxiR1YwWlNCaFcySmRPbUZiWWwwOVYxdGlYVHQyWVhJZ1l6MWJYVHRtYjNJb1lpQnBiaUJoS1dNdWNIVnphQ2hnSkh0aWZUMGtlMkZiWWwxOVlDazdXRDFqZlhKbGRIVnliaUJZZlN4WUxFVmhQVnR1ZFd4c0xGdGRMRnRkWFN4R1lUMWJNekVzTWprc016RXNNekFzTXpFc016QXNNekVzTXpFc016QXNNekVzTXpBc016RmRMRWRoUFZzek1Td3lPQ3d6TVN3ek1Dd3pNU3d6TUN3ek1Td3pNU3d6TUN3ek1Td3pNQ3d6TVYwN1puVnVZM1JwYjI0Z1NHRW9ZU2w3ZG1GeUlHSTlRWEp5WVhrb1V5aGhLU3N4S1R0VUtHRXNZaXd3TEdJdWJHVnVaM1JvS1R0eVpYUjFjbTRnWW4xY2JtWjFibU4wYVc5dUlFbGhLR0VzWWl4akxHUXBlMloxYm1OMGFXOXVJR2NvWml4dUxIQXBlMlp2Y2lobVBWd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQm1QMll1ZEc5VGRISnBibWNvS1RwbWZIeGNJbHdpTzJZdWJHVnVaM1JvUEc0N0tXWTljRnN3WFN0bU8zSmxkSFZ5YmlCbWZXWjFibU4wYVc5dUlHZ29aaXh1S1h0eVpYUjFjbTRnWnlobUxHNHNYQ0l3WENJcGZXWjFibU4wYVc5dUlHMG9aaXh1S1h0bWRXNWpkR2x2YmlCd0tIbGhLWHR5WlhSMWNtNGdNRDU1WVQ4dE1Ub3dQSGxoUHpFNk1IMTJZWElnZVRzd1BUMDlLSGs5Y0NobUxtZGxkRVoxYkd4WlpXRnlLQ2t0Ymk1blpYUkdkV3hzV1dWaGNpZ3BLU2ttSmpBOVBUMG9lVDF3S0dZdVoyVjBUVzl1ZEdnb0tTMXVMbWRsZEUxdmJuUm9LQ2twS1NZbUtIazljQ2htTG1kbGRFUmhkR1VvS1MxdUxtZGxkRVJoZEdVb0tTa3BPM0psZEhWeWJpQjVmV1oxYm1OMGFXOXVJSElvWmlsN2MzZHBkR05vS0dZdVoyVjBSR0Y1S0NrcGUyTmhjMlVnTURweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc01qa3BPMk5oYzJVZ01UcHlaWFIxY200Z1pqdGpZWE5sSURJNmNtVjBkWEp1SUc1bGR5QkVZWFJsS0dZdVoyVjBSblZzYkZsbFlYSW9LU3d3TERNcE8yTmhjMlVnTXpweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMRnh1TUN3eUtUdGpZWE5sSURRNmNtVjBkWEp1SUc1bGR5QkVZWFJsS0dZdVoyVjBSblZzYkZsbFlYSW9LU3d3TERFcE8yTmhjMlVnTlRweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc016RXBPMk5oYzJVZ05qcHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTFRFc01URXNNekFwZlgxbWRXNWpkR2x2YmlCM0tHWXBlM1poY2lCdVBXWXVSMkU3Wm05eUtHWTlibVYzSUVSaGRHVW9LRzVsZHlCRVlYUmxLR1l1U0dFck1Ua3dNQ3d3TERFcEtTNW5aWFJVYVcxbEtDa3BPekE4YmpzcGUzWmhjaUJ3UFdZdVoyVjBUVzl1ZEdnb0tTeDVQU2hWS0dZdVoyVjBSblZzYkZsbFlYSW9LU2svUm1FNlIyRXBXM0JkTzJsbUtHNCtlUzFtTG1kbGRFUmhkR1VvS1NsdUxUMTVMV1l1WjJWMFJHRjBaU2dwS3pFc1ppNXpaWFJFWVhSbEtERXBMREV4UG5BL1ppNXpaWFJOYjI1MGFDaHdLekVwT2lobUxuTmxkRTF2Ym5Sb0tEQXBMR1l1YzJWMFJuVnNiRmxsWVhJb1ppNW5aWFJHZFd4c1dXVmhjaWdwS3pFcEtUdGxiSE5sZTJZdWMyVjBSR0YwWlNobUxtZGxkRVJoZEdVb0tTdHVLVHRpY21WaGEzMTljRDF1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3JNU3d3TERRcE8yNDljaWh1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3NYRzR3TERRcEtUdHdQWElvY0NrN2NtVjBkWEp1SURBK1BXMG9iaXhtS1Q4d1BqMXRLSEFzWmlrL1ppNW5aWFJHZFd4c1dXVmhjaWdwS3pFNlppNW5aWFJHZFd4c1dXVmhjaWdwT21ZdVoyVjBSblZzYkZsbFlYSW9LUzB4ZldFK1BqNDlNRHRpUGo0K1BUQTdZejQrUGowd08yUStQajQ5TUR0MllYSWdkRDFLVzJRck5EQStQajR5UGo0K01GMDdaRDE3VkdFNlNWdGtQajQrTWo0K1BqQmRMRk5oT2tsYlpDczBQajQrTWo0K1BqQmRMRWxoT2tsYlpDczRQajQrTWo0K1BqQmRMRXhoT2tsYlpDc3hNajQrUGpJK1BqNHdYU3hLWVRwSlcyUXJNVFkrUGo0eVBqNCtNRjBzU0dFNlNWdGtLekl3UGo0K01qNCtQakJkTEVKaE9rbGJaQ3N5TkQ0K1BqSStQajR3WFN4SFlUcEpXMlFyTWpnK1BqNHlQajQrTUYwc1ZtRTZTVnRrS3pNeVBqNCtNajQrUGpCZExGSmhPa2xiWkNzek5qNCtQakkrUGo0d1hTeFZZVHAwUDFJb2RDazZYQ0pjSW4wN1l6MVNLR01wTzNROWUxd2lKV05jSWpwY0lpVmhJQ1ZpSUNWa0lDVklPaVZOT2lWVElDVlpYQ0lzWENJbFJGd2lPbHdpSlcwdkpXUXZKWGxjSWl4Y0lpVkdYQ0k2WENJbFdTMGxiUzBsWkZ3aUxGd2lKV2hjSWpwY0lpVmlYQ0lzWENJbGNsd2lPbHdpSlVrNkpVMDZKVk1nSlhCY0lpeGNJaVZTWENJNlhDSWxTRG9sVFZ3aUxGd2lKVlJjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsZUZ3aU9sd2lKVzB2SldRdkpYbGNJaXhjSWlWWVhDSTZYQ0lsU0RvbFRUb2xVMXdpTEZ4dVhDSWxSV05jSWpwY0lpVmpYQ0lzWENJbFJVTmNJanBjSWlWRFhDSXNYQ0lsUlhoY0lqcGNJaVZ0THlWa0x5VjVYQ0lzWENJbFJWaGNJanBjSWlWSU9pVk5PaVZUWENJc1hDSWxSWGxjSWpwY0lpVjVYQ0lzWENJbFJWbGNJanBjSWlWWlhDSXNYQ0lsVDJSY0lqcGNJaVZrWENJc1hDSWxUMlZjSWpwY0lpVmxYQ0lzWENJbFQwaGNJanBjSWlWSVhDSXNYQ0lsVDBsY0lqcGNJaVZKWENJc1hDSWxUMjFjSWpwY0lpVnRYQ0lzWENJbFQwMWNJanBjSWlWTlhDSXNYQ0lsVDFOY0lqcGNJaVZUWENJc1hDSWxUM1ZjSWpwY0lpVjFYQ0lzWENJbFQxVmNJanBjSWlWVlhDSXNYQ0lsVDFaY0lqcGNJaVZXWENJc1hDSWxUM2RjSWpwY0lpVjNYQ0lzWENJbFQxZGNJanBjSWlWWFhDSXNYQ0lsVDNsY0lqcGNJaVY1WENKOU8yWnZjaWgyWVhJZ2RTQnBiaUIwS1dNOVl5NXlaWEJzWVdObEtHNWxkeUJTWldkRmVIQW9kU3hjSW1kY0lpa3NkRnQxWFNrN2RtRnlJSHBoUFZ3aVUzVnVaR0Y1SUUxdmJtUmhlU0JVZFdWelpHRjVJRmRsWkc1bGMyUmhlU0JVYUhWeWMyUmhlU0JHY21sa1lYa2dVMkYwZFhKa1lYbGNJaTV6Y0d4cGRDaGNJaUJjSWlrc1FXRTlYQ0pLWVc1MVlYSjVJRVpsWW5KMVlYSjVJRTFoY21Ob0lFRndjbWxzSUUxaGVTQktkVzVsSUVwMWJIa2dRWFZuZFhOMElGTmxjSFJsYldKbGNpQlBZM1J2WW1WeUlFNXZkbVZ0WW1WeUlFUmxZMlZ0WW1WeVhDSXVjM0JzYVhRb1hDSWdYQ0lwTzNROWUxd2lKV0ZjSWpwbVBUNTZZVnRtTGtKaFhTNXpkV0p6ZEhKcGJtY29NQ3d6S1N4Y0lpVkJYQ0k2WmowK2VtRmJaaTVDWVYwc1hHNWNJaVZpWENJNlpqMCtRV0ZiWmk1S1lWMHVjM1ZpYzNSeWFXNW5LREFzTXlrc1hDSWxRbHdpT21ZOVBrRmhXMll1U21GZExGd2lKVU5jSWpwbVBUNW9LQ2htTGtoaEt6RTVNREFwTHpFd01Id3dMRElwTEZ3aUpXUmNJanBtUFQ1b0tHWXVUR0VzTWlrc1hDSWxaVndpT21ZOVBtY29aaTVNWVN3eUxGd2lJRndpS1N4Y0lpVm5YQ0k2WmowK2R5aG1LUzUwYjFOMGNtbHVaeWdwTG5OMVluTjBjbWx1WnlneUtTeGNJaVZIWENJNlpqMCtkeWhtS1N4Y0lpVklYQ0k2WmowK2FDaG1Ma2xoTERJcExGd2lKVWxjSWpwbVBUNTdaajFtTGtsaE96QTlQV1kvWmoweE1qb3hNanhtSmlZb1ppMDlNVElwTzNKbGRIVnliaUJvS0dZc01pbDlMRndpSldwY0lqcG1QVDU3Wm05eUtIWmhjaUJ1UFRBc2NEMHdPM0E4UFdZdVNtRXRNVHR1S3owb1ZTaG1Ma2hoS3pFNU1EQXBQMFpoT2tkaEtWdHdLeXRkS1R0eVpYUjFjbTRnYUNobUxreGhLMjRzTXlsOUxGd2lKVzFjSWpwbVBUNW9LR1l1U21Fck1Td3lLU3hjSWlWTlhDSTZaajArYUNobUxsTmhMRElwTEZ3aUpXNWNJam9vS1QwK1hDSmNYRzVjSWl4Y0lpVndYQ0k2WmowK01EdzlaaTVKWVNZbU1USStaaTVKWVQ5Y0lrRk5YQ0k2WENKUVRWd2lMRndpSlZOY0lqcG1QVDVvS0dZdVZHRXNNaWtzWENJbGRGd2lPaWdwUFQ1Y0lseGNkRndpTEZ3aUpYVmNJanBtUFQ1bUxrSmhmSHczTEZ3aUpWVmNJanBtUFQ1b0tFMWhkR2d1Wm14dmIzSW9LR1l1UjJFck55MW1Ma0poS1M4M0tTeGNiaklwTEZ3aUpWWmNJanBtUFQ1N2RtRnlJRzQ5VFdGMGFDNW1iRzl2Y2lnb1ppNUhZU3MzTFNobUxrSmhLellwSlRjcEx6Y3BPekkrUFNobUxrSmhLek0zTVMxbUxrZGhMVElwSlRjbUptNHJLenRwWmlodUtUVXpQVDF1SmlZb2NEMG9aaTVDWVNzek56RXRaaTVIWVNrbE55dzBQVDF3Zkh3elBUMXdKaVpWS0dZdVNHRXBmSHdvYmoweEtTazdaV3h6Wlh0dVBUVXlPM1poY2lCd1BTaG1Ma0poS3pjdFppNUhZUzB4S1NVM095ZzBQVDF3Zkh3MVBUMXdKaVpWS0dZdVNHRWxOREF3TFRFcEtTWW1iaXNyZlhKbGRIVnliaUJvS0c0c01pbDlMRndpSlhkY0lqcG1QVDVtTGtKaExGd2lKVmRjSWpwbVBUNW9LRTFoZEdndVpteHZiM0lvS0dZdVIyRXJOeTBvWmk1Q1lTczJLU1UzS1M4M0tTd3lLU3hjSWlWNVhDSTZaajArS0dZdVNHRXJNVGt3TUNrdWRHOVRkSEpwYm1jb0tTNXpkV0p6ZEhKcGJtY29NaWtzWENJbFdWd2lPbVk5UG1ZdVNHRXJNVGt3TUN4Y0lpVjZYQ0k2WmowK2UyWTlaaTVTWVR0MllYSWdiajB3UEQxbU8yWTlUV0YwYUM1aFluTW9aaWt2TmpBN2NtVjBkWEp1S0c0L1hDSXJYQ0k2WENJdFhDSXBLMU4wY21sdVp5aGNJakF3TURCY0lpc29aaTgyTUNveE1EQXJaaVUyTUNrcExuTnNhV05sS0MwMEtYMHNYQ0lsV2x3aU9tWTlQbVl1VldFc1hDSWxKVndpT2lncFBUNWNJaVZjSW4wN1l6MWpMbkpsY0d4aFkyVW9MeVVsTDJjc1hDSmNYSGd3TUZ4Y2VEQXdYQ0lwTzF4dVptOXlLSFVnYVc0Z2RDbGpMbWx1WTJ4MVpHVnpLSFVwSmlZb1l6MWpMbkpsY0d4aFkyVW9ibVYzSUZKbFowVjRjQ2gxTEZ3aVoxd2lLU3gwVzNWZEtHUXBLU2s3WXoxakxuSmxjR3hoWTJVb0wxeGNNRnhjTUM5bkxGd2lKVndpS1R0MVBVaGhLR01wTzJsbUtIVXViR1Z1WjNSb1BtSXBjbVYwZFhKdUlEQTdSeTV6WlhRb2RTeGhQajQrTUNrN2NtVjBkWEp1SUhVdWJHVnVaM1JvTFRGOVhHNTJZWElnVEdFOWUyRTZablZ1WTNScGIyNG9ZU3hpTEdNcGUyRStQajQ5TURzb2JtVjNJSEpoS0dFcEtTNU5ZU2hpUGo0K01DeGpQajQrTUNrN2MyRTlZVHQwWVNzck8zUm9jbTkzSUhOaE8zMHNaVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUF3ZlN4SU9tWjFibU4wYVc5dUtDbDdmU3g0T21aMWJtTjBhVzl1S0NsN2ZTeDZPbVoxYm1OMGFXOXVLQ2w3ZlN4S09tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEQjlMRVk2Wm5WdVkzUnBiMjRvS1h0OUxFRTZablZ1WTNScGIyNG9LWHQ5TEVVNlpuVnVZM1JwYjI0b0tYdDlMR2M2Wm5WdVkzUnBiMjRvS1h0OUxIazZablZ1WTNScGIyNG9LWHQ5TEhZNlpuVnVZM1JwYjI0b0tYdDlMRWM2Wm5WdVkzUnBiMjRvS1h0OUxIYzZablZ1WTNScGIyNG9LWHQ5TEdzNktDazlQakVzYmpwbWRXNWpkR2x2YmloaExHSXNZeWw3WVQxaUt6SXdPVGN4TlRJK1BqNHdQRFF4T1RRek1EVXRJU0ZoUHloaFBqNCtNQ2tyTkRJNU5EazJOekk1TmlwaU9rNWhUanRqUGo0K1BUQTdZVDF1WlhjZ1JHRjBaU2d4UlRNcVlTazdTVnRqUGo0K01qNCtQakJkUFdFdVoyVjBWVlJEVTJWamIyNWtjeWdwTzBsYll5czBQajQrTWo0K1BqQmRQV0V1WjJWMFZWUkRUV2x1ZFhSbGN5Z3BPMGxiWXlzNFBqNCtNajQrUGpCZFBXRXVaMlYwVlZSRFNHOTFjbk1vS1R0SlcyTXJNVEkrUGo1Y2JqSStQajR3WFQxaExtZGxkRlZVUTBSaGRHVW9LVHRKVzJNck1UWStQajR5UGo0K01GMDlZUzVuWlhSVlZFTk5iMjUwYUNncE8wbGJZeXN5TUQ0K1BqSStQajR3WFQxaExtZGxkRlZVUTBaMWJHeFpaV0Z5S0NrdE1Ua3dNRHRKVzJNck1qUStQajR5UGo0K01GMDlZUzVuWlhSVlZFTkVZWGtvS1R0SlcyTXJNamcrUGo0eVBqNCtNRjA5S0dFdVoyVjBWR2x0WlNncExVUmhkR1V1VlZSREtHRXVaMlYwVlZSRFJuVnNiRmxsWVhJb0tTd3dMREVzTUN3d0xEQXNNQ2twTHpnMk5FVTFmREI5TEc4NlpuVnVZM1JwYjI0b1lTeGlMR01wZTJFOVlpc3lNRGszTVRVeVBqNCtNRHcwTVRrME16QTFMU0VoWVQ4b1lUNCtQakFwS3pReU9UUTVOamN5T1RZcVlqcE9ZVTQ3WXo0K1BqMHdPMkU5Ym1WM0lFUmhkR1VvTVVVekttRXBPMGxiWXo0K1BqSStQajR3WFQxaExtZGxkRk5sWTI5dVpITW9LVHRKVzJNck5ENCtQakkrUGo0d1hUMWhMbWRsZEUxcGJuVjBaWE1vS1R0SlcyTXJPRDQrUGpJK1BqNHdYVDFoTG1kbGRFaHZkWEp6S0NrN1NWdGpLekV5UGo0K01qNCtQakJkUFdFdVoyVjBSR0YwWlNncE8wbGJZeXN4Tmo0K1BqSStQajR3WFQxaExtZGxkRTF2Ym5Sb0tDazdTVnRqS3pJd1BqNCtNajQrUGpCZFBXRXVaMlYwUm5Wc2JGbGxZWElvS1MweE9UQXdPMGxiWXlzeU5ENCtQakkrUGo0d1hUMWhMbWRsZEVSaGVTZ3BPMXh1U1Z0akt6STRQajQrTWo0K1BqQmRQU2hWS0dFdVoyVjBSblZzYkZsbFlYSW9LU2svZDJFNmVHRXBXMkV1WjJWMFRXOXVkR2dvS1YwcllTNW5aWFJFWVhSbEtDa3RNWHd3TzBsYll5c3pOajQrUGpJK1BqNHdYVDB0S0RZd0ttRXVaMlYwVkdsdFpYcHZibVZQWm1aelpYUW9LU2s3WWowb2JtVjNJRVJoZEdVb1lTNW5aWFJHZFd4c1dXVmhjaWdwTERZc01Ta3BMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s3ZG1GeUlHUTlLRzVsZHlCRVlYUmxLR0V1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwS1M1blpYUlVhVzFsZW05dVpVOW1abk5sZENncE8wbGJZeXN6TWo0K1BqSStQajR3WFQwb1lpRTlaQ1ltWVM1blpYUlVhVzFsZW05dVpVOW1abk5sZENncFBUMU5ZWFJvTG0xcGJpaGtMR0lwS1h3d2ZTeHdPbVoxYm1OMGFXOXVLR0VwZTJFK1BqNDlNRHQyWVhJZ1lqMXVaWGNnUkdGMFpTaEpXMkVyTWpBK1BqNHlQajQrTUYwck1Ua3dNQ3hKVzJFck1UWStQajR5UGo0K01GMHNTVnRoS3pFeVBqNCtNajQrUGpCZExFbGJZU3M0UGo0K01qNCtQakJkTEVsYllTczBQajQrTWo0K1BqQmRMRWxiWVQ0K1BqSStQajR3WFN3d0tTeGpQVWxiWVNzek1qNCtQakkrUGo0d1hTeGtQV0l1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1N4blBTaHVaWGNnUkdGMFpTaGlMbWRsZEVaMWJHeFpaV0Z5S0Nrc05pd3hLU2t1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1N4Y2JtZzlLRzVsZHlCRVlYUmxLR0l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwS1M1blpYUlVhVzFsZW05dVpVOW1abk5sZENncExHMDlUV0YwYUM1dGFXNG9hQ3huS1Rzd1BtTS9TVnRoS3pNeVBqNCtNajQrUGpCZFBVNTFiV0psY2lobklUMW9KaVp0UFQxa0tUb3dQR01oUFNodFBUMWtLU1ltS0djOVRXRjBhQzV0WVhnb2FDeG5LU3hpTG5ObGRGUnBiV1VvWWk1blpYUlVhVzFsS0Nrck5rVTBLaWdvTUR4alAyMDZaeWt0WkNrcEtUdEpXMkVyTWpRK1BqNHlQajQrTUYwOVlpNW5aWFJFWVhrb0tUdEpXMkVyTWpnK1BqNHlQajQrTUYwOUtGVW9ZaTVuWlhSR2RXeHNXV1ZoY2lncEtUOTNZVHA0WVNsYllpNW5aWFJOYjI1MGFDZ3BYU3RpTG1kbGRFUmhkR1VvS1MweGZEQTdTVnRoUGo0K01qNCtQakJkUFdJdVoyVjBVMlZqYjI1a2N5Z3BPMGxiWVNzMFBqNCtNajQrUGpCZFBXSXVaMlYwVFdsdWRYUmxjeWdwTzBsYllTczRQajQrTWo0K1BqQmRQV0l1WjJWMFNHOTFjbk1vS1R0SlcyRXJNVEkrUGo0eVBqNCtNRjA5WWk1blpYUkVZWFJsS0NrN1NWdGhLekUyUGo0K01qNCtQakJkUFdJdVoyVjBUVzl1ZEdnb0tUdEpXMkVyTWpBK1BqNHlQajQrTUYwOVlpNW5aWFJaWldGeUtDazdZVDFpTG1kbGRGUnBiV1VvS1R0cGMwNWhUaWhoS1Q4b1NWdEtZU2dwUGo0K01qNCtQakJkUFRZeExHRTlMVEVwT2x4dVlTODlNVVV6TzNKbGRIVnliaUJMWVNnb1VUMWhMREU4UFN0TllYUm9MbUZpY3loUktUOHdQRkUvSzAxaGRHZ3VabXh2YjNJb1VTODBNamswT1RZM01qazJLVDQrUGpBNmZuNHJUV0YwYUM1alpXbHNLQ2hSTFNzb2ZuNVJQajQrTUNrcEx6UXlPVFE1TmpjeU9UWXBQajQrTURvd0tTa3NZVDQrUGpCOUxHdzZablZ1WTNScGIyNG9LWHR5WlhSMWNtNHROVEo5TEcwNlpuVnVZM1JwYjI0b0tYdDlMSFE2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMloxYm1OMGFXOXVJR1FvZHlsN2NtVjBkWEp1S0hjOWR5NTBiMVJwYldWVGRISnBibWNvS1M1dFlYUmphQ2d2WEZ3b0tGdEJMVnBoTFhvZ1hTc3BYRndwSkM4cEtUOTNXekZkT2x3aVIwMVVYQ0o5WXo0K1BqMHdPM1poY2lCblBTaHVaWGNnUkdGMFpTa3VaMlYwUm5Wc2JGbGxZWElvS1N4b1BXNWxkeUJFWVhSbEtHY3NNQ3d4S1N4dFBXNWxkeUJFWVhSbEtHY3NOaXd4S1R0blBXZ3VaMlYwVkdsdFpYcHZibVZQWm1aelpYUW9LVHQyWVhJZ2NqMXRMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s3U2x0aFBqNCtNRDQrUGpJK1BqNHdYVDAyTUNwTllYUm9MbTFoZUNobkxISXBPMGxiWWo0K1BqQStQajR5UGo0K01GMDlUblZ0WW1WeUtHY2hQWElwTzJFOVpDaG9LVHRpUFdRb2JTazdZVDFEWVNoaEtUdGlQVU5oS0dJcE8zSThaejhvU2x0alBqNCtNajQrUGpCZFBWeHVZU3hLVzJNck5ENCtQakkrUGo0d1hUMWlLVG9vU2x0alBqNCtNajQrUGpCZFBXSXNTbHRqS3pRK1BqNHlQajQrTUYwOVlTbDlMR1E2S0NrOVBudEZLRndpWENJcGZTeENPbVoxYm1OMGFXOXVLR0VzWWl4aktYdGhQajQrUFRBN1lqNCtQajB3TzJNK1BqNDlNRHRXTG14bGJtZDBhRDB3TzJadmNpaDJZWElnWkR0a1BVaGJZaXNyUGo0K01GMDdLWHQyWVhJZ1p6MHhNRFVoUFdRN1p5WTlNVEV5SVQxa08yTXJQV2NtSm1NbE9EODBPakE3Vmk1d2RYTm9LREV4TWowOVpEOUtXMk0rUGo0eVBqNCtNRjA2TVRBMVBUMWtQMGxiWXo0K1BqSStQajR3WFRwb1lWdGpQajQrTXo0K1BqQmRLVHRqS3oxblB6ZzZOSDF5WlhSMWNtNGdjV0ZiWVYwdVlYQndiSGtvYm5Wc2JDeFdLWDBzYURvb0tUMCtSR0YwWlM1dWIzY29LU3gxT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURReU9UUTVNREUzTmpCOUxHSTZLQ2s5UG5CbGNtWnZjbTFoYm1ObExtNXZkeWdwTEVrNlpuVnVZM1JwYjI0b1lTeGlMR01wZTJJK1BqNDlNRHR5WlhSMWNtNGdTQzVqYjNCNVYybDBhR2x1S0dFK1BqNHdQajQrTUN4aVBqNCtNQ3hpS3loalBqNCtNQ2srUGo0d0tYMHNjenBtZFc1amRHbHZiaWhoS1h0aFBqNCtQVEE3ZG1GeUlHSTlTQzVzWlc1bmRHZzdhV1lvTkRJNU5Ea3dNVGMyTUR4aEtYSmxkSFZ5YmlFeE8yWnZjaWgyWVhJZ1l6MWNiakU3TkQ0OVl6dGpLajB5S1h0MllYSWdaRDFpS2lneEt5NHlMMk1wTzJROVRXRjBhQzV0YVc0b1pDeGhLekV3TURZMk16STVOaWs3ZG1GeUlHYzlUV0YwYUR0a1BVMWhkR2d1YldGNEtHRXNaQ2s3WVRwN1p6MG9aeTV0YVc0dVkyRnNiQ2huTERReU9UUTVNREUzTmpBc1pDc29OalUxTXpZdFpDVTJOVFV6TmlrbE5qVTFNellwTFVZdVluVm1abVZ5TG1KNWRHVk1aVzVuZEdnck5qVTFNelVwTHpZMU5UTTJPM1J5ZVh0R0xtZHliM2NvWnlrN2FXRW9LVHQyWVhJZ2FEMHhPMkp5WldGcklHRjlZMkYwWTJnb2JTbDdmV2c5ZG05cFpDQXdmV2xtS0dncGNtVjBkWEp1SVRCOWNtVjBkWEp1SVRGOUxFTTZablZ1WTNScGIyNG9ZU3hpS1h0aFBqNCtQVEE3WWo0K1BqMHdPM1poY2lCalBUQTdSR0VvS1M1bWIzSkZZV05vS0Noa0xHY3BQVDU3ZG1GeUlHZzlZaXRqTzJjOVNsdGhLelFxWno0K1BqSStQajR3WFQxb08yWnZjaWhvUFRBN2FEeGtMbXhsYm1kMGFEc3JLMmdwUjF0bkt5cytQajR3UGo0K01GMDlaQzVqYUdGeVEyOWtaVUYwS0dncE8wZGJaejQrUGpBK1BqNHdYVDB3TzJNclBXUXViR1Z1WjNSb0t6RjlLVHR5WlhSMWNtNGdNSDBzUkRwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OU1EdGlQajQrUFRBN2RtRnlJR005UkdFb0tUdEtXMkUrUGo0eVBqNCtNRjA5WXk1c1pXNW5kR2c3ZG1GeUlHUTlYRzR3TzJNdVptOXlSV0ZqYUNoblBUNWtLejFuTG14bGJtZDBhQ3N4S1R0S1cySStQajR5UGo0K01GMDlaRHR5WlhSMWNtNGdNSDBzWmpvb0tUMCtOVElzYWpwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlBMU1uMHNjVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUEzTUgwc2FUcG1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHRtYjNJb2RtRnlJR2M5TUN4b1BUQTdhRHhqTzJnckt5bDdkbUZ5SUcwOVNsdGlQajQrTWo0K1BqQmRMSEk5U2x0aUt6UStQajR5UGo0K01GMDdZaXM5T0R0bWIzSW9kbUZ5SUhjOU1EdDNQSEk3ZHlzcktYdDJZWElnZEQxSVcyMHJkejQrUGpCZExIVTlSV0ZiWVYwN01EMDlQWFI4ZkRFd1BUMDlkRDhvS0RFOVBUMWhQMlZoT2tRcEtIWmhLSFVzTUNrcExIVXViR1Z1WjNSb1BUQXBPblV1Y0hWemFDaDBLWDFuS3oxeWZVcGJaRDQrUGpJK1BqNHdYVDFuTzNKbGRIVnliaUF3ZlN4eU9rbGhMR002Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ2w3Y21WMGRYSnVJRWxoS0dFK1BqNHdMR0krUGo0d0xHTStQajR3TEdRK1BqNHdLWDE5TEZrOVpuVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmhLR01wZTFrOVl5NWxlSEJ2Y25Sek8xazlUV0VvS1R0R1BWa3VTenRwWVNncE8wd3VkVzV6YUdsbWRDaFpMa3dwTzAwdExUc3dQVDFOSmlZb2JuVnNiQ0U5UFZ4dVRpWW1LR05zWldGeVNXNTBaWEoyWVd3b1Rpa3NUajF1ZFd4c0tTeFBKaVlvWXoxUExFODliblZzYkN4aktDa3BLVHR5WlhSMWNtNGdXWDEyWVhJZ1lqMTdZVHBNWVgwN1RTc3JPMmxtS0dVdWFXNXpkR0Z1ZEdsaGRHVlhZWE50S1hSeWVYdHlaWFIxY200Z1pTNXBibk4wWVc1MGFXRjBaVmRoYzIwb1lpeGhLWDFqWVhSamFDaGpLWHRFS0dCTmIyUjFiR1V1YVc1emRHRnVkR2xoZEdWWFlYTnRJR05oYkd4aVlXTnJJR1poYVd4bFpDQjNhWFJvSUdWeWNtOXlPaUFrZTJOOVlDa3NiQ2hqS1gxd1lTaGlMR1oxYm1OMGFXOXVLR01wZTJFb1l5NXBibk4wWVc1alpTbDlLUzVqWVhSamFDaHNLVHR5WlhSMWNtNTdmWDBvS1R0bExsOVBjblJKYm1sMFBTaGhMR0lwUFQ0b1pTNWZUM0owU1c1cGREMVpMazBwS0dFc1lpazdaUzVmVDNKMFIyVjBUR0Z6ZEVWeWNtOXlQU2hoTEdJcFBUNG9aUzVmVDNKMFIyVjBUR0Z6ZEVWeWNtOXlQVmt1VGlrb1lTeGlLVHRsTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1VDNCMGFXOXVjejBvWVN4aUxHTXNaQ3huTEdnc2JTeHlMSGNzZENrOVBpaGxMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN6MVpMazhwS0dFc1lpeGpMR1FzWnl4b0xHMHNjaXgzTEhRcE8xeHVaUzVmVDNKMFFYQndaVzVrUlhobFkzVjBhVzl1VUhKdmRtbGtaWEk5S0dFc1lpazlQaWhsTGw5UGNuUkJjSEJsYm1SRmVHVmpkWFJwYjI1UWNtOTJhV1JsY2oxWkxsQXBLR0VzWWlrN1pTNWZUM0owUVdSa1JuSmxaVVJwYldWdWMybHZiazkyWlhKeWFXUmxQU2hoTEdJc1l5azlQaWhsTGw5UGNuUkJaR1JHY21WbFJHbHRaVzV6YVc5dVQzWmxjbkpwWkdVOVdTNVJLU2hoTEdJc1l5azdaUzVmVDNKMFFXUmtVMlZ6YzJsdmJrTnZibVpwWjBWdWRISjVQU2hoTEdJc1l5azlQaWhsTGw5UGNuUkJaR1JUWlhOemFXOXVRMjl1Wm1sblJXNTBjbms5V1M1U0tTaGhMR0lzWXlrN1pTNWZUM0owVW1Wc1pXRnpaVk5sYzNOcGIyNVBjSFJwYjI1elBXRTlQaWhsTGw5UGNuUlNaV3hsWVhObFUyVnpjMmx2Yms5d2RHbHZibk05V1M1VEtTaGhLVHRsTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1UFNoaExHSXNZeWs5UGlobExsOVBjblJEY21WaGRHVlRaWE56YVc5dVBWa3VWQ2tvWVN4aUxHTXBPMlV1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1UFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiajFaTGxVcEtHRXBPMlV1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlLR0VzWWl4aktUMCtLR1V1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlXUzVXS1NoaExHSXNZeWs3WEc1bExsOVBjblJIWlhSSmJuQjFkRTVoYldVOUtHRXNZaWs5UGlobExsOVBjblJIWlhSSmJuQjFkRTVoYldVOVdTNVhLU2hoTEdJcE8yVXVYMDl5ZEVkbGRFOTFkSEIxZEU1aGJXVTlLR0VzWWlrOVBpaGxMbDlQY25SSFpYUlBkWFJ3ZFhST1lXMWxQVmt1V0Nrb1lTeGlLVHRsTGw5UGNuUkdjbVZsUFdFOVBpaGxMbDlQY25SR2NtVmxQVmt1V1Nrb1lTazdaUzVmVDNKMFEzSmxZWFJsVkdWdWMyOXlQU2hoTEdJc1l5eGtMR2NzYUNrOVBpaGxMbDlQY25SRGNtVmhkR1ZVWlc1emIzSTlXUzVhS1NoaExHSXNZeXhrTEdjc2FDazdaUzVmVDNKMFIyVjBWR1Z1YzI5eVJHRjBZVDBvWVN4aUxHTXNaQ3huS1QwK0tHVXVYMDl5ZEVkbGRGUmxibk52Y2tSaGRHRTlXUzVmS1NoaExHSXNZeXhrTEdjcE8yVXVYMDl5ZEZKbGJHVmhjMlZVWlc1emIzSTlZVDArS0dVdVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJOVdTNGtLU2hoS1R0bExsOVBjblJEY21WaGRHVlNkVzVQY0hScGIyNXpQU2hoTEdJc1l5eGtLVDArS0dVdVgwOXlkRU55WldGMFpWSjFiazl3ZEdsdmJuTTlXUzVoWVNrb1lTeGlMR01zWkNrN1pTNWZUM0owUVdSa1VuVnVRMjl1Wm1sblJXNTBjbms5S0dFc1lpeGpLVDArS0dVdVgwOXlkRUZrWkZKMWJrTnZibVpwWjBWdWRISjVQVmt1WW1FcEtHRXNZaXhqS1R0Y2JtVXVYMDl5ZEZKbGJHVmhjMlZTZFc1UGNIUnBiMjV6UFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sVW5WdVQzQjBhVzl1Y3oxWkxtTmhLU2hoS1R0bExsOVBjblJEY21WaGRHVkNhVzVrYVc1blBXRTlQaWhsTGw5UGNuUkRjbVZoZEdWQ2FXNWthVzVuUFZrdVpHRXBLR0VwTzJVdVgwOXlkRUpwYm1SSmJuQjFkRDBvWVN4aUxHTXBQVDRvWlM1ZlQzSjBRbWx1WkVsdWNIVjBQVmt1WldFcEtHRXNZaXhqS1R0bExsOVBjblJDYVc1a1QzVjBjSFYwUFNoaExHSXNZeXhrS1QwK0tHVXVYMDl5ZEVKcGJtUlBkWFJ3ZFhROVdTNW1ZU2tvWVN4aUxHTXNaQ2s3WlM1ZlQzSjBRMnhsWVhKQ2IzVnVaRTkxZEhCMWRITTlZVDArS0dVdVgwOXlkRU5zWldGeVFtOTFibVJQZFhSd2RYUnpQVmt1WjJFcEtHRXBPMlV1WDA5eWRGSmxiR1ZoYzJWQ2FXNWthVzVuUFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sUW1sdVpHbHVaejFaTG1oaEtTaGhLVHRsTGw5UGNuUlNkVzVYYVhSb1FtbHVaR2x1Wnowb1lTeGlMR01zWkN4bktUMCtLR1V1WDA5eWRGSjFibGRwZEdoQ2FXNWthVzVuUFZrdWFXRXBLR0VzWWl4akxHUXNaeWs3WlM1ZlQzSjBVblZ1UFNoaExHSXNZeXhrTEdjc2FDeHRMSElwUFQ0b1pTNWZUM0owVW5WdVBWa3VhbUVwS0dFc1lpeGpMR1FzWnl4b0xHMHNjaWs3WEc1bExsOVBjblJGYm1SUWNtOW1hV3hwYm1jOVlUMCtLR1V1WDA5eWRFVnVaRkJ5YjJacGJHbHVaejFaTG10aEtTaGhLVHRsTGw5UGNuUlVjbUZwYm1sdVoweHZZV1JEYUdWamEzQnZhVzUwUFNoaExHSXBQVDRvWlM1ZlQzSjBWSEpoYVc1cGJtZE1iMkZrUTJobFkydHdiMmx1ZEQxWkxteGhLU2hoTEdJcE8yVXVYMDl5ZEZSeVlXbHVhVzVuVW1Wc1pXRnpaVU5vWldOcmNHOXBiblE5WVQwK0tHVXVYMDl5ZEZSeVlXbHVhVzVuVW1Wc1pXRnpaVU5vWldOcmNHOXBiblE5V1M1dFlTa29ZU2s3WlM1ZlQzSjBWSEpoYVc1cGJtZERjbVZoZEdWVFpYTnphVzl1UFNoaExHSXNZeXhrTEdjc2FDeHRMSElwUFQ0b1pTNWZUM0owVkhKaGFXNXBibWREY21WaGRHVlRaWE56YVc5dVBWa3VibUVwS0dFc1lpeGpMR1FzWnl4b0xHMHNjaWs3WlM1ZlQzSjBWSEpoYVc1cGJtZE1ZWHA1VW1WelpYUkhjbUZrUFdFOVBpaGxMbDlQY25SVWNtRnBibWx1WjB4aGVubFNaWE5sZEVkeVlXUTlXUzV2WVNrb1lTazdaUzVmVDNKMFZISmhhVzVwYm1kU2RXNVVjbUZwYmxOMFpYQTlLR0VzWWl4akxHUXNaeXhvS1QwK0tHVXVYMDl5ZEZSeVlXbHVhVzVuVW5WdVZISmhhVzVUZEdWd1BWa3VjR0VwS0dFc1lpeGpMR1FzWnl4b0tUdGNibVV1WDA5eWRGUnlZV2x1YVc1blQzQjBhVzFwZW1WeVUzUmxjRDBvWVN4aUtUMCtLR1V1WDA5eWRGUnlZV2x1YVc1blQzQjBhVzFwZW1WeVUzUmxjRDFaTG5GaEtTaGhMR0lwTzJVdVgwOXlkRlJ5WVdsdWFXNW5SWFpoYkZOMFpYQTlLR0VzWWl4akxHUXNaeXhvS1QwK0tHVXVYMDl5ZEZSeVlXbHVhVzVuUlhaaGJGTjBaWEE5V1M1eVlTa29ZU3hpTEdNc1pDeG5MR2dwTzJVdVgwOXlkRlJ5WVdsdWFXNW5SMlYwVUdGeVlXMWxkR1Z5YzFOcGVtVTlLR0VzWWl4aktUMCtLR1V1WDA5eWRGUnlZV2x1YVc1blIyVjBVR0Z5WVcxbGRHVnljMU5wZW1VOVdTNXpZU2tvWVN4aUxHTXBPMlV1WDA5eWRGUnlZV2x1YVc1blEyOXdlVkJoY21GdFpYUmxjbk5VYjBKMVptWmxjajBvWVN4aUxHTXNaQ2s5UGlobExsOVBjblJVY21GcGJtbHVaME52Y0hsUVlYSmhiV1YwWlhKelZHOUNkV1ptWlhJOVdTNTBZU2tvWVN4aUxHTXNaQ2s3WlM1ZlQzSjBWSEpoYVc1cGJtZERiM0I1VUdGeVlXMWxkR1Z5YzBaeWIyMUNkV1ptWlhJOUtHRXNZaXhqTEdRcFBUNG9aUzVmVDNKMFZISmhhVzVwYm1kRGIzQjVVR0Z5WVcxbGRHVnljMFp5YjIxQ2RXWm1aWEk5V1M1MVlTa29ZU3hpTEdNc1pDazdYRzVsTGw5UGNuUlVjbUZwYm1sdVowZGxkRTF2WkdWc1NXNXdkWFJQZFhSd2RYUkRiM1Z1ZEQwb1lTeGlMR01zWkNrOVBpaGxMbDlQY25SVWNtRnBibWx1WjBkbGRFMXZaR1ZzU1c1d2RYUlBkWFJ3ZFhSRGIzVnVkRDFaTG5aaEtTaGhMR0lzWXl4a0tUdGxMbDlQY25SVWNtRnBibWx1WjBkbGRFMXZaR1ZzU1c1d2RYUlBkWFJ3ZFhST1lXMWxQU2hoTEdJc1l5eGtLVDArS0dVdVgwOXlkRlJ5WVdsdWFXNW5SMlYwVFc5a1pXeEpibkIxZEU5MWRIQjFkRTVoYldVOVdTNTNZU2tvWVN4aUxHTXNaQ2s3WlM1ZlQzSjBWSEpoYVc1cGJtZFNaV3hsWVhObFUyVnpjMmx2YmoxaFBUNG9aUzVmVDNKMFZISmhhVzVwYm1kU1pXeGxZWE5sVTJWemMybHZiajFaTG5oaEtTaGhLVHQyWVhJZ1NtRTlLQ2s5UGloS1lUMVpMbmxoS1NncExFSmhQV1V1WDIxaGJHeHZZejFoUFQ0b1FtRTlaUzVmYldGc2JHOWpQVmt1ZW1FcEtHRXBPMlV1WDJaeVpXVTlZVDArS0dVdVgyWnlaV1U5V1M1QllTa29ZU2s3ZG1GeUlFdGhQV0U5UGloTFlUMVpMa05oS1NoaEtTeE9ZVDBvS1QwK0tFNWhQVmt1UkdFcEtDa3NUMkU5WVQwK0tFOWhQVmt1UldFcEtHRXBMRkJoUFdFOVBpaFFZVDFaTGtaaEtTaGhLVHRjYm1aMWJtTjBhVzl1SUUxaEtDbDdkbUZ5SUdFOVdUdGhQVTlpYW1WamRDNWhjM05wWjI0b2UzMHNZU2s3ZG1GeUlHSTlaRDArS0NrOVBtUW9LVDQrUGpBc1l6MWtQVDVuUFQ1a0tHY3BQajQrTUR0aExubGhQV0lvWVM1NVlTazdZUzU2WVQxaktHRXVlbUVwTzJFdVJHRTlZaWhoTGtSaEtUdGhMa1poUFdNb1lTNUdZU2s3Y21WMGRYSnVJR0Y5WlM1emRHRmphMEZzYkc5alBWQmhPMlV1YzNSaFkydFRZWFpsUFU1aE8yVXVjM1JoWTJ0U1pYTjBiM0psUFU5aE8yVXVWVlJHT0ZSdlUzUnlhVzVuUFZJN1pTNXpkSEpwYm1kVWIxVlVSamc5S0dFc1lpeGpLVDArVkNoaExFZ3NZaXhqS1R0bExteGxibWQwYUVKNWRHVnpWVlJHT0QxVE8zWmhjaUJhTzA4OVpuVnVZM1JwYjI0Z1VXRW9LWHRhZkh4U1lTZ3BPMXA4ZkNoUFBWRmhLWDA3WEc1bWRXNWpkR2x2YmlCU1lTZ3BlMmxtS0NFb01EeE5LU2w3YVdZb1pTNXdjbVZTZFc0cFptOXlLRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVdWNISmxVblZ1SmlZb1pTNXdjbVZTZFc0OVcyVXVjSEpsVW5WdVhTazdaUzV3Y21WU2RXNHViR1Z1WjNSb095bDdkbUZ5SUdFOVpTNXdjbVZTZFc0dWMyaHBablFvS1R0TExuVnVjMmhwWm5Rb1lTbDlabTl5S0Rzd1BFc3ViR1Z1WjNSb095bExMbk5vYVdaMEtDa29aU2s3YVdZb0lTZ3dQRTE4ZkZwOGZDaGFQU0V3TEdVdVkyRnNiR1ZrVW5WdVBTRXdMR1poS1NrcGUyWnZjaWc3TUR4TUxteGxibWQwYURzcFRDNXphR2xtZENncEtHVXBPMlp2Y2locktHVXBPekE4YW1FdWJHVnVaM1JvT3lscVlTNXphR2xtZENncEtHVXBmWDE5VW1Fb0tUdGNibHh1WEc0Z0lISmxkSFZ5YmlCdGIyUjFiR1ZCY21jdWNtVmhaSGxjYm4xY2JpazdYRzU5S1NncE8xeHVPMXh1YVdZZ0tIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElEMDlQU0FuYjJKcVpXTjBKeWxjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCdmNuUlhZWE50TzF4dVpXeHpaU0JwWmlBb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVmJKMkZ0WkNkZEtWeHVJQ0JrWldacGJtVW9XMTBzSUNncElEMCtJRzl5ZEZkaGMyMHBPMXh1SWl3Z0lpSXNJQ0lpTENBaVpYaHdiM0owSUdOdmJuTjBJR053ZFhNZ1BTQjFibVJsWm1sdVpXUTdJaXdnSWx4dWRtRnlJRzl5ZEZkaGMyMVVhSEpsWVdSbFpDQTlJQ2dvS1NBOVBpQjdYRzRnSUhaaGNpQmZjMk55YVhCMFJHbHlJRDBnZEhsd1pXOW1JR1J2WTNWdFpXNTBJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJrYjJOMWJXVnVkQzVqZFhKeVpXNTBVMk55YVhCMElEOGdaRzlqZFcxbGJuUXVZM1Z5Y21WdWRGTmpjbWx3ZEM1emNtTWdPaUIxYm1SbFptbHVaV1E3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdYMTltYVd4bGJtRnRaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJRjl6WTNKcGNIUkVhWElnUFNCZmMyTnlhWEIwUkdseUlIeDhJRjlmWm1sc1pXNWhiV1U3WEc0Z0lISmxkSFZ5YmlBb1hHNW1kVzVqZEdsdmJpaHRiMlIxYkdWQmNtY2dQU0I3ZlNrZ2UxeHVYRzVtZFc1amRHbHZiaUJoWVNncGUyVXVZblZtWm1WeUlUMXNMbUoxWm1abGNpWW1iU2dwTzNKbGRIVnliaUJzZldaMWJtTjBhVzl1SUc0b0tYdGxMbUoxWm1abGNpRTliQzVpZFdabVpYSW1KbTBvS1R0eVpYUjFjbTRnWW1GOVpuVnVZM1JwYjI0Z2NDZ3BlMlV1WW5WbVptVnlJVDFzTG1KMVptWmxjaVltYlNncE8zSmxkSFZ5YmlCallYMW1kVzVqZEdsdmJpQnlLQ2w3WlM1aWRXWm1aWEloUFd3dVluVm1abVZ5SmladEtDazdjbVYwZFhKdUlHUmhmV1oxYm1OMGFXOXVJR1ZoS0NsN1pTNWlkV1ptWlhJaFBXd3VZblZtWm1WeUppWnRLQ2s3Y21WMGRYSnVJR1poZlhaaGNpQjJQVzF2WkhWc1pVRnlaeXhvWVN4NE8zWXVjbVZoWkhrOWJtVjNJRkJ5YjIxcGMyVW9LR0VzWWlrOVBudG9ZVDFoTzNnOVluMHBPMXh1ZG1GeUlHbGhQVTlpYW1WamRDNWhjM05wWjI0b2UzMHNkaWtzYW1FOVhDSXVMM1JvYVhNdWNISnZaM0poYlZ3aUxIbzlLR0VzWWlrOVBudDBhSEp2ZHlCaU8zMHNhMkU5WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhkcGJtUnZkeXhCUFZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHbHRjRzl5ZEZOamNtbHdkSE1zUWoxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2NISnZZMlZ6Y3lZbVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIQnliMk5sYzNNdWRtVnljMmx2Ym5NbUpsd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekxuWmxjbk5wYjI1ekxtNXZaR1VzUkQxMkxrVk9Wa2xTVDA1TlJVNVVYMGxUWDFCVVNGSkZRVVI4ZkNFeExFVTlYQ0pjSWp0bWRXNWpkR2x2YmlCc1lTaGhLWHR5WlhSMWNtNGdkaTVzYjJOaGRHVkdhV3hsUDNZdWJHOWpZWFJsUm1sc1pTaGhMRVVwT2tVcllYMTJZWElnYldFc1J5eElPMXh1YVdZb1FpbDdkbUZ5SUdaelBYSmxjWFZwY21Vb1hDSm1jMXdpS1N4dVlUMXlaWEYxYVhKbEtGd2ljR0YwYUZ3aUtUdEZQVUUvYm1FdVpHbHlibUZ0WlNoRktTdGNJaTljSWpwZlgyUnBjbTVoYldVclhDSXZYQ0k3YldFOUtHSXNZeWs5UG50aVBVa29ZaWsvYm1WM0lGVlNUQ2hpS1RwdVlTNXViM0p0WVd4cGVtVW9ZaWs3Y21WMGRYSnVJR1p6TG5KbFlXUkdhV3hsVTNsdVl5aGlMR00vZG05cFpDQXdPbHdpZFhSbU9Gd2lLWDA3U0QxaVBUNTdZajF0WVNoaUxDRXdLVHRpTG1KMVptWmxjbng4S0dJOWJtVjNJRlZwYm5RNFFYSnlZWGtvWWlrcE8zSmxkSFZ5YmlCaWZUdEhQU2hpTEdNc1pDeG5QU0V3S1QwK2UySTlTU2hpS1Q5dVpYY2dWVkpNS0dJcE9tNWhMbTV2Y20xaGJHbDZaU2hpS1R0bWN5NXlaV0ZrUm1sc1pTaGlMR2MvZG05cFpDQXdPbHdpZFhSbU9Gd2lMQ2hvTEdzcFBUNTdhRDlrS0dncE9tTW9aejlyTG1KMVptWmxjanByS1gwcGZUc2hkaTUwYUdselVISnZaM0poYlNZbU1UeHdjbTlqWlhOekxtRnlaM1l1YkdWdVozUm9KaVlvYW1FOWNISnZZMlZ6Y3k1aGNtZDJXekZkTG5KbGNHeGhZMlVvTDF4Y1hGd3ZaeXhjSWk5Y0lpa3BPM0J5YjJObGMzTXVZWEpuZGk1emJHbGpaU2d5S1R0NlBTaGlMR01wUFQ1N2NISnZZMlZ6Y3k1bGVHbDBRMjlrWlQxaU8zUm9jbTkzSUdNN2ZUdDJMbWx1YzNCbFkzUTlLQ2s5UGx3aVcwVnRjMk55YVhCMFpXNGdUVzlrZFd4bElHOWlhbVZqZEYxY0lqdGNibXhsZENCaE8zUnllWHRoUFhKbGNYVnBjbVVvWENKM2IzSnJaWEpmZEdoeVpXRmtjMXdpS1gxallYUmphQ2hpS1h0MGFISnZkeUJqYjI1emIyeGxMbVZ5Y205eUtDZFVhR1VnWENKM2IzSnJaWEpmZEdoeVpXRmtjMXdpSUcxdlpIVnNaU0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJR2x1SUhSb2FYTWdibTlrWlM1cWN5QmlkV2xzWkNBdElIQmxjbWhoY0hNZ1lTQnVaWGRsY2lCMlpYSnphVzl1SUdseklHNWxaV1JsWkQ4bktTeGlPMzFuYkc5aVlXd3VWMjl5YTJWeVBXRXVWMjl5YTJWeWZXVnNjMlVnYVdZb2EyRjhmRUVwUVQ5RlBYTmxiR1l1Ykc5allYUnBiMjR1YUhKbFpqcGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnWkc5amRXMWxiblFtSm1SdlkzVnRaVzUwTG1OMWNuSmxiblJUWTNKcGNIUW1KaWhGUFdSdlkzVnRaVzUwTG1OMWNuSmxiblJUWTNKcGNIUXVjM0pqS1N3b2RIbHdaVzltSUY5elkzSnBjSFJFYVhJZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdYM05qY21sd2RFUnBjaWttSmloRlBWOXpZM0pwY0hSRWFYSXBMREFoUFQxRkxtbHVaR1Y0VDJZb1hDSmliRzlpT2x3aUtUOUZQVVV1YzNWaWMzUnlLREFzUlM1eVpYQnNZV05sS0M5YlB5TmRMaW92TEZ3aVhDSXBMbXhoYzNSSmJtUmxlRTltS0Z3aUwxd2lLU3N4S1RwRlBWd2lYQ0lzUW54OEtHMWhQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXpaVzVrS0c1MWJHd3BPMXh1Y21WMGRYSnVJR0l1Y21WemNHOXVjMlZVWlhoMGZTeEJKaVlvU0QxaFBUNTdkbUZ5SUdJOWJtVjNJRmhOVEVoMGRIQlNaWEYxWlhOME8ySXViM0JsYmloY0lrZEZWRndpTEdFc0lURXBPMkl1Y21WemNHOXVjMlZVZVhCbFBWd2lZWEp5WVhsaWRXWm1aWEpjSWp0aUxuTmxibVFvYm5Wc2JDazdjbVYwZFhKdUlHNWxkeUJWYVc1ME9FRnljbUY1S0dJdWNtVnpjRzl1YzJVcGZTa3NSejBvWVN4aUxHTXBQVDU3ZG1GeUlHUTlibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBPMlF1YjNCbGJpaGNJa2RGVkZ3aUxHRXNJVEFwTzJRdWNtVnpjRzl1YzJWVWVYQmxQVndpWVhKeVlYbGlkV1ptWlhKY0lqdGtMbTl1Ykc5aFpEMG9LVDArZXpJd01EMDlaQzV6ZEdGMGRYTjhmREE5UFdRdWMzUmhkSFZ6Smlaa0xuSmxjM0J2Ym5ObFAySW9aQzV5WlhOd2IyNXpaU2s2WXlncGZUdGtMbTl1WlhKeWIzSTlZenRrTG5ObGJtUW9iblZzYkNsOUtUdENKaVpjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2NHVnlabTl5YldGdVkyVW1KaWhuYkc5aVlXd3VjR1Z5Wm05eWJXRnVZMlU5Y21WeGRXbHlaU2hjSW5CbGNtWmZhRzl2YTNOY0lpa3VjR1Z5Wm05eWJXRnVZMlVwTzNaaGNpQnZZVDFqYjI1emIyeGxMbXh2Wnk1aWFXNWtLR052Ym5OdmJHVXBMSEJoUFdOdmJuTnZiR1V1WlhKeWIzSXVZbWx1WkNoamIyNXpiMnhsS1R0Y2JrSW1KaWh2WVQwb0xpNHVZU2s5UG1aekxuZHlhWFJsVTNsdVl5Z3hMR0V1YW05cGJpaGNJaUJjSWlrclhDSmNYRzVjSWlrc2NHRTlLQzR1TG1FcFBUNW1jeTUzY21sMFpWTjVibU1vTWl4aExtcHZhVzRvWENJZ1hDSXBLMXdpWEZ4dVhDSXBLVHQyWVhJZ2NXRTliMkVzU2oxd1lUdFBZbXBsWTNRdVlYTnphV2R1S0hZc2FXRXBPMmxoUFc1MWJHdzdYQ0p2WW1wbFkzUmNJaUU5ZEhsd1pXOW1JRmRsWWtGemMyVnRZbXg1SmlaeVlTaGNJbTV2SUc1aGRHbDJaU0IzWVhOdElITjFjSEJ2Y25RZ1pHVjBaV04wWldSY0lpazdkbUZ5SUdVc2MyRXNTejBoTVN4TUxHd3NZbUVzWTJFc1pHRXNabUU3Wm5WdVkzUnBiMjRnYlNncGUzWmhjaUJoUFdVdVluVm1abVZ5TzNZdVNFVkJVRGc5YkQxdVpYY2dTVzUwT0VGeWNtRjVLR0VwTzNZdVNFVkJVREUyUFc1bGR5QkpiblF4TmtGeWNtRjVLR0VwTzNZdVNFVkJVRlU0UFdKaFBXNWxkeUJWYVc1ME9FRnljbUY1S0dFcE8zWXVTRVZCVUZVeE5qMXVaWGNnVldsdWRERTJRWEp5WVhrb1lTazdkaTVJUlVGUU16STlZMkU5Ym1WM0lFbHVkRE15UVhKeVlYa29ZU2s3ZGk1SVJVRlFWVE15UFdSaFBXNWxkeUJWYVc1ME16SkJjbkpoZVNoaEtUdDJMa2hGUVZCR016STlibVYzSUVac2IyRjBNekpCY25KaGVTaGhLVHQyTGtoRlFWQkdOalE5Wm1FOWJtVjNJRVpzYjJGME5qUkJjbkpoZVNoaEtYMWNiblpoY2lCMFlUMHhOamMzTnpJeE5qdGNibWxtS0VRcFpUMTJMbmRoYzIxTlpXMXZjbms3Wld4elpTQnBaaWgyTG5kaGMyMU5aVzF2Y25rcFpUMTJMbmRoYzIxTlpXMXZjbms3Wld4elpTQnBaaWhsUFc1bGR5QlhaV0pCYzNObGJXSnNlUzVOWlcxdmNua29lMmx1YVhScFlXdzZkR0V2TmpVMU16WXNiV0Y0YVcxMWJUbzJOVFV6Tml4emFHRnlaV1E2SVRCOUtTd2hLR1V1WW5WbVptVnlJR2x1YzNSaGJtTmxiMllnVTJoaGNtVmtRWEp5WVhsQ2RXWm1aWElwS1hSb2NtOTNJRW9vWENKeVpYRjFaWE4wWldRZ1lTQnphR0Z5WldRZ1YyVmlRWE56WlcxaWJIa3VUV1Z0YjNKNUlHSjFkQ0IwYUdVZ2NtVjBkWEp1WldRZ1luVm1abVZ5SUdseklHNXZkQ0JoSUZOb1lYSmxaRUZ5Y21GNVFuVm1abVZ5TENCcGJtUnBZMkYwYVc1bklIUm9ZWFFnZDJocGJHVWdkR2hsSUdKeWIzZHpaWElnYUdGeklGTm9ZWEpsWkVGeWNtRjVRblZtWm1WeUlHbDBJR1J2WlhNZ2JtOTBJR2hoZG1VZ1YyVmlRWE56WlcxaWJIa2dkR2h5WldGa2N5QnpkWEJ3YjNKMElDMGdlVzkxSUcxaGVTQnVaV1ZrSUhSdklITmxkQ0JoSUdac1lXZGNJaWtzUWlZbVNpaGNJaWh2YmlCdWIyUmxJSGx2ZFNCdFlYa2dibVZsWkRvZ0xTMWxlSEJsY21sdFpXNTBZV3d0ZDJGemJTMTBhSEpsWVdSeklDMHRaWGh3WlhKcGJXVnVkR0ZzTFhkaGMyMHRZblZzYXkxdFpXMXZjbmtnWVc1a0wyOXlJSEpsWTJWdWRDQjJaWEp6YVc5dUtWd2lLU3hGY25KdmNpaGNJbUpoWkNCdFpXMXZjbmxjSWlrN1hHNXRLQ2s3ZEdFOVpTNWlkV1ptWlhJdVlubDBaVXhsYm1kMGFEdDJZWElnZFdFOVcxMHNkbUU5VzEwc2QyRTlXMTBzVFQwd0xIaGhQVzUxYkd3c1RqMXVkV3hzTzJaMWJtTjBhVzl1SUhsaEtDbDdUUzB0TzJsbUtEQTlQVTBtSmlodWRXeHNJVDA5ZUdFbUppaGpiR1ZoY2tsdWRHVnlkbUZzS0hoaEtTeDRZVDF1ZFd4c0tTeE9LU2w3ZG1GeUlHRTlUanRPUFc1MWJHdzdZU2dwZlgxbWRXNWpkR2x2YmlCeVlTaGhLWHRoUFZ3aVFXSnZjblJsWkNoY0lpdGhLMXdpS1Z3aU8wb29ZU2s3U3owaE1EdE1QVEU3WVQxdVpYY2dWMlZpUVhOelpXMWliSGt1VW5WdWRHbHRaVVZ5Y205eUtHRXJYQ0l1SUVKMWFXeGtJSGRwZEdnZ0xYTkJVMU5GVWxSSlQwNVRJR1p2Y2lCdGIzSmxJR2x1Wm04dVhDSXBPM2dvWVNrN2RHaHliM2NnWVR0OWRtRnlJSHBoUFdFOVBtRXVjM1JoY25SelYybDBhQ2hjSW1SaGRHRTZZWEJ3YkdsallYUnBiMjR2YjJOMFpYUXRjM1J5WldGdE8ySmhjMlUyTkN4Y0lpa3NTVDFoUFQ1aExuTjBZWEowYzFkcGRHZ29YQ0ptYVd4bE9pOHZYQ0lwTEU4N1R6MWNJbTl5ZEMxM1lYTnRMWFJvY21WaFpHVmtMbmRoYzIxY0lqdDZZU2hQS1h4OEtFODliR0VvVHlrcE8xeHVablZ1WTNScGIyNGdRV0VvWVNsN2FXWW9TQ2x5WlhSMWNtNGdTQ2hoS1R0MGFISnZkMXdpWW05MGFDQmhjM2x1WXlCaGJtUWdjM2x1WXlCbVpYUmphR2x1WnlCdlppQjBhR1VnZDJGemJTQm1ZV2xzWldSY0lqdDlablZ1WTNScGIyNGdRbUVvWVNsN2FXWW9hMkY4ZkVFcGUybG1LRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdabGRHTm9KaVloU1NoaEtTbHlaWFIxY200Z1ptVjBZMmdvWVN4N1kzSmxaR1Z1ZEdsaGJITTZYQ0p6WVcxbExXOXlhV2RwYmx3aWZTa3VkR2hsYmloaVBUNTdhV1lvSVdJdWIyc3BkR2h5YjNkY0ltWmhhV3hsWkNCMGJ5QnNiMkZrSUhkaGMyMGdZbWx1WVhKNUlHWnBiR1VnWVhRZ0oxd2lLMkVyWENJblhDSTdjbVYwZFhKdUlHSXVZWEp5WVhsQ2RXWm1aWElvS1gwcExtTmhkR05vS0NncFBUNUJZU2hoS1NrN2FXWW9SeWx5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0dJc1l5azlQbnRIS0dFc1pEMCtZaWh1WlhjZ1ZXbHVkRGhCY25KaGVTaGtLU2tzWXlsOUtYMXlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0NrdWRHaGxiaWdvS1QwK1FXRW9ZU2twZlZ4dVpuVnVZM1JwYjI0Z1EyRW9ZU3hpTEdNcGUzSmxkSFZ5YmlCQ1lTaGhLUzUwYUdWdUtHUTlQbGRsWWtGemMyVnRZbXg1TG1sdWMzUmhiblJwWVhSbEtHUXNZaWtwTG5Sb1pXNG9aRDArWkNrdWRHaGxiaWhqTEdROVBudEtLR0JtWVdsc1pXUWdkRzhnWVhONWJtTm9jbTl1YjNWemJIa2djSEpsY0dGeVpTQjNZWE50T2lBa2UyUjlZQ2s3Y21Fb1pDbDlLWDFtZFc1amRHbHZiaUJFWVNoaExHSXBlM1poY2lCalBVODdjbVYwZFhKdVhDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdWMlZpUVhOelpXMWliSGt1YVc1emRHRnVkR2xoZEdWVGRISmxZVzFwYm1kOGZIcGhLR01wZkh4SktHTXBmSHhDZkh4Y0ltWjFibU4wYVc5dVhDSWhQWFI1Y0dWdlppQm1aWFJqYUQ5RFlTaGpMR0VzWWlrNlptVjBZMmdvWXl4N1kzSmxaR1Z1ZEdsaGJITTZYQ0p6WVcxbExXOXlhV2RwYmx3aWZTa3VkR2hsYmloa1BUNVhaV0pCYzNObGJXSnNlUzVwYm5OMFlXNTBhV0YwWlZOMGNtVmhiV2x1Wnloa0xHRXBMblJvWlc0b1lpeG1kVzVqZEdsdmJpaG5LWHRLS0dCM1lYTnRJSE4wY21WaGJXbHVaeUJqYjIxd2FXeGxJR1poYVd4bFpEb2dKSHRuZldBcE8wb29YQ0ptWVd4c2FXNW5JR0poWTJzZ2RHOGdRWEp5WVhsQ2RXWm1aWElnYVc1emRHRnVkR2xoZEdsdmJsd2lLVHR5WlhSMWNtNGdRMkVvWXl4aExHSXBmU2twZlZ4dWRtRnlJRkFzUldFOWV6a3lNREUwTURvb1lTeGlMR01zWkNrOVBudHBaaWhjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2RueDhJWFl1WTJJcGNtVjBkWEp1SURFN1lUMVJLR0UrUGo0d0tUdGhMbk4wWVhKMGMxZHBkR2dvWENJdUwxd2lLU1ltS0dFOVlTNXpkV0p6ZEhKcGJtY29NaWtwTzJFOWRpNWpZaTVuWlhRb1lTazdhV1lvSVdFcGNtVjBkWEp1SURJN1lqNCtQajB3TzJNK1BqNDlNRHRrUGo0K1BUQTdhV1lvWWl0alBtRXVZbmwwWlV4bGJtZDBhQ2x5WlhSMWNtNGdNenQwY25sN2NtVjBkWEp1SUc0b0tTNXpaWFFvWVM1emRXSmhjbkpoZVNoaUxHSXJZeWtzWkQ0K1BqQXBMREI5WTJGMFkyaDdjbVYwZFhKdUlEUjlmWDA3Wm5WdVkzUnBiMjRnVWloaEtYdDBhR2x6TG01aGJXVTlYQ0pGZUdsMFUzUmhkSFZ6WENJN2RHaHBjeTV0WlhOellXZGxQV0JRY205bmNtRnRJSFJsY20xcGJtRjBaV1FnZDJsMGFDQmxlR2wwS0NSN1lYMHBZRHQwYUdsekxuTjBZWFIxY3oxaGZWeHVkbUZ5SUVaaFBXRTlQbnRoTG5SbGNtMXBibUYwWlNncE8yRXViMjV0WlhOellXZGxQU2dwUFQ1N2ZYMHNTR0U5WVQwK2V6QTlQVk11VUdFdWJHVnVaM1JvSmlZb1IyRW9LU3hUTGxsaEtGTXVVR0ZiTUYwcEtUdDJZWElnWWoxVExsQmhMbkJ2Y0NncE8ybG1LQ0ZpS1hKbGRIVnliaUEyTzFNdVVXRXVjSFZ6YUNoaUtUdFRMazFoVzJFdVQyRmRQV0k3WWk1UFlUMWhMazloTzNaaGNpQmpQWHRqYldRNlhDSnlkVzVjSWl4emRHRnlkRjl5YjNWMGFXNWxPbUV1YTJJc1lYSm5PbUV1YUdJc2NIUm9jbVZoWkY5d2RISTZZUzVQWVgwN1FpWW1ZaTUxYm5KbFppZ3BPMkl1Y0c5emRFMWxjM05oWjJVb1l5eGhMbkZpS1R0eVpYUjFjbTRnTUgwc1ZEMHdMRWxoUFZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQlVaWGgwUkdWamIyUmxjajl1WlhjZ1ZHVjRkRVJsWTI5a1pYSW9YQ0oxZEdZNFhDSXBPblp2YVdRZ01DeEtZVDBvWVN4aUxHTXBQVDU3WWo0K1BqMHdPM1poY2lCa1BXSXJZenRtYjNJb1l6MWlPMkZiWTEwbUppRW9ZejQ5WkNrN0tTc3JZenRwWmlneE5qeGpMV0ltSm1FdVluVm1abVZ5SmlaSllTbHlaWFIxY200Z1NXRXVaR1ZqYjJSbEtHRXVZblZtWm1WeUlHbHVjM1JoYm1ObGIyWWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSS9ZUzV6YkdsalpTaGlMR01wT21FdWMzVmlZWEp5WVhrb1lpeGpLU2s3WEc1bWIzSW9aRDFjSWx3aU8ySThZenNwZTNaaGNpQm5QV0ZiWWlzclhUdHBaaWhuSmpFeU9DbDdkbUZ5SUdnOVlWdGlLeXRkSmpZek8ybG1LREU1TWowOUtHY21NakkwS1Nsa0t6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLQ2huSmpNeEtUdzhObnhvS1R0bGJITmxlM1poY2lCclBXRmJZaXNyWFNZMk16dG5QVEl5TkQwOUtHY21NalF3S1Q4b1p5WXhOU2s4UERFeWZHZzhQRFo4YXpvb1p5WTNLVHc4TVRoOGFEdzhNVEo4YXp3OE5ueGhXMklySzEwbU5qTTdOalUxTXpZK1p6OWtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0djcE9paG5MVDAyTlRVek5peGtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0RVMU1qazJmR2MrUGpFd0xEVTJNekl3ZkdjbU1UQXlNeWtwZlgxbGJITmxJR1FyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1p5bDljbVYwZFhKdUlHUjlMRkU5S0dFc1lpazlQaWhoUGo0K1BUQXBQMHBoS0c0b0tTeGhMR0lwT2x3aVhDSXNUR0U5WVQwK2UzWmhjaUJpUFV0aEtDazdZVDFoS0NrN1ZTaGlLVHR5WlhSMWNtNGdZWDA3WEc1bWRXNWpkR2x2YmlCV0tHRXNZaWw3ZG1GeUlHTTlZWEpuZFcxbGJuUnpMbXhsYm1kMGFDMHlMR1E5WVhKbmRXMWxiblJ6TzNKbGRIVnliaUJNWVNnb0tUMCtlMlp2Y2loMllYSWdaejFOWVNnNEttTXBMR2c5Wno0K1BqTXNhejB3TzJzOFl6dHJLeXNwZTNaaGNpQjBQV1JiTWl0clhUdGxZU2dwVzJncmF6NCtQakJkUFhSOWNtVjBkWEp1SUU1aEtHRXNZeXhuTEdJcGZTbDlablZ1WTNScGIyNGdUMkVvWVNsN2FXWW9SQ2x5WlhSMWNtNGdWaWd3TERFc1lTazdURDFoT3pBOFZIeDhLRk11YkdJb0tTeDJMbTl1UlhocGREOHVLR0VwTEVzOUlUQXBPM29vWVN4dVpYY2dVaWhoS1NsOWRtRnlJRkZoUFdFOVBudE1QV0U3YVdZb1JDbDBhSEp2ZHlCUVlTaGhLU3hjSW5WdWQybHVaRndpTzA5aEtHRXBmVHRtZFc1amRHbHZiaUJTWVNncGUyWnZjaWgyWVhJZ1lUMTJMbTUxYlZSb2NtVmhaSE03WVMwdE95bEhZU2dwTzNWaExuVnVjMmhwWm5Rb0tDazlQbnROS3lzN1UyRW9LQ2s5UG5saEtDa3BmU2w5Wm5WdVkzUnBiMjRnUjJFb0tYdDJZWElnWVQxc1lTaGNJbTl5ZEMxM1lYTnRMWFJvY21WaFpHVmtMbmR2Y210bGNpNXFjMXdpS1R0aFBXNWxkeUJYYjNKclpYSW9ZU2s3VXk1UVlTNXdkWE5vS0dFcGZWeHVablZ1WTNScGIyNGdVMkVvWVNsN1JEOWhLQ2s2VUhKdmJXbHpaUzVoYkd3b1V5NVFZUzV0WVhBb1V5NVpZU2twTG5Sb1pXNG9ZU2w5WEc1MllYSWdVejE3VUdFNlcxMHNVV0U2VzEwc1ltSTZXMTBzVFdFNmUzMHNWMkVvS1h0RVB5aFRMbkpsWTJWcGRtVlBZbXBsWTNSVWNtRnVjMlpsY2oxVExtcGlMRk11ZEdoeVpXRmtTVzVwZEZSTVV6MVRMbUZpTEZNdWMyVjBSWGhwZEZOMFlYUjFjejFUTGlSaEtUcFNZU2dwZlN3a1lUcGhQVDVNUFdFc2RHSTZXMXdpSkhSbGNtMXBibUYwWlZkdmNtdGxjbHdpWFN4c1lqb29LVDArZTJadmNpaDJZWElnWVNCdlppQlRMbEZoS1VaaEtHRXBPMlp2Y2loaElHOW1JRk11VUdFcFJtRW9ZU2s3VXk1UVlUMWJYVHRUTGxGaFBWdGRPMU11VFdFOVcxMTlMRnBoT21FOVBudDJZWElnWWoxaExrOWhPMlJsYkdWMFpTQlRMazFoVzJKZE8xTXVVR0V1Y0hWemFDaGhLVHRUTGxGaExuTndiR2xqWlNoVExsRmhMbWx1WkdWNFQyWW9ZU2tzTVNrN1lTNVBZVDB3TzFSaEtHSXBmU3hxWWlncGUzMHNZV0lvS1h0VExtSmlMbVp2Y2tWaFkyZ29ZVDArWVNncEtYMHNXV0U2WVQwK2JtVjNJRkJ5YjIxcGMyVW9ZajArZTJFdWIyNXRaWE56WVdkbFBXZzlQbnRvUFdndVpHRjBZVHQyWVhJZ2F6MW9MbU50WkR0cFppaG9MblJoY21kbGRGUm9jbVZoWkNZbWFDNTBZWEpuWlhSVWFISmxZV1FoUFZjb0tTbDdkbUZ5SUhROVV5NU5ZVnRvTG5SaGNtZGxkRlJvY21WaFpGMDdkRDkwTG5CdmMzUk5aWE56WVdkbEtHZ3NhQzUwY21GdWMyWmxja3hwYzNRcE9seHVTaWhnU1c1MFpYSnVZV3dnWlhKeWIzSWhJRmR2Y210bGNpQnpaVzUwSUdFZ2JXVnpjMkZuWlNCY0lpUjdhMzFjSWlCMGJ5QjBZWEpuWlhRZ2NIUm9jbVZoWkNBa2UyZ3VkR0Z5WjJWMFZHaHlaV0ZrZlN3Z1luVjBJSFJvWVhRZ2RHaHlaV0ZrSUc1dklHeHZibWRsY2lCbGVHbHpkSE1oWUNsOVpXeHpaU0JwWmloY0ltTm9aV05yVFdGcGJHSnZlRndpUFQwOWF5bFlLQ2s3Wld4elpTQnBaaWhjSW5Od1lYZHVWR2h5WldGa1hDSTlQVDFyS1VoaEtHZ3BPMlZzYzJVZ2FXWW9YQ0pqYkdWaGJuVndWR2h5WldGa1hDSTlQVDFyS1ZNdVdtRW9VeTVOWVZ0b0xuUm9jbVZoWkYwcE8yVnNjMlVnYVdZb1hDSnJhV3hzVkdoeVpXRmtYQ0k5UFQxcktXZzlhQzUwYUhKbFlXUXNhejFUTGsxaFcyaGRMR1JsYkdWMFpTQlRMazFoVzJoZExFWmhLR3NwTEZSaEtHZ3BMRk11VVdFdWMzQnNhV05sS0ZNdVVXRXVhVzVrWlhoUFppaHJLU3d4S1N4ckxrOWhQVEE3Wld4elpTQnBaaWhjSW1OaGJtTmxiRlJvY21WaFpGd2lQVDA5YXlsVExrMWhXMmd1ZEdoeVpXRmtYUzV3YjNOMFRXVnpjMkZuWlNoN1kyMWtPbHdpWTJGdVkyVnNYQ0o5S1R0bGJITmxJR2xtS0Z3aWJHOWhaR1ZrWENJOVBUMXJLV0V1Ykc5aFpHVmtQU0V3TEVJbUppRmhMazloSmlaaExuVnVjbVZtS0Nrc1lpaGhLVHRsYkhObElHbG1LRndpWVd4bGNuUmNJajA5UFdzcFlXeGxjblFvWUZSb2NtVmhaQ0FrZTJndWRHaHlaV0ZrU1dSOU9pQWtlMmd1ZEdWNGRIMWdLVHRjYm1Wc2MyVWdhV1lvWENKelpYUnBiVzFsWkdsaGRHVmNJajA5UFdndWRHRnlaMlYwS1dFdWNHOXpkRTFsYzNOaFoyVW9hQ2s3Wld4elpTQnBaaWhjSW1OaGJHeElZVzVrYkdWeVhDSTlQVDFyS1haYmFDNW9ZVzVrYkdWeVhTZ3VMaTVvTG1GeVozTXBPMlZzYzJVZ2F5WW1TaWhnZDI5eWEyVnlJSE5sYm5RZ1lXNGdkVzVyYm05M2JpQmpiMjF0WVc1a0lDUjdhMzFnS1gwN1lTNXZibVZ5Y205eVBXZzlQbnRLS0dBa2Uxd2lkMjl5YTJWeUlITmxiblFnWVc0Z1pYSnliM0loWENKOUlDUjdhQzVtYVd4bGJtRnRaWDA2Skh0b0xteHBibVZ1YjMwNklDUjdhQzV0WlhOellXZGxmV0FwTzNSb2NtOTNJR2c3ZlR0Q0ppWW9ZUzV2YmloY0ltMWxjM05oWjJWY0lpeG9QVDVoTG05dWJXVnpjMkZuWlNoN1pHRjBZVHBvZlNrcExHRXViMjRvWENKbGNuSnZjbHdpTEdnOVBtRXViMjVsY25KdmNpaG9LU2twTzNaaGNpQmpQVnRkTEdROVcxd2liMjVGZUdsMFhDSmRMR2M3Wm05eUtHY2diMllnWkNsMkxtaGhjMDkzYmxCeWIzQmxjblI1S0djcEppWmpMbkIxYzJnb1p5azdZUzV3YjNOMFRXVnpjMkZuWlNoN1kyMWtPbHdpYkc5aFpGd2lMR2hoYm1Sc1pYSnpPbU1zZFhKc1QzSkNiRzlpT25ZdWJXRnBibE5qY21sd2RGVnliRTl5UW14dllueDhYM05qY21sd2RFUnBjaXgzWVhOdFRXVnRiM0o1T21Vc2QyRnpiVTF2WkhWc1pUcHpZWDBwZlNsOU8xeHVkaTVRVkdoeVpXRmtQVk03ZG1GeUlGVmhQV0U5UG50bWIzSW9PekE4WVM1c1pXNW5kR2c3S1dFdWMyaHBablFvS1NoMktYMDdkaTVsYzNSaFlteHBjMmhUZEdGamExTndZV05sUFNncFBUNTdkbUZ5SUdFOVZ5Z3BMR0k5Y2lncFcyRXJOVEkrUGo0eVBqNCtNRjA3WVQxeUtDbGJZU3MxTmo0K1BqSStQajR3WFR0V1lTaGlMR0l0WVNrN1ZTaGlLWDA3Wm5WdVkzUnBiMjRnVUdFb1lTbDdhV1lvUkNseVpYUjFjbTRnVmlneExEQXNZU2s3VVdFb1lTbDlkbUZ5SUZkaFBWdGRMRmhoTzNZdWFXNTJiMnRsUlc1MGNubFFiMmx1ZEQwb1lTeGlLVDArZTNaaGNpQmpQVmRoVzJGZE8yTjhmQ2hoUGoxWFlTNXNaVzVuZEdnbUppaFhZUzVzWlc1bmRHZzlZU3N4S1N4WFlWdGhYVDFqUFZoaExtZGxkQ2hoS1NrN1lUMWpLR0lwT3pBOFZEOVRMaVJoS0dFcE9sbGhLR0VwZlR0Y2JtWjFibU4wYVc5dUlGcGhLR0VwZTNSb2FYTXVWbUU5WVMweU5EdDBhR2x6TG1kaVBXWjFibU4wYVc5dUtHSXBlM0lvS1Z0MGFHbHpMbFpoS3pRK1BqNHlQajQrTUYwOVluMDdkR2hwY3k1bVlqMW1kVzVqZEdsdmJpaGlLWHR5S0NsYmRHaHBjeTVXWVNzNFBqNCtNajQrUGpCZFBXSjlPM1JvYVhNdVYyRTlablZ1WTNScGIyNG9ZaXhqS1h0MGFHbHpMbVZpS0NrN2RHaHBjeTVuWWloaUtUdDBhR2x6TG1aaUtHTXBmVHQwYUdsekxtVmlQV1oxYm1OMGFXOXVLQ2w3Y2lncFczUm9hWE11Vm1Fck1UWStQajR5UGo0K01GMDlNSDE5ZG1GeUlDUmhQVEFzWVdJOU1EdG1kVzVqZEdsdmJpQmlZaWhoTEdJc1l5eGtLWHR5WlhSMWNtNGdSRDlXS0RJc01TeGhMR0lzWXl4a0tUcGpZaWhoTEdJc1l5eGtLWDFjYm1aMWJtTjBhVzl1SUdOaUtHRXNZaXhqTEdRcGUyRStQajQ5TUR0aVBqNCtQVEE3WXo0K1BqMHdPMlErUGo0OU1EdHBaaWhjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ1UyaGhjbVZrUVhKeVlYbENkV1ptWlhJcGNtVjBkWEp1SUVvb1hDSkRkWEp5Wlc1MElHVnVkbWx5YjI1dFpXNTBJR1J2WlhNZ2JtOTBJSE4xY0hCdmNuUWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSXNJSEIwYUhKbFlXUnpJR0Z5WlNCdWIzUWdZWFpoYVd4aFlteGxJVndpS1N3Mk8zWmhjaUJuUFZ0ZE8ybG1LRVFtSmpBOVBUMW5MbXhsYm1kMGFDbHlaWFIxY200Z1ltSW9ZU3hpTEdNc1pDazdZVDE3YTJJNll5eFBZVHBoTEdoaU9tUXNjV0k2WjMwN2NtVjBkWEp1SUVRL0tHRXVjMkk5WENKemNHRjNibFJvY21WaFpGd2lMSEJ2YzNSTlpYTnpZV2RsS0dFc1p5a3NNQ2s2U0dFb1lTbDlablZ1WTNScGIyNGdaR0lvWVN4aUxHTXBlM0psZEhWeWJpQkVQMVlvTXl3eExHRXNZaXhqS1Rvd2ZXWjFibU4wYVc5dUlHVmlLR0VzWWlsN2FXWW9SQ2x5WlhSMWNtNGdWaWcwTERFc1lTeGlLWDFjYm5aaGNpQm1ZajFoUFQ1N1ptOXlLSFpoY2lCaVBUQXNZejB3TzJNOFlTNXNaVzVuZEdnN0t5dGpLWHQyWVhJZ1pEMWhMbU5vWVhKRGIyUmxRWFFvWXlrN01USTNQajFrUDJJckt6b3lNRFEzUGoxa1AySXJQVEk2TlRVeU9UWThQV1FtSmpVM016UXpQajFrUHloaUt6MDBMQ3NyWXlrNllpczlNMzF5WlhSMWNtNGdZbjBzWjJJOUtHRXNZaXhqTEdRcFBUNTdZejQrUGowd08ybG1LQ0VvTUR4a0tTbHlaWFIxY200Z01EdDJZWElnWnoxak8yUTlZeXRrTFRFN1ptOXlLSFpoY2lCb1BUQTdhRHhoTG14bGJtZDBhRHNySzJncGUzWmhjaUJyUFdFdVkyaGhja052WkdWQmRDaG9LVHRwWmlnMU5USTVOanc5YXlZbU5UY3pORE0rUFdzcGUzWmhjaUIwUFdFdVkyaGhja052WkdWQmRDZ3JLMmdwTzJzOU5qVTFNellyS0NockpqRXdNak1wUER3eE1DbDhkQ1l4TURJemZXbG1LREV5Tno0OWF5bDdhV1lvWXo0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBXdDlaV3h6Wlh0cFppZ3lNRFEzUGoxcktYdHBaaWhqS3pFK1BXUXBZbkpsWVdzN1lsdGpLeXMrUGo0d1hUMHhPVEo4YXo0K05uMWxiSE5sZTJsbUtEWTFOVE0xUGoxcktYdHBaaWhqS3pJK1BXUXBZbkpsWVdzN1lsdGpLeXMrUGo0d1hUMHlNalI4YXo0K01USjlaV3h6Wlh0cFppaGpLek0rUFdRcFluSmxZV3M3WWx0akt5cytQajR3WFQweU5EQjhhejQrWEc0eE9EdGlXMk1yS3o0K1BqQmRQVEV5T0h4clBqNHhNaVkyTTMxaVcyTXJLejQrUGpCZFBURXlPSHhyUGo0MkpqWXpmV0piWXlzclBqNCtNRjA5TVRJNGZHc21Oak45ZldKYll6NCtQakJkUFRBN2NtVjBkWEp1SUdNdFozMHNhR0k5S0dFc1lpeGpLVDArWjJJb1lTeHVLQ2tzWWl4aktUdG1kVzVqZEdsdmJpQnBZaWhoTEdJcGUybG1LRVFwY21WMGRYSnVJRllvTlN3eExHRXNZaWw5Wm5WdVkzUnBiMjRnYW1Jb1lTeGlMR01wZTJsbUtFUXBjbVYwZFhKdUlGWW9OaXd4TEdFc1lpeGpLWDFtZFc1amRHbHZiaUJyWWloaExHSXNZeWw3Y21WMGRYSnVJRVEvVmlnM0xERXNZU3hpTEdNcE9qQjlablZ1WTNScGIyNGdiR0lvWVN4aUtYdHBaaWhFS1hKbGRIVnliaUJXS0Rnc01TeGhMR0lwZldaMWJtTjBhVzl1SUcxaUtHRXNZaXhqS1h0cFppaEVLWEpsZEhWeWJpQldLRGtzTVN4aExHSXNZeWw5Wm5WdVkzUnBiMjRnYm1Jb1lTeGlMR01zWkNsN2FXWW9SQ2x5WlhSMWNtNGdWaWd4TUN3eExHRXNZaXhqTEdRcGZXWjFibU4wYVc5dUlHOWlLR0VzWWl4akxHUXBlMmxtS0VRcGNtVjBkWEp1SUZZb01URXNNU3hoTEdJc1l5eGtLWDFtZFc1amRHbHZiaUJ3WWloaExHSXNZeXhrS1h0cFppaEVLWEpsZEhWeWJpQldLREV5TERFc1lTeGlMR01zWkNsOVhHNW1kVzVqZEdsdmJpQnhZaWhoS1h0cFppaEVLWEpsZEhWeWJpQldLREV6TERFc1lTbDlablZ1WTNScGIyNGdjbUlvWVN4aUtYdHBaaWhFS1hKbGRIVnliaUJXS0RFMExERXNZU3hpS1gxbWRXNWpkR2x2YmlCellpaGhMR0lzWXlsN2FXWW9SQ2x5WlhSMWNtNGdWaWd4TlN3eExHRXNZaXhqS1gxbWRXNWpkR2x2YmlCMFlpaGhLWHRoUGo0K1BUQTdYQ0ptZFc1amRHbHZibHdpUFQwOWRIbHdaVzltSUVGMGIyMXBZM011Y21JbUppaEJkRzl0YVdOekxuSmlLSEFvS1N4aFBqNCtNaXhoS1M1MllXeDFaUzUwYUdWdUtGZ3BMR0VyUFRFeU9DeEJkRzl0YVdOekxuTjBiM0psS0hBb0tTeGhQajQrTWl3eEtTbDlkaTVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDIxaGFXeGliM2hmWVhkaGFYUTlkR0k3ZG1GeUlGZzlLQ2s5UG50MllYSWdZVDFYS0NrN2FXWW9ZU1ltS0hSaUtHRXBMR0U5ZFdJc0lVc3BLWFJ5ZVh0cFppaGhLQ2tzSVNnd1BGUXBLWFJ5ZVh0RVAxbGhLRXdwT2xGaEtFd3BmV05oZEdOb0tHSXBlMklnYVc1emRHRnVZMlZ2WmlCU2ZIeGNJblZ1ZDJsdVpGd2lQVDFpZkh4NktERXNZaWw5ZldOaGRHTm9LR0lwZTJJZ2FXNXpkR0Z1WTJWdlppQlNmSHhjSW5WdWQybHVaRndpUFQxaWZIeDZLREVzWWlsOWZUdDJMbU5vWldOclRXRnBiR0p2ZUQxWU8xeHVkbUZ5SUhaaVBWdGRMRms5WVQwK01EMDlQV0VsTkNZbUtEQWhQVDFoSlRFd01IeDhNRDA5UFdFbE5EQXdLU3gzWWoxYk1Dd3pNU3cyTUN3NU1Td3hNakVzTVRVeUxERTRNaXd5TVRNc01qUTBMREkzTkN3ek1EVXNNek0xWFN4NFlqMWJNQ3d6TVN3MU9TdzVNQ3d4TWpBc01UVXhMREU0TVN3eU1USXNNalF6TERJM015d3pNRFFzTXpNMFhUdG1kVzVqZEdsdmJpQjVZaWhoTEdJc1l5eGtMR2NzYUN4ckxIUXBlM0psZEhWeWJpQkVQMVlvTVRZc01TeGhMR0lzWXl4a0xHY3NhQ3hyTEhRcE9pMDFNbjFtZFc1amRHbHZiaUI2WWloaExHSXNZeXhrTEdjc2FDeHJLWHRwWmloRUtYSmxkSFZ5YmlCV0tERTNMREVzWVN4aUxHTXNaQ3huTEdnc2F5bDlYRzUyWVhJZ1FtSTlZVDArZTNaaGNpQmlQV1ppS0dFcEt6RXNZejFCWWloaUtUdGpKaVpvWWloaExHTXNZaWs3Y21WMGRYSnVJR045TEVOaVBWdGRMRVJpUFh0OUxFWmlQU2dwUFQ1N2FXWW9JVVZpS1h0MllYSWdZVDE3VlZORlVqcGNJbmRsWWw5MWMyVnlYQ0lzVEU5SFRrRk5SVHBjSW5kbFlsOTFjMlZ5WENJc1VFRlVTRHBjSWk5Y0lpeFFWMFE2WENJdlhDSXNTRTlOUlRwY0lpOW9iMjFsTDNkbFlsOTFjMlZ5WENJc1RFRk9Sem9vWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUc1aGRtbG5ZWFJ2Y2lZbWJtRjJhV2RoZEc5eUxteGhibWQxWVdkbGN5WW1ibUYyYVdkaGRHOXlMbXhoYm1kMVlXZGxjMXN3WFh4OFhDSkRYQ0lwTG5KbGNHeGhZMlVvWENJdFhDSXNYQ0pmWENJcEsxd2lMbFZVUmkwNFhDSXNYenBxWVh4OFhDSXVMM1JvYVhNdWNISnZaM0poYlZ3aWZTeGlPMlp2Y2loaUlHbHVJRVJpS1hadmFXUWdNRDA5UFVSaVcySmRQMlJsYkdWMFpTQmhXMkpkT21GYllsMDlSR0piWWwwN2RtRnlJR005VzEwN1ptOXlLR0lnYVc0Z1lTbGpMbkIxYzJnb1lDUjdZbjA5Skh0aFcySmRmV0FwTzBWaVBXTjljbVYwZFhKdUlFVmlmU3hGWWp0Y2JtWjFibU4wYVc5dUlFZGlLR0VzWWlsN2FXWW9SQ2x5WlhSMWNtNGdWaWd4T0N3eExHRXNZaWs3WVQ0K1BqMHdPMkkrUGo0OU1EdDJZWElnWXowd08wWmlLQ2t1Wm05eVJXRmphQ2dvWkN4bktUMCtlM1poY2lCb1BXSXJZenRuUFhJb0tWdGhLelFxWno0K1BqSStQajR3WFQxb08yWnZjaWhvUFRBN2FEeGtMbXhsYm1kMGFEc3JLMmdwWVdFb0tWdG5LeXMrUGo0d1BqNCtNRjA5WkM1amFHRnlRMjlrWlVGMEtHZ3BPMkZoS0NsYlp6NCtQakErUGo0d1hUMHdPMk1yUFdRdWJHVnVaM1JvS3pGOUtUdHlaWFIxY200Z01IMW1kVzVqZEdsdmJpQkxZaWhoTEdJcGUybG1LRVFwY21WMGRYSnVJRllvTVRrc01TeGhMR0lwTzJFK1BqNDlNRHRpUGo0K1BUQTdkbUZ5SUdNOVJtSW9LVHR5S0NsYllUNCtQakkrUGo0d1hUMWpMbXhsYm1kMGFEdDJZWElnWkQwd08yTXVabTl5UldGamFDaG5QVDVrS3oxbkxteGxibWQwYUNzeEtUdHlLQ2xiWWo0K1BqSStQajR3WFQxa08zSmxkSFZ5YmlBd2ZXWjFibU4wYVc5dUlFeGlLR0VwZTNKbGRIVnliaUJFUDFZb01qQXNNU3hoS1RvMU1uMW1kVzVqZEdsdmJpQk5ZaWhoTEdJc1l5eGtLWHR5WlhSMWNtNGdSRDlXS0RJeExERXNZU3hpTEdNc1pDazZOVEo5WEc1bWRXNWpkR2x2YmlCT1lpaGhMR0lzWXl4a0xHY3BlM0psZEhWeWJpQkVQMVlvTWpJc01TeGhMR0lzWXl4a0xHY3BPamN3ZlhaaGNpQlBZajFiYm5Wc2JDeGJYU3hiWFYwN1puVnVZM1JwYjI0Z1VHSW9ZU3hpTEdNc1pDbDdhV1lvUkNseVpYUjFjbTRnVmlneU15d3hMR0VzWWl4akxHUXBPMkkrUGo0OU1EdGpQajQrUFRBN1pENCtQajB3TzJadmNpaDJZWElnWnowd0xHZzlNRHRvUEdNN2FDc3JLWHQyWVhJZ2F6MXlLQ2xiWWo0K1BqSStQajR3WFN4MFBYSW9LVnRpS3pRK1BqNHlQajQrTUYwN1lpczlPRHRtYjNJb2RtRnlJRU05TUR0RFBIUTdReXNyS1h0MllYSWdkejF1S0NsYmF5dERQajQrTUYwc2VUMVBZbHRoWFRzd1BUMDlkM3g4TVRBOVBUMTNQeWdvTVQwOVBXRS9jV0U2U2lrb1NtRW9lU3d3S1Nrc2VTNXNaVzVuZEdnOU1DazZlUzV3ZFhOb0tIY3BmV2NyUFhSOWNpZ3BXMlErUGo0eVBqNCtNRjA5Wnp0eVpYUjFjbTRnTUgxMllYSWdVV0k5V3pNeExESTVMRE14TERNd0xETXhMRE13TERNeExETXhMRE13TERNeExETXdMRE14WFN4U1lqMWJNekVzTWpnc016RXNNekFzTXpFc016QXNNekVzTXpFc016QXNNekVzTXpBc016RmRPMXh1Wm5WdVkzUnBiMjRnVTJJb1lTbDdkbUZ5SUdJOVFYSnlZWGtvWm1Jb1lTa3JNU2s3WjJJb1lTeGlMREFzWWk1c1pXNW5kR2dwTzNKbGRIVnliaUJpZlhaaGNpQlVZajBvWVN4aUtUMCtlMkZoS0NrdWMyVjBLR0VzWWo0K1BqQXBmVHRjYm1aMWJtTjBhVzl1SUZWaUtHRXNZaXhqTEdRcGUyWjFibU4wYVc5dUlHY29aaXh4TEhVcGUyWnZjaWhtUFZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCbVAyWXVkRzlUZEhKcGJtY29LVHBtZkh4Y0lsd2lPMll1YkdWdVozUm9QSEU3S1dZOWRWc3dYU3RtTzNKbGRIVnliaUJtZldaMWJtTjBhVzl1SUdnb1ppeHhLWHR5WlhSMWNtNGdaeWhtTEhFc1hDSXdYQ0lwZldaMWJtTjBhVzl1SUdzb1ppeHhLWHRtZFc1amRHbHZiaUIxS0VoaUtYdHlaWFIxY200Z01ENUlZajh0TVRvd1BFaGlQekU2TUgxMllYSWdSanN3UFQwOUtFWTlkU2htTG1kbGRFWjFiR3haWldGeUtDa3RjUzVuWlhSR2RXeHNXV1ZoY2lncEtTa21KakE5UFQwb1JqMTFLR1l1WjJWMFRXOXVkR2dvS1MxeExtZGxkRTF2Ym5Sb0tDa3BLU1ltS0VZOWRTaG1MbWRsZEVSaGRHVW9LUzF4TG1kbGRFUmhkR1VvS1NrcE8zSmxkSFZ5YmlCR2ZXWjFibU4wYVc5dUlIUW9aaWw3YzNkcGRHTm9LR1l1WjJWMFJHRjVLQ2twZTJOaGMyVWdNRHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTWprcE8yTmhjMlVnTVRweVpYUjFjbTRnWmp0allYTmxJREk2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMRE1wTzJOaGMyVWdNenB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExGeHVNQ3d5S1R0allYTmxJRFE2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwTzJOaGMyVWdOVHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTXpFcE8yTmhjMlVnTmpweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc016QXBmWDFtZFc1amRHbHZiaUJES0dZcGUzWmhjaUJ4UFdZdVVtRTdabTl5S0dZOWJtVjNJRVJoZEdVb0tHNWxkeUJFWVhSbEtHWXVVMkVyTVRrd01Dd3dMREVwS1M1blpYUlVhVzFsS0NrcE96QThjVHNwZTNaaGNpQjFQV1l1WjJWMFRXOXVkR2dvS1N4R1BTaFpLR1l1WjJWMFJuVnNiRmxsWVhJb0tTay9VV0k2VW1JcFczVmRPMmxtS0hFK1JpMW1MbWRsZEVSaGRHVW9LU2x4TFQxR0xXWXVaMlYwUkdGMFpTZ3BLekVzWmk1elpYUkVZWFJsS0RFcExERXhQblUvWmk1elpYUk5iMjUwYUNoMUt6RXBPaWhtTG5ObGRFMXZiblJvS0RBcExHWXVjMlYwUm5Wc2JGbGxZWElvWmk1blpYUkdkV3hzV1dWaGNpZ3BLekVwS1R0bGJITmxlMll1YzJWMFJHRjBaU2htTG1kbGRFUmhkR1VvS1N0eEtUdGljbVZoYTMxOWRUMXVaWGNnUkdGMFpTaG1MbWRsZEVaMWJHeFpaV0Z5S0Nrck1Td3dMRFFwTzNFOWRDaHVaWGNnUkdGMFpTaG1MbWRsZEVaMWJHeFpaV0Z5S0Nrc1hHNHdMRFFwS1R0MVBYUW9kU2s3Y21WMGRYSnVJREErUFdzb2NTeG1LVDh3UGoxcktIVXNaaWsvWmk1blpYUkdkV3hzV1dWaGNpZ3BLekU2Wmk1blpYUkdkV3hzV1dWaGNpZ3BPbVl1WjJWMFJuVnNiRmxsWVhJb0tTMHhmV0UrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHQyWVhJZ2R6MXlLQ2xiWkNzME1ENCtQakkrUGo0d1hUdGtQWHR2WWpwd0tDbGJaRDQrUGpJK1BqNHdYU3h1WWpwd0tDbGJaQ3MwUGo0K01qNCtQakJkTEZSaE9uQW9LVnRrS3pnK1BqNHlQajQrTUYwc1dHRTZjQ2dwVzJRck1USStQajR5UGo0K01GMHNWV0U2Y0NncFcyUXJNVFkrUGo0eVBqNCtNRjBzVTJFNmNDZ3BXMlFyTWpBK1BqNHlQajQrTUYwc1RtRTZjQ2dwVzJRck1qUStQajR5UGo0K01GMHNVbUU2Y0NncFcyUXJNamcrUGo0eVBqNCtNRjBzZFdJNmNDZ3BXMlFyTXpJK1BqNHlQajQrTUYwc2JXSTZjQ2dwVzJRck16WStQajR5UGo0K01GMHNjR0k2ZHo5UktIY3BPbHdpWENKOU8yTTlVU2hqS1R0M1BYdGNJaVZqWENJNlhDSWxZU0FsWWlBbFpDQWxTRG9sVFRvbFV5QWxXVndpTEZ3aUpVUmNJanBjSWlWdEx5VmtMeVY1WENJc1hDSWxSbHdpT2x3aUpWa3RKVzB0SldSY0lpeGNJaVZvWENJNlhDSWxZbHdpTEZ3aUpYSmNJanBjSWlWSk9pVk5PaVZUSUNWd1hDSXNYQ0lsVWx3aU9sd2lKVWc2SlUxY0lpeGNJaVZVWENJNlhDSWxTRG9sVFRvbFUxd2lMRndpSlhoY0lqcGNJaVZ0THlWa0x5VjVYQ0lzWEc1Y0lpVllYQ0k2WENJbFNEb2xUVG9sVTF3aUxGd2lKVVZqWENJNlhDSWxZMXdpTEZ3aUpVVkRYQ0k2WENJbFExd2lMRndpSlVWNFhDSTZYQ0lsYlM4bFpDOGxlVndpTEZ3aUpVVllYQ0k2WENJbFNEb2xUVG9sVTF3aUxGd2lKVVY1WENJNlhDSWxlVndpTEZ3aUpVVlpYQ0k2WENJbFdWd2lMRndpSlU5a1hDSTZYQ0lsWkZ3aUxGd2lKVTlsWENJNlhDSWxaVndpTEZ3aUpVOUlYQ0k2WENJbFNGd2lMRndpSlU5SlhDSTZYQ0lsU1Z3aUxGd2lKVTl0WENJNlhDSWxiVndpTEZ3aUpVOU5YQ0k2WENJbFRWd2lMRndpSlU5VFhDSTZYQ0lsVTF3aUxGd2lKVTkxWENJNlhDSWxkVndpTEZ3aUpVOVZYQ0k2WENJbFZWd2lMRndpSlU5V1hDSTZYQ0lsVmx3aUxGd2lKVTkzWENJNlhDSWxkMXdpTEZ3aUpVOVhYQ0k2WENJbFYxd2lMRndpSlU5NVhDSTZYQ0lsZVZ3aWZUdG1iM0lvZG1GeUlIa2dhVzRnZHlsalBXTXVjbVZ3YkdGalpTaHVaWGNnVW1WblJYaHdLSGtzWENKblhDSXBMSGRiZVYwcE8zWmhjaUJKWWoxY0lsTjFibVJoZVNCTmIyNWtZWGtnVkhWbGMyUmhlU0JYWldSdVpYTmtZWGtnVkdoMWNuTmtZWGtnUm5KcFpHRjVJRk5oZEhWeVpHRjVYQ0l1YzNCc2FYUW9YQ0lnWENJcExFcGlQVndpU21GdWRXRnllU0JHWldKeWRXRnllU0JOWVhKamFDQkJjSEpwYkNCTllYa2dTblZ1WlNCS2RXeDVJRUYxWjNWemRDQlRaWEIwWlcxaVpYSWdUMk4wYjJKbGNpQk9iM1psYldKbGNpQkVaV05sYldKbGNsd2lMbk53YkdsMEtGd2lJRndpS1R0M1BYdGNJaVZoWENJNlpqMCtTV0piWmk1T1lWMHVjM1ZpYzNSeWFXNW5LREFzTXlrc1hHNWNJaVZCWENJNlpqMCtTV0piWmk1T1lWMHNYQ0lsWWx3aU9tWTlQa3BpVzJZdVZXRmRMbk4xWW5OMGNtbHVaeWd3TERNcExGd2lKVUpjSWpwbVBUNUtZbHRtTGxWaFhTeGNJaVZEWENJNlpqMCthQ2dvWmk1VFlTc3hPVEF3S1M4eE1EQjhNQ3d5S1N4Y0lpVmtYQ0k2WmowK2FDaG1MbGhoTERJcExGd2lKV1ZjSWpwbVBUNW5LR1l1V0dFc01peGNJaUJjSWlrc1hDSWxaMXdpT21ZOVBrTW9aaWt1ZEc5VGRISnBibWNvS1M1emRXSnpkSEpwYm1jb01pa3NYQ0lsUjF3aU9tWTlQa01vWmlrc1hDSWxTRndpT21ZOVBtZ29aaTVVWVN3eUtTeGNJaVZKWENJNlpqMCtlMlk5Wmk1VVlUc3dQVDFtUDJZOU1USTZNVEk4WmlZbUtHWXRQVEV5S1R0eVpYUjFjbTRnYUNobUxESXBmU3hjSWlWcVhDSTZaajArZTJadmNpaDJZWElnY1Qwd0xIVTlNRHQxUEQxbUxsVmhMVEU3Y1NzOUtGa29aaTVUWVNzeE9UQXdLVDlSWWpwU1lpbGJkU3NyWFNrN2NtVjBkWEp1SUdnb1ppNVlZU3R4TERNcGZTeGNJaVZ0WENJNlpqMCthQ2htTGxWaEt6RXNNaWtzWENJbFRWd2lPbVk5UG1nb1ppNXVZaXd5S1N4Y0lpVnVYQ0k2S0NrOVBsd2lYRnh1WENJc1hDSWxjRndpT21ZOVBqQThQV1l1VkdFbUpqRXlQbVl1VkdFL1hDSkJUVndpT2x3aVVFMWNJaXhjSWlWVFhDSTZaajArYUNobUxtOWlMRElwTEZ3aUpYUmNJam9vS1QwK1hDSmNYSFJjSWl4Y0lpVjFYQ0k2WmowK1ppNU9ZWHg4Tnl4Y0lpVlZYQ0k2WmowK2FDaE5ZWFJvTG1ac2IyOXlLQ2htTGxKaEsxeHVOeTFtTGs1aEtTODNLU3d5S1N4Y0lpVldYQ0k2WmowK2UzWmhjaUJ4UFUxaGRHZ3VabXh2YjNJb0tHWXVVbUVyTnkwb1ppNU9ZU3MyS1NVM0tTODNLVHN5UGowb1ppNU9ZU3N6TnpFdFppNVNZUzB5S1NVM0ppWnhLeXM3YVdZb2NTazFNejA5Y1NZbUtIVTlLR1l1VG1Fck16Y3hMV1l1VW1FcEpUY3NORDA5ZFh4OE16MDlkU1ltV1NobUxsTmhLWHg4S0hFOU1Ta3BPMlZzYzJWN2NUMDFNanQyWVhJZ2RUMG9aaTVPWVNzM0xXWXVVbUV0TVNrbE56c29ORDA5ZFh4OE5UMDlkU1ltV1NobUxsTmhKVFF3TUMweEtTa21KbkVySzMxeVpYUjFjbTRnYUNoeExESXBmU3hjSWlWM1hDSTZaajArWmk1T1lTeGNJaVZYWENJNlpqMCthQ2hOWVhSb0xtWnNiMjl5S0NobUxsSmhLemN0S0dZdVRtRXJOaWtsTnlrdk55a3NNaWtzWENJbGVWd2lPbVk5UGlobUxsTmhLekU1TURBcExuUnZVM1J5YVc1bktDa3VjM1ZpYzNSeWFXNW5LRElwTEZ3aUpWbGNJanBtUFQ1bUxsTmhLekU1TURBc1hDSWxlbHdpT21ZOVBudG1QV1l1YldJN2RtRnlJSEU5TUR3OVpqdG1QVTFoZEdndVlXSnpLR1lwTHpZd08zSmxkSFZ5YmloeFAxd2lLMXdpT2x3aUxWd2lLU3RUZEhKcGJtY29YQ0l3TURBd1hDSXJLR1l2TmpBcU1UQXdLMllsTmpBcEtTNXpiR2xqWlNndE5DbDlMRndpSlZwY0lqcG1QVDVtTG5CaUxGd2lKU1ZjSWpvb0tUMCtYQ0lsWENKOU8yTTlZeTV5WlhCc1lXTmxLQzhsSlM5bkxGeHVYQ0pjWEhnd01GeGNlREF3WENJcE8yWnZjaWg1SUdsdUlIY3BZeTVwYm1Oc2RXUmxjeWg1S1NZbUtHTTlZeTV5WlhCc1lXTmxLRzVsZHlCU1pXZEZlSEFvZVN4Y0ltZGNJaWtzZDF0NVhTaGtLU2twTzJNOVl5NXlaWEJzWVdObEtDOWNYREJjWERBdlp5eGNJaVZjSWlrN2VUMVRZaWhqS1R0cFppaDVMbXhsYm1kMGFENWlLWEpsZEhWeWJpQXdPMVJpS0hrc1lTazdjbVYwZFhKdUlIa3ViR1Z1WjNSb0xURjlVeTVYWVNncE8xeHVkbUZ5SUZaaVBWdFBZU3hRWVN4aVlpeGtZaXhsWWl4cFlpeHFZaXhyWWl4c1lpeHRZaXh1WWl4dllpeHdZaXh4WWl4eVlpeHpZaXg1WWl4NllpeEhZaXhMWWl4TVlpeE5ZaXhPWWl4UVlsMHNXbUk5ZTJJNlpuVnVZM1JwYjI0b1lTeGlMR01wZTJFK1BqNDlNRHNvYm1WM0lGcGhLR0VwS1M1WFlTaGlQajQrTUN4alBqNCtNQ2s3SkdFOVlUdGhZaXNyTzNSb2NtOTNJQ1JoTzMwc1REcG1kVzVqZEdsdmJpaGhLWHRYWWloaFBqNCtNQ3doUVN3eExDRnJZU3d4TXpFd056SXNJVEVwTzFNdVlXSW9LWDBzYWpwbWRXNWpkR2x2YmloaEtYdGhQajQrUFRBN1JEOXdiM04wVFdWemMyRm5aU2g3WTIxa09sd2lZMnhsWVc1MWNGUm9jbVZoWkZ3aUxIUm9jbVZoWkRwaGZTazZVeTVhWVNoVExrMWhXMkZkS1gwc1NEcGpZaXhvT21SaUxGTTZaV0lzUkRwcFlpeEdPbXBpTEZRNmEySXNVVHBzWWl4S09tMWlMRkE2Ym1Jc2JqcHZZaXhGT25CaUxFSTZjV0lzVWpweVlpeERPbk5pTEhBNktDazlQakVzZWpwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OU1EdGhQVDFpUGo0K01EOXpaWFJVYVcxbGIzVjBLQ2dwUFQ1WUtDa3BPa1EvY0c5emRFMWxjM05oWjJVb2UzUmhjbWRsZEZSb2NtVmhaRHBoTEdOdFpEcGNJbU5vWldOclRXRnBiR0p2ZUZ3aWZTazZLR0U5VXk1TllWdGhYU2ttSm1FdWNHOXpkRTFsYzNOaFoyVW9lMk50WkRwY0ltTm9aV05yVFdGcGJHSnZlRndpZlNsOUxGeHVTVHBtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHRpUGo0K1BUQTdkbUl1YkdWdVozUm9QV003WkQxa1BqNCtNRDQrUGpNN1ptOXlLSFpoY2lCblBUQTdaenhqTzJjckt5bDJZbHRuWFQxbFlTZ3BXMlFyWno0K1BqQmRPMkU5TUQ1aFAwVmhXeTFoTFRGZE9sWmlXMkZkTzFNdWFXSTlZanRpUFdFdVlYQndiSGtvYm5Wc2JDeDJZaWs3VXk1cFlqMHdPM0psZEhWeWJpQmlmU3hMT25SaUxHODZablZ1WTNScGIyNG9ZU2w3UWlZbVV5NU5ZVnRoUGo0K01GMHVjbVZtS0NsOUxITTZablZ1WTNScGIyNG9ZU3hpTEdNcGUyRTlZaXN5TURrM01UVXlQajQrTUR3ME1UazBNekExTFNFaFlUOG9ZVDQrUGpBcEt6UXlPVFE1TmpjeU9UWXFZanBPWVU0N1l6NCtQajB3TzJFOWJtVjNJRVJoZEdVb01VVXpLbUVwTzNBb0tWdGpQajQrTWo0K1BqQmRQV0V1WjJWMFZWUkRVMlZqYjI1a2N5Z3BPM0FvS1Z0akt6UStQajR5UGo0K01GMDlZUzVuWlhSVlZFTk5hVzUxZEdWektDazdjQ2dwVzJNck9ENCtQakkrUGo0d1hUMWhMbWRsZEZWVVEwaHZkWEp6S0NrN2NDZ3BXMk1yTVRJK1BqNHlQajQrTUYwOVlTNW5aWFJWVkVORVlYUmxLQ2s3Y0NncFcyTXJNVFkrUGo0eVBqNCtNRjA5WVM1blpYUlZWRU5OYjI1MGFDZ3BPM0FvS1Z0akt6SXdQajQrTWo0K1BqQmRQV0V1WjJWMFZWUkRSblZzYkZsbFlYSW9LUzB4T1RBd08xeHVjQ2dwVzJNck1qUStQajR5UGo0K01GMDlZUzVuWlhSVlZFTkVZWGtvS1R0aFBTaGhMbWRsZEZScGJXVW9LUzFFWVhSbExsVlVReWhoTG1kbGRGVlVRMFoxYkd4WlpXRnlLQ2tzTUN3eExEQXNNQ3d3TERBcEtTODROalJGTlh3d08zQW9LVnRqS3pJNFBqNCtNajQrUGpCZFBXRjlMSFE2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkU5WWlzeU1EazNNVFV5UGo0K01EdzBNVGswTXpBMUxTRWhZVDhvWVQ0K1BqQXBLelF5T1RRNU5qY3lPVFlxWWpwT1lVNDdZejQrUGowd08yRTlibVYzSUVSaGRHVW9NVVV6S21FcE8zQW9LVnRqUGo0K01qNCtQakJkUFdFdVoyVjBVMlZqYjI1a2N5Z3BPM0FvS1Z0akt6UStQajR5UGo0K01GMDlZUzVuWlhSTmFXNTFkR1Z6S0NrN2NDZ3BXMk1yT0Q0K1BqSStQajR3WFQxaExtZGxkRWh2ZFhKektDazdjQ2dwVzJNck1USStQajR5UGo0K01GMDlZUzVuWlhSRVlYUmxLQ2s3Y0NncFcyTXJNVFkrUGo0eVBqNCtNRjA5WVM1blpYUk5iMjUwYUNncE8zQW9LVnRqS3pJd1BqNCtNajQrUGpCZFBXRXVaMlYwUm5Wc2JGbGxZWElvS1MweE9UQXdPM0FvS1Z0akt6STBQajQrTWo0K1BqQmRQV0V1WjJWMFJHRjVLQ2s3WWowb1dTaGhMbWRsZEVaMWJHeFpaV0Z5S0NrcFAzZGlPbmhpS1Z0aExtZGxkRTF2Ym5Sb0tDbGRLMkV1WjJWMFJHRjBaU2dwTFRGOE1EdHdLQ2xiWXlzeU9ENCtQbHh1TWo0K1BqQmRQV0k3Y0NncFcyTXJNelkrUGo0eVBqNCtNRjA5TFNnMk1DcGhMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2twTzJJOUtHNWxkeUJFWVhSbEtHRXVaMlYwUm5Wc2JGbGxZWElvS1N3MkxERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTzNaaGNpQmtQU2h1WlhjZ1JHRjBaU2hoTG1kbGRFWjFiR3haWldGeUtDa3NNQ3d4S1NrdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tUdGhQU2hpSVQxa0ppWmhMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s5UFUxaGRHZ3ViV2x1S0dRc1lpa3BmREE3Y0NncFcyTXJNekkrUGo0eVBqNCtNRjA5WVgwc2RUcG1kVzVqZEdsdmJpaGhLWHRoUGo0K1BUQTdkbUZ5SUdJOWJtVjNJRVJoZEdVb2NDZ3BXMkVyTWpBK1BqNHlQajQrTUYwck1Ua3dNQ3h3S0NsYllTc3hOajQrUGpJK1BqNHdYU3h3S0NsYllTc3hNajQrUGpJK1BqNHdYU3h3S0NsYllTczRQajQrTWo0K1BqQmRMSEFvS1Z0aEt6UStQajR5UGo0K01GMHNjQ2dwVzJFK1BqNHlQajQrTUYwc01Da3NZejF3S0NsYllTc3pNajQrUGpJK1BqNHdYU3hrUFdJdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTeG5QU2h1WlhjZ1JHRjBaU2hpTG1kbGRFWjFiR3haWldGeUtDa3NOaXd4S1NrdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTeG9QU2h1WlhjZ1JHRjBaU2hpTG1kbGRFWjFiR3haWldGeUtDa3NYRzR3TERFcEtTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BMR3M5VFdGMGFDNXRhVzRvYUN4bktUc3dQbU0vY0NncFcyRXJNekkrUGo0eVBqNCtNRjA5VG5WdFltVnlLR2NoUFdnbUptczlQV1FwT2pBOFl5RTlLR3M5UFdRcEppWW9aejFOWVhSb0xtMWhlQ2hvTEdjcExHSXVjMlYwVkdsdFpTaGlMbWRsZEZScGJXVW9LU3MyUlRRcUtDZ3dQR00vYXpwbktTMWtLU2twTzNBb0tWdGhLekkwUGo0K01qNCtQakJkUFdJdVoyVjBSR0Y1S0NrN1l6MG9XU2hpTG1kbGRFWjFiR3haWldGeUtDa3BQM2RpT25oaUtWdGlMbWRsZEUxdmJuUm9LQ2xkSzJJdVoyVjBSR0YwWlNncExURjhNRHR3S0NsYllTc3lPRDQrUGpJK1BqNHdYVDFqTzNBb0tWdGhQajQrTWo0K1BqQmRQV0l1WjJWMFUyVmpiMjVrY3lncE8zQW9LVnRoS3pRK1BqNHlQajQrTUYwOVlpNW5aWFJOYVc1MWRHVnpLQ2s3Y0NncFcyRXJPRDQrUGpJK1BqNHdYVDFpTG1kbGRFaHZkWEp6S0NrN2NDZ3BXMkVyTVRJK1BqNHlQajQrTUYwOVlpNW5aWFJFWVhSbEtDazdjQ2dwVzJFck1UWStQajR5UGo0K01GMDlZaTVuWlhSTmIyNTBhQ2dwTzNBb0tWdGhLekl3UGo0K01qNCtQakJkUFdJdVoyVjBXV1ZoY2lncE8yRTlZaTVuWlhSVWFXMWxLQ2s3YVhOT1lVNG9ZU2svS0hBb0tWdFlZaWdwUGo0K01qNCtQakJkUFRZeExHRTlMVEVwT21FdlBURkZNenRjYm5KbGRIVnliaUJaWWlnb1VEMWhMREU4UFN0TllYUm9MbUZpY3loUUtUOHdQRkEvSzAxaGRHZ3VabXh2YjNJb1VDODBNamswT1RZM01qazJLVDQrUGpBNmZuNHJUV0YwYUM1alpXbHNLQ2hRTFNzb2ZuNVFQajQrTUNrcEx6UXlPVFE1TmpjeU9UWXBQajQrTURvd0tTa3NZVDQrUGpCOUxIRTZlV0lzY2pwNllpeDVPbVoxYm1OMGFXOXVLR0VzWWl4aktYdG1kVzVqZEdsdmJpQmtLSGNwZTNKbGRIVnliaWgzUFhjdWRHOVVhVzFsVTNSeWFXNW5LQ2t1YldGMFkyZ29MMXhjS0NoYlFTMWFZUzE2SUYwcktWeGNLU1F2S1NrL2Qxc3hYVHBjSWtkTlZGd2lmV0UrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzNaaGNpQm5QU2h1WlhjZ1JHRjBaU2t1WjJWMFJuVnNiRmxsWVhJb0tTeG9QVzVsZHlCRVlYUmxLR2NzTUN3eEtTeHJQVzVsZHlCRVlYUmxLR2NzTml3eEtUdG5QV2d1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1R0MllYSWdkRDFyTG1kbGRGUnBiV1Y2YjI1bFQyWm1jMlYwS0Nrc1F6MU5ZWFJvTG0xaGVDaG5MSFFwTzNJb0tWdGhQajQrTWo0K1BqQmRQVFl3S2tNN2NDZ3BXMkkrUGo0eVBqNCtNRjA5VG5WdFltVnlLR2NoUFhRcE8yRTlaQ2hvS1R0aVBXUW9heWs3WVQxQ1lpaGhLVHRpUFVKaUtHSXBPM1E4Wno4b2NpZ3BXMk0rUGo0eVBqNCtNRjA5WVN4eUtDbGJZeXMwUGo0K01qNCtQakJkUFdJcE9seHVLSElvS1Z0alBqNCtNajQrUGpCZFBXSXNjaWdwVzJNck5ENCtQakkrUGo0d1hUMWhLWDBzWXpvb0tUMCtlM0poS0Z3aVhDSXBmU3hQT21aMWJtTjBhVzl1S0dFc1lpeGpLWHRoUGo0K1BUQTdZajQrUGowd08yTStQajQ5TUR0RFlpNXNaVzVuZEdnOU1EdG1iM0lvZG1GeUlHUTdaRDF1S0NsYllpc3JQajQrTUYwN0tYdDJZWElnWnoweE1EVWhQV1E3WnlZOU1URXlJVDFrTzJNclBXY21KbU1sT0Q4ME9qQTdRMkl1Y0hWemFDZ3hNVEk5UFdRL2NpZ3BXMk0rUGo0eVBqNCtNRjA2TVRBMVBUMWtQM0FvS1Z0alBqNCtNajQrUGpCZE9tVmhLQ2xiWXo0K1BqTStQajR3WFNrN1l5czlaejg0T2pSOWNtVjBkWEp1SUVWaFcyRmRMbUZ3Y0d4NUtHNTFiR3dzUTJJcGZTeHJPaWdwUFQ1N2ZTeHBPaWdwUFQ1RVlYUmxMbTV2ZHlncExGVTZLQ2s5UG50VUt6MHhPM1JvY205M1hDSjFibmRwYm1SY0lqdDlMRUU2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnTkRJNU5Ea3dNVGMyTUgwc1pUb29LVDArY0dWeVptOXliV0Z1WTJVdWRHbHRaVTl5YVdkcGJpdHdaWEptYjNKdFlXNWpaUzV1YjNjb0tTeG1PaWdwUFQ1Q1AzSmxjWFZwY21Vb1hDSnZjMXdpS1M1amNIVnpLQ2t1YkdWdVozUm9PbTVoZG1sbllYUnZjaTVvWVhKa2QyRnlaVU52Ym1OMWNuSmxibU41TEhnNlpuVnVZM1JwYjI0b1lTbDdZVDQrUGowd08zWmhjaUJpUFZ4dWJpZ3BMbXhsYm1kMGFEdHBaaWhoUEQxaWZIdzBNamswT1RBeE56WXdQR0VwY21WMGRYSnVJVEU3Wm05eUtIWmhjaUJqUFRFN05ENDlZenRqS2oweUtYdDJZWElnWkQxaUtpZ3hLeTR5TDJNcE8yUTlUV0YwYUM1dGFXNG9aQ3hoS3pFd01EWTJNekk1TmlrN2RtRnlJR2M5VFdGMGFEdGtQVTFoZEdndWJXRjRLR0VzWkNrN1lUcDdaejBvWnk1dGFXNHVZMkZzYkNobkxEUXlPVFE1TURFM05qQXNaQ3NvTmpVMU16WXRaQ1UyTlRVek5pa2xOalUxTXpZcExXVXVZblZtWm1WeUxtSjVkR1ZNWlc1bmRHZ3JOalUxTXpVcEx6WTFOVE0yTzNSeWVYdGxMbWR5YjNjb1p5azdiU2dwTzNaaGNpQm9QVEU3WW5KbFlXc2dZWDFqWVhSamFDaHJLWHQ5YUQxMmIybGtJREI5YVdZb2FDbHlaWFIxY200aE1IMXlaWFIxY200aE1YMHNUVHBIWWl4T09rdGlMRWM2VVdFc1p6cE1ZaXh0T2sxaUxIWTZUbUlzYkRwUVlpeGhPbVY4ZkhZdWQyRnpiVTFsYlc5eWVTeDNPbFZpTEdRNlpuVnVZM1JwYjI0b1lTeGlMR01zWkNsN2NtVjBkWEp1SUZWaUtHRStQajR3TEdJK1BqNHdMR00rUGo0d0xHUStQajR3S1gxOUxGbzlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJoS0dNc1pDbDdXajFqTG1WNGNHOXlkSE03V2owa1lpZ3BPMU11WW1JdWNIVnphQ2hhTG5waEtUdFlZVDFhTGtGaE8zWmhMblZ1YzJocFpuUW9XaTVXS1R0Y2JuTmhQV1E3ZVdFb0tUdHlaWFIxY200Z1duMTJZWElnWWoxN1lUcGFZbjA3VFNzck8ybG1LSFl1YVc1emRHRnVkR2xoZEdWWFlYTnRLWFJ5ZVh0eVpYUjFjbTRnZGk1cGJuTjBZVzUwYVdGMFpWZGhjMjBvWWl4aEtYMWpZWFJqYUNoaktYdEtLR0JOYjJSMWJHVXVhVzV6ZEdGdWRHbGhkR1ZYWVhOdElHTmhiR3hpWVdOcklHWmhhV3hsWkNCM2FYUm9JR1Z5Y205eU9pQWtlMk45WUNrc2VDaGpLWDFFWVNoaUxHWjFibU4wYVc5dUtHTXBlMkVvWXk1cGJuTjBZVzVqWlN4akxtMXZaSFZzWlNsOUtTNWpZWFJqYUNoNEtUdHlaWFIxY201N2ZYMG9LVHQyTGw5UGNuUkpibWwwUFNoaExHSXBQVDRvZGk1ZlQzSjBTVzVwZEQxYUxsY3BLR0VzWWlrN2RpNWZUM0owUjJWMFRHRnpkRVZ5Y205eVBTaGhMR0lwUFQ0b2RpNWZUM0owUjJWMFRHRnpkRVZ5Y205eVBWb3VXQ2tvWVN4aUtUdDJMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN6MG9ZU3hpTEdNc1pDeG5MR2dzYXl4MExFTXNkeWs5UGloMkxsOVBjblJEY21WaGRHVlRaWE56YVc5dVQzQjBhVzl1Y3oxYUxsa3BLR0VzWWl4akxHUXNaeXhvTEdzc2RDeERMSGNwTzF4dWRpNWZUM0owUVhCd1pXNWtSWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSTlLR0VzWWlrOVBpaDJMbDlQY25SQmNIQmxibVJGZUdWamRYUnBiMjVRY205MmFXUmxjajFhTGxvcEtHRXNZaWs3ZGk1ZlQzSjBRV1JrUm5KbFpVUnBiV1Z1YzJsdmJrOTJaWEp5YVdSbFBTaGhMR0lzWXlrOVBpaDJMbDlQY25SQlpHUkdjbVZsUkdsdFpXNXphVzl1VDNabGNuSnBaR1U5V2k1ZktTaGhMR0lzWXlrN2RpNWZUM0owUVdSa1UyVnpjMmx2YmtOdmJtWnBaMFZ1ZEhKNVBTaGhMR0lzWXlrOVBpaDJMbDlQY25SQlpHUlRaWE56YVc5dVEyOXVabWxuUlc1MGNuazlXaTRrS1NoaExHSXNZeWs3ZGk1ZlQzSjBVbVZzWldGelpWTmxjM05wYjI1UGNIUnBiMjV6UFdFOVBpaDJMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiazl3ZEdsdmJuTTlXaTVoWVNrb1lTazdkaTVmVDNKMFEzSmxZWFJsVTJWemMybHZiajBvWVN4aUxHTXBQVDRvZGk1ZlQzSjBRM0psWVhSbFUyVnpjMmx2YmoxYUxtSmhLU2hoTEdJc1l5azdkaTVmVDNKMFVtVnNaV0Z6WlZObGMzTnBiMjQ5WVQwK0tIWXVYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVQVm91WTJFcEtHRXBPM1l1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlLR0VzWWl4aktUMCtLSFl1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlXaTVrWVNrb1lTeGlMR01wTzF4dWRpNWZUM0owUjJWMFNXNXdkWFJPWVcxbFBTaGhMR0lwUFQ0b2RpNWZUM0owUjJWMFNXNXdkWFJPWVcxbFBWb3VaV0VwS0dFc1lpazdkaTVmVDNKMFIyVjBUM1YwY0hWMFRtRnRaVDBvWVN4aUtUMCtLSFl1WDA5eWRFZGxkRTkxZEhCMWRFNWhiV1U5V2k1bVlTa29ZU3hpS1R0MkxsOVBjblJHY21WbFBXRTlQaWgyTGw5UGNuUkdjbVZsUFZvdVoyRXBLR0VwTzNZdVgwOXlkRU55WldGMFpWUmxibk52Y2owb1lTeGlMR01zWkN4bkxHZ3BQVDRvZGk1ZlQzSjBRM0psWVhSbFZHVnVjMjl5UFZvdWFHRXBLR0VzWWl4akxHUXNaeXhvS1R0MkxsOVBjblJIWlhSVVpXNXpiM0pFWVhSaFBTaGhMR0lzWXl4a0xHY3BQVDRvZGk1ZlQzSjBSMlYwVkdWdWMyOXlSR0YwWVQxYUxtbGhLU2hoTEdJc1l5eGtMR2NwTzNZdVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJOVlUMCtLSFl1WDA5eWRGSmxiR1ZoYzJWVVpXNXpiM0k5V2k1cVlTa29ZU2s3ZGk1ZlQzSjBRM0psWVhSbFVuVnVUM0IwYVc5dWN6MG9ZU3hpTEdNc1pDazlQaWgyTGw5UGNuUkRjbVZoZEdWU2RXNVBjSFJwYjI1elBWb3VhMkVwS0dFc1lpeGpMR1FwTzNZdVgwOXlkRUZrWkZKMWJrTnZibVpwWjBWdWRISjVQU2hoTEdJc1l5azlQaWgyTGw5UGNuUkJaR1JTZFc1RGIyNW1hV2RGYm5SeWVUMWFMbXhoS1NoaExHSXNZeWs3WEc1MkxsOVBjblJTWld4bFlYTmxVblZ1VDNCMGFXOXVjejFoUFQ0b2RpNWZUM0owVW1Wc1pXRnpaVkoxYms5d2RHbHZibk05V2k1dFlTa29ZU2s3ZGk1ZlQzSjBRM0psWVhSbFFtbHVaR2x1WnoxaFBUNG9kaTVmVDNKMFEzSmxZWFJsUW1sdVpHbHVaejFhTG01aEtTaGhLVHQyTGw5UGNuUkNhVzVrU1c1d2RYUTlLR0VzWWl4aktUMCtLSFl1WDA5eWRFSnBibVJKYm5CMWREMWFMbTloS1NoaExHSXNZeWs3ZGk1ZlQzSjBRbWx1WkU5MWRIQjFkRDBvWVN4aUxHTXNaQ2s5UGloMkxsOVBjblJDYVc1a1QzVjBjSFYwUFZvdWNHRXBLR0VzWWl4akxHUXBPM1l1WDA5eWRFTnNaV0Z5UW05MWJtUlBkWFJ3ZFhSelBXRTlQaWgyTGw5UGNuUkRiR1ZoY2tKdmRXNWtUM1YwY0hWMGN6MWFMbkZoS1NoaEtUdDJMbDlQY25SU1pXeGxZWE5sUW1sdVpHbHVaejFoUFQ0b2RpNWZUM0owVW1Wc1pXRnpaVUpwYm1ScGJtYzlXaTV5WVNrb1lTazdkaTVmVDNKMFVuVnVWMmwwYUVKcGJtUnBibWM5S0dFc1lpeGpMR1FzWnlrOVBpaDJMbDlQY25SU2RXNVhhWFJvUW1sdVpHbHVaejFhTG5OaEtTaGhMR0lzWXl4a0xHY3BPM1l1WDA5eWRGSjFiajBvWVN4aUxHTXNaQ3huTEdnc2F5eDBLVDArS0hZdVgwOXlkRkoxYmoxYUxuUmhLU2hoTEdJc1l5eGtMR2NzYUN4ckxIUXBPMXh1ZGk1ZlQzSjBSVzVrVUhKdlptbHNhVzVuUFdFOVBpaDJMbDlQY25SRmJtUlFjbTltYVd4cGJtYzlXaTUxWVNrb1lTazdkbUZ5SUZoaVBTZ3BQVDRvV0dJOVdpNTJZU2tvS1N4WFBYWXVYM0IwYUhKbFlXUmZjMlZzWmowb0tUMCtLRmM5ZGk1ZmNIUm9jbVZoWkY5elpXeG1QVm91ZDJFcEtDa3NRV0k5ZGk1ZmJXRnNiRzlqUFdFOVBpaEJZajEyTGw5dFlXeHNiMk05V2k1NFlTa29ZU2s3ZGk1ZlpuSmxaVDFoUFQ0b2RpNWZabkpsWlQxYUxubGhLU2hoS1R0MkxsOWZaVzF6WTNKcGNIUmxibDkwYkhOZmFXNXBkRDBvS1QwK0tIWXVYMTlsYlhOamNtbHdkR1Z1WDNSc2MxOXBibWwwUFZvdWVtRXBLQ2s3ZG1GeUlGZGlQWFl1WDE5bGJYTmpjbWx3ZEdWdVgzUm9jbVZoWkY5cGJtbDBQU2hoTEdJc1l5eGtMR2NzYUNrOVBpaFhZajEyTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZmFXNXBkRDFhTGtKaEtTaGhMR0lzWXl4a0xHY3NhQ2s3ZGk1ZlgyVnRjMk55YVhCMFpXNWZkR2h5WldGa1gyTnlZWE5vWldROUtDazlQaWgyTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlkzSmhjMmhsWkQxYUxrTmhLU2dwTzF4dWRtRnlJRTVoUFNoaExHSXNZeXhrS1QwK0tFNWhQVm91UkdFcEtHRXNZaXhqTEdRcExGUmhQV0U5UGloVVlUMWFMa1ZoS1NoaEtTeFpZVDEyTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlpYaHBkRDFoUFQ0b1dXRTlkaTVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDJWNGFYUTlXaTVHWVNrb1lTa3NkV0k5S0NrOVBpaDFZajFhTGtkaEtTZ3BMRmxpUFdFOVBpaFpZajFhTGtoaEtTaGhLU3hXWVQwb1lTeGlLVDArS0ZaaFBWb3VTV0VwS0dFc1lpa3NTMkU5S0NrOVBpaExZVDFhTGtwaEtTZ3BMRlU5WVQwK0tGVTlXaTVMWVNrb1lTa3NUV0U5WVQwK0tFMWhQVm91VEdFcEtHRXBPMloxYm1OMGFXOXVJQ1JpS0NsN2RtRnlJR0U5V2p0aFBVOWlhbVZqZEM1aGMzTnBaMjRvZTMwc1lTazdkbUZ5SUdJOVpEMCtLQ2s5UG1Rb0tUNCtQakFzWXoxa1BUNW5QVDVrS0djcFBqNCtNRHRoTG5aaFBXSW9ZUzUyWVNrN1lTNTNZVDFpS0dFdWQyRXBPMkV1ZUdFOVl5aGhMbmhoS1R0aExtVnRjMk55YVhCMFpXNWZiV0ZwYmw5eWRXNTBhVzFsWDNSb2NtVmhaRjlwWkQxaUtHRXVaVzF6WTNKcGNIUmxibDl0WVdsdVgzSjFiblJwYldWZmRHaHlaV0ZrWDJsa0tUdGhMa3BoUFdJb1lTNUtZU2s3WVM1TVlUMWpLR0V1VEdFcE8zSmxkSFZ5YmlCaGZYWXVkMkZ6YlUxbGJXOXllVDFsTzF4dWRpNXpkR0ZqYTBGc2JHOWpQVTFoTzNZdWMzUmhZMnRUWVhabFBVdGhPM1l1YzNSaFkydFNaWE4wYjNKbFBWVTdkaTVyWldWd1VuVnVkR2x0WlVGc2FYWmxQU2dwUFQ0d1BGUTdkaTVWVkVZNFZHOVRkSEpwYm1jOVVUdDJMbk4wY21sdVoxUnZWVlJHT0Qxb1lqdDJMbXhsYm1kMGFFSjVkR1Z6VlZSR09EMW1ZanQyTGtWNGFYUlRkR0YwZFhNOVVqdDJMbEJVYUhKbFlXUTlVenQyWVhJZ1lXTTdUajFtZFc1amRHbHZiaUJpWXlncGUyRmpmSHhqWXlncE8yRmpmSHdvVGoxaVl5bDlPMloxYm1OMGFXOXVJR05qS0NsN2FXWW9JU2d3UEUwcEtXbG1LRVFwYUdFb2Rpa3NSSHg4VldFb2RtRXBMSE4wWVhKMFYyOXlhMlZ5S0hZcE8yVnNjMlY3YVdZb2RpNXdjbVZTZFc0cFptOXlLRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhZdWNISmxVblZ1SmlZb2RpNXdjbVZTZFc0OVczWXVjSEpsVW5WdVhTazdkaTV3Y21WU2RXNHViR1Z1WjNSb095bDFZUzUxYm5Ob2FXWjBLSFl1Y0hKbFVuVnVMbk5vYVdaMEtDa3BPMVZoS0hWaEtUc3dQRTE4ZkdGamZId29ZV005SVRBc2RpNWpZV3hzWldSU2RXNDlJVEFzUzN4OEtFUjhmRlZoS0haaEtTeG9ZU2gyS1N4RWZIeFZZU2gzWVNrcEtYMTlZMk1vS1R0Y2JseHVYRzRnSUhKbGRIVnliaUJ0YjJSMWJHVkJjbWN1Y21WaFpIbGNibjFjYmlrN1hHNTlLU2dwTzF4dU8xeHVhV1lnS0hSNWNHVnZaaUJsZUhCdmNuUnpJRDA5UFNBbmIySnFaV04wSnlBbUppQjBlWEJsYjJZZ2JXOWtkV3hsSUQwOVBTQW5iMkpxWldOMEp5bGNiaUFnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J2Y25SWFlYTnRWR2h5WldGa1pXUTdYRzVsYkhObElHbG1JQ2gwZVhCbGIyWWdaR1ZtYVc1bElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlZzbllXMWtKMTBwWEc0Z0lHUmxabWx1WlNoYlhTd2dLQ2tnUFQ0Z2IzSjBWMkZ6YlZSb2NtVmhaR1ZrS1R0Y2JpSXNJQ0pjSW5WelpTQnpkSEpwWTNSY0lqdDJZWElnVFc5a2RXeGxQWHQ5TzNaaGNpQkZUbFpKVWs5T1RVVk9WRjlKVTE5T1QwUkZQWFI1Y0dWdlppQndjbTlqWlhOelBUMWNJbTlpYW1WamRGd2lKaVowZVhCbGIyWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN6MDlYQ0p2WW1wbFkzUmNJaVltZEhsd1pXOW1JSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTXVibTlrWlQwOVhDSnpkSEpwYm1kY0lqdHBaaWhGVGxaSlVrOU9UVVZPVkY5SlUxOU9UMFJGS1h0MllYSWdibTlrWlZkdmNtdGxjbFJvY21WaFpITTljbVZ4ZFdseVpTaGNJbmR2Y210bGNsOTBhSEpsWVdSelhDSXBPM1poY2lCd1lYSmxiblJRYjNKMFBXNXZaR1ZYYjNKclpYSlVhSEpsWVdSekxuQmhjbVZ1ZEZCdmNuUTdjR0Z5Wlc1MFVHOXlkQzV2YmloY0ltMWxjM05oWjJWY0lpeGtZWFJoUFQ1dmJtMWxjM05oWjJVb2UyUmhkR0U2WkdGMFlYMHBLVHQyWVhJZ1puTTljbVZ4ZFdseVpTaGNJbVp6WENJcE8zWmhjaUIyYlQxeVpYRjFhWEpsS0Z3aWRtMWNJaWs3VDJKcVpXTjBMbUZ6YzJsbmJpaG5iRzlpWVd3c2UzTmxiR1k2WjJ4dlltRnNMSEpsY1hWcGNtVTZjbVZ4ZFdseVpTeE5iMlIxYkdVNlRXOWtkV3hsTEd4dlkyRjBhVzl1T250b2NtVm1PbDlmWm1sc1pXNWhiV1Y5TEZkdmNtdGxjanB1YjJSbFYyOXlhMlZ5VkdoeVpXRmtjeTVYYjNKclpYSXNhVzF3YjNKMFUyTnlhWEIwY3pwbVBUNTJiUzV5ZFc1SmJsUm9hWE5EYjI1MFpYaDBLR1p6TG5KbFlXUkdhV3hsVTNsdVl5aG1MRndpZFhSbU9Gd2lLU3g3Wm1sc1pXNWhiV1U2Wm4wcExIQnZjM1JOWlhOellXZGxPbTF6WnowK2NHRnlaVzUwVUc5eWRDNXdiM04wVFdWemMyRm5aU2h0YzJjcExIQmxjbVp2Y20xaGJtTmxPbWRzYjJKaGJDNXdaWEptYjNKdFlXNWpaWHg4ZTI1dmR6cEVZWFJsTG01dmQzMTlLWDEyWVhJZ2FXNXBkR2xoYkdsNlpXUktVejFtWVd4elpUdG1kVzVqZEdsdmJpQjBhSEpsWVdSUWNtbHVkRVZ5Y2lncGUzWmhjaUIwWlhoMFBVRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5a3VhbTlwYmloY0lpQmNJaWs3YVdZb1JVNVdTVkpQVGsxRlRsUmZTVk5mVGs5RVJTbDdabk11ZDNKcGRHVlRlVzVqS0RJc2RHVjRkQ3RjSWx4Y2Jsd2lLVHR5WlhSMWNtNTlZMjl1YzI5c1pTNWxjbkp2Y2loMFpYaDBLWDFtZFc1amRHbHZiaUIwYUhKbFlXUkJiR1Z5ZENncGUzWmhjaUIwWlhoMFBVRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5a3VhbTlwYmloY0lpQmNJaWs3Y0c5emRFMWxjM05oWjJVb2UyTnRaRHBjSW1Gc1pYSjBYQ0lzZEdWNGREcDBaWGgwTEhSb2NtVmhaRWxrT2sxdlpIVnNaVnRjSWw5d2RHaHlaV0ZrWDNObGJHWmNJbDBvS1gwcGZYWmhjaUJsY25JOWRHaHlaV0ZrVUhKcGJuUkZjbkk3YzJWc1ppNWhiR1Z5ZEQxMGFISmxZV1JCYkdWeWREdE5iMlIxYkdWYlhDSnBibk4wWVc1MGFXRjBaVmRoYzIxY0lsMDlLR2x1Wm04c2NtVmpaV2wyWlVsdWMzUmhibU5sS1QwK2UzWmhjaUJ0YjJSMWJHVTlUVzlrZFd4bFcxd2lkMkZ6YlUxdlpIVnNaVndpWFR0TmIyUjFiR1ZiWENKM1lYTnRUVzlrZFd4bFhDSmRQVzUxYkd3N2RtRnlJR2x1YzNSaGJtTmxQVzVsZHlCWFpXSkJjM05sYldKc2VTNUpibk4wWVc1alpTaHRiMlIxYkdVc2FXNW1ieWs3Y21WMGRYSnVJSEpsWTJWcGRtVkpibk4wWVc1alpTaHBibk4wWVc1alpTbDlPM05sYkdZdWIyNTFibWhoYm1Sc1pXUnlaV3BsWTNScGIyNDlaVDArZTNSb2NtOTNJR1V1Y21WaGMyOXVmSHhsZlR0bWRXNWpkR2x2YmlCb1lXNWtiR1ZOWlhOellXZGxLR1VwZTNSeWVYdHBaaWhsTG1SaGRHRXVZMjFrUFQwOVhDSnNiMkZrWENJcGUyeGxkQ0J0WlhOellXZGxVWFZsZFdVOVcxMDdjMlZzWmk1dmJtMWxjM05oWjJVOVpUMCtiV1Z6YzJGblpWRjFaWFZsTG5CMWMyZ29aU2s3YzJWc1ppNXpkR0Z5ZEZkdmNtdGxjajFwYm5OMFlXNWpaVDArZTAxdlpIVnNaVDFwYm5OMFlXNWpaVHR3YjNOMFRXVnpjMkZuWlNoN1hDSmpiV1JjSWpwY0lteHZZV1JsWkZ3aWZTazdabTl5S0d4bGRDQnRjMmNnYjJZZ2JXVnpjMkZuWlZGMVpYVmxLWHRvWVc1a2JHVk5aWE56WVdkbEtHMXpaeWw5YzJWc1ppNXZibTFsYzNOaFoyVTlhR0Z1Wkd4bFRXVnpjMkZuWlgwN1RXOWtkV3hsVzF3aWQyRnpiVTF2WkhWc1pWd2lYVDFsTG1SaGRHRXVkMkZ6YlUxdlpIVnNaVHRtYjNJb1kyOXVjM1FnYUdGdVpHeGxjaUJ2WmlCbExtUmhkR0V1YUdGdVpHeGxjbk1wZTAxdlpIVnNaVnRvWVc1a2JHVnlYVDBvTGk0dVlYSm5jeWs5UG50d2IzTjBUV1Z6YzJGblpTaDdZMjFrT2x3aVkyRnNiRWhoYm1Sc1pYSmNJaXhvWVc1a2JHVnlPbWhoYm1Sc1pYSXNZWEpuY3pwaGNtZHpmU2w5ZlUxdlpIVnNaVnRjSW5kaGMyMU5aVzF2Y25sY0lsMDlaUzVrWVhSaExuZGhjMjFOWlcxdmNuazdUVzlrZFd4bFcxd2lZblZtWm1WeVhDSmRQVTF2WkhWc1pWdGNJbmRoYzIxTlpXMXZjbmxjSWwwdVluVm1abVZ5TzAxdlpIVnNaVnRjSWtWT1ZrbFNUMDVOUlU1VVgwbFRYMUJVU0ZKRlFVUmNJbDA5ZEhKMVpUdHBaaWgwZVhCbGIyWWdaUzVrWVhSaExuVnliRTl5UW14dllqMDlYQ0p6ZEhKcGJtZGNJaWw3YVcxd2IzSjBVMk55YVhCMGN5aGxMbVJoZEdFdWRYSnNUM0pDYkc5aUtYMWxiSE5sZTNaaGNpQnZZbXBsWTNSVmNtdzlWVkpNTG1OeVpXRjBaVTlpYW1WamRGVlNUQ2hsTG1SaGRHRXVkWEpzVDNKQ2JHOWlLVHRwYlhCdmNuUlRZM0pwY0hSektHOWlhbVZqZEZWeWJDazdWVkpNTG5KbGRtOXJaVTlpYW1WamRGVlNUQ2h2WW1wbFkzUlZjbXdwZlc5eWRGZGhjMjFVYUhKbFlXUmxaQ2hOYjJSMWJHVXBmV1ZzYzJVZ2FXWW9aUzVrWVhSaExtTnRaRDA5UFZ3aWNuVnVYQ0lwZTAxdlpIVnNaVnRjSWw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZmFXNXBkRndpWFNobExtUmhkR0V1Y0hSb2NtVmhaRjl3ZEhJc0x5cHBjMTl0WVdsdVBTb3ZNQ3d2S21selgzSjFiblJwYldVOUtpOHdMQzhxWTJGdVgySnNiMk5yUFNvdk1TazdUVzlrZFd4bFcxd2lYMTlsYlhOamNtbHdkR1Z1WDNSb2NtVmhaRjl0WVdsc1ltOTRYMkYzWVdsMFhDSmRLR1V1WkdGMFlTNXdkR2h5WldGa1gzQjBjaWs3VFc5a2RXeGxXMXdpWlhOMFlXSnNhWE5vVTNSaFkydFRjR0ZqWlZ3aVhTZ3BPMDF2WkhWc1pWdGNJbEJVYUhKbFlXUmNJbDB1Y21WalpXbDJaVTlpYW1WamRGUnlZVzV6Wm1WeUtHVXVaR0YwWVNrN1RXOWtkV3hsVzF3aVVGUm9jbVZoWkZ3aVhTNTBhSEpsWVdSSmJtbDBWRXhUS0NrN2FXWW9JV2x1YVhScFlXeHBlbVZrU2xNcGUybHVhWFJwWVd4cGVtVmtTbE05ZEhKMVpYMTBjbmw3VFc5a2RXeGxXMXdpYVc1MmIydGxSVzUwY25sUWIybHVkRndpWFNobExtUmhkR0V1YzNSaGNuUmZjbTkxZEdsdVpTeGxMbVJoZEdFdVlYSm5LWDFqWVhSamFDaGxlQ2w3YVdZb1pYZ2hQVndpZFc1M2FXNWtYQ0lwZTNSb2NtOTNJR1Y0ZlgxOVpXeHpaU0JwWmlobExtUmhkR0V1WTIxa1BUMDlYQ0pqWVc1alpXeGNJaWw3YVdZb1RXOWtkV3hsVzF3aVgzQjBhSEpsWVdSZmMyVnNabHdpWFNncEtYdE5iMlIxYkdWYlhDSmZYMlZ0YzJOeWFYQjBaVzVmZEdoeVpXRmtYMlY0YVhSY0lsMG9MVEVwZlgxbGJITmxJR2xtS0dVdVpHRjBZUzUwWVhKblpYUTlQVDFjSW5ObGRHbHRiV1ZrYVdGMFpWd2lLWHQ5Wld4elpTQnBaaWhsTG1SaGRHRXVZMjFrUFQwOVhDSmphR1ZqYTAxaGFXeGliM2hjSWlsN2FXWW9hVzVwZEdsaGJHbDZaV1JLVXlsN1RXOWtkV3hsVzF3aVkyaGxZMnROWVdsc1ltOTRYQ0pkS0NsOWZXVnNjMlVnYVdZb1pTNWtZWFJoTG1OdFpDbDdaWEp5S0dCM2IzSnJaWEl1YW5NZ2NtVmpaV2wyWldRZ2RXNXJibTkzYmlCamIyMXRZVzVrSUNSN1pTNWtZWFJoTG1OdFpIMWdLVHRsY25Jb1pTNWtZWFJoS1gxOVkyRjBZMmdvWlhncGUwMXZaSFZzWlZ0Y0lsOWZaVzF6WTNKcGNIUmxibDkwYUhKbFlXUmZZM0poYzJobFpGd2lYVDh1S0NrN2RHaHliM2NnWlhoOWZYTmxiR1l1YjI1dFpYTnpZV2RsUFdoaGJtUnNaVTFsYzNOaFoyVTdYRzRpTENBaVpYaHdiM0owSUdOdmJuTjBJR3B2YVc0Z1BTQjFibVJsWm1sdVpXUTdJaXdnSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnVFdsamNtOXpiMlowSUVOdmNuQnZjbUYwYVc5dUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFMUpWQ0JNYVdObGJuTmxMbHh1WEc1cGJYQnZjblFnS2lCaGN5QndZWFJvSUdaeWIyMGdKMjV2WkdVNmNHRjBhQ2M3WEc1cGJYQnZjblFnZTBWdWRuMGdabkp2YlNBbmIyNXVlSEoxYm5ScGJXVXRZMjl0Ylc5dUp6dGNibHh1YVcxd2IzSjBJSHRQY25SWFlYTnRUVzlrZFd4bGZTQm1jbTl0SUNjdUwySnBibVJwYm1jdmIzSjBMWGRoYzIwbk8xeHVhVzF3YjNKMElIdFBjblJYWVhOdFZHaHlaV0ZrWldSTmIyUjFiR1Y5SUdaeWIyMGdKeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQ2M3WEc1Y2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTF5WlhGMWFYSmxMV2x0Y0c5eWRITWdLaTljYm14bGRDQnZjblJYWVhOdFJtRmpkRzl5ZVRvZ1JXMXpZM0pwY0hSbGJrMXZaSFZzWlVaaFkzUnZjbms4VDNKMFYyRnpiVTF2WkhWc1pUNDdYRzVjYm1sbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMVJTUVVsT1NVNUhLU0I3WEc0Z0lHOXlkRmRoYzIxR1lXTjBiM0o1SUQwZ2NtVnhkV2x5WlNnbkxpOWlhVzVrYVc1bkwyOXlkQzEwY21GcGJtbHVaeTEzWVhOdExYTnBiV1F1YW5NbktUdGNibjBnWld4elpTQjdYRzRnSUc5eWRGZGhjMjFHWVdOMGIzSjVJRDFjYmlBZ0lDQWdJRUpWU1V4RVgwUkZSbE11UkVsVFFVSk1SVjlYUlVKSFVGVWdQeUJ5WlhGMWFYSmxLQ2N1TDJKcGJtUnBibWN2YjNKMExYZGhjMjB1YW5NbktTQTZJSEpsY1hWcGNtVW9KeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzF6YVcxa0xtcHpaWEF1YW5NbktUdGNibjFjYmx4dVkyOXVjM1FnYjNKMFYyRnpiVVpoWTNSdmNubFVhSEpsWVdSbFpEb2dSVzF6WTNKcGNIUmxiazF2WkhWc1pVWmhZM1J2Y25rOFQzSjBWMkZ6YlUxdlpIVnNaVDRnUFNBaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEJVMDFmVkVoU1JVRkVJRDljYmlBZ0lDQW9RbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRGUWtkUVZTQS9JSEpsY1hWcGNtVW9KeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzVxY3ljcElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZwY21Vb0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMXphVzFrTFhSb2NtVmhaR1ZrTG1welpYQXVhbk1uS1NrZ09seHVJQ0FnSUc5eWRGZGhjMjFHWVdOMGIzSjVPMXh1THlvZ1pYTnNhVzUwTFdWdVlXSnNaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGNtVnhkV2x5WlMxcGJYQnZjblJ6SUNvdlhHNWNibXhsZENCM1lYTnRPaUJQY25SWFlYTnRUVzlrZFd4bGZIVnVaR1ZtYVc1bFpEdGNibXhsZENCcGJtbDBhV0ZzYVhwbFpDQTlJR1poYkhObE8xeHViR1YwSUdsdWFYUnBZV3hwZW1sdVp5QTlJR1poYkhObE8xeHViR1YwSUdGaWIzSjBaV1FnUFNCbVlXeHpaVHRjYmx4dVkyOXVjM1FnYVhOTmRXeDBhVlJvY21WaFpGTjFjSEJ2Y25SbFpDQTlJQ2h1ZFcxVWFISmxZV1J6T2lCdWRXMWlaWElwT2lCaWIyOXNaV0Z1SUQwK0lIdGNiaUFnTHk4Z1YyVmlRWE56WlcxaWJIa2dkR2h5WldGa2N5QmhjbVVnYzJWMElIUnZJREVnS0hOcGJtZHNaU0IwYUhKbFlXUXBMbHh1SUNCcFppQW9iblZ0VkdoeVpXRmtjeUE5UFQwZ01Ta2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVYRzRnSUM4dklFbG1JQ2RUYUdGeVpXUkJjbkpoZVVKMVptWmxjaWNnYVhNZ2JtOTBJR0YyWVdsc1lXSnNaU3dnVjJWaVFYTnpaVzFpYkhrZ2RHaHlaV0ZrY3lCM2FXeHNJRzV2ZENCM2IzSnJMbHh1SUNCcFppQW9kSGx3Wlc5bUlGTm9ZWEpsWkVGeWNtRjVRblZtWm1WeUlEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MyVnNaaUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnSVhObGJHWXVZM0p2YzNOUGNtbG5hVzVKYzI5c1lYUmxaQ2tnZTF4dUlDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXTnZibk52YkdWY2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FuWlc1MkxuZGhjMjB1Ym5WdFZHaHlaV0ZrY3lCcGN5QnpaWFFnZEc4Z0p5QXJJRzUxYlZSb2NtVmhaSE1nSzF4dUlDQWdJQ0FnSUNBZ0lDY3NJR0oxZENCMGFHbHpJSGRwYkd3Z2JtOTBJSGR2Y21zZ2RXNXNaWE56SUhsdmRTQmxibUZpYkdVZ1kzSnZjM05QY21sbmFXNUpjMjlzWVhSbFpDQnRiMlJsTGlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuVTJWbElHaDBkSEJ6T2k4dmQyVmlMbVJsZGk5amNtOXpjeTF2Y21sbmFXNHRhWE52YkdGMGFXOXVMV2QxYVdSbEx5Qm1iM0lnYlc5eVpTQnBibVp2TGljcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQXZMeUJ2Ym01NGNuVnVkR2x0WlMxM1pXSWdaRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQnRkV3gwYVMxMGFISmxZV1J6SUdsdUlFNXZaR1V1YW5NdVhHNGdJR2xtSUNoMGVYQmxiMllnY0hKdlkyVnpjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnY0hKdlkyVnpjeTUyWlhKemFXOXVjeUFtSmlCd2NtOWpaWE56TG5abGNuTnBiMjV6TG01dlpHVXBJSHRjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0WTI5dWMyOXNaVnh1SUNBZ0lHTnZibk52YkdVdWQyRnliaWhjYmlBZ0lDQWdJQ0FnSjJWdWRpNTNZWE50TG01MWJWUm9jbVZoWkhNZ2FYTWdjMlYwSUhSdklDY2dLeUJ1ZFcxVWFISmxZV1J6SUN0Y2JpQWdJQ0FnSUNBZ0p5d2dhRzkzWlhabGNpd2dZM1Z5Y21WdWRHeDVJRzl1Ym5oeWRXNTBhVzFsTFhkbFlpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElHMTFiSFJwTFhSb2NtVmhaSE1nYVc0Z1RtOWtaUzVxY3k0Z0p5QXJYRzRnSUNBZ0lDQWdJQ2RRYkdWaGMyVWdZMjl1YzJsa1pYSWdkWE5wYm1jZ2IyNXVlSEoxYm5ScGJXVXRibTlrWlNCbWIzSWdjR1Z5Wm05eWJXRnVZMlVnWTNKcGRHbGpZV3dnYzJObGJtRnlhVzl6TGljcE8xeHVJQ0I5WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0F2THlCVVpYTjBJR1p2Y2lCMGNtRnVjMlpsY21GaWFXeHBkSGtnYjJZZ1UwRkNjeUFvWm05eUlHSnliM2R6WlhKekxpQnVaV1ZrWldRZ1ptOXlJRVpwY21WbWIzZ3BYRzRnSUNBZ0x5OGdhSFIwY0hNNkx5OW5jbTkxY0hNdVoyOXZaMnhsTG1OdmJTOW1iM0oxYlM4aklXMXpaeTl0YjNwcGJHeGhMbVJsZGk1d2JHRjBabTl5YlM5SlNHdENXbXhJUlZSd1FTOWtkM05OVG1Ob1YwVlJRVXBjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRTFsYzNOaFoyVkRhR0Z1Ym1Wc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2JtVjNJRTFsYzNOaFoyVkRhR0Z1Ym1Wc0tDa3VjRzl5ZERFdWNHOXpkRTFsYzNOaFoyVW9ibVYzSUZOb1lYSmxaRUZ5Y21GNVFuVm1abVZ5S0RFcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlVaWE4wSUdadmNpQlhaV0pCYzNObGJXSnNlU0IwYUhKbFlXUnpJR05oY0dGaWFXeHBkSGtnS0dadmNpQmliM1JvSUdKeWIzZHpaWEp6SUdGdVpDQk9iMlJsTG1wektWeHVJQ0FnSUM4dklGUm9hWE1nZEhsd1pXUWdZWEp5WVhrZ2FYTWdZU0JYWldKQmMzTmxiV0pzZVNCd2NtOW5jbUZ0SUdOdmJuUmhhVzVwYm1jZ2RHaHlaV0ZrWldRZ2FXNXpkSEoxWTNScGIyNXpMbHh1SUNBZ0lISmxkSFZ5YmlCWFpXSkJjM05sYldKc2VTNTJZV3hwWkdGMFpTaHVaWGNnVldsdWREaEJjbkpoZVNoYlhHNGdJQ0FnSUNBd0xDQTVOeXdnTVRFMUxDQXhNRGtzSURFc0lEQXNJQ0F3TENBZ01Dd2dNU3dnTkN3Z01Td2dJRGsyTENBd0xDQWdJREFzSUNBekxDQXlMQ0F4TENBZ01Dd2dOU3hjYmlBZ0lDQWdJRFFzSURFc0lDQXpMQ0FnSURFc0lDQWdNU3dnTVRBc0lERXhMQ0F4TENBNUxDQXdMQ0EyTlN3Z01Dd2dJREkxTkN3Z01UWXNJRElzSURBc0lESTJMQ0F4TVZ4dUlDQWdJRjBwS1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1ZlR0Y2JseHVZMjl1YzNRZ2FYTlRhVzFrVTNWd2NHOXlkR1ZrSUQwZ0tDazZJR0p2YjJ4bFlXNGdQVDRnZTF4dUlDQjBjbmtnZTF4dUlDQWdJQzh2SUZSbGMzUWdabTl5SUZkbFlrRnpjMlZ0WW14NUlGTkpUVVFnWTJGd1lXSnBiR2wwZVNBb1ptOXlJR0p2ZEdnZ1luSnZkM05sY25NZ1lXNWtJRTV2WkdVdWFuTXBYRzRnSUNBZ0x5OGdWR2hwY3lCMGVYQmxaQ0JoY25KaGVTQnBjeUJoSUZkbFlrRnpjMlZ0WW14NUlIQnliMmR5WVcwZ1kyOXVkR0ZwYm1sdVp5QlRTVTFFSUdsdWMzUnlkV04wYVc5dWN5NWNibHh1SUNBZ0lDOHZJRlJvWlNCaWFXNWhjbmtnWkdGMFlTQnBjeUJuWlc1bGNtRjBaV1FnWm5KdmJTQjBhR1VnWm05c2JHOTNhVzVuSUdOdlpHVWdZbmtnZDJGME1uZGhjMjA2WEc0Z0lDQWdMeTljYmlBZ0lDQXZMeUFvYlc5a2RXeGxYRzRnSUNBZ0x5OGdJQ0FvZEhsd1pTQWtkREFnS0daMWJtTXBLVnh1SUNBZ0lDOHZJQ0FnS0daMWJtTWdKR1l3SUNoMGVYQmxJQ1IwTUNsY2JpQWdJQ0F2THlBZ0lDQWdLR1J5YjNCY2JpQWdJQ0F2THlBZ0lDQWdJQ0FvYVRNeWVEUXVaRzkwWDJreE5uZzRYM05jYmlBZ0lDQXZMeUFnSUNBZ0lDQWdJQ2hwT0hneE5pNXpjR3hoZEZ4dUlDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNBb2FUTXlMbU52Ym5OMElEQXBLVnh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdLSFl4TWpndVkyOXVjM1FnYVRNeWVEUWdNSGd3TURBd01EQXdNQ0F3ZURBd01EQXdNREF3SURCNE1EQXdNREF3TURBZ01IZ3dNREF3TURBd01Da3BLU2twWEc1Y2JpQWdJQ0J5WlhSMWNtNGdWMlZpUVhOelpXMWliSGt1ZG1Gc2FXUmhkR1VvYm1WM0lGVnBiblE0UVhKeVlYa29XMXh1SUNBZ0lDQWdNQ3dnSUNBNU55d2dNVEUxTENBeE1Ea3NJREVzSURBc0lEQXNJREFzSURFc0lEUXNJREVzSURrMkxDQXdMQ0F3TENBekxDQXlMQ0F4TENBd0xDQXhNQ3dnTXpBc0lERXNJQ0FnTWpnc0lDQXdMQ0EyTlN3Z01DeGNiaUFnSUNBZ0lESTFNeXdnTVRVc0lESTFNeXdnTVRJc0lDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBZ01Dd2dNQ3dnTUN3Z01Dd2dNQ3dnTUN3Z01Dd2dJREFzSUNBeU5UTXNJREU0Tml3Z01Td2dNallzSURFeFhHNGdJQ0FnWFNrcE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1OU8xeHVYRzVqYjI1emRDQm5aWFJYWVhOdFJtbHNaVTVoYldVZ1BTQW9kWE5sVTJsdFpEb2dZbTl2YkdWaGJpd2dkWE5sVkdoeVpXRmtjem9nWW05dmJHVmhiaWtnUFQ0Z2UxeHVJQ0JwWmlBb2RYTmxVMmx0WkNrZ2UxeHVJQ0FnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMVJTUVVsT1NVNUhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMjl5ZEMxMGNtRnBibWx1WnkxM1lYTnRMWE5wYldRdWQyRnpiU2M3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMWMyVlVhSEpsWVdSeklEOGdKMjl5ZEMxM1lYTnRMWE5wYldRdGRHaHlaV0ZrWldRdWQyRnpiU2NnT2lBbmIzSjBMWGRoYzIwdGMybHRaQzUzWVhOdEp6dGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2RYTmxWR2h5WldGa2N5QS9JQ2R2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzUzWVhOdEp5QTZJQ2R2Y25RdGQyRnpiUzUzWVhOdEp6dGNiaUFnZlZ4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHbHVhWFJwWVd4cGVtVlhaV0pCYzNObGJXSnNlU0E5SUdGemVXNWpLR1pzWVdkek9pQkZibll1VjJWaVFYTnpaVzFpYkhsR2JHRm5jeWs2SUZCeWIyMXBjMlU4ZG05cFpENGdQVDRnZTF4dUlDQnBaaUFvYVc1cGRHbGhiR2w2WldRcElIdGNiaUFnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2s3WEc0Z0lIMWNiaUFnYVdZZ0tHbHVhWFJwWVd4cGVtbHVaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25iWFZzZEdsd2JHVWdZMkZzYkhNZ2RHOGdYRnduYVc1cGRHbGhiR2w2WlZkbFlrRnpjMlZ0WW14NUtDbGNYQ2NnWkdWMFpXTjBaV1F1SnlrN1hHNGdJSDFjYmlBZ2FXWWdLR0ZpYjNKMFpXUXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozQnlaWFpwYjNWeklHTmhiR3dnZEc4Z1hGd25hVzVwZEdsaGJHbDZaVmRsWWtGemMyVnRZbXg1S0NsY1hDY2dabUZwYkdWa0xpY3BPMXh1SUNCOVhHNWNiaUFnYVc1cGRHbGhiR2w2YVc1bklEMGdkSEoxWlR0Y2JseHVJQ0F2THlCM1lYTnRJR1pzWVdkeklHRnlaU0JoYkhKbFlXUjVJR2x1YVhScFlXeHBlbVZrWEc0Z0lHTnZibk4wSUhScGJXVnZkWFFnUFNCbWJHRm5jeTVwYm1sMFZHbHRaVzkxZENFN1hHNGdJR052Ym5OMElHNTFiVlJvY21WaFpITWdQU0JtYkdGbmN5NXVkVzFVYUhKbFlXUnpJVHRjYmlBZ1kyOXVjM1FnYzJsdFpDQTlJR1pzWVdkekxuTnBiV1FoTzF4dVhHNGdJR052Ym5OMElIVnpaVlJvY21WaFpITWdQU0JwYzAxMWJIUnBWR2h5WldGa1UzVndjRzl5ZEdWa0tHNTFiVlJvY21WaFpITXBPMXh1SUNCamIyNXpkQ0IxYzJWVGFXMWtJRDBnYzJsdFpDQW1KaUJwYzFOcGJXUlRkWEJ3YjNKMFpXUW9LVHRjYmx4dUlDQmpiMjV6ZENCM1lYTnRVR0YwYUhNZ1BTQm1iR0ZuY3k1M1lYTnRVR0YwYUhNN1hHNGdJR052Ym5OMElIZGhjMjFRY21WbWFYaFBkbVZ5Y21sa1pTQTlJSFI1Y0dWdlppQjNZWE50VUdGMGFITWdQVDA5SUNkemRISnBibWNuSUQ4Z2QyRnpiVkJoZEdoeklEb2dkVzVrWldacGJtVmtPMXh1SUNCamIyNXpkQ0IzWVhOdFJtbHNaVTVoYldVZ1BTQm5aWFJYWVhOdFJtbHNaVTVoYldVb2RYTmxVMmx0WkN3Z2RYTmxWR2h5WldGa2N5azdYRzRnSUdOdmJuTjBJSGRoYzIxUVlYUm9UM1psY25KcFpHVWdQU0IwZVhCbGIyWWdkMkZ6YlZCaGRHaHpJRDA5UFNBbmIySnFaV04wSnlBL0lIZGhjMjFRWVhSb2MxdDNZWE50Um1sc1pVNWhiV1ZkSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUd4bGRDQnBjMVJwYldWdmRYUWdQU0JtWVd4elpUdGNibHh1SUNCamIyNXpkQ0IwWVhOcmN6b2dRWEp5WVhrOFVISnZiV2x6WlR4MmIybGtQajRnUFNCYlhUdGNibHh1SUNBdkx5QndjbTl0YVhObElHWnZjaUIwYVcxbGIzVjBYRzRnSUdsbUlDaDBhVzFsYjNWMElENGdNQ2tnZTF4dUlDQWdJSFJoYzJ0ekxuQjFjMmdvYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1VcElEMCtJSHRjYmlBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwYzFScGJXVnZkWFFnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdJQ0I5TENCMGFXMWxiM1YwS1R0Y2JpQWdJQ0I5S1NrN1hHNGdJSDFjYmx4dUlDQXZMeUJ3Y205dGFYTmxJR1p2Y2lCdGIyUjFiR1VnYVc1cGRHbGhiR2w2WVhScGIyNWNiaUFnZEdGemEzTXVjSFZ6YUNodVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1ptRmpkRzl5ZVNBOUlIVnpaVlJvY21WaFpITWdQeUJ2Y25SWFlYTnRSbUZqZEc5eWVWUm9jbVZoWkdWa0lEb2diM0owVjJGemJVWmhZM1J2Y25rN1hHNGdJQ0FnWTI5dWMzUWdZMjl1Wm1sbk9pQlFZWEowYVdGc1BFOXlkRmRoYzIxTmIyUjFiR1UrSUQwZ2UxeHVJQ0FnSUNBZ2JHOWpZWFJsUm1sc1pUb2dLR1pwYkdWT1lXMWxPaUJ6ZEhKcGJtY3NJSE5qY21sd2RFUnBjbVZqZEc5eWVUb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRCVTAxZlZFaFNSVUZFSUNZbUlIVnpaVlJvY21WaFpITWdKaVlnWm1sc1pVNWhiV1V1Wlc1a2MxZHBkR2dvSnk1M2IzSnJaWEl1YW5NbktTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVzltSUVKc2IySWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRlZTVEM1amNtVmhkR1ZQWW1wbFkzUlZVa3dvYm1WM0lFSnNiMklvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJSEpsY1hWcGNtVW9LU0JtZFc1amRHbHZiaUJwY3lCb1lXNWtiR1ZrSUdKNUlHVnpZblZwYkdRZ2NHeDFaMmx1SUhSdklHeHZZV1FnWm1sc1pTQmpiMjUwWlc1MElHRnpJSE4wY21sdVp5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhKbGNYVnBjbVV0YVcxd2IzSjBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWcGNtVW9KeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzUzYjNKclpYSXVhbk1uS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEhsd1pUb2dKM1JsZUhRdmFtRjJZWE5qY21sd2RDZDlLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvWm1sc1pVNWhiV1V1Wlc1a2MxZHBkR2dvSnk1M1lYTnRKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZDJGemJWQmhkR2hQZG1WeWNtbGtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIZGhjMjFRWVhSb1QzWmxjbkpwWkdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbFptbDRJRDBnZDJGemJWQnlaV1pwZUU5MlpYSnlhV1JsSUQ4L0lITmpjbWx3ZEVScGNtVmpkRzl5ZVR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjFHYVd4bFRtRnRaU0E5UFQwZ0oyOXlkQzEzWVhOdExYTnBiV1F1ZDJGemJTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklDZHZjblF0ZDJGemJTMXphVzFrTG1welpYQXVkMkZ6YlNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hkaGMyMUdhV3hsVG1GdFpTQTlQVDBnSjI5eWRDMTNZWE50TFhOcGJXUXRkR2h5WldGa1pXUXVkMkZ6YlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlQ0FySUNkdmNuUXRkMkZ6YlMxemFXMWtMWFJvY21WaFpHVmtMbXB6WlhBdWQyRnpiU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklIZGhjMjFHYVd4bFRtRnRaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelkzSnBjSFJFYVhKbFkzUnZjbmtnS3lCbWFXeGxUbUZ0WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnYVdZZ0tDRkNWVWxNUkY5RVJVWlRMa1JKVTBGQ1RFVmZWMEZUVFY5VVNGSkZRVVFnSmlZZ2RYTmxWR2h5WldGa2N5a2dlMXh1SUNBZ0lDQWdZMjl1Wm1sbkxtNTFiVlJvY21WaFpITWdQU0J1ZFcxVWFISmxZV1J6TzF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCQ2JHOWlJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1bWFXY3ViV0ZwYmxOamNtbHdkRlZ5YkU5eVFteHZZaUE5SUhCaGRHZ3VhbTlwYmloZlgyUnBjbTVoYldVc0lDZHZjblF0ZDJGemJTMTBhSEpsWVdSbFpDNXFjeWNwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMk55YVhCMFUyOTFjbU5sUTI5a1pTQTlJR0IyWVhJZ2IzSjBWMkZ6YlZSb2NtVmhaR1ZrUFNSN1ptRmpkRzl5ZVM1MGIxTjBjbWx1WnlncGZUdGdPMXh1SUNBZ0lDQWdJQ0JqYjI1bWFXY3ViV0ZwYmxOamNtbHdkRlZ5YkU5eVFteHZZaUE5SUc1bGR5QkNiRzlpS0Z0elkzSnBjSFJUYjNWeVkyVkRiMlJsWFN3Z2UzUjVjR1U2SUNkMFpYaDBMMnBoZG1GelkzSnBjSFFuZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm1GamRHOXllU2hqYjI1bWFXY3BMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDOHZJSGRoYzIwZ2JXOWtkV3hsSUdsdWFYUnBZV3hwZW1Wa0lITjFZMk5sYzNObWRXeHNlVnh1SUNBZ0lDQWdJQ0J0YjJSMWJHVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbHVhWFJwWVd4cGVtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUdsdWFYUnBZV3hwZW1Wa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjNZWE50SUQwZ2JXOWtkV3hsTzF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0tUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnTHk4Z2QyRnpiU0J0YjJSMWJHVWdabUZwYkdWa0lIUnZJR2x1YVhScFlXeHBlbVZjYmlBZ0lDQWdJQ0FnS0hkb1lYUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBibWwwYVdGc2FYcHBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNCaFltOXlkR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvZDJoaGRDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQjlLU2s3WEc1Y2JpQWdZWGRoYVhRZ1VISnZiV2x6WlM1eVlXTmxLSFJoYzJ0ektUdGNibHh1SUNCcFppQW9hWE5VYVcxbGIzVjBLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQlhaV0pCYzNObGJXSnNlU0JpWVdOclpXNWtJR2x1YVhScFlXeHBlbWx1WnlCbVlXbHNaV1FnWkhWbElIUnZJSFJwYldWdmRYUTZJQ1I3ZEdsdFpXOTFkSDF0YzJBcE8xeHVJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1oyVjBTVzV6ZEdGdVkyVWdQU0FvS1RvZ1QzSjBWMkZ6YlUxdlpIVnNaU0E5UGlCN1hHNGdJR2xtSUNocGJtbDBhV0ZzYVhwbFpDQW1KaUIzWVhOdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhkaGMyMDdYRzRnSUgxY2JseHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMWRsWWtGemMyVnRZbXg1SUdseklHNXZkQ0JwYm1sMGFXRnNhWHBsWkNCNVpYUXVKeWs3WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1pHbHpjRzl6WlNBOUlDZ3BPaUIyYjJsa0lEMCtJSHRjYmlBZ2FXWWdLR2x1YVhScFlXeHBlbVZrSUNZbUlDRnBibWwwYVdGc2FYcHBibWNnSmlZZ0lXRmliM0owWldRcElIdGNiaUFnSUNCcGJtbDBhV0ZzYVhwcGJtY2dQU0IwY25WbE8xeHVYRzRnSUNBZ0tIZGhjMjBnWVhNZ1QzSjBWMkZ6YlZSb2NtVmhaR1ZrVFc5a2RXeGxLUzVRVkdoeVpXRmtQeTUwWlhKdGFXNWhkR1ZCYkd4VWFISmxZV1J6S0NrN1hHNGdJQ0FnZDJGemJTQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJR2x1YVhScFlXeHBlbWx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJR2x1YVhScFlXeHBlbVZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdZV0p2Y25SbFpDQTlJSFJ5ZFdVN1hHNGdJSDFjYm4wN1hHNGlMQ0FpTHk4Z1EyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzR2THlCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1RVbFVJRXhwWTJWdWMyVXVYRzVjYm1sdGNHOXlkQ0I3WjJWMFNXNXpkR0Z1WTJWOUlHWnliMjBnSnk0dmQyRnpiUzFtWVdOMGIzSjVKenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR0ZzYkc5alYyRnpiVk4wY21sdVp5QTlJQ2hrWVhSaE9pQnpkSEpwYm1jc0lHRnNiRzlqY3pvZ2JuVnRZbVZ5VzEwcE9pQnVkVzFpWlhJZ1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JseHVJQ0JqYjI1emRDQmtZWFJoVEdWdVozUm9JRDBnZDJGemJTNXNaVzVuZEdoQ2VYUmxjMVZVUmpnb1pHRjBZU2tnS3lBeE8xeHVJQ0JqYjI1emRDQmtZWFJoVDJabWMyVjBJRDBnZDJGemJTNWZiV0ZzYkc5aktHUmhkR0ZNWlc1bmRHZ3BPMXh1SUNCM1lYTnRMbk4wY21sdVoxUnZWVlJHT0Noa1lYUmhMQ0JrWVhSaFQyWm1jMlYwTENCa1lYUmhUR1Z1WjNSb0tUdGNiaUFnWVd4c2IyTnpMbkIxYzJnb1pHRjBZVTltWm5ObGRDazdYRzVjYmlBZ2NtVjBkWEp1SUdSaGRHRlBabVp6WlhRN1hHNTlPMXh1WEc1cGJuUmxjbVpoWTJVZ1JYaDBjbUZQY0hScGIyNXpTR0Z1Wkd4bGNpQjdYRzRnSUNodVlXMWxPaUJ6ZEhKcGJtY3NJSFpoYkhWbE9pQnpkSEpwYm1jcE9pQjJiMmxrTzF4dWZWeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2FYUmxjbUYwWlVWNGRISmhUM0IwYVc5dWN5QTlYRzRnSUNBZ0tHOXdkR2x2Ym5NNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTENCd2NtVm1hWGc2SUhOMGNtbHVaeXdnYzJWbGJqb2dWMlZoYTFObGREeFNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGo0c1hHNGdJQ0FnSUdoaGJtUnNaWEk2SUVWNGRISmhUM0IwYVc5dWMwaGhibVJzWlhJcE9pQjJiMmxrSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQU0FuYjJKcVpXTjBKeUFtSmlCdmNIUnBiMjV6SUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WldWdUxtaGhjeWh2Y0hScGIyNXpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblEybHlZM1ZzWVhJZ2NtVm1aWEpsYm1ObElHbHVJRzl3ZEdsdmJuTW5LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXVnVMbUZrWkNodmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQlBZbXBsWTNRdVpXNTBjbWxsY3lodmNIUnBiMjV6S1M1bWIzSkZZV05vS0NoYmEyVjVMQ0IyWVd4MVpWMHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJQ2h3Y21WbWFYZ3BJRDhnY0hKbFptbDRJQ3NnYTJWNUlEb2dhMlY1TzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsMFpYSmhkR1ZGZUhSeVlVOXdkR2x2Ym5Nb2RtRnNkV1VnWVhNZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajRzSUc1aGJXVWdLeUFuTGljc0lITmxaVzRzSUdoaGJtUnNaWElwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0ozTjBjbWx1WnljZ2ZId2dkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdoaGJtUnNaWElvYm1GdFpTd2dkbUZzZFdVdWRHOVRkSEpwYm1jb0tTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuWW05dmJHVmhiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWeUtHNWhiV1VzSUNoMllXeDFaU2tnUHlBbk1TY2dPaUFuTUNjcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdRMkZ1SjNRZ2FHRnVaR3hsSUdWNGRISmhJR052Ym1acFp5QjBlWEJsT2lBa2UzUjVjR1Z2WmlCMllXeDFaWDFnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1THlvcVhHNGdLaUJqYUdWamF5QjNaV0lnWVhOelpXMWliSGtnUVZCSkozTWdiR0Z6ZENCbGNuSnZjaUJoYm1RZ2RHaHliM2NnWlhKeWIzSWdhV1lnWVc1NUlHVnljbTl5SUc5alkzVnljbVZrTGx4dUlDb2dRSEJoY21GdElHMWxjM05oWjJVZ1lTQnRaWE56WVdkbElIVnpaV1FnZDJobGJpQmhiaUJsY25KdmNpQnZZMk4xY25KbFpDNWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR05vWldOclRHRnpkRVZ5Y205eUlEMGdLRzFsYzNOaFoyVTZJSE4wY21sdVp5azZJSFp2YVdRZ1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JseHVJQ0JqYjI1emRDQnpkR0ZqYXlBOUlIZGhjMjB1YzNSaFkydFRZWFpsS0NrN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnWTI5dWMzUWdjR0Z5WVcxelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0RncE8xeHVJQ0FnSUhkaGMyMHVYMDl5ZEVkbGRFeGhjM1JGY25KdmNpaHdZWEpoYlhOUFptWnpaWFFzSUhCaGNtRnRjMDltWm5ObGRDQXJJRFFwTzF4dUlDQWdJR052Ym5OMElHVnljbTl5UTI5a1pTQTlJSGRoYzIwdVNFVkJVRE15VzNCaGNtRnRjMDltWm5ObGRDQXZJRFJkTzF4dUlDQWdJR052Ym5OMElHVnljbTl5VFdWemMyRm5aVkJ2YVc1MFpYSWdQU0IzWVhOdExraEZRVkJWTXpKYmNHRnlZVzF6VDJabWMyVjBJQzhnTkNBcklERmRPMXh1SUNBZ0lHTnZibk4wSUdWeWNtOXlUV1Z6YzJGblpTQTlJR1Z5Y205eVRXVnpjMkZuWlZCdmFXNTBaWElnUHlCM1lYTnRMbFZVUmpoVWIxTjBjbWx1WnlobGNuSnZjazFsYzNOaFoyVlFiMmx1ZEdWeUtTQTZJQ2NuTzF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdKSHR0WlhOellXZGxmU0JGVWxKUFVsOURUMFJGT2lBa2UyVnljbTl5UTI5a1pYMHNJRVZTVWs5U1gwMUZVMU5CUjBVNklDUjdaWEp5YjNKTlpYTnpZV2RsZldBcE8xeHVJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJSGRoYzIwdWMzUmhZMnRTWlhOMGIzSmxLSE4wWVdOcktUdGNiaUFnZlZ4dWZUdGNiaUlzSUNJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmx4dWFXMXdiM0owSUh0SmJtWmxjbVZ1WTJWVFpYTnphVzl1ZlNCbWNtOXRJQ2R2Ym01NGNuVnVkR2x0WlMxamIyMXRiMjRuTzF4dVhHNXBiWEJ2Y25RZ2UyZGxkRWx1YzNSaGJtTmxmU0JtY205dElDY3VMM2RoYzIwdFptRmpkRzl5ZVNjN1hHNXBiWEJ2Y25RZ2UyRnNiRzlqVjJGemJWTjBjbWx1Wnl3Z1kyaGxZMnRNWVhOMFJYSnliM0lzSUdsMFpYSmhkR1ZGZUhSeVlVOXdkR2x2Ym5OOUlHWnliMjBnSnk0dmQyRnpiUzExZEdsc2N5YzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnpaWFJTZFc1UGNIUnBiMjV6SUQwZ0tHOXdkR2x2Ym5NNklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVVuVnVUM0IwYVc5dWN5azZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsdGRYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCc1pYUWdjblZ1VDNCMGFXOXVjMGhoYm1Sc1pTQTlJREE3WEc0Z0lHTnZibk4wSUdGc2JHOWpjem9nYm5WdFltVnlXMTBnUFNCYlhUdGNibHh1SUNCamIyNXpkQ0J5ZFc1UGNIUnBiMjV6T2lCSmJtWmxjbVZ1WTJWVFpYTnphVzl1TGxKMWJrOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NL0xteHZaMU5sZG1WeWFYUjVUR1YyWld3Z1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY25WdVQzQjBhVzl1Y3k1c2IyZFRaWFpsY21sMGVVeGxkbVZzSUQwZ01qc2dJQzh2SUVSbFptRjFiSFFnZEc4Z2QyRnlibWx1WjF4dUlDQWdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJ2Y0hScGIyNXpMbXh2WjFObGRtVnlhWFI1VEdWMlpXd2dJVDA5SUNkdWRXMWlaWEluSUh4OElDRk9kVzFpWlhJdWFYTkpiblJsWjJWeUtHOXdkR2x2Ym5NdWJHOW5VMlYyWlhKcGRIbE1aWFpsYkNrZ2ZIeGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NXNiMmRUWlhabGNtbDBlVXhsZG1Wc0lEd2dNQ0I4ZkNCdmNIUnBiMjV6TG14dloxTmxkbVZ5YVhSNVRHVjJaV3dnUGlBMEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHeHZaeUJ6WlhKMlpYSnBkSGtnYkdWMlpXd2dhWE1nYm05MElIWmhiR2xrT2lBa2UyOXdkR2x2Ym5NdWJHOW5VMlYyWlhKcGRIbE1aWFpsYkgxZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iM0IwYVc5dWN6OHViRzluVm1WeVltOXphWFI1VEdWMlpXd2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2NuVnVUM0IwYVc5dWN5NXNiMmRXWlhKaWIzTnBkSGxNWlhabGJDQTlJREE3SUNBdkx5QkVaV1poZFd4MElIUnZJREJjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1ekxteHZaMVpsY21KdmMybDBlVXhsZG1Wc0lDRTlQU0FuYm5WdFltVnlKeUI4ZkNBaFRuVnRZbVZ5TG1selNXNTBaV2RsY2lodmNIUnBiMjV6TG14dloxWmxjbUp2YzJsMGVVeGxkbVZzS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCc2IyY2dkbVZ5WW05emFYUjVJR3hsZG1Wc0lHbHpJRzV2ZENCMllXeHBaRG9nSkh0dmNIUnBiMjV6TG14dloxWmxjbUp2YzJsMGVVeGxkbVZzZldBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHZjSFJwYjI1elB5NTBaWEp0YVc1aGRHVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2NuVnVUM0IwYVc5dWN5NTBaWEp0YVc1aGRHVWdQU0JtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdkR0ZuUkdGMFlVOW1abk5sZENBOUlEQTdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTS9MblJoWnlBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0IwWVdkRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktHOXdkR2x2Ym5NdWRHRm5MQ0JoYkd4dlkzTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISjFiazl3ZEdsdmJuTklZVzVrYkdVZ1BTQjNZWE50TGw5UGNuUkRjbVZoZEdWU2RXNVBjSFJwYjI1ektGeHVJQ0FnSUNBZ0lDQnlkVzVQY0hScGIyNXpMbXh2WjFObGRtVnlhWFI1VEdWMlpXd2hMQ0J5ZFc1UGNIUnBiMjV6TG14dloxWmxjbUp2YzJsMGVVeGxkbVZzSVN3Z0lTRnlkVzVQY0hScGIyNXpMblJsY20xcGJtRjBaU0VzSUhSaFowUmhkR0ZQWm1aelpYUXBPMXh1SUNBZ0lHbG1JQ2h5ZFc1UGNIUnBiMjV6U0dGdVpHeGxJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2lnblEyRnVYRnduZENCamNtVmhkR1VnY25WdUlHOXdkR2x2Ym5NdUp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTS9MbVY0ZEhKaElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUdsMFpYSmhkR1ZGZUhSeVlVOXdkR2x2Ym5Nb2IzQjBhVzl1Y3k1bGVIUnlZU3dnSnljc0lHNWxkeUJYWldGclUyVjBQRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K1BpZ3BMQ0FvYTJWNUxDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnJaWGxFWVhSaFQyWm1jMlYwSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0d0bGVTd2dZV3hzYjJOektUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1ZFWVhSaFQyWm1jMlYwSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0haaGJIVmxMQ0JoYkd4dlkzTXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDNZWE50TGw5UGNuUkJaR1JTZFc1RGIyNW1hV2RGYm5SeWVTaHlkVzVQY0hScGIyNXpTR0Z1Wkd4bExDQnJaWGxFWVhSaFQyWm1jMlYwTENCMllXeDFaVVJoZEdGUFptWnpaWFFwSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJSE5sZENCaElISjFiaUJqYjI1bWFXY2daVzUwY25rNklDUjdhMlY1ZlNBdElDUjdkbUZzZFdWOUxtQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdXM0oxYms5d2RHbHZibk5JWVc1a2JHVXNJR0ZzYkc5amMxMDdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCcFppQW9jblZ1VDNCMGFXOXVjMGhoYm1Sc1pTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2QyRnpiUzVmVDNKMFVtVnNaV0Z6WlZKMWJrOXdkR2x2Ym5Nb2NuVnVUM0IwYVc5dWMwaGhibVJzWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR0ZzYkc5amN5NW1iM0pGWVdOb0tHRnNiRzlqSUQwK0lIZGhjMjB1WDJaeVpXVW9ZV3hzYjJNcEtUdGNiaUFnSUNCMGFISnZkeUJsTzF4dUlDQjlYRzU5TzF4dUlpd2dJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVYRzVwYlhCdmNuUWdlMGx1Wm1WeVpXNWpaVk5sYzNOcGIyNTlJR1p5YjIwZ0oyOXVibmh5ZFc1MGFXMWxMV052YlcxdmJpYzdYRzVjYm1sdGNHOXlkQ0I3WjJWMFNXNXpkR0Z1WTJWOUlHWnliMjBnSnk0dmQyRnpiUzFtWVdOMGIzSjVKenRjYm1sdGNHOXlkQ0I3WVd4c2IyTlhZWE50VTNSeWFXNW5MQ0JqYUdWamEweGhjM1JGY25KdmNpd2dhWFJsY21GMFpVVjRkSEpoVDNCMGFXOXVjMzBnWm5KdmJTQW5MaTkzWVhOdExYVjBhV3h6Snp0Y2JseHVZMjl1YzNRZ1oyVjBSM0poY0doUGNIUnBiWHBoZEdsdmJreGxkbVZzSUQwZ0tHZHlZWEJvVDNCMGFXMXBlbUYwYVc5dVRHVjJaV3c2SUhOMGNtbHVaM3gxYm10dWIzZHVLVG9nYm5WdFltVnlJRDArSUh0Y2JpQWdjM2RwZEdOb0lDaG5jbUZ3YUU5d2RHbHRhWHBoZEdsdmJreGxkbVZzS1NCN1hHNGdJQ0FnWTJGelpTQW5aR2x6WVdKc1pXUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ1kyRnpaU0FuWW1GemFXTW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ1kyRnpaU0FuWlhoMFpXNWtaV1FuT2x4dUlDQWdJQ0FnY21WMGRYSnVJREk3WEc0Z0lDQWdZMkZ6WlNBbllXeHNKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQTVPVHRjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCMWJuTjFjSEJ2Y25SbFpDQm5jbUZ3YUNCdmNIUnBiV2w2WVhScGIyNGdiR1YyWld3NklDUjdaM0poY0doUGNIUnBiV2w2WVhScGIyNU1aWFpsYkgxZ0tUdGNiaUFnZlZ4dWZUdGNibHh1WTI5dWMzUWdaMlYwUlhobFkzVjBhVzl1VFc5a1pTQTlJQ2hsZUdWamRYUnBiMjVOYjJSbE9pQW5jMlZ4ZFdWdWRHbGhiQ2Q4SjNCaGNtRnNiR1ZzSnlrNklHNTFiV0psY2lBOVBpQjdYRzRnSUhOM2FYUmphQ0FvWlhobFkzVjBhVzl1VFc5a1pTa2dlMXh1SUNBZ0lHTmhjMlVnSjNObGNYVmxiblJwWVd3bk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURBN1hHNGdJQ0FnWTJGelpTQW5jR0Z5WVd4c1pXd25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnZFc1emRYQndiM0owWldRZ1pYaGxZM1YwYVc5dUlHMXZaR1U2SUNSN1pYaGxZM1YwYVc5dVRXOWtaWDFnS1R0Y2JpQWdmVnh1ZlR0Y2JseHVZMjl1YzNRZ1lYQndaVzVrUkdWbVlYVnNkRTl3ZEdsdmJuTWdQU0FvYjNCMGFXOXVjem9nU1c1bVpYSmxibU5sVTJWemMybHZiaTVUWlhOemFXOXVUM0IwYVc5dWN5azZJSFp2YVdRZ1BUNGdlMXh1SUNCcFppQW9JVzl3ZEdsdmJuTXVaWGgwY21FcElIdGNiaUFnSUNCdmNIUnBiMjV6TG1WNGRISmhJRDBnZTMwN1hHNGdJSDFjYmlBZ2FXWWdLQ0Z2Y0hScGIyNXpMbVY0ZEhKaExuTmxjM05wYjI0cElIdGNiaUFnSUNCdmNIUnBiMjV6TG1WNGRISmhMbk5sYzNOcGIyNGdQU0I3ZlR0Y2JpQWdmVnh1SUNCamIyNXpkQ0J6WlhOemFXOXVJRDBnYjNCMGFXOXVjeTVsZUhSeVlTNXpaWE56YVc5dUlHRnpJRkpsWTI5eVpEeHpkSEpwYm1jc0lITjBjbWx1Wno0N1hHNGdJR2xtSUNnaGMyVnpjMmx2Ymk1MWMyVmZiM0owWDIxdlpHVnNYMko1ZEdWelgyUnBjbVZqZEd4NUtTQjdYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHTmhiV1ZzWTJGelpWeHVJQ0FnSUhObGMzTnBiMjR1ZFhObFgyOXlkRjl0YjJSbGJGOWllWFJsYzE5a2FYSmxZM1JzZVNBOUlDY3hKenRjYmlBZ2ZWeHVYRzRnSUM4dklHbG1JSFZ6YVc1bklFcFRSVkFnZDJsMGFDQlhaV0pIVUZVc0lHRnNkMkY1Y3lCa2FYTmhZbXhsSUcxbGJXOXllU0J3WVhSMFpYSnVYRzRnSUdsbUlDaHZjSFJwYjI1ekxtVjRaV04xZEdsdmJsQnliM1pwWkdWeWN5QW1KbHh1SUNBZ0lDQWdiM0IwYVc5dWN5NWxlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTXVjMjl0WlNobGNDQTlQaUFvZEhsd1pXOW1JR1Z3SUQwOVBTQW5jM1J5YVc1bkp5QS9JR1Z3SURvZ1pYQXVibUZ0WlNrZ1BUMDlJQ2QzWldKbmNIVW5LU2tnZTF4dUlDQWdJRzl3ZEdsdmJuTXVaVzVoWW14bFRXVnRVR0YwZEdWeWJpQTlJR1poYkhObE8xeHVJQ0I5WEc1OU8xeHVYRzVqYjI1emRDQnpaWFJGZUdWamRYUnBiMjVRY205MmFXUmxjbk1nUFZ4dUlDQWdJQ2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlRvZ2JuVnRZbVZ5TENCbGVHVmpkWFJwYjI1UWNtOTJhV1JsY25NNklISmxZV1J2Ym14NUlFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVJYaGxZM1YwYVc5dVVISnZkbWxrWlhKRGIyNW1hV2RiWFN4Y2JpQWdJQ0FnWVd4c2IyTnpPaUJ1ZFcxaVpYSmJYU2s2SUhadmFXUWdQVDRnZTF4dUlDQWdJQ0FnWm05eUlDaGpiMjV6ZENCbGNDQnZaaUJsZUdWamRYUnBiMjVRY205MmFXUmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1Z3VG1GdFpTQTlJSFI1Y0dWdlppQmxjQ0E5UFQwZ0ozTjBjbWx1WnljZ1B5QmxjQ0E2SUdWd0xtNWhiV1U3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdZMmhsWTJzZ1JWQWdibUZ0WlZ4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0dWd1RtRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNkbFltNXVKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lHVndUbUZ0WlNBOUlDZFhSVUpPVGljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdWd0lDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjNaV0p1Yms5d2RHbHZibk1nUFNCbGNDQmhjeUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbGRsWWs1T1JYaGxZM1YwYVc5dVVISnZkbWxrWlhKUGNIUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXSnViazl3ZEdsdmJuTS9MbVJsZG1salpWUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktDZGtaWFpwWTJWVWVYQmxKeXdnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2QyVmlibTVQY0hScGIyNXpMbVJsZG1salpWUjVjR1VzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGxkRWx1YzNSaGJtTmxLQ2t1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllU2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlN3Z2EyVjVSR0YwWVU5bVpuTmxkQ3dnZG1Gc2RXVkVZWFJoVDJabWMyVjBLU0FoUFQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJSE5sZENCaElITmxjM05wYjI0Z1kyOXVabWxuSUdWdWRISjVPaUFuWkdWMmFXTmxWSGx3WlNjZ0xTQWtlM2RsWW01dVQzQjBhVzl1Y3k1a1pYWnBZMlZVZVhCbGZTNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hkbFltNXVUM0IwYVc5dWN6OHViblZ0VkdoeVpXRmtjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVkVzFVYUhKbFlXUnpJRDBnZDJWaWJtNVBjSFJwYjI1ekxtNTFiVlJvY21WaFpITTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU25WemRDQnBaMjV2Y21VZ2FXNTJZV3hwWkNCM1pXSnViazl3ZEdsdmJuTXViblZ0VkdoeVpXRmtjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1MWJWUm9jbVZoWkhNZ0lUMGdKMjUxYldKbGNpY2dmSHdnSVU1MWJXSmxjaTVwYzBsdWRHVm5aWElvYm5WdFZHaHlaV0ZrY3lrZ2ZId2diblZ0VkdoeVpXRmtjeUE4SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYlZSb2NtVmhaSE1nUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYbEVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LQ2R1ZFcxVWFISmxZV1J6Snl3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpVUmhkR0ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29iblZ0VkdoeVpXRmtjeTUwYjFOMGNtbHVaeWdwTENCaGJHeHZZM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG5aWFJKYm5OMFlXNWpaU2dwTGw5UGNuUkJaR1JUWlhOemFXOXVRMjl1Wm1sblJXNTBjbmtvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHdGxlVVJoZEdGUFptWnpaWFFzSUhaaGJIVmxSR0YwWVU5bVpuTmxkQ2tnSVQwOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0dCRFlXNG5kQ0J6WlhRZ1lTQnpaWE56YVc5dUlHTnZibVpwWnlCbGJuUnllVG9nSjI1MWJWUm9jbVZoWkhNbklDMGdKSHQzWldKdWJrOXdkR2x2Ym5NdWJuVnRWR2h5WldGa2MzMHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXSnViazl3ZEdsdmJuTS9MbkJ2ZDJWeVVISmxabVZ5Wlc1alpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHdGxlVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvSjNCdmQyVnlVSEpsWm1WeVpXNWpaU2NzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdWRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktIZGxZbTV1VDNCMGFXOXVjeTV3YjNkbGNsQnlaV1psY21WdVkyVXNJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbGRFbHVjM1JoYm1ObEtDa3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFTmhiaWQwSUhObGRDQmhJSE5sYzNOcGIyNGdZMjl1Wm1sbklHVnVkSEo1T2lBbmNHOTNaWEpRY21WbVpYSmxibU5sSnlBdElDUjdkMlZpYm01UGNIUnBiMjV6TG5CdmQyVnlVSEpsWm1WeVpXNWpaWDB1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkM1pXSm5jSFVuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWEJPWVcxbElEMGdKMHBUSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWlhBZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIZGxZbWR3ZFU5d2RHbHZibk1nUFNCbGNDQmhjeUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbGRsWWtkd2RVVjRaV04xZEdsdmJsQnliM1pwWkdWeVQzQjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2QyVmlaM0IxVDNCMGFXOXVjejh1Y0hKbFptVnljbVZrVEdGNWIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGxZbWR3ZFU5d2RHbHZibk11Y0hKbFptVnljbVZrVEdGNWIzVjBJQ0U5UFNBblRrTklWeWNnSmlZZ2QyVmlaM0IxVDNCMGFXOXVjeTV3Y21WbVpYSnlaV1JNWVhsdmRYUWdJVDA5SUNkT1NGZERKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCd2NtVm1aWEp5WldSTVlYbHZkWFFnYlhWemRDQmlaU0JsYVhSb1pYSWdKMDVEU0ZjbklHOXlJQ2RPU0ZkREp6b2dKSHQzWldKbmNIVlBjSFJwYjI1ekxuQnlaV1psY25KbFpFeGhlVzkxZEgxZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2EyVjVSR0YwWVU5bVpuTmxkQ0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWduY0hKbFptVnljbVZrVEdGNWIzVjBKeXdnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2QyVmlaM0IxVDNCMGFXOXVjeTV3Y21WbVpYSnlaV1JNWVhsdmRYUXNJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbGRFbHVjM1JoYm1ObEtDa3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFTmhiaWQwSUhObGRDQmhJSE5sYzNOcGIyNGdZMjl1Wm1sbklHVnVkSEo1T2lBbmNISmxabVZ5Y21Wa1RHRjViM1YwSnlBdElDUjdkMlZpWjNCMVQzQjBhVzl1Y3k1d2NtVm1aWEp5WldSTVlYbHZkWFI5TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmQyRnpiU2M2WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWTNCMUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRzV2ZENCemRYQndiM0owWldRZ1pYaGxZM1YwYVc5dUlIQnliM1pwWkdWeU9pQWtlMlZ3VG1GdFpYMWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWd1RtRnRaVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvWlhCT1lXMWxMQ0JoYkd4dlkzTXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1oyVjBTVzV6ZEdGdVkyVW9LUzVmVDNKMFFYQndaVzVrUlhobFkzVjBhVzl1VUhKdmRtbGtaWElvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHVndUbUZ0WlVSaGRHRlBabVp6WlhRcElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb1lFTmhiaWQwSUdGd2NHVnVaQ0JsZUdWamRYUnBiMjRnY0hKdmRtbGtaWEk2SUNSN1pYQk9ZVzFsZlM1Z0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnpaWFJUWlhOemFXOXVUM0IwYVc5dWN5QTlJQ2h2Y0hScGIyNXpQem9nU1c1bVpYSmxibU5sVTJWemMybHZiaTVUWlhOemFXOXVUM0IwYVc5dWN5azZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsdGRYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCc1pYUWdjMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VnUFNBd08xeHVJQ0JqYjI1emRDQmhiR3h2WTNNNklHNTFiV0psY2x0ZElEMGdXMTA3WEc1Y2JpQWdZMjl1YzNRZ2MyVnpjMmx2Yms5d2RHbHZibk02SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1VTJWemMybHZiazl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVJQ0JoY0hCbGJtUkVaV1poZFd4MFQzQjBhVzl1Y3loelpYTnphVzl1VDNCMGFXOXVjeWs3WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JqYjI1emRDQm5jbUZ3YUU5d2RHbHRhWHBoZEdsdmJreGxkbVZzSUQwZ1oyVjBSM0poY0doUGNIUnBiWHBoZEdsdmJreGxkbVZzS0hObGMzTnBiMjVQY0hScGIyNXpMbWR5WVhCb1QzQjBhVzFwZW1GMGFXOXVUR1YyWld3Z1B6OGdKMkZzYkNjcE8xeHVJQ0FnSUdOdmJuTjBJR1Y0WldOMWRHbHZiazF2WkdVZ1BTQm5aWFJGZUdWamRYUnBiMjVOYjJSbEtITmxjM05wYjI1UGNIUnBiMjV6TG1WNFpXTjFkR2x2YmsxdlpHVWdQejhnSjNObGNYVmxiblJwWVd3bktUdGNiaUFnSUNCamIyNXpkQ0JzYjJkSlpFUmhkR0ZQWm1aelpYUWdQVnh1SUNBZ0lDQWdJQ0IwZVhCbGIyWWdjMlZ6YzJsdmJrOXdkR2x2Ym5NdWJHOW5TV1FnUFQwOUlDZHpkSEpwYm1jbklEOGdZV3hzYjJOWFlYTnRVM1J5YVc1bktITmxjM05wYjI1UGNIUnBiMjV6TG14dlowbGtMQ0JoYkd4dlkzTXBJRG9nTUR0Y2JseHVJQ0FnSUdOdmJuTjBJR3h2WjFObGRtVnlhWFI1VEdWMlpXd2dQU0J6WlhOemFXOXVUM0IwYVc5dWN5NXNiMmRUWlhabGNtbDBlVXhsZG1Wc0lEOC9JREk3SUNBdkx5QkVaV1poZFd4MElIUnZJRElnTFNCM1lYSnVhVzVuWEc0Z0lDQWdhV1lnS0NGT2RXMWlaWEl1YVhOSmJuUmxaMlZ5S0d4dloxTmxkbVZ5YVhSNVRHVjJaV3dwSUh4OElHeHZaMU5sZG1WeWFYUjVUR1YyWld3Z1BDQXdJSHg4SUd4dloxTmxkbVZ5YVhSNVRHVjJaV3dnUGlBMEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHeHZaeUJ6WlhKMlpYSnBkSGtnYkdWMlpXd2dhWE1nYm05MElIWmhiR2xrT2lBa2UyeHZaMU5sZG1WeWFYUjVUR1YyWld4OVlDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnYkc5blZtVnlZbTl6YVhSNVRHVjJaV3dnUFNCelpYTnphVzl1VDNCMGFXOXVjeTVzYjJkV1pYSmliM05wZEhsTVpYWmxiQ0EvUHlBd095QWdMeThnUkdWbVlYVnNkQ0IwYnlBd0lDMGdkbVZ5WW05elpWeHVJQ0FnSUdsbUlDZ2hUblZ0WW1WeUxtbHpTVzUwWldkbGNpaHNiMmRXWlhKaWIzTnBkSGxNWlhabGJDa2dmSHdnYkc5blZtVnlZbTl6YVhSNVRHVjJaV3dnUENBd0lIeDhJR3h2WjFabGNtSnZjMmwwZVV4bGRtVnNJRDRnTkNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCc2IyY2dkbVZ5WW05emFYUjVJR3hsZG1Wc0lHbHpJRzV2ZENCMllXeHBaRG9nSkh0c2IyZFdaWEppYjNOcGRIbE1aWFpsYkgxZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J2Y0hScGJXbDZaV1JOYjJSbGJFWnBiR1ZRWVhSb1QyWm1jMlYwSUQwZ2RIbHdaVzltSUhObGMzTnBiMjVQY0hScGIyNXpMbTl3ZEdsdGFYcGxaRTF2WkdWc1JtbHNaVkJoZEdnZ1BUMDlJQ2R6ZEhKcGJtY25JRDljYmlBZ0lDQWdJQ0FnWVd4c2IyTlhZWE50VTNSeWFXNW5LSE5sYzNOcGIyNVBjSFJwYjI1ekxtOXdkR2x0YVhwbFpFMXZaR1ZzUm1sc1pWQmhkR2dzSUdGc2JHOWpjeWtnT2x4dUlDQWdJQ0FnSUNBd08xeHVYRzRnSUNBZ2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVWdQU0IzWVhOdExsOVBjblJEY21WaGRHVlRaWE56YVc5dVQzQjBhVzl1Y3loY2JpQWdJQ0FnSUNBZ1ozSmhjR2hQY0hScGJXbDZZWFJwYjI1TVpYWmxiQ3dnSVNGelpYTnphVzl1VDNCMGFXOXVjeTVsYm1GaWJHVkRjSFZOWlcxQmNtVnVZU3dnSVNGelpYTnphVzl1VDNCMGFXOXVjeTVsYm1GaWJHVk5aVzFRWVhSMFpYSnVMQ0JsZUdWamRYUnBiMjVOYjJSbExGeHVJQ0FnSUNBZ0lDQWhJWE5sYzNOcGIyNVBjSFJwYjI1ekxtVnVZV0pzWlZCeWIyWnBiR2x1Wnl3Z01Dd2diRzluU1dSRVlYUmhUMlptYzJWMExDQnNiMmRUWlhabGNtbDBlVXhsZG1Wc0xDQnNiMmRXWlhKaWIzTnBkSGxNWlhabGJDeGNiaUFnSUNBZ0lDQWdiM0IwYVcxcGVtVmtUVzlrWld4R2FXeGxVR0YwYUU5bVpuTmxkQ2s3WEc0Z0lDQWdhV1lnS0hObGMzTnBiMjVQY0hScGIyNXpTR0Z1Wkd4bElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWduUTJGdVhGd25kQ0JqY21WaGRHVWdjMlZ6YzJsdmJpQnZjSFJwYjI1ekxpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h6WlhOemFXOXVUM0IwYVc5dWN5NWxlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTXBJSHRjYmlBZ0lDQWdJSE5sZEVWNFpXTjFkR2x2YmxCeWIzWnBaR1Z5Y3loelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTd2djMlZ6YzJsdmJrOXdkR2x2Ym5NdVpYaGxZM1YwYVc5dVVISnZkbWxrWlhKekxDQmhiR3h2WTNNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpaWE56YVc5dVQzQjBhVzl1Y3k1bWNtVmxSR2x0Wlc1emFXOXVUM1psY25KcFpHVnpLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUZ0dVlXMWxMQ0IyWVd4MVpWMGdiMllnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9jMlZ6YzJsdmJrOXdkR2x2Ym5NdVpuSmxaVVJwYldWdWMybHZiazkyWlhKeWFXUmxjeWtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnVZVzFsSUNFOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWm5KbFpTQmthVzFsYm5OcGIyNGdiM1psY25KcFpHVWdibUZ0WlNCdGRYTjBJR0psSUdFZ2MzUnlhVzVuT2lBa2UyNWhiV1Y5WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQWhQVDBnSjI1MWJXSmxjaWNnZkh3Z0lVNTFiV0psY2k1cGMwbHVkR1ZuWlhJb2RtRnNkV1VwSUh4OElIWmhiSFZsSUR3Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWm5KbFpTQmthVzFsYm5OcGIyNGdiM1psY25KcFpHVWdkbUZzZFdVZ2JYVnpkQ0JpWlNCaElHNXZiaTF1WldkaGRHbDJaU0JwYm5SbFoyVnlPaUFrZTNaaGJIVmxmV0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1aGJXVlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2JtRnRaU3dnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjB1WDA5eWRFRmtaRVp5WldWRWFXMWxibk5wYjI1UGRtVnljbWxrWlNoelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTd2dibUZ0WlU5bVpuTmxkQ3dnZG1Gc2RXVXBJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElITmxkQ0JoSUdaeVpXVWdaR2x0Wlc1emFXOXVJRzkyWlhKeWFXUmxPaUFrZTI1aGJXVjlJQzBnSkh0MllXeDFaWDB1WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jMlZ6YzJsdmJrOXdkR2x2Ym5NdVpYaDBjbUVnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdhWFJsY21GMFpVVjRkSEpoVDNCMGFXOXVjeWh6WlhOemFXOXVUM0IwYVc5dWN5NWxlSFJ5WVN3Z0p5Y3NJRzVsZHlCWFpXRnJVMlYwUEZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtQaWdwTENBb2EyVjVMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktHdGxlU3dnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdWRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktIWmhiSFZsTENCaGJHeHZZM01wTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gzWVhOdExsOVBjblJCWkdSVFpYTnphVzl1UTI5dVptbG5SVzUwY25rb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXNJR3RsZVVSaGRHRlBabVp6WlhRc0lIWmhiSFZsUkdGMFlVOW1abk5sZENrZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loZ1EyRnVKM1FnYzJWMElHRWdjMlZ6YzJsdmJpQmpiMjVtYVdjZ1pXNTBjbms2SUNSN2EyVjVmU0F0SUNSN2RtRnNkV1Y5TG1BcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1czTmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxMQ0JoYkd4dlkzTmRPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2FXWWdLSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IzWVhOdExsOVBjblJTWld4bFlYTmxVMlZ6YzJsdmJrOXdkR2x2Ym5Nb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCaGJHeHZZM011Wm05eVJXRmphQ2hoYkd4dll5QTlQaUIzWVhOdExsOW1jbVZsS0dGc2JHOWpLU2s3WEc0Z0lDQWdkR2h5YjNjZ1pUdGNiaUFnZlZ4dWZUdGNiaUlzSUNJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmx4dWFXMXdiM0owSUh0VVpXNXpiM0o5SUdaeWIyMGdKMjl1Ym5oeWRXNTBhVzFsTFdOdmJXMXZiaWM3WEc1Y2JpOHZJRlJvYVhNZ1ptbHNaU0JwYm1Oc2RXUmxjeUJqYjIxdGIyNGdaR1ZtYVc1cGRHbHZibk11SUZSb1pYa2daRzhnVGs5VUlHaGhkbVVnWkdWd1pXNWtaVzVqZVNCdmJpQjBhR1VnVjJWaVFYTnpaVzFpYkhrZ2FXNXpkR0Z1WTJVdVhHNWNiaThxS2x4dUlDb2dRMjl3YVdWa0lHWnliMjBnVDA1T1dDQmtaV1pwYm1sMGFXOXVMaUJWYzJVZ2RHaHBjeUIwYnlCa2NtOXdJR1JsY0dWdVpHVnVZM2tnSjI5dWJuaGZjSEp2ZEc4bklIUnZJR1JsWTNKbFlYTmxJR052YlhCcGJHVmtJQzVxY3lCbWFXeGxJSE5wZW1VdVhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQmxiblZ0SUVSaGRHRlVlWEJsSUh0Y2JpQWdkVzVrWldacGJtVmtJRDBnTUN4Y2JpQWdabXh2WVhRZ1BTQXhMRnh1SUNCMWFXNTBPQ0E5SURJc1hHNGdJR2x1ZERnZ1BTQXpMRnh1SUNCMWFXNTBNVFlnUFNBMExGeHVJQ0JwYm5ReE5pQTlJRFVzWEc0Z0lHbHVkRE15SUQwZ05peGNiaUFnYVc1ME5qUWdQU0EzTEZ4dUlDQnpkSEpwYm1jZ1BTQTRMRnh1SUNCaWIyOXNJRDBnT1N4Y2JpQWdabXh2WVhReE5pQTlJREV3TEZ4dUlDQmtiM1ZpYkdVZ1BTQXhNU3hjYmlBZ2RXbHVkRE15SUQwZ01USXNYRzRnSUhWcGJuUTJOQ0E5SURFekxGeHVJQ0JqYjIxd2JHVjROalFnUFNBeE5DeGNiaUFnWTI5dGNHeGxlREV5T0NBOUlERTFMRnh1SUNCaVpteHZZWFF4TmlBOUlERTJYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RXRndJSE4wY21sdVp5QjBaVzV6YjNJZ1pHRjBZU0IwYnlCbGJuVnRJSFpoYkhWbFhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQjBaVzV6YjNKRVlYUmhWSGx3WlZOMGNtbHVaMVJ2Ulc1MWJTQTlJQ2gwZVhCbE9pQnpkSEpwYm1jcE9pQkVZWFJoVkhsd1pTQTlQaUI3WEc0Z0lITjNhWFJqYUNBb2RIbHdaU2tnZTF4dUlDQWdJR05oYzJVZ0oybHVkRGduT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbWx1ZERnN1hHNGdJQ0FnWTJGelpTQW5kV2x1ZERnbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG5WcGJuUTRPMXh1SUNBZ0lHTmhjMlVnSjJKdmIyd25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExtSnZiMnc3WEc0Z0lDQWdZMkZ6WlNBbmFXNTBNVFluT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbWx1ZERFMk8xeHVJQ0FnSUdOaGMyVWdKM1ZwYm5ReE5pYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1JHRjBZVlI1Y0dVdWRXbHVkREUyTzF4dUlDQWdJR05oYzJVZ0oybHVkRE15SnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJFWVhSaFZIbHdaUzVwYm5Rek1qdGNiaUFnSUNCallYTmxJQ2QxYVc1ME16SW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExuVnBiblF6TWp0Y2JpQWdJQ0JqWVhObElDZG1iRzloZERFMkp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCRVlYUmhWSGx3WlM1bWJHOWhkREUyTzF4dUlDQWdJR05oYzJVZ0oyWnNiMkYwTXpJbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG1ac2IyRjBPMXh1SUNBZ0lHTmhjMlVnSjJac2IyRjBOalFuT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbVJ2ZFdKc1pUdGNiaUFnSUNCallYTmxJQ2R6ZEhKcGJtY25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExuTjBjbWx1Wnp0Y2JpQWdJQ0JqWVhObElDZHBiblEyTkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnUkdGMFlWUjVjR1V1YVc1ME5qUTdYRzRnSUNBZ1kyRnpaU0FuZFdsdWREWTBKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQkVZWFJoVkhsd1pTNTFhVzUwTmpRN1hHNWNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0IxYm5OMWNIQnZjblJsWkNCa1lYUmhJSFI1Y0dVNklDUjdkSGx3WlgxZ0tUdGNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJOWVhBZ1pXNTFiU0IyWVd4MVpTQjBieUJ6ZEhKcGJtY2dkR1Z1YzI5eUlHUmhkR0ZjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUhSbGJuTnZja1JoZEdGVWVYQmxSVzUxYlZSdlUzUnlhVzVuSUQwZ0tIUjVjR1ZRY205MGJ6b2dSR0YwWVZSNWNHVXBPaUJVWlc1emIzSXVWSGx3WlNBOVBpQjdYRzRnSUhOM2FYUmphQ0FvZEhsd1pWQnliM1J2S1NCN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNXBiblE0T2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2RwYm5RNEp6dGNiaUFnSUNCallYTmxJRVJoZEdGVWVYQmxMblZwYm5RNE9seHVJQ0FnSUNBZ2NtVjBkWEp1SUNkMWFXNTBPQ2M3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1aWIyOXNPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZGliMjlzSnp0Y2JpQWdJQ0JqWVhObElFUmhkR0ZVZVhCbExtbHVkREUyT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2RwYm5ReE5pYzdYRzRnSUNBZ1kyRnpaU0JFWVhSaFZIbHdaUzUxYVc1ME1UWTZYRzRnSUNBZ0lDQnlaWFIxY200Z0ozVnBiblF4TmljN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNXBiblF6TWpwY2JpQWdJQ0FnSUhKbGRIVnliaUFuYVc1ME16SW5PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1ZFdsdWRETXlPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZDFhVzUwTXpJbk8xeHVJQ0FnSUdOaGMyVWdSR0YwWVZSNWNHVXVabXh2WVhReE5qcGNiaUFnSUNBZ0lISmxkSFZ5YmlBblpteHZZWFF4TmljN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNW1iRzloZERwY2JpQWdJQ0FnSUhKbGRIVnliaUFuWm14dllYUXpNaWM3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1a2IzVmliR1U2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMlpzYjJGME5qUW5PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1YzNSeWFXNW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZHpkSEpwYm1jbk8xeHVJQ0FnSUdOaGMyVWdSR0YwWVZSNWNHVXVhVzUwTmpRNlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjJsdWREWTBKenRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG5WcGJuUTJORHBjYmlBZ0lDQWdJSEpsZEhWeWJpQW5kV2x1ZERZMEp6dGNibHh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUhWdWMzVndjRzl5ZEdWa0lHUmhkR0VnZEhsd1pUb2dKSHQwZVhCbFVISnZkRzk5WUNrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2daMlYwSUhSbGJuTnZjaUJsYkdWdFpXNTBJSE5wZW1VZ2FXNGdZbmwwWlhNZ1lua2dkR2hsSUdkcGRtVnVJR1JoZEdFZ2RIbHdaVnh1SUNvZ1FISmxkSFZ5Ym5NZ2MybDZaU0JwYmlCcGJuUmxaMlZ5SUc5eUlIVnVaR1ZtYVc1bFpDQnBaaUIwYUdVZ1pHRjBZU0IwZVhCbElHbHpJRzV2ZENCemRYQndiM0owWldSY2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHZGxkRlJsYm5OdmNrVnNaVzFsYm5SVGFYcGxJRDBnS0dSaGRHVlVlWEJsT2lCdWRXMWlaWElwT2lCdWRXMWlaWEo4WEc0Z0lDQWdkVzVrWldacGJtVmtJRDArSUZ0MWJtUmxabWx1WldRc0lEUXNJREVzSURFc0lESXNJRElzSURRc0lEZ3NJSFZ1WkdWbWFXNWxaQ3dnTVN3Z01pd2dPQ3dnTkN3Z09Dd2dkVzVrWldacGJtVmtMQ0IxYm1SbFptbHVaV1FzSUhWdVpHVm1hVzVsWkYxYlpHRjBaVlI1Y0dWZE8xeHVYRzR2S2lwY2JpQXFJR2RsZENCMGVYQmxaQ0JoY25KaGVTQmpiMjV6ZEhKMVkzUnZjaUJpZVNCMGFHVWdaMmwyWlc0Z2RHVnVjMjl5SUhSNWNHVmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJSFJsYm5OdmNsUjVjR1ZVYjFSNWNHVmtRWEp5WVhsRGIyNXpkSEoxWTNSdmNpQTlJQ2gwZVhCbE9pQlVaVzV6YjNJdVZIbHdaU2s2SUVac2IyRjBNekpCY25KaGVVTnZibk4wY25WamRHOXlmRlZwYm5RNFFYSnlZWGxEYjI1emRISjFZM1J2Y254Y2JpQWdJQ0JKYm5RNFFYSnlZWGxEYjI1emRISjFZM1J2Y254VmFXNTBNVFpCY25KaGVVTnZibk4wY25WamRHOXlmRWx1ZERFMlFYSnlZWGxEYjI1emRISjFZM1J2Y254SmJuUXpNa0Z5Y21GNVEyOXVjM1J5ZFdOMGIzSjhRbWxuU1c1ME5qUkJjbkpoZVVOdmJuTjBjblZqZEc5eWZGeHVJQ0FnSUZWcGJuUTRRWEp5WVhsRGIyNXpkSEoxWTNSdmNueEdiRzloZERZMFFYSnlZWGxEYjI1emRISjFZM1J2Y254VmFXNTBNekpCY25KaGVVTnZibk4wY25WamRHOXlmRUpwWjFWcGJuUTJORUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSWdQVDRnZTF4dUlDQWdJQ0FnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oyWnNiMkYwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwTVRaQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5abXh2WVhRek1pYzZYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRVpzYjJGME16SkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZFdsdWREZ25PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJWYVc1ME9FRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2RwYm5RNEp6cGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdTVzUwT0VGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZDFhVzUwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwTVRaQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5hVzUwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkpiblF4TmtGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZHBiblF6TWljNlhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFbHVkRE15UVhKeVlYazdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oySnZiMnduT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVmFXNTBPRUZ5Y21GNU8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkbWJHOWhkRFkwSnpwY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JteHZZWFEyTkVGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZDFhVzUwTXpJbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwTXpKQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5hVzUwTmpRbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkNhV2RKYm5RMk5FRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2QxYVc1ME5qUW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJDYVdkVmFXNTBOalJCY25KaGVUdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZSFZ1YzNWd2NHOXlkR1ZrSUhSNWNHVTZJQ1I3ZEhsd1pYMWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0dktpcGNiaUFxSUUxaGNDQnpkSEpwYm1jZ2JHOW5JR3hsZG1Wc0lIUnZJR2x1ZEdWblpYSWdkbUZzZFdWY2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHeHZaMHhsZG1Wc1UzUnlhVzVuVkc5RmJuVnRJRDBnS0d4dloweGxkbVZzUHpvZ0ozWmxjbUp2YzJVbmZDZHBibVp2SjN3bmQyRnlibWx1WnlkOEoyVnljbTl5SjN3blptRjBZV3duS1RvZ2JuVnRZbVZ5SUQwK0lIdGNiaUFnYzNkcGRHTm9JQ2hzYjJkTVpYWmxiQ2tnZTF4dUlDQWdJR05oYzJVZ0ozWmxjbUp2YzJVbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURBN1hHNGdJQ0FnWTJGelpTQW5hVzVtYnljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0JqWVhObElDZDNZWEp1YVc1bkp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBeU8xeHVJQ0FnSUdOaGMyVWdKMlZ5Y205eUp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBek8xeHVJQ0FnSUdOaGMyVWdKMlpoZEdGc0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBME8xeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZSFZ1YzNWd2NHOXlkR1ZrSUd4dloyZHBibWNnYkdWMlpXdzZJQ1I3Ykc5blRHVjJaV3g5WUNrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dRMmhsWTJzZ2QyaGxkR2hsY2lCMGFHVWdaMmwyWlc0Z2RHVnVjMjl5SUhSNWNHVWdhWE1nYzNWd2NHOXlkR1ZrSUdKNUlFZFFWU0JpZFdabVpYSmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR2x6UjNCMVFuVm1abVZ5VTNWd2NHOXlkR1ZrVkhsd1pTQTlJQ2gwZVhCbE9pQlVaVzV6YjNJdVZIbHdaU2s2SUhSNWNHVWdhWE1nVkdWdWMyOXlMa2R3ZFVKMVptWmxja1JoZEdGVWVYQmxjeUE5UGlCMGVYQmxJRDA5UFNBblpteHZZWFF6TWljZ2ZIeGNiaUFnSUNCMGVYQmxJRDA5UFNBbmFXNTBNekluSUh4OElIUjVjR1VnUFQwOUlDZHBiblEyTkNjZ2ZId2dkSGx3WlNBOVBUMGdKMkp2YjJ3bklIeDhJSFI1Y0dVZ1BUMDlJQ2RtYkc5aGRERTJKeUI4ZkNCMGVYQmxJRDA5UFNBbmRXbHVkRE15Snp0Y2JseHVMeW9xWEc0Z0tpQk5ZWEFnYzNSeWFXNW5JR1JoZEdFZ2JHOWpZWFJwYjI0Z2RHOGdhVzUwWldkbGNpQjJZV3gxWlZ4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ1pHRjBZVXh2WTJGMGFXOXVVM1J5YVc1blZHOUZiblZ0SUQwZ0tHeHZZMkYwYVc5dU9pQlVaVzV6YjNJdVJHRjBZVXh2WTJGMGFXOXVLVG9nYm5WdFltVnlJRDArSUh0Y2JpQWdjM2RwZEdOb0lDaHNiMk5oZEdsdmJpa2dlMXh1SUNBZ0lHTmhjMlVnSjI1dmJtVW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ1kyRnpaU0FuWTNCMUp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBeE8xeHVJQ0FnSUdOaGMyVWdKMk53ZFMxd2FXNXVaV1FuT2x4dUlDQWdJQ0FnY21WMGRYSnVJREk3WEc0Z0lDQWdZMkZ6WlNBbmRHVjRkSFZ5WlNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnTXp0Y2JpQWdJQ0JqWVhObElDZG5jSFV0WW5WbVptVnlKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQTBPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUhWdWMzVndjRzl5ZEdWa0lHUmhkR0VnYkc5allYUnBiMjQ2SUNSN2JHOWpZWFJwYjI1OVlDazdYRzRnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nVFdGd0lHbHVkR1ZuWlhJZ1pHRjBZU0JzYjJOaGRHbHZiaUIwYnlCemRISnBibWNnZG1Gc2RXVmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR1JoZEdGTWIyTmhkR2x2YmtWdWRXMVViMU4wY21sdVp5QTlJQ2hzYjJOaGRHbHZiam9nYm5WdFltVnlLVG9nVkdWdWMyOXlMa1JoZEdGTWIyTmhkR2x2Ym54MWJtUmxabWx1WldRZ1BUNWNiaUFnSUNBb1d5ZHViMjVsSnl3Z0oyTndkU2NzSUNkamNIVXRjR2x1Ym1Wa0p5d2dKM1JsZUhSMWNtVW5MQ0FuWjNCMUxXSjFabVpsY2lkZElHRnpJR052Ym5OMEtWdHNiMk5oZEdsdmJsMDdYRzRpTENBaUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc1Y2JtbHRjRzl5ZENBcUlHRnpJR1p6SUdaeWIyMGdKMlp6Snp0Y2JtbHRjRzl5ZENCN2NtVmhaRVpwYkdWOUlHWnliMjBnSjI1dlpHVTZabk12Y0hKdmJXbHpaWE1uTzF4dVhHNHZLaXBjYmlBcUlFeHZZV1FnWVNCbWFXeGxJR2x1ZEc4Z1lTQlZhVzUwT0VGeWNtRjVMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQm1hV3hsSUMwZ2RHaGxJR1pwYkdVZ2RHOGdiRzloWkM0Z1EyRnVJR0psSUdFZ1ZWSk1MM0JoZEdnc0lHRWdRbXh2WWl3Z1lXNGdRWEp5WVhsQ2RXWm1aWElzSUc5eUlHRWdWV2x1ZERoQmNuSmhlUzVjYmlBcUlFQnlaWFIxY201eklHRWdWV2x1ZERoQmNuSmhlU0JqYjI1MFlXbHVhVzVuSUhSb1pTQm1hV3hsSUdSaGRHRXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JzYjJGa1JtbHNaU0E5SUdGemVXNWpLR1pwYkdVNklITjBjbWx1WjN4Q2JHOWlmRUZ5Y21GNVFuVm1abVZ5VEdsclpYeFZhVzUwT0VGeWNtRjVLVG9nVUhKdmJXbHpaVHhWYVc1ME9FRnljbUY1UGlBOVBpQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1ptbHNaU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIQnliMk5sYzNNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIQnliMk5sYzNNdWRtVnljMmx2Ym5NZ0ppWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN5NXViMlJsS1NCN1hHNGdJQ0FnSUNBdkx5QnNiMkZrSUdacGJHVWdhVzUwYnlCQmNuSmhlVUoxWm1abGNpQnBiaUJPYjJSbExtcHpYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGVnBiblE0UVhKeVlYa29ZWGRoYVhRZ2NtVmhaRVpwYkdVb1ptbHNaU2twTzF4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWlM1amIyUmxJRDA5UFNBblJWSlNYMFpUWDBaSlRFVmZWRTlQWDB4QlVrZEZKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJR1pwYkdVZ2FYTWdkRzl2SUd4aGNtZGxMQ0IxYzJVZ1puTXVZM0psWVhSbFVtVmhaRk4wY21WaGJTQnBibk4wWldGa1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzUnlaV0Z0SUQwZ1puTXVZM0psWVhSbFVtVmhaRk4wY21WaGJTaG1hV3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamFIVnVhM002SUZWcGJuUTRRWEp5WVhsYlhTQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lHWnZjaUJoZDJGcGRDQW9ZMjl1YzNRZ1kyaDFibXNnYjJZZ2MzUnlaV0Z0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUhWdWEzTXVjSFZ6YUNoamFIVnVheWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVldsdWREaEJjbkpoZVNoQ2RXWm1aWEl1WTI5dVkyRjBLR05vZFc1cmN5a3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJR1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDOHZJR3h2WVdRZ1ptbHNaU0JwYm5SdklFRnljbUY1UW5WbVptVnlJR2x1SUdKeWIzZHpaWEp6WEc0Z0lDQWdJQ0JqYjI1emRDQnlaWE53YjI1elpTQTlJR0YzWVdsMElHWmxkR05vS0dacGJHVXBPMXh1SUNBZ0lDQWdhV1lnS0NGeVpYTndiMjV6WlM1dmF5a2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZR1poYVd4bFpDQjBieUJzYjJGa0lHVjRkR1Z5Ym1Gc0lHUmhkR0VnWm1sc1pUb2dKSHRtYVd4bGZXQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMjl1YzNRZ1kyOXVkR1Z1ZEV4bGJtZDBhRWhsWVdSbGNpQTlJSEpsYzNCdmJuTmxMbWhsWVdSbGNuTXVaMlYwS0NkRGIyNTBaVzUwTFV4bGJtZDBhQ2NwTzF4dUlDQWdJQ0FnWTI5dWMzUWdabWxzWlZOcGVtVWdQU0JqYjI1MFpXNTBUR1Z1WjNSb1NHVmhaR1Z5SUQ4Z2NHRnljMlZKYm5Rb1kyOXVkR1Z1ZEV4bGJtZDBhRWhsWVdSbGNpd2dNVEFwSURvZ01EdGNiaUFnSUNBZ0lHbG1JQ2htYVd4bFUybDZaU0E4SURFd056TTNOREU0TWpRZ0x5b2dNVWRDSUNvdktTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdRMjl1ZEdWdWRDMU1aVzVuZEdnZ2FHVmhaR1Z5SUdseklHNXZkQ0J6WlhRc0lIZGxJR05oYm01dmRDQmtaWFJsY20xcGJtVWdkR2hsSUdacGJHVWdjMmw2WlM0Z1YyVWdZWE56ZFcxbElHbDBJR2x6SUhOdFlXeHNJR1Z1YjNWbmFDQjBiMXh1SUNBZ0lDQWdJQ0F2THlCc2IyRmtJR2x1ZEc4Z2JXVnRiM0o1TGx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGVnBiblE0UVhKeVlYa29ZWGRoYVhRZ2NtVnpjRzl1YzJVdVlYSnlZWGxDZFdabVpYSW9LU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlCbWFXeGxJR2x6SUhSdmJ5QnNZWEpuWlN3Z2RYTmxJSE4wY21WaGJTQnBibk4wWldGa1hHNGdJQ0FnSUNBZ0lHbG1JQ2doY21WemNHOXVjMlV1WW05a2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWm1GcGJHVmtJSFJ2SUd4dllXUWdaWGgwWlhKdVlXd2daR0YwWVNCbWFXeGxPaUFrZTJacGJHVjlMQ0J1YnlCeVpYTndiMjV6WlNCaWIyUjVMbUFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKbFlXUmxjaUE5SUhKbGMzQnZibk5sTG1KdlpIa3VaMlYwVW1WaFpHVnlLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR0oxWm1abGNqdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIwY25rZ2RHOGdZM0psWVhSbElFRnljbUY1UW5WbVptVnlJR1JwY21WamRHeDVYRzRnSUNBZ0lDQWdJQ0FnWW5WbVptVnlJRDBnYm1WM0lFRnljbUY1UW5WbVptVnlLR1pwYkdWVGFYcGxLVHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNobElHbHVjM1JoYm1ObGIyWWdVbUZ1WjJWRmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZFhObElGZGxZa0Z6YzJWdFlteDVJRTFsYlc5eWVTQjBieUJoYkd4dlkyRjBaU0JzWVhKblpYSWdRWEp5WVhsQ2RXWm1aWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCaFoyVnpJRDBnVFdGMGFDNWpaV2xzS0dacGJHVlRhWHBsSUM4Z05qVTFNellwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZblZtWm1WeUlEMGdibVYzSUZkbFlrRnpjMlZ0WW14NUxrMWxiVzl5ZVNoN2FXNXBkR2xoYkRvZ2NHRm5aWE1zSUcxaGVHbHRkVzA2SUhCaFoyVnpmU2t1WW5WbVptVnlPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCbE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J2Wm1aelpYUWdQU0F3TzF4dUlDQWdJQ0FnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRZMjl1YzNSaGJuUXRZMjl1WkdsMGFXOXVYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaDBjblZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2UyUnZibVVzSUhaaGJIVmxmU0E5SUdGM1lXbDBJSEpsWVdSbGNpNXlaV0ZrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dSdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmphSFZ1YTFOcGVtVWdQU0IyWVd4MVpTNWllWFJsVEdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR05vZFc1cklEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1luVm1abVZ5TENCdlptWnpaWFFzSUdOb2RXNXJVMmw2WlNrN1hHNGdJQ0FnSUNBZ0lDQWdZMmgxYm1zdWMyVjBLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0J2Wm1aelpYUWdLejBnWTJoMWJtdFRhWHBsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hpZFdabVpYSXNJREFzSUdacGJHVlRhWHBsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdmU0JsYkhObElHbG1JQ2htYVd4bElHbHVjM1JoYm1ObGIyWWdRbXh2WWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZXbHVkRGhCY25KaGVTaGhkMkZwZENCbWFXeGxMbUZ5Y21GNVFuVm1abVZ5S0NrcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0dacGJHVWdhVzV6ZEdGdVkyVnZaaUJWYVc1ME9FRnljbUY1S1NCN1hHNGdJQ0FnY21WMGRYSnVJR1pwYkdVN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlZhVzUwT0VGeWNtRjVLR1pwYkdVcE8xeHVJQ0I5WEc1OU8xeHVJaXdnSW1WNGNHOXlkQ0JqYjI1emRDQnlaV0ZrUm1sc1pTQTlJSFZ1WkdWbWFXNWxaRHRsZUhCdmNuUWdZMjl1YzNRZ2NtVmhaRVpwYkdWVGVXNWpJRDBnZFc1a1pXWnBibVZrTzJWNGNHOXlkQ0JqYjI1emRDQmpjbVZoZEdWU1pXRmtVM1J5WldGdElEMGdkVzVrWldacGJtVmtPeUlzSUNJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmx4dWFXMXdiM0owSUh0RmJuWXNJRWx1Wm1WeVpXNWpaVk5sYzNOcGIyNHNJRlJsYm5OdmNuMGdabkp2YlNBbmIyNXVlSEoxYm5ScGJXVXRZMjl0Ylc5dUp6dGNibHh1YVcxd2IzSjBJSHRUWlhKcFlXeHBlbUZpYkdWSmJuUmxjbTVoYkVKMVptWmxjaXdnVTJWeWFXRnNhWHBoWW14bFUyVnpjMmx2YmsxbGRHRmtZWFJoTENCVFpYSnBZV3hwZW1GaWJHVlVaVzV6YjNKTlpYUmhaR0YwWVN3Z1ZHVnVjMjl5VFdWMFlXUmhkR0Y5SUdaeWIyMGdKeTR2Y0hKdmVIa3RiV1Z6YzJGblpYTW5PMXh1YVcxd2IzSjBJSHR6WlhSU2RXNVBjSFJwYjI1emZTQm1jbTl0SUNjdUwzSjFiaTF2Y0hScGIyNXpKenRjYm1sdGNHOXlkQ0I3YzJWMFUyVnpjMmx2Yms5d2RHbHZibk45SUdaeWIyMGdKeTR2YzJWemMybHZiaTF2Y0hScGIyNXpKenRjYm1sdGNHOXlkQ0I3WkdGMFlVeHZZMkYwYVc5dVUzUnlhVzVuVkc5RmJuVnRMQ0JuWlhSVVpXNXpiM0pGYkdWdFpXNTBVMmw2WlN3Z2FYTkhjSFZDZFdabVpYSlRkWEJ3YjNKMFpXUlVlWEJsTENCc2IyZE1aWFpsYkZOMGNtbHVaMVJ2Ulc1MWJTd2dkR1Z1YzI5eVJHRjBZVlI1Y0dWRmJuVnRWRzlUZEhKcGJtY3NJSFJsYm5OdmNrUmhkR0ZVZVhCbFUzUnlhVzVuVkc5RmJuVnRMQ0IwWlc1emIzSlVlWEJsVkc5VWVYQmxaRUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSjlJR1p5YjIwZ0p5NHZkMkZ6YlMxamIyMXRiMjRuTzF4dWFXMXdiM0owSUh0blpYUkpibk4wWVc1alpYMGdabkp2YlNBbkxpOTNZWE50TFdaaFkzUnZjbmtuTzF4dWFXMXdiM0owSUh0aGJHeHZZMWRoYzIxVGRISnBibWNzSUdOb1pXTnJUR0Z6ZEVWeWNtOXlmU0JtY205dElDY3VMM2RoYzIwdGRYUnBiSE1uTzF4dWFXMXdiM0owSUh0c2IyRmtSbWxzWlgwZ1puSnZiU0FuTGk5M1lYTnRMWFYwYVd4ekxXeHZZV1F0Wm1sc1pTYzdYRzVjYmk4dklDTnlaV2RwYjI0Z1NXNXBkR2xoYkdsNllYUnBiMjV6WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxjbVVnWVhKbElEUWdaR2xtWm1WeVpXNTBJRndpYVc1cGRHbGhiR2w2WVhScGIyNWNJaUJ6ZEdWd2N5Qm1iM0lnVDFKVUxpQlVhR1Y1SUdoaGNIQmxiaUJwYmlCa2FXWm1aWEpsYm5RZ2NHeGhZMlZ6SUdGdVpDQmthV1ptWlhKbGJuUWdkR2x0WlM1Y2JpQXFYRzRnS2lBeExpQktZWFpoVTJOeWFYQjBJR2x1YVhScFlXeHBlbUYwYVc5dUlHWnZjaUJ2Ym01NGNuVnVkR2x0WlMxamIyMXRiMjRnWVc1a0lHOXVibmh5ZFc1MGFXMWxMWGRsWWk1Y2JpQXFJQ0FnSUZSb2FYTWdhWE1nZEdobElHWnBjbk4wSUdsdWFYUnBZV3hwZW1GMGFXOXVJSE4wWlhBdUlFbHVJSFJvYVhNZ2MzUmxjQ3dnYjI1dWVISjFiblJwYldVdGQyVmlJR05oYkd4eklHOXVibmh5ZFc1MGFXMWxMV052YlcxdmJpZHpJSEpsWjJsemRHVnlRbUZqYTJWdVpDZ3BYRzRnS2lCbWRXNWpkR2x2YmlCdGRXeDBhWEJzWlNCMGFXMWxjeUIwYnlCeVpXZHBjM1JsY2lCaGJHd2dkR2hsSUdGMllXbHNZV0pzWlNCaVlXTnJaVzVrY3k0Z1ZHaGxJR0poWTJ0bGJtUWdjbVZuYVhOMGNtRjBhVzl1SUdseklIWmxjbmtnWm1GemRDNGdTWFFnYjI1c2VWeHVJQ29nY21WbmFYTjBaWEp6SUhSb1pTQmlZV05yWlc1a0lHNWhiV1VnZDJsMGFDQjBhR1VnZFc1cGJtbDBhV0ZzYVhwbFpDQmlZV05yWlc1a0lHOWlhbVZqZEM0Z1RtOGdhR1ZoZG5rZ2FXNXBkR2xoYkdsNllYUnBiMjRnYVhNZ1pHOXVaU0JwYmlCMGFHbHpJSE4wWlhBdVhHNGdLaUFnSUNCU1pXWmxjaUIwYnlCM1pXSXZiR2xpTDJsdVpHVjRMblJ6SUdadmNpQjBhR1VnWW1GamEyVnVaQ0J5WldkcGMzUnlZWFJwYjI0dVhHNGdLbHh1SUNvZ01pNGdWMlZpUVhOelpXMWliSGtnWVhKMGFXWmhZM1FnYVc1cGRHbGhiR2w2WVhScGIyNHVYRzRnS2lBZ0lDQlVhR2x6SUdoaGNIQmxibk1nZDJobGJpQmhibmtnY21WbmFYTjBaWEpsWkNCM1lYTnRJR0poWTJ0bGJtUWdhWE1nZFhObFpDQm1iM0lnZEdobElHWnBjbk4wSUhScGJXVWdLR2xsTGlCZ2IzSjBMa2x1Wm1WeVpXNWpaVk5sYzNOcGIyNHVZM0psWVhSbEtDbGdJRzl5WEc0Z0tpQmdiM0owTGxSeVlXbHVhVzVuVTJWemMybHZiaTVqY21WaGRHVW9LV0FnYVhNZ1kyRnNiR1ZrS1M0Z1NXNGdkR2hwY3lCemRHVndMQ0J2Ym01NGNuVnVkR2x0WlMxM1pXSWdaRzlsY3lCMGFHVWdabTlzYkc5M2FXNW5jenBjYmlBcUlDQWdJQ0F0SUdOeVpXRjBaU0JoSUhCeWIzaDVJSGR2Y210bGNpQmhibVFnYldGclpTQnpkWEpsSUhSb1pTQndjbTk0ZVNCM2IzSnJaWElnYVhNZ2NtVmhaSGtnZEc4Z2NtVmpaV2wyWlNCdFpYTnpZV2RsY3l3Z2FXWWdjSEp2ZUhrZ2FYTWdaVzVoWW14bFpDNWNiaUFxSUNBZ0lDQXRJSEJsY21admNtMGdabVZoZEhWeVpTQmtaWFJsWTNScGIyNHNJR3h2WTJGMFpTQmpiM0p5WldOMElGZGxZa0Z6YzJWdFlteDVJR0Z5ZEdsbVlXTjBJSEJoZEdnZ1lXNWtJR05oYkd3Z2RHaGxJRVZ0YzJOeWFYQjBaVzRnWjJWdVpYSmhkR1ZrWEc0Z0tpQktZWFpoVTJOeWFYQjBJR052WkdVZ2RHOGdhVzVwZEdsaGJHbDZaU0IwYUdVZ1YyVmlRWE56WlcxaWJIa2djblZ1ZEdsdFpTNWNiaUFxSUNBZ0lDQWdJQ0FnTFNCcFppQndjbTk0ZVNCcGN5QmxibUZpYkdWa0xDQjBhR2x6SUhOMFpYQWdhR0Z3Y0dWdWN5QnBiaUIwYUdVZ2NISnZlSGtnZDI5eWEyVnlJSFZ6YVc1bklHMWxjM05oWjJVZ0oybHVhWFF0ZDJGemJTY3VYRzRnS2lBZ0lDQWdJQ0FnSUMwZ1pHOTNibXh2WVdScGJtY2dkR2hsSUNkdmNuUXRkMkZ6YlhzdUxpNTlMbmRoYzIwbklHWnBiR1VnYVhNZ1pHOXVaU0JwYmlCMGFHbHpJSE4wWlhBdVhHNGdLaUFnSUNBZ0lDQWdJQzBnYVdZZ2JYVnNkR2t0ZEdoeVpXRmtJR2x6SUdWdVlXSnNaV1FzSUc5dVpTQnZjaUJ0YjNKbElIZGxZbmR2Y210bGNpQjNhV3hzSUdKbElHTnlaV0YwWldRZ2RHOGdhVzVwZEdsaGJHbDZaU0IwYUdVZ1VGUm9jbVZoWkNCMGFISmxZV1J3YjI5c0xseHVJQ3BjYmlBcUlETXVJRTlTVkNCbGJuWnBjbTl1YldWdWRDQnBibWwwYVdGc2FYcGhkR2x2Ymk1Y2JpQXFJQ0FnSUZSb2FYTWdhR0Z3Y0dWdWN5QmhablJsY2lCemRHVndJREl1SUVsdUlIUm9hWE1nYzNSbGNDd2diMjV1ZUhKMWJuUnBiV1V0ZDJWaUlIQmxjbVp2Y20xeklFOU9UbGdnVW5WdWRHbHRaU0JsYm5acGNtOXViV1Z1ZENCcGJtbDBhV0ZzYVhwaGRHbHZiaTVjYmlBcUlFWjFibU4wYVc5dUlHQmZUM0owU1c1cGRDZ3BZQ0JwY3lCallXeHNaV1FnYVc0Z2RHaHBjeUJ6ZEdWd0xseHVJQ29nSUNBZ0lDMGdhV1lnY0hKdmVIa2dhWE1nWlc1aFlteGxaQ3dnZEdocGN5QnpkR1Z3SUdoaGNIQmxibk1nYVc0Z2RHaGxJSEJ5YjNoNUlIZHZjbXRsY2lCMWMybHVaeUJ0WlhOellXZGxJQ2RwYm1sMExXOXlkQ2N1WEc0Z0tpQWdJQ0FnTFNCc2IyZG5hVzVuSUd4bGRtVnNJQ2h2Y25RdVpXNTJMbXh2WjB4bGRtVnNLU0JoYm1RZ2RHaHlaV0ZrSUc1MWJXSmxjaUFvYjNKMExtVnVkaTUzWVhOdExtNTFiVlJvY21WaFpITXBJR0Z5WlNCelpYUWdhVzRnZEdocGN5QnpkR1Z3TGx4dUlDcGNiaUFxSURRdUlGTmxjM05wYjI0Z2FXNXBkR2xoYkdsNllYUnBiMjR1WEc0Z0tpQWdJQ0JVYUdseklHaGhjSEJsYm5NZ2QyaGxiaUJnYjNKMExrbHVabVZ5Wlc1alpWTmxjM05wYjI0dVkzSmxZWFJsS0NsZ0lHOXlJR0J2Y25RdVZISmhhVzVwYm1kVFpYTnphVzl1TG1OeVpXRjBaU2dwWUNCcGN5QmpZV3hzWldRdUlGVnViR2xyWlNCMGFHVWdabWx5YzNRZ00xeHVJQ29nYzNSbGNITWdLSFJvWlhrZ2IyNXNlU0JqWVd4c1pXUWdiMjVqWlNrc0lIUm9hWE1nYzNSbGNDQjNhV3hzSUdKbElHUnZibVVnWm05eUlHVmhZMmdnYzJWemMybHZiaTRnU1c0Z2RHaHBjeUJ6ZEdWd0xDQnZibTU0Y25WdWRHbHRaUzEzWldJZ1pHOWxjeUIwYUdWY2JpQXFJR1p2Ykd4dmQybHVaM002WEc0Z0tpQWdJQ0JKWmlCMGFHVWdjR0Z5WVcxbGRHVnlJR2x6SUdFZ1ZWSk1PbHh1SUNvZ0lDQWdMU0JrYjNkdWJHOWhaQ0IwYUdVZ2JXOWtaV3dnWkdGMFlTQm1jbTl0SUhSb1pTQlZVa3d1WEc0Z0tpQWdJQ0F0SUdOdmNIa2dkR2hsSUcxdlpHVnNJR1JoZEdFZ2RHOGdkR2hsSUZkQlUwMGdhR1ZoY0M0Z0tIQnliM2g1T2lBblkyOXdlUzFtY205dEp5bGNiaUFxSUNBZ0lDMGdaR1Z5WldabGNtVnVZMlVnZEdobElHMXZaR1ZzSUdKMVptWmxjaTRnVkdocGN5QnpkR1Z3SUdGc2JHOTNjeUIwYUdVZ2IzSnBaMmx1WVd3Z1FYSnlZWGxDZFdabVpYSWdkRzhnWW1VZ1oyRnlZbUZuWlNCamIyeHNaV04wWldRdVhHNGdLaUFnSUNBdElHTmhiR3dnWUY5UGNuUkRjbVZoZEdWVFpYTnphVzl1S0NsZ0lIUnZJR055WldGMFpTQjBhR1VnYzJWemMybHZiaTRnS0hCeWIzaDVPaUFuWTNKbFlYUmxKeWxjYmlBcVhHNGdLaUFnSUNCSlppQjBhR1VnY0dGeVlXMWxkR1Z5SUdseklHRWdWV2x1ZERoQmNuSmhlU0J2WW1wbFkzUTZYRzRnS2lBZ0lDQXRJR052Y0hrZ2RHaGxJRzF2WkdWc0lHUmhkR0VnZEc4Z2RHaGxJRmRCVTAwZ2FHVmhjQzRnS0hCeWIzaDVPaUFuWTI5d2VTMW1jbTl0SnlsY2JpQXFJQ0FnSUMwZ1kyRnNiQ0JnWDA5eWRFTnlaV0YwWlZObGMzTnBiMjRvS1dBZ2RHOGdZM0psWVhSbElIUm9aU0J6WlhOemFXOXVMaUFvY0hKdmVIazZJQ2RqY21WaGRHVW5LVnh1SUNwY2JpQXFYRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQnBibWwwYVdGc2FYcGxJRTlTVkNCbGJuWnBjbTl1YldWdWRDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2JuVnRWR2h5WldGa2N5QlRaWFJIYkc5aVlXeEpiblJ5WVU5d1RuVnRWR2h5WldGa2N5aHVkVzFVYUhKbFlXUnpLVnh1SUNvZ1FIQmhjbUZ0SUd4dloyZHBibWRNWlhabGJDQkRjbVZoZEdWRmJuWW9jM1JoZEdsalgyTmhjM1E4VDNKMFRHOW5aMmx1WjB4bGRtVnNQaWhzYjJkbmFXNW5YMnhsZG1Wc0tTbGNiaUFxTDF4dVkyOXVjM1FnYVc1cGRFOXlkQ0E5SUNodWRXMVVhSEpsWVdSek9pQnVkVzFpWlhJc0lHeHZaMmRwYm1kTVpYWmxiRG9nYm5WdFltVnlLVG9nZG05cFpDQTlQaUI3WEc0Z0lHTnZibk4wSUdWeWNtOXlRMjlrWlNBOUlHZGxkRWx1YzNSaGJtTmxLQ2t1WDA5eWRFbHVhWFFvYm5WdFZHaHlaV0ZrY3l3Z2JHOW5aMmx1WjB4bGRtVnNLVHRjYmlBZ2FXWWdLR1Z5Y205eVEyOWtaU0FoUFQwZ01Da2dlMXh1SUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0NkRFlXNWNYQ2QwSUdsdWFYUnBZV3hwZW1VZ2IyNXVlSEoxYm5ScGJXVXVKeWs3WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ2FXNTBhV0ZzYVhwbElISjFiblJwYldVZ1pXNTJhWEp2Ym0xbGJuUXVYRzRnS2lCQWNHRnlZVzBnWlc1MklIQmhjM05sWkNCcGJpQjBhR1VnWlc1MmFYSnZibTFsYm5RZ1kyOXVabWxuSUc5aWFtVmpkQzVjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUdsdWFYUlNkVzUwYVcxbElEMGdZWE41Ym1Nb1pXNTJPaUJGYm5ZcE9pQlFjbTl0YVhObFBIWnZhV1ErSUQwK0lIdGNiaUFnTHk4Z2FXNXBkQ0JQVWxSY2JpQWdhVzVwZEU5eWRDaGxibll1ZDJGemJTNXVkVzFVYUhKbFlXUnpJU3dnYkc5blRHVjJaV3hUZEhKcGJtZFViMFZ1ZFcwb1pXNTJMbXh2WjB4bGRtVnNLU2s3WEc1OU8xeHVYRzR2S2lwY2JpQXFJSEJsY21admNtMGdSVkFnYzNCbFkybG1hV01nYVc1cGRHbGhiR2w2WVhScGIyNHVYRzRnS2x4dUlDb2dRSEJoY21GdElHVnVkbHh1SUNvZ1FIQmhjbUZ0SUdWd1RtRnRaVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVc1cGRFVndJRDBnWVhONWJtTW9aVzUyT2lCRmJuWXNJR1Z3VG1GdFpUb2djM1J5YVc1bktUb2dVSEp2YldselpUeDJiMmxrUGlBOVBpQjdYRzRnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRGUWtkUVZTQW1KaUJsY0U1aGJXVWdQVDA5SUNkM1pXSm5jSFVuS1NCN1hHNGdJQ0FnTHk4Z2NHVnlabTl5YlNCWFpXSkhVRlVnWVhaaGFXeGhZbWxzYVhSNUlHTm9aV05yWEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ1WVhacFoyRjBiM0lnUFQwOUlDZDFibVJsWm1sdVpXUW5JSHg4SUNGdVlYWnBaMkYwYjNJdVozQjFLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMWRsWWtkUVZTQnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0lHbHVJR04xY25KbGJuUWdaVzUyYVhKdmJtMWxiblFuS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ1lXUmhjSFJsY2lBOUlHRjNZV2wwSUc1aGRtbG5ZWFJ2Y2k1bmNIVXVjbVZ4ZFdWemRFRmtZWEIwWlhJb0tUdGNiaUFnSUNCcFppQW9JV0ZrWVhCMFpYSXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FuUm1GcGJHVmtJSFJ2SUdkbGRDQkhVRlVnWVdSaGNIUmxjaTRnV1c5MUlHMWhlU0J1WldWa0lIUnZJR1Z1WVdKc1pTQm1iR0ZuSUZ3aUxTMWxibUZpYkdVdGRXNXpZV1psTFhkbFltZHdkVndpSUdsbUlIbHZkU0JoY21VZ2RYTnBibWNnUTJoeWIyMWxMaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNnaFpXNTJMbmRoYzIwdWMybHRaQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNkT2IzUWdjM1Z3Y0c5eWRHVmtJR1p2Y2lCWFpXSkhVRlU5VDA0Z1lXNWtJRk5KVFVROVQwWkdMaUJRYkdWaGMyVWdjMlYwSUdCbGJuWXVkMkZ6YlM1emFXMWtZQ0IwYnlCMGNuVmxJSGRvWlc0Z2RYTnBibWNnWUhkbFltZHdkV0FnUlZBbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QnBibWwwSUVwVFJWQWdhV1lnWVhaaGFXeGhZbXhsWEc1Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYSmxjWFZwY21VdGFXMXdiM0owY3l3Z1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFpoY2kxeVpYRjFhWEpsYzF4dUlDQWdJR052Ym5OMElHbHVhWFJLYzJWd0lEMGdjbVZ4ZFdseVpTZ25MaTlxYzJWd0wybHVhWFFuS1M1cGJtbDBPMXh1SUNBZ0lHRjNZV2wwSUdsdWFYUktjMlZ3S0dkbGRFbHVjM1JoYm1ObEtDa3NJR1Z1ZGl3Z1lXUmhjSFJsY2lrN1hHNGdJSDFjYm4wN1hHNWNiaTh2SUNObGJtUnlaV2RwYjI0Z1NXNXBkR2xoYkdsNllYUnBiMjV6WEc1Y2JpOHFLbHh1SUNvZ2RtRnNhV1FnWkdGMFlTQnNiMk5oZEdsdmJuTWdabTl5SUdsdWNIVjBMMjkxZEhCMWRDQjBaVzV6YjNKekxseHVJQ292WEc1MGVYQmxJRk4xY0hCdmNuUmxaRlJsYm5OdmNrUmhkR0ZNYjJOaGRHbHZia1p2Y2tsdWNIVjBUM1YwY0hWMElEMGdKMk53ZFNkOEoyTndkUzF3YVc1dVpXUW5mQ2RuY0hVdFluVm1abVZ5Snp0Y2JseHVkSGx3WlNCSlQwSnBibVJwYm1kVGRHRjBaU0E5SUh0Y2JpQWdMeW9xWEc0Z0lDQXFJSFJvWlNCb1lXNWtiR1VnYjJZZ1NVOGdZbWx1WkdsdVp5NWNiaUFnSUNvdlhHNGdJSEpsWVdSdmJteDVJR2hoYm1Sc1pUb2diblZ0WW1WeU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCMGFHVWdjSEpsWm1WeWNtVmtJR3h2WTJGMGFXOXVJR1p2Y2lCbFlXTm9JRzkxZEhCMWRDQjBaVzV6YjNJdVhHNGdJQ0FxWEc0Z0lDQXFJSFpoYkhWbElHbHpJRzl1WlNCdlppQW5ZM0IxSnl3Z0oyTndkUzF3YVc1dVpXUW5MQ0FuWjNCMUxXSjFabVpsY2ljdVhHNGdJQ0FxTDF4dUlDQnlaV0ZrYjI1c2VTQnZkWFJ3ZFhSUWNtVm1aWEp5WldSTWIyTmhkR2x2Ym5NNklISmxZV1J2Ym14NUlGTjFjSEJ2Y25SbFpGUmxibk52Y2tSaGRHRk1iMk5oZEdsdmJrWnZja2x1Y0hWMFQzVjBjSFYwVzEwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUdWdWRXMGdkbUZzZFdVZ2IyWWdkR2hsSUhCeVpXWmxjbkpsWkNCc2IyTmhkR2x2YmlCbWIzSWdaV0ZqYUNCdmRYUndkWFFnZEdWdWMyOXlMbHh1SUNBZ0tpOWNiaUFnY21WaFpHOXViSGtnYjNWMGNIVjBVSEpsWm1WeWNtVmtURzlqWVhScGIyNXpSVzVqYjJSbFpEb2djbVZoWkc5dWJIa2diblZ0WW1WeVcxMDdYRzU5TzF4dVhHNHZLaXBjYmlBcUlDQjBkWEJzWlNCbGJHVnRaVzUwY3lCaGNtVTZJRWx1Wm1WeVpXNWpaVk5sYzNOcGIyNGdTVVE3SUdsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpEc2diM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkRzZ1ltbHVaR2x1WjFOMFlYUmxYRzRnS2k5Y2JuUjVjR1VnVTJWemMybHZiazFsZEdGa1lYUmhJRDBnVzF4dUlDQnBibVpsY21WdVkyVlRaWE56YVc5dVNXUTZJRzUxYldKbGNpd2dhVzV3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrT2lCdWRXMWlaWEpiWFN3Z2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaRG9nYm5WdFltVnlXMTBzWEc0Z0lHSnBibVJwYm1kVGRHRjBaVG9nU1U5Q2FXNWthVzVuVTNSaGRHVjhiblZzYkZ4dVhUdGNibHh1WTI5dWMzUWdZV04wYVhabFUyVnpjMmx2Ym5NZ1BTQnVaWGNnVFdGd1BHNTFiV0psY2l3Z1UyVnpjMmx2YmsxbGRHRmtZWFJoUGlncE8xeHVYRzR2S2lwY2JpQXFJR2RsZENCMGFHVWdhVzV3ZFhRdmIzVjBjSFYwSUdOdmRXNTBJRzltSUhSb1pTQnpaWE56YVc5dUxseHVJQ29nUUhCaGNtRnRJSE5sYzNOcGIyNUlZVzVrYkdVZ2RHaGxJR2hoYm1Sc1pTQnlaWEJ5WlhObGJuUnBibWNnZEdobElITmxjM05wYjI0dUlITm9iM1ZzWkNCaVpTQnViMjR0ZW1WeWJ5NWNiaUFxSUVCeVpYUjFjbTV6SUdFZ2RIVndiR1VnYVc1amJIVmthVzVuSURJZ2JuVnRZbVZ5Y3l3Z2NtVndjbVZ6Wlc1MGFXNW5JSFJvWlNCcGJuQjFkQ0JqYjNWdWRDQmhibVFnYjNWMGNIVjBJR052ZFc1MExseHVJQ292WEc1amIyNXpkQ0JuWlhSVFpYTnphVzl1U1c1d2RYUlBkWFJ3ZFhSRGIzVnVkQ0E5SUNoelpYTnphVzl1U0dGdVpHeGxPaUJ1ZFcxaVpYSXBPaUJiYm5WdFltVnlMQ0J1ZFcxaVpYSmRJRDArSUh0Y2JpQWdZMjl1YzNRZ2QyRnpiU0E5SUdkbGRFbHVjM1JoYm1ObEtDazdYRzRnSUdOdmJuTjBJSE4wWVdOcklEMGdkMkZ6YlM1emRHRmphMU5oZG1Vb0tUdGNiaUFnZEhKNUlIdGNiaUFnSUNCamIyNXpkQ0JrWVhSaFQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0RncE8xeHVJQ0FnSUdOdmJuTjBJR1Z5Y205eVEyOWtaU0E5SUhkaGMyMHVYMDl5ZEVkbGRFbHVjSFYwVDNWMGNIVjBRMjkxYm5Rb2MyVnpjMmx2YmtoaGJtUnNaU3dnWkdGMFlVOW1abk5sZEN3Z1pHRjBZVTltWm5ObGRDQXJJRFFwTzF4dUlDQWdJR2xtSUNobGNuSnZja052WkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR2RsZENCelpYTnphVzl1SUdsdWNIVjBMMjkxZEhCMWRDQmpiM1Z1ZEM0bktUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRnQzWVhOdExraEZRVkF6TWx0a1lYUmhUMlptYzJWMElDOGdORjBzSUhkaGMyMHVTRVZCVURNeVcyUmhkR0ZQWm1aelpYUWdMeUEwSUNzZ01WMWRPMXh1SUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUhkaGMyMHVjM1JoWTJ0U1pYTjBiM0psS0hOMFlXTnJLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCaGJHeHZZMkYwWlNCMGFHVWdiV1Z0YjNKNUlHRnVaQ0J0WlcxamNIa2dkR2hsSUdWNGRHVnlibUZzSUdKMVptWmxjaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdiVzlrWld3Z0xTQjBhR1VnWlhoMFpYSnVZV3dnWW5WbVptVnlJR052Ym5SaGFXNXBibWNnZEdobElHMXZaR1ZzSUdSaGRHRXVJRTExYzNRZ2JtOTBJR0psSUhSb1pTQnpZVzFsSUdKMVptWmxjaUJoY3lCMGFHVWdWMEZUVFNCb1pXRndMbHh1SUNvZ1FISmxkSFZ5Ym5NZ1lTQXlMV1ZzWlcxbGJuUnpJSFIxY0d4bElDMGdkR2hsSUhCdmFXNTBaWElnWVc1a0lITnBlbVVnYjJZZ2RHaGxJR0ZzYkc5allYUmxaQ0JpZFdabVpYSmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR052Y0hsR2NtOXRSWGgwWlhKdVlXeENkV1ptWlhJZ1BTQW9iVzlrWld3NklGVnBiblE0UVhKeVlYa3BPaUJiYm5WdFltVnlMQ0J1ZFcxaVpYSmRJRDArSUh0Y2JpQWdZMjl1YzNRZ2QyRnpiU0E5SUdkbGRFbHVjM1JoYm1ObEtDazdYRzRnSUdOdmJuTjBJRzF2WkdWc1JHRjBZVTltWm5ObGRDQTlJSGRoYzIwdVgyMWhiR3h2WXlodGIyUmxiQzVpZVhSbFRHVnVaM1JvS1R0Y2JpQWdhV1lnS0cxdlpHVnNSR0YwWVU5bVpuTmxkQ0E5UFQwZ01Da2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1EyRnVKM1FnWTNKbFlYUmxJR0VnYzJWemMybHZiaTRnWm1GcGJHVmtJSFJ2SUdGc2JHOWpZWFJsSUdFZ1luVm1abVZ5SUc5bUlITnBlbVVnSkh0dGIyUmxiQzVpZVhSbFRHVnVaM1JvZlM1Z0tUdGNiaUFnZlZ4dUlDQjNZWE50TGtoRlFWQlZPQzV6WlhRb2JXOWtaV3dzSUcxdlpHVnNSR0YwWVU5bVpuTmxkQ2s3WEc0Z0lISmxkSFZ5YmlCYmJXOWtaV3hFWVhSaFQyWm1jMlYwTENCdGIyUmxiQzVpZVhSbFRHVnVaM1JvWFR0Y2JuMDdYRzVjYmk4cUtseHVJQ29nWTNKbFlYUmxJR0Z1SUdsdVptVnlaVzVqWlNCelpYTnphVzl1SUdaeWIyMGdZU0J0YjJSbGJDQmtZWFJoSUdKMVptWmxjaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdiVzlrWld4RVlYUmhJQzBnWldsMGFHVnlJR0VnVldsdWREaEJjbkpoZVNCdlltcGxZM1FnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0J0YjJSbGJDQmtZWFJoTENCdmNpQmhJREl0Wld4bGJXVnVkSE1nZEhWd2JHVWdZMjl1ZEdGcGJtbHVaeUIwYUdWY2JpQXFJQ0FnSUNCd2IybHVkR1Z5SUdGdVpDQnphWHBsSUc5bUlIUm9aU0J0YjJSbGJDQmtZWFJoSUdKMVptWmxjaTVjYmlBcUlFQndZWEpoYlNCdmNIUnBiMjV6SUdGdUlHOXdkR2x2Ym1Gc0lITmxjM05wYjI0Z2IzQjBhVzl1Y3lCdlltcGxZM1F1WEc0Z0tpQkFjbVYwZFhKdWN5QmhJRE10Wld4bGJXVnVkSE1nZEhWd2JHVWdZMjl1ZEdGcGJtbHVaeUJiYzJWemMybHZiaUJvWVc1a2JHVXNJR2x1Y0hWMElHNWhiV1Z6TENCdmRYUndkWFFnYm1GdFpYTmRYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JqY21WaGRHVlRaWE56YVc5dUlEMGdZWE41Ym1Nb1hHNGdJQ0FnYlc5a1pXeEVZWFJoT2lCVmFXNTBPRUZ5Y21GNWZGTmxjbWxoYkdsNllXSnNaVWx1ZEdWeWJtRnNRblZtWm1WeUxGeHVJQ0FnSUc5d2RHbHZibk0vT2lCSmJtWmxjbVZ1WTJWVFpYTnphVzl1TGxObGMzTnBiMjVQY0hScGIyNXpLVG9nVUhKdmJXbHpaVHhUWlhKcFlXeHBlbUZpYkdWVFpYTnphVzl1VFdWMFlXUmhkR0UrSUQwK0lIdGNiaUFnYkdWMElHMXZaR1ZzUkdGMFlVOW1abk5sZERvZ2JuVnRZbVZ5TENCdGIyUmxiRVJoZEdGTVpXNW5kR2c2SUc1MWJXSmxjanRjYmlBZ1kyOXVjM1FnZDJGemJTQTlJR2RsZEVsdWMzUmhibU5sS0NrN1hHNWNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYlc5a1pXeEVZWFJoS1NrZ2UxeHVJQ0FnSUM4dklHbG1JRzF2WkdWc0lHUmhkR0VnYVhNZ1lXNGdZWEp5WVhrc0lHbDBJRzExYzNRZ1ltVWdZU0F5TFdWc1pXMWxiblJ6SUhSMWNHeGxJR052Ym5SaGFXNXBibWNnZEdobElIQnZhVzUwWlhJZ1lXNWtJSE5wZW1VZ2IyWWdkR2hsSUcxdlpHVnNJR1JoZEdGY2JpQWdJQ0JiYlc5a1pXeEVZWFJoVDJabWMyVjBMQ0J0YjJSbGJFUmhkR0ZNWlc1bmRHaGRJRDBnYlc5a1pXeEVZWFJoTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLRzF2WkdWc1JHRjBZUzVpZFdabVpYSWdQVDA5SUhkaGMyMHVTRVZCVUZVNExtSjFabVpsY2lrZ2UxeHVJQ0FnSUM4dklHbG1JRzF2WkdWc0lHUmhkR0VnZFhObGN5QjBhR1VnYzJGdFpTQmlkV1ptWlhJZ1lYTWdkR2hsSUZkQlUwMGdhR1ZoY0N3Z2QyVWdaRzl1SjNRZ2JtVmxaQ0IwYnlCamIzQjVJR2wwTGx4dUlDQWdJRnR0YjJSbGJFUmhkR0ZQWm1aelpYUXNJRzF2WkdWc1JHRjBZVXhsYm1kMGFGMGdQU0JiYlc5a1pXeEVZWFJoTG1KNWRHVlBabVp6WlhRc0lHMXZaR1ZzUkdGMFlTNWllWFJsVEdWdVozUm9YVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCdmRHaGxjbmRwYzJVc0lHTnZjSGtnZEdobElHMXZaR1ZzSUdSaGRHRWdkRzhnZEdobElGZEJVMDBnYUdWaGNDNWNiaUFnSUNCYmJXOWtaV3hFWVhSaFQyWm1jMlYwTENCdGIyUmxiRVJoZEdGTVpXNW5kR2hkSUQwZ1kyOXdlVVp5YjIxRmVIUmxjbTVoYkVKMVptWmxjaWh0YjJSbGJFUmhkR0VwTzF4dUlDQjlYRzVjYmlBZ2JHVjBJSE5sYzNOcGIyNUlZVzVrYkdVZ1BTQXdPMXh1SUNCc1pYUWdjMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VnUFNBd08xeHVJQ0JzWlhRZ2FXOUNhVzVrYVc1blNHRnVaR3hsSUQwZ01EdGNiaUFnYkdWMElHRnNiRzlqY3pvZ2JuVnRZbVZ5VzEwZ1BTQmJYVHRjYmlBZ1kyOXVjM1FnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0lEMGdXMTA3WEc0Z0lHTnZibk4wSUc5MWRIQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUWdQU0JiWFR0Y2JseHVJQ0IwY25rZ2UxeHVJQ0FnSUZ0elpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTd2dZV3hzYjJOelhTQTlJSE5sZEZObGMzTnBiMjVQY0hScGIyNXpLRzl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk0vTG1WNGRHVnlibUZzUkdGMFlTQW1KaUIzWVhOdExtMXZkVzUwUlhoMFpYSnVZV3hFWVhSaEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCc2IyRmthVzVuVUhKdmJXbHpaWE1nUFNCYlhUdGNiaUFnSUNBZ0lHWnZjaUFvWTI5dWMzUWdabWxzWlNCdlppQnZjSFJwYjI1ekxtVjRkR1Z5Ym1Gc1JHRjBZU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3WVhSb0lEMGdkSGx3Wlc5bUlHWnBiR1VnUFQwOUlDZHpkSEpwYm1jbklEOGdabWxzWlNBNklHWnBiR1V1Y0dGMGFEdGNiaUFnSUNBZ0lDQWdiRzloWkdsdVoxQnliMjFwYzJWekxuQjFjMmdvYkc5aFpFWnBiR1VvZEhsd1pXOW1JR1pwYkdVZ1BUMDlJQ2R6ZEhKcGJtY25JRDhnWm1sc1pTQTZJR1pwYkdVdVpHRjBZU2t1ZEdobGJpaGtZWFJoSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0IzWVhOdExtMXZkVzUwUlhoMFpYSnVZV3hFWVhSaElTaHdZWFJvTENCa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnZlNrcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUIzWVdsMElHWnZjaUJoYkd3Z1pYaDBaWEp1WVd3Z1pHRjBZU0JtYVd4bGN5QjBieUJpWlNCc2IyRmtaV1JjYmlBZ0lDQWdJR0YzWVdsMElGQnliMjFwYzJVdVlXeHNLR3h2WVdScGJtZFFjbTl0YVhObGN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MyVnpjMmx2YmtoaGJtUnNaU0E5SUhkaGMyMHVYMDl5ZEVOeVpXRjBaVk5sYzNOcGIyNG9iVzlrWld4RVlYUmhUMlptYzJWMExDQnRiMlJsYkVSaGRHRk1aVzVuZEdnc0lITmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxLVHRjYmlBZ0lDQnBaaUFvYzJWemMybHZia2hoYm1Sc1pTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvSjBOaGJseGNKM1FnWTNKbFlYUmxJR0VnYzJWemMybHZiaTRuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQmJhVzV3ZFhSRGIzVnVkQ3dnYjNWMGNIVjBRMjkxYm5SZElEMGdaMlYwVTJWemMybHZia2x1Y0hWMFQzVjBjSFYwUTI5MWJuUW9jMlZ6YzJsdmJraGhibVJzWlNrN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm5CMWRFNWhiV1Z6SUQwZ1cxMDdYRzRnSUNBZ1kyOXVjM1FnYjNWMGNIVjBUbUZ0WlhNZ1BTQmJYVHRjYmlBZ0lDQmpiMjV6ZENCdmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk02SUZOMWNIQnZjblJsWkZSbGJuTnZja1JoZEdGTWIyTmhkR2x2YmtadmNrbHVjSFYwVDNWMGNIVjBXMTBnUFNCYlhUdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHbHVjSFYwUTI5MWJuUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJSGRoYzIwdVgwOXlkRWRsZEVsdWNIVjBUbUZ0WlNoelpYTnphVzl1U0dGdVpHeGxMQ0JwS1R0Y2JpQWdJQ0FnSUdsbUlDaHVZVzFsSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR2RsZENCaGJpQnBibkIxZENCdVlXMWxMaWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xuQjFjMmdvYm1GdFpTazdYRzRnSUNBZ0lDQnBibkIxZEU1aGJXVnpMbkIxYzJnb2QyRnpiUzVWVkVZNFZHOVRkSEpwYm1jb2JtRnRaU2twTzF4dUlDQWdJSDFjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzkxZEhCMWRFTnZkVzUwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHNWhiV1VnUFNCM1lYTnRMbDlQY25SSFpYUlBkWFJ3ZFhST1lXMWxLSE5sYzNOcGIyNUlZVzVrYkdVc0lHa3BPMXh1SUNBZ0lDQWdhV1lnS0c1aGJXVWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb0owTmhibHhjSjNRZ1oyVjBJR0Z1SUc5MWRIQjFkQ0J1WVcxbExpY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkM1d2RYTm9LRzVoYldVcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpWTjBjbWx1WnlBOUlIZGhjMjB1VlZSR09GUnZVM1J5YVc1bktHNWhiV1VwTzF4dUlDQWdJQ0FnYjNWMGNIVjBUbUZ0WlhNdWNIVnphQ2h1WVcxbFUzUnlhVzVuS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0ZDVlVsTVJGOUVSVVpUTGtSSlUwRkNURVZmVjBWQ1IxQlZLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR3h2WTJGMGFXOXVJRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTS9MbkJ5WldabGNuSmxaRTkxZEhCMWRFeHZZMkYwYVc5dUlEMDlQU0FuYzNSeWFXNW5KeUEvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxuQnlaV1psY25KbFpFOTFkSEIxZEV4dlkyRjBhVzl1SURwY2JpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTS9MbkJ5WldabGNuSmxaRTkxZEhCMWRFeHZZMkYwYVc5dVB5NWJibUZ0WlZOMGNtbHVaMTBnUHo4Z0oyTndkU2M3WEc0Z0lDQWdJQ0FnSUdsbUlDaHNiMk5oZEdsdmJpQWhQVDBnSjJOd2RTY2dKaVlnYkc5allYUnBiMjRnSVQwOUlDZGpjSFV0Y0dsdWJtVmtKeUFtSmlCc2IyTmhkR2x2YmlBaFBUMGdKMmR3ZFMxaWRXWm1aWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQk9iM1FnYzNWd2NHOXlkR1ZrSUhCeVpXWmxjbkpsWkNCdmRYUndkWFFnYkc5allYUnBiMjQ2SUNSN2JHOWpZWFJwYjI1OUxtQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUc5MWRIQjFkRkJ5WldabGNuSmxaRXh2WTJGMGFXOXVjeTV3ZFhOb0tHeHZZMkYwYVc5dUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QjFjMlVnU1U4Z1ltbHVaR2x1WnlCdmJteDVJSGRvWlc0Z1lYUWdiR1ZoYzNRZ2IyNWxJRzkxZEhCMWRDQnBjeUJ3Y21WbVptVnlaV1FnZEc4Z1ltVWdiMjRnUjFCVkxseHVJQ0FnSUd4bGRDQmlhVzVrYVc1blUzUmhkR1U2SUVsUFFtbHVaR2x1WjFOMFlYUmxmRzUxYkd3Z1BTQnVkV3hzTzF4dUlDQWdJR2xtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNBbUppQnZkWFJ3ZFhSUWNtVm1aWEp5WldSTWIyTmhkR2x2Ym5NdWMyOXRaU2hzSUQwK0lHd2dQVDA5SUNkbmNIVXRZblZtWm1WeUp5a3BJSHRjYmlBZ0lDQWdJR2x2UW1sdVpHbHVaMGhoYm1Sc1pTQTlJSGRoYzIwdVgwOXlkRU55WldGMFpVSnBibVJwYm1jb2MyVnpjMmx2YmtoaGJtUnNaU2s3WEc0Z0lDQWdJQ0JwWmlBb2FXOUNhVzVrYVc1blNHRnVaR3hsSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR055WldGMFpTQkpUeUJpYVc1a2FXNW5MaWNwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCaWFXNWthVzVuVTNSaGRHVWdQU0I3WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaVG9nYVc5Q2FXNWthVzVuU0dGdVpHeGxMRnh1SUNBZ0lDQWdJQ0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTXNYRzRnSUNBZ0lDQWdJRzkxZEhCMWRGQnlaV1psY25KbFpFeHZZMkYwYVc5dWMwVnVZMjlrWldRNklHOTFkSEIxZEZCeVpXWmxjbkpsWkV4dlkyRjBhVzl1Y3k1dFlYQW9iQ0E5UGlCa1lYUmhURzlqWVhScGIyNVRkSEpwYm1kVWIwVnVkVzBvYkNrcExGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCaFkzUnBkbVZUWlhOemFXOXVjeTV6WlhRb2MyVnpjMmx2YmtoaGJtUnNaU3dnVzNObGMzTnBiMjVJWVc1a2JHVXNJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkN3Z2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQ3dnWW1sdVpHbHVaMU4wWVhSbFhTazdYRzRnSUNBZ2NtVjBkWEp1SUZ0elpYTnphVzl1U0dGdVpHeGxMQ0JwYm5CMWRFNWhiV1Z6TENCdmRYUndkWFJPWVcxbGMxMDdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCcGJuQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUXVabTl5UldGamFDaGlkV1lnUFQ0Z2QyRnpiUzVmVDNKMFJuSmxaU2hpZFdZcEtUdGNiaUFnSUNCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMbVp2Y2tWaFkyZ29ZblZtSUQwK0lIZGhjMjB1WDA5eWRFWnlaV1VvWW5WbUtTazdYRzVjYmlBZ0lDQnBaaUFvYVc5Q2FXNWthVzVuU0dGdVpHeGxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjNZWE50TGw5UGNuUlNaV3hsWVhObFFtbHVaR2x1WnlocGIwSnBibVJwYm1kSVlXNWtiR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoelpYTnphVzl1U0dGdVpHeGxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjNZWE50TGw5UGNuUlNaV3hsWVhObFUyVnpjMmx2YmloelpYTnphVzl1U0dGdVpHeGxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHliM2NnWlR0Y2JpQWdmU0JtYVc1aGJHeDVJSHRjYmlBZ0lDQjNZWE50TGw5bWNtVmxLRzF2WkdWc1JHRjBZVTltWm5ObGRDazdYRzRnSUNBZ2FXWWdLSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IzWVhOdExsOVBjblJTWld4bFlYTmxVMlZ6YzJsdmJrOXdkR2x2Ym5Nb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCaGJHeHZZM011Wm05eVJXRmphQ2hoYkd4dll5QTlQaUIzWVhOdExsOW1jbVZsS0dGc2JHOWpLU2s3WEc1Y2JpQWdJQ0F2THlCMWJtMXZkVzUwSUdWNGRHVnlibUZzSUdSaGRHRWdhV1lnYm1WalpYTnpZWEo1WEc0Z0lDQWdkMkZ6YlM1MWJtMXZkVzUwUlhoMFpYSnVZV3hFWVhSaFB5NG9LVHRjYmlBZ2ZWeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJSEpsYkdWaGMyVlRaWE56YVc5dUlEMGdLSE5sYzNOcGIyNUpaRG9nYm5WdFltVnlLVG9nZG05cFpDQTlQaUI3WEc0Z0lHTnZibk4wSUhkaGMyMGdQU0JuWlhSSmJuTjBZVzVqWlNncE8xeHVJQ0JqYjI1emRDQnpaWE56YVc5dUlEMGdZV04wYVhabFUyVnpjMmx2Ym5NdVoyVjBLSE5sYzNOcGIyNUpaQ2s3WEc0Z0lHbG1JQ2doYzJWemMybHZiaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdZMkZ1Ym05MElISmxiR1ZoYzJVZ2MyVnpjMmx2Ymk0Z2FXNTJZV3hwWkNCelpYTnphVzl1SUdsa09pQWtlM05sYzNOcGIyNUpaSDFnS1R0Y2JpQWdmVnh1SUNCamIyNXpkQ0JiYzJWemMybHZia2hoYm1Sc1pTd2dhVzV3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTENCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMQ0JwYjBKcGJtUnBibWRUZEdGMFpWMGdQU0J6WlhOemFXOXVPMXh1WEc0Z0lHbG1JQ2hwYjBKcGJtUnBibWRUZEdGMFpTa2dlMXh1SUNBZ0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWQ2FXNWthVzVuS0dsdlFtbHVaR2x1WjFOMFlYUmxMbWhoYm1Sc1pTazdYRzRnSUgxY2JseHVJQ0IzWVhOdExtcHpaWEJWYm5KbFoybHpkR1Z5UW5WbVptVnljejh1S0hObGMzTnBiMjVKWkNrN1hHNWNiaUFnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xtWnZja1ZoWTJnb1luVm1JRDArSUhkaGMyMHVYMDl5ZEVaeVpXVW9ZblZtS1NrN1hHNGdJRzkxZEhCMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldRdVptOXlSV0ZqYUNoaWRXWWdQVDRnZDJGemJTNWZUM0owUm5KbFpTaGlkV1lwS1R0Y2JpQWdkMkZ6YlM1ZlQzSjBVbVZzWldGelpWTmxjM05wYjI0b2MyVnpjMmx2YmtoaGJtUnNaU2s3WEc0Z0lHRmpkR2wyWlZObGMzTnBiMjV6TG1SbGJHVjBaU2h6WlhOemFXOXVTV1FwTzF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElIQnlaWEJoY21WSmJuQjFkRTkxZEhCMWRGUmxibk52Y2lBOVhHNGdJQ0FnS0hSbGJuTnZjam9nVkdWdWMyOXlUV1YwWVdSaGRHRjhiblZzYkN3Z2RHVnVjMjl5U0dGdVpHeGxjem9nYm5WdFltVnlXMTBzSUdGc2JHOWpjem9nYm5WdFltVnlXMTBzSUhObGMzTnBiMjVKWkRvZ2JuVnRZbVZ5TENCcGJtUmxlRG9nYm5WdFltVnlLVHBjYmlBZ0lDQWdJQ0FnZG05cFpDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwWlc1emIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxibk52Y2toaGJtUnNaWE11Y0hWemFDZ3dLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUmhkR0ZVZVhCbElEMGdkR1Z1YzI5eVd6QmRPMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1JwYlhNZ1BTQjBaVzV6YjNKYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiRzlqWVhScGIyNGdQU0IwWlc1emIzSmJNMTA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY21GM1JHRjBZVG9nYm5WdFltVnlPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJoUW5sMFpVeGxibWQwYURvZ2JuVnRZbVZ5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHRlVlWEJsSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJzYjJOaGRHbHZiaUE5UFQwZ0oyZHdkUzFpZFdabVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxTjBjbWx1WnlCMFpXNXpiM0lnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ0J2YmlCSFVGVXVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHeHZZMkYwYVc5dUlEMDlQU0FuWjNCMUxXSjFabVpsY2ljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2R3ZFVKMVptWmxjaUE5SUhSbGJuTnZjbHN5WFM1bmNIVkNkV1ptWlhJZ1lYTWdSMUJWUW5WbVptVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWld4bGJXVnVkRk5wZW1WSmJrSjVkR1Z6SUQwZ1oyVjBWR1Z1YzI5eVJXeGxiV1Z1ZEZOcGVtVW9kR1Z1YzI5eVJHRjBZVlI1Y0dWVGRISnBibWRVYjBWdWRXMG9aR0YwWVZSNWNHVXBLU0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoUW5sMFpVeGxibWQwYUNBOUlHUnBiWE11Y21Wa2RXTmxLQ2hoTENCaUtTQTlQaUJoSUNvZ1lpd2dNU2tnS2lCbGJHVnRaVzUwVTJsNlpVbHVRbmwwWlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WVhkRVlYUmhJRDBnZDJGemJTNXFjMlZ3VW1WbmFYTjBaWEpDZFdabVpYSW9jMlZ6YzJsdmJrbGtMQ0JwYm1SbGVDd2daM0IxUW5WbVptVnlMQ0JrWVhSaFFubDBaVXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwWlc1emIzSmJNbDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1JoZEdFcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE4wY21sdVp5QjBaVzV6YjNKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlVSjVkR1ZNWlc1bmRHZ2dQU0EwSUNvZ1pHRjBZUzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmhkMFJoZEdFZ1BTQjNZWE50TGw5dFlXeHNiMk1vWkdGMFlVSjVkR1ZNWlc1bmRHZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmhiR3h2WTNNdWNIVnphQ2h5WVhkRVlYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdSaGRHRkpibVJsZUNBOUlISmhkMFJoZEdFZ0x5QTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR1JoZEdFdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdSaGRHRmJhVjBnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0dCMFpXNXpiM0lnWkdGMFlTQmhkQ0JwYm1SbGVDQWtlMmw5SUdseklHNXZkQ0JoSUhOMGNtbHVaMkFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1lYTnRMa2hGUVZCVk16SmJaR0YwWVVsdVpHVjRLeXRkSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0dSaGRHRmJhVjBzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRkNlWFJsVEdWdVozUm9JRDBnWkdGMFlTNWllWFJsVEdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlZWGRFWVhSaElEMGdkMkZ6YlM1ZmJXRnNiRzlqS0dSaGRHRkNlWFJsVEdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3hzYjJOekxuQjFjMmdvY21GM1JHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSGRoYzIwdVNFVkJVRlU0TG5ObGRDaHVaWGNnVldsdWREaEJjbkpoZVNoa1lYUmhMbUoxWm1abGNpd2daR0YwWVM1aWVYUmxUMlptYzJWMExDQmtZWFJoUW5sMFpVeGxibWQwYUNrc0lISmhkMFJoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE4wWVdOcklEMGdkMkZ6YlM1emRHRmphMU5oZG1Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmthVzF6VDJabWMyVjBJRDBnZDJGemJTNXpkR0ZqYTBGc2JHOWpLRFFnS2lCa2FXMXpMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmthVzFKYm1SbGVDQTlJR1JwYlhOUFptWnpaWFFnTHlBME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsdGN5NW1iM0pGWVdOb0tHUWdQVDRnZDJGemJTNUlSVUZRTXpKYlpHbHRTVzVrWlhncksxMGdQU0JrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUmxibk52Y2lBOUlIZGhjMjB1WDA5eWRFTnlaV0YwWlZSbGJuTnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlc1emIzSkVZWFJoVkhsd1pWTjBjbWx1WjFSdlJXNTFiU2hrWVhSaFZIbHdaU2tzSUhKaGQwUmhkR0VzSUdSaGRHRkNlWFJsVEdWdVozUm9MQ0JrYVcxelQyWm1jMlYwTENCa2FXMXpMbXhsYm1kMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVEc5allYUnBiMjVUZEhKcGJtZFViMFZ1ZFcwb2JHOWpZWFJwYjI0cEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBaVzV6YjNJZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElHTnlaV0YwWlNCMFpXNXpiM0lnWm05eUlHbHVjSFYwTDI5MWRIQjFkQzRnYzJWemMybHZiajBrZTNObGMzTnBiMjVKWkgwc0lHbHVaR1Y0UFNSN2FXNWtaWGg5TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR1Z1YzI5eVNHRnVaR3hsY3k1d2RYTm9LSFJsYm5OdmNpazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRoYzIwdWMzUmhZMnRTWlhOMGIzSmxLSE4wWVdOcktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaThxS2x4dUlDb2djR1Z5Wm05eWJTQnBibVpsY21WdVkyVWdjblZ1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCeWRXNGdQU0JoYzNsdVl5aGNiaUFnSUNCelpYTnphVzl1U1dRNklHNTFiV0psY2l3Z2FXNXdkWFJKYm1ScFkyVnpPaUJ1ZFcxaVpYSmJYU3dnYVc1d2RYUlVaVzV6YjNKek9pQlVaVzV6YjNKTlpYUmhaR0YwWVZ0ZExDQnZkWFJ3ZFhSSmJtUnBZMlZ6T2lCdWRXMWlaWEpiWFN4Y2JpQWdJQ0J2ZFhSd2RYUlVaVzV6YjNKek9pQkJjbkpoZVR4VVpXNXpiM0pOWlhSaFpHRjBZWHh1ZFd4c1Bpd2diM0IwYVc5dWN6b2dTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNVNkVzVQY0hScGIyNXpLVG9nVUhKdmJXbHpaVHhVWlc1emIzSk5aWFJoWkdGMFlWdGRQaUE5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCamIyNXpkQ0J6WlhOemFXOXVJRDBnWVdOMGFYWmxVMlZ6YzJsdmJuTXVaMlYwS0hObGMzTnBiMjVKWkNrN1hHNGdJR2xtSUNnaGMyVnpjMmx2YmlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWTJGdWJtOTBJSEoxYmlCcGJtWmxjbVZ1WTJVdUlHbHVkbUZzYVdRZ2MyVnpjMmx2YmlCcFpEb2dKSHR6WlhOemFXOXVTV1I5WUNrN1hHNGdJSDFjYmlBZ1kyOXVjM1FnVzNObGMzTnBiMjVJWVc1a2JHVXNJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkN3Z2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQ3dnYVc5Q2FXNWthVzVuVTNSaGRHVmRJRDBnYzJWemMybHZianRjYmx4dUlDQmpiMjV6ZENCcGJuQjFkRU52ZFc1MElEMGdhVzV3ZFhSSmJtUnBZMlZ6TG14bGJtZDBhRHRjYmlBZ1kyOXVjM1FnYjNWMGNIVjBRMjkxYm5RZ1BTQnZkWFJ3ZFhSSmJtUnBZMlZ6TG14bGJtZDBhRHRjYmx4dUlDQnNaWFFnY25WdVQzQjBhVzl1YzBoaGJtUnNaU0E5SURBN1hHNGdJR3hsZENCeWRXNVBjSFJwYjI1elFXeHNiMk56T2lCdWRXMWlaWEpiWFNBOUlGdGRPMXh1WEc0Z0lHTnZibk4wSUdsdWNIVjBWR1Z1YzI5eVNHRnVaR3hsY3pvZ2JuVnRZbVZ5VzEwZ1BTQmJYVHRjYmlBZ1kyOXVjM1FnYjNWMGNIVjBWR1Z1YzI5eVNHRnVaR3hsY3pvZ2JuVnRZbVZ5VzEwZ1BTQmJYVHRjYmlBZ1kyOXVjM1FnYVc1d2RYUlBkWFJ3ZFhSQmJHeHZZM002SUc1MWJXSmxjbHRkSUQwZ1cxMDdYRzVjYmlBZ1kyOXVjM1FnWW1WbWIzSmxVblZ1VTNSaFkyc2dQU0IzWVhOdExuTjBZV05yVTJGMlpTZ3BPMXh1SUNCamIyNXpkQ0JwYm5CMWRGWmhiSFZsYzA5bVpuTmxkQ0E5SUhkaGMyMHVjM1JoWTJ0QmJHeHZZeWhwYm5CMWRFTnZkVzUwSUNvZ05DazdYRzRnSUdOdmJuTjBJR2x1Y0hWMFRtRnRaWE5QWm1aelpYUWdQU0IzWVhOdExuTjBZV05yUVd4c2IyTW9hVzV3ZFhSRGIzVnVkQ0FxSURRcE8xeHVJQ0JqYjI1emRDQnZkWFJ3ZFhSV1lXeDFaWE5QWm1aelpYUWdQU0IzWVhOdExuTjBZV05yUVd4c2IyTW9iM1YwY0hWMFEyOTFiblFnS2lBMEtUdGNiaUFnWTI5dWMzUWdiM1YwY0hWMFRtRnRaWE5QWm1aelpYUWdQU0IzWVhOdExuTjBZV05yUVd4c2IyTW9iM1YwY0hWMFEyOTFiblFnS2lBMEtUdGNibHh1SUNCMGNua2dlMXh1SUNBZ0lGdHlkVzVQY0hScGIyNXpTR0Z1Wkd4bExDQnlkVzVQY0hScGIyNXpRV3hzYjJOelhTQTlJSE5sZEZKMWJrOXdkR2x2Ym5Nb2IzQjBhVzl1Y3lrN1hHNWNiaUFnSUNBdkx5QmpjbVZoZEdVZ2FXNXdkWFFnZEdWdWMyOXljMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dhVzV3ZFhSRGIzVnVkRHNnYVNzcktTQjdYRzRnSUNBZ0lDQndjbVZ3WVhKbFNXNXdkWFJQZFhSd2RYUlVaVzV6YjNJb2FXNXdkWFJVWlc1emIzSnpXMmxkTENCcGJuQjFkRlJsYm5OdmNraGhibVJzWlhNc0lHbHVjSFYwVDNWMGNIVjBRV3hzYjJOekxDQnpaWE56YVc5dVNXUXNJR2x1Y0hWMFNXNWthV05sYzF0cFhTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdZM0psWVhSbElHOTFkSEIxZENCMFpXNXpiM0p6WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J2ZFhSd2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J3Y21Wd1lYSmxTVzV3ZFhSUGRYUndkWFJVWlc1emIzSW9YRzRnSUNBZ0lDQWdJQ0FnYjNWMGNIVjBWR1Z1YzI5eWMxdHBYU3dnYjNWMGNIVjBWR1Z1YzI5eVNHRnVaR3hsY3l3Z2FXNXdkWFJQZFhSd2RYUkJiR3h2WTNNc0lITmxjM05wYjI1SlpDd2dhVzV3ZFhSRGIzVnVkQ0FySUc5MWRIQjFkRWx1WkdsalpYTmJhVjBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCcGJuQjFkRlpoYkhWbGMwbHVaR1Y0SUQwZ2FXNXdkWFJXWVd4MVpYTlBabVp6WlhRZ0x5QTBPMXh1SUNBZ0lHeGxkQ0JwYm5CMWRFNWhiV1Z6U1c1a1pYZ2dQU0JwYm5CMWRFNWhiV1Z6VDJabWMyVjBJQzhnTkR0Y2JpQWdJQ0JzWlhRZ2IzVjBjSFYwVm1Gc2RXVnpTVzVrWlhnZ1BTQnZkWFJ3ZFhSV1lXeDFaWE5QWm1aelpYUWdMeUEwTzF4dUlDQWdJR3hsZENCdmRYUndkWFJPWVcxbGMwbHVaR1Y0SUQwZ2IzVjBjSFYwVG1GdFpYTlBabVp6WlhRZ0x5QTBPMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dhVzV3ZFhSRGIzVnVkRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjNZWE50TGtoRlFWQlZNekpiYVc1d2RYUldZV3gxWlhOSmJtUmxlQ3NyWFNBOUlHbHVjSFYwVkdWdWMyOXlTR0Z1Wkd4bGMxdHBYVHRjYmlBZ0lDQWdJSGRoYzIwdVNFVkJVRlV6TWx0cGJuQjFkRTVoYldWelNXNWtaWGdySzEwZ1BTQnBibkIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1JiYVc1d2RYUkpibVJwWTJWelcybGRYVHRjYmlBZ0lDQjlYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnZkWFJ3ZFhSRGIzVnVkRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjNZWE50TGtoRlFWQlZNekpiYjNWMGNIVjBWbUZzZFdWelNXNWtaWGdySzEwZ1BTQnZkWFJ3ZFhSVVpXNXpiM0pJWVc1a2JHVnpXMmxkTzF4dUlDQWdJQ0FnZDJGemJTNUlSVUZRVlRNeVcyOTFkSEIxZEU1aGJXVnpTVzVrWlhncksxMGdQU0J2ZFhSd2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa1cyOTFkSEIxZEVsdVpHbGpaWE5iYVYxZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRGUWtkUVZTQW1KaUJwYjBKcGJtUnBibWRUZEdGMFpTa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2UyaGhibVJzWlN3Z2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6TENCdmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk5GYm1OdlpHVmtmU0E5SUdsdlFtbHVaR2x1WjFOMFlYUmxPMXh1WEc0Z0lDQWdJQ0JwWmlBb2FXNXdkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMbXhsYm1kMGFDQWhQVDBnYVc1d2RYUkRiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHbHVjSFYwSUdOdmRXNTBJR1p5YjIwZ1ptVmxaSE1nS0NSN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRFTnZkVzUwZlNrZ2FYTWdaWGh3WldOMFpXUWdkRzhnWW1VZ1lXeDNZWGx6SUdWeGRXRnNJSFJ2SUcxdlpHVnNKM01nYVc1d2RYUWdZMjkxYm5RZ0tDUjdhVzV3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTG14bGJtZDBhSDBwTG1BcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJ3Y205alpYTnpJR2x1Y0hWMGMxeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnBibkIxZEVOdmRXNTBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FXNWtaWGdnUFNCcGJuQjFkRWx1WkdsalpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eVEyOWtaU0E5SUdGM1lXbDBJSGRoYzIwdVgwOXlkRUpwYm1SSmJuQjFkQ2hvWVc1a2JHVXNJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkZ0cGJtUmxlRjBzSUdsdWNIVjBWR1Z1YzI5eVNHRnVaR3hsYzF0cFhTazdYRzRnSUNBZ0lDQWdJR2xtSUNobGNuSnZja052WkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loZ1EyRnVKM1FnWW1sdVpDQnBibkIxZEZza2UybDlYU0JtYjNJZ2MyVnpjMmx2Ymowa2UzTmxjM05wYjI1SlpIMHVZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdjSEp2WTJWemN5QndjbVV0WVd4c2IyTmhkR1ZrSUc5MWRIQjFkSE5jYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYjNWMGNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwYm1SbGVDQTlJRzkxZEhCMWRFbHVaR2xqWlhOYmFWMDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHeHZZMkYwYVc5dUlEMGdiM1YwY0hWMFZHVnVjMjl5YzF0cFhUOHVXek5kT3lBZ0x5OGdkVzVrWldacGJtVmtJRzFsWVc1eklHOTFkSEIxZENCcGN5QnViM1FnY0hKbExXRnNiRzlqWVhSbFpDNWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2JHOWpZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCdmRYUndkWFFnYVhNZ2NISmxMV0ZzYkc5allYUmxaQzRnWW1sdVpDQjBhR1VnZEdWdWMyOXlMbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eVEyOWtaU0E5SUhkaGMyMHVYMDl5ZEVKcGJtUlBkWFJ3ZFhRb2FHRnVaR3hsTENCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtXMmx1WkdWNFhTd2diM1YwY0hWMFZHVnVjMjl5U0dGdVpHeGxjMXRwWFN3Z01DazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5UTI5a1pTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElHSnBibVFnY0hKbExXRnNiRzlqWVhSbFpDQnZkWFJ3ZFhSYkpIdHBmVjBnWm05eUlITmxjM05wYjI0OUpIdHpaWE56YVc5dVNXUjlMbUFwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCdmRYUndkWFFnYVhNZ2JtOTBJSEJ5WlMxaGJHeHZZMkYwWldRdUlISmxjMlYwSUhCeVpXWmxjbkpsWkNCc2IyTmhkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGNuSnZja052WkdVZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1lYTnRMbDlQY25SQ2FXNWtUM1YwY0hWMEtHaGhibVJzWlN3Z2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaRnRwYm1SbGVGMHNJREFzSUc5MWRIQjFkRkJ5WldabGNuSmxaRXh2WTJGMGFXOXVjMFZ1WTI5a1pXUmJhVzVrWlhoZEtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0pEYjJSbElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdWamEweGhjM1JGY25KdmNpaGdRMkZ1SjNRZ1ltbHVaQ0J2ZFhSd2RYUmJKSHRwZlYwZ2RHOGdKSHR2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTmJhVjE5SUdadmNpQnpaWE56YVc5dVBTUjdjMlZ6YzJsdmJrbGtmUzVnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWlhKeWIzSkRiMlJsT2lCdWRXMWlaWEk3WEc1Y2JpQWdJQ0JwWmlBb0lVSlZTVXhFWDBSRlJsTXVSRWxUUVVKTVJWOVhSVUpIVUZVZ0ppWWdhVzlDYVc1a2FXNW5VM1JoZEdVcElIdGNiaUFnSUNBZ0lHVnljbTl5UTI5a1pTQTlJR0YzWVdsMElIZGhjMjB1WDA5eWRGSjFibGRwZEdoQ2FXNWthVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lITmxjM05wYjI1SVlXNWtiR1VzSUdsdlFtbHVaR2x1WjFOMFlYUmxMbWhoYm1Sc1pTd2diM1YwY0hWMFEyOTFiblFzSUc5MWRIQjFkRlpoYkhWbGMwOW1abk5sZEN3Z2NuVnVUM0IwYVc5dWMwaGhibVJzWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1Z5Y205eVEyOWtaU0E5SUdGM1lXbDBJSGRoYzIwdVgwOXlkRkoxYmloY2JpQWdJQ0FnSUNBZ0lDQnpaWE56YVc5dVNHRnVaR3hsTENCcGJuQjFkRTVoYldWelQyWm1jMlYwTENCcGJuQjFkRlpoYkhWbGMwOW1abk5sZEN3Z2FXNXdkWFJEYjNWdWRDd2diM1YwY0hWMFRtRnRaWE5QWm1aelpYUXNJRzkxZEhCMWRFTnZkVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lHOTFkSEIxZEZaaGJIVmxjMDltWm5ObGRDd2djblZ1VDNCMGFXOXVjMGhoYm1Sc1pTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR1Z5Y205eVEyOWtaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb0oyWmhhV3hsWkNCMGJ5QmpZV3hzSUU5eWRGSjFiaWdwTGljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJRzkxZEhCMWREb2dWR1Z1YzI5eVRXVjBZV1JoZEdGYlhTQTlJRnRkTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCdmRYUndkWFJEYjNWdWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0IwWlc1emIzSWdQU0IzWVhOdExraEZRVkJWTXpKYmIzVjBjSFYwVm1Gc2RXVnpUMlptYzJWMElDOGdOQ0FySUdsZE8xeHVJQ0FnSUNBZ2FXWWdLSFJsYm5OdmNpQTlQVDBnYjNWMGNIVjBWR1Z1YzI5eVNHRnVaR3hsYzF0cFhTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCdmRYUndkWFFnZEdWdWMyOXlJR2x6SUhCeVpTMWhiR3h2WTJGMFpXUXVJRzV2SUc1bFpXUWdkRzhnWTI5d2VTQmtZWFJoTGx4dUlDQWdJQ0FnSUNCdmRYUndkWFF1Y0hWemFDaHZkWFJ3ZFhSVVpXNXpiM0p6VzJsZElTazdYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JqYjI1emRDQmlaV1p2Y21WSFpYUlVaVzV6YjNKRVlYUmhVM1JoWTJzZ1BTQjNZWE50TG5OMFlXTnJVMkYyWlNncE8xeHVJQ0FnSUNBZ0x5OGdjM1JoWTJzZ1lXeHNiMk5oZEdVZ05DQndiMmx1ZEdWeUlIWmhiSFZsWEc0Z0lDQWdJQ0JqYjI1emRDQjBaVzV6YjNKRVlYUmhUMlptYzJWMElEMGdkMkZ6YlM1emRHRmphMEZzYkc5aktEUWdLaUEwS1R0Y2JseHVJQ0FnSUNBZ2JHVjBJR3RsWlhCUGRYUndkWFJVWlc1emIzSWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lHeGxkQ0IwZVhCbE9pQlVaVzV6YjNJdVZIbHdaWHgxYm1SbFptbHVaV1FzSUdSaGRHRlBabVp6WlhRZ1BTQXdPMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeWIzSkRiMlJsSUQwZ2QyRnpiUzVmVDNKMFIyVjBWR1Z1YzI5eVJHRjBZU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxibk52Y2l3Z2RHVnVjMjl5UkdGMFlVOW1abk5sZEN3Z2RHVnVjMjl5UkdGMFlVOW1abk5sZENBcklEUXNJSFJsYm5OdmNrUmhkR0ZQWm1aelpYUWdLeUE0TENCMFpXNXpiM0pFWVhSaFQyWm1jMlYwSUNzZ01USXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0pEYjJSbElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb1lFTmhiaWQwSUdGalkyVnpjeUJ2ZFhSd2RYUWdkR1Z1YzI5eUlHUmhkR0VnYjI0Z2FXNWtaWGdnSkh0cGZTNWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCc1pYUWdkR1Z1YzI5eVJHRjBZVWx1WkdWNElEMGdkR1Z1YzI5eVJHRjBZVTltWm5ObGRDQXZJRFE3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JoZEdGVWVYQmxJRDBnZDJGemJTNUlSVUZRVlRNeVczUmxibk52Y2tSaGRHRkpibVJsZUNzclhUdGNiaUFnSUNBZ0lDQWdaR0YwWVU5bVpuTmxkQ0E5SUhkaGMyMHVTRVZCVUZVek1sdDBaVzV6YjNKRVlYUmhTVzVrWlhncksxMDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHUnBiWE5QWm1aelpYUWdQU0IzWVhOdExraEZRVkJWTXpKYmRHVnVjMjl5UkdGMFlVbHVaR1Y0S3l0ZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FXMXpUR1Z1WjNSb0lEMGdkMkZ6YlM1SVJVRlFWVE15VzNSbGJuTnZja1JoZEdGSmJtUmxlQ3NyWFR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWkdsdGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHUnBiWE5NWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1JwYlhNdWNIVnphQ2gzWVhOdExraEZRVkJWTXpKYlpHbHRjMDltWm5ObGRDQXZJRFFnS3lCcFhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZDJGemJTNWZUM0owUm5KbFpTaGthVzF6VDJabWMyVjBLVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6YVhwbElEMGdaR2x0Y3k1eVpXUjFZMlVvS0dFc0lHSXBJRDArSUdFZ0tpQmlMQ0F4S1R0Y2JpQWdJQ0FnSUNBZ2RIbHdaU0E5SUhSbGJuTnZja1JoZEdGVWVYQmxSVzUxYlZSdlUzUnlhVzVuS0dSaGRHRlVlWEJsS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtVm1aWEp5WldSTWIyTmhkR2x2YmlBOUlHbHZRbWx1WkdsdVoxTjBZWFJsUHk1dmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk5iYjNWMGNIVjBTVzVrYVdObGMxdHBYVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5WldabGNuSmxaRXh2WTJGMGFXOXVJRDA5UFNBblozQjFMV0oxWm1abGNpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblUzUnlhVzVuSUhSbGJuTnZjaUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJRzl1SUVkUVZTNG5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzUnlhVzVuUkdGMFlUb2djM1J5YVc1blcxMGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWkdGMFlVbHVaR1Y0SUQwZ1pHRjBZVTltWm5ObGRDQXZJRFE3WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnphWHBsT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5bVpuTmxkQ0E5SUhkaGMyMHVTRVZCVUZVek1sdGtZWFJoU1c1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlYaENlWFJsYzFSdlVtVmhaQ0E5SUdrZ1BUMDlJSE5wZW1VZ0xTQXhJRDhnZFc1a1pXWnBibVZrSURvZ2QyRnpiUzVJUlVGUVZUTXlXMlJoZEdGSmJtUmxlRjBnTFNCdlptWnpaWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEpwYm1kRVlYUmhMbkIxYzJnb2QyRnpiUzVWVkVZNFZHOVRkSEpwYm1jb2IyWm1jMlYwTENCdFlYaENlWFJsYzFSdlVtVmhaQ2twTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J2ZFhSd2RYUXVjSFZ6YUNoYmRIbHdaU3dnWkdsdGN5d2djM1J5YVc1blJHRjBZU3dnSjJOd2RTZGRLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkpaaUJoSUdObGNuUmhhVzRnYjNWMGNIVjBKM01nY0hKbFptVnljbVZrSUd4dlkyRjBhVzl1SUdseklFZFFWU0JpZFhRZ2RHaGxJSFJsYm5OdmNpQnBjeUJsYlhCMGVTd2dkMlVnYzNScGJHd2dibVZsWkNCMGJ5QmpjbVZoZEdVZ1lTQkRVRlZjYmlBZ0lDQWdJQ0FnSUNBdkx5QjBaVzV6YjNJZ1ptOXlJR2wwTGlCVWFHVnlaU0JwY3lCdWJ5QnRZWEJ3YVc1bklFZFFWU0JpZFdabVpYSWdabTl5SUdGdUlHVnRjSFI1SUhSbGJuTnZjaTVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jSEpsWm1WeWNtVmtURzlqWVhScGIyNGdQVDA5SUNkbmNIVXRZblZtWm1WeUp5QW1KaUJ6YVhwbElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1ozQjFRblZtWm1WeUlEMGdkMkZ6YlM1cWMyVndSMlYwUW5WbVptVnlLR1JoZEdGUFptWnpaWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pXeGxiV1Z1ZEZOcGVtVWdQU0JuWlhSVVpXNXpiM0pGYkdWdFpXNTBVMmw2WlNoa1lYUmhWSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXeGxiV1Z1ZEZOcGVtVWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQWhhWE5IY0hWQ2RXWm1aWEpUZFhCd2IzSjBaV1JVZVhCbEtIUjVjR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnVlc1emRYQndiM0owWldRZ1pHRjBZU0IwZVhCbE9pQWtlM1I1Y0dWOVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHUnZJRzV2ZENCeVpXeGxZWE5sSUhSb1pTQjBaVzV6YjNJZ2NtbG5hSFFnYm05M0xpQnBkQ0IzYVd4c0lHSmxJSEpsYkdWaGMyVmtJSGRvWlc0Z2RYTmxjaUJqWVd4c2N5QjBaVzV6YjNJdVpHbHpjRzl6WlNncExseHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWbGNFOTFkSEIxZEZSbGJuTnZjaUE5SUhSeWRXVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTFkSEIxZEM1d2RYTm9LRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlN3Z1pHbHRjeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkd2RVSjFabVpsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IzZHViRzloWkRvZ2QyRnpiUzVxYzJWd1EzSmxZWFJsUkc5M2JteHZZV1JsY2lobmNIVkNkV1ptWlhJc0lITnBlbVVnS2lCbGJHVnRaVzUwVTJsNlpTd2dkSGx3WlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjRzl6WlRvZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyRnpiUzVmVDNKMFVtVnNaV0Z6WlZSbGJuTnZjaWgwWlc1emIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdKMmR3ZFMxaWRXWm1aWEluWEc0Z0lDQWdJQ0FnSUNBZ0lDQmRLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RIbHdaV1JCY25KaGVVTnZibk4wY25WamRHOXlJRDBnZEdWdWMyOXlWSGx3WlZSdlZIbHdaV1JCY25KaGVVTnZibk4wY25WamRHOXlLSFI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlHNWxkeUIwZVhCbFpFRnljbUY1UTI5dWMzUnlkV04wYjNJb2MybDZaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVldsdWREaEJjbkpoZVNoa1lYUmhMbUoxWm1abGNpd2daR0YwWVM1aWVYUmxUMlptYzJWMExDQmtZWFJoTG1KNWRHVk1aVzVuZEdncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuTmxkQ2gzWVhOdExraEZRVkJWT0M1emRXSmhjbkpoZVNoa1lYUmhUMlptYzJWMExDQmtZWFJoVDJabWMyVjBJQ3NnWkdGMFlTNWllWFJsVEdWdVozUm9LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhRdWNIVnphQ2hiZEhsd1pTd2daR2x0Y3l3Z1pHRjBZU3dnSjJOd2RTZGRLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJSGRoYzIwdWMzUmhZMnRTWlhOMGIzSmxLR0psWm05eVpVZGxkRlJsYm5OdmNrUmhkR0ZUZEdGamF5azdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5UFNBbmMzUnlhVzVuSnlBbUppQmtZWFJoVDJabWMyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2QyRnpiUzVmWm5KbFpTaGtZWFJoVDJabWMyVjBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9JV3RsWlhCUGRYUndkWFJVWlc1emIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCM1lYTnRMbDlQY25SU1pXeGxZWE5sVkdWdWMyOXlLSFJsYm5OdmNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYVc5Q2FXNWthVzVuVTNSaGRHVXBJSHRjYmlBZ0lDQWdJSGRoYzIwdVgwOXlkRU5zWldGeVFtOTFibVJQZFhSd2RYUnpLR2x2UW1sdVpHbHVaMU4wWVhSbExtaGhibVJzWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRzkxZEhCMWREdGNiaUFnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0IzWVhOdExuTjBZV05yVW1WemRHOXlaU2hpWldadmNtVlNkVzVUZEdGamF5azdYRzVjYmlBZ0lDQnBibkIxZEZSbGJuTnZja2hoYm1Sc1pYTXVabTl5UldGamFDaDJJRDArSUhkaGMyMHVYMDl5ZEZKbGJHVmhjMlZVWlc1emIzSW9kaWtwTzF4dUlDQWdJRzkxZEhCMWRGUmxibk52Y2toaGJtUnNaWE11Wm05eVJXRmphQ2gySUQwK0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVVpXNXpiM0lvZGlrcE8xeHVJQ0FnSUdsdWNIVjBUM1YwY0hWMFFXeHNiMk56TG1admNrVmhZMmdvY0NBOVBpQjNZWE50TGw5bWNtVmxLSEFwS1R0Y2JseHVJQ0FnSUdsbUlDaHlkVzVQY0hScGIyNXpTR0Z1Wkd4bElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCM1lYTnRMbDlQY25SU1pXeGxZWE5sVW5WdVQzQjBhVzl1Y3loeWRXNVBjSFJwYjI1elNHRnVaR3hsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjblZ1VDNCMGFXOXVjMEZzYkc5amN5NW1iM0pGWVdOb0tIQWdQVDRnZDJGemJTNWZabkpsWlNod0tTazdYRzRnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nWlc1a0lIQnliMlpwYkdsdVoxeHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdaVzVrVUhKdlptbHNhVzVuSUQwZ0tITmxjM05wYjI1SlpEb2diblZ0WW1WeUtUb2dkbTlwWkNBOVBpQjdYRzRnSUdOdmJuTjBJSGRoYzIwZ1BTQm5aWFJKYm5OMFlXNWpaU2dwTzF4dUlDQmpiMjV6ZENCelpYTnphVzl1SUQwZ1lXTjBhWFpsVTJWemMybHZibk11WjJWMEtITmxjM05wYjI1SlpDazdYRzRnSUdsbUlDZ2hjMlZ6YzJsdmJpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmFXNTJZV3hwWkNCelpYTnphVzl1SUdsa0p5azdYRzRnSUgxY2JpQWdZMjl1YzNRZ2MyVnpjMmx2YmtoaGJtUnNaU0E5SUhObGMzTnBiMjViTUYwN1hHNWNiaUFnTHk4Z2NISnZabWxzWlNCbWFXeGxJRzVoYldVZ2FYTWdibTkwSUhWelpXUWdlV1YwTENCaWRYUWdhWFFnYlhWemRDQmlaU0JtY21WbFpDNWNiaUFnWTI5dWMzUWdjSEp2Wm1sc1pVWnBiR1ZPWVcxbElEMGdkMkZ6YlM1ZlQzSjBSVzVrVUhKdlptbHNhVzVuS0hObGMzTnBiMjVJWVc1a2JHVXBPMXh1SUNCcFppQW9jSEp2Wm1sc1pVWnBiR1ZPWVcxbElEMDlQU0F3S1NCN1hHNGdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9KME5oYmx4Y0ozUWdaMlYwSUdGdUlIQnliMlpwYkdVZ1ptbHNaU0J1WVcxbExpY3BPMXh1SUNCOVhHNGdJSGRoYzIwdVgwOXlkRVp5WldVb2NISnZabWxzWlVacGJHVk9ZVzFsS1R0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQmxlSFJ5WVdOMFZISmhibk5tWlhKaFlteGxRblZtWm1WeWN5QTlJQ2gwWlc1emIzSnpPaUJ5WldGa2IyNXNlU0JUWlhKcFlXeHBlbUZpYkdWVVpXNXpiM0pOWlhSaFpHRjBZVnRkS1RvZ1FYSnlZWGxDZFdabVpYSk1hV3RsVzEwZ1BUNGdlMXh1SUNCamIyNXpkQ0JpZFdabVpYSnpPaUJCY25KaGVVSjFabVpsY2t4cGEyVmJYU0E5SUZ0ZE8xeHVJQ0JtYjNJZ0tHTnZibk4wSUhSbGJuTnZjaUJ2WmlCMFpXNXpiM0p6S1NCN1hHNGdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlIUmxibk52Y2xzeVhUdGNiaUFnSUNCcFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb1pHRjBZU2tnSmlZZ0oySjFabVpsY2ljZ2FXNGdaR0YwWVNrZ2UxeHVJQ0FnSUNBZ1luVm1abVZ5Y3k1d2RYTm9LR1JoZEdFdVluVm1abVZ5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR0oxWm1abGNuTTdYRzU5TzF4dUlpd2dJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVYRzR2THk4Z1BISmxabVZ5Wlc1alpTQnNhV0k5WENKM1pXSjNiM0pyWlhKY0lpQXZQbHh1WEc0dkwxeHVMeThnS2lCMGVYQmxJR2hoWTJzZ1ptOXlJRndpU0ZSTlRFbHRZV2RsUld4bGJXVnVkRndpWEc0dkwxeHVMeThnYVc0Z2RIbHdaWE5qY21sd2RDd2dkR2hsSUhSNWNHVWdiMllnWENKSVZFMU1TVzFoWjJWRmJHVnRaVzUwWENJZ2FYTWdaR1ZtYVc1bFpDQnBiaUJzYVdJdVpHOXRMbVF1ZEhNc0lIZG9hV05vSUdseklHTnZibVpzYVdOMElIZHBkR2dnYkdsaUxuZGxZbmR2Y210bGNpNWtMblJ6TGx4dUx5OGdkMmhsYmlCM1pTQjFjMlVnZDJWaWQyOXlhMlZ5TENCMGFHVWdiR2xpTG5kbFluZHZjbXRsY2k1a0xuUnpJSGRwYkd3Z1ltVWdkWE5sWkN3Z2QyaHBZMmdnWkc5bGN5QnViM1FnYUdGMlpTQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MElHUmxabWx1WldRdVhHNHZMMXh1THk4Z2QyVWdkMmxzYkNCblpYUWdkR2hsSUdadmJHeHZkMmx1WnlCbGNuSnZjbk1nWTI5dGNHeGhhVzVwYm1jZ2RHaGhkQ0JJVkUxTVNXMWhaMlZGYkdWdFpXNTBJR2x6SUc1dmRDQmtaV1pwYm1Wa09seHVMeTljYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNHZMMXh1THk4Z0xpNHZZMjl0Ylc5dUwyUnBjM1F2WTJwekwzUmxibk52Y2kxbVlXTjBiM0o1TG1RdWRITTZNVGczT2pJNUlDMGdaWEp5YjNJZ1ZGTXlOVFV5T2lCRFlXNXViM1FnWm1sdVpDQnVZVzFsSUNkSVZFMU1TVzFoWjJWRmJHVnRaVzUwSnk0Z1JHbGtJSGx2ZFNCdFpXRnVYRzR2THlBblNGUk5URXhKUld4bGJXVnVkQ2MvWEc0dkwxeHVMeThnTVRnM0lDQWdJQ0JtY205dFNXMWhaMlVvYVcxaFoyVkZiR1Z0Wlc1ME9pQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MExDQnZjSFJwYjI1elB6b2dWR1Z1YzI5eVJuSnZiVWx0WVdkbFJXeGxiV1Z1ZEU5d2RHbHZibk1wT2x4dUx5OGdVSEp2YldselpUeFVlWEJsWkZSbGJuTnZjanduWm14dllYUXpNaWMrSUh3Z1ZIbHdaV1JVWlc1emIzSThKM1ZwYm5RNEp6NCtPMXh1THk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IrZm41K2ZuNStmbjUrZm41K2ZuNStYRzR2TDF4dUx5OGdibTlrWlY5dGIyUjFiR1Z6TDBCM1pXSm5jSFV2ZEhsd1pYTXZaR2x6ZEM5cGJtUmxlQzVrTG5Sek9qZ3pPamNnTFNCbGNuSnZjaUJVVXpJMU5USTZJRU5oYm01dmRDQm1hVzVrSUc1aGJXVWdKMGhVVFV4SmJXRm5aVVZzWlcxbGJuUW5MaUJFYVdRZ2VXOTFJRzFsWVc1Y2JpOHZJQ2RJVkUxTVRFbEZiR1Z0Wlc1MEp6OWNiaTh2WEc0dkx5QTRNeUFnSUNBZ2ZDQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MFhHNHZMeUFnSUNBZ0lDQWdJQ0IrZm41K2ZuNStmbjUrZm41K2ZuNStYRzR2TDF4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNiaTh2WEc0dkx5QmdTRlJOVEVsdFlXZGxSV3hsYldWdWRHQWdhWE1nYjI1c2VTQjFjMlZrSUdsdUlIUjVjR1VnWkdWamJHRnlZWFJwYjI0Z1lXNWtJRzV2ZENCcGJpQnlaV0ZzSUdOdlpHVXVJRk52SUhkbElHUmxabWx1WlNCcGRDQmhjeUJnZFc1cmJtOTNibUFnYUdWeVpTQjBiMXh1THk4Z1lubHdZWE56SUhSb1pTQjBlWEJsSUdOb1pXTnJMbHh1THk5Y2JtUmxZMnhoY21VZ1oyeHZZbUZzSUh0Y2JpQWdkSGx3WlNCSVZFMU1TVzFoWjJWRmJHVnRaVzUwSUQwZ2RXNXJibTkzYmp0Y2JuMWNibHh1YVcxd2IzSjBJSHRQY25SWFlYTnRUV1Z6YzJGblpTd2dVMlZ5YVdGc2FYcGhZbXhsVkdWdWMyOXlUV1YwWVdSaGRHRjlJR1p5YjIwZ0p5NHVMM0J5YjNoNUxXMWxjM05oWjJWekp6dGNibWx0Y0c5eWRDQjdZM0psWVhSbFUyVnpjMmx2Yml3Z1kyOXdlVVp5YjIxRmVIUmxjbTVoYkVKMVptWmxjaXdnWlc1a1VISnZabWxzYVc1bkxDQmxlSFJ5WVdOMFZISmhibk5tWlhKaFlteGxRblZtWm1WeWN5d2dhVzVwZEVWd0xDQnBibWwwVW5WdWRHbHRaU3dnY21Wc1pXRnpaVk5sYzNOcGIyNHNJSEoxYm4wZ1puSnZiU0FuTGk0dmQyRnpiUzFqYjNKbExXbHRjR3duTzF4dWFXMXdiM0owSUh0cGJtbDBhV0ZzYVhwbFYyVmlRWE56WlcxaWJIbDlJR1p5YjIwZ0p5NHVMM2RoYzIwdFptRmpkRzl5ZVNjN1hHNWNibk5sYkdZdWIyNXRaWE56WVdkbElEMGdLR1YyT2lCTlpYTnpZV2RsUlhabGJuUThUM0owVjJGemJVMWxjM05oWjJVK0tUb2dkbTlwWkNBOVBpQjdYRzRnSUdOdmJuTjBJSHQwZVhCbExDQnBiaUE2SUcxbGMzTmhaMlY5SUQwZ1pYWXVaR0YwWVR0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J6ZDJsMFkyZ2dLSFI1Y0dVcElIdGNiaUFnSUNBZ0lHTmhjMlVnSjJsdWFYUXRkMkZ6YlNjNlhHNGdJQ0FnSUNBZ0lHbHVhWFJwWVd4cGVtVlhaV0pCYzNObGJXSnNlU2h0WlhOellXZGxJUzUzWVhOdEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVwZEZKMWJuUnBiV1VvYldWemMyRm5aU0VwTG5Sb1pXNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1Y5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y2lBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pTd2daWEp5ZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbklnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVXNJR1Z5Y24wcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnSjJsdWFYUXRaWEFuT2lCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUh0bGNFNWhiV1VzSUdWdWRuMGdQU0J0WlhOellXZGxJVHRjYmlBZ0lDQWdJQ0FnYVc1cGRFVndLR1Z1ZGl3Z1pYQk9ZVzFsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXpkRTFsYzNOaFoyVW9lM1I1Y0dWOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y2lBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaU3dnWlhKeWZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMkZ6WlNBblkyOXdlUzFtY205dEp6b2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdZblZtWm1WeWZTQTlJRzFsYzNOaFoyVWhPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmlkV1ptWlhKRVlYUmhJRDBnWTI5d2VVWnliMjFGZUhSbGNtNWhiRUoxWm1abGNpaGlkV1ptWlhJcE8xeHVJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pTd2diM1YwT2lCaWRXWm1aWEpFWVhSaGZTQmhjeUJQY25SWFlYTnRUV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyRnpaU0FuWTNKbFlYUmxKem9nZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3Ylc5a1pXd3NJRzl3ZEdsdmJuTjlJRDBnYldWemMyRm5aU0U3WEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVk5sYzNOcGIyNG9iVzlrWld3c0lHOXdkR2x2Ym5NcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWE56YVc5dVRXVjBZV1JoZEdFZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1VzSUc5MWREb2djMlZ6YzJsdmJrMWxkR0ZrWVhSaGZTQmhjeUJQY25SWFlYTnRUV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25JZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1VzSUdWeWNuMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR05oYzJVZ0ozSmxiR1ZoYzJVbk9seHVJQ0FnSUNBZ0lDQnlaV3hsWVhObFUyVnpjMmx2YmlodFpYTnpZV2RsSVNrN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbGZTazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ1kyRnpaU0FuY25WdUp6b2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdjMlZ6YzJsdmJrbGtMQ0JwYm5CMWRFbHVaR2xqWlhNc0lHbHVjSFYwY3l3Z2IzVjBjSFYwU1c1a2FXTmxjeXdnYjNCMGFXOXVjMzBnUFNCdFpYTnpZV2RsSVR0Y2JpQWdJQ0FnSUNBZ2NuVnVLSE5sYzNOcGIyNUpaQ3dnYVc1d2RYUkpibVJwWTJWekxDQnBibkIxZEhNc0lHOTFkSEIxZEVsdVpHbGpaWE1zSUc1bGR5QkJjbkpoZVNodmRYUndkWFJKYm1ScFkyVnpMbXhsYm1kMGFDa3VabWxzYkNodWRXeHNLU3dnYjNCMGFXOXVjeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRIQjFkSE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5MWRIQjFkSE11YzI5dFpTaHZJRDArSUc5Yk0xMGdJVDA5SUNkamNIVW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pTd2daWEp5T2lBblVISnZlSGtnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0J1YjI0dFkzQjFJSFJsYm5OdmNpQnNiMk5oZEdsdmJpNG5mU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHQwZVhCbExDQnZkWFE2SUc5MWRIQjFkSE45SUdGeklFOXlkRmRoYzIxTlpYTnpZV2RsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhoMGNtRmpkRlJ5WVc1elptVnlZV0pzWlVKMVptWmxjbk1vYjNWMGNIVjBjeUJoY3lCVFpYSnBZV3hwZW1GaWJHVlVaVzV6YjNKTlpYUmhaR0YwWVZ0ZEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXpkRTFsYzNOaFoyVW9lM1I1Y0dVc0lHVnljbjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOaGMyVWdKMlZ1WkMxd2NtOW1hV3hwYm1jbk9seHVJQ0FnSUNBZ0lDQmxibVJRY205bWFXeHBibWNvYldWemMyRm5aU0VwTzF4dUlDQWdJQ0FnSUNCd2IzTjBUV1Z6YzJGblpTaDdkSGx3WlgwcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdmVnh1SUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pTd2daWEp5ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrN1hHNGdJSDFjYm4wN1hHNGlYU3dLSUNBaWJXRndjR2x1WjNNaU9pQWlPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEUxQlFXRXNWVUZCYTBNc1kwRkJjME03UVVGQmNrWTdRVUZCUVR0QlFVRlBMRTFCUVUwc1YwRkJWenRCUVVGcFFpeE5RVUZOTEdWQlFXVTdRVUZCYVVJc1RVRkJUU3h0UWtGQmJVSTdRVUZCUVR0QlFVRkJPenM3UVVOQmVFYzdRVUZCUVR0QlFVRkJMR2RDUVVGQlFUdEJRVUZCTzBGQlFVRXNUVUZCWVVFN1FVRkJZanRCUVVGQk8wRkJRVThzVFVGQlRVRXNVVUZCVHp0QlFVRkJPMEZCUVVFN096dEJRMEZ3UWp0QlFVRkJPMEZCUVVFN1FVRkRRU3hWUVVGSkxGZEJRVmNzVFVGQlRUdEJRVU51UWl4WlFVRkpMR0ZCUVdFc1QwRkJUeXhoUVVGaExHVkJRV1VzVTBGQlV5eG5Ra0ZCWjBJc1UwRkJVeXhqUVVGakxFMUJRVTA3UVVGRE1VY3NXVUZCU1N4UFFVRlBMR1ZCUVdVN1FVRkJZU3gxUWtGQllTeGpRVUZqTzBGQlEyeEZMR1ZCUTBZc1UwRkJVeXhaUVVGWkxFTkJRVU1zUjBGQlJ6dEJRVVY2UWl4alFVRkpMRWxCUVVVc1YwRkJWU3hIUVVGRk8wRkJRVVVzV1VGQlJTeFJRVUZOTEVsQlFVa3NVVUZCVVN4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHZENRVUZGTzBGQlFVVXNaMEpCUVVVN1FVRkJRU3hWUVVGRExFTkJRVU03UVVGQlJTeGpRVUZKTEV0QlFVY3NUMEZCVHl4UFFVRlBMRU5CUVVNc1IwRkJSU3hEUVVGRExFZEJRVVVzUzBGQlJ5eHJRa0ZCYVVJc1MwRkJSeXhaUVVGVkxFOUJRVThzVVVGQlR5eEpRVUZGTEdOQlFWa3NUMEZCVHl4bFFVRmpMRXRCUVVjc1dVRkJWU3hQUVVGUExGZEJRVk1zV1VGQlZTeFBRVUZQTEZGQlFWRXNXVUZCVlN4WlFVRlZMRTlCUVU4c1VVRkJVU3hUUVVGVExFMUJRVXNzU1VGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlR0QlFVTjJVaXhqUVVGSExFbEJRVWM3UVVGQlF5eG5Ra0ZCU1N4TFFVRkhMSFZEUVVGakxFbEJRVVU3UVVGQlowSXNaMEpCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZGTEUxQlFVa3NXVUZCVlR0QlFVRkpMR2RDUVVGRkxFTkJRVU1zUjBGQlJTeE5RVUZKTzBGQlFVTXNhMEpCUVVVc1JVRkJSU3hEUVVGRExFbEJRVVVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRlZCUVZVc1EwRkJRenRCUVVGRkxIRkNRVUZQTEVkQlFVY3NZVUZCWVN4SFFVRkZMRWxCUVVVc1UwRkJUeXhOUVVGTk8wRkJRVUVzV1VGQlF6dEJRVUZGTEdkQ1FVRkZMRTlCUVVjN1FVRkJReXhyUWtGQlJTeEZRVUZGTEVkQlFVVXNTVUZCUlR0QlFVRkZMR2RDUVVGRkxGZEJRVk1zU1VGQlJTeEpRVUZKTEZkQlFWY3NRMEZCUXp0QlFVRkhMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZGTEdkQ1FVRkZMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzU1VGQlJTeFRRVUZMTzBGQlFVTXNhMEpCUVVVc1JVRkJSU3hEUVVGRExFbEJRVVVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRlZCUVZVc1EwRkJRenRCUVVGRkxHbENRVUZITEZOQlFWTXNSMEZCUlN4SlFVRkZMRk5CUVU4c1VVRkJUeXhEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEc5Q1FVRkZMRVZCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzU1VGQlJTeEZRVUZGTEZOQlFVOHNRMEZCUXp0QlFVRkJMR05CUVVNc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlJTeGhRVUZETEVWQlFVVXNaVUZCWVN4SlFVRkZMRkZCUVZFc1MwRkJTeXhYUVVGVExFdEJRVWNzVVVGQlVTeExRVUZMTEVOQlFVTXNSVUZCUlN4UlFVRlJMRTlCUVUwc1IwRkJSenRCUVVGSExHOUNRVUZSTEV0QlFVc3NUVUZCVFN4RFFVRkRPMEZCUVVVc1kwRkJSU3hWUVVGUkxFMUJRVWs3UVVGQlFTeFZRVUUwUWl4WFFVRlRMRTFCUVVrN1FVRkJSU3huUWtGQlJTeEpRVU51Wml4TFFVRkxMRk5CUVZNc1QwRkJTeXhsUVVGaExFOUJRVThzV1VGQlZTeFRRVUZUTEd0Q1FVRm5RaXhKUVVGRkxGTkJRVk1zWTBGQll5eE5RVUZMTEdWQlFXRXNTVUZCUlN4aFFVRlpMRTFCUVVrc1JVRkJSU3hSUVVGUkxFOUJRVThzU1VGQlJTeEpRVUZGTEVWQlFVVXNUMEZCVHl4SFFVRkZMRVZCUVVVc1VVRkJVU3hWUVVGVExFVkJRVVVzUlVGQlJTeFpRVUZaTEVkQlFVY3NTVUZCUlN4RFFVRkRMRWxCUVVVc1NVRkJSU3hKUVVGSExFbEJRVVVzVDBGQlJ6dEJRVUZETEd0Q1FVRkpMRWxCUVVVc1NVRkJTVHRCUVVGbExHZENRVUZGTEV0QlFVc3NUMEZCVFN4SFFVRkZMRXRCUVVVN1FVRkJSU3huUWtGQlJTeExRVUZMTEVsQlFVazdRVUZCUlN4eFFrRkJUeXhGUVVGRk8wRkJRVUVzV1VGQldTeEhRVUZGTEUxQlFVa3NTVUZCUlN4UFFVRkhPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEpRVUZKTzBGQlFXVXNaMEpCUVVVc1MwRkJTeXhQUVVGTkxFZEJRVVVzUzBGQlJUdEJRVUZGTEdkQ1FVRkZMR1ZCUVdFN1FVRkJZeXhuUWtGQlJTeExRVUZMTEVsQlFVazdRVUZCUlN4eFFrRkJUeXhKUVVGSkxGZEJRVmNzUlVGQlJTeFJRVUZSTzBGQlFVRXNXVUZCUXl4SlFVRkhMRWxCUVVVc1EwRkJReXhIUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1NVRkJTVHRCUVVGbExHZENRVUZGTEV0QlFVc3NUMEZCVFN4SFFVRkZMRWxCUVVVN1FVRkJSU3huUWtGQlJTeGxRVU16WlR0QlFVRmpMR2RDUVVGRkxGTkJRVThzVFVGQlNUdEJRVUZETEhWQ1FVRkxMRVZCUVVVc1ZVRkJVU3hMUVVGSExFVkJRVVVzVlVGQlVTeEZRVUZGTEZkQlFWTXNSVUZCUlN4RlFVRkZMRkZCUVZFc1NVRkJSU3hGUVVGRk8wRkJRVUVzWTBGQlF6dEJRVUZGTEdkQ1FVRkZMRlZCUVZFN1FVRkJSU3huUWtGQlJTeExRVUZMTEVsQlFVazdRVUZCUVN4WlFVRkRPMEZCUVVVc1kwRkJTU3hMUVVGSExGRkJRVkVzU1VGQlNTeExRVUZMTEU5QlFVOHNSMEZCUlN4SlFVRkZMRkZCUVZFc1RVRkJUU3hMUVVGTExFOUJRVTg3UVVGQlJTeHBRa0ZCVHl4UFFVRlBMRWRCUVVVc1JVRkJSVHRCUVVGRkxHVkJRVWM3UVVGQlN5eHpRa0ZCVlN4UFFVRlBMR1ZCUVdFc1JVRkJSU3hwUTBGQmFVTTdRVUZCUlN4alFVRkpMRWRCUVVVc1MwRkJSeXhQUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZEYkZNc2JVSkJRVk1zUzBGQlNUdEJRVUZETEdkQ1FVRkpMRWxCUVVVc1JVRkJSVHRCUVVGUExHTkJRVVVzVVVGQlRTeEpRVUZGTEVsQlFVa3NWVUZCVlN4RFFVRkRPMEZCUVVVc1kwRkJSU3hUUVVGUExFbEJRVWtzVjBGQlZ5eERRVUZETzBGQlFVVXNZMEZCUlN4VFFVRlBMRWxCUVVVc1NVRkJTU3hYUVVGWExFTkJRVU03UVVGQlJTeGpRVUZGTEZWQlFWRXNTVUZCU1N4WlFVRlpMRU5CUVVNN1FVRkJSU3hqUVVGRkxGTkJRVThzU1VGQlJTeEpRVUZKTEZkQlFWY3NRMEZCUXp0QlFVRkZMR05CUVVVc1ZVRkJVU3hKUVVGRkxFbEJRVWtzV1VGQldTeERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRWxCUVVrc1lVRkJZU3hEUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEV0QlFVY3NTVUZCU1N4aFFVRmhMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zWTBGQlNTeEpRVUZGTEVOQlFVTXNSMEZCUlN4SlFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZGTEVkQlFVVXNTVUZCUlN4TlFVRkxMRWxCUVVVN1FVRkJTeXh0UWtGQlV5eEZRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSU3hoUVVGWExFbEJRVVU3UVVGQlNTeGpRVUZGTEVOQlFVTTdRVUZCUlN4cFFrRkJSenRCUVVGSExHZENRVUZGTEVsQlFVa3NXVUZCV1N4aFFVRmhMRWxCUVVVc01FTkJRVEJETzBGQlFVVXNZMEZCUlN4RFFVRkRPMEZCUVVVc2EwSkJRVTA3UVVGQlFTeFZRVUZGTzBGQlEzQmlMR05CUVVrc1MwRkJSeXhQUVVGSExFVkJRVVVzVjBGQlZ5eDFRMEZCZFVNc1IwRkJSU3hKUVVGRkxFOUJRVWNzUlVGQlJTeFhRVUZYTEZOQlFWTXNSMEZCUlR0QlFVRkZMR05CUVVVN1FVRkJPRUlzWTBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkZPMEZCUVVNc1owSkJRVWtzUzBGQlJ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1lVRkJWeXhGUVVGRkxGZEJRVmNzU1VGQlJ5eERRVUZETEVsQlFVVXNTVUZCUlR0QlFVRkJMRlZCUVVVN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGTE8wRkJRVUVzVlVGQmEwUTdRVUZEYWxJc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjc1RVRkJTU3hIUVVGRk8wRkJRVU1zYTBKQlFVY3NZMEZCV1N4UFFVRlBMRk5CUVU4c1EwRkJReXhGUVVGRkxFTkJRVU03UVVGQlJTeDFRa0ZCVHl4TlFVRk5MRWRCUVVVc1JVRkJReXhoUVVGWkxHTkJRV0VzUTBGQlF5eEZRVUZGTEV0QlFVc3NUMEZCUnp0QlFVRkRMSE5DUVVGSExFTkJRVU1zUlVGQlJUdEJRVUZITERCQ1FVRkxMSGxEUVVGMVF5eEpRVUZGTzBGQlFVa3NlVUpCUVU4c1JVRkJSU3haUVVGWk8wRkJRVUVzWjBKQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1RVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVUZGTEd0Q1FVRkhPMEZCUVVVc2RVSkJRVThzU1VGQlNTeFJRVUZSTEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2IwSkJRVVVzUjBGQlJTeFBRVUZITEVWQlFVVXNTVUZCU1N4WFFVRlhMRU5CUVVNc1EwRkJReXhIUVVGRkxFTkJRVU03UVVGQlFTeG5Ra0ZCUXl4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRExHMUNRVUZQTEZGQlFWRXNVVUZCVVN4RlFVRkZMRXRCUVVzc1RVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVU4c1IwRkJSeXhEUVVGRExFVkJRVVVzUzBGQlN5eFBRVUZITEZsQlFWa3NXVUZCV1N4SFFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzVDBGQlJ5eERRVUZETEVWQlFVVXNTMEZCU3l4SFFVRkZMRTlCUVVjN1FVRkJReXhuUWtGQlJTd3dRMEZCTUVNc1EwRkJReXhGUVVGRk8wRkJRVVVzWjBKQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRGJtUXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZPMEZCUVVVc2JVSkJRVTBzWTBGQldTeFBRVUZQTEZsQlFWa3NkMEpCUVhOQ0xFZEJRVWNzUTBGQlF5eExRVUZITEVWQlFVVXNRMEZCUXl4TFFVRkhMRTFCUVVrc1kwRkJXU3hQUVVGUExGRkJRVTBzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXl4SlFVRkZMRTFCUVUwc1IwRkJSU3hGUVVGRExHRkJRVmtzWTBGQllTeERRVUZETEVWQlFVVXNTMEZCU3l4UFFVRkhMRmxCUVZrc2NVSkJRWEZDTEVkQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4clEwRkJhME1zUTBGQlF5eEZRVUZGTzBGQlFVVXNaMEpCUVVVc01rTkJRVEpETzBGQlFVVXNjVUpCUVU4c1IwRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZsQlFVTXNRMEZCUXl4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVONlZpeGpRVUZKTEVkQlFVVXNTMEZCUnl4RlFVRkRMRkZCUVU4c1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeE5RVUZKTzBGQlFVTXNaMEpCUVVjc1pVRkJZU3hQUVVGUExFdEJRVWNzUTBGQlF5eEZRVUZGTzBGQlFVY3NjVUpCUVU4N1FVRkJSU3huUWtGQlJTeEZRVUZGTEUxQlFVa3NRMEZCUXp0QlFVRkZMR05CUVVVc1YwRkJWeXhKUVVGSkxFMUJRVWtzU1VGQlJTeEZRVUZGTEZWQlFWVXNRMEZCUXp0QlFVRkhMR2RDUVVGRkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZCUlN4blFrRkJSeXhEUVVGRE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNaMEpCUVVjc1NVRkJSU3hKUVVGRkxFVkJRVVU3UVVGQlZ5eHhRa0ZCVHp0QlFVRkZMR2RDUVVGSE8wRkJRVU1zY1VKQlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc1UwRkJVeXhIUVVGRkxFbEJRVVVzUTBGQlF5eEhRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVN1FVRkJRU3haUVVGRExGRkJRVTA3UVVGQlF5eHhRa0ZCVHp0QlFVRkJMRmxCUVVNN1FVRkJRU3hWUVVGRExFVkJRVU03UVVGQlJTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVN1FVRkJReXhwUWtGQlN5eExRVUZITEVsQlFVVTdRVUZCUnl4cFFrRkJTeXhMUVVGSExGTkJRVk1zUjBGQlJUdEJRVUZETEdkQ1FVRkZMRXRCUVVzc1MwRkJSeXhOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkZMR2xDUVVGTExFdEJRVWNzVTBGQlV5eEhRVUZGTzBGQlFVTXNaMEpCUVVVc1MwRkJTeXhMUVVGSExFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUVN4WlFVRkRPMEZCUVVVc2FVSkJRVXNzUzBGQlJ5eFRRVUZUTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGTExFZEJRVWM3UVVGQlJTeHRRa0ZCU3l4SFFVRkhMRU5CUVVNN1FVRkJSU3h0UWtGQlN5eEhRVUZITEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVVc2FVSkJRVXNzUzBGQlJ5eFhRVUZWTzBGQlFVTXNaMEpCUVVVc1MwRkJTeXhMUVVGSExFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1ZVRkJRenRCUVVONFpDeGpRVUZKTEV0QlFVY3NSMEZCUlN4TFFVRkhMRWRCUVVVc1MwRkJSeXhsUVVGaExFOUJRVThzWTBGQldTeEpRVUZKTEZsQlFWa3NUVUZCVFN4SlFVRkZMRkZCUVU4c1MwRkJSeXhEUVVGRExFZEJRVVVzUjBGQlJTeE5RVUZKTzBGQlFVTXNiVUpCUVVzN1FVRkJSU3huUWtGQlNTeEpRVUZGTEVsQlFVVTdRVUZCUlN4cFFrRkJTU3hKUVVGRkxFZEJRVVVzUlVGQlJTeERRVUZETEV0QlFVY3NSVUZCUlN4TFFVRkhPMEZCUVVrc1owSkJRVVU3UVVGQlJTeG5Ra0ZCUnl4TFFVRkhMRWxCUVVVc1MwRkJSeXhGUVVGRkxGVkJRVkU3UVVGQlJ5eHhRa0ZCVHl4SFFVRkhMRTlCUVU4c1JVRkJSU3hUUVVGVExFZEJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNhVUpCUVVrc1NVRkJSU3hKUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJSU3hIUVVGSE8wRkJRVVVzYTBKQlFVY3NTVUZCUlN4TFFVRkpPMEZCUVVNc2IwSkJRVWtzU1VGQlJTeEZRVUZGTEVkQlFVY3NTVUZCUlR0QlFVRkhMRzlDUVVGSExGRkJRVTBzU1VGQlJUdEJRVUZMTEhWQ1FVRkhMRTlCUVU4c1kwRkJZeXhKUVVGRkxFOUJRVXNzU1VGQlJTeERRVUZETzBGQlFVRXNjVUpCUVUwN1FVRkJReXh6UWtGQlNTeEpRVUZGTEVWQlFVVXNSMEZCUnl4SlFVRkZPMEZCUVVjc2MwSkJRVVVzVVVGQlRTeEpRVUZGTEZGQlFVMHNTVUZCUlN4UFFVRkxMRXRCUVVjc1MwRkJSeXhKUVVGRkxFdEJRVWNzU1VGQlJTeE5RVUZKTEV0QlFVY3NTMEZCUnl4TFFVRkhMRXRCUVVjc1NVRkJSU3hGUVVGRkxFZEJRVWNzU1VGQlJUdEJRVUZITERCQ1FVRk5MRWxCUVVVc1MwRkJSeXhQUVVGUExHRkJRV0VzUTBGQlF5eExRVUZITEV0QlFVY3NUMEZCVFN4TFFVRkhMRTlCUVU4c1lVRkJZU3hSUVVGTkxFdEJRVWNzU1VGQlJ5eFJRVUZOTEVsQlFVVXNTVUZCU1R0QlFVRkJMR2RDUVVGRk8wRkJRVUVzWTBGQlF6dEJRVUZOTEhGQ1FVRkhMRTlCUVU4c1lVRkJZU3hEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVONFowSXNTVUZCUlN4RFFVRkRMRWRCUVVVc1QwRkJTeXhQUVVGTExFdEJRVWNzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXl4SlFVRkZMRWxCUVVjc1NVRkJSU3hQUVVGSE8wRkJRVU1zY1VKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlR5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVVzVjBGQlZ5eERRVUZETzBGQlFVVXNjVUpCUVVzc1NVRkJSU3hOUVVGSkxGRkJRVTBzU1VGQlJTeExRVUZITEVsQlFVVXNVMEZCVHl4TFFVRkhMRk5CUVU4c1MwRkJSeXhMUVVGSExFZEJRVVVzUlVGQlJTeExRVUZITEV0QlFVYzdRVUZCUVN4WlFVRkRPMEZCUVVNc2JVSkJRVTg3UVVGQlFTeFZRVUZETEVkQlFVVXNTVUZCUlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMR2RDUVVGSExFVkJRVVVzU1VGQlJUdEJRVUZITEhGQ1FVRlBPMEZCUVVVc1owSkJRVWtzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRWxCUVVVc1NVRkJSVHRCUVVGRkxIRkNRVUZSTEVsQlFVVXNSMEZCUlN4SlFVRkZMRVZCUVVVc1VVRkJUeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1YwRkJWeXhEUVVGRE8wRkJRVVVzYTBKQlFVY3NVMEZCVHl4TFFVRkhMRk5CUVU4c1IwRkJSVHRCUVVGRExHOUNRVUZKTEVsQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc1EwRkJRenRCUVVGRkxHOUNRVUZGTEZWQlFWRXNTVUZCUlN4VFFVRlBMRTFCUVVrc1NVRkJSVHRCUVVGQkxHTkJRVWs3UVVGQlF5eHJRa0ZCUnl4UFFVRkxMRWRCUVVVN1FVRkJReXh2UWtGQlJ5eExRVUZITzBGQlFVVTdRVUZCVFN4clFrRkJSU3hSUVVGTkxFTkJRVU1zU1VGQlJUdEJRVUZCTEdOQlFVTXNUMEZCU3p0QlFVRkRMRzlDUVVGSExGRkJRVTBzUjBGQlJUdEJRVUZETEhOQ1FVRkhMRWxCUVVVc1MwRkJSenRCUVVGRk8wRkJRVTBzYjBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hMUVVGSE8wRkJRVUVzWjBKQlFVTXNUMEZCU3p0QlFVRkRMSE5DUVVGSExGTkJRVThzUjBGQlJUdEJRVUZETEhkQ1FVRkhMRWxCUVVVc1MwRkJSenRCUVVGRk8wRkJRVTBzYzBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hMUVVGSE8wRkJRVUVzYTBKQlFVVXNUMEZCU3p0QlFVRkRMSGRDUVVGSExFbEJRVVVzUzBGRGJtWTdRVUZCUlR0QlFVRk5MSE5DUVVGRkxGRkJRVTBzUTBGQlF5eEpRVUZGTEUxQlFVa3NTMEZCUnp0QlFVRkhMSE5DUVVGRkxGRkJRVTBzUTBGQlF5eEpRVUZGTEUxQlFVa3NTMEZCUnl4TFFVRkhPMEZCUVVFc2EwSkJRVVU3UVVGQlF5eHZRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSU3hOUVVGSkxFdEJRVWNzU1VGQlJUdEJRVUZCTEdkQ1FVRkZPMEZCUVVNc2EwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4SlFVRkZPMEZCUVVFc1kwRkJSVHRCUVVGQkxGbEJRVU03UVVGQlF5eGpRVUZGTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVThzU1VGQlJUdEJRVUZCTEZWQlFVTXNSMEZCUlN4SlFVRkZMRTlCUVVjc1RVRkJTU3hKUVVGRkxFMUJRVWtzVFVGQlNTeEpRVUZGTEU5QlFVc3NUVUZCU1N4SlFVRkZMRTFCUVVzc1MwRkJSeXhEUVVGRExFZEJRVVVzU1VGQlJ5eEpRVUZITEVsQlFVY3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeEhRVUZITEVkQlFVVXNTMEZCUnl4RFFVRkRMRWRCUVVVc1NVRkJSeXhKUVVGSExFbEJRVWNzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hIUVVGSExFZEJRVVVzUzBGQlJ5eFBRVUZITzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2FVSkJRVWNzUlVGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETEVkQlFVVXNTVUZCUlN4RFFVRkRMRWRCUVVVc1NVRkJSU3hEUVVGRExFZEJRVVVzUzBGQlJ5eE5RVUZKTzBGQlFVTXNaMEpCUVVjc1EwRkJReXhIUVVGRk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4RlFVRkRMRTFCUVVzc1dVRkJWeXhUUVVGUkxGbEJRVmNzVFVGQlN5eExRVUZKTEV0QlFVa3NTMEZCU1N4TlFVRkxMR3RDUVVGcFFpeFBRVUZOTEZsQlFWVXNUMEZCVHl4aFFVRlhMRlZCUVZVc1lVRkJWeXhWUVVGVkxGVkJRVlVzUTBGQlF5eExRVUZITEV0QlFVczdRVUZCUVN4blFrRkJVVHRCUVVGQkxHZENRVU4yWmp0QlFVRkJMR05CUVVjc1NVRkJSU3hWUVVGVExFZEJRVVVzVFVGQlNTeHBRa0ZCWjBJc1IwRkJSVHRCUVVGRkxHMUNRVUZKTEV0QlFVczdRVUZCUlN3eVFrRkJVeXhGUVVGRkxFTkJRVU1zU1VGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4SlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEd0Q1FVRkpMRWxCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZKTEV0QlFVczdRVUZCUlN4clFrRkJSU3hMUVVGTExFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVN1FVRkJSU3hyUWtGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEV0QlFVY3NRMEZCUXl4TlFVRkxMRU5CUVVNc1IwRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRVZCUVVVc1IwRkJSU3hMUVVGSExFTkJRVU1zU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVWQlFVVTdRVUZCUlN4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFbEJRVVVzUTBGQlF6dEJRVUZGTEdOQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1JVRkJSU3hOUVVGTk8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkRPMEZCUTJwVUxHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlNTeEpRVUZGTEZsQlFWVXNUMEZCVHl4SlFVRkZMRVZCUVVVc1UwRkJVeXhKUVVGRkxFdEJRVWNzU1VGQlJ5eEZRVUZGTEZOQlFVODdRVUZCUnl4dlFrRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlJUdEJRVUZGTEhGQ1FVRlBPMEZCUVVFc1dVRkJRenRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVThzUlVGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUnp0QlFVRkJMRmxCUVVNN1FVRkJReXh4UWtGQlV5eEZRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSFZDUVVGVExFVkJRVVVzU1VGQlJ6dEJRVUZETEhWQ1FVRlBMRWxCUVVVc1MwRkJSeXhMUVVGSExFbEJRVVVzUzBGQlJ5eEpRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkRMR3RDUVVGSk8wRkJRVVVzY1VKQlFVc3NTVUZCUlN4RlFVRkZMRVZCUVVVc1dVRkJXU3hKUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEUxQlFVa3NUMEZCU3l4SlFVRkZMRVZCUVVVc1JVRkJSU3hUUVVGVExFbEJRVVVzUlVGQlJTeFRRVUZUTEVOQlFVTXNUMEZCU3l4SlFVRkZMRVZCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzUlVGQlJTeFJRVUZSTEVOQlFVTTdRVUZCUnl4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVN1FVRkJReXh6UWtGQlR5eEZRVUZGTEU5QlFVOHNSMEZCUlR0QlFVRkJMR2RDUVVGRExFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVODdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEdkQ1FVRkZMRXRCUVVzN1FVRkJSU3g1UWtGQlR5eEpRVUZKTzBGQlFVRXNiMEpCUVVzc1JVRkJSU3haUVVGWk8wRkJRVUVzYjBKQlF6Vm1PMEZCUVVFc2IwSkJRVVU3UVVGQlFTeHJRa0ZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNaMEpCUVVVc1MwRkJTenRCUVVGRkxIbENRVUZQTEVsQlFVa3NTMEZCU3l4RlFVRkZMRmxCUVZrc1NVRkJSU3hIUVVGRkxFbEJRVWNzUlVGQlJUdEJRVUZCTEdkQ1FVRkZMRXRCUVVzN1FVRkJSU3g1UWtGQlR5eEpRVUZKTEV0QlFVc3NSVUZCUlN4WlFVRlpMRWxCUVVVc1IwRkJSU3hKUVVGSExFVkJRVVU3UVVGQlFTeGpRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkRMSEZDUVVGVExFVkJRVVVzUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJSVHRCUVVGSExHMUNRVUZKTEVsQlFVVXNTVUZCU1N4TFFVRk5MRWxCUVVrc1MwRkJTeXhGUVVGRkxFdEJRVWNzVFVGQlN5eEhRVUZGTEVOQlFVTXNSVUZCUnl4UlFVRlJMRU5CUVVNc1IwRkJSU3hKUVVGRkxFdEJRVWM3UVVGQlF5eHZRa0ZCU1N4SlFVRkZMRVZCUVVVc1UwRkJVeXhIUVVGRkxFdEJRVWNzUlVGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4SlFVRkZMRXRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRVVVzYjBKQlFVY3NTVUZCUlN4SlFVRkZMRVZCUVVVc1VVRkJVVHRCUVVGRkxIVkNRVUZITEVsQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVVc1IwRkJSU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZGTEV0QlFVY3NTVUZCUlN4RlFVRkZMRk5CUVZNc1NVRkJSU3hEUVVGRExFdEJRVWNzUlVGQlJTeFRRVUZUTEVOQlFVTXNSMEZCUlN4RlFVRkZMRmxCUVZrc1JVRkJSU3haUVVGWkxFbEJRVVVzUTBGQlF6dEJRVUZCTEhGQ1FVRlBPMEZCUVVNc2IwSkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNTVUZCUlN4RFFVRkRPMEZCUVVVN1FVRkJRU3huUWtGQlN6dEJRVUZCTEdOQlFVTTdRVUZCUXl4clFrRkJSU3hKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVsQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVsQlFVazdRVUZCUVN4blFrRkJTeXhGUVVGRkxGbEJRVms3UVVGQlFTeG5Ra0ZEYm1ZN1FVRkJRU3huUWtGQlJUdEJRVUZCTEdOQlFVTXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEhGQ1FVRlBMRXRCUVVjc1JVRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJTeExRVUZITEVWQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVVzU1VGQlJTeEZRVUZGTEZsQlFWa3NTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlF5eHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSVUZCUXl4SlFVRkhMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVsQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVVc1IwRkJSVHRCUVVGRkxHZENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGRk8wRkJRVUVzWTBGQlF5eE5RVUZMTzBGQlFVRXNZMEZCZFVJc1RVRkJTenRCUVVGQkxHTkJRVmNzVFVGQlN6dEJRVUZCTEdOQlFWY3NUVUZCU3p0QlFVRkJMR05CUVVzc1RVRkJTenRCUVVGQkxHTkJRV01zVFVGQlN6dEJRVUZCTEdOQlFWRXNUVUZCU3p0QlFVRkJMR05CUVZjc1RVRkJTenRCUVVGQkxHTkJRVmNzVFVGQlN6dEJRVUZCTEdOQlF6ZGxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRlhMRTlCUVUwN1FVRkJRU3hqUVVGWExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3haUVVGSk8wRkJRVVVzY1VKQlFWRXNTMEZCU3p0QlFVRkZMR3RDUVVGRkxFVkJRVVVzVVVGQlVTeEpRVUZKTEU5QlFVOHNSMEZCUlN4SFFVRkhMRWRCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGQlJTeG5Ra0ZCU1N4TFFVRkhMREpFUVVFeVJDeE5RVUZOTEVkQlFVY3NSMEZCUlN4TFFVRkhMSGRHUVVGM1JpeE5RVUZOTEVkQlFVYzdRVUZCUlN4blFrRkJSVHRCUVVGQkxHTkJRVU1zVFVGQlN5eFBRVUZITEVkQlFVY3NSVUZCUlN4RlFVRkZMRVZCUVVVc1ZVRkJWU3hIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnl4SFFVRkhMRVZCUVVVc1JVRkJSVHRCUVVGQkxHTkJRM1JtTEUxQlFVc3NUMEZCUnl4SFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxGVkJRVlVzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1IwRkJSeXhGUVVGRkxFVkJRVVU3UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnl4SFFVRkhMRVZCUVVVc1MwRkJSeXhSUVVGTkxFMUJRVWtzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVWNzUTBGQlF6dEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGSExFZEJRVVVzUjBGQlJ6dEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxGTkJRVk1zUlVGQlJTeFZRVUZWTEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSeXhEUVVGRE8wRkJRVUVzWTBGQlJTeE5RVUZMTEU5QlFVYzdRVUZCUXl4dlFrRkJSU3hGUVVGRk8wRkJRVWNzY1VKQlFVY3NTVUZCUlN4SlFVRkZMRXRCUVVjc1MwRkJSeXhOUVVGSkxFdEJRVWM3UVVGQlNTeDFRa0ZCVHl4RlFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxHTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnp0QlFVRkRMSGxDUVVGUkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTMEZCUnl4RlFVRkZMRXRCUVVjc1IwRkJSU3hOUVVGSkxFVkJRVVVzUlVGQlJTeExRVUZITEVsQlFVa3NTVUZCUlN4TFFVRkhMRWxCUVVrc1IwRkJSenRCUVVGRk8wRkJRVU1zZFVKQlFVOHNSVUZCUlN4RlFVRkZMRXRCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hMUVVGSExFZEJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGSExFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUVUZCU1R0QlFVRkJMR05CUVVzc1RVRkJTeXhQUVVGSExFdEJRVWNzUlVGQlJTeE5RVUZKTEV0QlFVY3NSVUZCUlN4TFFVRkhMRTlCUVVzN1FVRkJRU3hqUVVGTExFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUnl4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFMUJRVWs3UVVGQlFTeGpRVUZMTEUxQlFVc3NUMEZCUnl4RlFVRkZMRTFCUVVrN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ6dEJRVUZCTEdkQ1FVRkZMRXRCUVVzc1QwRkJUeXhGUVVGRkxFdEJRVWNzU1VGQlJTeEZRVUZGTEUxQlFVa3NRMEZCUXp0QlFVRkJMR2RDUVVOdVpqdEJRVUZCTEdOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSenRCUVVGRExHOUNRVUZKTEVsQlFVVXNTMEZCU3l4UFFVRlBMRVZCUVVVc1MwRkJSeXhMUVVGSExFVkJRVVVzUzBGQlJ5eExRVUZITEV0QlFVY3NRMEZCUXp0QlFVRkZMSE5DUVVGSkxFVkJRVVVzUzBGQlJ5eE5RVUZKTEVWQlFVVXNTMEZCUnl4TFFVRkhMRXRCUVVjN1FVRkJTU3h2UWtGQlJ6dEJRVUZGTEhkQ1FVRkpMRTFCUVVrc1MwRkJSeXhGUVVGRkxFdEJRVWNzVFVGQlNTeEZRVUZGTEUxQlFVa3NSMEZCUlN4TFFVRkhMRXRCUVVjc1MwRkJSeXhMUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTEUxQlFVa3NTVUZCUlR0QlFVRkJMSEZDUVVGUk8wRkJRVU1zYzBKQlFVVTdRVUZCUnl4elFrRkJTU3hMUVVGSExFVkJRVVVzUzBGQlJ5eEpRVUZGTEVWQlFVVXNTMEZCUnl4TFFVRkhPMEZCUVVVc2JVSkJRVU1zUzBGQlJ5eExRVUZITEV0QlFVY3NTMEZCUnl4RlFVRkZMRVZCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zVFVGQlNUdEJRVUZCTEdkQ1FVRkhPMEZCUVVNc2RVSkJRVThzUlVGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJUdEJRVUZCTEdOQlFVY3NUVUZCU3l4UFFVRkhMRVZCUVVVc1MwRkJTeXhQUVVGUExFVkJRVVVzUzBGQlJ5eExRVUZITEVWQlFVVXNTMEZCUnl4TFFVRkhMRXRCUVVjc1EwRkJReXhIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NVVUZCU1N4RlFVRkZMRXRCUVVjc1RVRkJUU3hUUVVGVExFVkJRVVVzVlVGQlZTeERRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hMUVVGSE8wRkJRVUVzWTBGQlN5eE5RVUZMTEU5QlFVYzdRVUZCUXl4dlFrRkJSU3hGUVVGRk8wRkJRVWNzYjBKQlFVa3NTVUZCUlN4TFFVRkhPMEZCUVVVc2IwSkJRVVVzUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkhMSGRDUVVGUExFbEJRVVVzVFVGQlNTeFBRVUZMTEU5QlFVOHNWVUZCVVN4SlFVRkZMRXRCUVVjc1RVRkJTU3hKUVVGRkxFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVTdRVUZCUVN4alFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJUdEJRVUZCTEdOQlFVY3NUVUZCU3l4TlFVRkpPMEZCUVVFc1dVRkJSenRCUVVGRkxHZENRVUZGTEVWQlFVVXNVVUZCVVN4UFFVRk5MRTFCUVZVN1FVRkRlR1lzYVVKQlFVa3NTMEZCU3p0QlFVRkZMR2RDUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZKTEVsQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVrc1QwRkJUeXhIUVVGRkxFZEJRVWNzUjBGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkJSeXhuUWtGQlJTeEZRVUZGTEZGQlFWRXNVMEZCVVN4SFFVRkhPMEZCUVVVc1owSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVjc1JVRkJSU3hUUVVGUE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4alFVRkZMRWxCUVVrc1IwRkJSU3hOUVVGSkxFTkJRVU03UVVGQlJTeHRRa0ZCVHl4RlFVRkZMRk5CUVU4N1FVRkJRU3hWUVVGRE8wRkJRek5LTEdOQlFVa3NTMEZCUnl4RlFVRkRMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEcxQ1FVRkxPMEZCUVVVc1dVRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eEZRVUZITEVkQlFVY3NUVUZCU1N4SFFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHbENRVUZITzBGQlFVVTdRVUZCU3l4clFrRkJUVHRCUVVGQkxGVkJRVWNzUjBGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUXl4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlF5eHRRa0ZCVHp0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlFTeFZRVUZETEVkQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNUVUZCU1N4SFFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkZMRWxCUVVVc1dVRkJWU3hKUVVGRkxGVkJRVkVzUTBGQlF5eERRVUZETEV0QlFVY3NUVUZCU1N4TFFVRkhMR0ZCUVZjc1NVRkJSVHRCUVVGSkxHMUNRVUZMTzBGQlFVVXNaMEpCUVVVc1NVRkJTU3hMUVVGTExFMUJRVWtzUTBGQlF6dEJRVUZGTEdOQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxHTkJRV003UVVGQlJTeGpRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxHTkJRV003UVVGQlJTeGpRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGbEJRVms3UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZEYUdZc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNZMEZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFpRVUZaTzBGQlFVVXNZMEZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeGxRVUZsTEVsQlFVVTdRVUZCU3l4alFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZWQlFWVTdRVUZCUlN4alFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUzBGQlJ5eEZRVUZGTEZGQlFWRXNTVUZCUlN4TFFVRkxMRWxCUVVrc1JVRkJSU3hsUVVGbExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNc1MwRkJSeXhSUVVGTk8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZGTEVsQlFVVXNXVUZCVlN4SlFVRkZMRlZCUVZFc1EwRkJReXhEUVVGRExFdEJRVWNzVFVGQlNTeExRVUZITEdGQlFWY3NTVUZCUlR0QlFVRkpMRzFDUVVGTE8wRkJRVVVzWjBKQlFVVXNTVUZCU1N4TFFVRkxMRTFCUVVrc1EwRkJRenRCUVVGRkxHTkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmRCUVZjN1FVRkJSU3hqUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmRCUVZjN1FVRkJSU3hqUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRk5CUVZNN1FVRkJSU3hqUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFN1FVRkJSU3hqUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRk5CUVZNN1FVRkJSU3hqUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSVHRCUVVGTExHTkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1QwRkJUenRCUVVONlppeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1MwRkJSeXhGUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVVXNTMEZCUnl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNTVUZCUlR0QlFVRkZMR05CUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNTMEZCUnl4RlFVRkZMR3RDUVVGclFqdEJRVUZITEdkQ1FVRkhMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTXNSVUZCUnl4clFrRkJhMEk3UVVGQlJTeG5Ra0ZCU1N4SlFVRkhMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTXNSVUZCUnl4clFrRkJhMEk3UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1MwRkJSeXhMUVVGSExFdEJRVWNzUlVGQlJTeHJRa0ZCYTBJc1MwRkJSeXhMUVVGTExFbEJRVWtzUjBGQlJTeERRVUZETEV0QlFVYzdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMR2RDUVVGSkxFbEJRVVVzU1VGQlNTeExRVUZMTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFMUJRVXNzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVOQlFVTXNSMEZCUlN4SlFVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVVXNSVUZCUlN4clFrRkJhMElzUjBGQlJTeEpRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRmxCUVZrc1IwRkJSU3hIUVVGRkxFTkJRVU1zUlVGQlJ5eHJRa0ZCYTBJc1IwRkRNV2RDTEVsQlFVY3NTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hIUVVGRkxFZEJRVVVzUTBGQlF5eEZRVUZITEd0Q1FVRnJRaXhIUVVGRkxFbEJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGRkxFbEJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1QwRkJUeXhMUVVGSExFdEJRVWNzUzBGQlJ5eERRVUZETEVsQlFVVXNTVUZCUlN4TlFVRkpMRXRCUVVjc1QwRkJTeXhKUVVGRkxFdEJRVXNzU1VGQlNTeEhRVUZGTEVOQlFVTXNSMEZCUlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFbEJRVVVzVVVGQlRTeEpRVUZGTEVsQlFVVXNTVUZCUlN4TFFVRkhMRVZCUVVVN1FVRkJSeXhqUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRTlCUVU4N1FVRkJSU3hqUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTMEZCUnl4RlFVRkZMRVZCUVVVc1dVRkJXU3hEUVVGRExFbEJRVVVzUzBGQlJ5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzU1VGQlJUdEJRVUZGTEdOQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeGpRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeGpRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGTkJRVk03UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGTkJRVk03UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRkZCUVZFN1FVRkJSU3hyUWtGQlRTeERRVUZETEV0QlFVY3NSVUZCUlN4SFFVRkhMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzU1VGQlJ5eEpRVUZGTEUxQlEycG1MRXRCUVVjN1FVRkJTU3h0UWtGQlR5eEpRVUZKTEVsQlFVVXNSMEZCUlN4TFFVRkhMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVU1zU1VGQlJTeEpRVUZGTEVsQlFVVXNRMEZCUXl4TFFVRkxMRTFCUVUwc1NVRkJSU3hWUVVGVkxFMUJRVWtzU1VGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRTFCUVUwc1NVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZKTEUxQlFVa3NWVUZCVlN4TlFVRkpMRWxCUVVVc1JVRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlFTeFZRVUZETEVkQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVNc2JVSkJRVTA3UVVGQlFTeFZRVUZITEVkQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGVExFVkJRVVVzUjBGQlJUdEJRVUZETEhOQ1FVRlBMRWxCUVVVc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeHRRa0ZCYlVJc1MwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlJUdEJRVUZCTEZsQlFVczdRVUZCUXl4dFFrRkJTenRCUVVGRkxHZENRVUZKTEV0QlFVY3NiMEpCUVVrc1VVRkJUU3haUVVGWkxFZEJRVVVzU1VGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUlN4SFFVRkZMRU5CUVVNc1IwRkJSU3hKUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzYTBKQlFXdENPMEZCUVVVc1owSkJRVWtzU1VGQlJTeEZRVUZGTEd0Q1FVRnJRanRCUVVGRkxHTkJRVVVzVFVGQlNTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRXRCUVVjc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEdOQlFVVXNUVUZCU1N4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFOUJRVThzUzBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVVXNTMEZCUnl4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRMjVtTEVkQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzVFVGQlNTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1IwRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRlZCUVVVc1IwRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlF5eGpRVUZGTEVWQlFVVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc1kwRkJSU3hUUVVGUE8wRkJRVVVzY1VKQlFWRXNSMEZCUlN4SlFVRkZMRVZCUVVVc1VVRkJUU3hEUVVGRExFdEJRVWM3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRTlCUVVzN1FVRkJSU3h0UWtGQlJ5eFBRVUZMTzBGQlFVVXNiVUpCUVVjc1MwRkJSeXhKUVVGRkxFbEJRVVVzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRXRCUVVzc1QwRkJTeXhKUVVGRkxFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4UFFVRkxMRWxCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVkQlFVY3NUVUZCU1N4TlFVRkpMRU5CUVVNc1EwRkJRenRCUVVGRkxHMUNRVUZITEVsQlFVVXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR5eEhRVUZITEVOQlFVTXNSVUZCUlN4TlFVRk5MRTFCUVVzc1EwRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVa3NTMEZCU3l4SlFVRkpMRWRCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVU1zYlVKQlFVODdRVUZCUVN4VlFVRlZMRWRCUVVVc1IwRkJSU3hOUVVGSkxGbEJRVmtzU1VGQlNTeEhRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHMUNRVUZMTzBGQlFVVXNiVUpCUVU4c1JVRkJSU3hYUVVGWExFMUJRVWtzVFVGQlNTeEhRVUZGTEUxQlFVa3NSMEZCUlN4TFFVRkhMRTFCUVVrc1QwRkJTeXhEUVVGRE8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRVZCUVVVN1FVRkJUeXhuUWtGQlJ5eGhRVUZYTzBGQlFVVXNjVUpCUVUwN1FVRkJSeXh4UWtGQlVTeEpRVU51Wml4SFFVRkZMRXRCUVVjc1IwRkJSU3hMUVVGSExFZEJRVVU3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRXRCUVVjc1NVRkJSU3hOUVVGSE8wRkJRVWNzYTBKQlFVVXNTMEZCU3l4SlFVRkpMRWRCUVVVc1NVRkJSU3hUUVVGVE8wRkJRVVVzYTBKQlFVa3NTVUZCUlR0QlFVRkxMR3RDUVVGRkxFdEJRVXNzU1VGQlNTeEhRVUZGTEVOQlFVTTdRVUZCUlN4cFFrRkJSVHRCUVVGRExIRkNRVUZITEVWQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVVc1dVRkJWeXhMUVVGSExGRkJRVTBzU1VGQlJTeFRRVUZQTEV0QlFVc3NTVUZCUlN4RlFVRkZMRTlCUVU4c1lVRkJWeXhUUVVGUE8wRkJRVTBzYjBKQlFVYzdRVUZCUXl4dlFrRkJSU3hMUVVGTExFTkJRVU03UVVGQlJTeHhRa0ZCUnp0QlFVRkZMSE5DUVVGSkxFbEJRVVU3UVVGQlJTeDNRa0ZCVFR0QlFVRkJMR2RDUVVGRExGTkJRVThzUjBGQlJUdEJRVUZCTEdkQ1FVRkRPMEZCUVVNc2IwSkJRVVU3UVVGQlFTeGpRVUZOTzBGQlFVTXNhMEpCUVVjN1FVRkJSU3gxUWtGQlRUdEJRVUZCTEZsQlFVVTdRVUZCUXl4dFFrRkJUVHRCUVVGQkxGVkJRVVVzUjBGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeHRRa0ZCU3p0QlFVRkZMR2RDUVVGSkxFbEJRVVU3UVVGQlJTeGxRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHdENRVUZKTEVsQlFVVXNTVUZCUlR0QlFVRkZMR3RDUVVGRkxFVkJRVVVzU1VGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3h0UWtGQlNTeEpRVUZGTEVkQlFVVXNTVUZCUlN4RlFVRkZMRkZCUVU4c1JVRkJSVHRCUVVGRkxHdENRVUZGTEZGQlFVMHNUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWExFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzYlVKQlFVY3NSVUZCUlN4VFFVRlBPMEZCUVVFc1dVRkJReXhEUVVGRE8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEcxQ1FVRkxPMEZCUVVVc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRWRCUVVjN1FVRkJSU3hqUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlR0QlFVRlBMR2RDUVVGSkxFbEJRM0ptTzBGQlFVVXNZMEZCUlN4UlFVRlJMRTlCUVVjc1MwRkJSeXhGUVVGRkxGTkJRVThzUTBGQlF6dEJRVUZGTEdOQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1RVRkJTU3hKUVVGSExFZEJRVVVzVjBGQlZUdEJRVUZETEcxQ1FVRlBPMEZCUVVFc1ZVRkJSU3hIUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZETEcxQ1FVRlBPMEZCUVVFc1ZVRkJSU3hIUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzY1VKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hKUVVGRkxFZEJRVVVzUzBGQlNUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRE8wRkJRVVVzYlVKQlFVYzdRVUZCUlN4MVFrRkJVU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEhRVUZGTEV0QlFVazdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxITkNRVUZKTEV0QlFVY3NUMEZCU3l4TlFVRkpMRTFCUVVrc1NVRkJSU3hMUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkZMRVZCUVVVc1UwRkJUeXhMUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETzBGQlFVRXNZMEZCUXp0QlFVRkRMRzFDUVVGSE8wRkJRVUVzV1VGQlF6dEJRVUZETEdOQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1NVRkJSeXhIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGUExFZEJRVWNzVFVGQlNTeEhRVUZGTEUxQlFVa3NSMEZCUlN4TlFVRkpMRWRCUVVVc1RVRkJTU3hEUVVGRE8wRkJRVUVzVlVGQlF5eEZRVUZETEVkQlFVVXNTVUZCUlN4WFFVRlZPMEZCUVVNc2NVSkJRVk1zUlVGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVVc1JVRkJSVHRCUVVGUkxHdENRVUZGTEVkQlFVYzdRVUZCUlN4clFrRkJSU3hGUVVGRk8wRkJRVVVzYVVKQlFVYzdRVUZCUlN4blFrRkJSU3hSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVUZGTzBGQlFVa3NiVUpCUVVjc1RVRkJTU3hUUVVOdVppeE5RVUZKTEdOQlFXTXNRMEZCUXl4SFFVRkZMRWxCUVVVc1QwRkJUU3hOUVVGSkxFbEJRVVVzUjBGQlJTeEpRVUZGTEUxQlFVc3NSVUZCUlR0QlFVRkpMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZETEdkQ1FVRkpMRWxCUVVVc1JVRkJReXhIUVVGRkxFZEJRVVU3UVVGQlJUdEJRVUZKTEdkQ1FVRkhMRVZCUVVVN1FVRkJaMElzYTBKQlFVYzdRVUZCUXl4MVFrRkJUeXhGUVVGRkxHZENRVUZuUWl4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRExGTkJRVThzUjBGQlJUdEJRVUZETEd0Q1FVRkZMSE5FUVVGelJDeERRVUZETEVWQlFVVXNSMEZCUlN4RlFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRE8wRkJRVU1zWlVGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZCTEZsQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJRenRCUVVGRkxHMUNRVUZOTEVOQlFVTTdRVUZCUVN4VlFVRkRMRVZCUVVVN1FVRkJSU3haUVVGRkxGZEJRVk1zUTBGQlF5eEhRVUZGTEU5QlFVc3NSVUZCUlN4WFFVRlRMRVZCUVVVc1IwRkJSeXhIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEcxQ1FVRnBRaXhEUVVGRExFZEJRVVVzVDBGQlN5eEZRVUZGTEcxQ1FVRnBRaXhGUVVGRkxFZEJRVWNzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN3eVFrRkJlVUlzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNNa0pCUVhsQ0xFVkJRVVVzUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlF6RmpMRmxCUVVVc09FSkJRVFJDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc09FSkJRVFJDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxDdENRVUUyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzSzBKQlFUWkNMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNORUpCUVRCQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3MFFrRkJNRUlzUlVGQlJTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cwUWtGQk1FSXNVVUZCU1N4RlFVRkZMRFJDUVVFd1FpeEZRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMRmxCUVVVc2IwSkJRV3RDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3h2UWtGQmEwSXNSVUZCUlN4SFFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHhRa0ZCYlVJc1VVRkJTU3hGUVVGRkxIRkNRVUZ0UWl4RlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxGbEJRVVVzTUVKQlFYZENMRU5CUVVNc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTd3dRa0ZCZDBJc1JVRkJSU3hIUVVGSExFZEJRVVVzUjBGQlJTeERRVUZETzBGQlEyaG1MRmxCUVVVc2JVSkJRV2xDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeFhRVUZUTEZGQlFVa3NSVUZCUlN4WFFVRlRMRVZCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzV1VGQlJTeHRRa0ZCYVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzFDUVVGcFFpeEZRVUZGTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHZRa0ZCYTBJc1VVRkJTU3hGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxGbEJRVVVzZFVKQlFYRkNMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEhWQ1FVRnhRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2QwSkJRWE5DTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3gzUWtGQmMwSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRM0JsTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhSUVVGSkxFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeG5Ra0ZCWXl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzWjBKQlFXTXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHBRa0ZCWlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHBRa0ZCWlN4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEhGQ1FVRnRRaXhSUVVGSkxFVkJRVVVzY1VKQlFXMUNMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHhRa0ZCYlVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4eFFrRkJiVUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzVlVGQlVTeERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEZWQlFWRXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVTm9aU3haUVVGRkxHMUNRVUZwUWl4UlFVRkpMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3cyUWtGQk1rSXNRMEZCUXl4SFFVRkZMRTlCUVVzc1JVRkJSU3cyUWtGQk1rSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzWjBOQlFUaENMRkZCUVVrc1JVRkJSU3huUTBGQk9FSXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJSU3haUVVGRkxEUkNRVUV3UWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRFJDUVVFd1FpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN3MFFrRkJNRUlzVVVGQlNTeEZRVUZGTERSQ1FVRXdRaXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNNa0pCUVhsQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3d5UWtGQmVVSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlF6VmpMRmxCUVVVc05FSkJRVEJDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc05FSkJRVEJDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIVkNRVUZ4UWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNkVUpCUVhGQ0xFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzWjBOQlFUaENMRU5CUVVNc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeG5RMEZCT0VJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4eFEwRkJiVU1zUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2NVTkJRVzFETEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeDFRMEZCY1VNc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNkVU5CUVhGRExFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUXk5aUxGbEJRVVVzZFVOQlFYRkRMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEhWRFFVRnhReXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2MwTkJRVzlETEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxITkRRVUZ2UXl4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNOa0pCUVRKQ0xGRkJRVWtzUlVGQlJTdzJRa0ZCTWtJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeGpRVUZKTEV0QlFVY3NUMEZCU3l4TFFVRkhMRVZCUVVVc1NVRkJTU3hIUVVGRkxFdEJRVWNzUlVGQlJTeFZRVUZSTEZGQlFVa3NTMEZCUnl4RlFVRkZMRlZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEZGQlFVMHNVVUZCU1N4RlFVRkZMRkZCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeGpRVUZKTEV0QlFVY3NVVUZCU1N4TFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVVVzUzBGQlJ5eFBRVUZMTEV0QlFVY3NSVUZCUlN4SlFVRkpMRWRCUVVVc1MwRkJSeXhSUVVGSkxFdEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUlN4TFFVRkhMRkZCUVVrc1MwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVU5vWXl4dFFrRkJVeXhMUVVGSk8wRkJRVU1zWjBKQlFVa3NTVUZCUlR0QlFVRkZMR2RDUVVGRkxFOUJRVThzVDBGQlR5eERRVUZETEVkQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGSkxFbEJRVVVzVDBGQlJ5eE5RVUZKTEVWQlFVVXNUVUZCU1N4SFFVRkZMRWxCUVVVc1QwRkJSeXhQUVVGSExFVkJRVVVzUTBGQlF5eE5RVUZKTzBGQlFVVXNZMEZCUlN4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRVVVzWTBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZPMEZCUVVVc1kwRkJSU3hMUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTzBGQlFVVXNZMEZCUlN4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkRPMEZCUVVNc1dVRkJSU3hoUVVGWE8wRkJRVWNzV1VGQlJTeFpRVUZWTzBGQlFVY3NXVUZCUlN4bFFVRmhPMEZCUVVjc1dVRkJSU3hsUVVGaE8wRkJRVVVzV1VGQlJTeGxRVUZoTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTFCUVVrc1JVRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4clFrRkJaMEk3UVVGQlJTeGpRVUZKTzBGQlFVVXNZMEZCUlN4VFFVRlRMRXRCUVVrN1FVRkJReXhwUWtGQlJ5eEhRVUZITzBGQlFVVXNhMEpCUVVrc1NVRkJSVHRCUVVGQkxGVkJRVWM3UVVGREwxTXNiVUpCUVZNc1MwRkJTVHRCUVVGRExHZENRVUZITEVWQlFVVXNTVUZCUlN4SlFVRkhPMEZCUVVNc2EwSkJRVWNzUlVGQlJUdEJRVUZQTEhGQ1FVRkpMR05CUVZrc1QwRkJUeXhGUVVGRkxGZEJRVk1zUlVGQlJTeFRRVUZQTEVOQlFVTXNSVUZCUlN4TlFVRk5MRWxCUVVjc1JVRkJSU3hQUVVGUExGVkJRVkU3UVVGQlF5eHpRa0ZCU1N4SlFVRkZMRVZCUVVVc1QwRkJUeXhOUVVGTk8wRkJRVVVzYjBKQlFVVXNVVUZCVVN4RFFVRkRPMEZCUVVFc1owSkJRVU03UVVGQlF5eHhRa0ZCU3l4SlFVRkZMRVZCUVVVN1FVRkJVU3hyUWtGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGSExFVkJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NTVUZCUlN4TlFVRkhMRVZCUVVVc1dVRkJWU3hOUVVGSExFMUJRVXM3UVVGQlF5eDFRa0ZCU3l4SlFVRkZMRVZCUVVVN1FVRkJVU3h2UWtGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVRkZMSEZDUVVGSkxFVkJRVVVzUTBGQlF5eEhRVUZGTEVsQlFVVXNSMEZCUnp0QlFVRlJMSEZDUVVGSExFMUJRVTBzUlVGQlJTeERRVUZETzBGQlFVRXNZMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zWVVGQlJ6dEJRVWMzVWl4cFFrRkJUeXhWUVVGVk8wRkJRVUVzVVVGRGJrSTdRVUZCUVN4TlFVVkJMRWRCUVVjN1FVRkZTQ3hWUVVGSkxFOUJRVThzV1VGQldTeFpRVUZaTEU5QlFVOHNWMEZCVnp0QlFVTnVSQ3hsUVVGUExGVkJRVlU3UVVGQlFTeGxRVU5XTEU5QlFVOHNWMEZCVnl4alFVRmpMRTlCUVU4c1MwRkJTenRCUVVOdVJDeGxRVUZQTEVOQlFVTXNSMEZCUnl4TlFVRk5MRTlCUVU4N1FVRkJRVHRCUVVGQk96czdRVU4wUkRGQ08wRkJRVUU3UVVGQlFUdEJRVUZCT3pzN1FVTkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPMEZEUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeE5RVUZoTzBGQlFXSTdRVUZCUVR0QlFVRlBMRTFCUVUwc1QwRkJUenRCUVVGQk8wRkJRVUU3T3p0QlEwRndRanRCUVVGQk8wRkJRVUU3UVVGRFFTeFZRVUZKTEcxQ1FVRnRRaXhOUVVGTk8wRkJRek5DTEZsQlFVa3NZVUZCWVN4UFFVRlBMR0ZCUVdFc1pVRkJaU3hUUVVGVExHZENRVUZuUWl4VFFVRlRMR05CUVdNc1RVRkJUVHRCUVVNeFJ5eFpRVUZKTEU5QlFVOHNaVUZCWlR0QlFVRmhMSFZDUVVGaExHTkJRV003UVVGRGJFVXNaVUZEUml4VFFVRlRMRmxCUVZrc1EwRkJReXhIUVVGSE8wRkJSWHBDTEcxQ1FVRlRMRXRCUVVrN1FVRkJReXhqUVVGRkxGVkJRVkVzUlVGQlJTeFZRVUZSTEVWQlFVVTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SlFVRkhPMEZCUVVNc1kwRkJSU3hWUVVGUkxFVkJRVVVzVlVGQlVTeEZRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRk8wRkJRVU1zYlVKQlFWTXNTVUZCUnp0QlFVRkRMR05CUVVVc1ZVRkJVU3hGUVVGRkxGVkJRVkVzUlVGQlJUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJSVHRCUVVGRExHMUNRVUZUTEVsQlFVYzdRVUZCUXl4alFVRkZMRlZCUVZFc1JVRkJSU3hWUVVGUkxFVkJRVVU3UVVGQlJTeHRRa0ZCVHp0QlFVRkJMRlZCUVVVN1FVRkJReXh0UWtGQlV5eExRVUZKTzBGQlFVTXNZMEZCUlN4VlFVRlJMRVZCUVVVc1ZVRkJVU3hGUVVGRk8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkZPMEZCUVVNc1kwRkJTU3hKUVVGRkxGZEJRVlVzU1VGQlJ6dEJRVUZGTEZsQlFVVXNVVUZCVFN4SlFVRkpMRkZCUVZFc1EwRkJReXhIUVVGRkxFMUJRVWs3UVVGQlF5eHBRa0ZCUnp0QlFVRkZMR2RDUVVGRk8wRkJRVUVzVlVGQlF5eERRVUZETzBGQlEzUlRMR05CUVVrc1MwRkJSeXhQUVVGUExFOUJRVThzUTBGQlF5eEhRVUZGTEVOQlFVTXNSMEZCUlN4TFFVRkhMR3RDUVVGcFFpeEpRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2EwSkJRVTA3UVVGQlFTeFZRVUZGTEVkQlFVVXNTMEZCUnl4WlFVRlZMRTlCUVU4c1VVRkJUeXhKUVVGRkxHTkJRVmtzVDBGQlR5eGxRVUZqTEVsQlFVVXNXVUZCVlN4UFFVRlBMRmRCUVZNc1dVRkJWU3hQUVVGUExGRkJRVkVzV1VGQlZTeFpRVUZWTEU5QlFVOHNVVUZCVVN4VFFVRlRMRTFCUVVzc1NVRkJSU3hGUVVGRkxEQkNRVUYzUWl4UFFVRkhMRWxCUVVVN1FVRkJSeXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhGUVVGRkxHRkJRVmNzUlVGQlJTeFhRVUZYTEVkQlFVVXNRMEZCUXl4SlFVRkZMRWxCUVVVN1FVRkJRU3hWUVVGRE8wRkJRVU1zWTBGQlNTeEpRVUZITEVkQlFVVTdRVUZETjFVc1kwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVa3NTMEZCUnl4MVEwRkJZeXhMUVVGSE8wRkJRV2RDTEdkQ1FVRkZMRWxCUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlJTeE5RVUZKTEZsQlFWVTdRVUZCU1N4cFFrRkJSeXhEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEd0Q1FVRkZMRVZCUVVVc1EwRkJReXhKUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkJSU3h4UWtGQlR5eEhRVUZITEdGQlFXRXNSMEZCUlN4SlFVRkZMRk5CUVU4c1RVRkJUVHRCUVVGQkxGbEJRVU03UVVGQlJTeG5Ra0ZCUlN4UFFVRkhPMEZCUVVNc2EwSkJRVVVzUjBGQlJ5eEhRVUZGTEVsQlFVVTdRVUZCUlN4blFrRkJSU3hYUVVGVExFbEJRVVVzU1VGQlNTeFhRVUZYTEVOQlFVTTdRVUZCUnl4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlJTeG5Ra0ZCUlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFbEJRVVVzVTBGQlN6dEJRVUZETEd0Q1FVRkZMRVZCUVVVc1EwRkJReXhKUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkJSU3hwUWtGQlJ5eFRRVUZUTEVkQlFVVXNTVUZCUlN4VFFVRlBMRkZCUVU4c1EwRkJReXhIUVVGRkxFMUJRVWs3UVVGQlF5eHZRa0ZCUlN4RlFVRkZMRU5CUVVNc1NVRkJSU3hGUVVGRkxFbEJRVVVzUlVGQlJTeFRRVUZQTEVOQlFVTTdRVUZCUVN4alFVRkRMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVVVzWVVGQlF5eEZRVUZGTEdWQlFXRXNTVUZCUlN4UlFVRlJMRXRCUVVzc1YwRkJVeXhMUVVGSExGRkJRVkVzUzBGQlN5eERRVUZETEVWQlFVVXNVVUZCVVN4UFFVRk5MRWRCUVVjN1FVRkJSeXh2UWtGQlVTeExRVUZMTEUxQlFVMHNRMEZCUXp0QlFVRkZMR2RDUVVGRkxFTkJRVU1zUjBGQlJTeE5RVUZKTzBGQlFVTXNjMEpCUVZFc1YwRkJVenRCUVVGRkxHOUNRVUZOTzBGQlFVRXNXVUZCUlR0QlFVRkZMR05CUVVVc1ZVRkJVU3hOUVVGSk8wRkJRMnhtTEdkQ1FVRkpPMEZCUVVVc1owSkJRVWM3UVVGQlF5eHJRa0ZCUlR0QlFVRkJMRmxCUVhsQ0xGTkJRVThzUjBGQlJUdEJRVUZETEc5Q1FVRk5MRkZCUVZFc1RVRkJUU3g1UjBGQmVVY3NSMEZCUlR0QlFVRkJMRmxCUVVVN1FVRkJReXh0UWtGQlR5eFRRVUZQTEVWQlFVVTdRVUZCUVN4VlFVRk5MRmRCUVZNc1RVRkJTVHRCUVVGRkxHZENRVUZGTEVsQlFVVXNTMEZCU3l4VFFVRlRMRTlCUVVzc1pVRkJZU3hQUVVGUExGbEJRVlVzVTBGQlV5eHJRa0ZCWjBJc1NVRkJSU3hUUVVGVExHTkJRV01zVFVGQlRTeFBRVUZQTEdWQlFXVXNaVUZCWlN4bFFVRmpMRWxCUVVVc1lVRkJXU3hOUVVGSkxFVkJRVVVzVVVGQlVTeFBRVUZQTEVsQlFVVXNTVUZCUlN4RlFVRkZMRTlCUVU4c1IwRkJSU3hGUVVGRkxGRkJRVkVzVlVGQlV5eEZRVUZGTEVWQlFVVXNXVUZCV1N4SFFVRkhMRWxCUVVVc1EwRkJReXhKUVVGRkxFbEJRVVVzU1VGQlJ5eE5RVUZKTEV0QlFVY3NUMEZCUnp0QlFVRkRMR3RDUVVGSkxFbEJRVVVzU1VGQlNUdEJRVUZsTEdkQ1FVRkZMRXRCUVVzc1QwRkJUU3hIUVVGRkxFdEJRVVU3UVVGQlJTeG5Ra0ZCUlN4TFFVRkxMRWxCUVVrN1FVRkRNV2hDTEhGQ1FVRlBMRVZCUVVVN1FVRkJRU3haUVVGWkxFZEJRVVVzVFVGQlNTeEpRVUZGTEU5QlFVYzdRVUZCUXl4clFrRkJTU3hKUVVGRkxFbEJRVWs3UVVGQlpTeG5Ra0ZCUlN4TFFVRkxMRTlCUVUwc1IwRkJSU3hMUVVGRk8wRkJRVVVzWjBKQlFVVXNaVUZCWVR0QlFVRmpMR2RDUVVGRkxFdEJRVXNzU1VGQlNUdEJRVUZGTEhGQ1FVRlBMRWxCUVVrc1YwRkJWeXhGUVVGRkxGRkJRVkU3UVVGQlFTeFpRVUZETEVsQlFVY3NTVUZCUlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hOUVVGSk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4SlFVRkpPMEZCUVdVc1owSkJRVVVzUzBGQlN5eFBRVUZOTEVkQlFVVXNTVUZCUlR0QlFVRkZMR2RDUVVGRkxHVkJRV0U3UVVGQll5eG5Ra0ZCUlN4VFFVRlBMRTFCUVVrN1FVRkJReXgxUWtGQlN5eEZRVUZGTEZWQlFWRXNTMEZCUnl4RlFVRkZMRlZCUVZFc1JVRkJSU3hYUVVGVExFVkJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNSVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJSU3huUWtGQlJTeFZRVUZSTzBGQlFVVXNaMEpCUVVVc1MwRkJTeXhKUVVGSk8wRkJRVUVzV1VGQlF6dEJRVUZITEdWQlFVY3NaVUZCWVN4UFFVRlBMR2RDUVVGakxFOUJRVThzWTBGQldTeHhRa0ZCYzBJN1FVRkJZU3hqUVVGSkxFdEJRVWNzVVVGQlVTeEpRVUZKTEV0QlFVc3NUMEZCVHl4SFFVRkZMRXRCUVVjc1VVRkJVU3hOUVVGTkxFdEJRVXNzVDBGQlR6dEJRVU0xWlN4blFrRkJTU3hMUVVGSExFbEJRVWtzVFVGQlNTeEhRVUZITEZWQlFWVXNSMEZCUlN4RlFVRkZMRXRCUVVzc1IwRkJSeXhKUVVGRkxFbEJRVWtzUjBGQlJTeExRVUZITEVsQlFVa3NUVUZCU1N4SFFVRkhMRlZCUVZVc1IwRkJSU3hGUVVGRkxFdEJRVXNzUjBGQlJ5eEpRVUZGTEVsQlFVazdRVUZCUnl4alFVRkpMRXRCUVVjc1NVRkJSeXhKUVVGRk8wRkJRVWNzYVVKQlFVOHNUMEZCVHl4SFFVRkZMRVZCUVVVN1FVRkJSU3hsUVVGSE8wRkJRVXNzYzBKQlFWVXNUMEZCVHl4bFFVRmhMRWRCUVVjc2FVTkJRV2xETzBGQlFVVXNZMEZCU1N4SFFVRkZMRWxCUVVjc1NVRkJSU3hQUVVGSExFZEJRVVVzUjBGQlJTeEpRVUZITEVsQlFVY3NTVUZCUnp0QlFVRkhMRzFDUVVGVExFbEJRVWM3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRVZCUVVVN1FVRkJUeXhqUVVGRkxGRkJRVTBzU1VGQlJTeEpRVUZKTEZWQlFWVXNRMEZCUXp0QlFVRkZMR05CUVVVc1UwRkJUeXhKUVVGSkxGZEJRVmNzUTBGQlF6dEJRVUZGTEdOQlFVVXNVMEZCVHl4TFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEVsQlFVa3NXVUZCV1N4RFFVRkRPMEZCUVVVc1kwRkJSU3hUUVVGUExFdEJRVWNzU1VGQlNTeFhRVUZYTEVOQlFVTTdRVUZCUlN4alFVRkZMRlZCUVZFc1MwRkJSeXhKUVVGSkxGbEJRVmtzUTBGQlF6dEJRVUZGTEdOQlFVVXNWVUZCVVN4SlFVRkpMR0ZCUVdFc1EwRkJRenRCUVVGRkxHTkJRVVVzVlVGQlVTeExRVUZITEVsQlFVa3NZVUZCWVN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVOdVppeGpRVUZKTEV0QlFVYzdRVUZEVUN4alFVRkhPMEZCUVVVc1owSkJRVVVzUlVGQlJUdEJRVUZCTEcxQ1FVRnRRaXhGUVVGRk8wRkJRVmNzWjBKQlFVVXNSVUZCUlR0QlFVRkJMRzFDUVVGdFFpeEpRVUZGTEVsQlFVa3NXVUZCV1N4UFFVRlBMRVZCUVVNc1UwRkJVU3hMUVVGSExFOUJRVTBzVTBGQlVTeFBRVUZOTEZGQlFVOHNTMEZCUlN4RFFVRkRMRWRCUVVVc1JVRkJSU3hGUVVGRkxHdENRVUZyUWp0QlFVRnRRaXhyUWtGQlRTeEZRVUZGTERaT1FVRTJUaXhIUVVGRkxFdEJRVWNzUlVGQlJTd3lSMEZCTWtjc1IwRkJSU3hOUVVGTkxGbEJRVms3UVVGRGVtaENMRmxCUVVVN1FVRkJSU3hsUVVGSExFVkJRVVVzVDBGQlR6dEJRVUZYTEdOQlFVa3NTMEZCUnl4RFFVRkRMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNTVUZCUlN4SFFVRkZMRXRCUVVjc1RVRkJTeXhKUVVGRk8wRkJRVXNzYlVKQlFWTXNTMEZCU1R0QlFVRkRPMEZCUVVrc1owSkJRVWNzUzBGQlJ5eE5RVUZKTEZOQlFVOHNUMEZCU3l4alFVRmpMRVZCUVVVc1IwRkJSU3hMUVVGSExFOUJRVTBzU1VGQlJ6dEJRVUZETEd0Q1FVRkpMRWxCUVVVN1FVRkJSU3hyUWtGQlJUdEJRVUZMTEdkQ1FVRkZPMEZCUVVFc1dVRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVN1FVRkJReXhuUWtGQlJTeGhRVUZYTEVsQlFVVTdRVUZCU1N4alFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJUdEJRVUZITEdkQ1FVRkZPMEZCUVVVc1owSkJRVVVzU1VGQlNTeFpRVUZaTEdGQlFXRXNTVUZCUlN3d1EwRkJNRU03UVVGQlJTeGpRVUZGTEVOQlFVTTdRVUZCUlN4clFrRkJUVHRCUVVGQkxGVkJRVVU3UVVGQlF5eGpRVUZKTEV0QlFVY3NUMEZCUnl4RlFVRkZMRmRCUVZjc2RVTkJRWFZETEVkQlFVVXNTVUZCUlN4UFFVRkhMRVZCUVVVc1YwRkJWeXhUUVVGVExFZEJRVVU3UVVGQlJTeGpRVUZGTzBGQlFYbENMR0ZCUVVjc1EwRkJReXhOUVVGSkxFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlEyeGlMRzFDUVVGVExFZEJRVWNzUjBGQlJUdEJRVUZETEdkQ1FVRkhPMEZCUVVVc2NVSkJRVThzUlVGQlJTeERRVUZETzBGQlFVVXNhMEpCUVVzN1FVRkJRU3hWUVVGclJEdEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZITEUxQlFVa3NSMEZCUlR0QlFVRkRMR3RDUVVGSExHTkJRVmtzVDBGQlR5eFRRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRPMEZCUVVVc2RVSkJRVThzVFVGQlRTeEhRVUZGTEVWQlFVTXNZVUZCV1N4alFVRmhMRU5CUVVNc1JVRkJSU3hMUVVGTExFOUJRVWM3UVVGQlF5eHpRa0ZCUnl4RFFVRkRMRVZCUVVVN1FVRkJSeXd3UWtGQlN5eDVRMEZCZFVNc1NVRkJSVHRCUVVGSkxIbENRVUZQTEVWQlFVVXNXVUZCV1R0QlFVRkJMR2RDUVVGRExFTkJRVU1zUlVGQlJTeE5RVUZOTEUxQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkJSU3hyUWtGQlJ6dEJRVUZGTEhWQ1FVRlBMRWxCUVVrc1VVRkJVU3hEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEc5Q1FVRkZMRWRCUVVVc1QwRkJSeXhGUVVGRkxFbEJRVWtzVjBGQlZ5eERRVUZETEVOQlFVTXNSMEZCUlN4RFFVRkRPMEZCUVVFc1owSkJRVU1zUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJUeXhSUVVGUkxGRkJRVkVzUlVGQlJTeExRVUZMTEUxQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRM1phTEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCVHl4SFFVRkhMRU5CUVVNc1JVRkJSU3hMUVVGTExFOUJRVWNzV1VGQldTeFpRVUZaTEVkQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhQUVVGSExFTkJRVU1zUlVGQlJTeExRVUZMTEVkQlFVVXNUMEZCUnp0QlFVRkRMR2RDUVVGRkxEQkRRVUV3UXl4RFFVRkRMRVZCUVVVN1FVRkJSU3hwUWtGQlJ5eERRVUZETzBGQlFVRXNXVUZCUXl4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWtzU1VGQlJUdEJRVUZGTEcxQ1FVRk5MR05CUVZrc1QwRkJUeXhaUVVGWkxIZENRVUZ6UWl4SFFVRkhMRU5CUVVNc1MwRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlJ5eExRVUZITEdOQlFWa3NUMEZCVHl4UlFVRk5MRWRCUVVjc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJTeE5RVUZOTEVkQlFVVXNSVUZCUXl4aFFVRlpMR05CUVdFc1EwRkJReXhGUVVGRkxFdEJRVXNzVDBGQlJ5eFpRVUZaTEhGQ1FVRnhRaXhIUVVGRkxFTkJRVU1zUlVGQlJTeExRVUZMTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc1owSkJRVVVzYTBOQlFXdERMRU5CUVVNc1JVRkJSVHRCUVVGRkxHZENRVUZGTERKRFFVRXlRenRCUVVGRkxIRkNRVUZQTEVkQlFVY3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3haUVVGRExFTkJRVU1zUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZETjJVc1kwRkJTU3hIUVVGRkxFdEJRVWNzUlVGQlF5eFJRVUZQTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1RVRkJTVHRCUVVGRExHZENRVUZITEdWQlFXRXNUMEZCVHl4TFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVGSExIRkNRVUZQTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hOUVVGSkxFTkJRVU03UVVGQlJTeGpRVUZGTEZkQlFWY3NTVUZCU1N4TlFVRkpMRWxCUVVVc1JVRkJSU3hWUVVGVkxFTkJRVU03UVVGQlJ5eG5Ra0ZCUlN4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRVVVzWjBKQlFVY3NRMEZCUXp0QlFVRkZMSEZDUVVGUE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNaMEpCUVVjc1NVRkJSU3hKUVVGRkxFVkJRVVU3UVVGQlZ5eHhRa0ZCVHp0QlFVRkZMR2RDUVVGSE8wRkJRVU1zY1VKQlFVOHNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFZEJRVVVzU1VGQlJTeERRVUZETEVkQlFVVXNUVUZCU1N4RFFVRkRMRWRCUVVVN1FVRkJRU3haUVVGRExGRkJRVTA3UVVGQlF5eHhRa0ZCVHp0QlFVRkJMRmxCUVVNN1FVRkJRU3hWUVVGRExFVkJRVU03UVVGQlJTeHRRa0ZCVXl4RlFVRkZMRWRCUVVVN1FVRkJReXhwUWtGQlN5eFBRVUZMTzBGQlFXRXNhVUpCUVVzc1ZVRkJVU3huUTBGQlowTXNRMEZCUXp0QlFVRkpMR2xDUVVGTExGTkJRVTg3UVVGQlFTeFZRVUZETzBGQlF6TlhMR05CUVVrc1MwRkJSeXhQUVVGSE8wRkJRVU1zWTBGQlJTeFZRVUZWTzBGQlFVVXNZMEZCUlN4WlFVRlZMRTFCUVVrN1FVRkJRU3haUVVGRE8wRkJRVUVzVlVGQlF5eEhRVUZGTEV0QlFVY3NUMEZCUnp0QlFVRkRMR2xDUVVGSExFVkJRVVVzUjBGQlJ5eFhRVUZUTEVkQlFVY3NSMEZCUlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVUZITEdkQ1FVRkpMRWxCUVVVc1JVRkJSU3hIUVVGSExFbEJRVWs3UVVGQlJTeG5Ra0ZCUnl4RFFVRkRPMEZCUVVVc2NVSkJRVTg3UVVGQlJTeGpRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUVVVc1kwRkJSU3hIUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZGTzBGQlFVVXNZMEZCUlN4TFFVRkhMRVZCUVVVN1FVRkJSeXhuUWtGQlNTeEpRVUZGTEVWQlFVTXNTMEZCU1N4UFFVRk5MR1ZCUVdNc1JVRkJSU3hKUVVGSExFdEJRVWtzUlVGQlJTeEpRVUZITEdGQlFWa3NSVUZCUlN4SFFVRkZPMEZCUVVVc2FVSkJRVWNzUlVGQlJTeE5RVUZOTzBGQlFVVXNZMEZCUlN4WlFVRlpMRWRCUVVVc1JVRkJSU3hGUVVGRk8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSU3hIUVVGRkxFdEJRVWNzWlVGQllTeFBRVUZQTEdOQlFWa3NTVUZCU1N4WlFVRlpMRTFCUVUwc1NVRkJSU3hSUVVGUExFdEJRVWNzUTBGQlF5eEhRVUZGTEVkQlFVVXNUVUZCU1R0QlFVRkRMRzFDUVVGTE8wRkJRVVVzWjBKQlFVa3NTVUZCUlN4SlFVRkZPMEZCUVVVc2FVSkJRVWtzU1VGQlJTeEhRVUZGTEVWQlFVVXNRMEZCUXl4TFFVRkhMRVZCUVVVc1MwRkJSenRCUVVGSkxHZENRVUZGTzBGQlFVVXNaMEpCUVVjc1MwRkJSeXhKUVVGRkxFdEJRVWNzUlVGQlJTeFZRVUZSTzBGQlFVY3NjVUpCUVU4c1IwRkJSeXhQUVVGUExFVkJRVVVzYTBKQlFXdENMRzlDUVVGclFpeEZRVUZGTEUxQlFVMHNSMEZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVExFZEJRVVVzUTBGQlF5eERRVUZETzBGQlEyNW1MR2xDUVVGSkxFbEJRVVVzU1VGQlJ5eEpRVUZGTEV0QlFVYzdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVVzUjBGQlJ6dEJRVUZGTEd0Q1FVRkhMRWxCUVVVc1MwRkJTVHRCUVVGRExHOUNRVUZKTEVsQlFVVXNSVUZCUlN4SFFVRkhMRWxCUVVVN1FVRkJSeXh2UWtGQlJ5eFJRVUZOTEVsQlFVVTdRVUZCU3l4MVFrRkJSeXhQUVVGUExHTkJRV01zU1VGQlJTeFBRVUZMTEVsQlFVVXNRMEZCUXp0QlFVRkJMSEZDUVVGTk8wRkJRVU1zYzBKQlFVa3NTVUZCUlN4RlFVRkZMRWRCUVVjc1NVRkJSVHRCUVVGSExITkNRVUZGTEZGQlFVMHNTVUZCUlN4UlFVRk5MRWxCUVVVc1QwRkJTeXhMUVVGSExFdEJRVWNzU1VGQlJTeExRVUZITEVsQlFVVXNUVUZCU1N4TFFVRkhMRXRCUVVjc1MwRkJSeXhMUVVGSExFbEJRVVVzUlVGQlJTeEhRVUZITEVsQlFVVTdRVUZCUnl3d1FrRkJUU3hKUVVGRkxFdEJRVWNzVDBGQlR5eGhRVUZoTEVOQlFVTXNTMEZCUnl4TFFVRkhMRTlCUVUwc1MwRkJSeXhQUVVGUExHRkJRV0VzVVVGQlRTeExRVUZITEVsQlFVY3NVVUZCVFN4SlFVRkZMRWxCUVVrN1FVRkJRU3huUWtGQlJUdEJRVUZCTEdOQlFVTTdRVUZCVFN4eFFrRkJSeXhQUVVGUExHRkJRV0VzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeEpRVUZGTEVOQlFVTXNSMEZCUlN4UFFVRkxMRTlCUVVzc1MwRkJSeXhIUVVGSExFVkJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUlN4SlFVRkhMRXRCUVVjc1QwRkJSenRCUVVGRExHZENRVUZKTEVsQlFVVXNSMEZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVU3UVVGQlJTeGpRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGRE4xa3NiVUpCUVZNc1JVRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRlZCUVZVc1UwRkJUeXhIUVVGRkxFbEJRVVU3UVVGQlZTeHRRa0ZCVHl4SFFVRkhMRTFCUVVrN1FVRkJReXgxUWtGQlVTeEpRVUZGTEVkQlFVY3NTVUZCUlN4RFFVRkRMRWRCUVVVc1NVRkJSU3hOUVVGSkxFZEJRVVVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4TFFVRkpPMEZCUVVNc2IwSkJRVWtzU1VGQlJTeEZRVUZGTEVsQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGSExFVkJRVVVzU1VGQlJTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJReXh4UWtGQlR5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNaMEpCUVVVN1FVRkJSU3huUWtGQlJTeE5RVUZKTEVWQlFVVXNSMEZCUnl4SFFVRkZMRVZCUVVVc1UwRkJVeXhEUVVGRExFZEJRVVVzU1VGQlJUdEJRVUZKTEdOQlFVVXNSMEZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc1owSkJRVVU3UVVGQlJTeG5Ra0ZCUnp0QlFVRkZMRzlDUVVGTkxFZEJRVWNzUTBGQlF5eEhRVUZGTzBGQlFWTXNaVUZCUnl4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRkxHMUNRVUZUTEV0QlFVazdRVUZCUXl4eFFrRkJVU3hKUVVGRkxFVkJRVVVzV1VGQlZ6dEJRVUZMTEdsQ1FVRkhPMEZCUVVVc1pVRkJSeXhSUVVGUkxFMUJRVWs3UVVGQlF6dEJRVUZKTEdsQ1FVRkhMRTFCUVVrc1IwRkJSeXhEUVVGRE8wRkJRVUVzV1VGQlF5eERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFdEJRVWs3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRWRCUVVjc05rSkJRVFpDTzBGQlFVVXNaMEpCUVVVc1NVRkJTU3hQUVVGUExFTkJRVU03UVVGQlJTeGpRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVONFl5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVN1FVRkJReXhuUWtGQlJTeEZRVUZGTEVsQlFVVXNVVUZCVVN4SlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVONFJDeGpRVUZKTEVsQlFVVXNSVUZCUXl4SlFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZITEVOQlFVTXNSMEZCUlN4SlFVRkhMRU5CUVVNc1IwRkJSU3hMUVVGSk8wRkJRVU1zYVVKQlFVY3NSVUZCUlN4M1FrRkJjMElzUlVGQlJTeEpRVUZITEVWQlFVVXNaMEpCUVdNc1JVRkJSU3hKUVVGSExFVkJRVVVzWjBKQlFXTXNSVUZCUlN4TlFVRkpMRWRCUVVjN1FVRkJRU3hWUVVGRExFZEJRVVVzU1VGQlJ5eFBRVUZITEVsQlFVVXNSMEZCUlN4SlFVRkhMRU5CUVVNc2EwSkJRV3RDTEVkQlFVVXNTVUZCUnl4TlFVRkpPMEZCUVVNc2NVSkJRVkVzUzBGQlN5eEZRVUZGTzBGQlFVY3NhVUpCUVVjc1EwRkJRenRCUVVGRkxHbENRVUZKTEV0QlFVc3NSVUZCUlR0QlFVRkhMR2xDUVVGSExFTkJRVU03UVVGQlJTeGpRVUZGTEV0QlFVY3NRMEZCUXp0QlFVRkZMR05CUVVVc1MwRkJSeXhEUVVGRE8wRkJRVVVzWTBGQlJTeExRVUZITEVOQlFVTTdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSeXhQUVVGSE8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVVjc2JVSkJRVThzUlVGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4alFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRVVVzWTBGQlJTeEhRVUZITEU5QlFVOHNSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhIUVVGRkxFTkJRVU03UVVGQlJTeGpRVUZGTEV0QlFVYzdRVUZCUlN4bFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzUzBGQlNUdEJRVUZCTEZWQlFVTXNSMEZCUlN4TFFVRkpPMEZCUVVNc1kwRkJSU3hIUVVGSExGRkJRVkVzVDBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSeXhQUVVGSExFbEJRVWtzVVVGQlVTeFBRVUZITzBGQlFVTXNZMEZCUlN4WlFVRlZMRTlCUVVjN1FVRkJReXhyUWtGQlJTeEZRVUZGTzBGQlFVc3NhMEpCUVVrc1NVRkJSU3hGUVVGRk8wRkJRVWtzYTBKQlFVY3NSVUZCUlN4blFrRkJZeXhGUVVGRkxHZENRVUZqTEVWQlFVVXNSMEZCUlR0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNXVUZCV1R0QlFVRkZMRzlDUVVGRkxFVkJRVVVzV1VGQldTeEhRVUZGTEVWQlFVVXNXVUZCV1N4SlFVTXZaaXhGUVVGRkxEQkRRVUV3UXl4RFFVRkRMSFZDUVVGMVFpeEZRVUZGTEZsQlFWa3NjVU5CUVhGRE8wRkJRVUVzWTBGQlF5eFhRVUZUTEcxQ1FVRnBRanRCUVVGRkxHdENRVUZGTzBGQlFVRXNkVUpCUVZVc2EwSkJRV2RDTzBGQlFVVXNiVUpCUVVjc1EwRkJRenRCUVVGQkxIVkNRVUZWTEc5Q1FVRnJRanRCUVVGRkxHdENRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1RVRkJUU3hEUVVGRE8wRkJRVUVzZFVKQlFWVXNhVUpCUVdVN1FVRkJSU3h2UWtGQlJTeEZRVUZGTEZGQlFVOHNTVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZITEVOQlFVTXNSMEZCUlN4SFFVRkhMRU5CUVVNc1IwRkJSU3hIUVVGSExFTkJRVU1zUjBGQlJTeEZRVUZGTEVkQlFVY3NUMEZCVHl4RlFVRkZMRWRCUVVjc1VVRkJVU3hEUVVGRExFZEJRVVVzUTBGQlF5eEhRVUZGTEVWQlFVVXNTMEZCUnp0QlFVRkJMSFZDUVVGVkxHMUNRVUZwUWp0QlFVRkZMR3RDUVVGRkxFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVXNXVUZCV1N4RlFVRkRMRXRCUVVrc1UwRkJVU3hEUVVGRE8wRkJRVUVzZFVKQlFWVXNZVUZCVnp0QlFVRkZMR3RDUVVGRkxGTkJRVThzVFVGQlJ5eExRVUZITEVOQlFVTXNSVUZCUlN4TlFVRkpMRVZCUVVVc1RVRkJUU3hIUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZCTEhWQ1FVRlZMRmxCUVZVN1FVRkJSU3h6UWtGQlRTeFZRVUZWTEVWQlFVVXNVVUZCVVN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRk8wRkJRVUVzZFVKQlF6Tm5RaXh0UWtGQmFVSXNSVUZCUlR0QlFVRlBMR3RDUVVGRkxGbEJRVmtzUTBGQlF6dEJRVUZCTEhWQ1FVRlZMR3RDUVVGblFqdEJRVUZGTEd0Q1FVRkZMRVZCUVVVc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTzBGQlFVRTdRVUZCVHl4eFFrRkJSeXhGUVVGRkxHdERRVUZyUXl4RFFVRkRMRVZCUVVVN1FVRkJRU3haUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEU5QlFVYzdRVUZCUXl4blFrRkJSU3hIUVVGSExIVkNRVUYxUWl4SlFVRkpMRVZCUVVVc1VVRkJVU3hKUVVGSkxFVkJRVVVzVFVGQlRTeExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUVVVc2IwSkJRVTA3UVVGQlFTeFpRVUZGTzBGQlFVVXNhMEpCUVVrc1JVRkJSU3hIUVVGSExGZEJRVlVzVDBGQlJ5eEZRVUZGTEZWQlFWVXNSVUZCUXl4TlFVRkxMRVZCUVVNc1EwRkJReXhEUVVGRExFZEJRVVVzUlVGQlJTeEhRVUZITEZOQlFWRXNUMEZCUnl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJRVWNzWjBKQlFVa3NTVUZCUlN4RFFVRkRMRWRCUVVVc1NVRkJSU3hEUVVGRExGRkJRVkVzUjBGQlJUdEJRVUZGTEdsQ1FVRkpMRXRCUVVzN1FVRkJSU3huUWtGQlJTeGxRVUZsTEVOQlFVTXNTMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJRenRCUVVGRkxHTkJRVVVzV1VGQldTeEZRVUZETEV0QlFVa3NVVUZCVHl4VlFVRlRMRWRCUVVVc1YwRkJWU3hGUVVGRkxIVkNRVUZ4UWl4WlFVRlhMRmxCUVZjc1IwRkJSU3haUVVGWExFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTXNRMEZCUXl4RlFVRkRPMEZCUTNCbUxGbEJRVVVzVlVGQlVUdEJRVUZGTEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc2JVSkJRVXNzU1VGQlJTeEZRVUZGTzBGQlFWRXNaMEpCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVVXNXVUZCUlN4elFrRkJiMElzVFVGQlNUdEJRVUZETEdkQ1FVRkpMRWxCUVVVc1JVRkJSU3hIUVVGRkxFbEJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJRenRCUVVGRkxHVkJRVWNzUjBGQlJTeEpRVUZGTEVOQlFVTTdRVUZCUlN4alFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzWlVGQlJ5eERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMR05CUVVrc1MwRkJSeXhEUVVGRExFZEJRVVU3UVVGQlJ5eFpRVUZGTEcxQ1FVRnBRaXhEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEdkQ1FVRkpMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzYTBKQlFVa3NTMEZCUnl4SFFVRkhMRmRCUVZNc1IwRkJSeXhUUVVGUExFbEJRVVVzU1VGQlJ5eEhRVUZITEVOQlFVTXNTVUZCUlN4SlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRVWNzWjBKQlFVVXNSVUZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVVVzU1VGQlJTeEZRVUZGTEVkQlFVY3NRMEZCUXl4SlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRE9WUXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zYVVKQlFVc3NTMEZCUnl4SlFVRkZPMEZCUVVjc2FVSkJRVXNzUzBGQlJ5eFRRVUZUTEVkQlFVVTdRVUZCUXl4blFrRkJSU3hGUVVGRkxFdEJRVXNzUzBGQlJ5eE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGRkxHbENRVUZMTEV0QlFVY3NVMEZCVXl4SFFVRkZPMEZCUVVNc1owSkJRVVVzUlVGQlJTeExRVUZMTEV0QlFVY3NUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlJTeHBRa0ZCU3l4TFFVRkhMRk5CUVZNc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVc3NSMEZCUnp0QlFVRkZMRzFDUVVGTExFZEJRVWNzUTBGQlF6dEJRVUZGTEcxQ1FVRkxMRWRCUVVjc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlJTeHBRa0ZCU3l4TFFVRkhMRmRCUVZVN1FVRkJReXhuUWtGQlJTeEZRVUZGTEV0QlFVc3NTMEZCUnl4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4alFVRkpMRXRCUVVjc1IwRkJSU3hMUVVGSE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVOHNTVUZCUlN4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVsQlFVVXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU51VXl4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkhMR1ZCUVdFc1QwRkJUenRCUVVGclFpeHhRa0ZCVHl4RlFVRkZMSEZHUVVGeFJpeEhRVUZGTzBGQlFVVXNaMEpCUVVrc1NVRkJSU3hEUVVGRE8wRkJRVVVzWjBKQlFVY3NTMEZCUnl4TlFVRkpMRVZCUVVVN1FVRkJUeXh4UWtGQlR5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZETEVsQlFVY3NSMEZCUlN4SlFVRkhMRWRCUVVVc1NVRkJSeXhIUVVGRkxFbEJRVWNzUlVGQlF6dEJRVUZGTEcxQ1FVRlBMRXRCUVVjc1JVRkJSU3hMUVVGSExHVkJRV01zV1VGQldTeEhRVUZGTEVOQlFVTXNSMEZCUlN4TFFVRkhMRWRCUVVjc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVOHNTVUZCUlN4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF5eEpRVUZGTzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRelZaTEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc2NVSkJRVkVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4SlFVRkZMRVZCUVVVc1VVRkJUeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1YwRkJWeXhEUVVGRE8wRkJRVVVzY1VKQlFVc3NTVUZCUlN4TlFVRkpMRkZCUVUwc1NVRkJSU3hMUVVGSExFbEJRVVVzVTBGQlR5eExRVUZITEZOQlFVOHNTMEZCUnl4TFFVRkhMRWRCUVVVc1JVRkJSU3hMUVVGSExFdEJRVWM3UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRTFCUVVrN1FVRkJReXh0UWtGQlN6dEJRVUZGTEdkQ1FVRkhMRVZCUVVVc1NVRkJSVHRCUVVGSExIRkNRVUZQTzBGQlFVVXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHZENRVUZGTEVsQlFVVXNTVUZCUlR0QlFVRkZMSEZDUVVGUkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNVVUZCVHl4RlFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2EwSkJRVWNzVTBGQlR5eExRVUZITEZOQlFVOHNSMEZCUlR0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXp0QlFVRkZMRzlDUVVGRkxGVkJRVkVzU1VGQlJTeFRRVUZQTEUxQlFVa3NTVUZCUlR0QlFVRkJMR05CUVVrN1FVRkJReXhyUWtGQlJ5eFBRVUZMTEVkQlFVVTdRVUZCUXl4dlFrRkJSeXhMUVVGSE8wRkJRVVU3UVVGQlRTeHJRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSVHRCUVVGQkxHTkJRVU1zVDBGQlN6dEJRVUZETEc5Q1FVRkhMRkZCUVUwc1IwRkJSVHRCUVVGRExITkNRVUZITEVsQlFVVXNTMEZCUnp0QlFVRkZPMEZCUVUwc2IwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVRkhPMEZCUVVFc1owSkJRVU1zVDBGQlN6dEJRVUZETEhOQ1FVRkhMRk5CUVU4c1IwRkJSVHRCUVVGRExIZENRVUZITEVsQlFVVXNTMEZCUnp0QlFVRkZPMEZCUVUwc2MwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVRkhPMEZCUVVFc2EwSkJRVVVzVDBGQlN6dEJRVUZETEhkQ1FVRkhMRWxCUVVVc1MwRkJSenRCUVVGRk8wRkJRVTBzYzBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hMUVVOd1pqdEJRVUZITEhOQ1FVRkZMRkZCUVUwc1EwRkJReXhKUVVGRkxFMUJRVWtzUzBGQlJ5eExRVUZITzBGQlFVRXNhMEpCUVVVN1FVRkJReXh2UWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlN4TlFVRkpMRXRCUVVjc1NVRkJSVHRCUVVGQkxHZENRVUZGTzBGQlFVTXNhMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeEpRVUZGTzBGQlFVRXNZMEZCUlR0QlFVRkJMRmxCUVVNN1FVRkJReXhqUVVGRkxFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVVXNiVUpCUVU4c1NVRkJSVHRCUVVGQkxGVkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4SFFVRkZMRTFCUVVrc1IwRkJSeXhIUVVGRkxFVkJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJ6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhKUVVGRkxFVkJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJ6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzU1VGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hKUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkROMlFzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWxCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zYlVKQlFVczdRVUZCUlN3eVFrRkJZU3hQUVVGUExGRkJRVkVzVDBGQlN5eFJRVUZSTEVkQlFVY3NSVUZCUlN4SFFVRkZMRTFCUVVrc1IwRkJSU3hEUVVGRExFVkJRVVVzVFVGQlRTeExRVUZMTEVOQlFVTXNSMEZCUlN4TFFVRkhMRXRCUVVrc1VVRkJVU3hOUVVGTkxFVkJRVVVzUjBGQlJTeE5RVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVVN1FVRkJReXhaUVVGRkxHOURRVUZyUXp0QlFVRkhMR05CUVVrc1NVRkJSU3hOUVVGSk8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVVVc1owSkJRVWNzVFVGQlNTeEhRVUZITEVOQlFVTXNSMEZCUlN4SlFVRkZMRWxCUVVjc1EwRkJRenRCUVVGSExHdENRVUZITzBGQlFVTXNiMEpCUVVjc1JVRkJSU3hIUVVGRkxFVkJRVVVzU1VGQlJUdEJRVUZITEhOQ1FVRkhPMEZCUVVNc2QwSkJRVVVzUjBGQlJ5eERRVUZETEVsQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVFc2EwSkJRVU1zVTBGQlR5eEhRVUZGTzBGQlFVTXNhVU5CUVdFc1MwRkJSeXhaUVVGVkxFdEJRVWNzUlVGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4clFrRkJRenRCUVVGQkxHTkJRVU1zVTBGQlR5eEhRVUZGTzBGQlFVTXNOa0pCUVdFc1MwRkJSeXhaUVVGVkxFdEJRVWNzUlVGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRkxGbEJRVVVzWlVGQllUdEJRVU0zWkN4alFVRkpMRXRCUVVjc1EwRkJReXhIUVVGRkxFbEJRVVVzVDBGQlJ5eE5RVUZKTEVsQlFVVXNUVUZCU1N4TlFVRkpMRWxCUVVVc1QwRkJTeXhOUVVGSkxFbEJRVVVzVFVGQlN5eExRVUZITEVOQlFVTXNSMEZCUlN4SlFVRkhMRWxCUVVjc1NVRkJSeXhMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRWRCUVVjc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZITEVsQlFVY3NTVUZCUnl4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEVkQlFVYzdRVUZCUlN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHMUNRVUZQTEVsQlFVVXNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVN1FVRkJRU3hWUVVGSE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVTTNVU3hqUVVGSkxFdEJRVWNzVDBGQlJ6dEJRVUZETEdkQ1FVRkpMRWxCUVVVc1IwRkJSeXhEUVVGRExFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR2xDUVVGSExFZEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hMUVVGSExFMUJRVWs3UVVGQlF5eG5Ra0ZCUnl4RFFVRkRMRWxCUVVjN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVTXNUVUZCU3l4WlFVRlhMRk5CUVZFc1dVRkJWeXhOUVVGTExFdEJRVWtzUzBGQlNTeExRVUZKTEUxQlFVc3NhMEpCUVdsQ0xFOUJRVTBzV1VGQlZTeFBRVUZQTEdGQlFWY3NWVUZCVlN4aFFVRlhMRlZCUVZVc1ZVRkJWU3hEUVVGRExFdEJRVWNzUzBGQlN5eFJRVUZSTEV0QlFVa3NSMEZCUnl4SlFVRkZMRlZCUVZNc1IwRkJSU3hOUVVGSkxHbENRVUZuUWl4SFFVRkZPMEZCUVVVc2JVSkJRVWtzUzBGQlN6dEJRVUZITERKQ1FVRlRMRWRCUVVjc1EwRkJReXhKUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVsQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzYTBKQlFVa3NTVUZCUlN4RFFVRkRPMEZCUVVVc2JVSkJRVWtzUzBGQlN6dEJRVUZGTEd0Q1FVRkZMRXRCUVVzc1IwRkJSeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlR0QlFVRkZMRzFDUVVGSE8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBPMEZCUVVFc1ZVRkJSU3hIUVVGRk8wRkJRekZhTEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHVkJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEpRVUZGTzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVWtzU1VGQlJTeEhRVUZGTEVsQlFVVXNSVUZCUlN4UlFVRlBMRVZCUVVVN1FVRkJSU3h0UWtGQlJ5eEZRVUZGTEZGQlFVMHNUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWExFTkJRVU03UVVGQlJTeHBRa0ZCUnl4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeHRRa0ZCUnl4RlFVRkZMRk5CUVU4N1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlJTeHRRa0ZCVHp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVXNSMEZCUnp0QlFVRkZMR05CUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVTdRVUZCVHl4blFrRkJTU3hKUVVGRk8wRkJRVVVzWTBGQlJTeFJRVUZSTEU5QlFVY3NTMEZCUnl4RlFVRkZMRk5CUVU4c1EwRkJRenRCUVVGRkxHTkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zYlVKQlFVOHNTVUZCUlN4RlFVRkZMRWxCUVVjc1IwRkJSU3hEUVVGRExFbEJRVVU3UVVGQlFTeFZRVUZGTzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVU4c1NVRkJSU3hGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVN1FVRkJRU3hWUVVGRk8wRkJRM1JqTEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVU4c1NVRkJSU3hGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNc1NVRkJSVHRCUVVGQkxGVkJRVVU3UVVGQlF5eGpRVUZKTEV0QlFVY3NRMEZCUXl4TlFVRkxMRU5CUVVNc1IwRkJSU3hEUVVGRExFTkJRVU03UVVGQlJTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzU1VGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc2JVSkJRVXM3UVVGQlJTeHhRa0ZCVVN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeExRVUZKTzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETzBGQlFVVXNiVUpCUVVjN1FVRkJSU3gxUWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRXRCUVVrN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNjMEpCUVVrc1MwRkJSeXhQUVVGTExFMUJRVWtzVFVGQlNTeEpRVUZGTEV0QlFVY3NSMEZCUnl4SFFVRkhMRWRCUVVVc1EwRkJReXhEUVVGRExFZEJRVVVzUlVGQlJTeFRRVUZQTEV0QlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNN1FVRkJRU3hqUVVGRE8wRkJRVU1zYlVKQlFVYzdRVUZCUVN4WlFVRkRPMEZCUVVNc1kwRkJSU3hGUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGQlF5eGpRVUZKTEV0QlFVY3NRMEZCUXl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1JVRkJSU3hIUVVGRkxFdEJRVWNzUTBGQlF5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NSVUZCUlR0QlFVTnVZaXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVVXNRMEZCUXp0QlFVRkZMR1ZCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUlVGQlJTeE5RVUZOTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRVU1zWTBGQlNTeExRVUZITEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc1pVRkJSeXhGUVVGRkxFbEJRVWtzUjBGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUTJoSExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlNTeEpRVUZGTEZsQlFWVXNUMEZCVHl4SlFVRkZMRVZCUVVVc1UwRkJVeXhKUVVGRkxFdEJRVWNzU1VGQlJ5eEZRVUZGTEZOQlFVODdRVUZCUnl4dlFrRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlJUdEJRVUZGTEhGQ1FVRlBPMEZCUVVFc1dVRkJRenRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVThzUlVGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUnp0QlFVRkJMRmxCUVVNN1FVRkJReXh4UWtGQlV5eEZRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSFZDUVVGVExFVkJRVVVzU1VGQlJ6dEJRVUZETEhWQ1FVRlBMRWxCUVVVc1MwRkJSeXhMUVVGSExFbEJRVVVzUzBGQlJ5eEpRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkRMR3RDUVVGSk8wRkJRVVVzY1VKQlFVc3NTVUZCUlN4RlFVRkZMRVZCUVVVc1dVRkJXU3hKUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEUxQlFVa3NUMEZCU3l4SlFVRkZMRVZCUVVVc1JVRkJSU3hUUVVGVExFbEJRVVVzUlVGQlJTeFRRVUZUTEVOQlFVTXNUMEZCU3l4SlFVRkZMRVZCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzUlVGQlJTeFJRVUZSTEVOQlFVTTdRVUZCUnl4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVN1FVRkJReXh6UWtGQlR5eEZRVUZGTEU5QlFVOHNSMEZCUlR0QlFVRkJMR2RDUVVGRExFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVODdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEdkQ1FVRkZMRXRCUVVzN1FVRkJSU3g1UWtGQlR5eEpRVUZKTzBGQlFVRXNiMEpCUVVzc1JVRkJSU3haUVVGWk8wRkJRVUVzYjBKQlF6Vm1PMEZCUVVFc2IwSkJRVVU3UVVGQlFTeHJRa0ZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNaMEpCUVVVc1MwRkJTenRCUVVGRkxIbENRVUZQTEVsQlFVa3NTMEZCU3l4RlFVRkZMRmxCUVZrc1NVRkJSU3hIUVVGRkxFbEJRVWNzUlVGQlJUdEJRVUZCTEdkQ1FVRkZMRXRCUVVzN1FVRkJSU3g1UWtGQlR5eEpRVUZKTEV0QlFVc3NSVUZCUlN4WlFVRlpMRWxCUVVVc1IwRkJSU3hKUVVGSExFVkJRVVU3UVVGQlFTeGpRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkRMSEZDUVVGVExFVkJRVVVzUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJSVHRCUVVGSExHMUNRVUZKTEVsQlFVVXNTVUZCU1N4TFFVRk5MRWxCUVVrc1MwRkJTeXhGUVVGRkxFdEJRVWNzVFVGQlN5eEhRVUZGTEVOQlFVTXNSVUZCUnl4UlFVRlJMRU5CUVVNc1IwRkJSU3hKUVVGRkxFdEJRVWM3UVVGQlF5eHZRa0ZCU1N4SlFVRkZMRVZCUVVVc1UwRkJVeXhIUVVGRkxFdEJRVWNzUlVGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4SlFVRkZMRXRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRVVVzYjBKQlFVY3NTVUZCUlN4SlFVRkZMRVZCUVVVc1VVRkJVVHRCUVVGRkxIVkNRVUZITEVsQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVVc1IwRkJSU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZGTEV0QlFVY3NTVUZCUlN4RlFVRkZMRk5CUVZNc1NVRkJSU3hEUVVGRExFdEJRVWNzUlVGQlJTeFRRVUZUTEVOQlFVTXNSMEZCUlN4RlFVRkZMRmxCUVZrc1JVRkJSU3haUVVGWkxFbEJRVVVzUTBGQlF6dEJRVUZCTEhGQ1FVRlBPMEZCUVVNc2IwSkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNTVUZCUlN4RFFVRkRPMEZCUVVVN1FVRkJRU3huUWtGQlN6dEJRVUZCTEdOQlFVTTdRVUZCUXl4clFrRkJSU3hKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVsQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVsQlFVazdRVUZCUVN4blFrRkJTeXhGUVVGRkxGbEJRVms3UVVGQlFTeG5Ra0ZEYm1ZN1FVRkJRU3huUWtGQlJUdEJRVUZCTEdOQlFVTXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEhGQ1FVRlBMRXRCUVVjc1JVRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJTeExRVUZITEVWQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVVzU1VGQlJTeEZRVUZGTEZsQlFWa3NTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlF5eHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RlFVRkRMRWxCUVVjc1JVRkJSU3hGUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4SlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGRkxFZEJRVVU3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJUdEJRVUZCTEdOQlFVTXNUVUZCU3p0QlFVRkJMR05CUVhWQ0xFMUJRVXM3UVVGQlFTeGpRVUZYTEUxQlFVczdRVUZCUVN4alFVRlhMRTFCUVVzN1FVRkJRU3hqUVVGTExFMUJRVXM3UVVGQlFTeGpRVUZqTEUxQlFVczdRVUZCUVN4alFVRlJMRTFCUVVzN1FVRkJRU3hqUVVGWExFMUJRVXM3UVVGQlFTeGpRVU51Wml4TlFVRkxPMEZCUVVFc1kwRkJWeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJWeXhQUVVGTk8wRkJRVUVzWTBGQlZ5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzV1VGQlNUdEJRVUZGTEhGQ1FVRlJMRXRCUVVzN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEZGQlFWRXNTVUZCU1N4UFFVRlBMRWRCUVVVc1IwRkJSeXhIUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNaMEpCUVVrc1MwRkJSeXd5UkVGQk1rUXNUVUZCVFN4SFFVRkhMRWRCUVVVc1MwRkJSeXgzUmtGQmQwWXNUVUZCVFN4SFFVRkhPMEZCUVVVc1owSkJRVVU3UVVGQlFTeGpRVUZETEUxQlFVc3NUMEZCUnl4SFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxGVkJRVlVzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZEY21Zc1RVRkJTeXhQUVVGSExFZEJRVWNzUlVGQlJTeEZRVUZGTzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1IwRkJSeXhGUVVGRkxFVkJRVVVzUlVGQlJTeFZRVUZWTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFZEJRVWNzUlVGQlJTeEZRVUZGTzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1IwRkJSeXhGUVVGRkxFdEJRVWNzVVVGQlRTeE5RVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZITEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJ5eEhRVUZGTEVkQlFVYzdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeFRRVUZUTEVWQlFVVXNWVUZCVlN4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeERRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVWNzUTBGQlF6dEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhPMEZCUVVNc2IwSkJRVVVzUlVGQlJUdEJRVUZITEhGQ1FVRkhMRWxCUVVVc1NVRkJSU3hMUVVGSExFdEJRVWNzVFVGQlNTeExRVUZITzBGQlFVa3NkVUpCUVU4c1JVRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjN1FVRkJReXg1UWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRXRCUVVjc1JVRkJSU3hMUVVGSExFZEJRVVVzVFVGQlNTeEZRVUZGTEVWQlFVVXNTMEZCUnl4SlFVRkpMRWxCUVVVc1MwRkJSeXhKUVVGSkxFZEJRVWM3UVVGQlJUdEJRVUZETEhWQ1FVRlBMRVZCUVVVc1JVRkJSU3hMUVVGSExFZEJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlJ5eEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJ5eERRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTFCUVVrN1FVRkJRU3hqUVVGTExFMUJRVXNzVDBGQlJ5eExRVUZITEVWQlFVVXNUVUZCU1N4TFFVRkhMRVZCUVVVc1MwRkJSeXhQUVVGTE8wRkJRVUVzWTBGQlN5eE5RVUZMTEU5QlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVjc1EwRkJRenRCUVVGQkxHTkJRVVVzVFVGQlN5eE5RVUZKTzBGQlFVRXNZMEZCU3l4TlFVRkxMRTlCUVVjc1JVRkJSU3hOUVVGSk8wRkJRVUVzWTBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4TFFVRkxMRTlCUVU4c1JVRkJSU3hMUVVONFppeEpRVUZGTEVWQlFVVXNUVUZCU1N4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGQkxHTkJRVVVzVFVGQlN5eFBRVUZITzBGQlFVTXNiMEpCUVVrc1NVRkJSU3hMUVVGTExFOUJRVThzUlVGQlJTeExRVUZITEV0QlFVY3NSVUZCUlN4TFFVRkhMRXRCUVVjc1MwRkJSeXhEUVVGRE8wRkJRVVVzYzBKQlFVa3NSVUZCUlN4TFFVRkhMRTFCUVVrc1JVRkJSU3hMUVVGSExFdEJRVWNzUzBGQlJ6dEJRVUZKTEc5Q1FVRkhPMEZCUVVVc2QwSkJRVWtzVFVGQlNTeExRVUZITEVWQlFVVXNTMEZCUnl4TlFVRkpMRVZCUVVVc1RVRkJTU3hIUVVGRkxFdEJRVWNzUzBGQlJ5eExRVUZITEV0QlFVY3NSVUZCUlN4RlFVRkZMRVZCUVVVc1RVRkJTU3hKUVVGRk8wRkJRVUVzY1VKQlFWRTdRVUZCUXl4elFrRkJSVHRCUVVGSExITkNRVUZKTEV0QlFVY3NSVUZCUlN4TFFVRkhMRWxCUVVVc1JVRkJSU3hMUVVGSExFdEJRVWM3UVVGQlJTeHRRa0ZCUXl4TFFVRkhMRXRCUVVjc1MwRkJSeXhMUVVGSExFVkJRVVVzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4TlFVRkpPMEZCUVVFc1owSkJRVWM3UVVGQlF5eDFRa0ZCVHl4RlFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxHTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZPMEZCUVVFc1kwRkJSeXhOUVVGTExFOUJRVWNzUlVGQlJTeExRVUZMTEU5QlFVOHNSVUZCUlN4TFFVRkhMRXRCUVVjc1JVRkJSU3hMUVVGSExFdEJRVWNzUzBGQlJ5eERRVUZETEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhSUVVGSkxFVkJRVVVzUzBGQlJ5eE5RVUZOTEZOQlFWTXNSVUZCUlN4VlFVRlZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEV0QlFVYzdRVUZCUVN4alFVRkxMRTFCUVVzc1QwRkJSenRCUVVGRExHOUNRVUZGTEVWQlFVVTdRVUZCUnl4dlFrRkJTU3hKUVVGRkxFdEJRVWM3UVVGQlJTeHZRa0ZCUlN4TFFVRkxMRWxCUVVrc1EwRkJReXhKUVVGRk8wRkJRVWNzZDBKQlFVOHNTVUZCUlN4TlFVRkpMRTlCUVVzc1QwRkJUeXhWUVVGUkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVsQlFVVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVGQkxHTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZPMEZCUVVFc1kwRkJSeXhOUVVGTExFMUJRVWs3UVVGQlFTeFpRVUZITzBGQlFVVXNaMEpCUVVVc1JVRkJSVHRCUVVGQkxHTkJRVkU3UVVGQlFTeGpRVU51Wmp0QlFVRkJMRmxCUVZVN1FVRkJSU3hwUWtGQlNTeExRVUZMTzBGQlFVVXNaMEpCUVVVc1UwRkJVeXhEUVVGRExFMUJRVWtzU1VGQlJTeEZRVUZGTEZGQlFWRXNTVUZCU1N4UFFVRlBMRWRCUVVVc1IwRkJSeXhIUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkhMR2RDUVVGRkxFVkJRVVVzVVVGQlVTeFRRVUZSTEVkQlFVYzdRVUZCUlN4blFrRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeG5Ra0ZCUnl4RlFVRkZMRk5CUVU4N1FVRkJSU3h4UWtGQlR6dEJRVUZGTEdWQlFVY3NSMEZCUlN4RFFVRkRPMEZCUVVVc2JVSkJRVThzUlVGQlJTeFRRVUZQTzBGQlFVRXNWVUZCUXp0QlFVRkRMRmxCUVVVc1IwRkJSenRCUVVOMFN5eGpRVUZKTEV0QlFVY3NRMEZCUXl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzUlVGQlJTeEhRVUZGTEV0QlFVYzdRVUZCUVN4WlFVRkRMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc1kwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eEZRVUZITEVkQlFVY3NUVUZCU1N4SFFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHMUNRVUZITzBGQlFVVTdRVUZCU3l4dlFrRkJUVHRCUVVGQkxGbEJRVWM3UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc2FVSkJRVWNzVFVGQlNTeEhRVUZGTEVOQlFVTXNSMEZCUlN4SFFVRkZMRU5CUVVNc1NVRkJSeXhSUVVGUExFdEJRVVU3UVVGQlJTeG5Ra0ZCUlN4SFFVRkhPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVTdRVUZCUXl4eFFrRkJTenRCUVVGRkxHdENRVUZGTEZsQlFWa3NSVUZCUXl4TFFVRkpMR2xDUVVGblFpeFJRVUZQTEVWQlFVTXNRMEZCUXl4SlFVRkZMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlN4TlFVRkpPMEZCUVVFc1dVRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3h0UWtGQlJ5eE5RVUZKTEVsQlFVVXNWMEZCVnl4TlFVRkpMRVZCUVVVc1EwRkJReXhKUVVGRkxFbEJRVVVzV1VGQldTeEZRVUZETEdOQlFXRXNSMEZCUlN4TFFVRkpMR1ZCUVdNc1EwRkJReXhMUVVGSExFbEJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNUVUZCU1N4RlFVRkZMRmxCUVZrc1JVRkJReXhMUVVGSkxHVkJRV01zUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVTjZaMElzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEdsQ1FVRkhMRk5CUVU4N1FVRkJSU3hyUWtGQlJTeE5RVUZKTEUxQlFVazdRVUZCUlN4MVFrRkJVU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEhRVUZGTzBGQlFVa3NiVUpCUVVjc1EwRkJReXhKUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZGTEUxQlFVa3NRMEZCUXp0QlFVRkZMR3RDUVVGRkxFbEJRVVVzU1VGQlJTeEhRVUZITEVOQlFVTXNTVUZCUlN4RFFVRkRMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVVXNTMEZCUnp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzVFVGQlRTeE5RVUZMTEVWQlFVVTdRVUZCUlN4blFrRkJSU3hMUVVGSE8wRkJRVVVzY1VKQlFVODdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMRzFDUVVGSExFVkJRVVVzUjBGQlJ5eE5RVUZKTEVOQlFVTXNSVUZCUlN4SlFVRkpPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2EwSkJRVVVzU1VGQlJTeFpRVUZWTEVsQlFVVXNWVUZCVVN4RFFVRkRMRU5CUVVNc1MwRkJSeXhOUVVGSkxFdEJRVWNzWVVGQlZ5eEpRVUZGTzBGQlFVa3NjVUpCUVVzN1FVRkJSU3hyUWtGQlJTeEpRVUZKTEV0QlFVc3NUVUZCU1N4RFFVRkRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1kwRkJZenRCUVVGRkxHZENRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzWTBGQll6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNXVUZCV1R0QlFVRkZMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1YwRkJWenRCUVVGRkxHZENRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzV1VGQldUdEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNaVUZCWlN4SlFVRkZPMEZCUTJwbUxHZENRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVlVGQlZUdEJRVUZGTEcxQ1FVRkhMRVZCUVVVc1VVRkJVU3hKUVVGRkxFdEJRVXNzU1VGQlNTeEZRVUZGTEdWQlFXVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF5eExRVUZITEZGQlFVMDdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGRkxFbEJRVVVzV1VGQlZTeEpRVUZGTEZWQlFWRXNRMEZCUXl4RFFVRkRMRXRCUVVjc1RVRkJTU3hMUVVGSExHRkJRVmNzU1VGQlJUdEJRVUZKTEhGQ1FVRkxPMEZCUVVVc2EwSkJRVVVzU1VGQlNTeExRVUZMTEUxQlFVa3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmRCUVZjN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZOQlFWTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGTkJRVk03UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZsQlFWa3NTVUZCUlR0QlFVRkxMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1QwRkJUenRCUVVGRkxHMUNRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFc1NVRkJSU3hKUVVGRk8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTlCUTNCbUxFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4TFFVRkhMRVZCUVVVc2EwSkJRV3RDTzBGQlFVY3NhMEpCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXl4RlFVRkhMR3RDUVVGclFqdEJRVUZGTEd0Q1FVRkpMRWxCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXl4RlFVRkhMR3RDUVVGclFqdEJRVUZGTEcxQ1FVRkhMRXRCUVVjc1MwRkJSeXhGUVVGRkxHdENRVUZyUWl4TFFVRkhMRXRCUVVzc1NVRkJTU3hIUVVGRkxFTkJRVU1zUzBGQlJ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eHhRa0ZCU3p0QlFVRkZMR3RDUVVGSkxFbEJRVVVzU1VGQlNTeExRVUZMTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVVzVFVGQlN5eEZRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhIUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVWQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhIUVVGRkxFTkJRVU1zUjBGQlJTeEpRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJTeEZRVUZGTEd0Q1FVRnJRaXhIUVVGRkxFbEJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWl4SFFVRkZMRWxCUVVjc1NVRkJTVHRCUVVGQkxHZENRVUZMTEVWQlFVVXNXVUZCV1R0QlFVRkJMR2RDUVVNMVpqdEJRVUZCTEdkQ1FVRkZPMEZCUVVFc1kwRkJReXhGUVVGSExHdENRVUZyUWl4SFFVRkZMRWxCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRWxCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4UFFVRlBMRXRCUVVjc1MwRkJSeXhMUVVGSExFTkJRVU1zU1VGQlJTeEpRVUZGTEUxQlFVa3NTMEZCUnl4UFFVRkxMRWxCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF5eEhRVUZGTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1NVRkJSU3hSUVVGTkxFbEJRVVVzU1VGQlJTeEpRVUZGTEV0QlFVY3NSVUZCUlR0QlFVRkhMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1QwRkJUenRCUVVGRkxHMUNRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFc1NVRkJSU3hKUVVGRk8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WFFVRlhPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4VFFVRlRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUk8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4UlFVRlJPMEZCUVVVc2IwSkJRVTBzUTBGQlF5eExRVUZITEVWQlFVVXNSVUZCUlN4SFFVRkhMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzU1VGQlJ5eEpRVUZGTEUxQlFVa3NTMEZCUnp0QlFVTndaaXh4UWtGQlR5eEpRVUZKTEVsQlFVVXNSMEZCUlN4TFFVRkhMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVU1zU1VGQlJTeEpRVUZGTEVsQlFVVXNRMEZCUXl4TFFVRkxMRTFCUVUwc1NVRkJSU3hWUVVGVkxFMUJRVWtzU1VGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRTFCUVUwc1NVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZKTEUxQlFVa3NWVUZCVlN4TlFVRkpMRWxCUVVVc1JVRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXgxUWtGQlV5eEZRVUZGTEVkQlFVVTdRVUZCUXl4M1FrRkJUeXhKUVVGRkxFVkJRVVVzWVVGQllTeEZRVUZGTEUxQlFVMHNiVUpCUVcxQ0xFdEJRVWNzUlVGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4alFVRkxPMEZCUVVNc2NVSkJRVXM3UVVGQlJTeHhRa0ZCU3p0QlFVRkZMSEZDUVVGTE8wRkJRVVVzYTBKQlFVa3NTMEZCUnl4dlFrRkJTU3hSUVVGTkxGbEJRVmtzUjBGQlJTeEpRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkZMRWRCUVVVc1EwRkJReXhIUVVGRkxFbEJRVVVzU1VGQlNTeExRVUZMTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeHJRa0ZCYTBJN1FVRkJSU3hyUWtGQlNTeEpRVUZGTEVWQlFVVXNhMEpCUVd0Q0xFZEJRVVVzU1VGQlJTeExRVUZMTEVsQlFVa3NSMEZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRXRCUVVjN1FVRkJSU3huUWtGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1QwRkJUeXhMUVVGSExFTkJRVU03UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4clFrRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeHJRa0ZCUlN4SFFVRkhMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFZEJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hOUVVOdVppeEZRVUZGTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hIUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJRU3haUVVGRk8wRkJRVUVzV1VGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4cFFrRkJSeXhGUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVczdRVUZCUlN4eFFrRkJTenRCUVVGRkxIRkNRVUZMTzBGQlFVVXNhVUpCUVVjc1UwRkJUenRCUVVGRkxIVkNRVUZSTEVkQlFVVXNTVUZCUlN4RlFVRkZMRVZCUVVVc1VVRkJUU3hEUVVGRExFdEJRVWM3UVVGQlF5eHZRa0ZCU1N4SlFVRkZMRTlCUVVzN1FVRkJSU3h4UWtGQlJ5eFBRVUZMTzBGQlFVVXNjVUpCUVVjc1MwRkJSeXhKUVVGRkxFbEJRVVVzU1VGQlJUdEJRVUZGTEcxQ1FVRkhMRXRCUVVzc1QwRkJTeXhKUVVGRkxFVkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4SFFVRkhMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZGTEhGQ1FVRkhMRWxCUVVVc1NVRkJSVHRCUVVGQkxHTkJRVU03UVVGQlF5eHhRa0ZCVHl4SFFVRkhMRU5CUVVNc1JVRkJSU3hOUVVGTkxFMUJRVXNzUlVGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1RVRkJTVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNUVUZCU1N4TFFVRkxMRWxCUVVrN1FVRkJRU3haUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEcxQ1FVRkhPMEZCUVVVc2IwSkJRVXM3UVVGQlFTeFpRVUZUTzBGQlFVRXNXVUZCUlN4SFFVRkZMRmRCUVZVN1FVRkJReXh4UWtGQlR6dEJRVUZCTEZsQlFWVTdRVUZCUVN4WlFVRkZMRWRCUVVVc1RVRkJTU3haUVVGWkxHRkJRVmNzV1VGQldTeEpRVUZKTzBGQlFVRXNXVUZCUlN4SFFVRkZMRTFCUVVrc1NVRkJSU3h6UTBGQll5eExRVUZMTEVWQlFVVXNVMEZCVHl4VlFVRlZPMEZCUVVFc1dVRkJiMElzUjBGQlJTeFRRVUZUTEVkQlFVVTdRVUZCUXl4eFFrRkJTenRCUVVGRkxHdENRVUZKTEVsQlEzQm1MRVZCUVVVc1JVRkJSVHRCUVVGUExHdENRVUZITEV0QlFVY3NTMEZCUnl4aFFVRlhPMEZCUVVVc2RVSkJRVTA3UVVGQlJ5eDFRa0ZCVVN4SlFVRkZMRWRCUVVVc1MwRkJSeXhIUVVGRkxFdEJRVWNzUjBGQlJUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1MwRkJSeXhKUVVGRkxFMUJRVWM3UVVGQlJ5eHZRa0ZCUlN4TFFVRkxMRWxCUVVrc1IwRkJSU3hKUVVGRkxGTkJRVk03UVVGQlJTeHZRa0ZCU1N4SlFVRkZPMEZCUVVzc2IwSkJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGRk8wRkJRVU1zZFVKQlFVY3NSVUZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSU3haUVVGWExFdEJRVWNzVVVGQlRTeEpRVUZGTEZOQlFVOHNTMEZCU3l4SlFVRkZMRVZCUVVVc1QwRkJUeXhoUVVGWExGTkJRVTg3UVVGQlRTeHpRa0ZCUnp0QlFVRkRMSE5DUVVGRkxFdEJRVXNzUTBGQlF6dEJRVUZGTEhOQ1FVRkZPMEZCUVVVc2QwSkJRVWtzU1VGQlJUdEJRVUZGTERCQ1FVRk5PMEZCUVVFc2EwSkJRVU1zVTBGQlR5eEhRVUZGTzBGQlFVRXNhMEpCUVVNN1FVRkJReXh6UWtGQlJUdEJRVUZCTEdkQ1FVRk5PMEZCUVVNc2IwSkJRVWM3UVVGQlJTeDVRa0ZCVFR0QlFVRkJMR05CUVVVN1FVRkJReXh4UWtGQlRUdEJRVUZCTEZsQlFVVTdRVUZCUVN4WlFVRkZMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVVzUzBGQlJ5eEZRVUZGTzBGQlFVRXNXVUZCVnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGUExFZEJRVWNzVFVGQlNTeEhRVUZGTEUxQlFVa3NSMEZCUlN4TlFVRkpMRWRCUVVVc1RVRkJTU3hEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SlFVRkZMRmRCUVZVN1FVRkJReXh4UWtGQlV5eEZRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGRkxFVkJRVVU3UVVGQlVTeHJRa0ZCUlN4SFFVRkhPMEZCUVVVc1owSkJRVVVzUjBGQlJ5eExRVUZMTEVWQlFVVXNSVUZCUlR0QlFVRkZMRzFDUVVGSExFVkJRVVU3UVVGQlJ5eHBRa0ZCUnl4UlFVRlJMRVZCUVVVc1EwRkJRenRCUVVOeVppeHRRa0ZCUnp0QlFVRkZMR2xDUVVGSE8wRkJRVVVzY1VKQlFVODdRVUZCUVN4WlFVRkRPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEZRVUZETEVkQlFVVXNSMEZCUlR0QlFVRkZPMEZCUVVrc1owSkJRVWNzUlVGQlJUdEJRVUZuUWl4clFrRkJSenRCUVVGRExIVkNRVUZQTEVWQlFVVXNaMEpCUVdkQ0xFZEJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVTXNVMEZCVHl4SFFVRkZPMEZCUVVNc2EwSkJRVVVzYzBSQlFYTkVMRU5CUVVNc1JVRkJSU3hIUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVTTdRVUZCUXl4bFFVRkhMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zWjBKQlFVVXNSVUZCUlN4VlFVRlRMRVZCUVVVc1RVRkJUVHRCUVVGQkxGbEJRVU1zUTBGQlF5eEZRVUZGTEUxQlFVMHNRMEZCUXp0QlFVRkZMRzFDUVVGTkxFTkJRVU03UVVGQlFTeFZRVUZETEVWQlFVVTdRVUZCUlN4WlFVRkZMRmRCUVZNc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTeFhRVUZUTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHMUNRVUZwUWl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxHMUNRVUZwUWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTd3lRa0ZCZVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzTWtKQlFYbENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRek5oTEZsQlFVVXNPRUpCUVRSQ0xFTkJRVU1zUjBGQlJTeFBRVUZMTEVWQlFVVXNPRUpCUVRSQ0xFVkJRVVVzUjBGQlJ5eEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMQ3RDUVVFMlFpeERRVUZETEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc0swSkJRVFpDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzTkVKQlFUQkNMRU5CUVVNc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTdzBRa0ZCTUVJc1JVRkJSU3hIUVVGSExFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN3MFFrRkJNRUlzVVVGQlNTeEZRVUZGTERSQ1FVRXdRaXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNiMEpCUVd0Q0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4dlFrRkJhMElzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3h4UWtGQmJVSXNVVUZCU1N4RlFVRkZMSEZDUVVGdFFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc01FSkJRWGRDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3d3UWtGQmQwSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRM0JtTEZsQlFVVXNiVUpCUVdsQ0xFTkJRVU1zUjBGQlJTeFBRVUZMTEVWQlFVVXNiVUpCUVdsQ0xFVkJRVVVzU1VGQlNTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMRzlDUVVGclFpeERRVUZETEVkQlFVVXNUMEZCU3l4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3hYUVVGVExGRkJRVWtzUlVGQlJTeFhRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3h0UWtGQmFVSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEcxQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEc5Q1FVRnJRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3h2UWtGQmEwSXNVVUZCU1N4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc2RVSkJRWEZDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxIVkNRVUZ4UWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4M1FrRkJjMElzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUXpGbExGbEJRVVVzZDBKQlFYTkNMRkZCUVVrc1JVRkJSU3gzUWtGQmMwSXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4UlFVRkpMRVZCUVVVc2IwSkJRV3RDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3huUWtGQll5eERRVUZETEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc1owSkJRV01zUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3hwUWtGQlpTeERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3hwUWtGQlpTeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzZDBKQlFYTkNMRkZCUVVrc1JVRkJSU3gzUWtGQmMwSXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJSU3haUVVGRkxIRkNRVUZ0UWl4UlFVRkpMRVZCUVVVc2NVSkJRVzFDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3h4UWtGQmJVSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHhRa0ZCYlVJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc1ZVRkJVU3hEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxGVkJRVkVzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVU5vWlN4WlFVRkZMRzFDUVVGcFFpeFJRVUZKTEVWQlFVVXNiVUpCUVdsQ0xFVkJRVVVzU1VGQlNTeERRVUZETzBGQlFVVXNZMEZCU1N4TFFVRkhMRTlCUVVzc1MwRkJSeXhGUVVGRkxFbEJRVWtzUjBGQlJTeEpRVUZGTEVWQlFVVXNaMEpCUVdNc1QwRkJTeXhKUVVGRkxFVkJRVVVzWjBKQlFXTXNSVUZCUlN4SlFVRkpMRWRCUVVVc1MwRkJSeXhGUVVGRkxGVkJRVkVzVVVGQlNTeExRVUZITEVWQlFVVXNWVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGRkxGbEJRVVVzVVVGQlRTeFJRVUZKTEVWQlFVVXNVVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGRkxGbEJRVVVzZDBKQlFYTkNMRTlCUVVzc1JVRkJSU3gzUWtGQmMwSXNSVUZCUlN4SlFVRkpPMEZCUVVVc1kwRkJTU3hMUVVGSExFVkJRVVVzTWtKQlFYbENMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NTMEZCUnl4RlFVRkZMREpDUVVGNVFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTERoQ1FVRTBRaXhQUVVGTExFVkJRVVVzT0VKQlFUUkNMRVZCUVVVc1NVRkJTVHRCUVVOMFlTeGpRVUZKTEV0QlFVY3NRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFdEJRVWNzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExGRkJRVWtzUzBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkZMRXRCUVVjc1JVRkJSU3d5UWtGQmVVSXNVVUZCU1N4TFFVRkhMRVZCUVVVc01rSkJRWGxDTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVVc1MwRkJSeXhQUVVGTExFdEJRVWNzUlVGQlJTeEpRVUZKTEVkQlFVVXNTMEZCUnl4UlFVRkpMRXRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4UFFVRkxMRXRCUVVjc1JVRkJSU3hKUVVGSkxFZEJRVVVzUTBGQlF5eEhRVUZGTEV0QlFVY3NUMEZCU3l4TFFVRkhMRVZCUVVVc1NVRkJTU3hIUVVGRkxFbEJRVVVzVVVGQlNTeEpRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVVc1MwRkJSeXhSUVVGSkxFdEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4dFFrRkJVeXhMUVVGSk8wRkJRVU1zWjBKQlFVa3NTVUZCUlR0QlFVRkZMR2RDUVVGRkxFOUJRVThzVDBGQlR5eERRVUZETEVkQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGSkxFbEJRVVVzVDBGQlJ5eE5RVUZKTEVWQlFVVXNUVUZCU1N4SFFVRkZMRWxCUVVVc1QwRkJSeXhQUVVGSExFVkJRVVVzUTBGQlF5eE5RVUZKTzBGQlFVVXNZMEZCUlN4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRVVVzWTBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZPMEZCUVVVc1kwRkJSU3hMUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTzBGQlFVVXNZMEZCUlN4dlEwRkJhME1zUlVGQlJTeEZRVUZGTEdsRFFVRnBRenRCUVVGRkxHTkJRVVVzUzBGQlJ5eEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVRkZMR05CUVVVc1MwRkJSeXhGUVVGRkxFVkJRVVVzUlVGQlJUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJRenRCUVVGRExGbEJRVVVzWVVGQlZ6dEJRVU16WlN4WlFVRkZMR0ZCUVZjN1FVRkJSeXhaUVVGRkxGbEJRVlU3UVVGQlJ5eFpRVUZGTEdWQlFXRTdRVUZCUlN4WlFVRkZMRzFDUVVGcFFpeE5RVUZKTEVsQlFVVTdRVUZCUlN4WlFVRkZMR1ZCUVdFN1FVRkJSU3haUVVGRkxHVkJRV0U3UVVGQlJ5eFpRVUZGTEd0Q1FVRm5RanRCUVVGSExGbEJRVVVzWVVGQlZ6dEJRVUZGTEZsQlFVVXNWVUZCVVR0QlFVRkZMR05CUVVrN1FVRkJSeXhqUVVGRkxGTkJRVk1zUzBGQlNUdEJRVUZETEd0Q1FVRkpMRWRCUVVjN1FVRkJSU3h0UWtGQlN5eEpRVUZGTzBGQlFVRXNWVUZCUnp0QlFVRkZMRzFDUVVGVExFdEJRVWs3UVVGQlF5eG5Ra0ZCUnl4RlFVRkZMRWxCUVVVN1FVRkJSeXhyUWtGQlJ6dEJRVUZGTEcxQ1FVRkhMRU5CUVVNc1IwRkJSU3hMUVVGSExFZEJRVWNzUlVGQlJTeEhRVUZGTEZsQlFWa3NRMEZCUXp0QlFVRkJMRzFDUVVGTk8wRkJRVU1zYjBKQlFVY3NSVUZCUlR0QlFVRlBMSFZDUVVGSkxHTkJRVmtzVDBGQlR5eEZRVUZGTEZkQlFWTXNSVUZCUlN4VFFVRlBMRU5CUVVNc1JVRkJSU3hOUVVGTkxFbEJRVWNzUlVGQlJTeFBRVUZQTzBGQlFWRXNkVUpCUVVjc1VVRkJVU3hGUVVGRkxFOUJRVThzVFVGQlRTeERRVUZETzBGQlFVVXNiVUpCUVVjc1JVRkJSVHRCUVVGRkxHOUNRVUZGTEV0QlFVY3NUMEZCU3l4TFFVRkhMRTFCUVVjc1JVRkJSU3haUVVGVkxFMUJRVWNzVFVGQlNTeExRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkZMRWRCUVVjc1EwRkJReXhIUVVGRkxFdEJRVWNzUjBGQlJ5eEZRVUZGTzBGQlFVRXNZMEZCUnp0QlFVRkJMRlZCUVVNN1FVRkJReXhoUVVGSE8wRkJSM0JqTEdsQ1FVRlBMRlZCUVZVN1FVRkJRU3hSUVVOdVFqdEJRVUZCTEUxQlJVRXNSMEZCUnp0QlFVVklMRlZCUVVrc1QwRkJUeXhaUVVGWkxGbEJRVmtzVDBGQlR5eFhRVUZYTzBGQlEyNUVMR1ZCUVU4c1ZVRkJWVHRCUVVGQkxHVkJRMVlzVDBGQlR5eFhRVUZYTEdOQlFXTXNUMEZCVHl4TFFVRkxPMEZCUTI1RUxHVkJRVThzUTBGQlF5eEhRVUZITEUxQlFVMHNaVUZCWlR0QlFVRkJPMEZCUVVFN096dEJRM0pGYkVNN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPMEZEUVU4c1RVRkJUU3hQUVVGUE96czdRVU5WY0VJc1RVRkJTVHRCUVVWS0xFMUJRVWtzVFVGQk9FSTdRVUZEYUVNc2NVSkJRV2xDTzBGQlFVRXNSVUZEYmtJc1QwRkJUenRCUVVOTUxIRkNRVU5KTEU5QlFUUkNMRTlCUVcxRE8wRkJRVUVzUlVGRGNrVTdRVUZGUVN4TlFVRk5MSGxDUVVGcFJTeFBRVU5zUlN4UFFVRTBRaXc0UWtGRFFTeFBRVU0zUWp0QlFVZEtMRTFCUVVrN1FVRkRTaXhOUVVGSkxHTkJRV003UVVGRGJFSXNUVUZCU1N4bFFVRmxPMEZCUTI1Q0xFMUJRVWtzVlVGQlZUdEJRVVZrTEUxQlFVMHNlVUpCUVhsQ0xFTkJRVU1zWlVGQlowTTdRVUZGT1VRc1VVRkJTU3hsUVVGbExFZEJRVWM3UVVGRGNFSXNZVUZCVHp0QlFVRkJMRWxCUTFRN1FVRkhRU3hSUVVGSkxFOUJRVThzYzBKQlFYTkNMR0ZCUVdFN1FVRkROVU1zVlVGQlNTeFBRVUZQTEZOQlFWTXNaVUZCWlN4RFFVRkRMRXRCUVVzc2NVSkJRWEZDTzBGQlJUVkVMR2RDUVVGUk8wRkJRVUVzVlVGRFNpeHRRMEZCYlVNc1lVRkRia003UVVGQlFTeFJRVU5yUlR0QlFVRkJMRTFCUTNoRk8wRkJRMEVzWVVGQlR6dEJRVUZCTEVsQlExUTdRVUZIUVN4UlFVRkpMRTlCUVU4c1dVRkJXU3hsUVVGbExGRkJRVkVzV1VGQldTeFJRVUZSTEZOQlFWTXNUVUZCVFR0QlFVVXZSU3hqUVVGUk8wRkJRVUVzVVVGRFNpeHRRMEZCYlVNc1lVRkRia003UVVGQlFTeE5RVU0wUlR0QlFVRkJMRWxCUTJ4R08wRkJSVUVzVVVGQlNUdEJRVWRHTEZWQlFVa3NUMEZCVHl4dFFrRkJiVUlzWVVGQllUdEJRVU42UXl4WlFVRkpMR1ZCUVdVc1JVRkJSU3hOUVVGTkxGbEJRVmtzU1VGQlNTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJRVUVzVFVGRGFrVTdRVUZKUVN4aFFVRlBMRmxCUVZrc1UwRkJVeXhKUVVGSkxGZEJRVmM3UVVGQlFTeFJRVU42UXp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUTI1Rk8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hOUVVOc1JTeERRVUZETEVOQlFVTTdRVUZCUVN4SlFVTktMRk5CUVZNc1IwRkJSenRCUVVOV0xHRkJRVTg3UVVGQlFTeEpRVU5VTzBGQlFVRXNSVUZEUmp0QlFVVkJMRTFCUVUwc2EwSkJRV3RDTEUxQlFXVTdRVUZEY2tNc1VVRkJTVHRCUVdWR0xHRkJRVThzV1VGQldTeFRRVUZUTEVsQlFVa3NWMEZCVnp0QlFVRkJMRkZCUTNwRE8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZEZGtZN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWs3UVVGQlFTeE5RVU42Uml4RFFVRkRMRU5CUVVNN1FVRkJRU3hKUVVOS0xGTkJRVk1zUjBGQlJ6dEJRVU5XTEdGQlFVODdRVUZCUVN4SlFVTlVPMEZCUVVFc1JVRkRSanRCUVVWQkxFMUJRVTBzYTBKQlFXdENMRU5CUVVNc1UwRkJhMElzWlVGQmQwSTdRVUZEYWtVc1VVRkJTU3hUUVVGVE8wRkJRMWdzVlVGQlNTeE5RVUU0UWp0QlFVTm9ReXhsUVVGUE8wRkJRVUVzVFVGRFZEdEJRVU5CTEdGQlFVOHNZVUZCWVN4blEwRkJaME03UVVGQlFTeEpRVU4wUkN4UFFVRlBPMEZCUTB3c1lVRkJUeXhoUVVGaExESkNRVUV5UWp0QlFVRkJMRWxCUTJwRU8wRkJRVUVzUlVGRFJqdEJRVVZQTEUxQlFVMHNkMEpCUVhkQ0xFOUJRVTBzVlVGQkswTTdRVUZEZUVZc1VVRkJTU3hoUVVGaE8wRkJRMllzWVVGQlR5eFJRVUZSTEZGQlFWRTdRVUZCUVN4SlFVTjZRanRCUVVOQkxGRkJRVWtzWTBGQll6dEJRVU5vUWl4WlFVRk5MRWxCUVVrc1RVRkJUU3gxUkVGQmVVUTdRVUZCUVN4SlFVTXpSVHRCUVVOQkxGRkJRVWtzVTBGQlV6dEJRVU5ZTEZsQlFVMHNTVUZCU1N4TlFVRk5MRzlFUVVGelJEdEJRVUZCTEVsQlEzaEZPMEZCUlVFc2JVSkJRV1U3UVVGSFppeFZRVUZOTEZWQlFWVXNUVUZCVFR0QlFVTjBRaXhWUVVGTkxHRkJRV0VzVFVGQlRUdEJRVU42UWl4VlFVRk5MRTlCUVU4c1RVRkJUVHRCUVVWdVFpeFZRVUZOTEdGQlFXRXNkVUpCUVhWQ0xGVkJRVlU3UVVGRGNFUXNWVUZCVFN4VlFVRlZMRkZCUVZFc1owSkJRV2RDTzBGQlJYaERMRlZCUVUwc1dVRkJXU3hOUVVGTk8wRkJRM2hDTEZWQlFVMHNjVUpCUVhGQ0xFOUJRVThzWTBGQll5eFhRVUZYTEZsQlFWazdRVUZEZGtVc1ZVRkJUU3hsUVVGbExHZENRVUZuUWl4VFFVRlRMRlZCUVZVN1FVRkRlRVFzVlVGQlRTeHRRa0ZCYlVJc1QwRkJUeXhqUVVGakxGZEJRVmNzVlVGQlZTeFpRVUZaTEVsQlFVazdRVUZGYmtZc1VVRkJTU3haUVVGWk8wRkJSV2hDTEZWQlFVMHNVVUZCT0VJc1EwRkJRenRCUVVkeVF5eFJRVUZKTEZWQlFWVXNSMEZCUnp0QlFVTm1MRmxCUVUwc1MwRkJTeXhKUVVGSkxGRkJRVkVzUTBGQlF5eFpRVUZaTzBGQlEyeERMRzFDUVVGWExFMUJRVTA3UVVGRFppeHpRa0ZCV1R0QlFVTmFMR3RDUVVGUk8wRkJRVUVzVVVGRFZpeEhRVUZITEU5QlFVODdRVUZCUVN4TlFVTmFMRU5CUVVNc1EwRkJRenRCUVVGQkxFbEJRMG83UVVGSFFTeFZRVUZOTEV0QlFVc3NTVUZCU1N4UlFVRlJMRU5CUVVNc1UwRkJVeXhYUVVGWE8wRkJRekZETEZsQlFVMHNWVUZCVlN4aFFVRmhMSGxDUVVGNVFqdEJRVU4wUkN4WlFVRk5MRk5CUVdsRE8wRkJRVUVzVVVGRGNrTXNXVUZCV1N4RFFVRkRMRlZCUVd0Q0xHOUNRVUUwUWp0QlFVTjZSQ3hqUVVGMVF5eGpRVUZqTEZOQlFWTXNVMEZCVXl4WlFVRlpMRXRCUXk5RkxFOUJRVThzVTBGQlV5eGhRVUZoTzBGQlF5OUNMRzFDUVVGUExFbEJRVWtzWjBKQlFXZENMRWxCUVVrN1FVRkJRU3hqUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVN4blFrRkhSVHRCUVVGQkxHTkJRMFk3UVVGQlFTeGpRVU5CTEVWQlFVTXNUVUZCVFN4clFrRkJhVUk3UVVGQlFTeFpRVUZETEVOQlFVTTdRVUZCUVN4VlFVTm9RenRCUVVWQkxHTkJRVWtzVTBGQlV5eFRRVUZUTEU5QlFVOHNSMEZCUnp0QlFVTTVRaXhuUWtGQlNTeHJRa0ZCYTBJN1FVRkRjRUlzY1VKQlFVODdRVUZCUVN4WlFVTlVPMEZCUlVFc2EwSkJRVTBzVTBGQlV5eHpRa0ZCYzBJN1FVRkZja01zWjBKQlFVa3NUMEZCTkVJN1FVRkRPVUlzYTBKQlFVa3NhVUpCUVdsQ0xITkNRVUZ6UWp0QlFVTjZReXgxUWtGQlR5eFRRVUZUTzBGQlFVRXNZMEZEYkVJc1YwRkJWeXhwUWtGQmFVSXNLMEpCUVN0Q08wRkJRM3BFTEhWQ1FVRlBMRk5CUVZNN1FVRkJRU3hqUVVOc1FqdEJRVUZCTEZsQlEwWTdRVUZGUVN4dFFrRkJUeXhUUVVGVE8wRkJRVUVzVlVGRGJFSTdRVUZGUVN4cFFrRkJUeXhyUWtGQmEwSTdRVUZCUVN4UlFVTXpRanRCUVVGQkxFMUJRMFk3UVVGRlFTeFZRVUYxUXl4WlFVRlpPMEZCUTJwRUxHVkJRVThzWVVGQllUdEJRVU53UWl4WlFVRkpMRTlCUVU4c1UwRkJVeXhoUVVGaE8wRkJReTlDTEdsQ1FVRlBMSE5DUVVFeVFpeExRVUZMTEZkQlFWY3NjMEpCUVhOQ08wRkJRVUVzVVVGRE1VVXNUMEZCVHp0QlFVTk1MR2RDUVVGTkxHMUNRVUZ0UWl4MVFrRkJkVUlzVVVGQlVTeFRRVUZUTEVOQlFVTTdRVUZEYkVVc2FVSkJRVThzYzBKQlFYTkNMRWxCUVVrc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4SFFVRkhMRVZCUVVNc1RVRkJUU3hyUWtGQmFVSXNRMEZCUXp0QlFVRkJMRkZCUTNKR08wRkJRVUVzVFVGRFJqdEJRVVZCTEdOQlFWRXNUVUZCVFN4RlFVRkZPMEZCUVVFN1FVRkJRU3hSUVVWYUxGbEJRVlU3UVVGRFVpeDVRa0ZCWlR0QlFVTm1MSGRDUVVGak8wRkJRMlFzYVVKQlFVODdRVUZEVUN4clFrRkJVVHRCUVVGQkxGRkJRMVk3UVVGQlFUdEJRVUZCTEZGQlJVRXNRMEZCUXl4VFFVRlRPMEZCUTFJc2VVSkJRV1U3UVVGRFppeHZRa0ZCVlR0QlFVTldMR2xDUVVGUExFbEJRVWs3UVVGQlFTeFJRVU5pTzBGQlFVRXNUVUZCUXp0QlFVRkJMRWxCUTFBc1EwRkJReXhEUVVGRE8wRkJSVVlzVlVGQlRTeFJRVUZSTEV0QlFVc3NTMEZCU3p0QlFVVjRRaXhSUVVGSkxGZEJRVmM3UVVGRFlpeFpRVUZOTEVsQlFVa3NUVUZCVFN3eVJFRkJNa1FzVDBGQlR5eEpRVUZKTzBGQlFVRXNTVUZEZUVZN1FVRkJRU3hGUVVOR08wRkJSVThzVFVGQlRTeGpRVUZqTEUxQlFYRkNPMEZCUXpsRExGRkJRVWtzWlVGQlpTeE5RVUZOTzBGQlEzWkNMR0ZCUVU4N1FVRkJRU3hKUVVOVU8wRkJSVUVzVlVGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRE8wRkJRVUVzUlVGRGRrUTdPenRCUXk5T1R5eE5RVUZOTEd0Q1FVRnJRaXhEUVVGRExFMUJRV01zVjBGQk5rSTdRVUZEZWtVc1ZVRkJUVU1zVVVGQlR5eFpRVUZaTzBGQlJYcENMRlZCUVUwc1lVRkJZVUVzVFVGQlN5eG5Ra0ZCWjBJc1NVRkJTU3hKUVVGSk8wRkJRMmhFTEZWQlFVMHNZVUZCWVVFc1RVRkJTeXhSUVVGUkxGVkJRVlU3UVVGRE1VTXNTVUZCUVVFc1RVRkJTeXhoUVVGaExFMUJRVTBzV1VGQldTeFZRVUZWTzBGQlF6bERMRmRCUVU4c1MwRkJTeXhWUVVGVk8wRkJSWFJDTEZkQlFVODdRVUZCUVN4RlFVTlVPMEZCVFU4c1RVRkJUU3h6UWtGRFZDeERRVUZETEZOQlFXdERMRkZCUVdkQ0xFMUJRMnhFTEZsQlFYVkRPMEZCUTNSRExGRkJRVWtzVDBGQlR5eFhRVUZYTEZsQlFWa3NXVUZCV1N4TlFVRk5PMEZCUTJ4RUxGVkJRVWtzUzBGQlN5eEpRVUZKTEU5QlFVOHNSMEZCUnp0QlFVTnlRaXhqUVVGTkxFbEJRVWtzVFVGQlRTd3JRa0ZCSzBJN1FVRkJRU3hOUVVOcVJDeFBRVUZQTzBGQlEwd3NZVUZCU3l4SlFVRkpMRTlCUVU4N1FVRkJRU3hOUVVOc1FqdEJRVUZCTEVsQlEwWTdRVUZGUVN4WFFVRlBMRkZCUVZFc1QwRkJUeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEV0QlFVc3NTMEZCU3l4TlFVRk5PMEZCUTJoRUxGbEJRVTBzVDBGQlVTeFRRVUZWTEZOQlFWTXNUVUZCVFR0QlFVTjJReXhWUVVGSkxFOUJRVThzVlVGQlZTeFZRVUZWTzBGQlF6ZENMRFJDUVVGdlFpeFBRVUZyUXl4UFFVRlBMRXRCUVVzc1RVRkJUU3hQUVVGUE8wRkJRVUVzVFVGRGFrWXNWMEZCVnl4UFFVRlBMRlZCUVZVc1dVRkJXU3hQUVVGUExGVkJRVlVzVlVGQlZUdEJRVU5xUlN4blFrRkJVU3hOUVVGTkxFMUJRVTBzVTBGQlV5eERRVUZETzBGQlFVRXNUVUZEYUVNc1YwRkJWeXhQUVVGUExGVkJRVlVzVjBGQlZ6dEJRVU55UXl4blFrRkJVU3hOUVVGUExGRkJRVk1zVFVGQlRTeEhRVUZITzBGQlFVRXNUVUZEYmtNc1QwRkJUenRCUVVOTUxHTkJRVTBzU1VGQlNTeE5RVUZOTEcxRFFVRnRReXhQUVVGUExFdEJRVXNzUlVGQlJUdEJRVUZCTEUxQlEyNUZPMEZCUVVFc1NVRkRSaXhEUVVGRE8wRkJRVUVzUlVGRFNEdEJRVTFITEUxQlFVMHNhVUpCUVdsQ0xFTkJRVU1zV1VGQk1FSTdRVUZEZGtRc1ZVRkJUVUVzVVVGQlR5eFpRVUZaTzBGQlJYcENMRlZCUVUwc1VVRkJVVUVzVFVGQlN5eFZRVUZWTzBGQlF6ZENMRkZCUVVrN1FVRkRSaXhaUVVGTkxHVkJRV1ZCTEUxQlFVc3NWMEZCVnl4RFFVRkRPMEZCUTNSRExFMUJRVUZCTEUxQlFVc3NhVUpCUVdsQ0xHTkJRV01zWlVGQlpTeERRVUZETzBGQlEzQkVMRmxCUVUwc1dVRkJXVUVzVFVGQlN5eFBRVUZQTEdWQlFXVXNRMEZCUXp0QlFVTTVReXhaUVVGTkxITkNRVUZ6UWtFc1RVRkJTeXhSUVVGUkxHVkJRV1VzU1VGQlNTeERRVUZETzBGQlF6ZEVMRmxCUVUwc1pVRkJaU3h6UWtGQmMwSkJMRTFCUVVzc1lVRkJZU3h0UWtGQmJVSXNTVUZCU1R0QlFVTndSaXhaUVVGTkxFbEJRVWtzVFVGQlRTeEhRVUZITEU5QlFVOHNaMEpCUVdkQ0xGTkJRVk1zYjBKQlFXOUNMRmxCUVZrc1JVRkJSVHRCUVVGQkxFbEJRM1pHTEZWQlFVVTdRVUZEUVN4TlFVRkJRU3hOUVVGTExHRkJRV0VzUzBGQlN6dEJRVUZCTEVsQlEzcENPMEZCUVVFc1JVRkRSanM3TzBGRGRrUlBMRTFCUVUwc1owSkJRV2RDTEVOQlFVTXNXVUZCTmtRN1FVRkRla1lzVlVGQlRVTXNVVUZCVHl4WlFVRlpPMEZCUTNwQ0xGRkJRVWtzYlVKQlFXMUNPMEZCUTNaQ0xGVkJRVTBzVTBGQmJVSXNRMEZCUXp0QlFVVXhRaXhWUVVGTkxHRkJRVEJETEZkQlFWY3NRMEZCUXp0QlFVVTFSQ3hSUVVGSk8wRkJRMFlzVlVGQlNTeFRRVUZUTEhGQ1FVRnhRaXhSUVVGWE8wRkJRek5ETEcxQ1FVRlhMRzFDUVVGdFFqdEJRVUZCTEUxQlEyaERMRmRCUTBrc1QwRkJUeXhSUVVGUkxIRkNRVUZ4UWl4WlFVRlpMRU5CUVVNc1QwRkJUeXhWUVVGVkxGRkJRVkVzWjBKQlFXZENMRXRCUXpGR0xGRkJRVkVzYlVKQlFXMUNMRXRCUVVzc1VVRkJVU3h0UWtGQmJVSXNSMEZCUnp0QlFVTm9SU3hqUVVGTkxFbEJRVWtzVFVGQlRTeHhRMEZCY1VNc1VVRkJVU3huUWtGQlowSXNSVUZCUlR0QlFVRkJMRTFCUTJwR08wRkJSVUVzVlVGQlNTeFRRVUZUTEhOQ1FVRnpRaXhSUVVGWE8wRkJRelZETEcxQ1FVRlhMRzlDUVVGdlFqdEJRVUZCTEUxQlEycERMRmRCUVZjc1QwRkJUeXhSUVVGUkxITkNRVUZ6UWl4WlFVRlpMRU5CUVVNc1QwRkJUeXhWUVVGVkxGRkJRVkVzYVVKQlFXbENMRWRCUVVjN1FVRkRlRWNzWTBGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRExGRkJRVkVzYVVKQlFXbENMRVZCUVVVN1FVRkJRU3hOUVVOc1JqdEJRVVZCTEZWQlFVa3NVMEZCVXl4alFVRmpMRkZCUVZjN1FVRkRjRU1zYlVKQlFWY3NXVUZCV1R0QlFVRkJMRTFCUTNwQ08wRkJSVUVzVlVGQlNTeG5Ra0ZCWjBJN1FVRkRjRUlzVlVGQlNTeFRRVUZUTEZGQlFWRXNVVUZCVnp0QlFVTTVRaXgzUWtGQlowSXNaMEpCUVdkQ0xGRkJRVkVzUzBGQlN5eE5RVUZOTzBGQlFVRXNUVUZEY2tRN1FVRkZRU3g1UWtGQmJVSkJMRTFCUVVzN1FVRkJRU3hSUVVOd1FpeFhRVUZYTzBGQlFVRXNVVUZCYlVJc1YwRkJWenRCUVVGQkxGRkJRVzlDTEVOQlFVTXNRMEZCUXl4WFFVRlhPMEZCUVVFc1VVRkJXVHRCUVVGQkxFMUJRV0U3UVVGRGRrY3NWVUZCU1N4eFFrRkJjVUlzUjBGQlJ6dEJRVU14UWl4MVFrRkJaU3d5UWtGQk5FSTdRVUZCUVN4TlFVTTNRenRCUVVWQkxGVkJRVWtzVTBGQlV5eFZRVUZWTEZGQlFWYzdRVUZEYUVNc05FSkJRVzlDTEZGQlFWRXNUMEZCVHl4SlFVRkpMRzlDUVVGSkxGRkJRV2xETEVkQlFVY3NRMEZCUXl4TFFVRkxMRlZCUVZVN1FVRkROMFlzWjBKQlFVMHNaMEpCUVdkQ0xHZENRVUZuUWl4TFFVRkxMRTFCUVUwN1FVRkRha1FzWjBKQlFVMHNhMEpCUVd0Q0xHZENRVUZuUWl4UFFVRlBMRTFCUVUwN1FVRkZja1FzWTBGQlNVRXNUVUZCU3l4elFrRkJjMElzYTBKQlFXdENMR1ZCUVdVc1pVRkJaU3hOUVVGTkxFZEJRVWM3UVVGRGRFWXNNa0pCUVdVc2FVTkJRV2xETEVkQlFVY3NUVUZCVFN4TFFVRkxMRWRCUVVjN1FVRkJRU3hWUVVOdVJUdEJRVUZCTEZGQlEwWXNRMEZCUXp0QlFVRkJMRTFCUTBnN1FVRkZRU3hoUVVGUExFTkJRVU1zYTBKQlFXdENMRTFCUVUwN1FVRkJRU3hKUVVOc1F5eFRRVUZUTEVkQlFVYzdRVUZEVml4VlFVRkpMSEZDUVVGeFFpeEhRVUZITzBGQlF6RkNMRkZCUVVGQkxFMUJRVXNzYzBKQlFYTkNMR2RDUVVGblFqdEJRVUZCTEUxQlF6ZERPMEZCUTBFc1lVRkJUeXhSUVVGUkxGZEJRVk5CTEUxQlFVc3NUVUZCVFN4TFFVRkxMRU5CUVVNN1FVRkRla01zV1VGQlRUdEJRVUZCTEVsQlExSTdRVUZCUVN4RlFVTkdPenM3UVVONFJFRXNUVUZCVFN3eVFrRkJNa0lzUTBGQlF5d3lRa0ZCYlVRN1FVRkRia1lzV1VGQlVTeDNRa0ZCZDBJN1FVRkJRU3hOUVVNNVFpeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUTdRVUZEUlN4alFVRk5MRWxCUVVrc1RVRkJUU3g1UTBGQmVVTXNjMEpCUVhOQ0xFVkJRVVU3UVVGQlFTeEpRVU55Ump0QlFVRkJMRVZCUTBZN1FVRkZRU3hOUVVGTkxHMUNRVUZ0UWl4RFFVRkRMR3RDUVVGdFJEdEJRVU16UlN4WlFVRlJMR1ZCUVdVN1FVRkJRU3hOUVVOeVFpeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTzBGQlEwVXNZMEZCVFN4SlFVRkpMRTFCUVUwc0swSkJRU3RDTEdGQlFXRXNSVUZCUlR0QlFVRkJMRWxCUTJ4Rk8wRkJRVUVzUlVGRFJqdEJRVVZCTEUxQlFVMHNkVUpCUVhWQ0xFTkJRVU1zV1VGQmJVUTdRVUZETDBVc1VVRkJTU3hEUVVGRExGRkJRVkVzVDBGQlR6dEJRVU5zUWl4alFVRlJMRkZCUVZFc1EwRkJRenRCUVVGQkxFbEJRMjVDTzBGQlEwRXNVVUZCU1N4RFFVRkRMRkZCUVZFc1RVRkJUU3hUUVVGVE8wRkJRekZDTEdOQlFWRXNUVUZCVFN4VlFVRlZMRU5CUVVNN1FVRkJRU3hKUVVNelFqdEJRVU5CTEZWQlFVMHNWVUZCVlN4UlFVRlJMRTFCUVUwN1FVRkRPVUlzVVVGQlNTeERRVUZETEZGQlFWRXNPRUpCUVRoQ08wRkJSWHBETEdOQlFWRXNLMEpCUVN0Q08wRkJRVUVzU1VGRGVrTTdRVUZIUVN4UlFVRkpMRkZCUVZFc2MwSkJRMUlzVVVGQlVTeHRRa0ZCYlVJc1MwRkJTeXhUUVVGUExFOUJRVThzVDBGQlR5eFhRVUZYTEV0QlFVc3NSMEZCUnl4VlFVRlZMRkZCUVZFc1IwRkJSenRCUVVNdlJpeGpRVUZSTEcxQ1FVRnRRanRCUVVGQkxFbEJRemRDTzBGQlFVRXNSVUZEUmp0QlFVVkJMRTFCUVUwc2QwSkJRMFlzUTBGQlF5eHpRa0ZCT0VJc2IwSkJRemxDTEZkQlFUSkNPMEZCUXpGQ0xHVkJRVmNzVFVGQlRTeHZRa0ZCYjBJN1FVRkRia01zVlVGQlNTeFRRVUZUTEU5QlFVOHNUMEZCVHl4WFFVRlhMRXRCUVVzc1IwRkJSenRCUVVjNVF5eGpRVUZSTEZGQlFWRTdRVUZCUVN4UlFVTmtMRXRCUVVzN1FVRkRTQ3h0UWtGQlV6dEJRVU5VTEdOQlFVa3NUMEZCVHl4UFFVRlBMRlZCUVZVN1FVRkRNVUlzYTBKQlFVMHNaVUZCWlR0QlFVTnlRaXhuUWtGQlNTeGpRVUZqTEZsQlFWazdRVUZETlVJc2IwSkJRVTBzWjBKQlFXZENMR2RDUVVGblFpeGpRVUZqTEUxQlFVMDdRVUZETVVRc2IwSkJRVTBzYTBKQlFXdENMR2RDUVVGblFpeGhRVUZoTEZsQlFWa3NUVUZCVFR0QlFVTjJSU3hyUWtGQlNTeFpRVUZaTEVWQlFVVXNNRUpCUVRCQ0xITkNRVUZ6UWl4bFFVRmxMR1ZCUVdVc1RVRkROVVlzUjBGQlJ6dEJRVU5NTEN0Q1FVRmxMRzlFUVVGdlJDeGhRVUZoTEZWQlFWVXNSMEZCUnp0QlFVRkJMR05CUXk5R08wRkJRVUVzV1VGRFJqdEJRVU5CTEdkQ1FVRkpMR05CUVdNc1dVRkJXVHRCUVVNMVFpeHJRa0ZCU1N4aFFVRmhMR0ZCUVdFN1FVRkZPVUlzYTBKQlFVa3NUMEZCVHl4alFVRmpMRmxCUVZrc1EwRkJReXhQUVVGUExGVkJRVlVzVlVGQlZTeExRVUZMTEdGQlFXRXNSMEZCUnp0QlFVTndSaXcyUWtGQllUdEJRVUZCTEdOQlEyWTdRVUZEUVN4dlFrRkJUU3huUWtGQlowSXNaMEpCUVdkQ0xHTkJRV01zVFVGQlRUdEJRVU14UkN4dlFrRkJUU3hyUWtGQmEwSXNaMEpCUVdkQ0xGZEJRVmNzVTBGQlV5eEhRVUZITEUxQlFVMDdRVUZEY2tVc2EwSkJRVWtzV1VGQldTeEZRVUZGTERCQ1FVRXdRaXh6UWtGQmMwSXNaVUZCWlN4bFFVRmxMRTFCUXpWR0xFZEJRVWM3UVVGRFRDd3JRa0ZCWlN4dlJFRkJiMFFzWVVGQllTeFZRVUZWTEVkQlFVYzdRVUZCUVN4alFVTXZSanRCUVVGQkxGbEJRMFk3UVVGRFFTeG5Ra0ZCU1N4alFVRmpMR2xDUVVGcFFqdEJRVU5xUXl4dlFrRkJUU3huUWtGQlowSXNaMEpCUVdkQ0xHMUNRVUZ0UWl4TlFVRk5PMEZCUXk5RUxHOUNRVUZOTEd0Q1FVRnJRaXhuUWtGQlowSXNZVUZCWVN4cFFrRkJhVUlzVFVGQlRUdEJRVU0xUlN4clFrRkJTU3haUVVGWkxFVkJRVVVzTUVKQlFUQkNMSE5DUVVGelFpeGxRVUZsTEdWQlFXVXNUVUZETlVZc1IwRkJSenRCUVVOTU8wRkJRVUVzYTBKQlEwa3NlVVJCUVhsRUxHRkJRV0VzWlVGQlpUdEJRVUZCTEdkQ1FVRkhPMEZCUVVFc1kwRkRPVVk3UVVGQlFTeFpRVU5HTzBGQlFVRXNWVUZEUmp0QlFVTkJPMEZCUVVFc1VVRkRSaXhMUVVGTE8wRkJRMGdzYlVKQlFWTTdRVUZEVkN4alFVRkpMRTlCUVU4c1QwRkJUeXhWUVVGVk8wRkJRekZDTEd0Q1FVRk5MR2RDUVVGblFqdEJRVU4wUWl4blFrRkJTU3hsUVVGbExHbENRVUZwUWp0QlFVTnNReXhyUWtGQlNTeGpRVUZqTEc5Q1FVRnZRaXhWUVVGVkxHTkJRV01zYjBKQlFXOUNMRkZCUVZFN1FVRkRlRVlzYzBKQlFVMHNTVUZCU1N4TlFVRk5MRzlFUVVGdlJDeGpRVUZqTEdWQlFXVXNSVUZCUlR0QlFVRkJMR05CUTNKSE8wRkJRMEVzYjBKQlFVMHNaMEpCUVdkQ0xHZENRVUZuUWl4dFFrRkJiVUlzVFVGQlRUdEJRVU12UkN4dlFrRkJUU3hyUWtGQmEwSXNaMEpCUVdkQ0xHTkJRV01zYVVKQlFXbENMRTFCUVUwN1FVRkROMFVzYTBKQlFVa3NXVUZCV1N4RlFVRkZMREJDUVVFd1FpeHpRa0ZCYzBJc1pVRkJaU3hsUVVGbExFMUJRelZHTEVkQlFVYzdRVUZEVER0QlFVRkJMR3RDUVVOSkxIbEVRVUY1UkN4alFVRmpMR1ZCUVdVN1FVRkJRU3huUWtGQlJ6dEJRVUZCTEdOQlF5OUdPMEZCUVVFc1dVRkRSanRCUVVGQkxGVkJRMFk3UVVGRFFUdEJRVUZCTEZGQlEwWXNTMEZCU3p0QlFVRkJMRkZCUTB3c1MwRkJTenRCUVVOSU8wRkJRVUVzVVVGRFJqdEJRVU5GTEdkQ1FVRk5MRWxCUVVrc1RVRkJUU3h4UTBGQmNVTXNUVUZCVFN4RlFVRkZPMEZCUVVFc1RVRkRha1U3UVVGRlFTeFpRVUZOTEcxQ1FVRnRRaXhuUWtGQlowSXNVVUZCVVN4TlFVRk5PMEZCUTNaRUxGVkJRVWtzV1VGQldTeEZRVUZGTERSQ1FVRTBRaXh6UWtGQmMwSXNaMEpCUVdkQ0xFMUJRVTBzUjBGQlJ6dEJRVU16Uml4MVFrRkJaU3h2UTBGQmIwTXNUVUZCVFN4SFFVRkhPMEZCUVVFc1RVRkRPVVE3UVVGQlFTeEpRVU5HTzBGQlFVRXNSVUZEUmp0QlFVVkhMRTFCUVUwc2IwSkJRVzlDTEVOQlFVTXNXVUZCYTBVN1FVRkRiRWNzVlVGQlRVTXNVVUZCVHl4WlFVRlpPMEZCUTNwQ0xGRkJRVWtzZFVKQlFYVkNPMEZCUXpOQ0xGVkJRVTBzVTBGQmJVSXNRMEZCUXp0QlFVVXhRaXhWUVVGTkxHbENRVUZyUkN4WFFVRlhMRU5CUVVNN1FVRkRjRVVzZVVKQlFYRkNMR05CUVdNN1FVRkZia01zVVVGQlNUdEJRVU5HTEZsQlFVMHNlVUpCUVhsQ0xIbENRVUY1UWl4bFFVRmxMREJDUVVFd1FpeExRVUZMTzBGQlEzUkhMRmxCUVUwc1owSkJRV2RDTEdsQ1FVRnBRaXhsUVVGbExHbENRVUZwUWl4WlFVRlpPMEZCUTI1R0xGbEJRVTBzYTBKQlEwWXNUMEZCVHl4bFFVRmxMRlZCUVZVc1YwRkJWeXhuUWtGQlowSXNaVUZCWlN4UFFVRlBMRTFCUVUwc1NVRkJTVHRCUVVVdlJpeFpRVUZOTEcxQ1FVRnRRaXhsUVVGbExHOUNRVUZ2UWp0QlFVTTFSQ3hWUVVGSkxFTkJRVU1zVDBGQlR5eFZRVUZWTEdkQ1FVRm5RaXhMUVVGTExHMUNRVUZ0UWl4TFFVRkxMRzFDUVVGdFFpeEhRVUZITzBGQlEzWkdMR05CUVUwc1NVRkJTU3hOUVVGTkxIRkRRVUZ4UXl4blFrRkJaMElzUlVGQlJUdEJRVUZCTEUxQlEzcEZPMEZCUlVFc1dVRkJUU3h2UWtGQmIwSXNaVUZCWlN4eFFrRkJjVUk3UVVGRE9VUXNWVUZCU1N4RFFVRkRMRTlCUVU4c1ZVRkJWU3hwUWtGQmFVSXNTMEZCU3l4dlFrRkJiMElzUzBGQlN5eHZRa0ZCYjBJc1IwRkJSenRCUVVNeFJpeGpRVUZOTEVsQlFVa3NUVUZCVFN4eFEwRkJjVU1zYVVKQlFXbENMRVZCUVVVN1FVRkJRU3hOUVVNeFJUdEJRVVZCTEZsQlFVMHNLMEpCUVN0Q0xFOUJRVThzWlVGQlpTd3lRa0ZCTWtJc1YwRkRiRVlzWjBKQlFXZENMR1ZCUVdVc2QwSkJRWGRDTEUxQlFVMHNTVUZETjBRN1FVRkZTaXcyUWtGQmRVSkJMRTFCUVVzN1FVRkJRU3hSUVVONFFqdEJRVUZCTEZGQlFYZENMRU5CUVVNc1EwRkJReXhsUVVGbE8wRkJRVUVzVVVGQmJVSXNRMEZCUXl4RFFVRkRMR1ZCUVdVN1FVRkJRU3hSUVVGclFqdEJRVUZCTEZGQlF5OUdMRU5CUVVNc1EwRkJReXhsUVVGbE8wRkJRVUVzVVVGQmFVSTdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJhVUk3UVVGQlFTeFJRVUZyUWp0QlFVRkJMRkZCUTNoRk8wRkJRVUVzVFVGQk5FSTdRVUZEYUVNc1ZVRkJTU3g1UWtGQmVVSXNSMEZCUnp0QlFVTTVRaXgxUWtGQlpTd3JRa0ZCWjBNN1FVRkJRU3hOUVVOcVJEdEJRVVZCTEZWQlFVa3NaVUZCWlN4dlFrRkJiMEk3UVVGRGNrTXNPRUpCUVhOQ0xITkNRVUZ6UWl4bFFVRmxMRzlDUVVGdlFpeE5RVUZOTzBGQlFVRXNUVUZEZGtZN1FVRkZRU3hWUVVGSkxHVkJRV1VzZDBKQlFYZENPMEZCUTNwRExHMUNRVUZYTEVOQlFVTXNUVUZCVFN4TFFVRkxMRXRCUVVzc1QwRkJUeXhSUVVGUkxHVkJRV1VzYzBKQlFYTkNMRWRCUVVjN1FVRkRha1lzWTBGQlNTeFBRVUZQTEZOQlFWTXNWVUZCVlR0QlFVTTFRaXhyUWtGQlRTeEpRVUZKTEUxQlFVMHNhMFJCUVd0RUxFbEJRVWtzUlVGQlJUdEJRVUZCTEZWQlF6RkZPMEZCUTBFc1kwRkJTU3hQUVVGUExGVkJRVlVzV1VGQldTeERRVUZETEU5QlFVOHNWVUZCVlN4TFFVRkxMRXRCUVVzc1VVRkJVU3hIUVVGSE8wRkJRM1JGTEd0Q1FVRk5MRWxCUVVrc1RVRkJUU3hwUlVGQmFVVXNTMEZCU3l4RlFVRkZPMEZCUVVFc1ZVRkRNVVk3UVVGRFFTeG5Ra0ZCVFN4aFFVRmhMR2RDUVVGblFpeE5RVUZOTEUxQlFVMDdRVUZETDBNc1kwRkJTVUVzVFVGQlN5dzJRa0ZCTmtJc2MwSkJRWE5DTEZsQlFWa3NTMEZCU3l4TlFVRk5MRWRCUVVjN1FVRkRjRVlzTWtKQlFXVXNkME5CUVhkRExFbEJRVWtzVFVGQlRTeExRVUZMTEVkQlFVYzdRVUZCUVN4VlFVTXpSVHRCUVVGQkxGRkJRMFk3UVVGQlFTeE5RVU5HTzBGQlJVRXNWVUZCU1N4bFFVRmxMRlZCUVZVc1VVRkJWenRCUVVOMFF5dzBRa0ZCYjBJc1pVRkJaU3hQUVVGUExFbEJRVWtzYjBKQlFVa3NVVUZCYVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzVlVGQlZUdEJRVU53Unl4blFrRkJUU3huUWtGQlowSXNaMEpCUVdkQ0xFdEJRVXNzVFVGQlRUdEJRVU5xUkN4blFrRkJUU3hyUWtGQmEwSXNaMEpCUVdkQ0xFOUJRVThzVFVGQlRUdEJRVVZ5UkN4alFVRkpRU3hOUVVGTExEQkNRVUV3UWl4elFrRkJjMElzWlVGQlpTeGxRVUZsTEUxQlFVMHNSMEZCUnp0QlFVTTVSaXd5UWtGQlpTeHhRMEZCY1VNc1IwRkJSeXhOUVVGTkxFdEJRVXNzUjBGQlJ6dEJRVUZCTEZWQlEzWkZPMEZCUVVFc1VVRkRSaXhEUVVGRE8wRkJRVUVzVFVGRFNEdEJRVVZCTEdGQlFVOHNRMEZCUXl4elFrRkJjMElzVFVGQlRUdEJRVUZCTEVsQlEzUkRMRk5CUVZNc1IwRkJSenRCUVVOV0xGVkJRVWtzZVVKQlFYbENMRWRCUVVjN1FVRkRPVUlzVVVGQlFVRXNUVUZCU3l3d1FrRkJNRUlzYjBKQlFXOUNPMEZCUVVFc1RVRkRja1E3UVVGRFFTeGhRVUZQTEZGQlFWRXNWMEZCVTBFc1RVRkJTeXhOUVVGTkxFdEJRVXNzUTBGQlF6dEJRVU42UXl4WlFVRk5PMEZCUVVFc1NVRkRVanRCUVVGQkxFVkJRMFk3T3p0QlF6TkxUeXhOUVVGTkxEWkNRVUUyUWl4RFFVRkRMRk5CUVRKQ08wRkJRM0JGTEZsQlFWRXNUVUZCVFR0QlFVRkJMRTFCUTFvc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVWVU8wRkJRMFVzWTBGQlRTeEpRVUZKTEUxQlFVMHNNRUpCUVRCQ0xFbEJRVWtzUlVGQlJUdEJRVUZCTEVsQlEzQkVPMEZCUVVFc1JVRkRSanRCUVV0UExFMUJRVTBzTmtKQlFUWkNMRU5CUVVNc1kwRkJjVU03UVVGRE9VVXNXVUZCVVN4WFFVRlhPMEZCUVVFc1RVRkRha0lzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVVZVTzBGQlEwVXNZMEZCVFN4SlFVRkpMRTFCUVUwc01FSkJRVEJDTEZOQlFWTXNSVUZCUlR0QlFVRkJMRWxCUTNwRU8wRkJRVUVzUlVGRFJqdEJRVTFQTEUxQlFVMHNkVUpCUVhWQ0xFTkJRVU1zWVVGRGNFSXNRMEZCUXl4UlFVRlhMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NVVUZCVnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzVVVGQlZ5eFJRVUZYTEUxQlFWTXNSVUZCUlN4UlFVRlJPMEZCU3psSExFMUJRVTBzYjBOQlFXOURMRU5CUVVNc1UwRkZiMFE3UVVGRGFFY3NXVUZCVVN4TlFVRk5PMEZCUVVFc1RVRkRXaXhMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkR0QlFVTkZMR05CUVUwc1NVRkJTU3hOUVVGTkxIRkNRVUZ4UWl4SlFVRkpMRVZCUVVVN1FVRkJRU3hKUVVNdlF6dEJRVUZCTEVWQlEwWTdRVUZMUnl4TlFVRk5MSFZDUVVGMVFpeERRVUZETEdGQlFXdEZPMEZCUTNKSExGbEJRVkVzVlVGQlZUdEJRVUZCTEUxQlEyaENMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUTdRVUZEUlN4alFVRk5MRWxCUVVrc1RVRkJUU3c0UWtGQk9FSXNVVUZCVVN4RlFVRkZPMEZCUVVFc1NVRkROVVE3UVVGQlFTeEZRVU5HTzBGQlMwOHNUVUZCVFN3eVFrRkJNa0lzUTBGQlF5eFRRVUY1UkN4VFFVRlRMR0ZCUTNaSExGTkJRVk1zVjBGQlZ5eFRRVUZUTEZkQlFWY3NVMEZCVXl4VlFVRlZMRk5CUVZNc1lVRkJZU3hUUVVGVE8wRkJTM1pHTEUxQlFVMHNNa0pCUVRKQ0xFTkJRVU1zWVVGQk1FTTdRVUZEYWtZc1dVRkJVU3hWUVVGVk8wRkJRVUVzVFVGRGFFSXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZEdEJRVU5GTEdOQlFVMHNTVUZCU1N4TlFVRk5MRGhDUVVFNFFpeFJRVUZSTEVWQlFVVTdRVUZCUVN4SlFVTTFSRHRCUVVGQkxFVkJRMFk3T3p0QlF6Vk1RVHM3TzBGRFNFOHNUVUZCVFVNc1dVRkJWenM3TzBGRVdXcENMRTFCUVUwc1YwRkJWeXhQUVVGTkxGTkJRWE5GTzBGQlEyeEhMRkZCUVVrc1QwRkJUeXhUUVVGVExGVkJRVlU3UVVGRE5VSXNWVUZCU1N4UFFVRlBMRmxCUVZrc1pVRkJaU3hSUVVGUkxGbEJRVmtzVVVGQlVTeFRRVUZUTEUxQlFVMDdRVUZGTDBVc1dVRkJTVHRCUVVOR0xHbENRVUZQTEVsQlFVa3NWMEZCVnl4TlFVRk5ReXhWUVVGVExFbEJRVWtzUTBGQlF6dEJRVUZCTEZGQlF6VkRMRk5CUVZNc1IwRkJSenRCUVVOV0xHTkJRVWtzUlVGQlJTeFRRVUZUTEhsQ1FVRjVRanRCUVVWMFF5eHJRa0ZCVFN4VFFVRlpMR2xDUVVGcFFpeEpRVUZKTzBGQlEzWkRMR3RDUVVGTkxGTkJRWFZDTEVOQlFVTTdRVUZET1VJc05rSkJRV2xDTEZOQlFWTXNVVUZCVVR0QlFVTm9ReXh4UWtGQlR5eExRVUZMTEV0QlFVczdRVUZCUVN4WlFVTnVRanRCUVVOQkxHMUNRVUZQTEVsQlFVa3NWMEZCVnl4UFFVRlBMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRVUVzVlVGRE4wTTdRVUZEUVN4blFrRkJUVHRCUVVGQkxGRkJRMUk3UVVGQlFTeE5RVU5HTEU5QlFVODdRVUZGVEN4alFVRk5MRmRCUVZjc1RVRkJUU3hOUVVGTkxFbEJRVWs3UVVGRGFrTXNXVUZCU1N4RFFVRkRMRk5CUVZNc1NVRkJTVHRCUVVOb1FpeG5Ra0ZCVFN4SlFVRkpMRTFCUVUwc2MwTkJRWE5ETEVsQlFVa3NSVUZCUlR0QlFVRkJMRkZCUXpsRU8wRkJRMEVzWTBGQlRTeHpRa0ZCYzBJc1UwRkJVeXhSUVVGUkxFbEJRVWtzWjBKQlFXZENPMEZCUTJwRkxHTkJRVTBzVjBGQlZ5eHpRa0ZCYzBJc1UwRkJVeXh4UWtGQmNVSXNSVUZCUlN4SlFVRkpPMEZCUXpORkxGbEJRVWtzVjBGQlZ5eFpRVUZ6UWp0QlFVZHVReXhwUWtGQlR5eEpRVUZKTEZkQlFWY3NUVUZCVFN4VFFVRlRMRmxCUVZrc1EwRkJRenRCUVVGQkxGRkJRM0JFTEU5QlFVODdRVUZGVEN4alFVRkpMRU5CUVVNc1UwRkJVeXhOUVVGTk8wRkJRMnhDTEd0Q1FVRk5MRWxCUVVrc1RVRkJUU3h6UTBGQmMwTXNTVUZCU1N4eFFrRkJjVUk3UVVGQlFTeFZRVU5xUmp0QlFVTkJMR2RDUVVGTkxGTkJRVk1zVTBGQlV5eExRVUZMTEZWQlFWVTdRVUZGZGtNc1kwRkJTVHRCUVVOS0xHTkJRVWs3UVVGRlJpeHhRa0ZCVXl4SlFVRkpMRmxCUVZrc1VVRkJVVHRCUVVGQkxGVkJRMjVETEZOQlFWTXNSMEZCUnp0QlFVTldMR2RDUVVGSkxHRkJRV0VzV1VGQldUdEJRVVV6UWl4dlFrRkJUU3hSUVVGUkxFdEJRVXNzUzBGQlN5eFhRVUZYTEV0QlFVczdRVUZEZUVNc2RVSkJRVk1zU1VGQlNTeFpRVUZaTEU5QlFVOHNSVUZCUXl4VFFVRlRMRTlCUVU4c1UwRkJVeXhOUVVGTExFTkJRVU1zUlVGQlJUdEJRVUZCTEZsQlEzQkZMRTlCUVU4N1FVRkRUQ3h2UWtGQlRUdEJRVUZCTEZsQlExSTdRVUZCUVN4VlFVTkdPMEZCUlVFc1kwRkJTU3hUUVVGVE8wRkJSV0lzYVVKQlFVOHNUVUZCVFR0QlFVTllMR3RDUVVGTkxFVkJRVU1zVFVGQlRTeE5RVUZMTEVsQlFVa3NUVUZCVFN4UFFVRlBMRXRCUVVzN1FVRkRlRU1zWjBKQlFVa3NUVUZCVFR0QlFVTlNPMEZCUVVFc1dVRkRSanRCUVVOQkxHdENRVUZOTEZsQlFWa3NUVUZCVFR0QlFVTjRRaXhyUWtGQlRTeFJRVUZSTEVsQlFVa3NWMEZCVnl4UlFVRlJMRkZCUVZFc1UwRkJVenRCUVVOMFJDeHJRa0ZCVFN4SlFVRkpMRXRCUVVzN1FVRkRaaXh6UWtGQlZUdEJRVUZCTEZWQlExbzdRVUZEUVN4cFFrRkJUeXhKUVVGSkxGZEJRVmNzVVVGQlVTeEhRVUZITEZGQlFWRTdRVUZCUVN4UlFVTXpRenRCUVVGQkxFMUJRMFk3UVVGQlFTeEpRVVZHTEZkQlFWY3NaMEpCUVdkQ0xFMUJRVTA3UVVGREwwSXNZVUZCVHl4SlFVRkpMRmRCUVZjc1RVRkJUU3hMUVVGTExGbEJRVmtzUTBGQlF6dEJRVUZCTEVsQlEyaEVMRmRCUVZjc1owSkJRV2RDTEZsQlFWazdRVUZEY2tNc1lVRkJUenRCUVVGQkxFbEJRMVFzVDBGQlR6dEJRVU5NTEdGQlFVOHNTVUZCU1N4WFFVRlhMRWxCUVVrN1FVRkJRU3hKUVVNMVFqdEJRVUZCTEVWQlEwWTdPenRCUlhaQ1FTeE5RVUZOTEZWQlFWVXNRMEZCUXl4WlFVRnZRaXhwUWtGQkswSTdRVUZEYkVVc1ZVRkJUU3haUVVGWkxGbEJRVmtzUlVGQlJTeFRRVUZUTEZsQlFWa3NXVUZCV1R0QlFVTnFSU3hSUVVGSkxHTkJRV01zUjBGQlJ6dEJRVU51UWl4eFFrRkJaU3dyUWtGQlowTTdRVUZCUVN4SlFVTnFSRHRCUVVGQkxFVkJRMFk3UVVGTlR5eE5RVUZOTEdOQlFXTXNUMEZCVFN4UlFVRTBRanRCUVVVelJDeFpRVUZSTEVsQlFVa3NTMEZCU3l4WlFVRmhMSEZDUVVGeFFpeEpRVUZKTEZGQlFWRXNRMEZCUXp0QlFVRkJMRVZCUTJ4Rk8wRkJVVThzVFVGQlRTeFRRVUZUTEU5QlFVMHNTMEZCVlN4WFFVRnJRenRCUVVOMFJTeFJRVUZKTEU5QlFXMUVPMEZCUlhKRUxGVkJRVWtzVDBGQlR5eGpRVUZqTEdWQlFXVXNRMEZCUXl4VlFVRlZMRXRCUVVzN1FVRkRkRVFzWTBGQlRTeEpRVUZKTEUxQlFVMHNaMFJCUVdkRU8wRkJRVUVzVFVGRGJFVTdRVUZEUVN4WlFVRk5MRlZCUVZVc1RVRkJUU3hWUVVGVkxFbEJRVWtzWlVGQlpUdEJRVU51UkN4VlFVRkpMRU5CUVVNc1UwRkJVenRCUVVOYUxHTkJRVTBzU1VGQlNUdEJRVUZCTEZWQlEwNDdRVUZCUVN4UlFVRXdSenRCUVVGQkxFMUJRMmhJTzBGQlJVRXNWVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhOUVVGTk8wRkJRMnhDTEdOQlFVMHNTVUZCU1R0QlFVRkJMRlZCUTA0N1FVRkJRU3hSUVVGeFJ6dEJRVUZCTEUxQlF6TkhPMEZCUzBFc1dVRkJUU3hYUVVGWExFdEJRWFZDTzBGQlEzaERMRmxCUVUwc1UwRkJVeXhaUVVGWkxFZEJRVWNzUzBGQlN5eFBRVUZQTzBGQlFVRXNTVUZETlVNN1FVRkJRU3hGUVVOR08wRkJiME5CTEUxQlFVMHNhVUpCUVdsQ0xHOUNRVUZKTEVsQlFUWkNPMEZCVDNoRUxFMUJRVTBzTmtKQlFUWkNMRU5CUVVNc2EwSkJRVFJETzBGQlF6bEZMRlZCUVUxRExGRkJRVThzV1VGQldUdEJRVU42UWl4VlFVRk5MRkZCUVZGQkxFMUJRVXNzVlVGQlZUdEJRVU0zUWl4UlFVRkpPMEZCUTBZc1dVRkJUU3hoUVVGaFFTeE5RVUZMTEZkQlFWY3NRMEZCUXp0QlFVTndReXhaUVVGTkxGbEJRVmxCTEUxQlFVc3NkMEpCUVhkQ0xHVkJRV1VzV1VGQldTeGhRVUZoTEVOQlFVTTdRVUZEZUVZc1ZVRkJTU3hqUVVGakxFZEJRVWM3UVVGRGJrSXNkVUpCUVdVc2RVTkJRWGRETzBGQlFVRXNUVUZEZWtRN1FVRkRRU3hoUVVGUExFTkJRVU5CTEUxQlFVc3NUMEZCVHl4aFFVRmhMRU5CUVVNc1IwRkJSMEVzVFVGQlN5eFBRVUZQTEdGQlFXRXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkJRU3hKUVVOMFJTeFZRVUZGTzBGQlEwRXNUVUZCUVVFc1RVRkJTeXhoUVVGaExFdEJRVXM3UVVGQlFTeEpRVU42UWp0QlFVRkJMRVZCUTBZN1FVRlJUeXhOUVVGTkxIbENRVUY1UWl4RFFVRkRMRlZCUVhkRE8wRkJRemRGTEZWQlFVMUJMRkZCUVU4c1dVRkJXVHRCUVVONlFpeFZRVUZOTEd0Q1FVRnJRa0VzVFVGQlN5eFJRVUZSTEUxQlFVMHNWVUZCVlR0QlFVTnlSQ3hSUVVGSkxHOUNRVUZ2UWl4SFFVRkhPMEZCUTNwQ0xGbEJRVTBzU1VGQlNTeE5RVUZOTEN0RVFVRXJSQ3hOUVVGTkxGVkJRVlVzUjBGQlJ6dEJRVUZCTEVsQlEzQkhPMEZCUTBFc1NVRkJRVUVzVFVGQlN5eFBRVUZQTEVsQlFVa3NUMEZCVHl4bFFVRmxPMEZCUTNSRExGZEJRVThzUTBGQlF5eHBRa0ZCYVVJc1RVRkJUU3hWUVVGVk8wRkJRVUVzUlVGRE0wTTdRVUZWVHl4TlFVRk5MR2RDUVVGblFpeFBRVU42UWl4WFFVTkJMRmxCUVc5R08wRkJRM1JHTEZGQlFVa3NhVUpCUVhsQ08wRkJRemRDTEZWQlFVMUJMRkZCUVU4c1dVRkJXVHRCUVVWNlFpeFJRVUZKTEUxQlFVMHNVVUZCVVN4VFFVRlRMRWRCUVVjN1FVRkZOVUlzVDBGQlF5eHBRa0ZCYVVJc1pVRkJaU3hKUVVGSk8wRkJRVUVzU1VGRGRrTXNWMEZCVnl4VlFVRlZMRmRCUVZkQkxFMUJRVXNzVDBGQlR5eFJRVUZSTzBGQlJXeEVMRTlCUVVNc2FVSkJRV2xDTEdWQlFXVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1dVRkJXU3hWUVVGVkxGVkJRVlU3UVVGQlFTeEpRVU5zUml4UFFVRlBPMEZCUlV3c1QwRkJReXhwUWtGQmFVSXNaVUZCWlN4SlFVRkpMSFZDUVVGMVFpeFRRVUZUTzBGQlFVRXNTVUZEZGtVN1FVRkZRU3hSUVVGSkxHZENRVUZuUWp0QlFVTndRaXhSUVVGSkxIVkNRVUYxUWp0QlFVTXpRaXhSUVVGSkxHdENRVUZyUWp0QlFVTjBRaXhSUVVGSkxGTkJRVzFDTEVOQlFVTTdRVUZEZUVJc1ZVRkJUU3gzUWtGQmQwSXNRMEZCUXp0QlFVTXZRaXhWUVVGTkxIbENRVUY1UWl4RFFVRkRPMEZCUldoRExGRkJRVWs3UVVGRFJpeFBRVUZETEhOQ1FVRnpRaXhOUVVGTkxFbEJRVWtzYTBKQlFXdENMRTlCUVU4N1FVRkZNVVFzVlVGQlNTeFRRVUZUTEdkQ1FVRm5Ra0VzVFVGQlN5eHRRa0ZCYlVJN1FVRkRia1FzWTBGQlRTeHJRa0ZCYTBJc1EwRkJRenRCUVVONlFpeHRRa0ZCVnl4UlFVRlJMRkZCUVZFc1kwRkJZenRCUVVOMlF5eG5Ra0ZCVFN4UFFVRlBMRTlCUVU4c1UwRkJVeXhYUVVGWExFOUJRVThzUzBGQlN6dEJRVU53UkN3d1FrRkJaMElzUzBGQlN5eFRRVUZUTEU5QlFVOHNVMEZCVXl4WFFVRlhMRTlCUVU4c1MwRkJTeXhKUVVGSkxFVkJRVVVzUzBGQlN5eFZRVUZSTzBGQlEzUkdMRmxCUVVGQkxFMUJRVXNzYTBKQlFXMUNMRTFCUVUwc1NVRkJTVHRCUVVGQkxGVkJRM0JETEVOQlFVTXNRMEZCUXp0QlFVRkJMRkZCUTBvN1FVRkhRU3hqUVVGTkxGRkJRVkVzU1VGQlNTeGxRVUZsTzBGQlFVRXNUVUZEYmtNN1FVRkZRU3h6UWtGQlowSkJMRTFCUVVzc2EwSkJRV3RDTEdsQ1FVRnBRaXhwUWtGQmFVSXNiMEpCUVc5Q08wRkJRemRHTEZWQlFVa3NhMEpCUVd0Q0xFZEJRVWM3UVVGRGRrSXNkVUpCUVdVc2VVSkJRVEJDTzBGQlFVRXNUVUZETTBNN1FVRkZRU3haUVVGTkxFTkJRVU1zV1VGQldTeFhRVUZYTEVsQlFVa3NNa0pCUVRKQ0xHRkJRV0U3UVVGRk1VVXNXVUZCVFN4aFFVRmhMRU5CUVVNN1FVRkRjRUlzV1VGQlRTeGpRVUZqTEVOQlFVTTdRVUZEY2tJc1dVRkJUU3d5UWtGQmQwVXNRMEZCUXp0QlFVTXZSU3hsUVVGVExFbEJRVWtzUjBGQlJ5eEpRVUZKTEZsQlFWa3NTMEZCU3p0QlFVTnVReXhqUVVGTkxFOUJRVTlCTEUxQlFVc3NhVUpCUVdsQ0xHVkJRV1VzUTBGQlF6dEJRVU51UkN4WlFVRkpMRk5CUVZNc1IwRkJSenRCUVVOa0xIbENRVUZsTERCQ1FVRXlRanRCUVVGQkxGRkJRelZETzBGQlEwRXNPRUpCUVhOQ0xFdEJRVXNzU1VGQlNUdEJRVU12UWl4dFFrRkJWeXhMUVVGTFFTeE5RVUZMTEdGQlFXRXNTVUZCU1N4RFFVRkRPMEZCUVVFc1RVRkRla003UVVGRFFTeGxRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMR0ZCUVdFc1MwRkJTenRCUVVOd1F5eGpRVUZOTEU5QlFVOUJMRTFCUVVzc2EwSkJRV3RDTEdWQlFXVXNRMEZCUXp0QlFVTndSQ3haUVVGSkxGTkJRVk1zUjBGQlJ6dEJRVU5rTEhsQ1FVRmxMREpDUVVFMFFqdEJRVUZCTEZGQlF6ZERPMEZCUTBFc0swSkJRWFZDTEV0QlFVc3NTVUZCU1R0QlFVTm9ReXhqUVVGTkxHRkJRV0ZCTEUxQlFVc3NZVUZCWVN4SlFVRkpPMEZCUTNwRExHOUNRVUZaTEV0QlFVc3NWVUZCVlR0QlFVVXpRaXhaUVVGSkxFOUJRVFJDTzBGQlF6bENMR2RDUVVGTkxGZEJRVmNzVDBGQlR5eFRRVUZUTERSQ1FVRTBRaXhYUVVONlJDeFJRVUZSTERCQ1FVTlNMRk5CUVZNc01FSkJRVEJDTEZWQlFWVXNTMEZCU3p0QlFVTjBSQ3hqUVVGSkxHRkJRV0VzVTBGQlV5eGhRVUZoTEdkQ1FVRm5RaXhoUVVGaExHTkJRV003UVVGRGFFWXNhMEpCUVUwc1NVRkJTU3hOUVVGTkxEUkRRVUUwUXl4UlFVRlJMRWRCUVVjN1FVRkJRU3hWUVVONlJUdEJRVU5CTEcxRFFVRjVRaXhMUVVGTExGRkJRVkU3UVVGQlFTeFJRVU40UXp0QlFVRkJMRTFCUTBZN1FVRkhRU3hWUVVGSkxHVkJRVzlETzBGQlEzaERMRlZCUVVrc1QwRkJjMFk3UVVGRGVFWXNNRUpCUVd0Q1FTeE5RVUZMTEd0Q1FVRnJRaXhoUVVGaE8wRkJRM1JFTEZsQlFVa3NiMEpCUVc5Q0xFZEJRVWM3UVVGRGVrSXNlVUpCUVdVc01FSkJRVEpDTzBGQlFVRXNVVUZETlVNN1FVRkZRU3gxUWtGQlpUdEJRVUZCTEZWQlEySXNVVUZCVVR0QlFVRkJMRlZCUTFJN1FVRkJRU3hWUVVOQkxHbERRVUZwUXl4NVFrRkJlVUlzU1VGQlNTeFBRVUZMTEhsQ1FVRjVRaXhEUVVGRExFTkJRVU03UVVGQlFTeFJRVU5vUnp0QlFVRkJMRTFCUTBZN1FVRkZRU3h4UWtGQlpTeEpRVUZKTEdWQlFXVXNRMEZCUXl4bFFVRmxMSFZDUVVGMVFpeDNRa0ZCZDBJc1dVRkJXU3hEUVVGRE8wRkJRemxITEdGQlFVOHNRMEZCUXl4bFFVRmxMRmxCUVZrc1YwRkJWenRCUVVGQkxFbEJRMmhFTEZOQlFWTXNSMEZCUnp0QlFVTldMRFJDUVVGelFpeFJRVUZSTEZOQlFVOUJMRTFCUVVzc1UwRkJVeXhIUVVGSExFTkJRVU03UVVGRGRrUXNOa0pCUVhWQ0xGRkJRVkVzVTBGQlQwRXNUVUZCU3l4VFFVRlRMRWRCUVVjc1EwRkJRenRCUVVWNFJDeFZRVUZKTEc5Q1FVRnZRaXhIUVVGSE8wRkJRM3BDTEZGQlFVRkJMRTFCUVVzc2JVSkJRVzFDTEdWQlFXVTdRVUZCUVN4TlFVTjZRenRCUVVWQkxGVkJRVWtzYTBKQlFXdENMRWRCUVVjN1FVRkRka0lzVVVGQlFVRXNUVUZCU3l4dFFrRkJiVUlzWVVGQllUdEJRVUZCTEUxQlEzWkRPMEZCUTBFc1dVRkJUVHRCUVVGQkxFbEJRMUlzVlVGQlJUdEJRVU5CTEUxQlFVRkJMRTFCUVVzc1RVRkJUU3hsUVVGbE8wRkJRekZDTEZWQlFVa3NlVUpCUVhsQ0xFZEJRVWM3UVVGRE9VSXNVVUZCUVVFc1RVRkJTeXd3UWtGQk1FSXNiMEpCUVc5Q08wRkJRVUVzVFVGRGNrUTdRVUZEUVN4aFFVRlBMRkZCUVZFc1YwRkJVMEVzVFVGQlN5eE5RVUZOTEV0QlFVc3NRMEZCUXp0QlFVZDZReXhOUVVGQlFTeE5RVUZMTEhOQ1FVRnpRanRCUVVGQkxFbEJRemRDTzBGQlFVRXNSVUZEUmp0QlFVVlBMRTFCUVUwc2FVSkJRV2xDTEVOQlFVTXNZMEZCTkVJN1FVRkRla1FzVlVGQlRVRXNVVUZCVHl4WlFVRlpPMEZCUTNwQ0xGVkJRVTBzVlVGQlZTeGxRVUZsTEVsQlFVa3NVMEZCVXp0QlFVTTFReXhSUVVGSkxFTkJRVU1zVTBGQlV6dEJRVU5hTEZsQlFVMHNTVUZCU1N4TlFVRk5MQ3REUVVFclF5eFRRVUZUTEVWQlFVVTdRVUZCUVN4SlFVTTFSVHRCUVVOQkxGVkJRVTBzUTBGQlF5eGxRVUZsTEhWQ1FVRjFRaXgzUWtGQmQwSXNZMEZCWXl4SlFVRkpPMEZCUlhaR0xGRkJRVWtzWjBKQlFXZENPMEZCUTJ4Q0xFMUJRVUZCTEUxQlFVc3NiVUpCUVcxQ0xHVkJRV1VzVFVGQlRUdEJRVUZCTEVsQlF5OURPMEZCUlVFc1NVRkJRVUVzVFVGQlN5eDNRa0ZCZDBJc1UwRkJVenRCUVVWMFF5d3dRa0ZCYzBJc1VVRkJVU3hUUVVGUFFTeE5RVUZMTEZOQlFWTXNSMEZCUnl4RFFVRkRPMEZCUTNaRUxESkNRVUYxUWl4UlFVRlJMRk5CUVU5QkxFMUJRVXNzVTBGQlV5eEhRVUZITEVOQlFVTTdRVUZEZUVRc1NVRkJRVUVzVFVGQlN5eHRRa0ZCYlVJc1lVRkJZVHRCUVVOeVF5eHRRa0ZCWlN4UFFVRlBMRk5CUVZNN1FVRkJRU3hGUVVOcVF6dEJRVVZQTEUxQlFVMHNNa0pCUTFRc1EwRkJReXhSUVVFMlFpeGxRVUY1UWl4UlFVRnJRaXhYUVVGdFFpeFZRVU5vUmp0QlFVTk9MRkZCUVVrc1EwRkJReXhSUVVGUk8wRkJRMWdzYjBKQlFXTXNTMEZCU3l4RFFVRkRPMEZCUTNCQ08wRkJRVUVzU1VGRFJqdEJRVVZCTEZWQlFVMUJMRkZCUVU4c1dVRkJXVHRCUVVWNlFpeFZRVUZOTEZkQlFWY3NUMEZCVHl4RFFVRkRPMEZCUTNwQ0xGVkJRVTBzVDBGQlR5eFBRVUZQTEVOQlFVTTdRVUZEY2tJc1ZVRkJUU3hYUVVGWExFOUJRVThzUTBGQlF6dEJRVVY2UWl4UlFVRkpPMEZCUTBvc1VVRkJTVHRCUVVWS0xGRkJRVWtzWVVGQllTeFpRVUZaTEdGQlFXRXNZMEZCWXp0QlFVTjBSQ3haUVVGTkxFbEJRVWtzVFVGQlRTeDNRMEZCZDBNN1FVRkJRU3hKUVVNeFJEdEJRVVZCTEZGQlFVa3NZVUZCWVN4alFVRmpPMEZCUXpkQ0xGbEJRVTBzV1VGQldTeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTTFRaXhaUVVGTkxIRkNRVUZ4UWl4eFFrRkJjVUlzTWtKQlFUSkNMRkZCUVZFc1EwRkJRenRCUVVOd1JpeDFRa0ZCYVVJc1MwRkJTeXhQUVVGUExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVsQlFVa3NSMEZCUnl4RFFVRkRMRWxCUVVrN1FVRkRia1FzWjBKQlFWVkJMRTFCUVVzc2JVSkJRVzFDTEZkQlFWY3NUMEZCVHl4WFFVRlhMR05CUVdNN1FVRkJRU3hKUVVNdlJTeFBRVUZQTzBGQlEwd3NXVUZCVFN4UFFVRlBMRTlCUVU4c1EwRkJRenRCUVVWeVFpeFZRVUZKTEUxQlFVMHNVVUZCVVN4SlFVRkpMRWRCUVVjN1FVRkZka0lzZVVKQlFXbENMRWxCUVVrc1MwRkJTenRCUVVNeFFpeHJRa0ZCVlVFc1RVRkJTeXhSUVVGUkxHTkJRV003UVVGRGNrTXNaVUZCVHl4TFFVRkxMRTlCUVU4N1FVRkRia0lzV1VGQlNTeFpRVUZaTEZWQlFWVTdRVUZETVVJc2FVSkJRVk1zU1VGQlNTeEhRVUZITEVsQlFVa3NTMEZCU3l4UlFVRlJMRXRCUVVzN1FVRkRjRU1zWTBGQlNTeFBRVUZQTEV0QlFVc3NRMEZCUXl4TlFVRk5MRlZCUVZVN1FVRkRMMElzYTBKQlFVMHNTVUZCU1N4VlFVRlZMSGRDUVVGM1FpeERRVUZETEd0Q1FVRnJRanRCUVVGQkxGVkJRMnBGTzBGQlEwRXNWVUZCUVVFc1RVRkJTeXhSUVVGUkxGZEJRVmNzU1VGQlNTeG5Ra0ZCWjBJc1MwRkJTeXhEUVVGRExFZEJRVWNzVFVGQlRUdEJRVUZCTEZGQlF6ZEVPMEZCUVVFc1RVRkRSaXhQUVVGUE8wRkJRMHdzZVVKQlFXbENMRXRCUVVzN1FVRkRkRUlzYTBKQlFWVkJMRTFCUVVzc1VVRkJVU3hqUVVGak8wRkJRM0pETEdWQlFVOHNTMEZCU3l4UFFVRlBPMEZCUTI1Q0xGRkJRVUZCTEUxQlFVc3NUMEZCVHl4SlFVRkpMRWxCUVVrc1YwRkJWeXhMUVVGTExGRkJRVkVzUzBGQlN5eFpRVUZaTEdOQlFXTXNSMEZCUnl4UFFVRlBPMEZCUVVFc1RVRkRka1k3UVVGQlFTeEpRVU5HTzBGQlJVRXNWVUZCVFN4UlFVRlJRU3hOUVVGTExGVkJRVlU3UVVGRE4wSXNWVUZCVFN4aFFVRmhRU3hOUVVGTExGZEJRVmNzU1VGQlNTeExRVUZMTEUxQlFVMDdRVUZEYkVRc1VVRkJTVHRCUVVOR0xGVkJRVWtzVjBGQlZ5eGhRVUZoTzBGQlF6VkNMRmRCUVVzc1VVRkJVU3hQUVVGTFFTeE5RVUZMTEU5QlFVOHNWVUZCVlN4SlFVRkpMRU5CUVVNN1FVRkROME1zV1VGQlRVTXNWVUZCVTBRc1RVRkJTenRCUVVGQkxGRkJRMmhDTERKQ1FVRXlRaXhSUVVGUk8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFWTTdRVUZCUVN4UlFVRm5RanRCUVVGQkxGRkJRVmtzUzBGQlN6dEJRVUZCTEZGQlEyaEdMSGxDUVVGNVFpeFJRVUZSTzBGQlFVRXNUVUZCUXp0QlFVTjBReXhWUVVGSlF5eFpRVUZYTEVkQlFVYzdRVUZEYUVJc2RVSkJRV1VzYVVSQlFXbEVMRk5CUVZNc1YwRkJWeXhMUVVGTExFZEJRVWM3UVVGQlFTeE5RVU01Ump0QlFVTkJMRzlDUVVGakxFdEJRVXRCTEU5QlFVMDdRVUZCUVN4SlFVTXpRaXhWUVVGRk8wRkJRMEVzVFVGQlFVUXNUVUZCU3l4aFFVRmhMRXRCUVVzN1FVRkJRU3hKUVVONlFqdEJRVUZCTEVWQlEwWTdRVUZMUkN4TlFVRk5MRTFCUVUwc1QwRkRaaXhYUVVGdFFpeGpRVUYzUWl4alFVRm5ReXhsUVVNelJTeGxRVUV5UXl4WlFVRnZSVHRCUVVOcVNDeFZRVUZOUVN4UlFVRlBMRmxCUVZrN1FVRkRla0lzVlVGQlRTeFZRVUZWTEdWQlFXVXNTVUZCU1N4VFFVRlRPMEZCUXpWRExGRkJRVWtzUTBGQlF5eFRRVUZUTzBGQlExb3NXVUZCVFN4SlFVRkpMRTFCUVUwc05rTkJRVFpETEZOQlFWTXNSVUZCUlR0QlFVRkJMRWxCUXpGRk8wRkJRMEVzVlVGQlRTeERRVUZETEdWQlFXVXNkVUpCUVhWQ0xIZENRVUYzUWl4alFVRmpMRWxCUVVrN1FVRkZka1lzVlVGQlRTeGhRVUZoTEdGQlFXRTdRVUZEYUVNc1ZVRkJUU3hqUVVGakxHTkJRV003UVVGRmJFTXNVVUZCU1N4dFFrRkJiVUk3UVVGRGRrSXNVVUZCU1N4dFFrRkJOa0lzUTBGQlF6dEJRVVZzUXl4VlFVRk5MSEZDUVVFclFpeERRVUZETzBGQlEzUkRMRlZCUVUwc2MwSkJRV2RETEVOQlFVTTdRVUZEZGtNc1ZVRkJUU3h2UWtGQk9FSXNRMEZCUXp0QlFVVnlReXhWUVVGTkxHbENRVUZwUWtFc1RVRkJTeXhWUVVGVk8wRkJRM1JETEZWQlFVMHNiMEpCUVc5Q1FTeE5RVUZMTEZkQlFWY3NZVUZCWVN4RFFVRkRPMEZCUTNoRUxGVkJRVTBzYlVKQlFXMUNRU3hOUVVGTExGZEJRVmNzWVVGQllTeERRVUZETzBGQlEzWkVMRlZCUVUwc2NVSkJRWEZDUVN4TlFVRkxMRmRCUVZjc1kwRkJZeXhEUVVGRE8wRkJRekZFTEZWQlFVMHNiMEpCUVc5Q1FTeE5RVUZMTEZkQlFWY3NZMEZCWXl4RFFVRkRPMEZCUlhwRUxGRkJRVWs3UVVGRFJpeFBRVUZETEd0Q1FVRnJRaXhuUWtGQlowSXNTVUZCU1N4alFVRmpMRTlCUVU4N1FVRkhOVVFzWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4WlFVRlpMRXRCUVVzN1FVRkRia01zYVVOQlFYbENMR0ZCUVdFc1EwRkJReXhIUVVGSExHOUNRVUZ2UWl4dFFrRkJiVUlzVjBGQlZ5eGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVRkJMRTFCUXpkSE8wRkJSMEVzWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4aFFVRmhMRXRCUVVzN1FVRkRjRU03UVVGQlFTeFZRVU5KTEdOQlFXTXNRMEZCUXp0QlFVRkJMRlZCUVVjN1FVRkJRU3hWUVVGeFFqdEJRVUZCTEZWQlFXMUNPMEZCUVVFc1ZVRkJWeXhoUVVGaExHTkJRV01zUTBGQlF6dEJRVUZCTEZGQlFVTTdRVUZCUVN4TlFVTjRSenRCUVVWQkxGVkJRVWtzYlVKQlFXMUNMRzlDUVVGdlFqdEJRVU16UXl4VlFVRkpMR3RDUVVGclFpeHRRa0ZCYlVJN1FVRkRla01zVlVGQlNTeHZRa0ZCYjBJc2NVSkJRWEZDTzBGQlF6ZERMRlZCUVVrc2JVSkJRVzFDTEc5Q1FVRnZRanRCUVVNelF5eGxRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMRmxCUVZrc1MwRkJTenRCUVVOdVF5eFJRVUZCUVN4TlFVRkxMRkZCUVZFc2EwSkJRV3RDTEVsQlFVa3NiVUpCUVcxQ0xFTkJRVU03UVVGRGRrUXNVVUZCUVVFc1RVRkJTeXhSUVVGUkxHbENRVUZwUWl4SlFVRkpMSE5DUVVGelFpeGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVRkJMRTFCUTNwRk8wRkJRMEVzWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4aFFVRmhMRXRCUVVzN1FVRkRjRU1zVVVGQlFVRXNUVUZCU3l4UlFVRlJMRzFDUVVGdFFpeEpRVUZKTEc5Q1FVRnZRaXhEUVVGRE8wRkJRM3BFTEZGQlFVRkJMRTFCUVVzc1VVRkJVU3hyUWtGQmEwSXNTVUZCU1N4MVFrRkJkVUlzWTBGQll5eERRVUZETEVOQlFVTTdRVUZCUVN4TlFVTTFSVHRCUVVWQkxGVkJRVWtzVDBGQk9FTTdRVUZEYUVRc1kwRkJUU3hGUVVGRExGRkJRVkVzTUVKQlFUQkNMR2REUVVFclFpeEpRVUZKTzBGQlJUVkZMRmxCUVVrc2MwSkJRWE5DTEZkQlFWY3NXVUZCV1R0QlFVTXZReXhuUWtGQlRTeEpRVUZKTEUxQlFVMHNNa0pCUTFvc1ZVRkJWU3cwUkVGQk5FUXNjMEpCUVhOQ0xFMUJRVTBzU1VGQlNUdEJRVUZCTEZGQlF6VkhPMEZCUjBFc2FVSkJRVk1zU1VGQlNTeEhRVUZITEVsQlFVa3NXVUZCV1N4TFFVRkxPMEZCUTI1RExHZENRVUZOTEZGQlFWRXNZVUZCWVN4RFFVRkRPMEZCUXpWQ0xHZENRVUZOUlN4aFFVRlpMRTFCUVUxR0xFMUJRVXNzWTBGQll5eFJRVUZSTEhOQ1FVRnpRaXhMUVVGTExFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRCUVVOMFJ5eGpRVUZKUlN4bFFVRmpMRWRCUVVjN1FVRkRia0lzTWtKQlFXVXNiMEpCUVc5Q0xFTkJRVU1zYVVKQlFXbENMRk5CUVZNc1IwRkJSenRCUVVGQkxGVkJRMjVGTzBGQlFVRXNVVUZEUmp0QlFVZEJMR2xDUVVGVExFbEJRVWtzUjBGQlJ5eEpRVUZKTEdGQlFXRXNTMEZCU3p0QlFVTndReXhuUWtGQlRTeFJRVUZSTEdOQlFXTXNRMEZCUXp0QlFVTTNRaXhuUWtGQlRTeFhRVUZYTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkZja01zWTBGQlNTeFZRVUZWTzBGQlJWb3NhMEpCUVUxQkxHRkJRVmxHTEUxQlFVc3NaVUZCWlN4UlFVRlJMSFZDUVVGMVFpeExRVUZMTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU1zUjBGQlJ5eERRVUZETzBGQlEzUkhMR2RDUVVGSlJTeGxRVUZqTEVkQlFVYzdRVUZEYmtJc05rSkJRV1VzYlVOQlFXMURMRU5CUVVNc2FVSkJRV2xDTEZOQlFWTXNSMEZCUnp0QlFVRkJMRmxCUTJ4R08wRkJRVUVzVlVGRFJpeFBRVUZQTzBGQlJVd3NhMEpCUVUxQkxHRkJRMFpHTEUxQlFVc3NaVUZCWlN4UlFVRlJMSFZDUVVGMVFpeExRVUZMTEVkQlFVY3NSMEZCUnl4blEwRkJaME1zUzBGQlN5eERRVUZETzBGQlEzaEhMR2RDUVVGSlJTeGxRVUZqTEVkQlFVYzdRVUZEYmtJc05rSkJRV1VzY1VKQlFYRkNMRU5CUVVNc1VVRkJVU3g1UWtGQmVVSXNRMEZCUXl4RFFVRkRMR2RDUVVGblFpeFRRVUZUTEVkQlFVYzdRVUZCUVN4WlFVTjBSenRCUVVGQkxGVkJRMFk3UVVGQlFTeFJRVU5HTzBGQlFVRXNUVUZEUmp0QlFVVkJMRlZCUVVrN1FVRkZTaXhWUVVGSkxFOUJRVGhETzBGQlEyaEVMRzlDUVVGWkxFMUJRVTFHTEUxQlFVczdRVUZCUVN4VlFVTnVRanRCUVVGQkxGVkJRV1VzWlVGQlpUdEJRVUZCTEZWQlFWRTdRVUZCUVN4VlFVRmhPMEZCUVVFc1ZVRkJiMEk3UVVGQlFTeFJRVUZuUWp0QlFVRkJMRTFCUXpkR0xFOUJRVTg3UVVGRFRDeHZRa0ZCV1N4TlFVRk5RU3hOUVVGTE8wRkJRVUVzVlVGRGJrSTdRVUZCUVN4VlFVRmxPMEZCUVVFc1ZVRkJhMEk3UVVGQlFTeFZRVUZ0UWp0QlFVRkJMRlZCUVZrN1FVRkJRU3hWUVVGdFFqdEJRVUZCTEZWQlEyNUdPMEZCUVVFc1ZVRkJiMEk3UVVGQlFTeFJRVUZuUWp0QlFVRkJMRTFCUXpGRE8wRkJSVUVzVlVGQlNTeGpRVUZqTEVkQlFVYzdRVUZEYmtJc2RVSkJRV1VzTUVKQlFUQkNPMEZCUVVFc1RVRkRNME03UVVGRlFTeFpRVUZOTEZOQlFUSkNMRU5CUVVNN1FVRkZiRU1zWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4aFFVRmhMRXRCUVVzN1FVRkRjRU1zWTBGQlRTeFRRVUZUUVN4TlFVRkxMRkZCUVZFc2NVSkJRWEZDTEVsQlFVa3NRMEZCUXp0QlFVTjBSQ3haUVVGSkxGZEJRVmNzYjBKQlFXOUNMRU5CUVVNc1IwRkJSenRCUVVWeVF5eHBRa0ZCVHl4TFFVRkxMR05CUVdNc1EwRkJReXhEUVVGRk8wRkJRemRDTzBGQlFVRXNVVUZEUmp0QlFVVkJMR05CUVUwc01rSkJRVEpDUVN4TlFVRkxMRlZCUVZVN1FVRkZhRVFzWTBGQlRTeHRRa0ZCYlVKQkxFMUJRVXNzVjBGQlZ5eEpRVUZKTEVOQlFVTTdRVUZGT1VNc1dVRkJTU3h0UWtGQmJVSTdRVUZEZGtJc1dVRkJTU3hOUVVFMlFpeGhRVUZoTzBGQlF6bERMRmxCUVVrN1FVRkRSaXhuUWtGQlRVVXNZVUZCV1VZc1RVRkJTenRCUVVGQkxGbEJRMjVDTzBGQlFVRXNXVUZCVVR0QlFVRkJMRmxCUVd0Q0xHMUNRVUZ0UWp0QlFVRkJMRmxCUVVjc2JVSkJRVzFDTzBGQlFVRXNXVUZCUnl4dFFrRkJiVUk3UVVGQlFTeFZRVUZGTzBGQlF5OUdMR05CUVVsRkxHVkJRV01zUjBGQlJ6dEJRVU51UWl3eVFrRkJaU3cwUTBGQk5FTXNRMEZCUXl4SFFVRkhPMEZCUVVFc1ZVRkRha1U3UVVGRFFTeGpRVUZKTEd0Q1FVRnJRaXh0UWtGQmJVSTdRVUZEZWtNc1owSkJRVTBzVjBGQlYwWXNUVUZCU3l4UlFVRlJMR2xDUVVGcFFqdEJRVU12UXl4MVFrRkJZVUVzVFVGQlN5eFJRVUZSTEdsQ1FVRnBRanRCUVVNelF5eG5Ra0ZCVFN4aFFVRmhRU3hOUVVGTExGRkJRVkVzYVVKQlFXbENPMEZCUTJwRUxHZENRVUZOTEdGQlFXRkJMRTFCUVVzc1VVRkJVU3hwUWtGQmFVSTdRVUZEYWtRc1owSkJRVTBzVDBGQlR5eERRVUZETzBGQlEyUXNiVUpCUVZOSExFdEJRVWtzUjBGQlIwRXNTMEZCU1N4WlFVRlpRU3hOUVVGTE8wRkJRMjVETEdsQ1FVRkxMRXRCUVV0SUxFMUJRVXNzVVVGQlVTeGhRVUZoTEVsQlFVbEhMRVZCUVVNc1EwRkJRenRCUVVGQkxGVkJRelZETzBGQlEwRXNWVUZCUVVnc1RVRkJTeXhUUVVGVExGVkJRVlU3UVVGRmVFSXNaMEpCUVUwc1QwRkJUeXhMUVVGTExFOUJRVThzUTBGQlF5eEhRVUZITEUxQlFVMHNTVUZCU1N4SFFVRkhMRU5CUVVNN1FVRkRNME1zYVVKQlFVOHNNa0pCUVRKQ0xGRkJRVkU3UVVGRk1VTXNaMEpCUVUwc2IwSkJRVzlDTEdkQ1FVRm5RaXg1UWtGQmVVSXNZMEZCWXl4RFFVRkRMRU5CUVVNN1FVRkZia1lzWTBGQlNTeFRRVUZUTEZWQlFWVTdRVUZEY2tJc1owSkJRVWtzYzBKQlFYTkNMR05CUVdNN1FVRkRkRU1zYjBKQlFVMHNTVUZCU1N4TlFVRk5MSGREUVVGM1F6dEJRVUZCTEZsQlF6RkVPMEZCUTBFc2EwSkJRVTBzWVVGQmRVSXNRMEZCUXp0QlFVTTVRaXhuUWtGQlNTeFpRVUZaTEdGQlFXRTdRVUZETjBJc2NVSkJRVk5ITEV0QlFVa3NSMEZCUjBFc1MwRkJTU3hOUVVGTlFTeE5RVUZMTzBGQlF6ZENMRzlDUVVGTkxGTkJRVk5JTEUxQlFVc3NVVUZCVVN4WFFVRlhPMEZCUTNaRExHOUNRVUZOTEdsQ1FVRnBRa2NzVDBGQlRTeFBRVUZQTEVsQlFVa3NVMEZCV1Vnc1RVRkJTeXhSUVVGUkxGTkJRVk1zU1VGQlNUdEJRVU01UlN4NVFrRkJWeXhMUVVGTFFTeE5RVUZMTEdGQlFXRXNVVUZCVVN4alFVRmpMRU5CUVVNN1FVRkJRU3haUVVNelJEdEJRVU5CTEcxQ1FVRlBMRXRCUVVzc1EwRkJReXhOUVVGTkxFMUJRVTBzV1VGQldTeExRVUZMTEVOQlFVTTdRVUZCUVN4VlFVTTNReXhQUVVGUE8wRkJSMHdzWjBKQlFVa3NjMEpCUVhOQ0xHZENRVUZuUWl4UFFVRlBMRWRCUVVjN1FVRkRiRVFzYjBKQlFVMHNXVUZCV1VFc1RVRkJTeXhqUVVGakxGVkJRVlU3UVVGREwwTXNiMEpCUVUwc1kwRkJZeXh4UWtGQmNVSXNVVUZCVVR0QlFVTnFSQ3hyUWtGQlNTeG5Ra0ZCWjBJc1ZVRkJZU3hEUVVGRExIbENRVUY1UWl4SlFVRkpMRWRCUVVjN1FVRkRhRVVzYzBKQlFVMHNTVUZCU1N4TlFVRk5MREJDUVVFd1FpeEpRVUZKTEVWQlFVVTdRVUZCUVN4alFVTnNSRHRCUVVkQkxHbERRVUZ0UWp0QlFVVnVRaXh4UWtGQlR5eExRVUZMTzBGQlFVRXNaMEpCUTFZN1FVRkJRU3huUWtGQlRUdEJRVUZCTEdkQ1FVRk5PMEZCUVVFc2EwSkJRMVk3UVVGQlFTeHJRa0ZEUVN4VlFVRlZRU3hOUVVGTExIRkNRVUZ4UWl4WFFVRlhMRTlCUVU4c1lVRkJZU3hKUVVGSk8wRkJRVUVzYTBKQlEzWkZMRk5CUVZNc1RVRkJUVHRCUVVOaUxHOUNRVUZCUVN4TlFVRkxMR3RDUVVGclFpeE5RVUZOTzBGQlFVRXNhMEpCUXk5Q08wRkJRVUVzWjBKQlEwWTdRVUZCUVN4blFrRkRRVHRCUVVGQkxHTkJRMFlzUTBGQlF6dEJRVUZCTEZsQlEwZ3NUMEZCVHp0QlFVTk1MRzlDUVVGTkxIZENRVUYzUWl4clEwRkJhME1zU1VGQlNUdEJRVU53UlN4dlFrRkJUU3hQUVVGUExFbEJRVWtzYzBKQlFYTkNMRWxCUVVrN1FVRkRNME1zYTBKQlFVa3NWMEZCVnl4TFFVRkxMRkZCUVZFc1MwRkJTeXhaUVVGWkxFdEJRVXNzVlVGQlZTeEZRVU4yUkN4SlFVRkpRU3hOUVVGTExFOUJRVThzVTBGQlV5eFpRVUZaTEdGQlFXRXNTMEZCU3l4VlFVRlZMRU5CUVVNN1FVRkRka1VzY1VKQlFVOHNTMEZCU3l4RFFVRkRMRTFCUVUwc1RVRkJUU3hOUVVGTkxFdEJRVXNzUTBGQlF6dEJRVUZCTEZsQlEzWkRPMEZCUVVFc1ZVRkRSanRCUVVGQkxGRkJRMFlzVlVGQlJUdEJRVU5CTEZWQlFVRkJMRTFCUVVzc1lVRkJZU3gzUWtGQmQwSTdRVUZETVVNc1kwRkJTU3hUUVVGVExGbEJRVmtzV1VGQldUdEJRVU51UXl4WlFVRkJRU3hOUVVGTExFMUJRVTBzVlVGQlZUdEJRVUZCTEZWQlEzWkNPMEZCUTBFc1kwRkJTU3hEUVVGRExHdENRVUZyUWp0QlFVTnlRaXhaUVVGQlFTeE5RVUZMTEd0Q1FVRnJRaXhOUVVGTk8wRkJRVUVzVlVGREwwSTdRVUZCUVN4UlFVTkdPMEZCUVVFc1RVRkRSanRCUVVWQkxGVkJRVWtzWjBKQlFXZENPMEZCUTJ4Q0xGRkJRVUZCTEUxQlFVc3NjMEpCUVhOQ0xHVkJRV1VzVFVGQlRUdEJRVUZCTEUxQlEyeEVPMEZCUlVFc1lVRkJUenRCUVVGQkxFbEJRMVFzVlVGQlJUdEJRVU5CTEUxQlFVRkJMRTFCUVVzc1lVRkJZU3hqUVVGak8wRkJSV2hETEhsQ1FVRnRRaXhSUVVGUkxFOUJRVXRCTEUxQlFVc3NhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dEJRVU42UkN3d1FrRkJiMElzVVVGQlVTeFBRVUZMUVN4TlFVRkxMR3RDUVVGclFpeERRVUZETEVOQlFVTTdRVUZETVVRc2QwSkJRV3RDTEZGQlFWRXNUMEZCUzBFc1RVRkJTeXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVVUxUXl4VlFVRkpMSEZDUVVGeFFpeEhRVUZITzBGQlF6RkNMRkZCUVVGQkxFMUJRVXNzYzBKQlFYTkNMR2RDUVVGblFqdEJRVUZCTEUxQlF6ZERPMEZCUTBFc2RVSkJRV2xDTEZGQlFWRXNUMEZCUzBFc1RVRkJTeXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVUZCTEVsQlF6ZERPMEZCUVVFc1JVRkRSanRCUVV0UExFMUJRVTBzWlVGQlpTeERRVUZETEdOQlFUUkNPMEZCUTNaRUxGVkJRVTFCTEZGQlFVOHNXVUZCV1R0QlFVTjZRaXhWUVVGTkxGVkJRVlVzWlVGQlpTeEpRVUZKTEZOQlFWTTdRVUZETlVNc1VVRkJTU3hEUVVGRExGTkJRVk03UVVGRFdpeFpRVUZOTEVsQlFVa3NUVUZCVFN4dlFrRkJiMEk3UVVGQlFTeEpRVU4wUXp0QlFVTkJMRlZCUVUwc1owSkJRV2RDTEZGQlFWRXNRMEZCUXp0QlFVY3ZRaXhWUVVGTkxHdENRVUZyUWtFc1RVRkJTeXhwUWtGQmFVSXNZVUZCWVR0QlFVTXpSQ3hSUVVGSkxHOUNRVUZ2UWl4SFFVRkhPMEZCUTNwQ0xIRkNRVUZsTEdsRFFVRnJRenRCUVVGQkxFbEJRMjVFTzBGQlEwRXNTVUZCUVVFc1RVRkJTeXhUUVVGVExHVkJRV1U3UVVGQlFTeEZRVU12UWp0QlFVVlBMRTFCUVUwc05rSkJRVFpDTEVOQlFVTXNXVUZCYzBVN1FVRkRMMGNzVlVGQlRTeFZRVUUyUWl4RFFVRkRPMEZCUTNCRExHVkJRVmNzVlVGQlZTeFRRVUZUTzBGQlF6VkNMRmxCUVUwc1QwRkJUeXhQUVVGUExFTkJRVU03UVVGRGNrSXNWVUZCU1N4RFFVRkRMRTFCUVUwc1VVRkJVU3hKUVVGSkxFdEJRVXNzV1VGQldTeE5RVUZOTzBGQlF6VkRMR2RDUVVGUkxFdEJRVXNzUzBGQlN5eE5RVUZOTzBGQlFVRXNUVUZETVVJN1FVRkJRU3hKUVVOR08wRkJRMEVzVjBGQlR6dEJRVUZCTEVWQlExUTdPenRCUXpOc1FrRXNUMEZCU3l4WlFVRlpMRU5CUVVNc1QwRkJNa003UVVGRE0wUXNWVUZCVFN4RlFVRkRMRTFCUVUwc1NVRkJTeXhSUVVGUExFbEJRVWtzUjBGQlJ6dEJRVU5vUXl4UlFVRkpPMEZCUTBZc1kwRkJVU3hOUVVGTk8wRkJRVUVzVVVGRFdpeExRVUZMTzBGQlEwZ3NaME5CUVhOQ0xGRkJRVk1zU1VGQlNTeEZRVU01UWp0QlFVRkJMRmxCUTBjc1RVRkJUVHRCUVVOS0xEQkNRVUZaTEU5QlFWRXNSVUZCUlR0QlFVRkJMR2RDUVVOc1FpeE5RVUZOTzBGQlEwb3NPRUpCUVZrc1JVRkJReXhMUVVGSkxFTkJRVU03UVVGQlFTeG5Ra0ZEY0VJN1FVRkJRU3huUWtGRFFTeFRRVUZQTzBGQlEwd3NPRUpCUVZrc1JVRkJReXhOUVVGTkxFbEJRVWNzUTBGQlF6dEJRVUZCTEdkQ1FVTjZRanRCUVVGQkxHTkJRVU03UVVGQlFTeFpRVU5RTzBGQlFVRXNXVUZEUVN4VFFVRlBPMEZCUTB3c01FSkJRVmtzUlVGQlF5eE5RVUZOTEVsQlFVY3NRMEZCUXp0QlFVRkJMRmxCUTNwQ08wRkJRVUVzVlVGQlF6dEJRVU5VTzBGQlFVRXNVVUZEUml4TFFVRkxMRmRCUVZjN1FVRkRaQ3huUWtGQlRTeEZRVUZETEZGQlFWRXNTVUZCUnl4SlFVRkpPMEZCUTNSQ0xHbENRVUZQTEV0QlFVc3NUVUZCVFN4RlFVTmlPMEZCUVVFc1dVRkRSeXhOUVVGTk8wRkJRMG9zTUVKQlFWa3NSVUZCUXl4TFFVRkpMRU5CUVVNN1FVRkJRU3haUVVOd1FqdEJRVUZCTEZsQlEwRXNVMEZCVHp0QlFVTk1MREJDUVVGWkxFVkJRVU1zVFVGQlRTeEpRVUZITEVOQlFVTTdRVUZCUVN4WlFVTjZRanRCUVVGQkxGVkJRVU03UVVGRFZEdEJRVUZCTEZGQlEwWTdRVUZCUVN4UlFVTkJMRXRCUVVzc1lVRkJZVHRCUVVOb1FpeG5Ra0ZCVFN4RlFVRkRMRTlCUVUwc1NVRkJTVHRCUVVOcVFpeG5Ra0ZCVFN4aFFVRmhMSFZDUVVGMVFpeE5RVUZOTzBGQlEyaEVMSE5DUVVGWkxFVkJRVU1zVFVGQlRTeExRVUZMTEZkQlFWVXNRMEZCYlVJN1FVRkRja1E3UVVGQlFTeFJRVU5HTzBGQlFVRXNVVUZEUVN4TFFVRkxMRlZCUVZVN1FVRkRZaXhuUWtGQlRTeEZRVUZETEU5QlFVOHNVVUZCVHl4SlFVRkpPMEZCUTNwQ0xIZENRVUZqTEU5QlFVOHNUMEZCVHl4RlFVTjJRanRCUVVGQkxGbEJRMGNzY1VKQlFXMUNPMEZCUTJwQ0xEQkNRVUZaTEVWQlFVTXNUVUZCVFN4TFFVRkxMR2RDUVVGbExFTkJRVzFDTzBGQlFVRXNXVUZETlVRN1FVRkJRU3haUVVOQkxGTkJRVTg3UVVGRFRDd3dRa0ZCV1N4RlFVRkRMRTFCUVUwc1NVRkJSeXhEUVVGRE8wRkJRVUVzV1VGRGVrSTdRVUZCUVN4VlFVRkRPMEZCUTFRN1FVRkJRU3hSUVVOR08wRkJRVUVzVVVGRFFTeExRVUZMTzBGQlEwZ3NlVUpCUVdVc1QwRkJVVHRCUVVOMlFpeHpRa0ZCV1N4RlFVRkRMRXRCUVVrc1EwRkJRenRCUVVOc1FqdEJRVUZCTEZGQlEwWXNTMEZCU3l4UFFVRlBPMEZCUTFZc1owSkJRVTBzUlVGQlF5eFhRVUZYTEdOQlFXTXNVVUZCVVN4bFFVRmxMRkZCUVU4c1NVRkJTVHRCUVVOc1JTeGpRVUZKTEZkQlFWY3NZMEZCWXl4UlFVRlJMR1ZCUVdVc1NVRkJTU3hOUVVGTkxHTkJRV01zVFVGQlRTeEZRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkhMRTlCUVU4c1JVRkRiRWM3UVVGQlFTeFpRVU5ITEdGQlFWYzdRVUZEVkN4clFrRkJTU3hSUVVGUkxFdEJRVXNzVDBGQlN5eEZRVUZGTEVOQlFVTXNUVUZCVFN4TFFVRkxMRWRCUVVjN1FVRkRja01zTkVKQlFWa3NSVUZCUXl4TlFVRk5MRXRCUVVzc2EwUkJRV2xFTEVOQlFVTTdRVUZCUVN4alFVTTFSU3hQUVVGUE8wRkJRMHc3UVVGQlFTeHJRa0ZEU1N4RlFVRkRMRTFCUVUwc1MwRkJTeXhSUVVGUE8wRkJRVUVzYTBKQlEyNUNMREpDUVVFeVFpeFBRVUYxUXp0QlFVRkJMR2RDUVVGRE8wRkJRVUVzWTBGRGVrVTdRVUZCUVN4WlFVTkdPMEZCUVVFc1dVRkRRU3hUUVVGUE8wRkJRMHdzTUVKQlFWa3NSVUZCUXl4TlFVRk5MRWxCUVVjc1EwRkJRenRCUVVGQkxGbEJRM3BDTzBGQlFVRXNWVUZCUXp0QlFVTlVPMEZCUVVFc1VVRkRSanRCUVVGQkxGRkJRMEVzUzBGQlN6dEJRVU5JTEhWQ1FVRmhMRTlCUVZFN1FVRkRja0lzYzBKQlFWa3NSVUZCUXl4TFFVRkpMRU5CUVVNN1FVRkRiRUk3UVVGQlFTeFJRVU5HTzBGQlFVRXNUVUZEUmp0QlFVRkJMRWxCUTBZc1UwRkJVeXhMUVVGTE8wRkJRMW9zYTBKQlFWa3NSVUZCUXl4TlFVRk5MRWxCUVVjc1EwRkJiVUk3UVVGQlFTeEpRVU16UXp0QlFVRkJMRVZCUTBZN0lpd0tJQ0FpYm1GdFpYTWlPaUJiSW1wdmFXNGlMQ0FpZDJGemJTSXNJQ0ozWVhOdElpd2dJbmRoYzIwaUxDQWljbVZoWkVacGJHVWlMQ0FpY21WaFpFWnBiR1VpTENBaWQyRnpiU0lzSUNKMFpXNXpiM0lpTENBaVpYSnliM0pEYjJSbElpd2dJbWtpWFFwOUNnPT1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtlbnYsIEluZmVyZW5jZVNlc3Npb259IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7T3J0V2FzbU1lc3NhZ2UsIFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyLCBTZXJpYWxpemFibGVTZXNzaW9uTWV0YWRhdGEsIFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhLCBUZW5zb3JNZXRhZGF0YX0gZnJvbSAnLi9wcm94eS1tZXNzYWdlcyc7XG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gJy4vd2FzbS1jb3JlLWltcGwnO1xuaW1wb3J0IHtpbml0aWFsaXplV2ViQXNzZW1ibHl9IGZyb20gJy4vd2FzbS1mYWN0b3J5JztcblxuY29uc3QgaXNQcm94eSA9ICgpOiBib29sZWFuID0+ICEhZW52Lndhc20ucHJveHkgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbmxldCBwcm94eVdvcmtlcjogV29ya2VyfHVuZGVmaW5lZDtcbmxldCBpbml0aWFsaXppbmcgPSBmYWxzZTtcbmxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xubGV0IGFib3J0ZWQgPSBmYWxzZTtcblxudHlwZSBQcm9taXNlQ2FsbGJhY2tzPFQgPSB2b2lkPiA9IFtyZXNvbHZlOiAocmVzdWx0OiBUKSA9PiB2b2lkLCByZWplY3Q6IChyZWFzb246IHVua25vd24pID0+IHZvaWRdO1xubGV0IGluaXRXYXNtQ2FsbGJhY2tzOiBQcm9taXNlQ2FsbGJhY2tzO1xuY29uc3QgcXVldWVkQ2FsbGJhY2tzOiBNYXA8T3J0V2FzbU1lc3NhZ2VbJ3R5cGUnXSwgQXJyYXk8UHJvbWlzZUNhbGxiYWNrczx1bmtub3duPj4+ID0gbmV3IE1hcCgpO1xuXG5jb25zdCBlbnF1ZXVlQ2FsbGJhY2tzID0gKHR5cGU6IE9ydFdhc21NZXNzYWdlWyd0eXBlJ10sIGNhbGxiYWNrczogUHJvbWlzZUNhbGxiYWNrczx1bmtub3duPik6IHZvaWQgPT4ge1xuICBjb25zdCBxdWV1ZSA9IHF1ZXVlZENhbGxiYWNrcy5nZXQodHlwZSk7XG4gIGlmIChxdWV1ZSkge1xuICAgIHF1ZXVlLnB1c2goY2FsbGJhY2tzKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZWRDYWxsYmFja3Muc2V0KHR5cGUsIFtjYWxsYmFja3NdKTtcbiAgfVxufTtcblxuY29uc3QgZW5zdXJlV29ya2VyID0gKCk6IHZvaWQgPT4ge1xuICBpZiAoaW5pdGlhbGl6aW5nIHx8ICFpbml0aWFsaXplZCB8fCBhYm9ydGVkIHx8ICFwcm94eVdvcmtlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignd29ya2VyIG5vdCByZWFkeScpO1xuICB9XG59O1xuXG5jb25zdCBvblByb3h5V29ya2VyTWVzc2FnZSA9IChldjogTWVzc2FnZUV2ZW50PE9ydFdhc21NZXNzYWdlPik6IHZvaWQgPT4ge1xuICBzd2l0Y2ggKGV2LmRhdGEudHlwZSkge1xuICAgIGNhc2UgJ2luaXQtd2FzbSc6XG4gICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgaW5pdFdhc21DYWxsYmFja3NbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBpbml0V2FzbUNhbGxiYWNrc1swXSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW5pdC1lcCc6XG4gICAgY2FzZSAnY29weS1mcm9tJzpcbiAgICBjYXNlICdjcmVhdGUnOlxuICAgIGNhc2UgJ3JlbGVhc2UnOlxuICAgIGNhc2UgJ3J1bic6XG4gICAgY2FzZSAnZW5kLXByb2ZpbGluZyc6IHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHF1ZXVlZENhbGxiYWNrcy5nZXQoZXYuZGF0YS50eXBlKSE7XG4gICAgICBpZiAoZXYuZGF0YS5lcnIpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNoaWZ0KCkhWzFdKGV2LmRhdGEuZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrcy5zaGlmdCgpIVswXShldi5kYXRhLm91dCEpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gIH1cbn07XG5cbmNvbnN0IHNjcmlwdFNyYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAoZG9jdW1lbnQ/LmN1cnJlbnRTY3JpcHQgYXMgSFRNTFNjcmlwdEVsZW1lbnQpPy5zcmMgOiB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplV2ViQXNzZW1ibHlBbmRPcnRSdW50aW1lID0gYXN5bmMoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmIChpbml0aWFsaXplZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaW5pdGlhbGl6aW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtdWx0aXBsZSBjYWxscyB0byBcXCdpbml0V2FzbSgpXFwnIGRldGVjdGVkLicpO1xuICB9XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcmV2aW91cyBjYWxsIHRvIFxcJ2luaXRXYXNtKClcXCcgZmFpbGVkLicpO1xuICB9XG5cbiAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIC8vIG92ZXJ3cml0ZSB3YXNtIGZpbGVwYXRoc1xuICAgIGlmIChlbnYud2FzbS53YXNtUGF0aHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHNjcmlwdFNyYyAmJiBzY3JpcHRTcmMuaW5kZXhPZignYmxvYjonKSAhPT0gMCkge1xuICAgICAgICBlbnYud2FzbS53YXNtUGF0aHMgPSBzY3JpcHRTcmMuc3Vic3RyKDAsICsoc2NyaXB0U3JjKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHByb3h5V29ya2VyPy50ZXJtaW5hdGUoKTtcblxuICAgICAgY29uc3Qgd29ya2VyVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihcbiAgICAgICAgICBbXG4gICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmUoKSBmdW5jdGlvbiBpcyBoYW5kbGVkIGJ5IGVzYnVpbGQgcGx1Z2luIHRvIGxvYWQgZmlsZSBjb250ZW50IGFzIHN0cmluZy5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgICAgICByZXF1aXJlKCcuL3Byb3h5LXdvcmtlci9tYWluJylcbiAgICAgICAgICBdLFxuICAgICAgICAgIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pKTtcbiAgICAgIHByb3h5V29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVcmwsIHtuYW1lOiAnb3J0LXdhc20tcHJveHktd29ya2VyJ30pO1xuICAgICAgcHJveHlXb3JrZXIub25lcnJvciA9IChldjogRXJyb3JFdmVudCkgPT4gcmVqZWN0KGV2KTtcbiAgICAgIHByb3h5V29ya2VyLm9ubWVzc2FnZSA9IG9uUHJveHlXb3JrZXJNZXNzYWdlO1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh3b3JrZXJVcmwpO1xuICAgICAgaW5pdFdhc21DYWxsYmFja3MgPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpbml0LXdhc20nLCBpbiA6IGVudn07XG4gICAgICBwcm94eVdvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcblxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBpbml0aWFsaXplV2ViQXNzZW1ibHkoZW52Lndhc20pO1xuICAgICAgYXdhaXQgY29yZS5pbml0UnVudGltZShlbnYpO1xuICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZU9ydEVwID0gYXN5bmMoZXBOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9QUk9YWSAmJiBpc1Byb3h5KCkpIHtcbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZW5xdWV1ZUNhbGxiYWNrcygnaW5pdC1lcCcsIFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpbml0LWVwJywgaW4gOiB7ZXBOYW1lLCBlbnZ9fTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBjb3JlLmluaXRFcChlbnYsIGVwTmFtZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjb3B5RnJvbUV4dGVybmFsQnVmZmVyID0gYXN5bmMoYnVmZmVyOiBVaW50OEFycmF5KTogUHJvbWlzZTxTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcj4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZW5xdWV1ZUNhbGxiYWNrcygnY29weS1mcm9tJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2NvcHktZnJvbScsIGluIDoge2J1ZmZlcn19O1xuICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIFtidWZmZXIuYnVmZmVyXSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvcmUuY29weUZyb21FeHRlcm5hbEJ1ZmZlcihidWZmZXIpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU2Vzc2lvbiA9XG4gICAgYXN5bmMobW9kZWw6IFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyfFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgICAgUHJvbWlzZTxTZXJpYWxpemFibGVTZXNzaW9uTWV0YWRhdGE+ID0+IHtcbiAgICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgICAgICAgICAgLy8gY2hlY2sgdW5zdXBwb3J0ZWQgb3B0aW9uc1xuICAgICAgICAgICAgaWYgKG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2Vzc2lvbiBvcHRpb24gXCJwcmVmZXJyZWRPdXRwdXRMb2NhdGlvblwiIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHByb3h5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5zdXJlV29ya2VyKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgIGVucXVldWVDYWxsYmFja3MoJ2NyZWF0ZScsIFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2NyZWF0ZScsIGluIDoge21vZGVsLCBvcHRpb25zfX07XG4gICAgICAgICAgICAgIGNvbnN0IHRyYW5zZmVyYWJsZTogVHJhbnNmZXJhYmxlW10gPSBbXTtcbiAgICAgICAgICAgICAgaWYgKG1vZGVsIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICAgIHRyYW5zZmVyYWJsZS5wdXNoKG1vZGVsLmJ1ZmZlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVyYWJsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmUuY3JlYXRlU2Vzc2lvbihtb2RlbCwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG5leHBvcnQgY29uc3QgcmVsZWFzZVNlc3Npb24gPSBhc3luYyhzZXNzaW9uSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlbnF1ZXVlQ2FsbGJhY2tzKCdyZWxlYXNlJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ3JlbGVhc2UnLCBpbiA6IHNlc3Npb25JZH07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29yZS5yZWxlYXNlU2Vzc2lvbihzZXNzaW9uSWQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcnVuID0gYXN5bmMoXG4gICAgc2Vzc2lvbklkOiBudW1iZXIsIGlucHV0SW5kaWNlczogbnVtYmVyW10sIGlucHV0czogVGVuc29yTWV0YWRhdGFbXSwgb3V0cHV0SW5kaWNlczogbnVtYmVyW10sXG4gICAgb3V0cHV0czogQXJyYXk8VGVuc29yTWV0YWRhdGF8bnVsbD4sIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8VGVuc29yTWV0YWRhdGFbXT4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIC8vIGNoZWNrIGlucHV0cyBsb2NhdGlvblxuICAgIGlmIChpbnB1dHMuc29tZSh0ID0+IHRbM10gIT09ICdjcHUnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnB1dCB0ZW5zb3Igb24gR1BVIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHByb3h5LicpO1xuICAgIH1cbiAgICAvLyBjaGVjayBvdXRwdXRzIGxvY2F0aW9uXG4gICAgaWYgKG91dHB1dHMuc29tZSh0ID0+IHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZS1hbGxvY2F0ZWQgb3V0cHV0IHRlbnNvciBpcyBub3Qgc3VwcG9ydGVkIGZvciBwcm94eS4nKTtcbiAgICB9XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhW10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGVucXVldWVDYWxsYmFja3MoJ3J1bicsIFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgIGNvbnN0IHNlcmlhbGl6YWJsZUlucHV0cyA9IGlucHV0cyBhcyBTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YVtdOyAgLy8gZXZlcnkgaW5wdXQgaXMgb24gQ1BVLlxuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPVxuICAgICAgICAgIHt0eXBlOiAncnVuJywgaW4gOiB7c2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0czogc2VyaWFsaXphYmxlSW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvcHRpb25zfX07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgY29yZS5leHRyYWN0VHJhbnNmZXJhYmxlQnVmZmVycyhzZXJpYWxpemFibGVJbnB1dHMpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29yZS5ydW4oc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgb3V0cHV0cywgb3B0aW9ucyk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBlbmRQcm9maWxpbmcgPSBhc3luYyhzZXNzaW9uSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlbnF1ZXVlQ2FsbGJhY2tzKCdlbmQtcHJvZmlsaW5nJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2VuZC1wcm9maWxpbmcnLCBpbiA6IHNlc3Npb25JZH07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29yZS5lbmRQcm9maWxpbmcoc2Vzc2lvbklkKTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uLCBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlciwgU2Vzc2lvbkhhbmRsZXIsIFRlbnNvciwgVFJBQ0VfRlVOQ19CRUdJTiwgVFJBQ0VfRlVOQ19FTkR9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7U2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCB7Y29weUZyb21FeHRlcm5hbEJ1ZmZlciwgY3JlYXRlU2Vzc2lvbiwgZW5kUHJvZmlsaW5nLCByZWxlYXNlU2Vzc2lvbiwgcnVufSBmcm9tICcuL3Byb3h5LXdyYXBwZXInO1xuaW1wb3J0IHtpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGV9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuaW1wb3J0IHtsb2FkRmlsZX0gZnJvbSAnLi93YXNtLXV0aWxzLWxvYWQtZmlsZSc7XG5cbmV4cG9ydCBjb25zdCBlbmNvZGVUZW5zb3JNZXRhZGF0YSA9ICh0ZW5zb3I6IFRlbnNvciwgZ2V0TmFtZTogKCkgPT4gc3RyaW5nKTogVGVuc29yTWV0YWRhdGEgPT4ge1xuICBzd2l0Y2ggKHRlbnNvci5sb2NhdGlvbikge1xuICAgIGNhc2UgJ2NwdSc6XG4gICAgICByZXR1cm4gW3RlbnNvci50eXBlLCB0ZW5zb3IuZGltcywgdGVuc29yLmRhdGEsICdjcHUnXTtcbiAgICBjYXNlICdncHUtYnVmZmVyJzpcbiAgICAgIHJldHVybiBbdGVuc29yLnR5cGUsIHRlbnNvci5kaW1zLCB7Z3B1QnVmZmVyOiB0ZW5zb3IuZ3B1QnVmZmVyfSwgJ2dwdS1idWZmZXInXTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGRhdGEgbG9jYXRpb246ICR7dGVuc29yLmxvY2F0aW9ufSBmb3IgJHtnZXROYW1lKCl9YCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBkZWNvZGVUZW5zb3JNZXRhZGF0YSA9ICh0ZW5zb3I6IFRlbnNvck1ldGFkYXRhKTogVGVuc29yID0+IHtcbiAgc3dpdGNoICh0ZW5zb3JbM10pIHtcbiAgICBjYXNlICdjcHUnOlxuICAgICAgcmV0dXJuIG5ldyBUZW5zb3IodGVuc29yWzBdLCB0ZW5zb3JbMl0sIHRlbnNvclsxXSk7XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6IHtcbiAgICAgIGNvbnN0IGRhdGFUeXBlID0gdGVuc29yWzBdO1xuICAgICAgaWYgKCFpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUoZGF0YVR5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbm90IHN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7ZGF0YVR5cGV9IGZvciBkZXNlcmlhbGl6aW5nIEdQVSB0ZW5zb3JgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHtncHVCdWZmZXIsIGRvd25sb2FkLCBkaXNwb3NlfSA9IHRlbnNvclsyXTtcbiAgICAgIHJldHVybiBUZW5zb3IuZnJvbUdwdUJ1ZmZlcihncHVCdWZmZXIsIHtkYXRhVHlwZSwgZGltczogdGVuc29yWzFdLCBkb3dubG9hZCwgZGlzcG9zZX0pO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGRhdGEgbG9jYXRpb246ICR7dGVuc29yWzNdfWApO1xuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgT25ueHJ1bnRpbWVXZWJBc3NlbWJseVNlc3Npb25IYW5kbGVyIGltcGxlbWVudHMgSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIge1xuICBwcml2YXRlIHNlc3Npb25JZDogbnVtYmVyO1xuXG4gIGlucHV0TmFtZXM6IHN0cmluZ1tdO1xuICBvdXRwdXROYW1lczogc3RyaW5nW107XG5cbiAgYXN5bmMgZmV0Y2hNb2RlbEFuZENvcHlUb1dhc21NZW1vcnkocGF0aDogc3RyaW5nKTogUHJvbWlzZTxTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcj4ge1xuICAgIC8vIGZldGNoIG1vZGVsIGZyb20gdXJsIGFuZCBtb3ZlIHRvIHdhc20gaGVhcC5cbiAgICByZXR1cm4gY29weUZyb21FeHRlcm5hbEJ1ZmZlcihhd2FpdCBsb2FkRmlsZShwYXRoKSk7XG4gIH1cblxuICBhc3luYyBsb2FkTW9kZWwocGF0aE9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBUUkFDRV9GVU5DX0JFR0lOKCk7XG4gICAgbGV0IG1vZGVsOiBQYXJhbWV0ZXJzPHR5cGVvZiBjcmVhdGVTZXNzaW9uPlswXTtcblxuICAgIGlmICh0eXBlb2YgcGF0aE9yQnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLnZlcnNpb25zICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSkge1xuICAgICAgICAvLyBub2RlXG4gICAgICAgIG1vZGVsID0gYXdhaXQgbG9hZEZpbGUocGF0aE9yQnVmZmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGJyb3dzZXJcbiAgICAgICAgLy8gZmV0Y2ggbW9kZWwgYW5kIGNvcHkgdG8gd2FzbSBoZWFwLlxuICAgICAgICBtb2RlbCA9IGF3YWl0IHRoaXMuZmV0Y2hNb2RlbEFuZENvcHlUb1dhc21NZW1vcnkocGF0aE9yQnVmZmVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbW9kZWwgPSBwYXRoT3JCdWZmZXI7XG4gICAgfVxuXG4gICAgW3RoaXMuc2Vzc2lvbklkLCB0aGlzLmlucHV0TmFtZXMsIHRoaXMub3V0cHV0TmFtZXNdID0gYXdhaXQgY3JlYXRlU2Vzc2lvbihtb2RlbCwgb3B0aW9ucyk7XG4gICAgVFJBQ0VfRlVOQ19FTkQoKTtcbiAgfVxuXG4gIGFzeW5jIGRpc3Bvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHJlbGVhc2VTZXNzaW9uKHRoaXMuc2Vzc2lvbklkKTtcbiAgfVxuXG4gIGFzeW5jIHJ1bihmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTpcbiAgICAgIFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT4ge1xuICAgIFRSQUNFX0ZVTkNfQkVHSU4oKTtcbiAgICBjb25zdCBpbnB1dEFycmF5OiBUZW5zb3JbXSA9IFtdO1xuICAgIGNvbnN0IGlucHV0SW5kaWNlczogbnVtYmVyW10gPSBbXTtcbiAgICBPYmplY3QuZW50cmllcyhmZWVkcykuZm9yRWFjaChrdnAgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IGt2cFswXTtcbiAgICAgIGNvbnN0IHRlbnNvciA9IGt2cFsxXTtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbnB1dE5hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBpbnB1dCAnJHtuYW1lfSdgKTtcbiAgICAgIH1cbiAgICAgIGlucHV0QXJyYXkucHVzaCh0ZW5zb3IpO1xuICAgICAgaW5wdXRJbmRpY2VzLnB1c2goaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb3V0cHV0QXJyYXk6IEFycmF5PFRlbnNvcnxudWxsPiA9IFtdO1xuICAgIGNvbnN0IG91dHB1dEluZGljZXM6IG51bWJlcltdID0gW107XG4gICAgT2JqZWN0LmVudHJpZXMoZmV0Y2hlcykuZm9yRWFjaChrdnAgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IGt2cFswXTtcbiAgICAgIGNvbnN0IHRlbnNvciA9IGt2cFsxXTtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5vdXRwdXROYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgb3V0cHV0ICcke25hbWV9J2ApO1xuICAgICAgfVxuICAgICAgb3V0cHV0QXJyYXkucHVzaCh0ZW5zb3IpO1xuICAgICAgb3V0cHV0SW5kaWNlcy5wdXNoKGluZGV4KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGlucHV0cyA9XG4gICAgICAgIGlucHV0QXJyYXkubWFwKCh0LCBpKSA9PiBlbmNvZGVUZW5zb3JNZXRhZGF0YSh0LCAoKSA9PiBgaW5wdXQgXCIke3RoaXMuaW5wdXROYW1lc1tpbnB1dEluZGljZXNbaV1dfVwiYCkpO1xuICAgIGNvbnN0IG91dHB1dHMgPSBvdXRwdXRBcnJheS5tYXAoXG4gICAgICAgICh0LCBpKSA9PiB0ID8gZW5jb2RlVGVuc29yTWV0YWRhdGEodCwgKCkgPT4gYG91dHB1dCBcIiR7dGhpcy5vdXRwdXROYW1lc1tvdXRwdXRJbmRpY2VzW2ldXX1cImApIDogbnVsbCk7XG5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgcnVuKHRoaXMuc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgb3V0cHV0cywgb3B0aW9ucyk7XG5cbiAgICBjb25zdCByZXN1bHRNYXA6IFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGUgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdE1hcFt0aGlzLm91dHB1dE5hbWVzW291dHB1dEluZGljZXNbaV1dXSA9IG91dHB1dEFycmF5W2ldID8/IGRlY29kZVRlbnNvck1ldGFkYXRhKHJlc3VsdHNbaV0pO1xuICAgIH1cbiAgICBUUkFDRV9GVU5DX0VORCgpO1xuICAgIHJldHVybiByZXN1bHRNYXA7XG4gIH1cblxuICBzdGFydFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICAvLyBUT0RPOiBpbXBsZW1lbnQgcHJvZmlsaW5nXG4gIH1cblxuICBlbmRQcm9maWxpbmcoKTogdm9pZCB7XG4gICAgdm9pZCBlbmRQcm9maWxpbmcodGhpcy5zZXNzaW9uSWQpO1xuICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7Y3B1c30gZnJvbSAnbm9kZTpvcyc7XG5pbXBvcnQge0JhY2tlbmQsIGVudiwgSW5mZXJlbmNlU2Vzc2lvbiwgSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXJ9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7aW5pdGlhbGl6ZU9ydEVwLCBpbml0aWFsaXplV2ViQXNzZW1ibHlBbmRPcnRSdW50aW1lfSBmcm9tICcuL3dhc20vcHJveHktd3JhcHBlcic7XG5pbXBvcnQge09ubnhydW50aW1lV2ViQXNzZW1ibHlTZXNzaW9uSGFuZGxlcn0gZnJvbSAnLi93YXNtL3Nlc3Npb24taGFuZGxlci1pbmZlcmVuY2UnO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaW5pdGlhbGl6ZXMgYWxsIGZsYWdzIGZvciBXZWJBc3NlbWJseS5cbiAqXG4gKiBUaG9zZSBmbGFncyBhcmUgYWNjZXNzaWJsZSBmcm9tIGBvcnQuZW52Lndhc21gLiBVc2VycyBhcmUgYWxsb3cgdG8gc2V0IHRob3NlIGZsYWdzIGJlZm9yZSB0aGUgZmlyc3QgaW5mZXJlbmNlIHNlc3Npb25cbiAqIGJlaW5nIGNyZWF0ZWQsIHRvIG92ZXJyaWRlIGRlZmF1bHQgdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplRmxhZ3MgPSAoKTogdm9pZCA9PiB7XG4gIGlmICh0eXBlb2YgZW52Lndhc20uaW5pdFRpbWVvdXQgIT09ICdudW1iZXInIHx8IGVudi53YXNtLmluaXRUaW1lb3V0IDwgMCkge1xuICAgIGVudi53YXNtLmluaXRUaW1lb3V0ID0gMDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW52Lndhc20uc2ltZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgZW52Lndhc20uc2ltZCA9IHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGVudi53YXNtLnByb3h5ICE9PSAnYm9vbGVhbicpIHtcbiAgICBlbnYud2FzbS5wcm94eSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbnYud2FzbS50cmFjZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgZW52Lndhc20udHJhY2UgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW52Lndhc20ubnVtVGhyZWFkcyAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIoZW52Lndhc20ubnVtVGhyZWFkcykgfHwgZW52Lndhc20ubnVtVGhyZWFkcyA8PSAwKSB7XG4gICAgLy8gV2ViOiB3aGVuIGNyb3NzT3JpZ2luSXNvbGF0ZWQgaXMgZmFsc2UsIFNoYXJlZEFycmF5QnVmZmVyIGlzIG5vdCBhdmFpbGFibGUgc28gV2ViQXNzZW1ibHkgdGhyZWFkcyB3aWxsIG5vdCB3b3JrLlxuICAgIC8vIE5vZGUuanM6IG9ubnhydW50aW1lLXdlYiBkb2VzIG5vdCBzdXBwb3J0IG11bHRpLXRocmVhZHMgaW4gTm9kZS5qcy5cbiAgICBpZiAoKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAhc2VsZi5jcm9zc09yaWdpbklzb2xhdGVkKSB8fFxuICAgICAgICAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSkge1xuICAgICAgZW52Lndhc20ubnVtVGhyZWFkcyA9IDE7XG4gICAgfVxuICAgIGNvbnN0IG51bUNwdUxvZ2ljYWxDb3JlcyA9IHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnID8gY3B1cygpLmxlbmd0aCA6IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5O1xuICAgIGVudi53YXNtLm51bVRocmVhZHMgPSBNYXRoLm1pbig0LCBNYXRoLmNlaWwoKG51bUNwdUxvZ2ljYWxDb3JlcyB8fCAxKSAvIDIpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIE9ubnhydW50aW1lV2ViQXNzZW1ibHlCYWNrZW5kIGltcGxlbWVudHMgQmFja2VuZCB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxpemVzIHRoZSBXZWJBc3NlbWJseSBiYWNrZW5kLlxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIG9ubHkgb25jZSBmb3IgZWFjaCBiYWNrZW5kIG5hbWUuIEl0IHdpbGwgYmUgY2FsbGVkIHRoZSBmaXJzdCB0aW1lIHdoZW5cbiAgICogYG9ydC5JbmZlcmVuY2VTZXNzaW9uLmNyZWF0ZSgpYCBpcyBjYWxsZWQgd2l0aCBhIHJlZ2lzdGVyZWQgYmFja2VuZCBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0gYmFja2VuZE5hbWUgLSB0aGUgcmVnaXN0ZXJlZCBiYWNrZW5kIG5hbWUuXG4gICAqL1xuICBhc3luYyBpbml0KGJhY2tlbmROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBwb3B1bGF0ZSB3YXNtIGZsYWdzXG4gICAgaW5pdGlhbGl6ZUZsYWdzKCk7XG5cbiAgICAvLyBpbml0IHdhc21cbiAgICBhd2FpdCBpbml0aWFsaXplV2ViQXNzZW1ibHlBbmRPcnRSdW50aW1lKCk7XG5cbiAgICAvLyBwZXJmb3JtZSBFUCBzcGVjaWZpYyBpbml0aWFsaXphdGlvblxuICAgIGF3YWl0IGluaXRpYWxpemVPcnRFcChiYWNrZW5kTmFtZSk7XG4gIH1cbiAgY3JlYXRlSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIocGF0aDogc3RyaW5nLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25IYW5kbGVyPjtcbiAgY3JlYXRlSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIoYnVmZmVyOiBVaW50OEFycmF5LCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25IYW5kbGVyPjtcbiAgYXN5bmMgY3JlYXRlSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIocGF0aE9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj4ge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgT25ueHJ1bnRpbWVXZWJBc3NlbWJseVNlc3Npb25IYW5kbGVyKCk7XG4gICAgYXdhaXQgaGFuZGxlci5sb2FkTW9kZWwocGF0aE9yQnVmZmVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhbmRsZXIpO1xuICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbiwgVGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge1NlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyLCBUZW5zb3JNZXRhZGF0YX0gZnJvbSAnLi9wcm94eS1tZXNzYWdlcyc7XG5pbXBvcnQge3NldFJ1bk9wdGlvbnN9IGZyb20gJy4vcnVuLW9wdGlvbnMnO1xuaW1wb3J0IHtzZXRTZXNzaW9uT3B0aW9uc30gZnJvbSAnLi9zZXNzaW9uLW9wdGlvbnMnO1xuaW1wb3J0IHtkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0sIHRlbnNvckRhdGFUeXBlRW51bVRvU3RyaW5nLCB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bSwgdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yfSBmcm9tICcuL3dhc20tY29tbW9uJztcbmltcG9ydCB7cHJlcGFyZUlucHV0T3V0cHV0VGVuc29yfSBmcm9tICcuL3dhc20tY29yZS1pbXBsJztcbmltcG9ydCB7Z2V0SW5zdGFuY2V9IGZyb20gJy4vd2FzbS1mYWN0b3J5JztcbmltcG9ydCB7Y2hlY2tMYXN0RXJyb3J9IGZyb20gJy4vd2FzbS11dGlscyc7XG5cbmNvbnN0IE5PX1RSQUlOX0ZVTkNTX01TRyA9XG4gICAgJ0J1aWx0IHdpdGhvdXQgdHJhaW5pbmcgQVBJXFwncyBlbmFibGVkLiBVc2UgdGhlIG9ubnhydW50aW1lLXdlYi90cmFpbmluZyBpbXBvcnQgZm9yIHRyYWluaW5nICcgK1xuICAgICdmdW5jdGlvbmFsaXR5LCBhbmQgbWFrZSBzdXJlIHRoYXQgYWxsIHRoZSBjb3JyZWN0IGFydGlmYWN0cyBhcmUgYnVpbHQgJiBtb3ZlZCB0byB0aGUgY29ycmVjdCBmb2xkZXIgaWYgJyArXG4gICAgJ3VzaW5nIGEgY3VzdG9tIGJ1aWxkLiBDaGVjayBodHRwczovL29ubnhydW50aW1lLmFpL2RvY3MvYnVpbGQvd2ViLmh0bWwgZm9yIG1vcmUgaW5mb3JtYXRpb24uJztcblxuLyoqXG4gKiBSdW5zIHRoZSBjaGVja0xhc3RFcnJvciBmdW5jdGlvbiB3aGljaCB3aWxsIHRocm93IGFuIGVycm9yLCBpZiB0aGUgcHJvdmlkZWQgZXJyb3IgY29kZSBtYXRjaGVzIHRoZSBzcGVjaWZpZWRcbiAqIHBhdHRlcm4gZm9yIGFuIGVycm9yIGNvZGUuXG4gKiBAcGFyYW0gZXJyQ29kZSBudW1iZXIgdG8gZXZhbHVhdGVkIGZvciBpZiBpdCdzIGFuIGVycm9yXG4gKiBAcGFyYW0gbWVzc2FnZSBtZXNzYWdlIHRvIHBhc3MgaW50byBjaGVja0xhc3RFcnJvclxuICogQHBhcmFtIGNoZWNrTmVxWmVybyB3aGVuIHRydWUsIHRyZWF0cyBub3QgZXF1YWwgdG8gemVybyBhcyBhbiBlcnJvci5cbiAqICAgICAgICAgICAgICAgICAgICAgV2hlbiBmYWxzZSwgdHJlYXRzIGVxdWFsIHRvIHplcm8gYXMgYW4gZXJyb3IuXG4gKi9cbmNvbnN0IGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yID0gKGVyckNvZGU6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nLCBjaGVja05lcVplcm8gPSB0cnVlKSA9PiB7XG4gIGlmIChjaGVja05lcVplcm8gJiYgZXJyQ29kZSAhPT0gMCkge1xuICAgIGNoZWNrTGFzdEVycm9yKG1lc3NhZ2UpO1xuICB9IGVsc2UgaWYgKCFjaGVja05lcVplcm8gJiYgZXJyQ29kZSA9PT0gMCkge1xuICAgIGNoZWNrTGFzdEVycm9yKG1lc3NhZ2UpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQ2hlY2twb2ludEhhbmRsZSA9IChjaGVja3BvaW50RGF0YTogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIpOiBudW1iZXIgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBjb25zdCBbY2hlY2twb2ludERhdGFPZmZzZXQsIGNoZWNrcG9pbnREYXRhTGVuZ3RoXSA9IGNoZWNrcG9pbnREYXRhO1xuICBsZXQgY2hlY2twb2ludEhhbmRsZSA9IDA7XG5cbiAgdHJ5IHtcbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdMb2FkQ2hlY2twb2ludCkge1xuICAgICAgY2hlY2twb2ludEhhbmRsZSA9IHdhc20uX09ydFRyYWluaW5nTG9hZENoZWNrcG9pbnQoY2hlY2twb2ludERhdGFPZmZzZXQsIGNoZWNrcG9pbnREYXRhTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuXG4gICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoY2hlY2twb2ludEhhbmRsZSwgJ0Vycm9yIG9jY3VycmVkIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZSBhIENoZWNrcG9pbnRTdGF0ZScsIGZhbHNlKTtcbiAgICByZXR1cm4gY2hlY2twb2ludEhhbmRsZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VDaGVja3BvaW50ICYmIGNoZWNrcG9pbnRIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFRyYWluaW5nUmVsZWFzZUNoZWNrcG9pbnQoY2hlY2twb2ludEhhbmRsZSk7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gZnJlZSBidWZmZXIgZnJvbSB3YXNtIGhlYXBcbiAgICB3YXNtLl9PcnRGcmVlKGNoZWNrcG9pbnREYXRhWzBdKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0TW9kZWxJbnB1dE91dHB1dENvdW50ID0gKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGlzRXZhbE1vZGVsOiBib29sZWFuKTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0Q291bnQpIHtcbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9XG4gICAgICAgICAgd2FzbS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0Q291bnQodHJhaW5pbmdTZXNzaW9uSWQsIGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyA0LCBpc0V2YWxNb2RlbCk7XG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJvckNvZGUsICdDYW5cXCd0IGdldCBzZXNzaW9uIGlucHV0L291dHB1dCBjb3VudC4nKTtcbiAgICAgIHJldHVybiBbd2FzbS5IRUFQMzJbZGF0YU9mZnNldCAvIDRdLCB3YXNtLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0TW9kZWxJbnB1dE91dHB1dE5hbWVzTG9vcCA9XG4gICAgKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGNvdW50OiBudW1iZXIsIGlzSW5wdXQ6IGJvb2xlYW4sIGlzRXZhbE1vZGVsOiBib29sZWFuKTogc3RyaW5nW10gPT4ge1xuICAgICAgY29uc3QgbmFtZXMgPSBbXTtcbiAgICAgIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgaWYgKHdhc20uX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dE5hbWUpIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gd2FzbS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0TmFtZSh0cmFpbmluZ1Nlc3Npb25JZCwgaSwgaXNJbnB1dCwgaXNFdmFsTW9kZWwpO1xuICAgICAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKG5hbWUsIGBDYW4ndCBnZXQgaW5wdXQgb3Igb3V0cHV0IG5hbWUgLS0gaXMgaW5wdXQ6ICR7aXNJbnB1dH0sIGluZGV4ICR7aX1gLCBmYWxzZSk7XG5cbiAgICAgICAgICBuYW1lcy5wdXNoKHdhc20uVVRGOFRvU3RyaW5nKG5hbWUpKTtcbiAgICAgICAgICB3YXNtLl9mcmVlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmFtZXM7XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lcyA9ICh0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCBpc0V2YWxNb2RlbDogYm9vbGVhbik6IFtzdHJpbmdbXSwgc3RyaW5nW11dID0+IHtcbiAgbGV0IGlucHV0TmFtZXM6IHN0cmluZ1tdID0gW107XG4gIGxldCBvdXRwdXROYW1lczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdCBbaW5wdXRDb3VudCwgb3V0cHV0Q291bnRdID0gZ2V0TW9kZWxJbnB1dE91dHB1dENvdW50KHRyYWluaW5nU2Vzc2lvbklkLCBpc0V2YWxNb2RlbCk7XG5cbiAgaW5wdXROYW1lcyA9IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lc0xvb3AodHJhaW5pbmdTZXNzaW9uSWQsIGlucHV0Q291bnQsIHRydWUsIGlzRXZhbE1vZGVsKTtcbiAgb3V0cHV0TmFtZXMgPSBnZXRNb2RlbElucHV0T3V0cHV0TmFtZXNMb29wKHRyYWluaW5nU2Vzc2lvbklkLCBvdXRwdXRDb3VudCwgZmFsc2UsIGlzRXZhbE1vZGVsKTtcblxuICByZXR1cm4gW2lucHV0TmFtZXMsIG91dHB1dE5hbWVzXTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGUgPVxuICAgIChjaGVja3BvaW50SGFuZGxlOiBudW1iZXIsIHRyYWluTW9kZWxEYXRhOiBTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciwgZXZhbE1vZGVsRGF0YTogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsXG4gICAgIG9wdGltaXplck1vZGVsRGF0YTogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBudW1iZXIgPT4ge1xuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgICAgIGxldCB0cmFpbmluZ1Nlc3Npb25IYW5kbGUgPSAwO1xuICAgICAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgICAgIGxldCBhbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXSA9IHNldFNlc3Npb25PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdDcmVhdGVTZXNzaW9uKSB7XG4gICAgICAgICAgdHJhaW5pbmdTZXNzaW9uSGFuZGxlID0gd2FzbS5fT3J0VHJhaW5pbmdDcmVhdGVTZXNzaW9uKFxuICAgICAgICAgICAgICBzZXNzaW9uT3B0aW9uc0hhbmRsZSwgY2hlY2twb2ludEhhbmRsZSwgdHJhaW5Nb2RlbERhdGFbMF0sIHRyYWluTW9kZWxEYXRhWzFdLCBldmFsTW9kZWxEYXRhWzBdLFxuICAgICAgICAgICAgICBldmFsTW9kZWxEYXRhWzFdLCBvcHRpbWl6ZXJNb2RlbERhdGFbMF0sIG9wdGltaXplck1vZGVsRGF0YVsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcih0cmFpbmluZ1Nlc3Npb25IYW5kbGUsICdFcnJvciBvY2N1cnJlZCB3aGVuIHRyeWluZyB0byBjcmVhdGUgYSBUcmFpbmluZ1Nlc3Npb24nLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB0cmFpbmluZ1Nlc3Npb25IYW5kbGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uICYmIHRyYWluaW5nU2Vzc2lvbkhhbmRsZSAhPT0gMCkge1xuICAgICAgICAgIHdhc20uX09ydFRyYWluaW5nUmVsZWFzZVNlc3Npb24odHJhaW5pbmdTZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5fZnJlZSh0cmFpbk1vZGVsRGF0YVswXSk7XG4gICAgICAgIHdhc20uX2ZyZWUoZXZhbE1vZGVsRGF0YVswXSk7XG4gICAgICAgIHdhc20uX2ZyZWUob3B0aW1pemVyTW9kZWxEYXRhWzBdKTtcblxuICAgICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgICB9XG4gICAgICAgIGFsbG9jcy5mb3JFYWNoKGFsbG9jID0+IHdhc20uX2ZyZWUoYWxsb2MpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4vKipcbiAqIFByZXBhcmVzIGlucHV0IGFuZCBvdXRwdXQgdGVuc29ycyBieSBjcmVhdGluZyB0aGUgdGVuc29ycyBpbiB0aGUgV0FTTSBzaWRlIHRoZW4gY3JlYXRlcyBhIGxpc3Qgb2YgdGhlIGhhbmRsZXMgb2YgdGhlXG4gKiBXQVNNIHRlbnNvcnMuXG4gKlxuICogQHBhcmFtIHRyYWluaW5nU2Vzc2lvbklkXG4gKiBAcGFyYW0gaW5kaWNlcyBmb3IgZWFjaCB0ZW5zb3IsIHRoZSBpbmRleCBvZiB0aGUgaW5wdXQgb3Igb3V0cHV0IG5hbWUgdGhhdCB0aGUgdGVuc29yIGNvcnJlc3BvbmRzIHdpdGhcbiAqIEBwYXJhbSB0ZW5zb3JzIGxpc3Qgb2YgVGVuc29yTWV0YURhdGFcbiAqIEBwYXJhbSB0ZW5zb3JIYW5kbGVzIHNob3VsZCBwYXNzIGluIGFuIGVtcHR5IGxpc3Qgb2YgbnVtYmVyczsgbW9kaWZpZWQgaW4tcGxhY2UgYnkgdGhpcyBtZXRob2QgJiBzdG9yZXMgdGhlIHJlc3VsdGluZ1xuICogICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcyBvZiB0aGUgYWxsb2NhdGVkIHRlbnNvcnMgb24gdGhlIGhlYXBcbiAqIEBwYXJhbSBpbnB1dE91dHB1dEFsbG9jcyBtb2RpZmllZCBpbi1wbGFjZSBieSB0aGlzIG1ldGhvZFxuICogQHBhcmFtIGluZGV4QWRkIGNvbnN0YW50IHRvIGFkZCB0byB0aGUgaW5kZXggdGhhdCBpcyBwYXNzZWQgdG8gcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yXG4gKi9cbmNvbnN0IGNyZWF0ZUFuZEFsbG9jYXRlVGVuc29ycyA9XG4gICAgKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGluZGljZXM6IG51bWJlcltdLCB0ZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgdGVuc29ySGFuZGxlczogbnVtYmVyW10sXG4gICAgIGlucHV0T3V0cHV0QWxsb2NzOiBudW1iZXJbXSwgaW5kZXhBZGQ6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgY291bnQgPSBpbmRpY2VzLmxlbmd0aDtcblxuICAgICAgLy8gY3JlYXRlcyB0aGUgdGVuc29yc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihcbiAgICAgICAgICAgIHRlbnNvcnNbaV0sIHRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCB0cmFpbmluZ1Nlc3Npb25JZCwgaW5kZXhBZGQgKyBpbmRpY2VzW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8gbW92ZXMgdG8gaGVhcFxuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gICAgICBjb25zdCB2YWx1ZXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoY291bnQgKiA0KTtcbiAgICAgIGxldCB2YWx1ZXNJbmRleCA9IHZhbHVlc09mZnNldCAvIDQ7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgd2FzbS5IRUFQVTMyW3ZhbHVlc0luZGV4KytdID0gdGVuc29ySGFuZGxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlc09mZnNldDtcbiAgICB9O1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgb3V0cHV0IHRlbnNvciBoYW5kbGVzLCBjb3BpZXMgdG8gYW4gYXJyYXksIGFuZCBmcmVlcyB0aGUgV0FTTSBpbmZvcm1hdGlvblxuICogYXNzb2NpYXRlZCB3aXRoIHRoZSB0ZW5zb3IgaGFuZGxlLlxuICpcbiAqIEBwYXJhbSBvdXRwdXRWYWx1ZXNPZmZzZXRcbiAqIEBwYXJhbSBvdXRwdXRDb3VudFxuICogQHJldHVybnMgbGlzdCBvZiBUZW5zb3JNZXRhZGF0YSByZXRyaWV2ZWQgZnJvbSB0aGUgb3V0cHV0IGhhbmRsZXMuXG4gKi9cbmNvbnN0IG1vdmVPdXRwdXRUb1RlbnNvck1ldGFkYXRhQXJyID1cbiAgICAob3V0cHV0VmFsdWVzT2Zmc2V0OiBudW1iZXIsIG91dHB1dENvdW50OiBudW1iZXIsIG91dHB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdLFxuICAgICBvdXRwdXRUZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPikgPT4ge1xuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gICAgICBjb25zdCBvdXRwdXQ6IFRlbnNvck1ldGFkYXRhW10gPSBbXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRlbnNvciA9IHdhc20uSEVBUFUzMltvdXRwdXRWYWx1ZXNPZmZzZXQgLyA0ICsgaV07XG4gICAgICAgIGlmICh0ZW5zb3IgPT09IG91dHB1dFRlbnNvckhhbmRsZXNbaV0pIHtcbiAgICAgICAgICAvLyBvdXRwdXQgdGVuc29yIGlzIHByZS1hbGxvY2F0ZWQuIG5vIG5lZWQgdG8gY29weSBkYXRhLlxuICAgICAgICAgIG91dHB1dC5wdXNoKG91dHB1dFRlbnNvcnNbaV0hKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gICAgICAgIC8vIHN0YWNrIGFsbG9jYXRlIDQgcG9pbnRlciB2YWx1ZVxuICAgICAgICBjb25zdCB0ZW5zb3JEYXRhT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQgKiA0KTtcblxuICAgICAgICBsZXQgdHlwZTogVGVuc29yLlR5cGV8dW5kZWZpbmVkLCBkYXRhT2Zmc2V0ID0gMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRUZW5zb3JEYXRhKFxuICAgICAgICAgICAgICB0ZW5zb3IsIHRlbnNvckRhdGFPZmZzZXQsIHRlbnNvckRhdGFPZmZzZXQgKyA0LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgOCwgdGVuc29yRGF0YU9mZnNldCArIDEyKTtcbiAgICAgICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJvckNvZGUsIGBDYW4ndCBhY2Nlc3Mgb3V0cHV0IHRlbnNvciBkYXRhIG9uIGluZGV4ICR7aX0uYCk7XG5cbiAgICAgICAgICBsZXQgdGVuc29yRGF0YUluZGV4ID0gdGVuc29yRGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGRhdGFPZmZzZXQgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXNMZW5ndGggPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpbXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGltcy5wdXNoKHdhc20uSEVBUFUzMltkaW1zT2Zmc2V0IC8gNCArIGldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FzbS5fT3J0RnJlZShkaW1zT2Zmc2V0KTtcblxuICAgICAgICAgIGNvbnN0IHNpemUgPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpO1xuICAgICAgICAgIHR5cGUgPSB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyhkYXRhVHlwZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ0RhdGE6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gZGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3YXNtLkhFQVBVMzJbZGF0YUluZGV4KytdO1xuICAgICAgICAgICAgICBjb25zdCBtYXhCeXRlc1RvUmVhZCA9IGkgPT09IHNpemUgLSAxID8gdW5kZWZpbmVkIDogd2FzbS5IRUFQVTMyW2RhdGFJbmRleF0gLSBvZmZzZXQ7XG4gICAgICAgICAgICAgIHN0cmluZ0RhdGEucHVzaCh3YXNtLlVURjhUb1N0cmluZyhvZmZzZXQsIG1heEJ5dGVzVG9SZWFkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgc3RyaW5nRGF0YSwgJ2NwdSddKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yKHR5cGUpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyB0eXBlZEFycmF5Q29uc3RydWN0b3Ioc2l6ZSk7XG4gICAgICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgLnNldCh3YXNtLkhFQVBVOC5zdWJhcnJheShkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgZGF0YS5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgZGF0YSwgJ2NwdSddKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgd2FzbS5zdGFja1Jlc3RvcmUoYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrKTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgZGF0YU9mZnNldCkge1xuICAgICAgICAgICAgd2FzbS5fZnJlZShkYXRhT2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IGxhenlSZXNldEdyYWQgPSBhc3luYyh0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGlmICh3YXNtLl9PcnRUcmFpbmluZ0xhenlSZXNldEdyYWQpIHtcbiAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRUcmFpbmluZ0xhenlSZXNldEdyYWQodHJhaW5pbmdTZXNzaW9uSWQpO1xuICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVycm9yQ29kZSwgJ0NhblxcJ3QgY2FsbCBsYXp5UmVzZXRHcmFkLicpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcnVuVHJhaW5TdGVwID0gYXN5bmMoXG4gICAgdHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSwgaW5wdXRUZW5zb3JzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSxcbiAgICBvdXRwdXRUZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxUZW5zb3JNZXRhZGF0YVtdPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGNvbnN0IGlucHV0Q291bnQgPSBpbnB1dEluZGljZXMubGVuZ3RoO1xuICBjb25zdCBvdXRwdXRDb3VudCA9IG91dHB1dEluZGljZXMubGVuZ3RoO1xuXG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgbGV0IHJ1bk9wdGlvbnNBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgaW5wdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBvdXRwdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBpbnB1dE91dHB1dEFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBiZWZvcmVSdW5TdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG5cbiAgdHJ5IHtcbiAgICAvLyBwcmVwYXJlIHBhcmFtZXRlcnMgYnkgbW92aW5nIHRoZW0gdG8gaGVhcFxuICAgIFtydW5PcHRpb25zSGFuZGxlLCBydW5PcHRpb25zQWxsb2NzXSA9IHNldFJ1bk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAvLyBoYW5kbGUgaW5wdXRzIC0tIHlvdSBkb24ndCB3YW50IGFueXRoaW5nIGFkZGVkIHRvIHRoZSBpbmRleFxuICAgIGNvbnN0IGlucHV0VmFsdWVzT2Zmc2V0ID0gY3JlYXRlQW5kQWxsb2NhdGVUZW5zb3JzKFxuICAgICAgICB0cmFpbmluZ1Nlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dFRlbnNvcnMsIGlucHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIDApO1xuICAgIC8vIGhhbmRsZSBvdXRwdXRzXG4gICAgLy8geW91IHdhbnQgaW5wdXRDb3VudCB0byBiZSBhZGRlZCB0byB0aGUgaW5kZXggb2YgZXZlcnkgb3V0cHV0IHRlbnNvciBwYXNzZWQgdG8gcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yXG4gICAgY29uc3Qgb3V0cHV0VmFsdWVzT2Zmc2V0ID0gY3JlYXRlQW5kQWxsb2NhdGVUZW5zb3JzKFxuICAgICAgICB0cmFpbmluZ1Nlc3Npb25JZCwgb3V0cHV0SW5kaWNlcywgb3V0cHV0VGVuc29ycywgb3V0cHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIGlucHV0Q291bnQpO1xuXG4gICAgaWYgKHdhc20uX09ydFRyYWluaW5nUnVuVHJhaW5TdGVwKSB7XG4gICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcChcbiAgICAgICAgICB0cmFpbmluZ1Nlc3Npb25JZCwgaW5wdXRWYWx1ZXNPZmZzZXQsIGlucHV0Q291bnQsIG91dHB1dFZhbHVlc09mZnNldCwgb3V0cHV0Q291bnQsIHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoZXJyb3JDb2RlLCAnZmFpbGVkIHRvIGNhbGwgT3J0VHJhaW5pbmdSdW5UcmFpblN0ZXAgaW4gdGhlIFdlYkFzc2VtYmx5IGxheWVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgIH1cblxuICAgIHJldHVybiBtb3ZlT3V0cHV0VG9UZW5zb3JNZXRhZGF0YUFycihvdXRwdXRWYWx1ZXNPZmZzZXQsIG91dHB1dENvdW50LCBvdXRwdXRUZW5zb3JIYW5kbGVzLCBvdXRwdXRUZW5zb3JzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShiZWZvcmVSdW5TdGFjayk7XG5cbiAgICBpbnB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIG91dHB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIGlucHV0T3V0cHV0QWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcblxuICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgcnVuT3B0aW9uc0FsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBydW5PcHRpbWl6ZXJTdGVwID1cbiAgICBhc3luYyh0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICBsZXQgcnVuT3B0aW9uc0FsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICB0cnkge1xuICAgIFtydW5PcHRpb25zSGFuZGxlLCBydW5PcHRpb25zQWxsb2NzXSA9IHNldFJ1bk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwKSB7XG4gICAgICBjb25zdCBlcnJDb2RlID0gd2FzbS5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwKHRyYWluaW5nU2Vzc2lvbklkLCBydW5PcHRpb25zSGFuZGxlKTtcbiAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVyckNvZGUsICdGYWlsZWQgdG8gY2FsbCBPcnRUcmFpbmluZ09wdGltaXplclN0ZXAgaW4gdGhlIFdlYkFzc2VtYmx5IGxheWVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuICAgIHJ1bk9wdGlvbnNBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcnVuRXZhbFN0ZXAgPSBhc3luYyhcbiAgICB0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCBpbnB1dEluZGljZXM6IG51bWJlcltdLCBpbnB1dFRlbnNvcnM6IFRlbnNvck1ldGFkYXRhW10sIG91dHB1dEluZGljZXM6IG51bWJlcltdLFxuICAgIG91dHB1dFRlbnNvcnM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+LCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFRlbnNvck1ldGFkYXRhW10+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgY29uc3QgaW5wdXRDb3VudCA9IGlucHV0SW5kaWNlcy5sZW5ndGg7XG4gIGNvbnN0IG91dHB1dENvdW50ID0gb3V0cHV0SW5kaWNlcy5sZW5ndGg7XG5cbiAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICBsZXQgcnVuT3B0aW9uc0FsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBpbnB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IG91dHB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IGlucHV0T3V0cHV0QWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IGJlZm9yZVJ1blN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcblxuICB0cnkge1xuICAgIC8vIHByZXBhcmUgcGFyYW1ldGVycyBieSBtb3ZpbmcgdGhlbSB0byBoZWFwXG4gICAgW3J1bk9wdGlvbnNIYW5kbGUsIHJ1bk9wdGlvbnNBbGxvY3NdID0gc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIGhhbmRsZSBpbnB1dHMgLS0geW91IGRvbid0IHdhbnQgYW55dGhpbmcgYWRkZWQgdG8gdGhlIGluZGV4XG4gICAgY29uc3QgaW5wdXRWYWx1ZXNPZmZzZXQgPSBjcmVhdGVBbmRBbGxvY2F0ZVRlbnNvcnMoXG4gICAgICAgIHRyYWluaW5nU2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0VGVuc29ycywgaW5wdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgMCk7XG4gICAgLy8gaGFuZGxlIG91dHB1dHNcbiAgICAvLyB5b3Ugd2FudCBpbnB1dENvdW50IHRvIGJlIGFkZGVkIHRvIHRoZSBpbmRleCBvZiBldmVyeSBvdXRwdXQgdGVuc29yIHBhc3NlZCB0byBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3JcbiAgICBjb25zdCBvdXRwdXRWYWx1ZXNPZmZzZXQgPSBjcmVhdGVBbmRBbGxvY2F0ZVRlbnNvcnMoXG4gICAgICAgIHRyYWluaW5nU2Vzc2lvbklkLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRUZW5zb3JzLCBvdXRwdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgaW5wdXRDb3VudCk7XG5cbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdFdmFsU3RlcCkge1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0VHJhaW5pbmdFdmFsU3RlcChcbiAgICAgICAgICB0cmFpbmluZ1Nlc3Npb25JZCwgaW5wdXRWYWx1ZXNPZmZzZXQsIGlucHV0Q291bnQsIG91dHB1dFZhbHVlc09mZnNldCwgb3V0cHV0Q291bnQsIHJ1bk9wdGlvbnNIYW5kbGUpO1xuXG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJvckNvZGUsICdmYWlsZWQgdG8gY2FsbCBPcnRUcmFpbmluZ0V2YWxTdGVwIGluIHRoZSBXZWJBc3NlbWJseSBsYXllcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW92ZU91dHB1dFRvVGVuc29yTWV0YWRhdGFBcnIob3V0cHV0VmFsdWVzT2Zmc2V0LCBvdXRwdXRDb3VudCwgb3V0cHV0VGVuc29ySGFuZGxlcywgb3V0cHV0VGVuc29ycyk7XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoYmVmb3JlUnVuU3RhY2spO1xuXG4gICAgaW5wdXRUZW5zb3JIYW5kbGVzLmZvckVhY2godiA9PiB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICBvdXRwdXRUZW5zb3JIYW5kbGVzLmZvckVhY2godiA9PiB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICBpbnB1dE91dHB1dEFsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG5cbiAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuICAgIHJ1bk9wdGlvbnNBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGFyYW1ldGVyc1NpemUgPSAodHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgdHJhaW5hYmxlT25seTogYm9vbGVhbik6IG51bWJlciA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzaXplT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQpO1xuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ0dldFBhcmFtZXRlcnNTaXplKSB7XG4gICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRUcmFpbmluZ0dldFBhcmFtZXRlcnNTaXplKHRyYWluaW5nU2Vzc2lvbklkLCBzaXplT2Zmc2V0LCB0cmFpbmFibGVPbmx5KTtcbiAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVycm9yQ29kZSwgJ0NhblxcJ3QgZ2V0IHBhcmFtZXRlcnMgc2l6ZScpO1xuXG4gICAgICByZXR1cm4gd2FzbS5IRUFQMzJbc2l6ZU9mZnNldCAvIDRdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29udGlndW91c1BhcmFtZXRlcnMgPVxuICAgIGFzeW5jKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPFRlbnNvck1ldGFkYXRhPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG5cbiAgY29uc3QgdGVuc29yVHlwZUFzU3RyaW5nID0gJ2Zsb2F0MzInO1xuICBjb25zdCBsb2NhdGlvbkFzU3RyaW5nID0gJ2NwdSc7XG5cbiAgY29uc3QgcGFyYW1ldGVyc1NpemUgPSBnZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmluZ1Nlc3Npb25JZCwgdHJhaW5hYmxlT25seSk7XG4gIGxldCB0ZW5zb3IgPSAwO1xuXG4gIC8vIGFsbG9jYXRlcyBhIGJ1ZmZlciBvZiB0aGUgY29ycmVjdCBzaXplIG9uIHRoZSBXQVNNIGhlYXBcbiAgY29uc3QgcGFyYW1zQnl0ZUxlbmd0aCA9IDQgKiBwYXJhbWV0ZXJzU2l6ZTtcbiAgY29uc3QgcGFyYW1zT2Zmc2V0ID0gd2FzbS5fbWFsbG9jKHBhcmFtc0J5dGVMZW5ndGgpO1xuXG4gIC8vIGhhbmRsZXMgdGhlIGRpbWVuc2lvbnMtcmVsYXRlZCBjcmVhdGVUZW5zb3IgcGFyYW1ldGVyc1xuICBjb25zdCBkaW1zID0gW3BhcmFtZXRlcnNTaXplXTtcblxuICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQpO1xuICBjb25zdCBkaW1zSW5kZXggPSBkaW1zT2Zmc2V0IC8gNDtcbiAgd2FzbS5IRUFQMzJbZGltc0luZGV4XSA9IHBhcmFtZXRlcnNTaXplO1xuXG4gIHRyeSB7XG4gICAgLy8gd3JhcHMgYWxsb2NhdGVkIGFycmF5IGluIGEgdGVuc29yXG4gICAgdGVuc29yID0gd2FzbS5fT3J0Q3JlYXRlVGVuc29yKFxuICAgICAgICB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bSh0ZW5zb3JUeXBlQXNTdHJpbmcpLCBwYXJhbXNPZmZzZXQsIHBhcmFtc0J5dGVMZW5ndGgsIGRpbXNPZmZzZXQsIGRpbXMubGVuZ3RoLFxuICAgICAgICBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obG9jYXRpb25Bc1N0cmluZykpO1xuICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKFxuICAgICAgICB0ZW5zb3IsIGBDYW4ndCBjcmVhdGUgdGVuc29yIGZvciBnZXRDb250aWd1b3VzUGFyYW1ldGVycy4gc2Vzc2lvbj0ke3RyYWluaW5nU2Vzc2lvbklkfS5gLCBmYWxzZSk7XG5cbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc1RvQnVmZmVyKSB7XG4gICAgICBjb25zdCBlcnJDb2RlID0gd2FzbS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc1RvQnVmZmVyKHRyYWluaW5nU2Vzc2lvbklkLCB0ZW5zb3IsIHBhcmFtZXRlcnNTaXplLCB0cmFpbmFibGVPbmx5KTtcbiAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVyckNvZGUsICdDYW5cXCd0IGdldCBjb250aWd1b3VzIHBhcmFtZXRlcnMuJyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuXG4gICAgLy8gY29waWVzIGZyb20gV0FTTSBtZW1vcnkgdG8gYSBKYXZhU2NyaXB0IHR5cGVkIGFycmF5LCB3aGljaCBpcyB0aGVuIHB1dCBpbnRvIGEgVGVuc29yTWV0YWRhdGEgb2JqZWN0XG4gICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRlbnNvclR5cGVBc1N0cmluZyk7XG4gICAgY29uc3QgZGF0YSA9IG5ldyB0eXBlZEFycmF5Q29uc3RydWN0b3IocGFyYW1ldGVyc1NpemUpO1xuICAgIGNvbnN0IG91dHB1dDogVGVuc29yTWV0YWRhdGFbXSA9IFtdO1xuICAgIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aClcbiAgICAgICAgLnNldCh3YXNtLkhFQVBVOC5zdWJhcnJheShwYXJhbXNPZmZzZXQsIHBhcmFtc09mZnNldCArIHBhcmFtc0J5dGVMZW5ndGgpKTtcbiAgICBvdXRwdXQucHVzaChbdGVuc29yVHlwZUFzU3RyaW5nLCBkaW1zLCBkYXRhLCBsb2NhdGlvbkFzU3RyaW5nXSk7XG4gICAgaWYgKG91dHB1dC5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgc29tZXRoaW5nIHVuZXhwZWN0ZWQgaGFwcGVuZWQgaW4gdGhlIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzIGZ1bmN0aW9uLiBFeHBlY3RlZCBvdXRwdXQgbGVuZ3RoIG9mXG4gICAgIG9uZSwgZ290ICR7b3V0cHV0Lmxlbmd0aH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG91dHB1dFswXTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHRlbnNvciAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgIH1cbiAgICB3YXNtLl9mcmVlKHBhcmFtc09mZnNldCk7XG4gICAgd2FzbS5fZnJlZShkaW1zT2Zmc2V0KTtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBsb2FkUGFyYW1ldGVyc0J1ZmZlciA9XG4gICAgYXN5bmModHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgYnVmZmVyOiBVaW50OEFycmF5LCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG5cbiAgY29uc3QgdGVuc29yVHlwZUFzU3RyaW5nID0gJ2Zsb2F0MzInO1xuICBjb25zdCBsb2NhdGlvbkFzU3RyaW5nID0gJ2NwdSc7XG5cbiAgLy8gYWxsb2NhdGVzICYgY29waWVzIEphdmFTY3JpcHQgYnVmZmVyIHRvIFdBU00gaGVhcFxuICBjb25zdCBidWZmZXJCeXRlTGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgY29uc3QgYnVmZmVyQ291bnQgPSBidWZmZXJCeXRlTGVuZ3RoIC8gNDtcbiAgY29uc3QgYnVmZmVyT2Zmc2V0ID0gd2FzbS5fbWFsbG9jKGJ1ZmZlckJ5dGVMZW5ndGgpO1xuICB3YXNtLkhFQVBVOC5zZXQoYnVmZmVyLCBidWZmZXJPZmZzZXQpO1xuXG4gIC8vIGFsbG9jYXRlcyBhbmQgaGFuZGxlcyBtb3ZpbmcgZGltZW5zaW9ucyBpbmZvcm1hdGlvbiB0byBXQVNNIG1lbW9yeVxuICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQpO1xuICB3YXNtLkhFQVAzMltkaW1zT2Zmc2V0IC8gNF0gPSBidWZmZXJDb3VudDtcbiAgY29uc3QgZGltc0xlbmd0aCA9IDE7XG4gIGxldCB0ZW5zb3IgPSAwO1xuXG4gIHRyeSB7XG4gICAgdGVuc29yID0gd2FzbS5fT3J0Q3JlYXRlVGVuc29yKFxuICAgICAgICB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bSh0ZW5zb3JUeXBlQXNTdHJpbmcpLCBidWZmZXJPZmZzZXQsIGJ1ZmZlckJ5dGVMZW5ndGgsIGRpbXNPZmZzZXQsIGRpbXNMZW5ndGgsXG4gICAgICAgIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsb2NhdGlvbkFzU3RyaW5nKSk7XG4gICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IodGVuc29yLCBgQ2FuJ3QgY3JlYXRlIHRlbnNvciBmb3IgaW5wdXQvb3V0cHV0LiBzZXNzaW9uPSR7dHJhaW5pbmdTZXNzaW9uSWR9YCwgZmFsc2UpO1xuXG4gICAgaWYgKHdhc20uX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNGcm9tQnVmZmVyKSB7XG4gICAgICBjb25zdCBlcnJDb2RlID0gd2FzbS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc0Zyb21CdWZmZXIodHJhaW5pbmdTZXNzaW9uSWQsIHRlbnNvciwgYnVmZmVyQ291bnQsIHRyYWluYWJsZU9ubHkpO1xuICAgICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoZXJyQ29kZSwgJ0NhblxcJ3QgY29weSBidWZmZXIgdG8gcGFyYW1ldGVycy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGlmICh0ZW5zb3IgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VUZW5zb3IodGVuc29yKTtcbiAgICB9XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgIHdhc20uX2ZyZWUoYnVmZmVyT2Zmc2V0KTtcbiAgICB3YXNtLl9mcmVlKGRpbXNPZmZzZXQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVsZWFzZVRyYWluaW5nU2Vzc2lvbkFuZENoZWNrcG9pbnQgPSAoY2hlY2twb2ludElkOiBudW1iZXIsIHNlc3Npb25JZDogbnVtYmVyKTogdm9pZCA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGlmICh3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uKSB7XG4gICAgd2FzbS5fT3J0VHJhaW5pbmdSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSWQpO1xuICB9XG4gIGlmICh3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VDaGVja3BvaW50KSB7XG4gICAgd2FzbS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludChjaGVja3BvaW50SWQpO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24sIE9ubnhWYWx1ZSwgU2Vzc2lvbkhhbmRsZXIsIFRlbnNvciwgVHJhaW5pbmdTZXNzaW9uSGFuZGxlcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtkZWNvZGVUZW5zb3JNZXRhZGF0YSwgZW5jb2RlVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vc2Vzc2lvbi1oYW5kbGVyLWluZmVyZW5jZSc7XG5pbXBvcnQge2NvcHlGcm9tRXh0ZXJuYWxCdWZmZXJ9IGZyb20gJy4vd2FzbS1jb3JlLWltcGwnO1xuaW1wb3J0IHtjcmVhdGVDaGVja3BvaW50SGFuZGxlLCBjcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGUsIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzLCBnZXRNb2RlbElucHV0T3V0cHV0TmFtZXMsIGdldFBhcmFtZXRlcnNTaXplLCBsYXp5UmVzZXRHcmFkLCBsb2FkUGFyYW1ldGVyc0J1ZmZlciwgcmVsZWFzZVRyYWluaW5nU2Vzc2lvbkFuZENoZWNrcG9pbnQsIHJ1bkV2YWxTdGVwLCBydW5PcHRpbWl6ZXJTdGVwLCBydW5UcmFpblN0ZXB9IGZyb20gJy4vd2FzbS10cmFpbmluZy1jb3JlLWltcGwnO1xuXG5leHBvcnQgY2xhc3MgT25ueHJ1bnRpbWVXZWJBc3NlbWJseVRyYWluaW5nU2Vzc2lvbkhhbmRsZXIgaW1wbGVtZW50cyBUcmFpbmluZ1Nlc3Npb25IYW5kbGVyIHtcbiAgcHJpdmF0ZSBzZXNzaW9uSWQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBjaGVja3BvaW50SWQ6IG51bWJlcjtcblxuICBpbnB1dE5hbWVzOiBzdHJpbmdbXTtcbiAgb3V0cHV0TmFtZXM6IHN0cmluZ1tdO1xuXG4gIGV2YWxJbnB1dE5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuICBldmFsT3V0cHV0TmFtZXM6IHN0cmluZ1tdID0gW107XG5cbiAgYXN5bmMgdXJpT3JCdWZmZXJUb0hlYXAodXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5KTogUHJvbWlzZTxTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcj4ge1xuICAgIGxldCBidWZmZXI6IFVpbnQ4QXJyYXk7XG4gICAgaWYgKHR5cGVvZiB1cmlPckJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJpT3JCdWZmZXIpO1xuICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSB1cmlPckJ1ZmZlcjtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIoYnVmZmVyKTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVRyYWluaW5nU2Vzc2lvbihcbiAgICAgIGNoZWNrcG9pbnRTdGF0ZVVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgdHJhaW5Nb2RlbFVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSxcbiAgICAgIGV2YWxNb2RlbFVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW1pemVyTW9kZWxVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKSB7XG4gICAgY29uc3QgY2hlY2twb2ludERhdGE6IFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyID0gYXdhaXQgdGhpcy51cmlPckJ1ZmZlclRvSGVhcChjaGVja3BvaW50U3RhdGVVcmlPckJ1ZmZlcik7XG4gICAgY29uc3QgdHJhaW5Nb2RlbERhdGE6IFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyID0gYXdhaXQgdGhpcy51cmlPckJ1ZmZlclRvSGVhcCh0cmFpbk1vZGVsVXJpT3JCdWZmZXIpO1xuICAgIC8vIDAgaXMgc3VwcG9zZWQgdG8gYmUgdGhlIG51bGxwdHJcbiAgICBsZXQgZXZhbE1vZGVsRGF0YTogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIgPSBbMCwgMF07XG4gICAgbGV0IG9wdGltaXplck1vZGVsRGF0YTogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIgPSBbMCwgMF07XG5cbiAgICBpZiAoZXZhbE1vZGVsVXJpT3JCdWZmZXIgIT09ICcnKSB7XG4gICAgICBldmFsTW9kZWxEYXRhID0gYXdhaXQgdGhpcy51cmlPckJ1ZmZlclRvSGVhcChldmFsTW9kZWxVcmlPckJ1ZmZlcik7XG4gICAgfVxuICAgIGlmIChvcHRpbWl6ZXJNb2RlbFVyaU9yQnVmZmVyICE9PSAnJykge1xuICAgICAgb3B0aW1pemVyTW9kZWxEYXRhID0gYXdhaXQgdGhpcy51cmlPckJ1ZmZlclRvSGVhcChvcHRpbWl6ZXJNb2RlbFVyaU9yQnVmZmVyKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrcG9pbnRJZCA9IGNyZWF0ZUNoZWNrcG9pbnRIYW5kbGUoY2hlY2twb2ludERhdGEpO1xuICAgIHRoaXMuc2Vzc2lvbklkID1cbiAgICAgICAgY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlKHRoaXMuY2hlY2twb2ludElkLCB0cmFpbk1vZGVsRGF0YSwgZXZhbE1vZGVsRGF0YSwgb3B0aW1pemVyTW9kZWxEYXRhLCBvcHRpb25zKTtcbiAgICBbdGhpcy5pbnB1dE5hbWVzLCB0aGlzLm91dHB1dE5hbWVzXSA9IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lcyh0aGlzLnNlc3Npb25JZCwgZmFsc2UpO1xuICAgIGlmIChldmFsTW9kZWxVcmlPckJ1ZmZlciAhPT0gJycpIHtcbiAgICAgIFt0aGlzLmV2YWxJbnB1dE5hbWVzLCB0aGlzLmV2YWxPdXRwdXROYW1lc10gPSBnZXRNb2RlbElucHV0T3V0cHV0TmFtZXModGhpcy5zZXNzaW9uSWQsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRoYXQgY29udmVydHMgYSBmZWVkcyBvciBmZXRjaGVzIGRhdGF0eXBlIHRvIHR3byBhcnJheXMsIG9uZSBvZiB2YWx1ZXMgYW5kIG9uZSB0aGF0IHN0b3JlcyB0aGVcbiAgICogY29ycmVzcG9uZGluZyBuYW1lIGFzIGEgbnVtYmVyIHJlZmVycmluZyB0byB0aGUgaW5kZXggaW4gdGhlIGxpc3Qgb2YgbmFtZXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyBtZWFudCB0byBtYXRjaCBlaXRoZXIgU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlIG9yIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlXG4gICAqIEBwYXJhbSBuYW1lcyBlaXRoZXIgaW5wdXROYW1lcyBvciBvdXRwdXROYW1lc1xuICAgKiBAcmV0dXJucyBhIHR1cGxlIG9mIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIGEgbGlzdCBvZiBpbmRpY2VzLlxuICAgKi9cbiAgY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxULCBVPihcbiAgICAgIGZlZWRzOiB7W25hbWU6IHN0cmluZ106IFR9LCBuYW1lczogc3RyaW5nW10sIG1hcEZ1bmM6ICh2YWw6IFQsIGluZGV4OiBudW1iZXIpID0+IFUpOiBbVFtdLCBudW1iZXJbXSwgVVtdXSB7XG4gICAgY29uc3QgdmFsdWVzOiBUW10gPSBbXTtcbiAgICBjb25zdCBpbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKGZlZWRzKS5mb3JFYWNoKGt2cCA9PiB7XG4gICAgICBjb25zdCBuYW1lID0ga3ZwWzBdO1xuICAgICAgY29uc3QgdGVuc29yID0ga3ZwWzFdO1xuICAgICAgY29uc3QgaW5kZXggPSBuYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW5wdXQgJyR7bmFtZX1gKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlcy5wdXNoKHRlbnNvcik7XG4gICAgICBpbmRpY2VzLnB1c2goaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdUxpc3QgPSB2YWx1ZXMubWFwKG1hcEZ1bmMpO1xuICAgIHJldHVybiBbdmFsdWVzLCBpbmRpY2VzLCB1TGlzdF07XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCB0aGF0IGNvbnZlcnRzIHRoZSBUZW5zb3JNZXRhZGF0YSB0aGF0IHRoZSB3YXNtLWNvcmUgZnVuY3Rpb25zIHJldHVybiB0byB0aGVcbiAgICogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZS4gQW55IG91dHB1dHMgaW4gdGhlIHByb3ZpZGVkIG91dHB1dEFycmF5IHRoYXQgYXJlIGZhbHN5IHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggdGhlXG4gICAqIGNvcnJlc3BvbmRpbmcgcmVzdWx0LlxuICAgKlxuICAgKiBAcGFyYW0gcmVzdWx0cyB1c2VkIHRvIHBvcHVsYXRlIHRoZSByZXN1bHRNYXAgaWYgdGhlcmUgaXMgbm8gdmFsdWUgZm9yIHRoYXQgb3V0cHV0TmFtZSBhbHJlYWR5XG4gICAqIEBwYXJhbSBvdXRwdXRBcnJheSB1c2VkIHRvIHBvcHVsYXRlIHRoZSByZXN1bHRNYXAuIElmIG51bGwgb3IgdW5kZWZpbmVkLCB1c2UgdGhlIGNvcnJlc3BvbmRpbmcgcmVzdWx0IGZyb20gcmVzdWx0c1xuICAgKiBAcGFyYW0gb3V0cHV0SW5kaWNlcyBzcGVjaWZpZXMgd2hpY2ggb3V0cHV0TmFtZSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3Igb3V0cHV0QXJyYXkgcmVmZXJzIHRvLlxuICAgKiBAcmV0dXJucyBhIG1hcCBvZiBvdXRwdXQgbmFtZXMgYW5kIE9ubnhWYWx1ZXMuXG4gICAqL1xuICBjb252ZXJ0VGVuc29yTWV0YWRhdGFUb1JldHVyblR5cGUoXG4gICAgICByZXN1bHRzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRBcnJheTogQXJyYXk8VGVuc29yfG51bGw+LCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSk6IFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGUge1xuICAgIGNvbnN0IHJlc3VsdE1hcDogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0TWFwW3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV1dID0gb3V0cHV0QXJyYXlbaV0gPz8gZGVjb2RlVGVuc29yTWV0YWRhdGEocmVzdWx0c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRNYXA7XG4gIH1cblxuICBhc3luYyBsYXp5UmVzZXRHcmFkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGxhenlSZXNldEdyYWQodGhpcy5zZXNzaW9uSWQpO1xuICB9XG5cbiAgYXN5bmMgcnVuVHJhaW5TdGVwKFxuICAgICAgZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+IHtcbiAgICBjb25zdCBbLCBpbnB1dEluZGljZXMsIGlucHV0c10gPSB0aGlzLmNvbnZlcnRNYXBJbnRvVmFsdWVzQXJyYXlBbmRJbmRpY2VzQXJyYXk8VGVuc29yLCBUZW5zb3JNZXRhZGF0YT4oXG4gICAgICAgIGZlZWRzLCB0aGlzLmlucHV0TmFtZXMsXG4gICAgICAgICh0LCBpKTogVGVuc29yTWV0YWRhdGEgPT4gZW5jb2RlVGVuc29yTWV0YWRhdGEodCwgKCkgPT4gYGlucHV0IFwiJHt0aGlzLmlucHV0TmFtZXNbaW5wdXRJbmRpY2VzW2ldXX1cImApKTtcblxuICAgIGNvbnN0IFtvdXRwdXRBcnJheSwgb3V0cHV0SW5kaWNlcywgb3V0cHV0c10gPVxuICAgICAgICB0aGlzLmNvbnZlcnRNYXBJbnRvVmFsdWVzQXJyYXlBbmRJbmRpY2VzQXJyYXk8VGVuc29yfG51bGwsIFRlbnNvck1ldGFkYXRhfG51bGw+KFxuICAgICAgICAgICAgZmV0Y2hlcywgdGhpcy5vdXRwdXROYW1lcyxcbiAgICAgICAgICAgICh0LCBpKTogVGVuc29yTWV0YWRhdGF8bnVsbCA9PlxuICAgICAgICAgICAgICAgIHQgPyBlbmNvZGVUZW5zb3JNZXRhZGF0YSh0LCAoKSA9PiBgb3V0cHV0IFwiJHt0aGlzLm91dHB1dE5hbWVzW291dHB1dEluZGljZXNbaV1dfVwiYCkgOiBudWxsKTtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBydW5UcmFpblN0ZXAodGhpcy5zZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jb252ZXJ0VGVuc29yTWV0YWRhdGFUb1JldHVyblR5cGUocmVzdWx0cywgb3V0cHV0QXJyYXksIG91dHB1dEluZGljZXMpO1xuICB9XG5cbiAgYXN5bmMgcnVuT3B0aW1pemVyU3RlcChvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBydW5PcHRpbWl6ZXJTdGVwKHRoaXMuc2Vzc2lvbklkLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIHJ1bkV2YWxTdGVwKFxuICAgICAgZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+IHtcbiAgICBjb25zdCBbLCBpbnB1dEluZGljZXMsIGlucHV0c10gPSB0aGlzLmNvbnZlcnRNYXBJbnRvVmFsdWVzQXJyYXlBbmRJbmRpY2VzQXJyYXk8VGVuc29yLCBUZW5zb3JNZXRhZGF0YT4oXG4gICAgICAgIGZlZWRzLCB0aGlzLmV2YWxJbnB1dE5hbWVzLFxuICAgICAgICAodCwgaSk6IFRlbnNvck1ldGFkYXRhID0+IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBpbnB1dCBcIiR7dGhpcy5ldmFsSW5wdXROYW1lc1tpbnB1dEluZGljZXNbaV1dfVwiYCkpO1xuXG4gICAgY29uc3QgW291dHB1dEFycmF5LCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzXSA9XG4gICAgICAgIHRoaXMuY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxUZW5zb3J8bnVsbCwgVGVuc29yTWV0YWRhdGF8bnVsbD4oXG4gICAgICAgICAgICBmZXRjaGVzLCB0aGlzLmV2YWxPdXRwdXROYW1lcyxcbiAgICAgICAgICAgICh0LCBpKTogVGVuc29yTWV0YWRhdGF8bnVsbCA9PlxuICAgICAgICAgICAgICAgIHQgPyBlbmNvZGVUZW5zb3JNZXRhZGF0YSh0LCAoKSA9PiBgb3V0cHV0IFwiJHt0aGlzLmV2YWxPdXRwdXROYW1lc1tvdXRwdXRJbmRpY2VzW2ldXX1cImApIDogbnVsbCk7XG5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgcnVuRXZhbFN0ZXAodGhpcy5zZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jb252ZXJ0VGVuc29yTWV0YWRhdGFUb1JldHVyblR5cGUocmVzdWx0cywgb3V0cHV0QXJyYXksIG91dHB1dEluZGljZXMpO1xuICB9XG5cbiAgYXN5bmMgZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuIGdldFBhcmFtZXRlcnNTaXplKHRoaXMuc2Vzc2lvbklkLCB0cmFpbmFibGVPbmx5KTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5OiBVaW50OEFycmF5LCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgbG9hZFBhcmFtZXRlcnNCdWZmZXIodGhpcy5zZXNzaW9uSWQsIGFycmF5LCB0cmFpbmFibGVPbmx5KTtcbiAgfVxuICBhc3luYyBnZXRDb250aWd1b3VzUGFyYW1ldGVycyh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxPbm54VmFsdWU+IHtcbiAgICBjb25zdCB0ZW5zb3JSZXN1bHQgPSBhd2FpdCBnZXRDb250aWd1b3VzUGFyYW1ldGVycyh0aGlzLnNlc3Npb25JZCwgdHJhaW5hYmxlT25seSk7XG4gICAgcmV0dXJuIGRlY29kZVRlbnNvck1ldGFkYXRhKHRlbnNvclJlc3VsdCk7XG4gIH1cblxuICBhc3luYyBkaXNwb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiByZWxlYXNlVHJhaW5pbmdTZXNzaW9uQW5kQ2hlY2twb2ludCh0aGlzLmNoZWNrcG9pbnRJZCwgdGhpcy5zZXNzaW9uSWQpO1xuICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbiwgVHJhaW5pbmdTZXNzaW9uSGFuZGxlcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtPbm54cnVudGltZVdlYkFzc2VtYmx5QmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kLXdhc20nO1xuaW1wb3J0IHtPbm54cnVudGltZVdlYkFzc2VtYmx5VHJhaW5pbmdTZXNzaW9uSGFuZGxlcn0gZnJvbSAnLi93YXNtL3Nlc3Npb24taGFuZGxlci10cmFpbmluZyc7XG5cbmNsYXNzIE9ubnhydW50aW1lVHJhaW5pbmdXZWJBc3NlbWJseUJhY2tlbmQgZXh0ZW5kcyBPbm54cnVudGltZVdlYkFzc2VtYmx5QmFja2VuZCB7XG4gIGFzeW5jIGNyZWF0ZVRyYWluaW5nU2Vzc2lvbkhhbmRsZXIoXG4gICAgICBjaGVja3BvaW50U3RhdGVVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIHRyYWluTW9kZWxVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksXG4gICAgICBldmFsTW9kZWxVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIG9wdGltaXplck1vZGVsVXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LFxuICAgICAgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8VHJhaW5pbmdTZXNzaW9uSGFuZGxlcj4ge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgT25ueHJ1bnRpbWVXZWJBc3NlbWJseVRyYWluaW5nU2Vzc2lvbkhhbmRsZXIoKTtcbiAgICBhd2FpdCBoYW5kbGVyLmNyZWF0ZVRyYWluaW5nU2Vzc2lvbihcbiAgICAgICAgY2hlY2twb2ludFN0YXRlVXJpT3JCdWZmZXIsIHRyYWluTW9kZWxVcmlPckJ1ZmZlciwgZXZhbE1vZGVsVXJpT3JCdWZmZXIsIG9wdGltaXplck1vZGVsVXJpT3JCdWZmZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFuZGxlcik7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHdhc21CYWNrZW5kID0gbmV3IE9ubnhydW50aW1lVHJhaW5pbmdXZWJBc3NlbWJseUJhY2tlbmQoKTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuLy8gV2UgdXNlIFwicmVxdWlyZVwiIGluc3RlYWQgb2YgXCJpbXBvcnRcIiBoZXJlIGJlY2F1c2UgaW1wb3J0IHN0YXRlbWVudCBtdXN0IGJlIHB1dCBpbiB0b3AgbGV2ZWwuIE91ciBjdXJyZW50IGNvZGUgZG9lc1xuLy8gbm90IGFsbG93IGJ1bmRsZXIgdG8gdHJlZS1zaGFraW5nIGNvZGUgYXMgZXhwZWN0ZWQgYmVjYXVzZSBzb21lIGNvZGVzIGFyZSB0cmVhdGVkIGFzIGhhdmluZyBzaWRlIGVmZmVjdHMuXG4vLyBTbyB3ZSBpbXBvcnQgY29kZSBpbnNpZGUgdGhlIGlmLWNsYXVzZSB0byBhbGxvdyBidW5kbGVyIHJlbW92ZSB0aGUgY29kZSBzYWZlbHkuXG5cbmV4cG9ydCAqIGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5pbXBvcnQgKiBhcyBvcnQgZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmV4cG9ydCBkZWZhdWx0IG9ydDtcblxuaW1wb3J0IHtyZWdpc3RlckJhY2tlbmQsIGVudn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi92ZXJzaW9uJztcblxuaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR0wpIHtcbiAgY29uc3Qgb25ueGpzQmFja2VuZCA9IHJlcXVpcmUoJy4vYmFja2VuZC1vbm54anMnKS5vbm54anNCYWNrZW5kO1xuICByZWdpc3RlckJhY2tlbmQoJ3dlYmdsJywgb25ueGpzQmFja2VuZCwgLTEwKTtcbn1cblxuaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTSkge1xuICBjb25zdCB3YXNtQmFja2VuZCA9IEJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORyA/IHJlcXVpcmUoJy4vYmFja2VuZC13YXNtLWluZmVyZW5jZScpLndhc21CYWNrZW5kIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JhY2tlbmQtd2FzbS10cmFpbmluZycpLndhc21CYWNrZW5kO1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUpIHtcbiAgICByZWdpc3RlckJhY2tlbmQoJ3dlYmdwdScsIHdhc21CYWNrZW5kLCA1KTtcbiAgfVxuICByZWdpc3RlckJhY2tlbmQoJ2NwdScsIHdhc21CYWNrZW5kLCAxMCk7XG4gIHJlZ2lzdGVyQmFja2VuZCgnd2FzbScsIHdhc21CYWNrZW5kLCAxMCk7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQk5OKSB7XG4gICAgcmVnaXN0ZXJCYWNrZW5kKCd3ZWJubicsIHdhc21CYWNrZW5kLCA5KTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZW52LnZlcnNpb25zLCAnd2ViJywge3ZhbHVlOiB2ZXJzaW9uLCBlbnVtZXJhYmxlOiB0cnVlfSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbi8vIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgL2pzL3NjcmlwdHMvdXBkYXRlLXZlcnNpb24udHNcbi8vIERvIG5vdCBtb2RpZnkgZmlsZSBjb250ZW50IG1hbnVhbGx5LlxuXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICcxLjE4LjAnO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFjTSxVQUNB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O0FBQUEsVUFBQztBQUFDLG1CQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUMscUJBQVMsRUFBRSxJQUFHO0FBQUMscUJBQU8sSUFBRSxLQUFHLEtBQUcsSUFBRSxLQUFHLElBQUU7QUFBQSxZQUFDO0FBQUMsZ0JBQUk7QUFBRSxtQkFBSyxJQUFFLEVBQUUsRUFBRSxZQUFZLElBQUUsRUFBRSxZQUFZLENBQUMsTUFBSSxPQUFLLElBQUUsRUFBRSxFQUFFLFNBQVMsSUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFLLElBQUUsRUFBRSxFQUFFLFFBQVEsSUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFHLG1CQUFPO0FBQUEsVUFBQztBQUFDLG1CQUFTLEVBQUUsR0FBRTtBQUFDLG9CQUFPLEVBQUUsT0FBTyxHQUFFO0FBQUEsY0FBQyxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU87QUFBQSxjQUFFLEtBQUs7QUFBRSx1QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSTtBQUFBLGtCQUFLLEVBQUUsWUFBWTtBQUFBLGtCQUM1ZjtBQUFBLGtCQUFFO0FBQUEsZ0JBQUM7QUFBQSxjQUFFLEtBQUs7QUFBRSx1QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsWUFBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxFQUFFLEdBQUU7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBRyxpQkFBSSxJQUFFLElBQUksS0FBTSxJQUFJLEtBQUssRUFBRSxLQUFHLE1BQUssR0FBRSxDQUFDLEVBQUcsUUFBUSxD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RyxHQUFHLEVBQUUsRUFBRSxFQUFFLFVBQVUsR0FBRSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEVBQUU7QUFBQSxZQUFFLE1BQUssT0FBRyxHQUFHLEVBQUUsS0FBRyxRQUFNLE1BQUksR0FBRSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLEdBQUUsR0FBRztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUc7QUFBQyxrQkFBRSxFQUFFO0FBQUcsbUJBQUcsSUFBRSxJQUFFLEtBQUcsS0FBRyxNQUFJLEtBQUc7QUFBSSxxQkFBTyxFQUFFLEdBQUUsQ0FBQztBQUFBLFlBQUM7QUFBQSxZQUFFLE1BQUssT0FBRztBQUFDLHVCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBRyxFQUFFLEtBQUcsR0FBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLElBQUksSUFBRSxLQUFHLElBQUksR0FBRztBQUFFO0FBQUMscUJBQU8sRUFBRSxFQUFFLEtBQUcsR0FBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxLQUFHLEdBQUUsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLENBQUM7QUFBQSxZQUFFLE1BQUssTUFBSTtBQUFBLFlBQUssTUFBSyxPQUFHLEtBQUcsRUFBRSxNQUFJLEtBQUcsRUFBRSxLQUFHLE9BQUs7QUFBQSxZQUFLLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDO0FBQUEsWUFBRSxNQUFLLE1BQUk7QUFBQSxZQUFLLE1BQUssT0FBRyxFQUFFLE1BQUk7QUFBQSxZQUFFLE1BQUssT0FBRztBQUFBLGNBQUUsS0FBSyxPQUFPLEVBQUUsS0FBRyxJQUFFLEVBQUUsTUFBSSxDQUFDO0FBQUEsY0FDbmY7QUFBQSxZQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUc7QUFBQyxrQkFBSSxJQUFFLEtBQUssT0FBTyxFQUFFLEtBQUcsS0FBRyxFQUFFLEtBQUcsS0FBRyxLQUFHLENBQUM7QUFBRSxvQkFBSSxFQUFFLEtBQUcsTUFBSSxFQUFFLEtBQUcsS0FBRyxLQUFHO0FBQUksa0JBQUc7QUFBRSxzQkFBSSxNQUFJLEtBQUcsRUFBRSxLQUFHLE1BQUksRUFBRSxNQUFJLEdBQUUsS0FBRyxLQUFHLEtBQUcsS0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFJLElBQUU7QUFBQSxtQkFBUTtBQUFDLG9CQUFFO0FBQUcsb0JBQUksS0FBRyxFQUFFLEtBQUcsSUFBRSxFQUFFLEtBQUcsS0FBRztBQUFFLGlCQUFDLEtBQUcsS0FBRyxLQUFHLEtBQUcsRUFBRSxFQUFFLEtBQUcsTUFBSSxDQUFDLE1BQUk7QUFBQSxjQUFHO0FBQUMscUJBQU8sRUFBRSxHQUFFLENBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRTtBQUFBLFlBQUcsTUFBSyxPQUFHLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FBRyxLQUFHLEVBQUUsS0FBRyxLQUFHLEtBQUcsQ0FBQyxHQUFFLENBQUM7QUFBQSxZQUFFLE1BQUssUUFBSSxFQUFFLEtBQUcsTUFBTSxTQUFTLEVBQUUsVUFBVSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRSxLQUFHO0FBQUEsWUFBSyxNQUFLLE9BQUc7QUFBQyxrQkFBRSxFQUFFO0FBQUcsa0JBQUksSUFBRSxLQUFHO0FBQUUsa0JBQUUsS0FBSyxJQUFJLENBQUMsSUFBRTtBQUFHLHNCQUFPLElBQUUsTUFBSSxPQUFLLE9BQU8sVUFBUSxJQUFFLEtBQUcsTUFBSSxJQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFBQSxZQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRTtBQUFBLFlBQUcsTUFBSyxNQUFJO0FBQUEsVUFBRztBQUFFLGNBQUUsRUFBRSxRQUFRLE9BQU0sTUFBVTtBQUN4ZixlQUFJLEtBQUs7QUFBRSxjQUFFLFNBQVMsQ0FBQyxNQUFJLElBQUUsRUFBRSxRQUFRLElBQUksT0FBTyxHQUFFLEdBQUcsR0FBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFBRyxjQUFFLEVBQUUsUUFBUSxTQUFRLEdBQUc7QUFBRSxjQUFFLEdBQUcsQ0FBQztBQUFFLGNBQUcsRUFBRSxTQUFPO0FBQUUsbUJBQU87QUFBRSxZQUFFLElBQUksR0FBRSxNQUFJLENBQUM7QUFBRSxpQkFBTyxFQUFFLFNBQU87QUFBQSxRQUFDO0FBQzNKLFlBQUksS0FBRyxFQUFDLEdBQUUsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLGlCQUFLO0FBQUUsVUFBQyxJQUFJLEdBQUcsQ0FBQyxFQUFHLEdBQUcsTUFBSSxHQUFFLE1BQUksQ0FBQztBQUFFLGVBQUc7QUFBRTtBQUFLLGdCQUFNO0FBQUEsUUFBRyxHQUFFLEdBQUUsV0FBVTtBQUFDLGlCQUFPO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxXQUFVO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFDLGlCQUFPO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxXQUFVO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxXQUFVO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxNQUFJLEdBQUUsR0FBRSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsY0FBRSxJQUFFLFlBQVUsSUFBRSxVQUFRLENBQUMsQ0FBQyxLQUFHLE1BQUksS0FBRyxhQUFXLElBQUU7QUFBSSxpQkFBSztBQUFFLGNBQUUsSUFBSSxLQUFLLE1BQUksQ0FBQztBQUFFLFlBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLGNBQWM7QUFBRSxZQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLGNBQWM7QUFBRSxZQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFlBQVk7QUFBRSxZQUFFLElBQUUsT0FDaGYsTUFBSSxDQUFDLElBQUUsRUFBRSxXQUFXO0FBQUUsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxZQUFZO0FBQUUsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxlQUFlLElBQUU7QUFBSyxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLFVBQVU7QUFBRSxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsS0FBRyxFQUFFLFFBQVEsSUFBRSxLQUFLLElBQUksRUFBRSxlQUFlLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsS0FBRyxRQUFNO0FBQUEsUUFBQyxHQUFFLEdBQUUsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLGNBQUUsSUFBRSxZQUFVLElBQUUsVUFBUSxDQUFDLENBQUMsS0FBRyxNQUFJLEtBQUcsYUFBVyxJQUFFO0FBQUksaUJBQUs7QUFBRSxjQUFFLElBQUksS0FBSyxNQUFJLENBQUM7QUFBRSxZQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxXQUFXO0FBQUUsWUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxXQUFXO0FBQUUsWUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxTQUFTO0FBQUUsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxRQUFRO0FBQUUsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxTQUFTO0FBQUUsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxZQUFZLElBQUU7QUFBSyxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLE9BQU87QUFDemYsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEtBQUcsRUFBRSxFQUFFLFlBQVksQ0FBQyxJQUFFLEtBQUcsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFFLEVBQUUsUUFBUSxJQUFFLElBQUU7QUFBRSxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLEtBQUcsRUFBRSxrQkFBa0I7QUFBRyxjQUFHLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUMsRUFBRyxrQkFBa0I7QUFBRSxjQUFJLElBQUcsSUFBSSxLQUFLLEVBQUUsWUFBWSxHQUFFLEdBQUUsQ0FBQyxFQUFHLGtCQUFrQjtBQUFFLFlBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxLQUFHLEtBQUcsS0FBRyxFQUFFLGtCQUFrQixLQUFHLEtBQUssSUFBSSxHQUFFLENBQUMsS0FBRztBQUFBLFFBQUMsR0FBRSxHQUFFLFNBQVMsR0FBRTtBQUFDLGlCQUFLO0FBQUUsY0FBSSxJQUFFLElBQUksS0FBSyxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxNQUFLLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLEVBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRSxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFFLEVBQUUsa0JBQWtCLEdBQUUsSUFBRyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDLEVBQUcsa0JBQWtCLEdBQzFnQixJQUFHLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUMsRUFBRyxrQkFBa0IsR0FBRSxJQUFFLEtBQUssSUFBSSxHQUFFLENBQUM7QUFBRSxjQUFFLElBQUUsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsT0FBTyxLQUFHLEtBQUcsS0FBRyxDQUFDLElBQUUsSUFBRSxNQUFJLEtBQUcsT0FBSyxJQUFFLEtBQUssSUFBSSxHQUFFLENBQUMsR0FBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLElBQUUsUUFBTSxJQUFFLElBQUUsSUFBRSxLQUFHLEVBQUU7QUFBRyxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLE9BQU87QUFBRSxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsS0FBRyxFQUFFLEVBQUUsWUFBWSxDQUFDLElBQUUsS0FBRyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUUsRUFBRSxRQUFRLElBQUUsSUFBRTtBQUFFLFlBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxZQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxZQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFNBQVM7QUFBRSxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLFFBQVE7QUFBRSxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLFNBQVM7QUFBRSxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLFFBQVE7QUFBRSxjQUFFLEVBQUUsUUFBUTtBQUFFLGdCQUFNLENBQUMsS0FBRyxFQUFFLEdBQUcsTUFBSSxNQUFJLENBQUMsSUFBRSxJQUFHLElBQUUsTUFDamYsS0FBRztBQUFJLGlCQUFPLElBQUksSUFBRSxHQUFFLEtBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFFLElBQUUsSUFBRSxDQUFDLEtBQUssTUFBTSxJQUFFLFVBQVUsTUFBSSxJQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxJQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQUksTUFBSSxVQUFVLE1BQUksSUFBRSxFQUFFLEdBQUUsTUFBSTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQyxpQkFBTTtBQUFBLFFBQUcsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxT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QztBQUFFLGVBQUcsRUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFO0FBQUUsaUJBQUcsRUFBRSxTQUFPO0FBQUEsVUFBQyxDQUFDO0FBQUUsaUJBQU87QUFBQSxRQUFDO0FBQUMsaUJBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxjQUFHO0FBQUUsbUJBQU8sRUFBRSxJQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUUsaUJBQUs7QUFBRSxpQkFBSztBQUFFLGNBQUksSUFBRSxHQUFHO0FBQUUsWUFBRSxFQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRTtBQUFPLGNBQUksSUFBRTtBQUFFLFlBQUUsUUFBUSxPQUFHLEtBQUcsRUFBRSxTQUFPLENBQUM7QUFBRSxZQUFFLEVBQUUsTUFBSSxNQUFJLENBQUMsSUFBRTtBQUFFLGlCQUFPO0FBQUEsUUFBQztBQUFDLGlCQUFTLEdBQUcsR0FBRTtBQUFDLGlCQUFPLElBQUUsRUFBRSxJQUFHLEdBQUUsQ0FBQyxJQUFFO0FBQUEsUUFBRTtBQUFDLGlCQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGlCQUFPLElBQUUsRUFBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQyxJQUFFO0FBQUEsUUFBRTtBQUN0YyxpQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGlCQUFPLElBQUUsRUFBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDLElBQUU7QUFBQSxRQUFFO0FBQUMsWUFBSSxLQUFHLENBQUMsTUFBSyxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQUUsaUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsY0FBRztBQUFFLG1CQUFPLEVBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxpQkFBSztBQUFFLGlCQUFLO0FBQUUsaUJBQUs7QUFBRSxtQkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFJO0FBQUMsZ0JBQUksSUFBRSxFQUFFLEVBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFFLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDO0FBQUUsaUJBQUc7QUFBRSxxQkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQyxrQkFBSSxJQUFFLEVBQUUsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLElBQUUsR0FBRyxDQUFDO0FBQUUsb0JBQUksS0FBRyxPQUFLLE1BQUksTUFBSSxJQUFFLEtBQUcsR0FBRyxHQUFHLEdBQUUsQ0FBQyxDQUFDLEdBQUUsRUFBRSxTQUFPLEtBQUcsRUFBRSxLQUFLLENBQUM7QUFBQSxZQUFDO0FBQUMsaUJBQUc7QUFBQSxVQUFDO0FBQUMsWUFBRSxFQUFFLE1BQUksTUFBSSxDQUFDLElBQUU7QUFBRSxpQkFBTztBQUFBLFFBQUM7QUFBQyxZQUFJLEtBQUcsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRSxHQUFFLEtBQUcsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRTtBQUNuYixpQkFBUyxHQUFHLEdBQUU7QUFBQyxjQUFJLElBQUUsTUFBTSxHQUFHLENBQUMsSUFBRSxDQUFDO0FBQUUsYUFBRyxHQUFFLEdBQUUsR0FBRSxFQUFFLE1BQU07QUFBRSxpQkFBTztBQUFBLFFBQUM7QUFBQyxZQUFJLEtBQUcsQ0FBQyxHQUFFLE1BQUk7QUFBQyxhQUFHLEVBQUUsSUFBSSxHQUFFLE1BQUksQ0FBQztBQUFBLFFBQUM7QUFDaEcsaUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQVMsRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGlCQUFJLElBQUUsWUFBVSxPQUFPLElBQUUsRUFBRSxTQUFTLElBQUUsS0FBRyxJQUFHLEVBQUUsU0FBTztBQUFHLGtCQUFFLEVBQUUsQ0FBQyxJQUFFO0FBQUUsbUJBQU87QUFBQSxVQUFDO0FBQUMsbUJBQVMsRUFBRSxHQUFFLEdBQUU7QUFBQyxtQkFBTyxFQUFFLEdBQUUsR0FBRSxHQUFHO0FBQUEsVUFBQztBQUFDLG1CQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUMscUJBQVMsRUFBRSxJQUFHO0FBQUMscUJBQU8sSUFBRSxLQUFHLEtBQUcsSUFBRSxLQUFHLElBQUU7QUFBQSxZQUFDO0FBQUMsZ0JBQUk7QUFBRSxtQkFBSyxJQUFFLEVBQUUsRUFBRSxZQUFZLElBQUUsRUFBRSxZQUFZLENBQUMsTUFBSSxPQUFLLElBQUUsRUFBRSxFQUFFLFNBQVMsSUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFLLElBQUUsRUFBRSxFQUFFLFFBQVEsSUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFHLG1CQUFPO0FBQUEsVUFBQztBQUFDLG1CQUFTLEVBQUUsR0FBRTtBQUFDLG9CQUFPLEVBQUUsT0FBTyxHQUFFO0FBQUEsY0FBQyxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU87QUFBQSxjQUFFLEtBQUs7QUFBRSx1QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSTtBQUFBLGtCQUFLLEVBQUUsWUFBWTtBQUFBLGtCQUM1ZjtBQUFBLGtCQUFFO0FBQUEsZ0JBQUM7QUFBQSxjQUFFLEtBQUs7QUFBRSx1QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsWUFBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxFQUFFLEdBQUU7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBRyxpQkFBSSxJQUFFLElBQUksS0FBTSxJQUFJLEtBQUssRUFBRSxLQUFHLE1B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RUFBRSxFQUFFLFVBQVUsR0FBRSxDQUFDO0FBQUEsWUFDcmYsTUFBSyxPQUFHLEdBQUcsRUFBRSxFQUFFO0FBQUEsWUFBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxVQUFVLEdBQUUsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEdBQUcsRUFBRSxFQUFFO0FBQUEsWUFBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEtBQUcsUUFBTSxNQUFJLEdBQUUsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxHQUFFLEdBQUc7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHO0FBQUMsa0JBQUUsRUFBRTtBQUFHLG1CQUFHLElBQUUsSUFBRSxLQUFHLEtBQUcsTUFBSSxLQUFHO0FBQUkscUJBQU8sRUFBRSxHQUFFLENBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUc7QUFBQyx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUcsRUFBRSxLQUFHLEdBQUUsTUFBSSxFQUFFLEVBQUUsS0FBRyxJQUFJLElBQUUsS0FBRyxJQUFJLEdBQUc7QUFBRTtBQUFDLHFCQUFPLEVBQUUsRUFBRSxLQUFHLEdBQUUsQ0FBQztBQUFBLFlBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsS0FBRyxHQUFFLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDO0FBQUEsWUFBRSxNQUFLLE1BQUk7QUFBQSxZQUFLLE1BQUssT0FBRyxLQUFHLEVBQUUsTUFBSSxLQUFHLEVBQUUsS0FBRyxPQUFLO0FBQUEsWUFBSyxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFB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LGNBQWEsRUFBRTtBQUN2QyxNQUFJLE9BQTJCO0FBQzdCLG9CQUFnQixTQUFTQSxjQUFhLENBQUM7QUFBQSxFQUN6QztBQUNGO0FBRUEsT0FBTyxlQUFlQyxLQUFJLFVBQVUsT0FBTyxFQUFDLE9BQU9DLFVBQVMsWUFBWSxLQUFJLENBQUM7IiwKICAibmFtZXMiOiBbImkiLCAiZW52IiwgIlRlbnNvciIsICJUZW5zb3IiLCAiSW5mZXJlbmNlU2Vzc2lvbiIsICJUZW5zb3IiLCAiVHJhaW5pbmdTZXNzaW9uIiwgIkluZmVyZW5jZVNlc3Npb24iLCAiVGVuc29yIiwgIlRyYWluaW5nU2Vzc2lvbiIsICJlbnYiLCAiam9pbiIsICJjcHVzIiwgIndhc20iLCAid2FzbSIsICJ3YXNtIiwgInJlYWRGaWxlIiwgInJlYWRGaWxlIiwgImVudiIsICJ3YXNtIiwgInRlbnNvciIsICJlcnJvckNvZGUiLCAiaSIsICJpbml0aWFsaXppbmciLCAiaW5pdGlhbGl6ZWQiLCAiYWJvcnRlZCIsICJjb3B5RnJvbUV4dGVybmFsQnVmZmVyIiwgImNyZWF0ZVNlc3Npb24iLCAicmVsZWFzZVNlc3Npb24iLCAicnVuIiwgImVuZFByb2ZpbGluZyIsICJlbnYiLCAiVGVuc29yIiwgImNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIiLCAiY3JlYXRlU2Vzc2lvbiIsICJyZWxlYXNlU2Vzc2lvbiIsICJydW4iLCAiZW5kUHJvZmlsaW5nIiwgImVudiIsICJ3YXNtIiwgImkiLCAidmVyc2lvbiIsICJ3YXNtQmFja2VuZCIsICJlbnYiLCAidmVyc2lvbiJdCn0K
