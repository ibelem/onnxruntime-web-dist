/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";
var ort = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // web/node_modules/onnxruntime-common/dist/esm/backend-impl.js
  var backends, backendsSortedByPriority, registerBackend, resolveBackend;
  var init_backend_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/backend-impl.js"() {
      backends = /* @__PURE__ */ new Map();
      backendsSortedByPriority = [];
      registerBackend = (name, backend, priority) => {
        if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
          const currentBackend = backends.get(name);
          if (currentBackend === void 0) {
            backends.set(name, { backend, priority });
          } else if (currentBackend.priority > priority) {
            return;
          } else if (currentBackend.priority === priority) {
            if (currentBackend.backend !== backend) {
              throw new Error(`cannot register backend "${name}" using priority ${priority}`);
            }
          }
          if (priority >= 0) {
            const i = backendsSortedByPriority.indexOf(name);
            if (i !== -1) {
              backendsSortedByPriority.splice(i, 1);
            }
            for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
              if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
                backendsSortedByPriority.splice(i2, 0, name);
                return;
              }
            }
            backendsSortedByPriority.push(name);
          }
          return;
        }
        throw new TypeError("not a valid backend");
      };
      resolveBackend = async (backendHints) => {
        const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
        const errors = [];
        for (const backendName of backendNames) {
          const backendInfo = backends.get(backendName);
          if (backendInfo) {
            if (backendInfo.initialized) {
              return backendInfo.backend;
            } else if (backendInfo.aborted) {
              continue;
            }
            const isInitializing = !!backendInfo.initPromise;
            try {
              if (!isInitializing) {
                backendInfo.initPromise = backendInfo.backend.init();
              }
              await backendInfo.initPromise;
              backendInfo.initialized = true;
              return backendInfo.backend;
            } catch (e) {
              if (!isInitializing) {
                errors.push({ name: backendName, err: e });
              }
              backendInfo.aborted = true;
            } finally {
              delete backendInfo.initPromise;
            }
          }
        }
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/backend.js
  var init_backend = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/backend.js"() {
      init_backend_impl();
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/version.js
  var version;
  var init_version = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/version.js"() {
      version = "1.17.0";
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/env-impl.js
  var logLevelValue, env;
  var init_env_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/env-impl.js"() {
      init_version();
      logLevelValue = "warning";
      env = {
        wasm: {},
        webgl: {},
        webgpu: {},
        versions: { common: version },
        set logLevel(value) {
          if (value === void 0) {
            return;
          }
          if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
            throw new Error(`Unsupported logging level: ${value}`);
          }
          logLevelValue = value;
        },
        get logLevel() {
          return logLevelValue;
        }
      };
      Object.defineProperty(env, "logLevel", { enumerable: true });
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/env.js
  var env2;
  var init_env = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/env.js"() {
      init_env_impl();
      env2 = env;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js
  var tensorToDataURL, tensorToImageData;
  var init_tensor_conversion_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"() {
      tensorToDataURL = (tensor, options) => {
        const canvas = document.createElement("canvas");
        canvas.width = tensor.dims[3];
        canvas.height = tensor.dims[2];
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          let width;
          let height;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
          }
          const inputformat = options?.format !== void 0 ? options.format : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          for (let i = 0; i < height; i++) {
            for (let j = 0; j < width; j++) {
              const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
              const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
              const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
              const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
              pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
              pixels2DContext.fillRect(j, i, 1, 1);
            }
          }
          return canvas.toDataURL();
        } else {
          throw new Error("Can not access image data");
        }
      };
      tensorToImageData = (tensor, options) => {
        const pixels2DContext = document.createElement("canvas").getContext("2d");
        let image;
        if (pixels2DContext != null) {
          let width;
          let height;
          let channels;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[1];
            channels = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
            channels = tensor.dims[1];
          }
          const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          if (options !== void 0) {
            if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
              throw new Error("Tensor format doesn't match input tensor dims");
            }
          }
          const step = 4;
          let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          image = pixels2DContext.createImageData(width, height);
          for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
          }
        } else {
          throw new Error("Can not access image data");
        }
        return image;
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js
  var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
  var init_tensor_factory_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"() {
      init_tensor_impl();
      bufferToTensor = (buffer, options) => {
        if (buffer === void 0) {
          throw new Error("Image buffer must be defined");
        }
        if (options.height === void 0 || options.width === void 0) {
          throw new Error("Image height and width must be defined");
        }
        if (options.tensorLayout === "NHWC") {
          throw new Error("NHWC Tensor layout is not supported yet");
        }
        const { height, width } = options;
        const norm = options.norm ?? { mean: 255, bias: 0 };
        let normMean;
        let normBias;
        if (typeof norm.mean === "number") {
          normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
        } else {
          normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
        }
        if (typeof norm.bias === "number") {
          normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
        } else {
          normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
        }
        const inputformat = options.format !== void 0 ? options.format : "RGBA";
        const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
        const stride = height * width;
        const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGB") {
          step = 3;
          rImagePointer = 0;
          gImagePointer = 1;
          bImagePointer = 2;
          aImagePointer = -1;
        }
        if (outputformat === "RGBA") {
          aTensorPointer = stride * 3;
        } else if (outputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        } else if (outputformat === "BGR") {
          bTensorPointer = 0;
          gTensorPointer = stride;
          rTensorPointer = stride * 2;
        }
        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
          float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
          float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
          float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
          if (aTensorPointer !== -1 && aImagePointer !== -1) {
            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
          }
        }
        const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
        return outputTensor;
      };
      tensorFromImage = async (image, options) => {
        const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
        const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
        const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
        const isString = typeof image === "string";
        let data;
        let bufferToTensorOptions = options ?? {};
        if (isHTMLImageEle) {
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            let height = image.height;
            let width = image.width;
            if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
              height = options.resizedHeight;
              width = options.resizedWidth;
            }
            if (options !== void 0) {
              bufferToTensorOptions = options;
              if (options.tensorFormat !== void 0) {
                throw new Error("Image input config format must be RGBA for HTMLImageElement");
              } else {
                bufferToTensorOptions.tensorFormat = "RGBA";
              }
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            }
            pixels2DContext.drawImage(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isImageDataEle) {
          let height;
          let width;
          if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          } else {
            height = image.height;
            width = image.width;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
          }
          bufferToTensorOptions.format = "RGBA";
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          if (options !== void 0) {
            const tempCanvas = document.createElement("canvas");
            tempCanvas.width = width;
            tempCanvas.height = height;
            const pixels2DContext = tempCanvas.getContext("2d");
            if (pixels2DContext != null) {
              pixels2DContext.putImageData(image, 0, 0);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
            } else {
              throw new Error("Can not access image data");
            }
          } else {
            data = image.data;
          }
        } else if (isImageBitmap) {
          if (options === void 0) {
            throw new Error("Please provide image config with format for Imagebitmap");
          }
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            const height = image.height;
            const width = image.width;
            pixels2DContext.drawImage(image, 0, 0, width, height);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
            return bufferToTensor(data, bufferToTensorOptions);
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isString) {
          return new Promise((resolve, reject) => {
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            if (!image || !context) {
              return reject();
            }
            const newImage = new Image();
            newImage.crossOrigin = "Anonymous";
            newImage.src = image;
            newImage.onload = () => {
              canvas.width = newImage.width;
              canvas.height = newImage.height;
              context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
              const img = context.getImageData(0, 0, canvas.width, canvas.height);
              bufferToTensorOptions.height = canvas.height;
              bufferToTensorOptions.width = canvas.width;
              resolve(bufferToTensor(img.data, bufferToTensorOptions));
            };
          });
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        if (data !== void 0) {
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
      };
      tensorFromTexture = (texture, options) => {
        const { width, height, download, dispose } = options;
        const dims = [1, height, width, 4];
        return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
      };
      tensorFromGpuBuffer = (gpuBuffer, options) => {
        const { dataType, dims, download, dispose } = options;
        return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
      };
      tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js
  var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
  var init_tensor_impl_type_mapping = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"() {
      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
        ["float32", Float32Array],
        ["uint8", Uint8Array],
        ["int8", Int8Array],
        ["uint16", Uint16Array],
        ["float16", Uint16Array],
        ["int16", Int16Array],
        ["int32", Int32Array],
        ["bool", Uint8Array],
        ["float64", Float64Array],
        ["uint32", Uint32Array]
      ]);
      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
        [Float32Array, "float32"],
        [Uint8Array, "uint8"],
        [Int8Array, "int8"],
        [Uint16Array, "uint16"],
        [Int16Array, "int16"],
        [Int32Array, "int32"],
        [Float64Array, "float64"],
        [Uint32Array, "uint32"]
      ]);
      isBigIntChecked = false;
      checkBigInt = () => {
        if (!isBigIntChecked) {
          isBigIntChecked = true;
          const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
          const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
          if (isBigInt64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
          }
          if (isBigUint64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
          }
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js
  var calculateSize, tensorReshape;
  var init_tensor_utils_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js"() {
      init_tensor_impl();
      calculateSize = (dims) => {
        let size = 1;
        for (let i = 0; i < dims.length; i++) {
          const dim = dims[i];
          if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
          }
          if (dim < 0) {
            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
          }
          size *= dim;
        }
        return size;
      };
      tensorReshape = (tensor, dims) => {
        switch (tensor.location) {
          case "cpu":
            return new Tensor(tensor.type, tensor.data, dims);
          case "cpu-pinned":
            return new Tensor({
              location: "cpu-pinned",
              data: tensor.data,
              type: tensor.type,
              dims
            });
          case "texture":
            return new Tensor({
              location: "texture",
              texture: tensor.texture,
              type: tensor.type,
              dims
            });
          case "gpu-buffer":
            return new Tensor({
              location: "gpu-buffer",
              gpuBuffer: tensor.gpuBuffer,
              type: tensor.type,
              dims
            });
          default:
            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js
  var Tensor;
  var init_tensor_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js"() {
      init_tensor_conversion_impl();
      init_tensor_factory_impl();
      init_tensor_impl_type_mapping();
      init_tensor_utils_impl();
      Tensor = class {
        /**
         * implementation.
         */
        constructor(arg0, arg1, arg2) {
          checkBigInt();
          let type;
          let dims;
          if (typeof arg0 === "object" && "location" in arg0) {
            this.dataLocation = arg0.location;
            type = arg0.type;
            dims = arg0.dims;
            switch (arg0.location) {
              case "cpu-pinned": {
                const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
                if (!expectedTypedArrayConstructor) {
                  throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
                }
                if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                  throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
                }
                this.cpuData = arg0.data;
                break;
              }
              case "texture": {
                if (type !== "float32") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
                }
                this.gpuTextureData = arg0.texture;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              case "gpu-buffer": {
                if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
                }
                this.gpuBufferData = arg0.gpuBuffer;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              default:
                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
            }
          } else {
            let data;
            let maybeDims;
            if (typeof arg0 === "string") {
              type = arg0;
              maybeDims = arg2;
              if (arg0 === "string") {
                if (!Array.isArray(arg1)) {
                  throw new TypeError("A string tensor's data must be a string array.");
                }
                data = arg1;
              } else {
                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === void 0) {
                  throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                }
                if (Array.isArray(arg1)) {
                  if (arg0 === "float16") {
                    throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                  } else if (arg0 === "uint64" || arg0 === "int64") {
                    data = typedArrayConstructor.from(arg1, BigInt);
                  } else {
                    data = typedArrayConstructor.from(arg1);
                  }
                } else if (arg1 instanceof typedArrayConstructor) {
                  data = arg1;
                } else {
                  throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                }
              }
            } else {
              maybeDims = arg1;
              if (Array.isArray(arg0)) {
                if (arg0.length === 0) {
                  throw new TypeError("Tensor type cannot be inferred from an empty array.");
                }
                const firstElementType = typeof arg0[0];
                if (firstElementType === "string") {
                  type = "string";
                  data = arg0;
                } else if (firstElementType === "boolean") {
                  type = "bool";
                  data = Uint8Array.from(arg0);
                } else {
                  throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                }
              } else {
                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === void 0) {
                  throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                }
                type = mappedType;
                data = arg0;
              }
            }
            if (maybeDims === void 0) {
              maybeDims = [data.length];
            } else if (!Array.isArray(maybeDims)) {
              throw new TypeError("A tensor's dims must be a number array");
            }
            dims = maybeDims;
            this.cpuData = data;
            this.dataLocation = "cpu";
          }
          const size = calculateSize(dims);
          if (this.cpuData && size !== this.cpuData.length) {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
          this.type = type;
          this.dims = dims;
          this.size = size;
        }
        // #endregion
        // #region factory
        static async fromImage(image, options) {
          return tensorFromImage(image, options);
        }
        static fromTexture(texture, options) {
          return tensorFromTexture(texture, options);
        }
        static fromGpuBuffer(gpuBuffer, options) {
          return tensorFromGpuBuffer(gpuBuffer, options);
        }
        static fromPinnedBuffer(type, buffer, dims) {
          return tensorFromPinnedBuffer(type, buffer, dims);
        }
        // #endregion
        // #region conversions
        toDataURL(options) {
          return tensorToDataURL(this, options);
        }
        toImageData(options) {
          return tensorToImageData(this, options);
        }
        // #endregion
        // #region properties
        get data() {
          this.ensureValid();
          if (!this.cpuData) {
            throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
          }
          return this.cpuData;
        }
        get location() {
          return this.dataLocation;
        }
        get texture() {
          this.ensureValid();
          if (!this.gpuTextureData) {
            throw new Error("The data is not stored as a WebGL texture.");
          }
          return this.gpuTextureData;
        }
        get gpuBuffer() {
          this.ensureValid();
          if (!this.gpuBufferData) {
            throw new Error("The data is not stored as a WebGPU buffer.");
          }
          return this.gpuBufferData;
        }
        // #endregion
        // #region methods
        async getData(releaseData) {
          this.ensureValid();
          switch (this.dataLocation) {
            case "cpu":
            case "cpu-pinned":
              return this.data;
            case "texture":
            case "gpu-buffer": {
              if (!this.downloader) {
                throw new Error("The current tensor is not created with a specified data downloader.");
              }
              if (this.isDownloading) {
                throw new Error("The current tensor is being downloaded.");
              }
              try {
                this.isDownloading = true;
                const data = await this.downloader();
                this.downloader = void 0;
                this.dataLocation = "cpu";
                this.cpuData = data;
                if (releaseData && this.disposer) {
                  this.disposer();
                  this.disposer = void 0;
                }
                return data;
              } finally {
                this.isDownloading = false;
              }
            }
            default:
              throw new Error(`cannot get data from location: ${this.dataLocation}`);
          }
        }
        dispose() {
          if (this.isDownloading) {
            throw new Error("The current tensor is being downloaded.");
          }
          if (this.disposer) {
            this.disposer();
            this.disposer = void 0;
          }
          this.cpuData = void 0;
          this.gpuTextureData = void 0;
          this.gpuBufferData = void 0;
          this.downloader = void 0;
          this.isDownloading = void 0;
          this.dataLocation = "none";
        }
        // #endregion
        // #region tensor utilities
        ensureValid() {
          if (this.dataLocation === "none") {
            throw new Error("The tensor is disposed.");
          }
        }
        reshape(dims) {
          this.ensureValid();
          if (this.downloader || this.disposer) {
            throw new Error("Cannot reshape a tensor that owns GPU resource.");
          }
          return tensorReshape(this, dims);
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor.js
  var Tensor2;
  var init_tensor = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor.js"() {
      init_tensor_impl();
      Tensor2 = Tensor;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js
  var InferenceSession;
  var init_inference_session_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js"() {
      init_backend_impl();
      init_tensor();
      InferenceSession = class _InferenceSession {
        constructor(handler) {
          this.handler = handler;
        }
        async run(feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (this.outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of this.outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of this.inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of this.outputNames) {
              fetches[name] = null;
            }
          }
          const results = await this.handler.run(feeds, fetches, options);
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async release() {
          return this.handler.dispose();
        }
        static async create(arg0, arg1, arg2, arg3) {
          let filePathOrUint8Array;
          let options = {};
          if (typeof arg0 === "string") {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof Uint8Array) {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
            const buffer = arg0;
            let byteOffset = 0;
            let byteLength = arg0.byteLength;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 === "number") {
              byteOffset = arg1;
              if (!Number.isSafeInteger(byteOffset)) {
                throw new RangeError("'byteOffset' must be an integer.");
              }
              if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
              }
              byteLength = arg0.byteLength - byteOffset;
              if (typeof arg2 === "number") {
                byteLength = arg2;
                if (!Number.isSafeInteger(byteLength)) {
                  throw new RangeError("'byteLength' must be an integer.");
                }
                if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                  throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
                }
                if (typeof arg3 === "object" && arg3 !== null) {
                  options = arg3;
                } else if (typeof arg3 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'byteLength' must be a number.");
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
          } else {
            throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
          }
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
          return new _InferenceSession(handler);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/inference-session.js
  var InferenceSession2;
  var init_inference_session = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/inference-session.js"() {
      init_inference_session_impl();
      InferenceSession2 = InferenceSession;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/onnx-value.js
  var init_onnx_value = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/onnx-value.js"() {
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js
  var noBackendErrMsg, TrainingSession;
  var init_training_session_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js"() {
      init_backend_impl();
      init_tensor();
      noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
      TrainingSession = class _TrainingSession {
        constructor(handler, hasOptimizerModel, hasEvalModel) {
          this.handler = handler;
          this.hasOptimizerModel = hasOptimizerModel;
          this.hasEvalModel = hasEvalModel;
        }
        get trainingInputNames() {
          return this.handler.inputNames;
        }
        get trainingOutputNames() {
          return this.handler.outputNames;
        }
        get evalInputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalInputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        get evalOutputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalOutputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        static async create(trainingOptions, sessionOptions) {
          const evalModel = trainingOptions.evalModel || "";
          const optimizerModel = trainingOptions.optimizerModel || "";
          const options = sessionOptions || {};
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          if (backend.createTrainingSessionHandler) {
            const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, options);
            return new _TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);
          } else {
            throw new Error(noBackendErrMsg);
          }
        }
        /**
         * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
         * the given parameters to SessionHandler.FetchesType and RunOptions.
         *
         * @param inputNames the feeds object is checked that they contain all input names in the provided list of input
         * names.
         * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output
         * names.
         * @param feeds the required input
         * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
         * @param arg2 optional RunOptions object.
         * @returns
         */
        typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of outputNames) {
              fetches[name] = null;
            }
          }
          return [fetches, options];
        }
        /**
         * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
         * and changes it into a map of Tensors.
         *
         * @param results
         * @returns
         */
        convertHandlerReturnTypeToMapOfTensors(results) {
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async runTrainStep(feeds, arg1, arg2) {
          const [fetches, options] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);
          const results = await this.handler.runTrainStep(feeds, fetches, options);
          return this.convertHandlerReturnTypeToMapOfTensors(results);
        }
        async runOptimizerStep(options) {
          if (this.hasOptimizerModel) {
            await this.handler.runOptimizerStep(options || {});
          } else {
            throw new Error("This TrainingSession has no OptimizerModel loaded.");
          }
        }
        async runEvalStep(feeds, arg1, arg2) {
          if (this.hasEvalModel) {
            const [fetches, options] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);
            const results = await this.handler.runEvalStep(feeds, fetches, options);
            return this.convertHandlerReturnTypeToMapOfTensors(results);
          } else {
            throw new Error("This TrainingSession has no EvalModel loaded.");
          }
        }
        async getParametersSize(trainableOnly = true) {
          return this.handler.getParametersSize(trainableOnly);
        }
        async loadParametersBuffer(array, trainableOnly = true) {
          const paramsSize = await this.getParametersSize(trainableOnly);
          if (array.length !== 4 * paramsSize) {
            throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
          }
          return this.handler.loadParametersBuffer(array, trainableOnly);
        }
        async getContiguousParameters(trainableOnly = true) {
          return this.handler.getContiguousParameters(trainableOnly);
        }
        async release() {
          return this.handler.dispose();
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/training-session.js
  var TrainingSession2;
  var init_training_session = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/training-session.js"() {
      init_training_session_impl();
      TrainingSession2 = TrainingSession;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    InferenceSession: () => InferenceSession2,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  var init_esm = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/index.js"() {
      init_backend();
      init_env();
      init_inference_session();
      init_tensor();
      init_onnx_value();
      init_training_session();
    }
  });

  // nodejs-ignore:node:os
  var cpus;
  var init_node_os = __esm({
    "nodejs-ignore:node:os"() {
      cpus = void 0;
    }
  });

  // nodejs-ignore:node:path
  var join;
  var init_node_path = __esm({
    "nodejs-ignore:node:path"() {
      join = void 0;
    }
  });

  // nodejs-ignore:fs
  var fs_exports = {};
  __export(fs_exports, {
    readFile: () => readFile
  });
  var readFile;
  var init_fs = __esm({
    "nodejs-ignore:fs"() {
      readFile = void 0;
    }
  });

  // nodejs-ignore:path
  var path_exports = {};
  __export(path_exports, {
    join: () => join2
  });
  var join2;
  var init_path = __esm({
    "nodejs-ignore:path"() {
      join2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-training-wasm-simd.js
  var require_ort_training_wasm_simd = __commonJS({
    "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {
      "use strict";
      var ortWasm = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          var d = moduleArg, k, l;
          d.ready = new Promise((a, b) => {
            k = a;
            l = b;
          });
          var r = Object.assign({}, d), v = "./this.program", aa = "object" == typeof window, x = "function" == typeof importScripts, ba = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, y = "", A, B, C;
          if (ba) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), D = (init_path(), __toCommonJS(path_exports));
            y = x ? D.dirname(y) + "/" : __dirname + "/";
            A = (a, b) => {
              a = a.startsWith("file://") ? new URL(a) : D.normalize(a);
              return fs.readFileSync(a, b ? void 0 : "utf8");
            };
            C = (a) => {
              a = A(a, true);
              a.buffer || (a = new Uint8Array(a));
              return a;
            };
            B = (a, b, c, e = true) => {
              a = a.startsWith("file://") ? new URL(a) : D.normalize(a);
              fs.readFile(a, e ? void 0 : "utf8", (g, h) => {
                g ? c(g) : b(e ? h.buffer : h);
              });
            };
            !d.thisProgram && 1 < process.argv.length && (v = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            d.inspect = () => "[Emscripten Module object]";
          } else if (aa || x)
            x ? y = self.location.href : "undefined" != typeof document && document.currentScript && (y = document.currentScript.src), _scriptDir && (y = _scriptDir), 0 !== y.indexOf("blob:") ? y = y.substr(0, y.replace(/[?#].*/, "").lastIndexOf("/") + 1) : y = "", A = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, x && (C = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), B = (a, b, c) => {
              var e = new XMLHttpRequest();
              e.open("GET", a, true);
              e.responseType = "arraybuffer";
              e.onload = () => {
                200 == e.status || 0 == e.status && e.response ? b(e.response) : c();
              };
              e.onerror = c;
              e.send(null);
            };
          var ca = d.print || console.log.bind(console), E = d.printErr || console.error.bind(console);
          Object.assign(d, r);
          r = null;
          d.thisProgram && (v = d.thisProgram);
          var F;
          d.wasmBinary && (F = d.wasmBinary);
          var noExitRuntime = d.noExitRuntime || true;
          "object" != typeof WebAssembly && G("no native wasm support detected");
          var H, I, da = false, J, K, L, M;
          function ea() {
            var a = H.buffer;
            d.HEAP8 = J = new Int8Array(a);
            d.HEAP16 = new Int16Array(a);
            d.HEAP32 = L = new Int32Array(a);
            d.HEAPU8 = K = new Uint8Array(a);
            d.HEAPU16 = new Uint16Array(a);
            d.HEAPU32 = M = new Uint32Array(a);
            d.HEAPF32 = new Float32Array(a);
            d.HEAPF64 = new Float64Array(a);
          }
          var fa = [], ha = [], ia = [];
          function ja() {
            var a = d.preRun.shift();
            fa.unshift(a);
          }
          var N = 0, O = null, P = null;
          function G(a) {
            if (d.onAbort)
              d.onAbort(a);
            a = "Aborted(" + a + ")";
            E(a);
            da = true;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            l(a);
            throw a;
          }
          function ka(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var Q;
          Q = "ort-training-wasm-simd.wasm";
          if (!ka(Q)) {
            var la = Q;
            Q = d.locateFile ? d.locateFile(la, y) : y + la;
          }
          function ma(a) {
            if (a == Q && F)
              return new Uint8Array(F);
            if (C)
              return C(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function na(a) {
            if (!F && (aa || x)) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => ma(a));
              if (B)
                return new Promise((b, c) => {
                  B(a, (e) => b(new Uint8Array(e)), c);
                });
            }
            return Promise.resolve().then(() => ma(a));
          }
          function oa(a, b, c) {
            return na(a).then((e) => WebAssembly.instantiate(e, b)).then((e) => e).then(c, (e) => {
              E("failed to asynchronously prepare wasm: " + e);
              G(e);
            });
          }
          function pa(a, b) {
            var c = Q;
            return F || "function" != typeof WebAssembly.instantiateStreaming || ka(c) || c.startsWith("file://") || ba || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((e) => WebAssembly.instantiateStreaming(e, a).then(b, function(g) {
              E("wasm streaming compile failed: " + g);
              E("falling back to ArrayBuffer instantiation");
              return oa(c, a, b);
            }));
          }
          var R, S = (a) => {
            for (; 0 < a.length; )
              a.shift()(d);
          };
          function qa(a) {
            this.Ja = a - 24;
            this.Na = function(b) {
              M[this.Ja + 4 >> 2 >>> 0] = b;
            };
            this.Ma = function(b) {
              M[this.Ja + 8 >> 2 >>> 0] = b;
            };
            this.Ka = function(b, c) {
              this.La();
              this.Na(b);
              this.Ma(c);
            };
            this.La = function() {
              M[this.Ja + 16 >> 2 >>> 0] = 0;
            };
          }
          var ra = 0, sa = 0, ta = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, ua = (a, b, c) => {
            b >>>= 0;
            var e = b + c;
            for (c = b; a[c] && !(c >= e); )
              ++c;
            if (16 < c - b && a.buffer && ta)
              return ta.decode(a.subarray(b, c));
            for (e = ""; b < c; ) {
              var g = a[b++];
              if (g & 128) {
                var h = a[b++] & 63;
                if (192 == (g & 224))
                  e += String.fromCharCode((g & 31) << 6 | h);
                else {
                  var m = a[b++] & 63;
                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;
                  65536 > g ? e += String.fromCharCode(g) : (g -= 65536, e += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
                }
              } else
                e += String.fromCharCode(g);
            }
            return e;
          }, T = (a, b) => (a >>>= 0) ? ua(K, a, b) : "", U = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var e = a.charCodeAt(c);
              127 >= e ? b++ : 2047 >= e ? b += 2 : 55296 <= e && 57343 >= e ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, V = (a, b, c, e) => {
            c >>>= 0;
            if (!(0 < e))
              return 0;
            var g = c;
            e = c + e - 1;
            for (var h = 0; h < a.length; ++h) {
              var m = a.charCodeAt(h);
              if (55296 <= m && 57343 >= m) {
                var q = a.charCodeAt(++h);
                m = 65536 + ((m & 1023) << 10) | q & 1023;
              }
              if (127 >= m) {
                if (c >= e)
                  break;
                b[c++ >>> 0] = m;
              } else {
                if (2047 >= m) {
                  if (c + 1 >= e)
                    break;
                  b[c++ >>> 0] = 192 | m >> 6;
                } else {
                  if (65535 >= m) {
                    if (c + 2 >= e)
                      break;
                    b[c++ >>> 0] = 224 | m >> 12;
                  } else {
                    if (c + 3 >= e)
                      break;
                    b[c++ >>> 0] = 240 | m >> 18;
                    b[c++ >>> 0] = 128 | m >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | m >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | m & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - g;
          }, W = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), va = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], wa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ba = (a) => {
            var b = U(a) + 1, c = Aa(b);
            c && V(a, K, c, b);
            return c;
          }, X = {}, Ca = () => {
            if (!Y) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(
                "-",
                "_"
              ) + ".UTF-8", _: v || "./this.program" }, b;
              for (b in X)
                void 0 === X[b] ? delete a[b] : a[b] = X[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              Y = c;
            }
            return Y;
          }, Y, Da = [null, [], []], Ea = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Fa = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Ga(a) {
            var b = Array(U(a) + 1);
            V(a, b, 0, b.length);
            return b;
          }
          function Ha(a, b, c, e) {
            function g(f, n, p) {
              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )
                f = p[0] + f;
              return f;
            }
            function h(f, n) {
              return g(f, n, "0");
            }
            function m(f, n) {
              function p(xa) {
                return 0 > xa ? -1 : 0 < xa ? 1 : 0;
              }
              var z;
              0 === (z = p(f.getFullYear() - n.getFullYear())) && 0 === (z = p(f.getMonth() - n.getMonth())) && (z = p(f.getDate() - n.getDate()));
              return z;
            }
            function q(f) {
              switch (f.getDay()) {
                case 0:
                  return new Date(f.getFullYear() - 1, 11, 29);
                case 1:
                  return f;
                case 2:
                  return new Date(f.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    f.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(f.getFullYear(), 0, 1);
                case 5:
                  return new Date(f.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(f.getFullYear() - 1, 11, 30);
              }
            }
            function w(f) {
              var n = f.Ea;
              for (f = new Date(new Date(f.Fa + 1900, 0, 1).getTime()); 0 < n; ) {
                var p = f.getMonth(), z = (W(f.getFullYear()) ? Ea : Fa)[p];
                if (n > z - f.getDate())
                  n -= z - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
                else {
                  f.setDate(f.getDate() + n);
                  break;
                }
              }
              p = new Date(f.getFullYear() + 1, 0, 4);
              n = q(new Date(
                f.getFullYear(),
                0,
                4
              ));
              p = q(p);
              return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            e >>>= 0;
            var t = L[e + 40 >> 2 >>> 0];
            e = { Qa: L[e >> 2 >>> 0], Pa: L[e + 4 >> 2 >>> 0], Ga: L[e + 8 >> 2 >>> 0], Ia: L[e + 12 >> 2 >>> 0], Ha: L[e + 16 >> 2 >>> 0], Fa: L[e + 20 >> 2 >>> 0], za: L[e + 24 >> 2 >>> 0], Ea: L[e + 28 >> 2 >>> 0], Sa: L[e + 32 >> 2 >>> 0], Oa: L[e + 36 >> 2 >>> 0], Ra: t ? T(t) : "" };
            c = T(c);
            t = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var u in t)
              c = c.replace(new RegExp(u, "g"), t[u]);
            var ya = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), za = "January February March April May June July August September October November December".split(" ");
            t = { "%a": (f) => ya[f.za].substring(0, 3), "%A": (f) => ya[f.za], "%b": (f) => za[f.Ha].substring(0, 3), "%B": (f) => za[f.Ha], "%C": (f) => h((f.Fa + 1900) / 100 | 0, 2), "%d": (f) => h(f.Ia, 2), "%e": (f) => g(f.Ia, 2, " "), "%g": (f) => w(f).toString().substring(2), "%G": (f) => w(f), "%H": (f) => h(f.Ga, 2), "%I": (f) => {
              f = f.Ga;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return h(f, 2);
            }, "%j": (f) => {
              for (var n = 0, p = 0; p <= f.Ha - 1; n += (W(f.Fa + 1900) ? Ea : Fa)[p++])
                ;
              return h(f.Ia + n, 3);
            }, "%m": (f) => h(f.Ha + 1, 2), "%M": (f) => h(f.Pa, 2), "%n": () => "\n", "%p": (f) => 0 <= f.Ga && 12 > f.Ga ? "AM" : "PM", "%S": (f) => h(f.Qa, 2), "%t": () => "	", "%u": (f) => f.za || 7, "%U": (f) => h(Math.floor((f.Ea + 7 - f.za) / 7), 2), "%V": (f) => {
              var n = Math.floor((f.Ea + 7 - (f.za + 6) % 7) / 7);
              2 >= (f.za + 371 - f.Ea - 2) % 7 && n++;
              if (n)
                53 == n && (p = (f.za + 371 - f.Ea) % 7, 4 == p || 3 == p && W(f.Fa) || (n = 1));
              else {
                n = 52;
                var p = (f.za + 7 - f.Ea - 1) % 7;
                (4 == p || 5 == p && W(f.Fa % 400 - 1)) && n++;
              }
              return h(n, 2);
            }, "%w": (f) => f.za, "%W": (f) => h(Math.floor((f.Ea + 7 - (f.za + 6) % 7) / 7), 2), "%y": (f) => (f.Fa + 1900).toString().substring(2), "%Y": (f) => f.Fa + 1900, "%z": (f) => {
              f = f.Oa;
              var n = 0 <= f;
              f = Math.abs(f) / 60;
              return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            }, "%Z": (f) => f.Ra, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (u in t)
              c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](e)));
            c = c.replace(/\0\0/g, "%");
            u = Ga(c);
            if (u.length > b)
              return 0;
            J.set(u, a >>> 0);
            return u.length - 1;
          }
          var Ja = {
            a: function(a, b, c) {
              a >>>= 0;
              new qa(a).Ka(b >>> 0, c >>> 0);
              ra = a;
              sa++;
              throw ra;
            },
            e: function() {
              return 0;
            },
            H: function() {
            },
            x: function() {
            },
            z: function() {
            },
            k: function() {
              return 0;
            },
            F: function() {
            },
            B: function() {
            },
            E: function() {
            },
            g: function() {
            },
            y: function() {
            },
            v: function() {
            },
            G: function() {
            },
            w: function() {
            },
            l: () => true,
            o: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              L[c >> 2 >>> 0] = a.getUTCSeconds();
              L[c + 4 >> 2 >>> 0] = a.getUTCMinutes();
              L[c + 8 >> 2 >>> 0] = a.getUTCHours();
              L[c + 12 >> 2 >>> 0] = a.getUTCDate();
              L[c + 16 >> 2 >>> 0] = a.getUTCMonth();
              L[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;
              L[c + 24 >> 2 >>> 0] = a.getUTCDay();
              L[c + 28 >> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
            },
            p: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              L[c >> 2 >>> 0] = a.getSeconds();
              L[c + 4 >> 2 >>> 0] = a.getMinutes();
              L[c + 8 >> 2 >>> 0] = a.getHours();
              L[c + 12 >> 2 >>> 0] = a.getDate();
              L[c + 16 >> 2 >>> 0] = a.getMonth();
              L[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;
              L[c + 24 >> 2 >>> 0] = a.getDay();
              L[c + 28 >> 2 >>> 0] = (W(a.getFullYear()) ? va : wa)[a.getMonth()] + a.getDate() - 1 | 0;
              L[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());
              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var e = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              L[c + 32 >> 2 >>> 0] = (b != e && a.getTimezoneOffset() == Math.min(e, b)) | 0;
            },
            q: function(a) {
              a >>>= 0;
              var b = new Date(L[a + 20 >> 2 >>> 0] + 1900, L[a + 16 >> 2 >>> 0], L[a + 12 >> 2 >>> 0], L[a + 8 >> 2 >>> 0], L[a + 4 >> 2 >>> 0], L[a >> 2 >>> 0], 0), c = L[a + 32 >> 2 >>> 0], e = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);
              0 > c ? L[a + 32 >> 2 >>> 0] = Number(g != h && m == e) : 0 < c != (m == e) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - e)));
              L[a + 24 >> 2 >>> 0] = b.getDay();
              L[a + 28 >> 2 >>> 0] = (W(b.getFullYear()) ? va : wa)[b.getMonth()] + b.getDate() - 1 | 0;
              L[a >> 2 >>> 0] = b.getSeconds();
              L[a + 4 >> 2 >>> 0] = b.getMinutes();
              L[a + 8 >> 2 >>> 0] = b.getHours();
              L[a + 12 >> 2 >>> 0] = b.getDate();
              L[a + 16 >> 2 >>> 0] = b.getMonth();
              L[a + 20 >> 2 >>> 0] = b.getYear();
              a = b.getTime() / 1e3;
              return Ia((R = a, 1 <= +Math.abs(R) ? 0 < R ? +Math.floor(R / 4294967296) >>> 0 : ~~+Math.ceil((R - +(~~R >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
            },
            m: function() {
              return -52;
            },
            n: function() {
            },
            t: function(a, b, c) {
              function e(w) {
                return (w = w.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? w[1] : "GMT";
              }
              c >>>= 0;
              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);
              g = h.getTimezoneOffset();
              var q = m.getTimezoneOffset();
              M[a >>> 0 >> 2 >>> 0] = 60 * Math.max(g, q);
              L[b >>> 0 >> 2 >>> 0] = Number(g != q);
              a = e(h);
              b = e(m);
              a = Ba(a);
              b = Ba(b);
              q < g ? (M[c >> 2 >>> 0] = a, M[c + 4 >> 2 >>> 0] = b) : (M[c >> 2 >>> 0] = b, M[c + 4 >> 2 >>> 0] = a);
            },
            d: () => {
              G("");
            },
            h: function() {
              return Date.now();
            },
            u: function() {
              return 4294901760;
            },
            b: () => performance.now(),
            I: function(a, b, c) {
              b >>>= 0;
              return K.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
            },
            s: function(a) {
              a >>>= 0;
              var b = K.length;
              if (4294901760 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var e = b * (1 + 0.2 / c);
                e = Math.min(e, a + 100663296);
                var g = Math;
                e = Math.max(a, e);
                a: {
                  g = g.min.call(g, 4294901760, e + (65536 - e % 65536) % 65536) - H.buffer.byteLength + 65535 >>> 16;
                  try {
                    H.grow(g);
                    ea();
                    var h = 1;
                    break a;
                  } catch (m) {
                  }
                  h = void 0;
                }
                if (h)
                  return true;
              }
              return false;
            },
            C: function(a, b) {
              a >>>= 0;
              b >>>= 0;
              var c = 0;
              Ca().forEach(function(e, g) {
                var h = b + c;
                g = M[a + 4 * g >> 2 >>> 0] = h;
                for (h = 0; h < e.length; ++h)
                  J[g++ >> 0 >>> 0] = e.charCodeAt(h);
                J[g >> 0 >>> 0] = 0;
                c += e.length + 1;
              });
              return 0;
            },
            D: function(a, b) {
              a >>>= 0;
              b >>>= 0;
              var c = Ca();
              M[a >> 2 >>> 0] = c.length;
              var e = 0;
              c.forEach(function(g) {
                e += g.length + 1;
              });
              M[b >> 2 >>> 0] = e;
              return 0;
            },
            f: () => 52,
            j: function() {
              return 52;
            },
            r: function() {
              return 70;
            },
            i: function(a, b, c, e) {
              b >>>= 0;
              c >>>= 0;
              e >>>= 0;
              for (var g = 0, h = 0; h < c; h++) {
                var m = M[b >> 2 >>> 0], q = M[b + 4 >> 2 >>> 0];
                b += 8;
                for (var w = 0; w < q; w++) {
                  var t = K[m + w >>> 0], u = Da[a];
                  0 === t || 10 === t ? ((1 === a ? ca : E)(ua(u, 0)), u.length = 0) : u.push(t);
                }
                g += q;
              }
              M[e >> 2 >>> 0] = g;
              return 0;
            },
            A: Ha,
            c: function(a, b, c, e) {
              return Ha(a >>> 0, b >>> 0, c >>> 0, e >>> 0);
            }
          };
          (function() {
            function a(c) {
              c = c.exports;
              I = c = Ka(c);
              H = I.J;
              ea();
              ha.unshift(I.K);
              N--;
              d.monitorRunDependencies && d.monitorRunDependencies(N);
              if (0 == N && (null !== O && (clearInterval(O), O = null), P)) {
                var e = P;
                P = null;
                e();
              }
              return c;
            }
            var b = { a: Ja };
            N++;
            d.monitorRunDependencies && d.monitorRunDependencies(N);
            if (d.instantiateWasm)
              try {
                return d.instantiateWasm(b, a);
              } catch (c) {
                E("Module.instantiateWasm callback failed with error: " + c), l(c);
              }
            pa(b, function(c) {
              a(c.instance);
            }).catch(l);
            return {};
          })();
          d._OrtInit = (a, b) => (d._OrtInit = I.L)(a, b);
          d._OrtGetLastError = (a, b) => (d._OrtGetLastError = I.M)(a, b);
          d._OrtCreateSessionOptions = (a, b, c, e, g, h, m, q, w, t) => (d._OrtCreateSessionOptions = I.N)(a, b, c, e, g, h, m, q, w, t);
          d._OrtAppendExecutionProvider = (a, b) => (d._OrtAppendExecutionProvider = I.O)(a, b);
          d._OrtAddFreeDimensionOverride = (a, b, c) => (d._OrtAddFreeDimensionOverride = I.P)(a, b, c);
          d._OrtAddSessionConfigEntry = (a, b, c) => (d._OrtAddSessionConfigEntry = I.Q)(a, b, c);
          d._OrtReleaseSessionOptions = (a) => (d._OrtReleaseSessionOptions = I.R)(a);
          d._OrtCreateSession = (a, b, c) => (d._OrtCreateSession = I.S)(a, b, c);
          d._OrtReleaseSession = (a) => (d._OrtReleaseSession = I.T)(a);
          d._OrtGetInputOutputCount = (a, b, c) => (d._OrtGetInputOutputCount = I.U)(a, b, c);
          d._OrtGetInputName = (a, b) => (d._OrtGetInputName = I.V)(a, b);
          d._OrtGetOutputName = (a, b) => (d._OrtGetOutputName = I.W)(a, b);
          d._OrtFree = (a) => (d._OrtFree = I.X)(a);
          d._OrtCreateTensor = (a, b, c, e, g, h) => (d._OrtCreateTensor = I.Y)(a, b, c, e, g, h);
          d._OrtGetTensorData = (a, b, c, e, g) => (d._OrtGetTensorData = I.Z)(a, b, c, e, g);
          d._OrtReleaseTensor = (a) => (d._OrtReleaseTensor = I._)(a);
          d._OrtCreateRunOptions = (a, b, c, e) => (d._OrtCreateRunOptions = I.$)(a, b, c, e);
          d._OrtAddRunConfigEntry = (a, b, c) => (d._OrtAddRunConfigEntry = I.aa)(a, b, c);
          d._OrtReleaseRunOptions = (a) => (d._OrtReleaseRunOptions = I.ba)(a);
          d._OrtCreateBinding = (a) => (d._OrtCreateBinding = I.ca)(a);
          d._OrtBindInput = (a, b, c) => (d._OrtBindInput = I.da)(a, b, c);
          d._OrtBindOutput = (a, b, c, e) => (d._OrtBindOutput = I.ea)(a, b, c, e);
          d._OrtClearBoundOutputs = (a) => (d._OrtClearBoundOutputs = I.fa)(a);
          d._OrtReleaseBinding = (a) => (d._OrtReleaseBinding = I.ga)(a);
          d._OrtRunWithBinding = (a, b, c, e, g) => (d._OrtRunWithBinding = I.ha)(a, b, c, e, g);
          d._OrtRun = (a, b, c, e, g, h, m, q) => (d._OrtRun = I.ia)(a, b, c, e, g, h, m, q);
          d._OrtEndProfiling = (a) => (d._OrtEndProfiling = I.ja)(a);
          d._OrtTrainingLoadCheckpoint = (a, b) => (d._OrtTrainingLoadCheckpoint = I.ka)(a, b);
          d._OrtTrainingReleaseCheckpoint = (a) => (d._OrtTrainingReleaseCheckpoint = I.la)(a);
          d._OrtTrainingCreateSession = (a, b, c, e, g, h, m, q) => (d._OrtTrainingCreateSession = I.ma)(a, b, c, e, g, h, m, q);
          d._OrtTrainingLazyResetGrad = (a) => (d._OrtTrainingLazyResetGrad = I.na)(a);
          d._OrtTrainingRunTrainStep = (a, b, c, e, g, h) => (d._OrtTrainingRunTrainStep = I.oa)(a, b, c, e, g, h);
          d._OrtTrainingOptimizerStep = (a, b) => (d._OrtTrainingOptimizerStep = I.pa)(a, b);
          d._OrtTrainingEvalStep = (a, b, c, e, g, h) => (d._OrtTrainingEvalStep = I.qa)(a, b, c, e, g, h);
          d._OrtTrainingGetParametersSize = (a, b, c) => (d._OrtTrainingGetParametersSize = I.ra)(a, b, c);
          d._OrtTrainingCopyParametersToBuffer = (a, b, c, e) => (d._OrtTrainingCopyParametersToBuffer = I.sa)(a, b, c, e);
          d._OrtTrainingCopyParametersFromBuffer = (a, b, c, e) => (d._OrtTrainingCopyParametersFromBuffer = I.ta)(a, b, c, e);
          d._OrtTrainingGetModelInputOutputCount = (a, b, c, e) => (d._OrtTrainingGetModelInputOutputCount = I.ua)(a, b, c, e);
          d._OrtTrainingGetModelInputOutputName = (a, b, c, e) => (d._OrtTrainingGetModelInputOutputName = I.va)(a, b, c, e);
          d._OrtTrainingReleaseSession = (a) => (d._OrtTrainingReleaseSession = I.wa)(a);
          var Aa = d._malloc = (a) => (Aa = d._malloc = I.xa)(a);
          d._free = (a) => (d._free = I.ya)(a);
          var Ia = (a) => (Ia = I.Aa)(a), La = () => (La = I.Ba)(), Ma = (a) => (Ma = I.Ca)(a), Na = (a) => (Na = I.Da)(a);
          function Ka(a) {
            a = Object.assign({}, a);
            var b = (e) => () => e() >>> 0, c = (e) => (g) => e(g) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.malloc = c(a.malloc);
            a.stackSave = b(a.stackSave);
            a.stackAlloc = c(a.stackAlloc);
            return a;
          }
          d.stackAlloc = Na;
          d.stackSave = La;
          d.stackRestore = Ma;
          d.UTF8ToString = T;
          d.stringToUTF8 = (a, b, c) => V(a, K, b, c);
          d.lengthBytesUTF8 = U;
          var Z;
          P = function Oa() {
            Z || Pa();
            Z || (P = Oa);
          };
          function Pa() {
            function a() {
              if (!Z && (Z = true, d.calledRun = true, !da)) {
                S(ha);
                k(d);
                if (d.onRuntimeInitialized)
                  d.onRuntimeInitialized();
                if (d.postRun)
                  for ("function" == typeof d.postRun && (d.postRun = [d.postRun]); d.postRun.length; ) {
                    var b = d.postRun.shift();
                    ia.unshift(b);
                  }
                S(ia);
              }
            }
            if (!(0 < N)) {
              if (d.preRun)
                for ("function" == typeof d.preRun && (d.preRun = [d.preRun]); d.preRun.length; )
                  ja();
              S(fa);
              0 < N || (d.setStatus ? (d.setStatus("Running..."), setTimeout(function() {
                setTimeout(function() {
                  d.setStatus("");
                }, 1);
                a();
              }, 1)) : a());
            }
          }
          if (d.preInit)
            for ("function" == typeof d.preInit && (d.preInit = [d.preInit]); 0 < d.preInit.length; )
              d.preInit.pop()();
          Pa();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasm;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasm);
    }
  });

  // nodejs-ignore:worker_threads
  var require_worker_threads = __commonJS({
    "nodejs-ignore:worker_threads"() {
    }
  });

  // nodejs-ignore:perf_hooks
  var require_perf_hooks = __commonJS({
    "nodejs-ignore:perf_hooks"() {
    }
  });

  // nodejs-ignore:os
  var os_exports = {};
  __export(os_exports, {
    cpus: () => cpus2
  });
  var cpus2;
  var init_os = __esm({
    "nodejs-ignore:os"() {
      cpus2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.js
  var require_ort_wasm_threaded = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
      "use strict";
      var ortWasmThreaded = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          function aa() {
            d.buffer != l.buffer && m();
            return l;
          }
          function n() {
            d.buffer != l.buffer && m();
            return ba;
          }
          function p() {
            d.buffer != l.buffer && m();
            return ca;
          }
          function r() {
            d.buffer != l.buffer && m();
            return da;
          }
          function ea() {
            d.buffer != l.buffer && m();
            return fa;
          }
          var w = moduleArg, ha, x;
          w.ready = new Promise((a, b) => {
            ha = a;
            x = b;
          });
          var ia = Object.assign({}, w), ja = "./this.program", z = (a, b) => {
            throw b;
          }, ka = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = w.ENVIRONMENT_IS_PTHREAD || false, E = "";
          function la(a) {
            return w.locateFile ? w.locateFile(a, E) : E + a;
          }
          var ma, F, H;
          if (B) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));
            E = A ? na.dirname(E) + "/" : __dirname + "/";
            ma = (b, c) => {
              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);
              return fs.readFileSync(b, c ? void 0 : "utf8");
            };
            H = (b) => {
              b = ma(b, true);
              b.buffer || (b = new Uint8Array(b));
              return b;
            };
            F = (b, c, e, h = true) => {
              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);
              fs.readFile(b, h ? void 0 : "utf8", (g, k) => {
                g ? e(g) : c(h ? k.buffer : k);
              });
            };
            !w.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            z = (b, c) => {
              process.exitCode = b;
              throw c;
            };
            w.inspect = () => "[Emscripten Module object]";
            let a;
            try {
              a = require_worker_threads();
            } catch (b) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
            }
            global.Worker = a.Worker;
          } else if (ka || A)
            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ma = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, A && (H = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), F = (a, b, c) => {
              var e = new XMLHttpRequest();
              e.open("GET", a, true);
              e.responseType = "arraybuffer";
              e.onload = () => {
                200 == e.status || 0 == e.status && e.response ? b(e.response) : c();
              };
              e.onerror = c;
              e.send(null);
            });
          B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
          var oa = console.log.bind(console), pa = console.error.bind(console);
          B && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
          var qa = w.print || oa, I = w.printErr || pa;
          Object.assign(w, ia);
          ia = null;
          w.thisProgram && (ja = w.thisProgram);
          w.quit && (z = w.quit);
          var J;
          w.wasmBinary && (J = w.wasmBinary);
          var noExitRuntime = w.noExitRuntime || true;
          "object" != typeof WebAssembly && K("no native wasm support detected");
          var d, L, ra, M = false, N, l, ba, ca, da, fa;
          function m() {
            var a = d.buffer;
            w.HEAP8 = l = new Int8Array(a);
            w.HEAP16 = new Int16Array(a);
            w.HEAP32 = ca = new Int32Array(a);
            w.HEAPU8 = ba = new Uint8Array(a);
            w.HEAPU16 = new Uint16Array(a);
            w.HEAPU32 = da = new Uint32Array(a);
            w.HEAPF32 = new Float32Array(a);
            w.HEAPF64 = fa = new Float64Array(a);
          }
          var O = w.INITIAL_MEMORY || 16777216;
          5242880 <= O || K("INITIAL_MEMORY should be larger than STACK_SIZE, was " + O + "! (STACK_SIZE=5242880)");
          if (D)
            d = w.wasmMemory;
          else if (w.wasmMemory)
            d = w.wasmMemory;
          else if (d = new WebAssembly.Memory({ initial: O / 65536, maximum: 65536, shared: true }), !(d.buffer instanceof SharedArrayBuffer))
            throw I("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && I("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
          m();
          O = d.buffer.byteLength;
          var sa, ta = [], ua = [], va = [], wa = 0;
          function P() {
            return noExitRuntime || 0 < wa;
          }
          var Q = 0, xa = null, R = null;
          function ya() {
            Q++;
            w.monitorRunDependencies && w.monitorRunDependencies(Q);
          }
          function za() {
            Q--;
            w.monitorRunDependencies && w.monitorRunDependencies(Q);
            if (0 == Q && (null !== xa && (clearInterval(xa), xa = null), R)) {
              var a = R;
              R = null;
              a();
            }
          }
          function K(a) {
            if (w.onAbort)
              w.onAbort(a);
            a = "Aborted(" + a + ")";
            I(a);
            M = true;
            N = 1;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            x(a);
            throw a;
          }
          function Aa(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var S;
          S = "ort-wasm-threaded.wasm";
          Aa(S) || (S = la(S));
          function Ba(a) {
            if (a == S && J)
              return new Uint8Array(J);
            if (H)
              return H(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function Ca(a) {
            if (!J && (ka || A)) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => Ba(a));
              if (F)
                return new Promise((b, c) => {
                  F(a, (e) => b(new Uint8Array(e)), c);
                });
            }
            return Promise.resolve().then(() => Ba(a));
          }
          function Da(a, b, c) {
            return Ca(a).then((e) => WebAssembly.instantiate(e, b)).then((e) => e).then(c, (e) => {
              I("failed to asynchronously prepare wasm: " + e);
              K(e);
            });
          }
          function Ea(a, b) {
            var c = S;
            return J || "function" != typeof WebAssembly.instantiateStreaming || Aa(c) || c.startsWith("file://") || B || "function" != typeof fetch ? Da(c, a, b) : fetch(c, { credentials: "same-origin" }).then((e) => WebAssembly.instantiateStreaming(e, a).then(b, function(h) {
              I("wasm streaming compile failed: " + h);
              I("falling back to ArrayBuffer instantiation");
              return Da(c, a, b);
            }));
          }
          var T;
          function U(a) {
            this.name = "ExitStatus";
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
          function Fa(a) {
            a.terminate();
            a.onmessage = () => {
            };
          }
          function Ga(a) {
            (a = V.La[a]) || K();
            V.lb(a);
          }
          function Ha(a) {
            var b = V.fb();
            if (!b)
              return 6;
            V.Oa.push(b);
            V.La[a.Na] = b;
            b.Na = a.Na;
            var c = { cmd: "run", start_routine: a.mb, arg: a.eb, pthread_ptr: a.Na };
            B && b.unref();
            b.postMessage(c, a.sb);
            return 0;
          }
          var Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {
            b >>>= 0;
            var e = b + c;
            for (c = b; a[c] && !(c >= e); )
              ++c;
            if (16 < c - b && a.buffer && Ia)
              return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
            for (e = ""; b < c; ) {
              var h = a[b++];
              if (h & 128) {
                var g = a[b++] & 63;
                if (192 == (h & 224))
                  e += String.fromCharCode((h & 31) << 6 | g);
                else {
                  var k = a[b++] & 63;
                  h = 224 == (h & 240) ? (h & 15) << 12 | g << 6 | k : (h & 7) << 18 | g << 12 | k << 6 | a[b++] & 63;
                  65536 > h ? e += String.fromCharCode(h) : (h -= 65536, e += String.fromCharCode(55296 | h >> 10, 56320 | h & 1023));
                }
              } else
                e += String.fromCharCode(h);
            }
            return e;
          }, Ka = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "";
          function La(a) {
            if (D)
              return W(1, 1, a);
            N = a;
            if (!P()) {
              V.nb();
              if (w.onExit)
                w.onExit(a);
              M = true;
            }
            z(a, new U(a));
          }
          var Na = (a) => {
            N = a;
            if (D)
              throw Ma(a), "unwind";
            La(a);
          }, V = {
            Ra: [],
            Oa: [],
            Za: [],
            La: {},
            Va: function() {
              D ? V.hb() : V.gb();
            },
            gb: function() {
              ta.unshift(() => {
                ya();
                V.ib(() => za());
              });
            },
            hb: function() {
              V.receiveObjectTransfer = V.kb;
              V.threadInitTLS = V.Ya;
              V.setExitStatus = V.Xa;
              noExitRuntime = false;
            },
            Xa: function(a) {
              N = a;
            },
            xb: ["$terminateWorker"],
            nb: function() {
              for (var a of V.Oa)
                Fa(a);
              for (a of V.Ra)
                Fa(a);
              V.Ra = [];
              V.Oa = [];
              V.La = [];
            },
            lb: function(a) {
              var b = a.Na;
              delete V.La[b];
              V.Ra.push(a);
              V.Oa.splice(V.Oa.indexOf(a), 1);
              a.Na = 0;
              Oa(b);
            },
            kb: function() {
            },
            Ya: function() {
              V.Za.forEach((a) => a());
            },
            jb: (a) => new Promise((b) => {
              a.onmessage = (g) => {
                g = g.data;
                var k = g.cmd;
                if (g.targetThread && g.targetThread != X()) {
                  var t = V.La[g.wb];
                  t ? t.postMessage(g, g.transferList) : I('Internal error! Worker sent a message "' + k + '" to target pthread ' + g.targetThread + ", but that thread no longer exists!");
                } else if ("checkMailbox" === k)
                  Y();
                else if ("spawnThread" === k)
                  Ha(g);
                else if ("cleanupThread" === k)
                  Ga(g.thread);
                else if ("killThread" === k)
                  g = g.thread, k = V.La[g], delete V.La[g], Fa(k), Oa(g), V.Oa.splice(
                    V.Oa.indexOf(k),
                    1
                  ), k.Na = 0;
                else if ("cancelThread" === k)
                  V.La[g.thread].postMessage({ cmd: "cancel" });
                else if ("loaded" === k)
                  a.loaded = true, b(a);
                else if ("alert" === k)
                  alert("Thread " + g.threadId + ": " + g.text);
                else if ("setimmediate" === g.target)
                  a.postMessage(g);
                else if ("callHandler" === k)
                  w[g.handler](...g.args);
                else
                  k && I("worker sent an unknown command " + k);
              };
              a.onerror = (g) => {
                I("worker sent an error! " + g.filename + ":" + g.lineno + ": " + g.message);
                throw g;
              };
              B && (a.on("message", function(g) {
                a.onmessage({ data: g });
              }), a.on("error", function(g) {
                a.onerror(g);
              }));
              var c = [], e = ["onExit", "onAbort", "print", "printErr"], h;
              for (h of e)
                w.hasOwnProperty(h) && c.push(h);
              a.postMessage({ cmd: "load", handlers: c, urlOrBlob: w.mainScriptUrlOrBlob || _scriptDir, wasmMemory: d, wasmModule: ra });
            }),
            ib: function(a) {
              a();
            },
            cb: function() {
              var a = la("ort-wasm-threaded.worker.js");
              a = new Worker(a);
              V.Ra.push(a);
            },
            fb: function() {
              0 == V.Ra.length && (V.cb(), V.jb(V.Ra[0]));
              return V.Ra.pop();
            }
          };
          w.PThread = V;
          var Pa = (a) => {
            for (; 0 < a.length; )
              a.shift()(w);
          };
          w.establishStackSpace = function() {
            var a = X(), b = p()[a + 52 >> 2 >>> 0];
            a = p()[a + 56 >> 2 >>> 0];
            Qa(b, b - a);
            Ra(b);
          };
          function Ma(a) {
            if (D)
              return W(2, 0, a);
            Na(a);
          }
          var Sa = [];
          w.invokeEntryPoint = function(a, b) {
            var c = Sa[a];
            c || (a >= Sa.length && (Sa.length = a + 1), Sa[a] = c = sa.get(a));
            a = c(b);
            P() ? V.Xa(a) : Ta(a);
          };
          function Ua(a) {
            this.Ua = a - 24;
            this.bb = function(b) {
              r()[this.Ua + 4 >> 2 >>> 0] = b;
            };
            this.ab = function(b) {
              r()[this.Ua + 8 >> 2 >>> 0] = b;
            };
            this.Va = function(b, c) {
              this.$a();
              this.bb(b);
              this.ab(c);
            };
            this.$a = function() {
              r()[this.Ua + 16 >> 2 >>> 0] = 0;
            };
          }
          var Va = 0, Wa = 0;
          function Xa(a, b, c, e) {
            return D ? W(3, 1, a, b, c, e) : Ya(a, b, c, e);
          }
          function Ya(a, b, c, e) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            e >>>= 0;
            if ("undefined" == typeof SharedArrayBuffer)
              return I("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var h = [];
            if (D && 0 === h.length)
              return Xa(a, b, c, e);
            a = { mb: c, Na: a, eb: e, sb: h };
            return D ? (a.ub = "spawnThread", postMessage(a, h), 0) : Ha(a);
          }
          function Za(a, b, c) {
            return D ? W(4, 1, a, b, c) : 0;
          }
          function $a(a, b) {
            if (D)
              return W(5, 1, a, b);
          }
          var ab = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var e = a.charCodeAt(c);
              127 >= e ? b++ : 2047 >= e ? b += 2 : 55296 <= e && 57343 >= e ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, bb = (a, b, c, e) => {
            c >>>= 0;
            if (!(0 < e))
              return 0;
            var h = c;
            e = c + e - 1;
            for (var g = 0; g < a.length; ++g) {
              var k = a.charCodeAt(g);
              if (55296 <= k && 57343 >= k) {
                var t = a.charCodeAt(++g);
                k = 65536 + ((k & 1023) << 10) | t & 1023;
              }
              if (127 >= k) {
                if (c >= e)
                  break;
                b[c++ >>> 0] = k;
              } else {
                if (2047 >= k) {
                  if (c + 1 >= e)
                    break;
                  b[c++ >>> 0] = 192 | k >> 6;
                } else {
                  if (65535 >= k) {
                    if (c + 2 >= e)
                      break;
                    b[c++ >>> 0] = 224 | k >> 12;
                  } else {
                    if (c + 3 >= e)
                      break;
                    b[c++ >>> 0] = 240 | k >> 18;
                    b[c++ >>> 0] = 128 | k >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | k >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | k & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - h;
          }, cb = (a, b, c) => bb(a, n(), b, c);
          function db(a, b) {
            if (D)
              return W(6, 1, a, b);
          }
          function eb(a, b, c) {
            if (D)
              return W(7, 1, a, b, c);
          }
          function fb(a, b, c) {
            return D ? W(8, 1, a, b, c) : 0;
          }
          function gb(a, b) {
            if (D)
              return W(9, 1, a, b);
          }
          function hb(a, b, c) {
            if (D)
              return W(10, 1, a, b, c);
          }
          function ib(a, b, c, e) {
            if (D)
              return W(11, 1, a, b, c, e);
          }
          function jb(a, b, c, e) {
            if (D)
              return W(12, 1, a, b, c, e);
          }
          function kb(a, b, c, e) {
            if (D)
              return W(13, 1, a, b, c, e);
          }
          function lb(a) {
            if (D)
              return W(14, 1, a);
          }
          function mb(a, b) {
            if (D)
              return W(15, 1, a, b);
          }
          function nb(a, b, c) {
            if (D)
              return W(16, 1, a, b, c);
          }
          var ob = (a) => {
            if (!M)
              try {
                if (a(), !P())
                  try {
                    D ? Ta(N) : Na(N);
                  } catch (b) {
                    b instanceof U || "unwind" == b || z(1, b);
                  }
              } catch (b) {
                b instanceof U || "unwind" == b || z(1, b);
              }
          };
          function pb(a) {
            a >>>= 0;
            "function" === typeof Atomics.tb && (Atomics.tb(p(), a >> 2, a).value.then(Y), a += 128, Atomics.store(p(), a >> 2, 1));
          }
          w.__emscripten_thread_mailbox_await = pb;
          function Y() {
            var a = X();
            a && (pb(a), ob(() => qb()));
          }
          w.checkMailbox = Y;
          var Z = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), rb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], sb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
          function tb(a, b, c, e, h, g, k, t) {
            return D ? W(17, 1, a, b, c, e, h, g, k, t) : -52;
          }
          function ub(a, b, c, e, h, g, k) {
            if (D)
              return W(18, 1, a, b, c, e, h, g, k);
          }
          var wb = (a) => {
            var b = ab(a) + 1, c = vb(b);
            c && cb(a, c, b);
            return c;
          }, yb = (a) => {
            var b = xb();
            a = a();
            Ra(b);
            return a;
          };
          function W(a, b) {
            var c = arguments.length - 2, e = arguments;
            return yb(() => {
              for (var h = zb(8 * c), g = h >> 3, k = 0; k < c; k++) {
                var t = e[2 + k];
                ea()[g + k >>> 0] = t;
              }
              return Ab(a, c, h, b);
            });
          }
          var Bb = [], Cb = {}, Eb = () => {
            if (!Db) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;
              for (b in Cb)
                void 0 === Cb[b] ? delete a[b] : a[b] = Cb[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              Db = c;
            }
            return Db;
          }, Db;
          function Fb(a, b) {
            if (D)
              return W(19, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            Eb().forEach(function(e, h) {
              var g = b + c;
              h = r()[a + 4 * h >> 2 >>> 0] = g;
              for (g = 0; g < e.length; ++g)
                aa()[h++ >> 0 >>> 0] = e.charCodeAt(g);
              aa()[h >> 0 >>> 0] = 0;
              c += e.length + 1;
            });
            return 0;
          }
          function Gb(a, b) {
            if (D)
              return W(20, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = Eb();
            r()[a >> 2 >>> 0] = c.length;
            var e = 0;
            c.forEach(function(h) {
              e += h.length + 1;
            });
            r()[b >> 2 >>> 0] = e;
            return 0;
          }
          function Hb(a) {
            return D ? W(21, 1, a) : 52;
          }
          function Lb(a, b, c, e) {
            return D ? W(22, 1, a, b, c, e) : 52;
          }
          function Mb(a, b, c, e, h) {
            return D ? W(23, 1, a, b, c, e, h) : 70;
          }
          var Nb = [null, [], []];
          function Ob(a, b, c, e) {
            if (D)
              return W(24, 1, a, b, c, e);
            b >>>= 0;
            c >>>= 0;
            e >>>= 0;
            for (var h = 0, g = 0; g < c; g++) {
              var k = r()[b >> 2 >>> 0], t = r()[b + 4 >> 2 >>> 0];
              b += 8;
              for (var C = 0; C < t; C++) {
                var v = n()[k + C >>> 0], y = Nb[a];
                0 === v || 10 === v ? ((1 === a ? qa : I)(Ja(y, 0)), y.length = 0) : y.push(v);
              }
              h += t;
            }
            r()[e >> 2 >>> 0] = h;
            return 0;
          }
          var Pb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Qb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Rb(a) {
            var b = Array(ab(a) + 1);
            bb(a, b, 0, b.length);
            return b;
          }
          var Sb = (a, b) => {
            aa().set(a, b >>> 0);
          };
          function Tb(a, b, c, e) {
            function h(f, q, u) {
              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < q; )
                f = u[0] + f;
              return f;
            }
            function g(f, q) {
              return h(f, q, "0");
            }
            function k(f, q) {
              function u(Ib) {
                return 0 > Ib ? -1 : 0 < Ib ? 1 : 0;
              }
              var G;
              0 === (G = u(f.getFullYear() - q.getFullYear())) && 0 === (G = u(f.getMonth() - q.getMonth())) && (G = u(f.getDate() - q.getDate()));
              return G;
            }
            function t(f) {
              switch (f.getDay()) {
                case 0:
                  return new Date(f.getFullYear() - 1, 11, 29);
                case 1:
                  return f;
                case 2:
                  return new Date(f.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    f.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(f.getFullYear(), 0, 1);
                case 5:
                  return new Date(f.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(f.getFullYear() - 1, 11, 30);
              }
            }
            function C(f) {
              var q = f.Pa;
              for (f = new Date(new Date(f.Qa + 1900, 0, 1).getTime()); 0 < q; ) {
                var u = f.getMonth(), G = (Z(f.getFullYear()) ? Pb : Qb)[u];
                if (q > G - f.getDate())
                  q -= G - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
                else {
                  f.setDate(f.getDate() + q);
                  break;
                }
              }
              u = new Date(f.getFullYear() + 1, 0, 4);
              q = t(new Date(
                f.getFullYear(),
                0,
                4
              ));
              u = t(u);
              return 0 >= k(q, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            e >>>= 0;
            var v = p()[e + 40 >> 2 >>> 0];
            e = { qb: p()[e >> 2 >>> 0], pb: p()[e + 4 >> 2 >>> 0], Sa: p()[e + 8 >> 2 >>> 0], Wa: p()[e + 12 >> 2 >>> 0], Ta: p()[e + 16 >> 2 >>> 0], Qa: p()[e + 20 >> 2 >>> 0], Ma: p()[e + 24 >> 2 >>> 0], Pa: p()[e + 28 >> 2 >>> 0], yb: p()[e + 32 >> 2 >>> 0], ob: p()[e + 36 >> 2 >>> 0], rb: v ? Ka(v) : "" };
            c = Ka(c);
            v = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var y in v)
              c = c.replace(new RegExp(y, "g"), v[y]);
            var Jb = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Kb = "January February March April May June July August September October November December".split(" ");
            v = {
              "%a": (f) => Jb[f.Ma].substring(0, 3),
              "%A": (f) => Jb[f.Ma],
              "%b": (f) => Kb[f.Ta].substring(0, 3),
              "%B": (f) => Kb[f.Ta],
              "%C": (f) => g((f.Qa + 1900) / 100 | 0, 2),
              "%d": (f) => g(f.Wa, 2),
              "%e": (f) => h(f.Wa, 2, " "),
              "%g": (f) => C(f).toString().substring(2),
              "%G": (f) => C(f),
              "%H": (f) => g(f.Sa, 2),
              "%I": (f) => {
                f = f.Sa;
                0 == f ? f = 12 : 12 < f && (f -= 12);
                return g(f, 2);
              },
              "%j": (f) => {
                for (var q = 0, u = 0; u <= f.Ta - 1; q += (Z(f.Qa + 1900) ? Pb : Qb)[u++])
                  ;
                return g(f.Wa + q, 3);
              },
              "%m": (f) => g(f.Ta + 1, 2),
              "%M": (f) => g(f.pb, 2),
              "%n": () => "\n",
              "%p": (f) => 0 <= f.Sa && 12 > f.Sa ? "AM" : "PM",
              "%S": (f) => g(f.qb, 2),
              "%t": () => "	",
              "%u": (f) => f.Ma || 7,
              "%U": (f) => g(Math.floor((f.Pa + 7 - f.Ma) / 7), 2),
              "%V": (f) => {
                var q = Math.floor((f.Pa + 7 - (f.Ma + 6) % 7) / 7);
                2 >= (f.Ma + 371 - f.Pa - 2) % 7 && q++;
                if (q)
                  53 == q && (u = (f.Ma + 371 - f.Pa) % 7, 4 == u || 3 == u && Z(f.Qa) || (q = 1));
                else {
                  q = 52;
                  var u = (f.Ma + 7 - f.Pa - 1) % 7;
                  (4 == u || 5 == u && Z(f.Qa % 400 - 1)) && q++;
                }
                return g(q, 2);
              },
              "%w": (f) => f.Ma,
              "%W": (f) => g(Math.floor((f.Pa + 7 - (f.Ma + 6) % 7) / 7), 2),
              "%y": (f) => (f.Qa + 1900).toString().substring(2),
              "%Y": (f) => f.Qa + 1900,
              "%z": (f) => {
                f = f.ob;
                var q = 0 <= f;
                f = Math.abs(f) / 60;
                return (q ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
              },
              "%Z": (f) => f.rb,
              "%%": () => "%"
            };
            c = c.replace(
              /%%/g,
              "\0\0"
            );
            for (y in v)
              c.includes(y) && (c = c.replace(new RegExp(y, "g"), v[y](e)));
            c = c.replace(/\0\0/g, "%");
            y = Rb(c);
            if (y.length > b)
              return 0;
            Sb(y, a);
            return y.length - 1;
          }
          V.Va();
          var Ub = [null, La, Ma, Xa, Za, $a, db, eb, fb, gb, hb, ib, jb, kb, lb, mb, nb, tb, ub, Fb, Gb, Hb, Lb, Mb, Ob], Xb = {
            b: function(a, b, c) {
              a >>>= 0;
              new Ua(a).Va(b >>> 0, c >>> 0);
              Va = a;
              Wa++;
              throw Va;
            },
            N: function(a) {
              Vb(a >>> 0, !A, 1, !ka, 131072, false);
              V.Ya();
            },
            j: function(a) {
              a >>>= 0;
              D ? postMessage({ cmd: "cleanupThread", thread: a }) : Ga(a);
            },
            I: Ya,
            h: Za,
            T: $a,
            D: db,
            F: eb,
            U: fb,
            R: gb,
            J: hb,
            Q: ib,
            n: jb,
            E: kb,
            B: lb,
            S: mb,
            C: nb,
            q: () => true,
            z: function(a, b) {
              a >>>= 0;
              a == b >>> 0 ? setTimeout(() => Y()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = V.La[a]) && a.postMessage({ cmd: "checkMailbox" });
            },
            L: function() {
              return -1;
            },
            M: pb,
            p: function(a) {
              B && V.La[a >>> 0].ref();
            },
            t: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              p()[c >> 2 >>> 0] = a.getUTCSeconds();
              p()[c + 4 >> 2 >>> 0] = a.getUTCMinutes();
              p()[c + 8 >> 2 >>> 0] = a.getUTCHours();
              p()[c + 12 >> 2 >>> 0] = a.getUTCDate();
              p()[c + 16 >> 2 >>> 0] = a.getUTCMonth();
              p()[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;
              p()[c + 24 >> 2 >>> 0] = a.getUTCDay();
              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
              p()[c + 28 >> 2 >>> 0] = a;
            },
            u: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              p()[c >> 2 >>> 0] = a.getSeconds();
              p()[c + 4 >> 2 >>> 0] = a.getMinutes();
              p()[c + 8 >> 2 >>> 0] = a.getHours();
              p()[c + 12 >> 2 >>> 0] = a.getDate();
              p()[c + 16 >> 2 >>> 0] = a.getMonth();
              p()[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;
              p()[c + 24 >> 2 >>> 0] = a.getDay();
              b = (Z(a.getFullYear()) ? rb : sb)[a.getMonth()] + a.getDate() - 1 | 0;
              p()[c + 28 >> 2 >>> 0] = b;
              p()[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());
              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var e = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              a = (b != e && a.getTimezoneOffset() == Math.min(e, b)) | 0;
              p()[c + 32 >> 2 >>> 0] = a;
            },
            v: function(a) {
              a >>>= 0;
              var b = new Date(p()[a + 20 >> 2 >>> 0] + 1900, p()[a + 16 >> 2 >>> 0], p()[a + 12 >> 2 >>> 0], p()[a + 8 >> 2 >>> 0], p()[a + 4 >> 2 >>> 0], p()[a >> 2 >>> 0], 0), c = p()[a + 32 >> 2 >>> 0], e = b.getTimezoneOffset(), h = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(g, h);
              0 > c ? p()[a + 32 >> 2 >>> 0] = Number(h != g && k == e) : 0 < c != (k == e) && (h = Math.max(g, h), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : h) - e)));
              p()[a + 24 >> 2 >>> 0] = b.getDay();
              c = (Z(b.getFullYear()) ? rb : sb)[b.getMonth()] + b.getDate() - 1 | 0;
              p()[a + 28 >> 2 >>> 0] = c;
              p()[a >> 2 >>> 0] = b.getSeconds();
              p()[a + 4 >> 2 >>> 0] = b.getMinutes();
              p()[a + 8 >> 2 >>> 0] = b.getHours();
              p()[a + 12 >> 2 >>> 0] = b.getDate();
              p()[a + 16 >> 2 >>> 0] = b.getMonth();
              p()[a + 20 >> 2 >>> 0] = b.getYear();
              a = b.getTime() / 1e3;
              return Wb((T = a, 1 <= +Math.abs(T) ? 0 < T ? +Math.floor(T / 4294967296) >>> 0 : ~~+Math.ceil((T - +(~~T >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
            },
            r: tb,
            s: ub,
            y: function(a, b, c) {
              function e(v) {
                return (v = v.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? v[1] : "GMT";
              }
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              var h = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(h, 0, 1), k = new Date(h, 6, 1);
              h = g.getTimezoneOffset();
              var t = k.getTimezoneOffset(), C = Math.max(h, t);
              r()[a >> 2 >>> 0] = 60 * C;
              p()[b >> 2 >>> 0] = Number(h != t);
              a = e(g);
              b = e(k);
              a = wb(a);
              b = wb(b);
              t < h ? (r()[c >> 2 >>> 0] = a, r()[c + 4 >> 2 >>> 0] = b) : (r()[c >> 2 >>> 0] = b, r()[c + 4 >> 2 >>> 0] = a);
            },
            c: () => {
              K("");
            },
            k: function() {
            },
            i: function() {
              return Date.now();
            },
            o: () => {
              wa += 1;
              throw "unwind";
            },
            A: function() {
              return 4294901760;
            },
            e: () => performance.timeOrigin + performance.now(),
            f: function() {
              return B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency;
            },
            K: function(a, b, c, e) {
              V.vb = b >>> 0;
              Bb.length = c;
              b = e >>> 0 >> 3;
              for (e = 0; e < c; e++)
                Bb[e] = ea()[b + e >>> 0];
              return Ub[a].apply(null, Bb);
            },
            x: function(a) {
              a >>>= 0;
              var b = n().length;
              if (a <= b || 4294901760 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var e = b * (1 + 0.2 / c);
                e = Math.min(e, a + 100663296);
                var h = Math;
                e = Math.max(a, e);
                a: {
                  h = h.min.call(h, 4294901760, e + (65536 - e % 65536) % 65536) - d.buffer.byteLength + 65535 >>> 16;
                  try {
                    d.grow(h);
                    m();
                    var g = 1;
                    break a;
                  } catch (k) {
                  }
                  g = void 0;
                }
                if (g)
                  return true;
              }
              return false;
            },
            O: Fb,
            P: Gb,
            H: Na,
            g: Hb,
            m: Lb,
            w: Mb,
            l: Ob,
            a: d || w.wasmMemory,
            G: Tb,
            d: function(a, b, c, e) {
              return Tb(a >>> 0, b >>> 0, c >>> 0, e >>> 0);
            }
          };
          (function() {
            function a(c, e) {
              c = c.exports;
              L = c = Yb(c);
              V.Za.push(L.ya);
              sa = L.za;
              ua.unshift(L.V);
              ra = e;
              za();
              return c;
            }
            var b = { a: Xb };
            ya();
            if (w.instantiateWasm)
              try {
                return w.instantiateWasm(b, a);
              } catch (c) {
                I("Module.instantiateWasm callback failed with error: " + c), x(c);
              }
            Ea(b, function(c) {
              a(c.instance, c.module);
            }).catch(x);
            return {};
          })();
          w._OrtInit = (a, b) => (w._OrtInit = L.W)(a, b);
          w._OrtGetLastError = (a, b) => (w._OrtGetLastError = L.X)(a, b);
          w._OrtCreateSessionOptions = (a, b, c, e, h, g, k, t, C, v) => (w._OrtCreateSessionOptions = L.Y)(a, b, c, e, h, g, k, t, C, v);
          w._OrtAppendExecutionProvider = (a, b) => (w._OrtAppendExecutionProvider = L.Z)(a, b);
          w._OrtAddFreeDimensionOverride = (a, b, c) => (w._OrtAddFreeDimensionOverride = L._)(a, b, c);
          w._OrtAddSessionConfigEntry = (a, b, c) => (w._OrtAddSessionConfigEntry = L.$)(a, b, c);
          w._OrtReleaseSessionOptions = (a) => (w._OrtReleaseSessionOptions = L.aa)(a);
          w._OrtCreateSession = (a, b, c) => (w._OrtCreateSession = L.ba)(a, b, c);
          w._OrtReleaseSession = (a) => (w._OrtReleaseSession = L.ca)(a);
          w._OrtGetInputOutputCount = (a, b, c) => (w._OrtGetInputOutputCount = L.da)(a, b, c);
          w._OrtGetInputName = (a, b) => (w._OrtGetInputName = L.ea)(a, b);
          w._OrtGetOutputName = (a, b) => (w._OrtGetOutputName = L.fa)(a, b);
          w._OrtFree = (a) => (w._OrtFree = L.ga)(a);
          w._OrtCreateTensor = (a, b, c, e, h, g) => (w._OrtCreateTensor = L.ha)(a, b, c, e, h, g);
          w._OrtGetTensorData = (a, b, c, e, h) => (w._OrtGetTensorData = L.ia)(a, b, c, e, h);
          w._OrtReleaseTensor = (a) => (w._OrtReleaseTensor = L.ja)(a);
          w._OrtCreateRunOptions = (a, b, c, e) => (w._OrtCreateRunOptions = L.ka)(a, b, c, e);
          w._OrtAddRunConfigEntry = (a, b, c) => (w._OrtAddRunConfigEntry = L.la)(a, b, c);
          w._OrtReleaseRunOptions = (a) => (w._OrtReleaseRunOptions = L.ma)(a);
          w._OrtCreateBinding = (a) => (w._OrtCreateBinding = L.na)(a);
          w._OrtBindInput = (a, b, c) => (w._OrtBindInput = L.oa)(a, b, c);
          w._OrtBindOutput = (a, b, c, e) => (w._OrtBindOutput = L.pa)(a, b, c, e);
          w._OrtClearBoundOutputs = (a) => (w._OrtClearBoundOutputs = L.qa)(a);
          w._OrtReleaseBinding = (a) => (w._OrtReleaseBinding = L.ra)(a);
          w._OrtRunWithBinding = (a, b, c, e, h) => (w._OrtRunWithBinding = L.sa)(a, b, c, e, h);
          w._OrtRun = (a, b, c, e, h, g, k, t) => (w._OrtRun = L.ta)(a, b, c, e, h, g, k, t);
          w._OrtEndProfiling = (a) => (w._OrtEndProfiling = L.ua)(a);
          var X = w._pthread_self = () => (X = w._pthread_self = L.va)(), vb = w._malloc = (a) => (vb = w._malloc = L.wa)(a);
          w._free = (a) => (w._free = L.xa)(a);
          w.__emscripten_tls_init = () => (w.__emscripten_tls_init = L.ya)();
          var Vb = w.__emscripten_thread_init = (a, b, c, e, h, g) => (Vb = w.__emscripten_thread_init = L.Aa)(a, b, c, e, h, g);
          w.__emscripten_thread_crashed = () => (w.__emscripten_thread_crashed = L.Ba)();
          var Ab = (a, b, c, e) => (Ab = L.Ca)(a, b, c, e), Oa = (a) => (Oa = L.Da)(a), Ta = w.__emscripten_thread_exit = (a) => (Ta = w.__emscripten_thread_exit = L.Ea)(a), qb = w.__emscripten_check_mailbox = () => (qb = w.__emscripten_check_mailbox = L.Fa)(), Wb = (a) => (Wb = L.Ga)(a), Qa = (a, b) => (Qa = L.Ha)(a, b), xb = () => (xb = L.Ia)(), Ra = (a) => (Ra = L.Ja)(a), zb = (a) => (zb = L.Ka)(a);
          function Yb(a) {
            a = Object.assign({}, a);
            var b = (e) => () => e() >>> 0, c = (e) => (h) => e(h) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.pthread_self = b(a.pthread_self);
            a.malloc = c(a.malloc);
            a.stackSave = b(a.stackSave);
            a.stackAlloc = c(a.stackAlloc);
            return a;
          }
          w.keepRuntimeAlive = P;
          w.wasmMemory = d;
          w.stackAlloc = zb;
          w.stackSave = xb;
          w.stackRestore = Ra;
          w.UTF8ToString = Ka;
          w.stringToUTF8 = cb;
          w.lengthBytesUTF8 = ab;
          w.ExitStatus = U;
          w.PThread = V;
          var Zb;
          R = function $b() {
            Zb || ac();
            Zb || (R = $b);
          };
          function ac() {
            function a() {
              if (!Zb && (Zb = true, w.calledRun = true, !M)) {
                D || Pa(ua);
                ha(w);
                if (w.onRuntimeInitialized)
                  w.onRuntimeInitialized();
                if (!D) {
                  if (w.postRun)
                    for ("function" == typeof w.postRun && (w.postRun = [w.postRun]); w.postRun.length; ) {
                      var b = w.postRun.shift();
                      va.unshift(b);
                    }
                  Pa(va);
                }
              }
            }
            if (!(0 < Q))
              if (D)
                ha(w), D || Pa(ua), startWorker(w);
              else {
                if (w.preRun)
                  for ("function" == typeof w.preRun && (w.preRun = [w.preRun]); w.preRun.length; )
                    ta.unshift(w.preRun.shift());
                Pa(ta);
                0 < Q || (w.setStatus ? (w.setStatus("Running..."), setTimeout(function() {
                  setTimeout(
                    function() {
                      w.setStatus("");
                    },
                    1
                  );
                  a();
                }, 1)) : a());
              }
          }
          if (w.preInit)
            for ("function" == typeof w.preInit && (w.preInit = [w.preInit]); 0 < w.preInit.length; )
              w.preInit.pop()();
          ac();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasmThreaded;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasmThreaded);
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.worker.js
  var require_ort_wasm_threaded_worker = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
      module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0,/*canBlock=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\n';
    }
  });

  // web/lib/wasm/wasm-factory.ts
  var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
  var init_wasm_factory = __esm({
    "web/lib/wasm/wasm-factory.ts"() {
      "use strict";
      init_node_path();
      if (true) {
        ortWasmFactory = require_ort_training_wasm_simd();
      } else {
        ortWasmFactory = true ? null : null;
      }
      ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
      initialized = false;
      initializing = false;
      aborted = false;
      isMultiThreadSupported = () => {
        try {
          if (typeof SharedArrayBuffer === "undefined") {
            return false;
          }
          if (typeof MessageChannel !== "undefined") {
            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
          }
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            5,
            4,
            1,
            3,
            1,
            1,
            10,
            11,
            1,
            9,
            0,
            65,
            0,
            254,
            16,
            2,
            0,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      isSimdSupported = () => {
        try {
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            10,
            30,
            1,
            28,
            0,
            65,
            0,
            253,
            15,
            253,
            12,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            253,
            186,
            1,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      getWasmFileName = (useSimd, useThreads) => {
        if (useSimd) {
          if (true) {
            return "ort-training-wasm-simd.wasm";
          }
          return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
        } else {
          return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
        }
      };
      initializeWebAssembly = async (flags) => {
        if (initialized) {
          return Promise.resolve();
        }
        if (initializing) {
          throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
        }
        if (aborted) {
          throw new Error("previous call to 'initializeWebAssembly()' failed.");
        }
        initializing = true;
        const timeout = flags.initTimeout;
        const numThreads = flags.numThreads;
        const simd = flags.simd;
        const useThreads = numThreads > 1 && isMultiThreadSupported();
        const useSimd = simd && isSimdSupported();
        const wasmPaths = flags.wasmPaths;
        const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
        const wasmFileName = getWasmFileName(useSimd, useThreads);
        const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
        let isTimeout = false;
        const tasks = [];
        if (timeout > 0) {
          tasks.push(new Promise((resolve) => {
            setTimeout(() => {
              isTimeout = true;
              resolve();
            }, timeout);
          }));
        }
        tasks.push(new Promise((resolve, reject) => {
          const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
          const config = {
            locateFile: (fileName, scriptDirectory) => {
              if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
                return URL.createObjectURL(new Blob(
                  [
                    // This require() function is handled by esbuild plugin to load file content as string.
                    // eslint-disable-next-line @typescript-eslint/no-require-imports
                    require_ort_wasm_threaded_worker()
                  ],
                  { type: "text/javascript" }
                ));
              }
              if (fileName.endsWith(".wasm")) {
                if (wasmPathOverride) {
                  return wasmPathOverride;
                }
                const prefix = wasmPrefixOverride ?? scriptDirectory;
                if (false) {
                  if (wasmFileName === "ort-wasm-simd.wasm") {
                    return prefix + "ort-wasm-simd.jsep.wasm";
                  } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                    return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                  }
                }
                return prefix + wasmFileName;
              }
              return scriptDirectory + fileName;
            }
          };
          if (useThreads) {
            if (typeof Blob === "undefined") {
              config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
            } else {
              const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
              config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
            }
          }
          factory(config).then(
            // wasm module initialized successfully
            (module) => {
              initializing = false;
              initialized = true;
              wasm = module;
              resolve();
            },
            // wasm module failed to initialize
            (what) => {
              initializing = false;
              aborted = true;
              reject(what);
            }
          );
        }));
        await Promise.race(tasks);
        if (isTimeout) {
          throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
        }
      };
      getInstance = () => {
        if (initialized && wasm) {
          return wasm;
        }
        throw new Error("WebAssembly is not initialized yet.");
      };
    }
  });

  // web/lib/wasm/wasm-utils.ts
  var allocWasmString, iterateExtraOptions, checkLastError;
  var init_wasm_utils = __esm({
    "web/lib/wasm/wasm-utils.ts"() {
      "use strict";
      init_wasm_factory();
      allocWasmString = (data, allocs) => {
        const wasm2 = getInstance();
        const dataLength = wasm2.lengthBytesUTF8(data) + 1;
        const dataOffset = wasm2._malloc(dataLength);
        wasm2.stringToUTF8(data, dataOffset, dataLength);
        allocs.push(dataOffset);
        return dataOffset;
      };
      iterateExtraOptions = (options, prefix, seen, handler) => {
        if (typeof options == "object" && options !== null) {
          if (seen.has(options)) {
            throw new Error("Circular reference in options");
          } else {
            seen.add(options);
          }
        }
        Object.entries(options).forEach(([key, value]) => {
          const name = prefix ? prefix + key : key;
          if (typeof value === "object") {
            iterateExtraOptions(value, name + ".", seen, handler);
          } else if (typeof value === "string" || typeof value === "number") {
            handler(name, value.toString());
          } else if (typeof value === "boolean") {
            handler(name, value ? "1" : "0");
          } else {
            throw new Error(`Can't handle extra config type: ${typeof value}`);
          }
        });
      };
      checkLastError = (message) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const paramsOffset = wasm2.stackAlloc(8);
          wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
          const errorCode = wasm2.HEAP32[paramsOffset / 4];
          const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
          const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
          throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
    }
  });

  // web/lib/wasm/run-options.ts
  var setRunOptions;
  var init_run_options = __esm({
    "web/lib/wasm/run-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      setRunOptions = (options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        const allocs = [];
        const runOptions = options || {};
        try {
          if (options?.logSeverityLevel === void 0) {
            runOptions.logSeverityLevel = 2;
          } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
          }
          if (options?.logVerbosityLevel === void 0) {
            runOptions.logVerbosityLevel = 0;
          } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
          }
          if (options?.terminate === void 0) {
            runOptions.terminate = false;
          }
          let tagDataOffset = 0;
          if (options?.tag !== void 0) {
            tagDataOffset = allocWasmString(options.tag, allocs);
          }
          runOptionsHandle = wasm2._OrtCreateRunOptions(
            runOptions.logSeverityLevel,
            runOptions.logVerbosityLevel,
            !!runOptions.terminate,
            tagDataOffset
          );
          if (runOptionsHandle === 0) {
            checkLastError("Can't create run options.");
          }
          if (options?.extra !== void 0) {
            iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
              }
            });
          }
          return [runOptionsHandle, allocs];
        } catch (e) {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/session-options.ts
  var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
  var init_session_options = __esm({
    "web/lib/wasm/session-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      getGraphOptimzationLevel = (graphOptimizationLevel) => {
        switch (graphOptimizationLevel) {
          case "disabled":
            return 0;
          case "basic":
            return 1;
          case "extended":
            return 2;
          case "all":
            return 99;
          default:
            throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
        }
      };
      getExecutionMode = (executionMode) => {
        switch (executionMode) {
          case "sequential":
            return 0;
          case "parallel":
            return 1;
          default:
            throw new Error(`unsupported execution mode: ${executionMode}`);
        }
      };
      appendDefaultOptions = (options) => {
        if (!options.extra) {
          options.extra = {};
        }
        if (!options.extra.session) {
          options.extra.session = {};
        }
        const session = options.extra.session;
        if (!session.use_ort_model_bytes_directly) {
          session.use_ort_model_bytes_directly = "1";
        }
        if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
          options.enableMemPattern = false;
        }
      };
      setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
        for (const ep of executionProviders) {
          let epName = typeof ep === "string" ? ep : ep.name;
          switch (epName) {
            case "xnnpack":
              epName = "XNNPACK";
              break;
            case "webnn":
              epName = "WEBNN";
              if (typeof ep !== "string") {
                const webnnOptions = ep;
                if (webnnOptions?.deviceType) {
                  const keyDataOffset = allocWasmString("deviceType", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                  }
                }
                if (webnnOptions?.numThreads) {
                  let numThreads = webnnOptions.numThreads;
                  if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                    numThreads = 0;
                  }
                  const keyDataOffset = allocWasmString("numThreads", allocs);
                  const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                  }
                }
                if (webnnOptions?.powerPreference) {
                  const keyDataOffset = allocWasmString("powerPreference", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                    );
                  }
                }
              }
              break;
            case "webgpu":
              epName = "JS";
              if (typeof ep !== "string") {
                const webgpuOptions = ep;
                if (webgpuOptions?.preferredLayout) {
                  if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                    throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                  }
                  const keyDataOffset = allocWasmString("preferredLayout", allocs);
                  const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                    );
                  }
                }
              }
              break;
            case "wasm":
            case "cpu":
              continue;
            default:
              throw new Error(`not supported execution provider: ${epName}`);
          }
          const epNameDataOffset = allocWasmString(epName, allocs);
          if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
            checkLastError(`Can't append execution provider: ${epName}.`);
          }
        }
      };
      setSessionOptions = (options) => {
        const wasm2 = getInstance();
        let sessionOptionsHandle = 0;
        const allocs = [];
        const sessionOptions = options || {};
        appendDefaultOptions(sessionOptions);
        try {
          const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
          const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
          const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
          const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
          if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
          }
          const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
          if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
            throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
          }
          const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
          sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
            graphOptimizationLevel,
            !!sessionOptions.enableCpuMemArena,
            !!sessionOptions.enableMemPattern,
            executionMode,
            !!sessionOptions.enableProfiling,
            0,
            logIdDataOffset,
            logSeverityLevel,
            logVerbosityLevel,
            optimizedModelFilePathOffset
          );
          if (sessionOptionsHandle === 0) {
            checkLastError("Can't create session options.");
          }
          if (sessionOptions.executionProviders) {
            setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
          }
          if (sessionOptions.freeDimensionOverrides) {
            for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
              if (typeof name !== "string") {
                throw new Error(`free dimension override name must be a string: ${name}`);
              }
              if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
                throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
              }
              const nameOffset = allocWasmString(name, allocs);
              if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
                checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
              }
            }
          }
          if (sessionOptions.extra !== void 0) {
            iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
              }
            });
          }
          return [sessionOptionsHandle, allocs];
        } catch (e) {
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/wasm-common.ts
  var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
  var init_wasm_common = __esm({
    "web/lib/wasm/wasm-common.ts"() {
      "use strict";
      tensorDataTypeStringToEnum = (type) => {
        switch (type) {
          case "int8":
            return 3 /* int8 */;
          case "uint8":
            return 2 /* uint8 */;
          case "bool":
            return 9 /* bool */;
          case "int16":
            return 5 /* int16 */;
          case "uint16":
            return 4 /* uint16 */;
          case "int32":
            return 6 /* int32 */;
          case "uint32":
            return 12 /* uint32 */;
          case "float16":
            return 10 /* float16 */;
          case "float32":
            return 1 /* float */;
          case "float64":
            return 11 /* double */;
          case "string":
            return 8 /* string */;
          case "int64":
            return 7 /* int64 */;
          case "uint64":
            return 13 /* uint64 */;
          default:
            throw new Error(`unsupported data type: ${type}`);
        }
      };
      tensorDataTypeEnumToString = (typeProto) => {
        switch (typeProto) {
          case 3 /* int8 */:
            return "int8";
          case 2 /* uint8 */:
            return "uint8";
          case 9 /* bool */:
            return "bool";
          case 5 /* int16 */:
            return "int16";
          case 4 /* uint16 */:
            return "uint16";
          case 6 /* int32 */:
            return "int32";
          case 12 /* uint32 */:
            return "uint32";
          case 10 /* float16 */:
            return "float16";
          case 1 /* float */:
            return "float32";
          case 11 /* double */:
            return "float64";
          case 8 /* string */:
            return "string";
          case 7 /* int64 */:
            return "int64";
          case 13 /* uint64 */:
            return "uint64";
          default:
            throw new Error(`unsupported data type: ${typeProto}`);
        }
      };
      getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
      tensorTypeToTypedArrayConstructor = (type) => {
        switch (type) {
          case "float16":
            return Uint16Array;
          case "float32":
            return Float32Array;
          case "uint8":
            return Uint8Array;
          case "int8":
            return Int8Array;
          case "uint16":
            return Uint16Array;
          case "int16":
            return Int16Array;
          case "int32":
            return Int32Array;
          case "bool":
            return Uint8Array;
          case "float64":
            return Float64Array;
          case "uint32":
            return Uint32Array;
          case "int64":
            return BigInt64Array;
          case "uint64":
            return BigUint64Array;
          default:
            throw new Error(`unsupported type: ${type}`);
        }
      };
      logLevelStringToEnum = (logLevel) => {
        switch (logLevel) {
          case "verbose":
            return 0;
          case "info":
            return 1;
          case "warning":
            return 2;
          case "error":
            return 3;
          case "fatal":
            return 4;
          default:
            throw new Error(`unsupported logging level: ${logLevel}`);
        }
      };
      isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
      dataLocationStringToEnum = (location) => {
        switch (location) {
          case "none":
            return 0;
          case "cpu":
            return 1;
          case "cpu-pinned":
            return 2;
          case "texture":
            return 3;
          case "gpu-buffer":
            return 4;
          default:
            throw new Error(`unsupported data location: ${location}`);
        }
      };
    }
  });

  // web/lib/wasm/wasm-core-impl.ts
  var ortEnvInitialized, getSessionInputOutputCount, initOrt, initRuntime, activeSessions, isOrtEnvInitialized, createSessionAllocate, createSessionFinalize, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
  var init_wasm_core_impl = __esm({
    "web/lib/wasm/wasm-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_factory();
      init_wasm_utils();
      ortEnvInitialized = false;
      getSessionInputOutputCount = (sessionHandle) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
          if (errorCode !== 0) {
            checkLastError("Can't get session input/output count.");
          }
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      initOrt = (numThreads, loggingLevel) => {
        const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
        if (errorCode !== 0) {
          checkLastError("Can't initialize onnxruntime.");
        }
      };
      initRuntime = async (env3) => {
        initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
        if (false) {
          const initJsep = null.init;
          await initJsep(getInstance(), env3);
        }
        ortEnvInitialized = true;
      };
      activeSessions = /* @__PURE__ */ new Map();
      isOrtEnvInitialized = () => ortEnvInitialized;
      createSessionAllocate = (model) => {
        const wasm2 = getInstance();
        const modelDataOffset = wasm2._malloc(model.byteLength);
        if (modelDataOffset === 0) {
          throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
        }
        wasm2.HEAPU8.set(model, modelDataOffset);
        return [modelDataOffset, model.byteLength];
      };
      createSessionFinalize = (modelData, options) => {
        const wasm2 = getInstance();
        let sessionHandle = 0;
        let sessionOptionsHandle = 0;
        let ioBindingHandle = 0;
        let allocs = [];
        const inputNamesUTF8Encoded = [];
        const outputNamesUTF8Encoded = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);
          if (sessionHandle === 0) {
            checkLastError("Can't create a session.");
          }
          const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
          const inputNames = [];
          const outputNames = [];
          const outputPreferredLocations = [];
          for (let i = 0; i < inputCount; i++) {
            const name = wasm2._OrtGetInputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an input name.");
            }
            inputNamesUTF8Encoded.push(name);
            inputNames.push(wasm2.UTF8ToString(name));
          }
          for (let i = 0; i < outputCount; i++) {
            const name = wasm2._OrtGetOutputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an output name.");
            }
            outputNamesUTF8Encoded.push(name);
            const nameString = wasm2.UTF8ToString(name);
            outputNames.push(nameString);
            if (false) {
              const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
              if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
                throw new Error(`Not supported preferred output location: ${location}.`);
              }
              outputPreferredLocations.push(location);
            }
          }
          let bindingState = null;
          if (false) {
            ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
            if (ioBindingHandle === 0) {
              checkLastError("Can't create IO binding.");
            }
            bindingState = {
              handle: ioBindingHandle,
              outputPreferredLocations,
              outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
            };
          }
          activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
          return [sessionHandle, inputNames, outputNames];
        } catch (e) {
          inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          if (ioBindingHandle !== 0) {
            wasm2._OrtReleaseBinding(ioBindingHandle);
          }
          if (sessionHandle !== 0) {
            wasm2._OrtReleaseSession(sessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(modelData[0]);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
        }
      };
      createSession = (model, options) => {
        const modelData = createSessionAllocate(model);
        return createSessionFinalize(modelData, options);
      };
      releaseSession = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot release session. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        if (ioBindingState) {
          wasm2._OrtReleaseBinding(ioBindingState.handle);
        }
        wasm2.jsepUnregisterBuffers?.(sessionId);
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        wasm2._OrtReleaseSession(sessionHandle);
        activeSessions.delete(sessionId);
      };
      prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
        if (!tensor) {
          tensorHandles.push(0);
          return;
        }
        const wasm2 = getInstance();
        const dataType = tensor[0];
        const dims = tensor[1];
        const location = tensor[3];
        let rawData;
        let dataByteLength;
        if (dataType === "string" && location === "gpu-buffer") {
          throw new Error("String tensor is not supported on GPU.");
        }
        if (location === "gpu-buffer") {
          const gpuBuffer = tensor[2].gpuBuffer;
          const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
          dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
          rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
        } else {
          const data = tensor[2];
          if (Array.isArray(data)) {
            dataByteLength = 4 * data.length;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            let dataIndex = rawData / 4;
            for (let i = 0; i < data.length; i++) {
              if (typeof data[i] !== "string") {
                throw new TypeError(`tensor data at index ${i} is not a string`);
              }
              wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
            }
          } else {
            dataByteLength = data.byteLength;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
          }
        }
        const stack = wasm2.stackSave();
        const dimsOffset = wasm2.stackAlloc(4 * dims.length);
        try {
          let dimIndex = dimsOffset / 4;
          dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
          const tensor2 = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(dataType),
            rawData,
            dataByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(location)
          );
          if (tensor2 === 0) {
            checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
          }
          tensorHandles.push(tensor2);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
        const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
        const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
        const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          for (let i = 0; i < inputCount; i++) {
            prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
          }
          for (let i = 0; i < outputCount; i++) {
            prepareInputOutputTensor(
              outputTensors[i],
              outputTensorHandles,
              inputOutputAllocs,
              sessionId,
              inputCount + outputIndices[i]
            );
          }
          let inputValuesIndex = inputValuesOffset / 4;
          let inputNamesIndex = inputNamesOffset / 4;
          let outputValuesIndex = outputValuesOffset / 4;
          let outputNamesIndex = outputNamesOffset / 4;
          for (let i = 0; i < inputCount; i++) {
            wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
            wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
          }
          for (let i = 0; i < outputCount; i++) {
            wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
            wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
          }
          if (false) {
            const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
            if (inputNamesUTF8Encoded.length !== inputCount) {
              throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
            }
            for (let i = 0; i < inputCount; i++) {
              const index = inputIndices[i];
              const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
              }
            }
            for (let i = 0; i < outputCount; i++) {
              const index = outputIndices[i];
              const location = outputTensors[i]?.[3];
              if (location) {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
                }
              } else {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
                }
              }
            }
          }
          let errorCode;
          if (false) {
            errorCode = await wasm2._OrtRunWithBinding(
              sessionHandle,
              ioBindingState.handle,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          } else {
            errorCode = await wasm2._OrtRun(
              sessionHandle,
              inputNamesOffset,
              inputValuesOffset,
              inputCount,
              outputNamesOffset,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          }
          if (errorCode !== 0) {
            checkLastError("failed to call OrtRun().");
          }
          const output = [];
          for (let i = 0; i < outputCount; i++) {
            const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
            if (tensor === outputTensorHandles[i]) {
              output.push(outputTensors[i]);
              continue;
            }
            const beforeGetTensorDataStack = wasm2.stackSave();
            const tensorDataOffset = wasm2.stackAlloc(4 * 4);
            let keepOutputTensor = false;
            let type, dataOffset = 0;
            try {
              const errorCode2 = wasm2._OrtGetTensorData(
                tensor,
                tensorDataOffset,
                tensorDataOffset + 4,
                tensorDataOffset + 8,
                tensorDataOffset + 12
              );
              if (errorCode2 !== 0) {
                checkLastError(`Can't access output tensor data on index ${i}.`);
              }
              let tensorDataIndex = tensorDataOffset / 4;
              const dataType = wasm2.HEAPU32[tensorDataIndex++];
              dataOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
              const dims = [];
              for (let i2 = 0; i2 < dimsLength; i2++) {
                dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
              }
              wasm2._OrtFree(dimsOffset);
              const size = dims.reduce((a, b) => a * b, 1);
              type = tensorDataTypeEnumToString(dataType);
              const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
              if (type === "string") {
                if (preferredLocation === "gpu-buffer") {
                  throw new Error("String tensor is not supported on GPU.");
                }
                const stringData = [];
                let dataIndex = dataOffset / 4;
                for (let i2 = 0; i2 < size; i2++) {
                  const offset = wasm2.HEAPU32[dataIndex++];
                  const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                  stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
                }
                output.push([type, dims, stringData, "cpu"]);
              } else {
                if (preferredLocation === "gpu-buffer" && size > 0) {
                  const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                  const elementSize = getTensorElementSize(dataType);
                  if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                    throw new Error(`Unsupported data type: ${type}`);
                  }
                  keepOutputTensor = true;
                  output.push([
                    type,
                    dims,
                    {
                      gpuBuffer,
                      download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                      dispose: () => {
                        wasm2._OrtReleaseTensor(tensor);
                      }
                    },
                    "gpu-buffer"
                  ]);
                } else {
                  const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                  const data = new typedArrayConstructor(size);
                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                  output.push([type, dims, data, "cpu"]);
                }
              }
            } finally {
              wasm2.stackRestore(beforeGetTensorDataStack);
              if (type === "string" && dataOffset) {
                wasm2._free(dataOffset);
              }
              if (!keepOutputTensor) {
                wasm2._OrtReleaseTensor(tensor);
              }
            }
          }
          if (ioBindingState) {
            wasm2._OrtClearBoundOutputs(ioBindingState.handle);
          }
          return output;
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      endProfiling = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error("invalid session id");
        }
        const sessionHandle = session[0];
        const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
        if (profileFileName === 0) {
          checkLastError("Can't get an profile file name.");
        }
        wasm2._OrtFree(profileFileName);
      };
      extractTransferableBuffers = (tensors) => {
        const buffers = [];
        for (const tensor of tensors) {
          const data = tensor[2];
          if (!Array.isArray(data) && "buffer" in data) {
            buffers.push(data.buffer);
          }
        }
        return buffers;
      };
    }
  });

  // proxy-worker:./proxy-worker/main
  var require_main = __commonJS({
    "proxy-worker:./proxy-worker/main"(exports, module) {
      module.exports = '/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    readFile: () => readFile\n  });\n  var readFile;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-training-wasm-simd.js\n  var require_ort_training_wasm_simd = __commonJS({\n    "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var d = moduleArg, k, l;\n          d.ready = new Promise((a, b) => {\n            k = a;\n            l = b;\n          });\n          var r = Object.assign({}, d), v = "./this.program", aa = "object" == typeof window, x = "function" == typeof importScripts, ba = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, y = "", A, B, C;\n          if (ba) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), D = (init_path(), __toCommonJS(path_exports));\n            y = x ? D.dirname(y) + "/" : __dirname + "/";\n            A = (a, b) => {\n              a = a.startsWith("file://") ? new URL(a) : D.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            C = (a) => {\n              a = A(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            B = (a, b, c, e = true) => {\n              a = a.startsWith("file://") ? new URL(a) : D.normalize(a);\n              fs.readFile(a, e ? void 0 : "utf8", (g, h) => {\n                g ? c(g) : b(e ? h.buffer : h);\n              });\n            };\n            !d.thisProgram && 1 < process.argv.length && (v = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            d.inspect = () => "[Emscripten Module object]";\n          } else if (aa || x)\n            x ? y = self.location.href : "undefined" != typeof document && document.currentScript && (y = document.currentScript.src), _scriptDir && (y = _scriptDir), 0 !== y.indexOf("blob:") ? y = y.substr(0, y.replace(/[?#].*/, "").lastIndexOf("/") + 1) : y = "", A = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, x && (C = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), B = (a, b, c) => {\n              var e = new XMLHttpRequest();\n              e.open("GET", a, true);\n              e.responseType = "arraybuffer";\n              e.onload = () => {\n                200 == e.status || 0 == e.status && e.response ? b(e.response) : c();\n              };\n              e.onerror = c;\n              e.send(null);\n            };\n          var ca = d.print || console.log.bind(console), E = d.printErr || console.error.bind(console);\n          Object.assign(d, r);\n          r = null;\n          d.thisProgram && (v = d.thisProgram);\n          var F;\n          d.wasmBinary && (F = d.wasmBinary);\n          var noExitRuntime = d.noExitRuntime || true;\n          "object" != typeof WebAssembly && G("no native wasm support detected");\n          var H, I, da = false, J, K, L, M;\n          function ea() {\n            var a = H.buffer;\n            d.HEAP8 = J = new Int8Array(a);\n            d.HEAP16 = new Int16Array(a);\n            d.HEAP32 = L = new Int32Array(a);\n            d.HEAPU8 = K = new Uint8Array(a);\n            d.HEAPU16 = new Uint16Array(a);\n            d.HEAPU32 = M = new Uint32Array(a);\n            d.HEAPF32 = new Float32Array(a);\n            d.HEAPF64 = new Float64Array(a);\n          }\n          var fa = [], ha = [], ia = [];\n          function ja() {\n            var a = d.preRun.shift();\n            fa.unshift(a);\n          }\n          var N = 0, O = null, P = null;\n          function G(a) {\n            if (d.onAbort)\n              d.onAbort(a);\n            a = "Aborted(" + a + ")";\n            E(a);\n            da = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            l(a);\n            throw a;\n          }\n          function ka(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var Q;\n          Q = "ort-training-wasm-simd.wasm";\n          if (!ka(Q)) {\n            var la = Q;\n            Q = d.locateFile ? d.locateFile(la, y) : y + la;\n          }\n          function ma(a) {\n            if (a == Q && F)\n              return new Uint8Array(F);\n            if (C)\n              return C(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function na(a) {\n            if (!F && (aa || x)) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => ma(a));\n              if (B)\n                return new Promise((b, c) => {\n                  B(a, (e) => b(new Uint8Array(e)), c);\n                });\n            }\n            return Promise.resolve().then(() => ma(a));\n          }\n          function oa(a, b, c) {\n            return na(a).then((e) => WebAssembly.instantiate(e, b)).then((e) => e).then(c, (e) => {\n              E("failed to asynchronously prepare wasm: " + e);\n              G(e);\n            });\n          }\n          function pa(a, b) {\n            var c = Q;\n            return F || "function" != typeof WebAssembly.instantiateStreaming || ka(c) || c.startsWith("file://") || ba || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((e) => WebAssembly.instantiateStreaming(e, a).then(b, function(g) {\n              E("wasm streaming compile failed: " + g);\n              E("falling back to ArrayBuffer instantiation");\n              return oa(c, a, b);\n            }));\n          }\n          var R, S = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(d);\n          };\n          function qa(a) {\n            this.Ja = a - 24;\n            this.Na = function(b) {\n              M[this.Ja + 4 >> 2 >>> 0] = b;\n            };\n            this.Ma = function(b) {\n              M[this.Ja + 8 >> 2 >>> 0] = b;\n            };\n            this.Ka = function(b, c) {\n              this.La();\n              this.Na(b);\n              this.Ma(c);\n            };\n            this.La = function() {\n              M[this.Ja + 16 >> 2 >>> 0] = 0;\n            };\n          }\n          var ra = 0, sa = 0, ta = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, ua = (a, b, c) => {\n            b >>>= 0;\n            var e = b + c;\n            for (c = b; a[c] && !(c >= e); )\n              ++c;\n            if (16 < c - b && a.buffer && ta)\n              return ta.decode(a.subarray(b, c));\n            for (e = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  e += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var m = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;\n                  65536 > g ? e += String.fromCharCode(g) : (g -= 65536, e += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                e += String.fromCharCode(g);\n            }\n            return e;\n          }, T = (a, b) => (a >>>= 0) ? ua(K, a, b) : "", U = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var e = a.charCodeAt(c);\n              127 >= e ? b++ : 2047 >= e ? b += 2 : 55296 <= e && 57343 >= e ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, V = (a, b, c, e) => {\n            c >>>= 0;\n            if (!(0 < e))\n              return 0;\n            var g = c;\n            e = c + e - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var m = a.charCodeAt(h);\n              if (55296 <= m && 57343 >= m) {\n                var q = a.charCodeAt(++h);\n                m = 65536 + ((m & 1023) << 10) | q & 1023;\n              }\n              if (127 >= m) {\n                if (c >= e)\n                  break;\n                b[c++ >>> 0] = m;\n              } else {\n                if (2047 >= m) {\n                  if (c + 1 >= e)\n                    break;\n                  b[c++ >>> 0] = 192 | m >> 6;\n                } else {\n                  if (65535 >= m) {\n                    if (c + 2 >= e)\n                      break;\n                    b[c++ >>> 0] = 224 | m >> 12;\n                  } else {\n                    if (c + 3 >= e)\n                      break;\n                    b[c++ >>> 0] = 240 | m >> 18;\n                    b[c++ >>> 0] = 128 | m >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | m >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | m & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, W = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), va = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], wa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ba = (a) => {\n            var b = U(a) + 1, c = Aa(b);\n            c && V(a, K, c, b);\n            return c;\n          }, X = {}, Ca = () => {\n            if (!Y) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(\n                "-",\n                "_"\n              ) + ".UTF-8", _: v || "./this.program" }, b;\n              for (b in X)\n                void 0 === X[b] ? delete a[b] : a[b] = X[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Y = c;\n            }\n            return Y;\n          }, Y, Da = [null, [], []], Ea = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Fa = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ga(a) {\n            var b = Array(U(a) + 1);\n            V(a, b, 0, b.length);\n            return b;\n          }\n          function Ha(a, b, c, e) {\n            function g(f, n, p) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )\n                f = p[0] + f;\n              return f;\n            }\n            function h(f, n) {\n              return g(f, n, "0");\n            }\n            function m(f, n) {\n              function p(xa) {\n                return 0 > xa ? -1 : 0 < xa ? 1 : 0;\n              }\n              var z;\n              0 === (z = p(f.getFullYear() - n.getFullYear())) && 0 === (z = p(f.getMonth() - n.getMonth())) && (z = p(f.getDate() - n.getDate()));\n              return z;\n            }\n            function q(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function w(f) {\n              var n = f.Ea;\n              for (f = new Date(new Date(f.Fa + 1900, 0, 1).getTime()); 0 < n; ) {\n                var p = f.getMonth(), z = (W(f.getFullYear()) ? Ea : Fa)[p];\n                if (n > z - f.getDate())\n                  n -= z - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + n);\n                  break;\n                }\n              }\n              p = new Date(f.getFullYear() + 1, 0, 4);\n              n = q(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              p = q(p);\n              return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            var t = L[e + 40 >> 2 >>> 0];\n            e = { Qa: L[e >> 2 >>> 0], Pa: L[e + 4 >> 2 >>> 0], Ga: L[e + 8 >> 2 >>> 0], Ia: L[e + 12 >> 2 >>> 0], Ha: L[e + 16 >> 2 >>> 0], Fa: L[e + 20 >> 2 >>> 0], za: L[e + 24 >> 2 >>> 0], Ea: L[e + 28 >> 2 >>> 0], Sa: L[e + 32 >> 2 >>> 0], Oa: L[e + 36 >> 2 >>> 0], Ra: t ? T(t) : "" };\n            c = T(c);\n            t = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var u in t)\n              c = c.replace(new RegExp(u, "g"), t[u]);\n            var ya = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), za = "January February March April May June July August September October November December".split(" ");\n            t = { "%a": (f) => ya[f.za].substring(0, 3), "%A": (f) => ya[f.za], "%b": (f) => za[f.Ha].substring(0, 3), "%B": (f) => za[f.Ha], "%C": (f) => h((f.Fa + 1900) / 100 | 0, 2), "%d": (f) => h(f.Ia, 2), "%e": (f) => g(f.Ia, 2, " "), "%g": (f) => w(f).toString().substring(2), "%G": (f) => w(f), "%H": (f) => h(f.Ga, 2), "%I": (f) => {\n              f = f.Ga;\n              0 == f ? f = 12 : 12 < f && (f -= 12);\n              return h(f, 2);\n            }, "%j": (f) => {\n              for (var n = 0, p = 0; p <= f.Ha - 1; n += (W(f.Fa + 1900) ? Ea : Fa)[p++])\n                ;\n              return h(f.Ia + n, 3);\n            }, "%m": (f) => h(f.Ha + 1, 2), "%M": (f) => h(f.Pa, 2), "%n": () => "\\n", "%p": (f) => 0 <= f.Ga && 12 > f.Ga ? "AM" : "PM", "%S": (f) => h(f.Qa, 2), "%t": () => "	", "%u": (f) => f.za || 7, "%U": (f) => h(Math.floor((f.Ea + 7 - f.za) / 7), 2), "%V": (f) => {\n              var n = Math.floor((f.Ea + 7 - (f.za + 6) % 7) / 7);\n              2 >= (f.za + 371 - f.Ea - 2) % 7 && n++;\n              if (n)\n                53 == n && (p = (f.za + 371 - f.Ea) % 7, 4 == p || 3 == p && W(f.Fa) || (n = 1));\n              else {\n                n = 52;\n                var p = (f.za + 7 - f.Ea - 1) % 7;\n                (4 == p || 5 == p && W(f.Fa % 400 - 1)) && n++;\n              }\n              return h(n, 2);\n            }, "%w": (f) => f.za, "%W": (f) => h(Math.floor((f.Ea + 7 - (f.za + 6) % 7) / 7), 2), "%y": (f) => (f.Fa + 1900).toString().substring(2), "%Y": (f) => f.Fa + 1900, "%z": (f) => {\n              f = f.Oa;\n              var n = 0 <= f;\n              f = Math.abs(f) / 60;\n              return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n            }, "%Z": (f) => f.Ra, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (u in t)\n              c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](e)));\n            c = c.replace(/\\0\\0/g, "%");\n            u = Ga(c);\n            if (u.length > b)\n              return 0;\n            J.set(u, a >>> 0);\n            return u.length - 1;\n          }\n          var Ja = {\n            a: function(a, b, c) {\n              a >>>= 0;\n              new qa(a).Ka(b >>> 0, c >>> 0);\n              ra = a;\n              sa++;\n              throw ra;\n            },\n            e: function() {\n              return 0;\n            },\n            H: function() {\n            },\n            x: function() {\n            },\n            z: function() {\n            },\n            k: function() {\n              return 0;\n            },\n            F: function() {\n            },\n            B: function() {\n            },\n            E: function() {\n            },\n            g: function() {\n            },\n            y: function() {\n            },\n            v: function() {\n            },\n            G: function() {\n            },\n            w: function() {\n            },\n            l: () => true,\n            o: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              L[c >> 2 >>> 0] = a.getUTCSeconds();\n              L[c + 4 >> 2 >>> 0] = a.getUTCMinutes();\n              L[c + 8 >> 2 >>> 0] = a.getUTCHours();\n              L[c + 12 >> 2 >>> 0] = a.getUTCDate();\n              L[c + 16 >> 2 >>> 0] = a.getUTCMonth();\n              L[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              L[c + 24 >> 2 >>> 0] = a.getUTCDay();\n              L[c + 28 >> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n            },\n            p: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              L[c >> 2 >>> 0] = a.getSeconds();\n              L[c + 4 >> 2 >>> 0] = a.getMinutes();\n              L[c + 8 >> 2 >>> 0] = a.getHours();\n              L[c + 12 >> 2 >>> 0] = a.getDate();\n              L[c + 16 >> 2 >>> 0] = a.getMonth();\n              L[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;\n              L[c + 24 >> 2 >>> 0] = a.getDay();\n              L[c + 28 >> 2 >>> 0] = (W(a.getFullYear()) ? va : wa)[a.getMonth()] + a.getDate() - 1 | 0;\n              L[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var e = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              L[c + 32 >> 2 >>> 0] = (b != e && a.getTimezoneOffset() == Math.min(e, b)) | 0;\n            },\n            q: function(a) {\n              a >>>= 0;\n              var b = new Date(L[a + 20 >> 2 >>> 0] + 1900, L[a + 16 >> 2 >>> 0], L[a + 12 >> 2 >>> 0], L[a + 8 >> 2 >>> 0], L[a + 4 >> 2 >>> 0], L[a >> 2 >>> 0], 0), c = L[a + 32 >> 2 >>> 0], e = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);\n              0 > c ? L[a + 32 >> 2 >>> 0] = Number(g != h && m == e) : 0 < c != (m == e) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - e)));\n              L[a + 24 >> 2 >>> 0] = b.getDay();\n              L[a + 28 >> 2 >>> 0] = (W(b.getFullYear()) ? va : wa)[b.getMonth()] + b.getDate() - 1 | 0;\n              L[a >> 2 >>> 0] = b.getSeconds();\n              L[a + 4 >> 2 >>> 0] = b.getMinutes();\n              L[a + 8 >> 2 >>> 0] = b.getHours();\n              L[a + 12 >> 2 >>> 0] = b.getDate();\n              L[a + 16 >> 2 >>> 0] = b.getMonth();\n              L[a + 20 >> 2 >>> 0] = b.getYear();\n              a = b.getTime() / 1e3;\n              return Ia((R = a, 1 <= +Math.abs(R) ? 0 < R ? +Math.floor(R / 4294967296) >>> 0 : ~~+Math.ceil((R - +(~~R >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n            },\n            m: function() {\n              return -52;\n            },\n            n: function() {\n            },\n            t: function(a, b, c) {\n              function e(w) {\n                return (w = w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? w[1] : "GMT";\n              }\n              c >>>= 0;\n              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);\n              g = h.getTimezoneOffset();\n              var q = m.getTimezoneOffset();\n              M[a >>> 0 >> 2 >>> 0] = 60 * Math.max(g, q);\n              L[b >>> 0 >> 2 >>> 0] = Number(g != q);\n              a = e(h);\n              b = e(m);\n              a = Ba(a);\n              b = Ba(b);\n              q < g ? (M[c >> 2 >>> 0] = a, M[c + 4 >> 2 >>> 0] = b) : (M[c >> 2 >>> 0] = b, M[c + 4 >> 2 >>> 0] = a);\n            },\n            d: () => {\n              G("");\n            },\n            h: function() {\n              return Date.now();\n            },\n            u: function() {\n              return 4294901760;\n            },\n            b: () => performance.now(),\n            I: function(a, b, c) {\n              b >>>= 0;\n              return K.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n            },\n            s: function(a) {\n              a >>>= 0;\n              var b = K.length;\n              if (4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var e = b * (1 + 0.2 / c);\n                e = Math.min(e, a + 100663296);\n                var g = Math;\n                e = Math.max(a, e);\n                a: {\n                  g = g.min.call(g, 4294901760, e + (65536 - e % 65536) % 65536) - H.buffer.byteLength + 65535 >>> 16;\n                  try {\n                    H.grow(g);\n                    ea();\n                    var h = 1;\n                    break a;\n                  } catch (m) {\n                  }\n                  h = void 0;\n                }\n                if (h)\n                  return true;\n              }\n              return false;\n            },\n            C: function(a, b) {\n              a >>>= 0;\n              b >>>= 0;\n              var c = 0;\n              Ca().forEach(function(e, g) {\n                var h = b + c;\n                g = M[a + 4 * g >> 2 >>> 0] = h;\n                for (h = 0; h < e.length; ++h)\n                  J[g++ >> 0 >>> 0] = e.charCodeAt(h);\n                J[g >> 0 >>> 0] = 0;\n                c += e.length + 1;\n              });\n              return 0;\n            },\n            D: function(a, b) {\n              a >>>= 0;\n              b >>>= 0;\n              var c = Ca();\n              M[a >> 2 >>> 0] = c.length;\n              var e = 0;\n              c.forEach(function(g) {\n                e += g.length + 1;\n              });\n              M[b >> 2 >>> 0] = e;\n              return 0;\n            },\n            f: () => 52,\n            j: function() {\n              return 52;\n            },\n            r: function() {\n              return 70;\n            },\n            i: function(a, b, c, e) {\n              b >>>= 0;\n              c >>>= 0;\n              e >>>= 0;\n              for (var g = 0, h = 0; h < c; h++) {\n                var m = M[b >> 2 >>> 0], q = M[b + 4 >> 2 >>> 0];\n                b += 8;\n                for (var w = 0; w < q; w++) {\n                  var t = K[m + w >>> 0], u = Da[a];\n                  0 === t || 10 === t ? ((1 === a ? ca : E)(ua(u, 0)), u.length = 0) : u.push(t);\n                }\n                g += q;\n              }\n              M[e >> 2 >>> 0] = g;\n              return 0;\n            },\n            A: Ha,\n            c: function(a, b, c, e) {\n              return Ha(a >>> 0, b >>> 0, c >>> 0, e >>> 0);\n            }\n          };\n          (function() {\n            function a(c) {\n              c = c.exports;\n              I = c = Ka(c);\n              H = I.J;\n              ea();\n              ha.unshift(I.K);\n              N--;\n              d.monitorRunDependencies && d.monitorRunDependencies(N);\n              if (0 == N && (null !== O && (clearInterval(O), O = null), P)) {\n                var e = P;\n                P = null;\n                e();\n              }\n              return c;\n            }\n            var b = { a: Ja };\n            N++;\n            d.monitorRunDependencies && d.monitorRunDependencies(N);\n            if (d.instantiateWasm)\n              try {\n                return d.instantiateWasm(b, a);\n              } catch (c) {\n                E("Module.instantiateWasm callback failed with error: " + c), l(c);\n              }\n            pa(b, function(c) {\n              a(c.instance);\n            }).catch(l);\n            return {};\n          })();\n          d._OrtInit = (a, b) => (d._OrtInit = I.L)(a, b);\n          d._OrtGetLastError = (a, b) => (d._OrtGetLastError = I.M)(a, b);\n          d._OrtCreateSessionOptions = (a, b, c, e, g, h, m, q, w, t) => (d._OrtCreateSessionOptions = I.N)(a, b, c, e, g, h, m, q, w, t);\n          d._OrtAppendExecutionProvider = (a, b) => (d._OrtAppendExecutionProvider = I.O)(a, b);\n          d._OrtAddFreeDimensionOverride = (a, b, c) => (d._OrtAddFreeDimensionOverride = I.P)(a, b, c);\n          d._OrtAddSessionConfigEntry = (a, b, c) => (d._OrtAddSessionConfigEntry = I.Q)(a, b, c);\n          d._OrtReleaseSessionOptions = (a) => (d._OrtReleaseSessionOptions = I.R)(a);\n          d._OrtCreateSession = (a, b, c) => (d._OrtCreateSession = I.S)(a, b, c);\n          d._OrtReleaseSession = (a) => (d._OrtReleaseSession = I.T)(a);\n          d._OrtGetInputOutputCount = (a, b, c) => (d._OrtGetInputOutputCount = I.U)(a, b, c);\n          d._OrtGetInputName = (a, b) => (d._OrtGetInputName = I.V)(a, b);\n          d._OrtGetOutputName = (a, b) => (d._OrtGetOutputName = I.W)(a, b);\n          d._OrtFree = (a) => (d._OrtFree = I.X)(a);\n          d._OrtCreateTensor = (a, b, c, e, g, h) => (d._OrtCreateTensor = I.Y)(a, b, c, e, g, h);\n          d._OrtGetTensorData = (a, b, c, e, g) => (d._OrtGetTensorData = I.Z)(a, b, c, e, g);\n          d._OrtReleaseTensor = (a) => (d._OrtReleaseTensor = I._)(a);\n          d._OrtCreateRunOptions = (a, b, c, e) => (d._OrtCreateRunOptions = I.$)(a, b, c, e);\n          d._OrtAddRunConfigEntry = (a, b, c) => (d._OrtAddRunConfigEntry = I.aa)(a, b, c);\n          d._OrtReleaseRunOptions = (a) => (d._OrtReleaseRunOptions = I.ba)(a);\n          d._OrtCreateBinding = (a) => (d._OrtCreateBinding = I.ca)(a);\n          d._OrtBindInput = (a, b, c) => (d._OrtBindInput = I.da)(a, b, c);\n          d._OrtBindOutput = (a, b, c, e) => (d._OrtBindOutput = I.ea)(a, b, c, e);\n          d._OrtClearBoundOutputs = (a) => (d._OrtClearBoundOutputs = I.fa)(a);\n          d._OrtReleaseBinding = (a) => (d._OrtReleaseBinding = I.ga)(a);\n          d._OrtRunWithBinding = (a, b, c, e, g) => (d._OrtRunWithBinding = I.ha)(a, b, c, e, g);\n          d._OrtRun = (a, b, c, e, g, h, m, q) => (d._OrtRun = I.ia)(a, b, c, e, g, h, m, q);\n          d._OrtEndProfiling = (a) => (d._OrtEndProfiling = I.ja)(a);\n          d._OrtTrainingLoadCheckpoint = (a, b) => (d._OrtTrainingLoadCheckpoint = I.ka)(a, b);\n          d._OrtTrainingReleaseCheckpoint = (a) => (d._OrtTrainingReleaseCheckpoint = I.la)(a);\n          d._OrtTrainingCreateSession = (a, b, c, e, g, h, m, q) => (d._OrtTrainingCreateSession = I.ma)(a, b, c, e, g, h, m, q);\n          d._OrtTrainingLazyResetGrad = (a) => (d._OrtTrainingLazyResetGrad = I.na)(a);\n          d._OrtTrainingRunTrainStep = (a, b, c, e, g, h) => (d._OrtTrainingRunTrainStep = I.oa)(a, b, c, e, g, h);\n          d._OrtTrainingOptimizerStep = (a, b) => (d._OrtTrainingOptimizerStep = I.pa)(a, b);\n          d._OrtTrainingEvalStep = (a, b, c, e, g, h) => (d._OrtTrainingEvalStep = I.qa)(a, b, c, e, g, h);\n          d._OrtTrainingGetParametersSize = (a, b, c) => (d._OrtTrainingGetParametersSize = I.ra)(a, b, c);\n          d._OrtTrainingCopyParametersToBuffer = (a, b, c, e) => (d._OrtTrainingCopyParametersToBuffer = I.sa)(a, b, c, e);\n          d._OrtTrainingCopyParametersFromBuffer = (a, b, c, e) => (d._OrtTrainingCopyParametersFromBuffer = I.ta)(a, b, c, e);\n          d._OrtTrainingGetModelInputOutputCount = (a, b, c, e) => (d._OrtTrainingGetModelInputOutputCount = I.ua)(a, b, c, e);\n          d._OrtTrainingGetModelInputOutputName = (a, b, c, e) => (d._OrtTrainingGetModelInputOutputName = I.va)(a, b, c, e);\n          d._OrtTrainingReleaseSession = (a) => (d._OrtTrainingReleaseSession = I.wa)(a);\n          var Aa = d._malloc = (a) => (Aa = d._malloc = I.xa)(a);\n          d._free = (a) => (d._free = I.ya)(a);\n          var Ia = (a) => (Ia = I.Aa)(a), La = () => (La = I.Ba)(), Ma = (a) => (Ma = I.Ca)(a), Na = (a) => (Na = I.Da)(a);\n          function Ka(a) {\n            a = Object.assign({}, a);\n            var b = (e) => () => e() >>> 0, c = (e) => (g) => e(g) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.malloc = c(a.malloc);\n            a.stackSave = b(a.stackSave);\n            a.stackAlloc = c(a.stackAlloc);\n            return a;\n          }\n          d.stackAlloc = Na;\n          d.stackSave = La;\n          d.stackRestore = Ma;\n          d.UTF8ToString = T;\n          d.stringToUTF8 = (a, b, c) => V(a, K, b, c);\n          d.lengthBytesUTF8 = U;\n          var Z;\n          P = function Oa() {\n            Z || Pa();\n            Z || (P = Oa);\n          };\n          function Pa() {\n            function a() {\n              if (!Z && (Z = true, d.calledRun = true, !da)) {\n                S(ha);\n                k(d);\n                if (d.onRuntimeInitialized)\n                  d.onRuntimeInitialized();\n                if (d.postRun)\n                  for ("function" == typeof d.postRun && (d.postRun = [d.postRun]); d.postRun.length; ) {\n                    var b = d.postRun.shift();\n                    ia.unshift(b);\n                  }\n                S(ia);\n              }\n            }\n            if (!(0 < N)) {\n              if (d.preRun)\n                for ("function" == typeof d.preRun && (d.preRun = [d.preRun]); d.preRun.length; )\n                  ja();\n              S(fa);\n              0 < N || (d.setStatus ? (d.setStatus("Running..."), setTimeout(function() {\n                setTimeout(function() {\n                  d.setStatus("");\n                }, 1);\n                a();\n              }, 1)) : a());\n            }\n          }\n          if (d.preInit)\n            for ("function" == typeof d.preInit && (d.preInit = [d.preInit]); 0 < d.preInit.length; )\n              d.preInit.pop()();\n          Pa();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function aa() {\n            d.buffer != l.buffer && m();\n            return l;\n          }\n          function n() {\n            d.buffer != l.buffer && m();\n            return ba;\n          }\n          function p() {\n            d.buffer != l.buffer && m();\n            return ca;\n          }\n          function r() {\n            d.buffer != l.buffer && m();\n            return da;\n          }\n          function ea() {\n            d.buffer != l.buffer && m();\n            return fa;\n          }\n          var w = moduleArg, ha, x;\n          w.ready = new Promise((a, b) => {\n            ha = a;\n            x = b;\n          });\n          var ia = Object.assign({}, w), ja = "./this.program", z = (a, b) => {\n            throw b;\n          }, ka = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = w.ENVIRONMENT_IS_PTHREAD || false, E = "";\n          function la(a) {\n            return w.locateFile ? w.locateFile(a, E) : E + a;\n          }\n          var ma, F, H;\n          if (B) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));\n            E = A ? na.dirname(E) + "/" : __dirname + "/";\n            ma = (b, c) => {\n              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            H = (b) => {\n              b = ma(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            F = (b, c, e, h = true) => {\n              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);\n              fs.readFile(b, h ? void 0 : "utf8", (g, k) => {\n                g ? e(g) : c(h ? k.buffer : k);\n              });\n            };\n            !w.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            z = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            w.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (ka || A)\n            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ma = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, A && (H = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), F = (a, b, c) => {\n              var e = new XMLHttpRequest();\n              e.open("GET", a, true);\n              e.responseType = "arraybuffer";\n              e.onload = () => {\n                200 == e.status || 0 == e.status && e.response ? b(e.response) : c();\n              };\n              e.onerror = c;\n              e.send(null);\n            });\n          B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var oa = console.log.bind(console), pa = console.error.bind(console);\n          B && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var qa = w.print || oa, I = w.printErr || pa;\n          Object.assign(w, ia);\n          ia = null;\n          w.thisProgram && (ja = w.thisProgram);\n          w.quit && (z = w.quit);\n          var J;\n          w.wasmBinary && (J = w.wasmBinary);\n          var noExitRuntime = w.noExitRuntime || true;\n          "object" != typeof WebAssembly && K("no native wasm support detected");\n          var d, L, ra, M = false, N, l, ba, ca, da, fa;\n          function m() {\n            var a = d.buffer;\n            w.HEAP8 = l = new Int8Array(a);\n            w.HEAP16 = new Int16Array(a);\n            w.HEAP32 = ca = new Int32Array(a);\n            w.HEAPU8 = ba = new Uint8Array(a);\n            w.HEAPU16 = new Uint16Array(a);\n            w.HEAPU32 = da = new Uint32Array(a);\n            w.HEAPF32 = new Float32Array(a);\n            w.HEAPF64 = fa = new Float64Array(a);\n          }\n          var O = w.INITIAL_MEMORY || 16777216;\n          5242880 <= O || K("INITIAL_MEMORY should be larger than STACK_SIZE, was " + O + "! (STACK_SIZE=5242880)");\n          if (D)\n            d = w.wasmMemory;\n          else if (w.wasmMemory)\n            d = w.wasmMemory;\n          else if (d = new WebAssembly.Memory({ initial: O / 65536, maximum: 65536, shared: true }), !(d.buffer instanceof SharedArrayBuffer))\n            throw I("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && I("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          m();\n          O = d.buffer.byteLength;\n          var sa, ta = [], ua = [], va = [], wa = 0;\n          function P() {\n            return noExitRuntime || 0 < wa;\n          }\n          var Q = 0, xa = null, R = null;\n          function ya() {\n            Q++;\n            w.monitorRunDependencies && w.monitorRunDependencies(Q);\n          }\n          function za() {\n            Q--;\n            w.monitorRunDependencies && w.monitorRunDependencies(Q);\n            if (0 == Q && (null !== xa && (clearInterval(xa), xa = null), R)) {\n              var a = R;\n              R = null;\n              a();\n            }\n          }\n          function K(a) {\n            if (w.onAbort)\n              w.onAbort(a);\n            a = "Aborted(" + a + ")";\n            I(a);\n            M = true;\n            N = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            x(a);\n            throw a;\n          }\n          function Aa(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var S;\n          S = "ort-wasm-threaded.wasm";\n          Aa(S) || (S = la(S));\n          function Ba(a) {\n            if (a == S && J)\n              return new Uint8Array(J);\n            if (H)\n              return H(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Ca(a) {\n            if (!J && (ka || A)) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Ba(a));\n              if (F)\n                return new Promise((b, c) => {\n                  F(a, (e) => b(new Uint8Array(e)), c);\n                });\n            }\n            return Promise.resolve().then(() => Ba(a));\n          }\n          function Da(a, b, c) {\n            return Ca(a).then((e) => WebAssembly.instantiate(e, b)).then((e) => e).then(c, (e) => {\n              I("failed to asynchronously prepare wasm: " + e);\n              K(e);\n            });\n          }\n          function Ea(a, b) {\n            var c = S;\n            return J || "function" != typeof WebAssembly.instantiateStreaming || Aa(c) || c.startsWith("file://") || B || "function" != typeof fetch ? Da(c, a, b) : fetch(c, { credentials: "same-origin" }).then((e) => WebAssembly.instantiateStreaming(e, a).then(b, function(h) {\n              I("wasm streaming compile failed: " + h);\n              I("falling back to ArrayBuffer instantiation");\n              return Da(c, a, b);\n            }));\n          }\n          var T;\n          function U(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          function Fa(a) {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }\n          function Ga(a) {\n            (a = V.La[a]) || K();\n            V.lb(a);\n          }\n          function Ha(a) {\n            var b = V.fb();\n            if (!b)\n              return 6;\n            V.Oa.push(b);\n            V.La[a.Na] = b;\n            b.Na = a.Na;\n            var c = { cmd: "run", start_routine: a.mb, arg: a.eb, pthread_ptr: a.Na };\n            B && b.unref();\n            b.postMessage(c, a.sb);\n            return 0;\n          }\n          var Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {\n            b >>>= 0;\n            var e = b + c;\n            for (c = b; a[c] && !(c >= e); )\n              ++c;\n            if (16 < c - b && a.buffer && Ia)\n              return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (e = ""; b < c; ) {\n              var h = a[b++];\n              if (h & 128) {\n                var g = a[b++] & 63;\n                if (192 == (h & 224))\n                  e += String.fromCharCode((h & 31) << 6 | g);\n                else {\n                  var k = a[b++] & 63;\n                  h = 224 == (h & 240) ? (h & 15) << 12 | g << 6 | k : (h & 7) << 18 | g << 12 | k << 6 | a[b++] & 63;\n                  65536 > h ? e += String.fromCharCode(h) : (h -= 65536, e += String.fromCharCode(55296 | h >> 10, 56320 | h & 1023));\n                }\n              } else\n                e += String.fromCharCode(h);\n            }\n            return e;\n          }, Ka = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "";\n          function La(a) {\n            if (D)\n              return W(1, 1, a);\n            N = a;\n            if (!P()) {\n              V.nb();\n              if (w.onExit)\n                w.onExit(a);\n              M = true;\n            }\n            z(a, new U(a));\n          }\n          var Na = (a) => {\n            N = a;\n            if (D)\n              throw Ma(a), "unwind";\n            La(a);\n          }, V = {\n            Ra: [],\n            Oa: [],\n            Za: [],\n            La: {},\n            Va: function() {\n              D ? V.hb() : V.gb();\n            },\n            gb: function() {\n              ta.unshift(() => {\n                ya();\n                V.ib(() => za());\n              });\n            },\n            hb: function() {\n              V.receiveObjectTransfer = V.kb;\n              V.threadInitTLS = V.Ya;\n              V.setExitStatus = V.Xa;\n              noExitRuntime = false;\n            },\n            Xa: function(a) {\n              N = a;\n            },\n            xb: ["$terminateWorker"],\n            nb: function() {\n              for (var a of V.Oa)\n                Fa(a);\n              for (a of V.Ra)\n                Fa(a);\n              V.Ra = [];\n              V.Oa = [];\n              V.La = [];\n            },\n            lb: function(a) {\n              var b = a.Na;\n              delete V.La[b];\n              V.Ra.push(a);\n              V.Oa.splice(V.Oa.indexOf(a), 1);\n              a.Na = 0;\n              Oa(b);\n            },\n            kb: function() {\n            },\n            Ya: function() {\n              V.Za.forEach((a) => a());\n            },\n            jb: (a) => new Promise((b) => {\n              a.onmessage = (g) => {\n                g = g.data;\n                var k = g.cmd;\n                if (g.targetThread && g.targetThread != X()) {\n                  var t = V.La[g.wb];\n                  t ? t.postMessage(g, g.transferList) : I(\'Internal error! Worker sent a message "\' + k + \'" to target pthread \' + g.targetThread + ", but that thread no longer exists!");\n                } else if ("checkMailbox" === k)\n                  Y();\n                else if ("spawnThread" === k)\n                  Ha(g);\n                else if ("cleanupThread" === k)\n                  Ga(g.thread);\n                else if ("killThread" === k)\n                  g = g.thread, k = V.La[g], delete V.La[g], Fa(k), Oa(g), V.Oa.splice(\n                    V.Oa.indexOf(k),\n                    1\n                  ), k.Na = 0;\n                else if ("cancelThread" === k)\n                  V.La[g.thread].postMessage({ cmd: "cancel" });\n                else if ("loaded" === k)\n                  a.loaded = true, b(a);\n                else if ("alert" === k)\n                  alert("Thread " + g.threadId + ": " + g.text);\n                else if ("setimmediate" === g.target)\n                  a.postMessage(g);\n                else if ("callHandler" === k)\n                  w[g.handler](...g.args);\n                else\n                  k && I("worker sent an unknown command " + k);\n              };\n              a.onerror = (g) => {\n                I("worker sent an error! " + g.filename + ":" + g.lineno + ": " + g.message);\n                throw g;\n              };\n              B && (a.on("message", function(g) {\n                a.onmessage({ data: g });\n              }), a.on("error", function(g) {\n                a.onerror(g);\n              }));\n              var c = [], e = ["onExit", "onAbort", "print", "printErr"], h;\n              for (h of e)\n                w.hasOwnProperty(h) && c.push(h);\n              a.postMessage({ cmd: "load", handlers: c, urlOrBlob: w.mainScriptUrlOrBlob || _scriptDir, wasmMemory: d, wasmModule: ra });\n            }),\n            ib: function(a) {\n              a();\n            },\n            cb: function() {\n              var a = la("ort-wasm-threaded.worker.js");\n              a = new Worker(a);\n              V.Ra.push(a);\n            },\n            fb: function() {\n              0 == V.Ra.length && (V.cb(), V.jb(V.Ra[0]));\n              return V.Ra.pop();\n            }\n          };\n          w.PThread = V;\n          var Pa = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(w);\n          };\n          w.establishStackSpace = function() {\n            var a = X(), b = p()[a + 52 >> 2 >>> 0];\n            a = p()[a + 56 >> 2 >>> 0];\n            Qa(b, b - a);\n            Ra(b);\n          };\n          function Ma(a) {\n            if (D)\n              return W(2, 0, a);\n            Na(a);\n          }\n          var Sa = [];\n          w.invokeEntryPoint = function(a, b) {\n            var c = Sa[a];\n            c || (a >= Sa.length && (Sa.length = a + 1), Sa[a] = c = sa.get(a));\n            a = c(b);\n            P() ? V.Xa(a) : Ta(a);\n          };\n          function Ua(a) {\n            this.Ua = a - 24;\n            this.bb = function(b) {\n              r()[this.Ua + 4 >> 2 >>> 0] = b;\n            };\n            this.ab = function(b) {\n              r()[this.Ua + 8 >> 2 >>> 0] = b;\n            };\n            this.Va = function(b, c) {\n              this.$a();\n              this.bb(b);\n              this.ab(c);\n            };\n            this.$a = function() {\n              r()[this.Ua + 16 >> 2 >>> 0] = 0;\n            };\n          }\n          var Va = 0, Wa = 0;\n          function Xa(a, b, c, e) {\n            return D ? W(3, 1, a, b, c, e) : Ya(a, b, c, e);\n          }\n          function Ya(a, b, c, e) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return I("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var h = [];\n            if (D && 0 === h.length)\n              return Xa(a, b, c, e);\n            a = { mb: c, Na: a, eb: e, sb: h };\n            return D ? (a.ub = "spawnThread", postMessage(a, h), 0) : Ha(a);\n          }\n          function Za(a, b, c) {\n            return D ? W(4, 1, a, b, c) : 0;\n          }\n          function $a(a, b) {\n            if (D)\n              return W(5, 1, a, b);\n          }\n          var ab = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var e = a.charCodeAt(c);\n              127 >= e ? b++ : 2047 >= e ? b += 2 : 55296 <= e && 57343 >= e ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, bb = (a, b, c, e) => {\n            c >>>= 0;\n            if (!(0 < e))\n              return 0;\n            var h = c;\n            e = c + e - 1;\n            for (var g = 0; g < a.length; ++g) {\n              var k = a.charCodeAt(g);\n              if (55296 <= k && 57343 >= k) {\n                var t = a.charCodeAt(++g);\n                k = 65536 + ((k & 1023) << 10) | t & 1023;\n              }\n              if (127 >= k) {\n                if (c >= e)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= e)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= e)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= e)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - h;\n          }, cb = (a, b, c) => bb(a, n(), b, c);\n          function db(a, b) {\n            if (D)\n              return W(6, 1, a, b);\n          }\n          function eb(a, b, c) {\n            if (D)\n              return W(7, 1, a, b, c);\n          }\n          function fb(a, b, c) {\n            return D ? W(8, 1, a, b, c) : 0;\n          }\n          function gb(a, b) {\n            if (D)\n              return W(9, 1, a, b);\n          }\n          function hb(a, b, c) {\n            if (D)\n              return W(10, 1, a, b, c);\n          }\n          function ib(a, b, c, e) {\n            if (D)\n              return W(11, 1, a, b, c, e);\n          }\n          function jb(a, b, c, e) {\n            if (D)\n              return W(12, 1, a, b, c, e);\n          }\n          function kb(a, b, c, e) {\n            if (D)\n              return W(13, 1, a, b, c, e);\n          }\n          function lb(a) {\n            if (D)\n              return W(14, 1, a);\n          }\n          function mb(a, b) {\n            if (D)\n              return W(15, 1, a, b);\n          }\n          function nb(a, b, c) {\n            if (D)\n              return W(16, 1, a, b, c);\n          }\n          var ob = (a) => {\n            if (!M)\n              try {\n                if (a(), !P())\n                  try {\n                    D ? Ta(N) : Na(N);\n                  } catch (b) {\n                    b instanceof U || "unwind" == b || z(1, b);\n                  }\n              } catch (b) {\n                b instanceof U || "unwind" == b || z(1, b);\n              }\n          };\n          function pb(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.tb && (Atomics.tb(p(), a >> 2, a).value.then(Y), a += 128, Atomics.store(p(), a >> 2, 1));\n          }\n          w.__emscripten_thread_mailbox_await = pb;\n          function Y() {\n            var a = X();\n            a && (pb(a), ob(() => qb()));\n          }\n          w.checkMailbox = Y;\n          var Z = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), rb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], sb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function tb(a, b, c, e, h, g, k, t) {\n            return D ? W(17, 1, a, b, c, e, h, g, k, t) : -52;\n          }\n          function ub(a, b, c, e, h, g, k) {\n            if (D)\n              return W(18, 1, a, b, c, e, h, g, k);\n          }\n          var wb = (a) => {\n            var b = ab(a) + 1, c = vb(b);\n            c && cb(a, c, b);\n            return c;\n          }, yb = (a) => {\n            var b = xb();\n            a = a();\n            Ra(b);\n            return a;\n          };\n          function W(a, b) {\n            var c = arguments.length - 2, e = arguments;\n            return yb(() => {\n              for (var h = zb(8 * c), g = h >> 3, k = 0; k < c; k++) {\n                var t = e[2 + k];\n                ea()[g + k >>> 0] = t;\n              }\n              return Ab(a, c, h, b);\n            });\n          }\n          var Bb = [], Cb = {}, Eb = () => {\n            if (!Db) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;\n              for (b in Cb)\n                void 0 === Cb[b] ? delete a[b] : a[b] = Cb[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Db = c;\n            }\n            return Db;\n          }, Db;\n          function Fb(a, b) {\n            if (D)\n              return W(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Eb().forEach(function(e, h) {\n              var g = b + c;\n              h = r()[a + 4 * h >> 2 >>> 0] = g;\n              for (g = 0; g < e.length; ++g)\n                aa()[h++ >> 0 >>> 0] = e.charCodeAt(g);\n              aa()[h >> 0 >>> 0] = 0;\n              c += e.length + 1;\n            });\n            return 0;\n          }\n          function Gb(a, b) {\n            if (D)\n              return W(20, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = Eb();\n            r()[a >> 2 >>> 0] = c.length;\n            var e = 0;\n            c.forEach(function(h) {\n              e += h.length + 1;\n            });\n            r()[b >> 2 >>> 0] = e;\n            return 0;\n          }\n          function Hb(a) {\n            return D ? W(21, 1, a) : 52;\n          }\n          function Lb(a, b, c, e) {\n            return D ? W(22, 1, a, b, c, e) : 52;\n          }\n          function Mb(a, b, c, e, h) {\n            return D ? W(23, 1, a, b, c, e, h) : 70;\n          }\n          var Nb = [null, [], []];\n          function Ob(a, b, c, e) {\n            if (D)\n              return W(24, 1, a, b, c, e);\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            for (var h = 0, g = 0; g < c; g++) {\n              var k = r()[b >> 2 >>> 0], t = r()[b + 4 >> 2 >>> 0];\n              b += 8;\n              for (var C = 0; C < t; C++) {\n                var v = n()[k + C >>> 0], y = Nb[a];\n                0 === v || 10 === v ? ((1 === a ? qa : I)(Ja(y, 0)), y.length = 0) : y.push(v);\n              }\n              h += t;\n            }\n            r()[e >> 2 >>> 0] = h;\n            return 0;\n          }\n          var Pb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Qb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Rb(a) {\n            var b = Array(ab(a) + 1);\n            bb(a, b, 0, b.length);\n            return b;\n          }\n          var Sb = (a, b) => {\n            aa().set(a, b >>> 0);\n          };\n          function Tb(a, b, c, e) {\n            function h(f, q, u) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < q; )\n                f = u[0] + f;\n              return f;\n            }\n            function g(f, q) {\n              return h(f, q, "0");\n            }\n            function k(f, q) {\n              function u(Ib) {\n                return 0 > Ib ? -1 : 0 < Ib ? 1 : 0;\n              }\n              var G;\n              0 === (G = u(f.getFullYear() - q.getFullYear())) && 0 === (G = u(f.getMonth() - q.getMonth())) && (G = u(f.getDate() - q.getDate()));\n              return G;\n            }\n            function t(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function C(f) {\n              var q = f.Pa;\n              for (f = new Date(new Date(f.Qa + 1900, 0, 1).getTime()); 0 < q; ) {\n                var u = f.getMonth(), G = (Z(f.getFullYear()) ? Pb : Qb)[u];\n                if (q > G - f.getDate())\n                  q -= G - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + q);\n                  break;\n                }\n              }\n              u = new Date(f.getFullYear() + 1, 0, 4);\n              q = t(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              u = t(u);\n              return 0 >= k(q, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            var v = p()[e + 40 >> 2 >>> 0];\n            e = { qb: p()[e >> 2 >>> 0], pb: p()[e + 4 >> 2 >>> 0], Sa: p()[e + 8 >> 2 >>> 0], Wa: p()[e + 12 >> 2 >>> 0], Ta: p()[e + 16 >> 2 >>> 0], Qa: p()[e + 20 >> 2 >>> 0], Ma: p()[e + 24 >> 2 >>> 0], Pa: p()[e + 28 >> 2 >>> 0], yb: p()[e + 32 >> 2 >>> 0], ob: p()[e + 36 >> 2 >>> 0], rb: v ? Ka(v) : "" };\n            c = Ka(c);\n            v = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var y in v)\n              c = c.replace(new RegExp(y, "g"), v[y]);\n            var Jb = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Kb = "January February March April May June July August September October November December".split(" ");\n            v = {\n              "%a": (f) => Jb[f.Ma].substring(0, 3),\n              "%A": (f) => Jb[f.Ma],\n              "%b": (f) => Kb[f.Ta].substring(0, 3),\n              "%B": (f) => Kb[f.Ta],\n              "%C": (f) => g((f.Qa + 1900) / 100 | 0, 2),\n              "%d": (f) => g(f.Wa, 2),\n              "%e": (f) => h(f.Wa, 2, " "),\n              "%g": (f) => C(f).toString().substring(2),\n              "%G": (f) => C(f),\n              "%H": (f) => g(f.Sa, 2),\n              "%I": (f) => {\n                f = f.Sa;\n                0 == f ? f = 12 : 12 < f && (f -= 12);\n                return g(f, 2);\n              },\n              "%j": (f) => {\n                for (var q = 0, u = 0; u <= f.Ta - 1; q += (Z(f.Qa + 1900) ? Pb : Qb)[u++])\n                  ;\n                return g(f.Wa + q, 3);\n              },\n              "%m": (f) => g(f.Ta + 1, 2),\n              "%M": (f) => g(f.pb, 2),\n              "%n": () => "\\n",\n              "%p": (f) => 0 <= f.Sa && 12 > f.Sa ? "AM" : "PM",\n              "%S": (f) => g(f.qb, 2),\n              "%t": () => "	",\n              "%u": (f) => f.Ma || 7,\n              "%U": (f) => g(Math.floor((f.Pa + 7 - f.Ma) / 7), 2),\n              "%V": (f) => {\n                var q = Math.floor((f.Pa + 7 - (f.Ma + 6) % 7) / 7);\n                2 >= (f.Ma + 371 - f.Pa - 2) % 7 && q++;\n                if (q)\n                  53 == q && (u = (f.Ma + 371 - f.Pa) % 7, 4 == u || 3 == u && Z(f.Qa) || (q = 1));\n                else {\n                  q = 52;\n                  var u = (f.Ma + 7 - f.Pa - 1) % 7;\n                  (4 == u || 5 == u && Z(f.Qa % 400 - 1)) && q++;\n                }\n                return g(q, 2);\n              },\n              "%w": (f) => f.Ma,\n              "%W": (f) => g(Math.floor((f.Pa + 7 - (f.Ma + 6) % 7) / 7), 2),\n              "%y": (f) => (f.Qa + 1900).toString().substring(2),\n              "%Y": (f) => f.Qa + 1900,\n              "%z": (f) => {\n                f = f.ob;\n                var q = 0 <= f;\n                f = Math.abs(f) / 60;\n                return (q ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n              },\n              "%Z": (f) => f.rb,\n              "%%": () => "%"\n            };\n            c = c.replace(\n              /%%/g,\n              "\\0\\0"\n            );\n            for (y in v)\n              c.includes(y) && (c = c.replace(new RegExp(y, "g"), v[y](e)));\n            c = c.replace(/\\0\\0/g, "%");\n            y = Rb(c);\n            if (y.length > b)\n              return 0;\n            Sb(y, a);\n            return y.length - 1;\n          }\n          V.Va();\n          var Ub = [null, La, Ma, Xa, Za, $a, db, eb, fb, gb, hb, ib, jb, kb, lb, mb, nb, tb, ub, Fb, Gb, Hb, Lb, Mb, Ob], Xb = {\n            b: function(a, b, c) {\n              a >>>= 0;\n              new Ua(a).Va(b >>> 0, c >>> 0);\n              Va = a;\n              Wa++;\n              throw Va;\n            },\n            N: function(a) {\n              Vb(a >>> 0, !A, 1, !ka, 131072, false);\n              V.Ya();\n            },\n            j: function(a) {\n              a >>>= 0;\n              D ? postMessage({ cmd: "cleanupThread", thread: a }) : Ga(a);\n            },\n            I: Ya,\n            h: Za,\n            T: $a,\n            D: db,\n            F: eb,\n            U: fb,\n            R: gb,\n            J: hb,\n            Q: ib,\n            n: jb,\n            E: kb,\n            B: lb,\n            S: mb,\n            C: nb,\n            q: () => true,\n            z: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => Y()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = V.La[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            L: function() {\n              return -1;\n            },\n            M: pb,\n            p: function(a) {\n              B && V.La[a >>> 0].ref();\n            },\n            t: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >> 2 >>> 0] = a.getUTCSeconds();\n              p()[c + 4 >> 2 >>> 0] = a.getUTCMinutes();\n              p()[c + 8 >> 2 >>> 0] = a.getUTCHours();\n              p()[c + 12 >> 2 >>> 0] = a.getUTCDate();\n              p()[c + 16 >> 2 >>> 0] = a.getUTCMonth();\n              p()[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              p()[c + 24 >> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              p()[c + 28 >> 2 >>> 0] = a;\n            },\n            u: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >> 2 >>> 0] = a.getSeconds();\n              p()[c + 4 >> 2 >>> 0] = a.getMinutes();\n              p()[c + 8 >> 2 >>> 0] = a.getHours();\n              p()[c + 12 >> 2 >>> 0] = a.getDate();\n              p()[c + 16 >> 2 >>> 0] = a.getMonth();\n              p()[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;\n              p()[c + 24 >> 2 >>> 0] = a.getDay();\n              b = (Z(a.getFullYear()) ? rb : sb)[a.getMonth()] + a.getDate() - 1 | 0;\n              p()[c + 28 >> 2 >>> 0] = b;\n              p()[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var e = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (b != e && a.getTimezoneOffset() == Math.min(e, b)) | 0;\n              p()[c + 32 >> 2 >>> 0] = a;\n            },\n            v: function(a) {\n              a >>>= 0;\n              var b = new Date(p()[a + 20 >> 2 >>> 0] + 1900, p()[a + 16 >> 2 >>> 0], p()[a + 12 >> 2 >>> 0], p()[a + 8 >> 2 >>> 0], p()[a + 4 >> 2 >>> 0], p()[a >> 2 >>> 0], 0), c = p()[a + 32 >> 2 >>> 0], e = b.getTimezoneOffset(), h = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(g, h);\n              0 > c ? p()[a + 32 >> 2 >>> 0] = Number(h != g && k == e) : 0 < c != (k == e) && (h = Math.max(g, h), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : h) - e)));\n              p()[a + 24 >> 2 >>> 0] = b.getDay();\n              c = (Z(b.getFullYear()) ? rb : sb)[b.getMonth()] + b.getDate() - 1 | 0;\n              p()[a + 28 >> 2 >>> 0] = c;\n              p()[a >> 2 >>> 0] = b.getSeconds();\n              p()[a + 4 >> 2 >>> 0] = b.getMinutes();\n              p()[a + 8 >> 2 >>> 0] = b.getHours();\n              p()[a + 12 >> 2 >>> 0] = b.getDate();\n              p()[a + 16 >> 2 >>> 0] = b.getMonth();\n              p()[a + 20 >> 2 >>> 0] = b.getYear();\n              a = b.getTime() / 1e3;\n              return Wb((T = a, 1 <= +Math.abs(T) ? 0 < T ? +Math.floor(T / 4294967296) >>> 0 : ~~+Math.ceil((T - +(~~T >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n            },\n            r: tb,\n            s: ub,\n            y: function(a, b, c) {\n              function e(v) {\n                return (v = v.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? v[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var h = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(h, 0, 1), k = new Date(h, 6, 1);\n              h = g.getTimezoneOffset();\n              var t = k.getTimezoneOffset(), C = Math.max(h, t);\n              r()[a >> 2 >>> 0] = 60 * C;\n              p()[b >> 2 >>> 0] = Number(h != t);\n              a = e(g);\n              b = e(k);\n              a = wb(a);\n              b = wb(b);\n              t < h ? (r()[c >> 2 >>> 0] = a, r()[c + 4 >> 2 >>> 0] = b) : (r()[c >> 2 >>> 0] = b, r()[c + 4 >> 2 >>> 0] = a);\n            },\n            c: () => {\n              K("");\n            },\n            k: function() {\n            },\n            i: function() {\n              return Date.now();\n            },\n            o: () => {\n              wa += 1;\n              throw "unwind";\n            },\n            A: function() {\n              return 4294901760;\n            },\n            e: () => performance.timeOrigin + performance.now(),\n            f: function() {\n              return B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency;\n            },\n            K: function(a, b, c, e) {\n              V.vb = b >>> 0;\n              Bb.length = c;\n              b = e >>> 0 >> 3;\n              for (e = 0; e < c; e++)\n                Bb[e] = ea()[b + e >>> 0];\n              return Ub[a].apply(null, Bb);\n            },\n            x: function(a) {\n              a >>>= 0;\n              var b = n().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var e = b * (1 + 0.2 / c);\n                e = Math.min(e, a + 100663296);\n                var h = Math;\n                e = Math.max(a, e);\n                a: {\n                  h = h.min.call(h, 4294901760, e + (65536 - e % 65536) % 65536) - d.buffer.byteLength + 65535 >>> 16;\n                  try {\n                    d.grow(h);\n                    m();\n                    var g = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  g = void 0;\n                }\n                if (g)\n                  return true;\n              }\n              return false;\n            },\n            O: Fb,\n            P: Gb,\n            H: Na,\n            g: Hb,\n            m: Lb,\n            w: Mb,\n            l: Ob,\n            a: d || w.wasmMemory,\n            G: Tb,\n            d: function(a, b, c, e) {\n              return Tb(a >>> 0, b >>> 0, c >>> 0, e >>> 0);\n            }\n          };\n          (function() {\n            function a(c, e) {\n              c = c.exports;\n              L = c = Yb(c);\n              V.Za.push(L.ya);\n              sa = L.za;\n              ua.unshift(L.V);\n              ra = e;\n              za();\n              return c;\n            }\n            var b = { a: Xb };\n            ya();\n            if (w.instantiateWasm)\n              try {\n                return w.instantiateWasm(b, a);\n              } catch (c) {\n                I("Module.instantiateWasm callback failed with error: " + c), x(c);\n              }\n            Ea(b, function(c) {\n              a(c.instance, c.module);\n            }).catch(x);\n            return {};\n          })();\n          w._OrtInit = (a, b) => (w._OrtInit = L.W)(a, b);\n          w._OrtGetLastError = (a, b) => (w._OrtGetLastError = L.X)(a, b);\n          w._OrtCreateSessionOptions = (a, b, c, e, h, g, k, t, C, v) => (w._OrtCreateSessionOptions = L.Y)(a, b, c, e, h, g, k, t, C, v);\n          w._OrtAppendExecutionProvider = (a, b) => (w._OrtAppendExecutionProvider = L.Z)(a, b);\n          w._OrtAddFreeDimensionOverride = (a, b, c) => (w._OrtAddFreeDimensionOverride = L._)(a, b, c);\n          w._OrtAddSessionConfigEntry = (a, b, c) => (w._OrtAddSessionConfigEntry = L.$)(a, b, c);\n          w._OrtReleaseSessionOptions = (a) => (w._OrtReleaseSessionOptions = L.aa)(a);\n          w._OrtCreateSession = (a, b, c) => (w._OrtCreateSession = L.ba)(a, b, c);\n          w._OrtReleaseSession = (a) => (w._OrtReleaseSession = L.ca)(a);\n          w._OrtGetInputOutputCount = (a, b, c) => (w._OrtGetInputOutputCount = L.da)(a, b, c);\n          w._OrtGetInputName = (a, b) => (w._OrtGetInputName = L.ea)(a, b);\n          w._OrtGetOutputName = (a, b) => (w._OrtGetOutputName = L.fa)(a, b);\n          w._OrtFree = (a) => (w._OrtFree = L.ga)(a);\n          w._OrtCreateTensor = (a, b, c, e, h, g) => (w._OrtCreateTensor = L.ha)(a, b, c, e, h, g);\n          w._OrtGetTensorData = (a, b, c, e, h) => (w._OrtGetTensorData = L.ia)(a, b, c, e, h);\n          w._OrtReleaseTensor = (a) => (w._OrtReleaseTensor = L.ja)(a);\n          w._OrtCreateRunOptions = (a, b, c, e) => (w._OrtCreateRunOptions = L.ka)(a, b, c, e);\n          w._OrtAddRunConfigEntry = (a, b, c) => (w._OrtAddRunConfigEntry = L.la)(a, b, c);\n          w._OrtReleaseRunOptions = (a) => (w._OrtReleaseRunOptions = L.ma)(a);\n          w._OrtCreateBinding = (a) => (w._OrtCreateBinding = L.na)(a);\n          w._OrtBindInput = (a, b, c) => (w._OrtBindInput = L.oa)(a, b, c);\n          w._OrtBindOutput = (a, b, c, e) => (w._OrtBindOutput = L.pa)(a, b, c, e);\n          w._OrtClearBoundOutputs = (a) => (w._OrtClearBoundOutputs = L.qa)(a);\n          w._OrtReleaseBinding = (a) => (w._OrtReleaseBinding = L.ra)(a);\n          w._OrtRunWithBinding = (a, b, c, e, h) => (w._OrtRunWithBinding = L.sa)(a, b, c, e, h);\n          w._OrtRun = (a, b, c, e, h, g, k, t) => (w._OrtRun = L.ta)(a, b, c, e, h, g, k, t);\n          w._OrtEndProfiling = (a) => (w._OrtEndProfiling = L.ua)(a);\n          var X = w._pthread_self = () => (X = w._pthread_self = L.va)(), vb = w._malloc = (a) => (vb = w._malloc = L.wa)(a);\n          w._free = (a) => (w._free = L.xa)(a);\n          w.__emscripten_tls_init = () => (w.__emscripten_tls_init = L.ya)();\n          var Vb = w.__emscripten_thread_init = (a, b, c, e, h, g) => (Vb = w.__emscripten_thread_init = L.Aa)(a, b, c, e, h, g);\n          w.__emscripten_thread_crashed = () => (w.__emscripten_thread_crashed = L.Ba)();\n          var Ab = (a, b, c, e) => (Ab = L.Ca)(a, b, c, e), Oa = (a) => (Oa = L.Da)(a), Ta = w.__emscripten_thread_exit = (a) => (Ta = w.__emscripten_thread_exit = L.Ea)(a), qb = w.__emscripten_check_mailbox = () => (qb = w.__emscripten_check_mailbox = L.Fa)(), Wb = (a) => (Wb = L.Ga)(a), Qa = (a, b) => (Qa = L.Ha)(a, b), xb = () => (xb = L.Ia)(), Ra = (a) => (Ra = L.Ja)(a), zb = (a) => (zb = L.Ka)(a);\n          function Yb(a) {\n            a = Object.assign({}, a);\n            var b = (e) => () => e() >>> 0, c = (e) => (h) => e(h) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.pthread_self = b(a.pthread_self);\n            a.malloc = c(a.malloc);\n            a.stackSave = b(a.stackSave);\n            a.stackAlloc = c(a.stackAlloc);\n            return a;\n          }\n          w.keepRuntimeAlive = P;\n          w.wasmMemory = d;\n          w.stackAlloc = zb;\n          w.stackSave = xb;\n          w.stackRestore = Ra;\n          w.UTF8ToString = Ka;\n          w.stringToUTF8 = cb;\n          w.lengthBytesUTF8 = ab;\n          w.ExitStatus = U;\n          w.PThread = V;\n          var Zb;\n          R = function $b() {\n            Zb || ac();\n            Zb || (R = $b);\n          };\n          function ac() {\n            function a() {\n              if (!Zb && (Zb = true, w.calledRun = true, !M)) {\n                D || Pa(ua);\n                ha(w);\n                if (w.onRuntimeInitialized)\n                  w.onRuntimeInitialized();\n                if (!D) {\n                  if (w.postRun)\n                    for ("function" == typeof w.postRun && (w.postRun = [w.postRun]); w.postRun.length; ) {\n                      var b = w.postRun.shift();\n                      va.unshift(b);\n                    }\n                  Pa(va);\n                }\n              }\n            }\n            if (!(0 < Q))\n              if (D)\n                ha(w), D || Pa(ua), startWorker(w);\n              else {\n                if (w.preRun)\n                  for ("function" == typeof w.preRun && (w.preRun = [w.preRun]); w.preRun.length; )\n                    ta.unshift(w.preRun.shift());\n                Pa(ta);\n                0 < Q || (w.setStatus ? (w.setStatus("Running..."), setTimeout(function() {\n                  setTimeout(\n                    function() {\n                      w.setStatus("");\n                    },\n                    1\n                  );\n                  a();\n                }, 1)) : a());\n              }\n          }\n          if (w.preInit)\n            for ("function" == typeof w.preInit && (w.preInit = [w.preInit]); 0 < w.preInit.length; )\n              w.preInit.pop()();\n          ac();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0,/*canBlock=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (true) {\n    ortWasmFactory = require_ort_training_wasm_simd();\n  } else {\n    ortWasmFactory = true ? null : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = () => {\n    try {\n      if (typeof SharedArrayBuffer === "undefined") {\n        return false;\n      }\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (true) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = numThreads > 1 && isMultiThreadSupported();\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "xnnpack":\n          epName = "XNNPACK";\n          break;\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var ortEnvInitialized = false;\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n    if (false) {\n      const initJsep = null.init;\n      await initJsep(getInstance(), env);\n    }\n    ortEnvInitialized = true;\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var isOrtEnvInitialized = () => ortEnvInitialized;\n  var createSessionAllocate = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSessionFinalize = (modelData, options) => {\n    const wasm2 = getInstance();\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelData[0]);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n    }\n  };\n  var createSession = (model, options) => {\n    const modelData = createSessionAllocate(model);\n    return createSessionFinalize(modelData, options);\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    switch (ev.data.type) {\n      case "init-wasm":\n        try {\n          initializeWebAssembly(ev.data.in).then(\n            () => postMessage({ type: "init-wasm" }),\n            (err) => postMessage({ type: "init-wasm", err })\n          );\n        } catch (err) {\n          postMessage({ type: "init-wasm", err });\n        }\n        break;\n      case "init-ort":\n        try {\n          initRuntime(ev.data.in).then(() => postMessage({ type: "init-ort" }), (err) => postMessage({\n            type: "init-ort",\n            err\n          }));\n        } catch (err) {\n          postMessage({ type: "init-ort", err });\n        }\n        break;\n      case "create_allocate":\n        try {\n          const { model } = ev.data.in;\n          const modeldata = createSessionAllocate(model);\n          postMessage({ type: "create_allocate", out: modeldata });\n        } catch (err) {\n          postMessage({ type: "create_allocate", err });\n        }\n        break;\n      case "create_finalize":\n        try {\n          const { modeldata, options } = ev.data.in;\n          const sessionMetadata = createSessionFinalize(modeldata, options);\n          postMessage({ type: "create_finalize", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create_finalize", err });\n        }\n        break;\n      case "create":\n        try {\n          const { model, options } = ev.data.in;\n          const sessionMetadata = createSession(model, options);\n          postMessage({ type: "create", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create", err });\n        }\n        break;\n      case "release":\n        try {\n          releaseSession(ev.data.in);\n          postMessage({ type: "release" });\n        } catch (err) {\n          postMessage({ type: "release", err });\n        }\n        break;\n      case "run":\n        try {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = ev.data.in;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== "cpu")) {\n                postMessage({ type: "run", err: "Proxy does not support non-cpu tensor location." });\n              } else {\n                postMessage(\n                  { type: "run", out: outputs },\n                  extractTransferableBuffers(outputs)\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type: "run", err });\n            }\n          );\n        } catch (err) {\n          postMessage({ type: "run", err });\n        }\n        break;\n      case "end-profiling":\n        try {\n          const handler = ev.data.in;\n          endProfiling(handler);\n          postMessage({ type: "end-profiling" });\n        } catch (err) {\n          postMessage({ type: "end-profiling", err });\n        }\n        break;\n      case "is-ort-env-initialized":\n        try {\n          const ortEnvInitialized2 = isOrtEnvInitialized();\n          postMessage({ type: "is-ort-env-initialized", out: ortEnvInitialized2 });\n        } catch (err) {\n          postMessage({ type: "is-ort-env-initialized", err });\n        }\n        break;\n      default:\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
    }
  });

  // web/lib/wasm/proxy-wrapper.ts
  var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, initOrtCallbacks, createSessionAllocateCallbacks, createSessionFinalizeCallbacks, createSessionCallbacks, releaseSessionCallbacks, runCallbacks, endProfilingCallbacks, isOrtEnvInitializedCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyInstance, initializeRuntime, createSessionAllocate2, createSessionFinalize2, createSession2, releaseSession2, run2, endProfiling2, isOrtEnvInitialized2;
  var init_proxy_wrapper = __esm({
    "web/lib/wasm/proxy-wrapper.ts"() {
      "use strict";
      init_esm();
      init_wasm_core_impl();
      init_wasm_factory();
      isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
      initializing2 = false;
      initialized2 = false;
      aborted2 = false;
      createSessionAllocateCallbacks = [];
      createSessionFinalizeCallbacks = [];
      createSessionCallbacks = [];
      releaseSessionCallbacks = [];
      runCallbacks = [];
      endProfilingCallbacks = [];
      isOrtEnvInitializedCallbacks = [];
      ensureWorker = () => {
        if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
          throw new Error("worker not ready");
        }
      };
      onProxyWorkerMessage = (ev) => {
        switch (ev.data.type) {
          case "init-wasm":
            initializing2 = false;
            if (ev.data.err) {
              aborted2 = true;
              initWasmCallbacks[1](ev.data.err);
            } else {
              initialized2 = true;
              initWasmCallbacks[0]();
            }
            break;
          case "init-ort":
            if (ev.data.err) {
              initOrtCallbacks[1](ev.data.err);
            } else {
              initOrtCallbacks[0]();
            }
            break;
          case "create_allocate":
            if (ev.data.err) {
              createSessionAllocateCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionAllocateCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create_finalize":
            if (ev.data.err) {
              createSessionFinalizeCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionFinalizeCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create":
            if (ev.data.err) {
              createSessionCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "release":
            if (ev.data.err) {
              releaseSessionCallbacks.shift()[1](ev.data.err);
            } else {
              releaseSessionCallbacks.shift()[0]();
            }
            break;
          case "run":
            if (ev.data.err) {
              runCallbacks.shift()[1](ev.data.err);
            } else {
              runCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "end-profiling":
            if (ev.data.err) {
              endProfilingCallbacks.shift()[1](ev.data.err);
            } else {
              endProfilingCallbacks.shift()[0]();
            }
            break;
          case "is-ort-env-initialized":
            if (ev.data.err) {
              isOrtEnvInitializedCallbacks.shift()[1](ev.data.err);
            } else {
              isOrtEnvInitializedCallbacks.shift()[0](ev.data.out);
            }
            break;
          default:
        }
      };
      scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
      initializeWebAssemblyInstance = async () => {
        if (isProxy()) {
          if (initialized2) {
            return;
          }
          if (initializing2) {
            throw new Error("multiple calls to 'initWasm()' detected.");
          }
          if (aborted2) {
            throw new Error("previous call to 'initWasm()' failed.");
          }
          initializing2 = true;
          if (env2.wasm.wasmPaths === void 0) {
            if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
              env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
            }
          }
          return new Promise((resolve, reject) => {
            proxyWorker?.terminate();
            const workerUrl = URL.createObjectURL(new Blob(
              [
                // This require() function is handled by esbuild plugin to load file content as string.
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                require_main()
              ],
              { type: "text/javascript" }
            ));
            proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
            proxyWorker.onerror = (ev) => reject(ev);
            proxyWorker.onmessage = onProxyWorkerMessage;
            URL.revokeObjectURL(workerUrl);
            initWasmCallbacks = [resolve, reject];
            const message = { type: "init-wasm", in: env2.wasm };
            proxyWorker.postMessage(message);
          });
        } else {
          return initializeWebAssembly(env2.wasm);
        }
      };
      initializeRuntime = async (env3) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            initOrtCallbacks = [resolve, reject];
            const message = { type: "init-ort", in: env3 };
            proxyWorker.postMessage(message);
          });
        } else {
          await initRuntime(env3);
        }
      };
      createSessionAllocate2 = async (model) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionAllocateCallbacks.push([resolve, reject]);
            const message = { type: "create_allocate", in: { model } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSessionAllocate(model);
        }
      };
      createSessionFinalize2 = async (modeldata, options) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionFinalizeCallbacks.push([resolve, reject]);
            const message = { type: "create_finalize", in: { modeldata, options } };
            proxyWorker.postMessage(message);
          });
        } else {
          return createSessionFinalize(modeldata, options);
        }
      };
      createSession2 = async (model, options) => {
        if (isProxy()) {
          if (options?.preferredOutputLocation) {
            throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionCallbacks.push([resolve, reject]);
            const message = { type: "create", in: { model, options } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSession(model, options);
        }
      };
      releaseSession2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            releaseSessionCallbacks.push([resolve, reject]);
            const message = { type: "release", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          releaseSession(sessionId);
        }
      };
      run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
        if (isProxy()) {
          if (inputs.some((t) => t[3] !== "cpu")) {
            throw new Error("input tensor on GPU is not supported for proxy.");
          }
          if (outputs.some((t) => t)) {
            throw new Error("pre-allocated output tensor is not supported for proxy.");
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            runCallbacks.push([resolve, reject]);
            const serializableInputs = inputs;
            const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
            proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
          });
        } else {
          return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
        }
      };
      endProfiling2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            endProfilingCallbacks.push([resolve, reject]);
            const message = { type: "end-profiling", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          endProfiling(sessionId);
        }
      };
      isOrtEnvInitialized2 = async () => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            isOrtEnvInitializedCallbacks.push([resolve, reject]);
            const message = { type: "is-ort-env-initialized" };
            proxyWorker.postMessage(message);
          });
        } else {
          return isOrtEnvInitialized();
        }
      };
    }
  });

  // nodejs-ignore:node:fs/promises
  var readFile2;
  var init_promises = __esm({
    "nodejs-ignore:node:fs/promises"() {
      readFile2 = void 0;
    }
  });

  // web/lib/wasm/session-handler-inference.ts
  var runtimeInitializationPromise, encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
  var init_session_handler_inference = __esm({
    "web/lib/wasm/session-handler-inference.ts"() {
      "use strict";
      init_promises();
      init_esm();
      init_proxy_wrapper();
      init_wasm_common();
      encodeTensorMetadata = (tensor, getName) => {
        switch (tensor.location) {
          case "cpu":
            return [tensor.type, tensor.dims, tensor.data, "cpu"];
          case "gpu-buffer":
            return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
          default:
            throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
        }
      };
      decodeTensorMetadata = (tensor) => {
        switch (tensor[3]) {
          case "cpu":
            return new Tensor2(tensor[0], tensor[2], tensor[1]);
          case "gpu-buffer": {
            const dataType = tensor[0];
            if (!isGpuBufferSupportedType(dataType)) {
              throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
            }
            const { gpuBuffer, download, dispose } = tensor[2];
            return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
          }
          default:
            throw new Error(`invalid data location: ${tensor[3]}`);
        }
      };
      OnnxruntimeWebAssemblySessionHandler = class {
        async createSessionAllocate(path) {
          const response = await fetch(path);
          if (response.status !== 200) {
            throw new Error(`failed to load model: ${path}`);
          }
          const arrayBuffer = await response.arrayBuffer();
          return createSessionAllocate2(new Uint8Array(arrayBuffer));
        }
        async loadModel(pathOrBuffer, options) {
          if (!await isOrtEnvInitialized2()) {
            if (!runtimeInitializationPromise) {
              runtimeInitializationPromise = initializeRuntime(env2);
            }
            await runtimeInitializationPromise;
            runtimeInitializationPromise = void 0;
          }
          if (typeof pathOrBuffer === "string") {
            if (typeof process !== "undefined" && process.versions && process.versions.node) {
              const model = await readFile2(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
            } else {
              const modelData = await this.createSessionAllocate(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize2(modelData, options);
            }
          } else {
            [this.sessionId, this.inputNames, this.outputNames] = await createSession2(pathOrBuffer, options);
          }
        }
        async dispose() {
          return releaseSession2(this.sessionId);
        }
        async run(feeds, fetches, options) {
          const inputArray = [];
          const inputIndices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.inputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}'`);
            }
            inputArray.push(tensor);
            inputIndices.push(index);
          });
          const outputArray = [];
          const outputIndices = [];
          Object.entries(fetches).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.outputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid output '${name}'`);
            }
            outputArray.push(tensor);
            outputIndices.push(index);
          });
          const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
          const outputs = outputArray.map(
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          return resultMap;
        }
        startProfiling() {
        }
        endProfiling() {
          void endProfiling2(this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm.ts
  var initializeFlags, OnnxruntimeWebAssemblyBackend;
  var init_backend_wasm = __esm({
    "web/lib/backend-wasm.ts"() {
      "use strict";
      init_node_os();
      init_esm();
      init_proxy_wrapper();
      init_session_handler_inference();
      initializeFlags = () => {
        if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
          env2.wasm.initTimeout = 0;
        }
        if (typeof env2.wasm.simd !== "boolean") {
          env2.wasm.simd = true;
        }
        if (typeof env2.wasm.proxy !== "boolean") {
          env2.wasm.proxy = false;
        }
        if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
          const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
          env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
        }
      };
      OnnxruntimeWebAssemblyBackend = class {
        async init() {
          initializeFlags();
          await initializeWebAssemblyInstance();
        }
        async createInferenceSessionHandler(pathOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblySessionHandler();
          await handler.loadModel(pathOrBuffer, options);
          return Promise.resolve(handler);
        }
      };
    }
  });

  // web/lib/wasm/wasm-training-core-impl.ts
  var NO_TRAIN_FUNCS_MSG, ifErrCodeCheckLastError, createCheckpointHandle, getModelInputOutputCount, getModelInputOutputNamesLoop, getModelInputOutputNames, createTrainingSessionHandle, createAndAllocateTensors, moveOutputToTensorMetadataArr, runTrainStep, runOptimizerStep, runEvalStep, getParametersSize, getContiguousParameters, loadParametersBuffer, releaseTrainingSessionAndCheckpoint;
  var init_wasm_training_core_impl = __esm({
    "web/lib/wasm/wasm-training-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_core_impl();
      init_wasm_factory();
      init_wasm_utils();
      NO_TRAIN_FUNCS_MSG = "Built without training API's enabled. Use the onnxruntime-web/training import for training functionality, and make sure that all the correct artifacts are built & moved to the correct folder if using a custom build. Check https://onnxruntime.ai/docs/build/web.html for more information.";
      ifErrCodeCheckLastError = (errCode, message, checkNeqZero = true) => {
        if (checkNeqZero && errCode !== 0) {
          checkLastError(message);
        } else if (!checkNeqZero && errCode === 0) {
          checkLastError(message);
        }
      };
      createCheckpointHandle = (checkpointData) => {
        const wasm2 = getInstance();
        const [checkpointDataOffset, checkpointDataLength] = checkpointData;
        let checkpointHandle = 0;
        try {
          if (wasm2._OrtTrainingLoadCheckpoint) {
            checkpointHandle = wasm2._OrtTrainingLoadCheckpoint(checkpointDataOffset, checkpointDataLength);
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          ifErrCodeCheckLastError(checkpointHandle, "Error occurred when trying to create a CheckpointState", false);
          return checkpointHandle;
        } catch (e) {
          if (wasm2._OrtTrainingReleaseCheckpoint && checkpointHandle !== 0) {
            wasm2._OrtTrainingReleaseCheckpoint(checkpointHandle);
          }
          throw e;
        } finally {
          wasm2._OrtFree(checkpointData[0]);
        }
      };
      getModelInputOutputCount = (trainingSessionId, isEvalModel) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          if (wasm2._OrtTrainingGetModelInputOutputCount) {
            const errorCode = wasm2._OrtTrainingGetModelInputOutputCount(trainingSessionId, dataOffset, dataOffset + 4, isEvalModel);
            ifErrCodeCheckLastError(errorCode, "Can't get session input/output count.");
            return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      getModelInputOutputNamesLoop = (trainingSessionId, count, isInput, isEvalModel) => {
        const names = [];
        const wasm2 = getInstance();
        for (let i = 0; i < count; i++) {
          if (wasm2._OrtTrainingGetModelInputOutputName) {
            const name = wasm2._OrtTrainingGetModelInputOutputName(trainingSessionId, i, isInput, isEvalModel);
            ifErrCodeCheckLastError(name, `Can't get input or output name -- is input: ${isInput}, index ${i}`, false);
            names.push(wasm2.UTF8ToString(name));
            wasm2._free(name);
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        }
        return names;
      };
      getModelInputOutputNames = (trainingSessionId, isEvalModel) => {
        let inputNames = [];
        let outputNames = [];
        const [inputCount, outputCount] = getModelInputOutputCount(trainingSessionId, isEvalModel);
        inputNames = getModelInputOutputNamesLoop(trainingSessionId, inputCount, true, isEvalModel);
        outputNames = getModelInputOutputNamesLoop(trainingSessionId, outputCount, false, isEvalModel);
        return [inputNames, outputNames];
      };
      createTrainingSessionHandle = (checkpointHandle, trainModelData, evalModelData, optimizerModelData, options) => {
        const wasm2 = getInstance();
        let trainingSessionHandle = 0;
        let sessionOptionsHandle = 0;
        let allocs = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          if (wasm2._OrtTrainingCreateSession) {
            trainingSessionHandle = wasm2._OrtTrainingCreateSession(
              sessionOptionsHandle,
              checkpointHandle,
              trainModelData[0],
              trainModelData[1],
              evalModelData[0],
              evalModelData[1],
              optimizerModelData[0],
              optimizerModelData[1]
            );
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          ifErrCodeCheckLastError(trainingSessionHandle, "Error occurred when trying to create a TrainingSession", false);
          return trainingSessionHandle;
        } catch (e) {
          if (wasm2._OrtTrainingReleaseSession && trainingSessionHandle !== 0) {
            wasm2._OrtTrainingReleaseSession(trainingSessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(trainModelData[0]);
          wasm2._free(evalModelData[0]);
          wasm2._free(optimizerModelData[0]);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
        }
      };
      createAndAllocateTensors = (trainingSessionId, indices, tensors, tensorHandles, inputOutputAllocs, indexAdd) => {
        const count = indices.length;
        for (let i = 0; i < count; i++) {
          prepareInputOutputTensor(
            tensors[i],
            tensorHandles,
            inputOutputAllocs,
            trainingSessionId,
            indexAdd + indices[i]
          );
        }
        const wasm2 = getInstance();
        const valuesOffset = wasm2.stackAlloc(count * 4);
        let valuesIndex = valuesOffset / 4;
        for (let i = 0; i < count; i++) {
          wasm2.HEAPU32[valuesIndex++] = tensorHandles[i];
        }
        return valuesOffset;
      };
      moveOutputToTensorMetadataArr = (outputValuesOffset, outputCount, outputTensorHandles, outputTensors) => {
        const wasm2 = getInstance();
        const output = [];
        for (let i = 0; i < outputCount; i++) {
          const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
          if (tensor === outputTensorHandles[i]) {
            output.push(outputTensors[i]);
            continue;
          }
          const beforeGetTensorDataStack = wasm2.stackSave();
          const tensorDataOffset = wasm2.stackAlloc(4 * 4);
          let type, dataOffset = 0;
          try {
            const errorCode = wasm2._OrtGetTensorData(
              tensor,
              tensorDataOffset,
              tensorDataOffset + 4,
              tensorDataOffset + 8,
              tensorDataOffset + 12
            );
            ifErrCodeCheckLastError(errorCode, `Can't access output tensor data on index ${i}.`);
            let tensorDataIndex = tensorDataOffset / 4;
            const dataType = wasm2.HEAPU32[tensorDataIndex++];
            dataOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
            const dims = [];
            for (let i2 = 0; i2 < dimsLength; i2++) {
              dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
            }
            wasm2._OrtFree(dimsOffset);
            const size = dims.reduce((a, b) => a * b, 1);
            type = tensorDataTypeEnumToString(dataType);
            if (type === "string") {
              const stringData = [];
              let dataIndex = dataOffset / 4;
              for (let i2 = 0; i2 < size; i2++) {
                const offset = wasm2.HEAPU32[dataIndex++];
                const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
              }
              output.push([type, dims, stringData, "cpu"]);
            } else {
              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
              const data = new typedArrayConstructor(size);
              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
              output.push([type, dims, data, "cpu"]);
            }
          } finally {
            wasm2.stackRestore(beforeGetTensorDataStack);
            if (type === "string" && dataOffset) {
              wasm2._free(dataOffset);
            }
            wasm2._OrtReleaseTensor(tensor);
          }
        }
        return output;
      };
      runTrainStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          const inputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            inputIndices,
            inputTensors,
            inputTensorHandles,
            inputOutputAllocs,
            0
          );
          const outputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            outputIndices,
            outputTensors,
            outputTensorHandles,
            inputOutputAllocs,
            inputCount
          );
          if (wasm2._OrtTrainingRunTrainStep) {
            const errorCode = wasm2._OrtTrainingRunTrainStep(
              trainingSessionId,
              inputValuesOffset,
              inputCount,
              outputValuesOffset,
              outputCount,
              runOptionsHandle
            );
            ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingRunTrainStep in the WebAssembly layer");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      runOptimizerStep = async (trainingSessionId, options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          if (wasm2._OrtTrainingOptimizerStep) {
            const errCode = wasm2._OrtTrainingOptimizerStep(trainingSessionId, runOptionsHandle);
            ifErrCodeCheckLastError(errCode, "Failed to call OrtTrainingOptimizerStep in the WebAssembly layer");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      runEvalStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          const inputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            inputIndices,
            inputTensors,
            inputTensorHandles,
            inputOutputAllocs,
            0
          );
          const outputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            outputIndices,
            outputTensors,
            outputTensorHandles,
            inputOutputAllocs,
            inputCount
          );
          if (wasm2._OrtTrainingEvalStep) {
            const errorCode = wasm2._OrtTrainingEvalStep(
              trainingSessionId,
              inputValuesOffset,
              inputCount,
              outputValuesOffset,
              outputCount,
              runOptionsHandle
            );
            ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingEvalStep in the WebAssembly layer");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      getParametersSize = (trainingSessionId, trainableOnly) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const sizeOffset = wasm2.stackAlloc(4);
          if (wasm2._OrtTrainingGetParametersSize) {
            const errorCode = wasm2._OrtTrainingGetParametersSize(trainingSessionId, sizeOffset, trainableOnly);
            ifErrCodeCheckLastError(errorCode, "Can't get parameters size");
            return wasm2.HEAP32[sizeOffset / 4];
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      getContiguousParameters = async (trainingSessionId, trainableOnly) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        const tensorTypeAsString = "float32";
        const locationAsString = "cpu";
        const parametersSize = getParametersSize(trainingSessionId, trainableOnly);
        let tensor = 0;
        const paramsByteLength = 4 * parametersSize;
        const paramsOffset = wasm2._malloc(paramsByteLength);
        const dims = [parametersSize];
        const dimsOffset = wasm2.stackAlloc(4);
        const dimsIndex = dimsOffset / 4;
        wasm2.HEAP32[dimsIndex] = parametersSize;
        try {
          tensor = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(tensorTypeAsString),
            paramsOffset,
            paramsByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(locationAsString)
          );
          ifErrCodeCheckLastError(
            tensor,
            `Can't create tensor for getContiguousParameters. session=${trainingSessionId}.`,
            false
          );
          if (wasm2._OrtTrainingCopyParametersToBuffer) {
            const errCode = wasm2._OrtTrainingCopyParametersToBuffer(trainingSessionId, tensor, parametersSize, trainableOnly);
            ifErrCodeCheckLastError(errCode, "Can't get contiguous parameters.");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          const typedArrayConstructor = tensorTypeToTypedArrayConstructor(tensorTypeAsString);
          const data = new typedArrayConstructor(parametersSize);
          const output = [];
          new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(paramsOffset, paramsOffset + paramsByteLength));
          output.push([tensorTypeAsString, dims, data, locationAsString]);
          if (output.length !== 1) {
            throw new Error(`something unexpected happened in the getContiguousParameters function. Expected output length of
     one, got ${output.length}`);
          } else {
            return output[0];
          }
        } finally {
          if (tensor !== 0) {
            wasm2._OrtReleaseTensor(tensor);
          }
          wasm2._free(paramsOffset);
          wasm2._free(dimsOffset);
          wasm2.stackRestore(stack);
        }
      };
      loadParametersBuffer = async (trainingSessionId, buffer, trainableOnly) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        const tensorTypeAsString = "float32";
        const locationAsString = "cpu";
        const bufferByteLength = buffer.length;
        const bufferCount = bufferByteLength / 4;
        const bufferOffset = wasm2._malloc(bufferByteLength);
        wasm2.HEAPU8.set(buffer, bufferOffset);
        const dimsOffset = wasm2.stackAlloc(4);
        wasm2.HEAP32[dimsOffset / 4] = bufferCount;
        const dimsLength = 1;
        let tensor = 0;
        try {
          tensor = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(tensorTypeAsString),
            bufferOffset,
            bufferByteLength,
            dimsOffset,
            dimsLength,
            dataLocationStringToEnum(locationAsString)
          );
          ifErrCodeCheckLastError(tensor, `Can't create tensor for input/output. session=${trainingSessionId}`, false);
          if (wasm2._OrtTrainingCopyParametersFromBuffer) {
            const errCode = wasm2._OrtTrainingCopyParametersFromBuffer(trainingSessionId, tensor, bufferCount, trainableOnly);
            ifErrCodeCheckLastError(errCode, "Can't copy buffer to parameters.");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          if (tensor !== 0) {
            wasm2._OrtReleaseTensor(tensor);
          }
          wasm2.stackRestore(stack);
          wasm2._free(bufferOffset);
          wasm2._free(dimsOffset);
        }
      };
      releaseTrainingSessionAndCheckpoint = (checkpointId, sessionId) => {
        const wasm2 = getInstance();
        if (wasm2._OrtTrainingReleaseSession) {
          wasm2._OrtTrainingReleaseSession(sessionId);
        }
        if (wasm2._OrtTrainingReleaseCheckpoint) {
          wasm2._OrtTrainingReleaseCheckpoint(checkpointId);
        }
      };
    }
  });

  // web/lib/wasm/session-handler-training.ts
  var OnnxruntimeWebAssemblyTrainingSessionHandler;
  var init_session_handler_training = __esm({
    "web/lib/wasm/session-handler-training.ts"() {
      "use strict";
      init_esm();
      init_session_handler_inference();
      init_wasm_core_impl();
      init_wasm_training_core_impl();
      OnnxruntimeWebAssemblyTrainingSessionHandler = class {
        constructor() {
          this.evalInputNames = [];
          this.evalOutputNames = [];
        }
        async uriOrBufferToHeap(uriOrBuffer) {
          let buffer;
          if (typeof uriOrBuffer === "string") {
            const response = await fetch(uriOrBuffer);
            const arrayBuffer = await response.arrayBuffer();
            buffer = new Uint8Array(arrayBuffer);
          } else {
            buffer = uriOrBuffer;
          }
          return createSessionAllocate(buffer);
        }
        async createTrainingSession(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
          if (!isOrtEnvInitialized()) {
            await initRuntime(env2);
          }
          const checkpointData = await this.uriOrBufferToHeap(checkpointStateUriOrBuffer);
          const trainModelData = await this.uriOrBufferToHeap(trainModelUriOrBuffer);
          let evalModelData = [0, 0];
          let optimizerModelData = [0, 0];
          if (evalModelUriOrBuffer !== "") {
            evalModelData = await this.uriOrBufferToHeap(evalModelUriOrBuffer);
          }
          if (optimizerModelUriOrBuffer !== "") {
            optimizerModelData = await this.uriOrBufferToHeap(optimizerModelUriOrBuffer);
          }
          this.checkpointId = createCheckpointHandle(checkpointData);
          this.sessionId = createTrainingSessionHandle(this.checkpointId, trainModelData, evalModelData, optimizerModelData, options);
          [this.inputNames, this.outputNames] = getModelInputOutputNames(this.sessionId, false);
          if (evalModelUriOrBuffer !== "") {
            [this.evalInputNames, this.evalOutputNames] = getModelInputOutputNames(this.sessionId, true);
          }
        }
        /**
         * Helper method that converts a feeds or fetches datatype to two arrays, one of values and one that stores the
         * corresponding name as a number referring to the index in the list of names provided.
         *
         * @param feeds meant to match either SessionHandler.FeedsType or SessionHandler.FetchesType
         * @param names either inputNames or outputNames
         * @returns a tuple of a list of values and a list of indices.
         */
        convertMapIntoValuesArrayAndIndicesArray(feeds, names, mapFunc) {
          const values = [];
          const indices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = names.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}`);
            }
            values.push(tensor);
            indices.push(index);
          });
          const uList = values.map(mapFunc);
          return [values, indices, uList];
        }
        /**
         * Helper method that converts the TensorMetadata that the wasm-core functions return to the
         * SessionHandler.ReturnType. Any outputs in the provided outputArray that are falsy will be populated with the
         * corresponding result.
         *
         * @param results used to populate the resultMap if there is no value for that outputName already
         * @param outputArray used to populate the resultMap. If null or undefined, use the corresponding result from results
         * @param outputIndices specifies which outputName the corresponding value for outputArray refers to.
         * @returns a map of output names and OnnxValues.
         */
        convertTensorMetadataToReturnType(results, outputArray, outputIndices) {
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          return resultMap;
        }
        async runTrainStep(feeds, fetches, options) {
          const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            feeds,
            this.inputNames,
            (t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`)
          );
          const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            fetches,
            this.outputNames,
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await runTrainStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
        }
        async runOptimizerStep(options) {
          await runOptimizerStep(this.sessionId, options);
        }
        async runEvalStep(feeds, fetches, options) {
          const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            feeds,
            this.evalInputNames,
            (t, i) => encodeTensorMetadata(t, () => `input "${this.evalInputNames[inputIndices[i]]}"`)
          );
          const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            fetches,
            this.evalOutputNames,
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.evalOutputNames[outputIndices[i]]}"`) : null
          );
          const results = await runEvalStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
        }
        async getParametersSize(trainableOnly) {
          return getParametersSize(this.sessionId, trainableOnly);
        }
        async loadParametersBuffer(array, trainableOnly) {
          await loadParametersBuffer(this.sessionId, array, trainableOnly);
        }
        async getContiguousParameters(trainableOnly) {
          const tensorResult = await getContiguousParameters(this.sessionId, trainableOnly);
          return decodeTensorMetadata(tensorResult);
        }
        async dispose() {
          return releaseTrainingSessionAndCheckpoint(this.checkpointId, this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm-training.ts
  var backend_wasm_training_exports = {};
  __export(backend_wasm_training_exports, {
    wasmBackend: () => wasmBackend
  });
  var OnnxruntimeTrainingWebAssemblyBackend, wasmBackend;
  var init_backend_wasm_training = __esm({
    "web/lib/backend-wasm-training.ts"() {
      "use strict";
      init_backend_wasm();
      init_session_handler_training();
      OnnxruntimeTrainingWebAssemblyBackend = class extends OnnxruntimeWebAssemblyBackend {
        async createTrainingSessionHandler(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblyTrainingSessionHandler();
          await handler.createTrainingSession(
            checkpointStateUriOrBuffer,
            trainModelUriOrBuffer,
            evalModelUriOrBuffer,
            optimizerModelUriOrBuffer,
            options
          );
          return Promise.resolve(handler);
        }
      };
      wasmBackend = new OnnxruntimeTrainingWebAssemblyBackend();
    }
  });

  // web/lib/index.ts
  var lib_exports = {};
  __export(lib_exports, {
    InferenceSession: () => InferenceSession2,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    default: () => lib_default,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  init_esm();
  init_esm();
  init_esm();

  // web/lib/version.ts
  var version2 = "1.17.0";

  // web/lib/index.ts
  var lib_default = esm_exports;
  if (false) {
    const onnxjsBackend = null.onnxjsBackend;
    registerBackend("webgl", onnxjsBackend, -10);
  }
  if (true) {
    const wasmBackend2 = false ? null.wasmBackend : (init_backend_wasm_training(), __toCommonJS(backend_wasm_training_exports)).wasmBackend;
    if (false) {
      registerBackend("webgpu", wasmBackend2, 5);
    }
    registerBackend("cpu", wasmBackend2, 10);
    registerBackend("wasm", wasmBackend2, 10);
    if (false) {
      registerBackend("xnnpack", wasmBackend2, 9);
      registerBackend("webnn", wasmBackend2, 9);
    }
  }
  Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
  return __toCommonJS(lib_exports);
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvYmFja2VuZC1pbXBsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2JhY2tlbmQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdmVyc2lvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYtaW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYudHMiLCAiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdGVuc29yLWNvbnZlcnNpb24taW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItZmFjdG9yeS1pbXBsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RlbnNvci1pbXBsLXR5cGUtbWFwcGluZy50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItdXRpbHMtaW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItaW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3IudHMiLCAiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvaW5mZXJlbmNlLXNlc3Npb24taW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9pbmZlcmVuY2Utc2Vzc2lvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9vbm54LXZhbHVlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RyYWluaW5nLXNlc3Npb24taW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90cmFpbmluZy1zZXNzaW9uLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2luZGV4LnRzIiwgIm5vZGVqcy1pZ25vcmU6bm9kZTpvcyIsICJub2RlanMtaWdub3JlOm5vZGU6cGF0aCIsICJub2RlanMtaWdub3JlOmZzIiwgIm5vZGVqcy1pZ25vcmU6cGF0aCIsICIuLi9saWIvd2FzbS9iaW5kaW5nL29ydC10cmFpbmluZy13YXNtLXNpbWQuanMiLCAibm9kZWpzLWlnbm9yZTp3b3JrZXJfdGhyZWFkcyIsICJub2RlanMtaWdub3JlOnBlcmZfaG9va3MiLCAibm9kZWpzLWlnbm9yZTpvcyIsICIuLi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLmpzIiwgIi4uL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzIiwgIi4uL2xpYi93YXNtL3dhc20tZmFjdG9yeS50cyIsICIuLi9saWIvd2FzbS93YXNtLXV0aWxzLnRzIiwgIi4uL2xpYi93YXNtL3J1bi1vcHRpb25zLnRzIiwgIi4uL2xpYi93YXNtL3Nlc3Npb24tb3B0aW9ucy50cyIsICIuLi9saWIvd2FzbS93YXNtLWNvbW1vbi50cyIsICIuLi9saWIvd2FzbS93YXNtLWNvcmUtaW1wbC50cyIsICJwcm94eS13b3JrZXI6Li9wcm94eS13b3JrZXIvbWFpbiIsICIuLi9saWIvd2FzbS9wcm94eS13cmFwcGVyLnRzIiwgIm5vZGVqcy1pZ25vcmU6bm9kZTpmcy9wcm9taXNlcyIsICIuLi9saWIvd2FzbS9zZXNzaW9uLWhhbmRsZXItaW5mZXJlbmNlLnRzIiwgIi4uL2xpYi9iYWNrZW5kLXdhc20udHMiLCAiLi4vbGliL3dhc20vd2FzbS10cmFpbmluZy1jb3JlLWltcGwudHMiLCAiLi4vbGliL3dhc20vc2Vzc2lvbi1oYW5kbGVyLXRyYWluaW5nLnRzIiwgIi4uL2xpYi9iYWNrZW5kLXdhc20tdHJhaW5pbmcudHMiLCAiLi4vbGliL2luZGV4LnRzIiwgIi4uL2xpYi92ZXJzaW9uLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQuanMnO1xuXG5pbnRlcmZhY2UgQmFja2VuZEluZm8ge1xuICBiYWNrZW5kOiBCYWNrZW5kO1xuICBwcmlvcml0eTogbnVtYmVyO1xuXG4gIGluaXRQcm9taXNlPzogUHJvbWlzZTx2b2lkPjtcbiAgaW5pdGlhbGl6ZWQ/OiBib29sZWFuO1xuICBhYm9ydGVkPzogYm9vbGVhbjtcbn1cblxuY29uc3QgYmFja2VuZHM6IE1hcDxzdHJpbmcsIEJhY2tlbmRJbmZvPiA9IG5ldyBNYXAoKTtcbmNvbnN0IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eTogc3RyaW5nW10gPSBbXTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGJhY2tlbmQuXG4gKlxuICogQHBhcmFtIG5hbWUgLSB0aGUgbmFtZSBhcyBhIGtleSB0byBsb29rdXAgYXMgYW4gZXhlY3V0aW9uIHByb3ZpZGVyLlxuICogQHBhcmFtIGJhY2tlbmQgLSB0aGUgYmFja2VuZCBvYmplY3QuXG4gKiBAcGFyYW0gcHJpb3JpdHkgLSBhbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIHByaW9yaXR5IG9mIHRoZSBiYWNrZW5kLiBIaWdoZXIgbnVtYmVyIG1lYW5zIGhpZ2hlciBwcmlvcml0eS4gaWYgcHJpb3JpdHlcbiAqIDwgMCwgaXQgd2lsbCBiZSBjb25zaWRlcmVkIGFzIGEgJ2JldGEnIHZlcnNpb24gYW5kIHdpbGwgbm90IGJlIHVzZWQgYXMgYSBmYWxsYmFjayBiYWNrZW5kIGJ5IGRlZmF1bHQuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJCYWNrZW5kID0gKG5hbWU6IHN0cmluZywgYmFja2VuZDogQmFja2VuZCwgcHJpb3JpdHk6IG51bWJlcik6IHZvaWQgPT4ge1xuICBpZiAoYmFja2VuZCAmJiB0eXBlb2YgYmFja2VuZC5pbml0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBiYWNrZW5kLmNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgY3VycmVudEJhY2tlbmQgPSBiYWNrZW5kcy5nZXQobmFtZSk7XG4gICAgaWYgKGN1cnJlbnRCYWNrZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGJhY2tlbmRzLnNldChuYW1lLCB7YmFja2VuZCwgcHJpb3JpdHl9KTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRCYWNrZW5kLnByaW9yaXR5ID4gcHJpb3JpdHkpIHtcbiAgICAgIC8vIHNhbWUgbmFtZSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgd2l0aCBhIGhpZ2hlciBwcmlvcml0eS4gc2tpcCByZWdpc3RlcmF0aW9uLlxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudEJhY2tlbmQucHJpb3JpdHkgPT09IHByaW9yaXR5KSB7XG4gICAgICBpZiAoY3VycmVudEJhY2tlbmQuYmFja2VuZCAhPT0gYmFja2VuZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZWdpc3RlciBiYWNrZW5kIFwiJHtuYW1lfVwiIHVzaW5nIHByaW9yaXR5ICR7cHJpb3JpdHl9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByaW9yaXR5ID49IDApIHtcbiAgICAgIGNvbnN0IGkgPSBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYmFja2VuZHMuZ2V0KGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eVtpXSkhLnByaW9yaXR5IDw9IHByaW9yaXR5KSB7XG4gICAgICAgICAgYmFja2VuZHNTb3J0ZWRCeVByaW9yaXR5LnNwbGljZShpLCAwLCBuYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSB2YWxpZCBiYWNrZW5kJyk7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgYmFja2VuZCBieSBzcGVjaWZpZWQgaGludHMuXG4gKlxuICogQHBhcmFtIGJhY2tlbmRIaW50cyAtIGEgbGlzdCBvZiBleGVjdXRpb24gcHJvdmlkZXIgbmFtZXMgdG8gbG9va3VwLiBJZiBvbWl0dGVkIHVzZSByZWdpc3RlcmVkIGJhY2tlbmRzIGFzIGxpc3QuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgYmFja2VuZC5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjb25zdCByZXNvbHZlQmFja2VuZCA9IGFzeW5jKGJhY2tlbmRIaW50czogcmVhZG9ubHkgc3RyaW5nW10pOiBQcm9taXNlPEJhY2tlbmQ+ID0+IHtcbiAgY29uc3QgYmFja2VuZE5hbWVzID0gYmFja2VuZEhpbnRzLmxlbmd0aCA9PT0gMCA/IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eSA6IGJhY2tlbmRIaW50cztcbiAgY29uc3QgZXJyb3JzID0gW107XG4gIGZvciAoY29uc3QgYmFja2VuZE5hbWUgb2YgYmFja2VuZE5hbWVzKSB7XG4gICAgY29uc3QgYmFja2VuZEluZm8gPSBiYWNrZW5kcy5nZXQoYmFja2VuZE5hbWUpO1xuICAgIGlmIChiYWNrZW5kSW5mbykge1xuICAgICAgaWYgKGJhY2tlbmRJbmZvLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybiBiYWNrZW5kSW5mby5iYWNrZW5kO1xuICAgICAgfSBlbHNlIGlmIChiYWNrZW5kSW5mby5hYm9ydGVkKSB7XG4gICAgICAgIGNvbnRpbnVlOyAgLy8gY3VycmVudCBiYWNrZW5kIGlzIHVuYXZhaWxhYmxlOyB0cnkgbmV4dFxuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0luaXRpYWxpemluZyA9ICEhYmFja2VuZEluZm8uaW5pdFByb21pc2U7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWlzSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgYmFja2VuZEluZm8uaW5pdFByb21pc2UgPSBiYWNrZW5kSW5mby5iYWNrZW5kLmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBiYWNrZW5kSW5mby5pbml0UHJvbWlzZTtcbiAgICAgICAgYmFja2VuZEluZm8uaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYmFja2VuZEluZm8uYmFja2VuZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKCFpc0luaXRpYWxpemluZykge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHtuYW1lOiBiYWNrZW5kTmFtZSwgZXJyOiBlfSk7XG4gICAgICAgIH1cbiAgICAgICAgYmFja2VuZEluZm8uYWJvcnRlZCA9IHRydWU7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkZWxldGUgYmFja2VuZEluZm8uaW5pdFByb21pc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBubyBhdmFpbGFibGUgYmFja2VuZCBmb3VuZC4gRVJSOiAke2Vycm9ycy5tYXAoZSA9PiBgWyR7ZS5uYW1lfV0gJHtlLmVycn1gKS5qb2luKCcsICcpfWApO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICcuL2luZmVyZW5jZS1zZXNzaW9uLmpzJztcbmltcG9ydCB7T25ueFZhbHVlfSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuaW1wb3J0IHtUcmFpbmluZ1Nlc3Npb259IGZyb20gJy4vdHJhaW5pbmctc2Vzc2lvbi5qcyc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgU2Vzc2lvbkhhbmRsZXIge1xuICB0eXBlIEZlZWRzVHlwZSA9IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfTtcbiAgdHlwZSBGZXRjaGVzVHlwZSA9IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlIHwgbnVsbH07XG4gIHR5cGUgUmV0dXJuVHlwZSA9IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHNoYXJlZCBTZXNzaW9uSGFuZGxlciBmdW5jdGlvbmFsaXR5XG4gKlxuICogQGlnbm9yZVxuICovXG5pbnRlcmZhY2UgU2Vzc2lvbkhhbmRsZXIge1xuICBkaXNwb3NlKCk6IFByb21pc2U8dm9pZD47XG5cbiAgcmVhZG9ubHkgaW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG4gIHJlYWRvbmx5IG91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBoYW5kbGVyIGluc3RhbmNlIG9mIGFuIGluZmVyZW5jZSBzZXNzaW9uLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlciBleHRlbmRzIFNlc3Npb25IYW5kbGVyIHtcbiAgc3RhcnRQcm9maWxpbmcoKTogdm9pZDtcbiAgZW5kUHJvZmlsaW5nKCk6IHZvaWQ7XG5cbiAgcnVuKGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBoYW5kbGVyIGluc3RhbmNlIG9mIGEgdHJhaW5pbmcgaW5mZXJlbmNlIHNlc3Npb24uXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbkhhbmRsZXIgZXh0ZW5kcyBTZXNzaW9uSGFuZGxlciB7XG4gIHJlYWRvbmx5IGV2YWxJbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgZXZhbE91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICBydW5UcmFpblN0ZXAoXG4gICAgICBmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT47XG4gIHJ1bk9wdGltaXplclN0ZXAob3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcbiAgcnVuRXZhbFN0ZXAoXG4gICAgICBmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT47XG5cbiAgZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8bnVtYmVyPjtcbiAgbG9hZFBhcmFtZXRlcnNCdWZmZXIoYXJyYXk6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xuICBnZXRDb250aWd1b3VzUGFyYW1ldGVycyh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxPbm54VmFsdWU+O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhIGJhY2tlbmQgdGhhdCBwcm92aWRlcyBpbXBsZW1lbnRhdGlvbiBvZiBtb2RlbCBpbmZlcmVuY2luZy5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFja2VuZCB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBiYWNrZW5kIGFzeW5jaHJvbm91c2x5LiBTaG91bGQgdGhyb3cgd2hlbiBmYWlsZWQuXG4gICAqL1xuICBpbml0KCk6IFByb21pc2U8dm9pZD47XG5cbiAgY3JlYXRlSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIodXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25IYW5kbGVyPjtcblxuICBjcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGVyP1xuICAgICAgKGNoZWNrcG9pbnRTdGF0ZVVyaU9yQnVmZmVyOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXIsIHRyYWluTW9kZWxVcmlPckJ1ZmZlcjogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyLFxuICAgICAgIGV2YWxNb2RlbFVyaU9yQnVmZmVyOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXIsIG9wdGltaXplck1vZGVsVXJpT3JCdWZmZXI6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcixcbiAgICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxUcmFpbmluZ1Nlc3Npb25IYW5kbGVyPjtcbn1cblxuZXhwb3J0IHtyZWdpc3RlckJhY2tlbmR9IGZyb20gJy4vYmFja2VuZC1pbXBsLmpzJztcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSAvanMvc2NyaXB0cy91cGRhdGUtdmVyc2lvbi50c1xuLy8gRG8gbm90IG1vZGlmeSBmaWxlIGNvbnRlbnQgbWFudWFsbHkuXG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzEuMTcuMCc7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7RW52fSBmcm9tICcuL2Vudi5qcyc7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4vdmVyc2lvbi5qcyc7XG5cbnR5cGUgTG9nTGV2ZWxUeXBlID0gRW52Wydsb2dMZXZlbCddO1xuXG5sZXQgbG9nTGV2ZWxWYWx1ZTogUmVxdWlyZWQ8TG9nTGV2ZWxUeXBlPiA9ICd3YXJuaW5nJztcblxuZXhwb3J0IGNvbnN0IGVudjogRW52ID0ge1xuICB3YXNtOiB7fSBhcyBFbnYuV2ViQXNzZW1ibHlGbGFncyxcbiAgd2ViZ2w6IHt9IGFzIEVudi5XZWJHTEZsYWdzLFxuICB3ZWJncHU6IHt9IGFzIEVudi5XZWJHcHVGbGFncyxcbiAgdmVyc2lvbnM6IHtjb21tb246IHZlcnNpb259LFxuXG4gIHNldCBsb2dMZXZlbCh2YWx1ZTogTG9nTGV2ZWxUeXBlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgWyd2ZXJib3NlJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvcicsICdmYXRhbCddLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke3ZhbHVlfWApO1xuICAgIH1cbiAgICBsb2dMZXZlbFZhbHVlID0gdmFsdWU7XG4gIH0sXG4gIGdldCBsb2dMZXZlbCgpOiBSZXF1aXJlZDxMb2dMZXZlbFR5cGU+IHtcbiAgICByZXR1cm4gbG9nTGV2ZWxWYWx1ZTtcbiAgfSxcbn07XG5cbi8vIHNldCBwcm9wZXJ0eSAnbG9nTGV2ZWwnIHNvIHRoYXQgdGhleSBjYW4gYmUgY29ycmVjdGx5IHRyYW5zZmVycmVkIHRvIHdvcmtlciBieSBgcG9zdE1lc3NhZ2UoKWAuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZW52LCAnbG9nTGV2ZWwnLCB7ZW51bWVyYWJsZTogdHJ1ZX0pO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge2VudiBhcyBlbnZJbXBsfSBmcm9tICcuL2Vudi1pbXBsLmpzJztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEVudiB7XG4gIGV4cG9ydCB0eXBlIFdhc21QcmVmaXhPckZpbGVQYXRocyA9IHN0cmluZ3x7XG4gICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4gICAgJ29ydC13YXNtLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtd2FzbS10aHJlYWRlZC53YXNtJz86IHN0cmluZztcbiAgICAnb3J0LXdhc20tc2ltZC53YXNtJz86IHN0cmluZztcbiAgICAnb3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtJz86IHN0cmluZztcbiAgICAnb3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtJz86IHN0cmluZztcbiAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICB9O1xuICBleHBvcnQgaW50ZXJmYWNlIFdlYkFzc2VtYmx5RmxhZ3Mge1xuICAgIC8qKlxuICAgICAqIHNldCBvciBnZXQgbnVtYmVyIG9mIHRocmVhZChzKS4gSWYgb21pdHRlZCBvciBzZXQgdG8gMCwgbnVtYmVyIG9mIHRocmVhZChzKSB3aWxsIGJlIGRldGVybWluZWQgYnkgc3lzdGVtLiBJZiBzZXRcbiAgICAgKiB0byAxLCBubyB3b3JrZXIgdGhyZWFkIHdpbGwgYmUgc3Bhd25lZC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSB3aGVuIFdlYkFzc2VtYmx5IG11bHRpdGhyZWFkIGZlYXR1cmUgaXMgYXZhaWxhYmxlIGluIGN1cnJlbnQgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYDBgXG4gICAgICovXG4gICAgbnVtVGhyZWFkcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIHNldCBvciBnZXQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0byBlbmFibGUgU0lNRC4gSWYgc2V0IHRvIGZhbHNlLCBTSU1EIHdpbGwgYmUgZm9yY2VseSBkaXNhYmxlZC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSB3aGVuIFdlYkFzc2VtYmx5IFNJTUQgZmVhdHVyZSBpcyBhdmFpbGFibGUgaW4gY3VycmVudCBjb250ZXh0LlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgdHJ1ZWBcbiAgICAgKi9cbiAgICBzaW1kPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgYSBudW1iZXIgc3BlY2lmeWluZyB0aGUgdGltZW91dCBmb3IgaW5pdGlhbGl6YXRpb24gb2YgV2ViQXNzZW1ibHkgYmFja2VuZCwgaW4gbWlsbGlzZWNvbmRzLiBBIHplcm9cbiAgICAgKiB2YWx1ZSBpbmRpY2F0ZXMgbm8gdGltZW91dCBpcyBzZXQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAwYFxuICAgICAqL1xuICAgIGluaXRUaW1lb3V0PzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0IGEgY3VzdG9tIFVSTCBwcmVmaXggdG8gdGhlIC53YXNtIGZpbGVzIG9yIGEgc2V0IG9mIG92ZXJyaWRlcyBmb3IgZWFjaCAud2FzbSBmaWxlLiBUaGUgb3ZlcnJpZGUgcGF0aCBzaG91bGQgYmVcbiAgICAgKiBhbiBhYnNvbHV0ZSBwYXRoLlxuICAgICAqL1xuICAgIHdhc21QYXRocz86IFdhc21QcmVmaXhPckZpbGVQYXRocztcblxuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0byBwcm94eSB0aGUgZXhlY3V0aW9uIG9mIG1haW4gdGhyZWFkIHRvIGEgd29ya2VyIHRocmVhZC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHByb3h5PzogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR0xGbGFncyB7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgV2ViR0wgQ29udGV4dCBJRCAod2ViZ2wgb3Igd2ViZ2wyKS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYCd3ZWJnbDInYFxuICAgICAqL1xuICAgIGNvbnRleHRJZD86ICd3ZWJnbCd8J3dlYmdsMic7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgbWF4aW11bSBiYXRjaCBzaXplIGZvciBtYXRtdWwuIDAgbWVhbnMgdG8gZGlzYWJsZSBiYXRjaGluZy5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgbWF0bXVsTWF4QmF0Y2hTaXplPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHRleHR1cmUgY2FjaGUgbW9kZS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYCdmdWxsJ2BcbiAgICAgKi9cbiAgICB0ZXh0dXJlQ2FjaGVNb2RlPzogJ2luaXRpYWxpemVyT25seSd8J2Z1bGwnO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHBhY2tlZCB0ZXh0dXJlIG1vZGVcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHBhY2s/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgd2hldGhlciBlbmFibGUgYXN5bmMgZG93bmxvYWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBhc3luYz86IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdwdUZsYWdzIHtcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHRoZSBwcm9maWxpbmcgbW9kZS5cbiAgICAgKi9cbiAgICBwcm9maWxpbmdNb2RlPzogJ29mZid8J2RlZmF1bHQnO1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGV2aWNlIGZvciBXZWJHUFUuXG4gICAgICpcbiAgICAgKiBXaGVuIHVzZSB3aXRoIFR5cGVTY3JpcHQsIHRoZSB0eXBlIG9mIHRoaXMgcHJvcGVydHkgaXMgYEdQVURldmljZWAgZGVmaW5lZCBpbiBcIkB3ZWJncHUvdHlwZXNcIi5cbiAgICAgKiBVc2UgYGNvbnN0IGRldmljZSA9IGVudi53ZWJncHUuZGV2aWNlIGFzIEdQVURldmljZTtgIGluIFR5cGVTY3JpcHQgdG8gYWNjZXNzIHRoaXMgcHJvcGVydHkgd2l0aCBjb3JyZWN0IHR5cGUuXG4gICAgICpcbiAgICAgKiBzZWUgY29tbWVudHMgb24ge0BsaW5rIEdwdUJ1ZmZlclR5cGV9IGZvciBtb3JlIGRldGFpbHMgYWJvdXQgd2h5IG5vdCB1c2UgdHlwZXMgZGVmaW5lZCBpbiBcIkB3ZWJncHUvdHlwZXNcIi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXZpY2U6IHVua25vd247XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB3aGV0aGVyIHZhbGlkYXRlIGlucHV0IGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICB2YWxpZGF0ZUlucHV0Q29udGVudD86IGJvb2xlYW47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnYge1xuICAvKipcbiAgICogc2V0IHRoZSBzZXZlcml0eSBsZXZlbCBmb3IgbG9nZ2luZy5cbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSBgJ3dhcm5pbmcnYFxuICAgKi9cbiAgbG9nTGV2ZWw/OiAndmVyYm9zZSd8J2luZm8nfCd3YXJuaW5nJ3wnZXJyb3InfCdmYXRhbCc7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZSB3aGV0aGVyIHJ1biBpbiBkZWJ1ZyBtb2RlLlxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICovXG4gIGRlYnVnPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogR2V0IHZlcnNpb24gb2YgdGhlIGN1cnJlbnQgcGFja2FnZS5cbiAgICovXG4gIHJlYWRvbmx5IHZlcnNpb25zOiB7XG4gICAgcmVhZG9ubHkgY29tbW9uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgd2ViPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG5vZGU/OiBzdHJpbmc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIHJlYWRvbmx5ICdyZWFjdC1uYXRpdmUnPzogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgZm9yIFdlYkFzc2VtYmx5XG4gICAqL1xuICByZWFkb25seSB3YXNtOiBFbnYuV2ViQXNzZW1ibHlGbGFncztcblxuICAvKipcbiAgICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGZvciBXZWJHTFxuICAgKi9cbiAgcmVhZG9ubHkgd2ViZ2w6IEVudi5XZWJHTEZsYWdzO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgZm9yIFdlYkdQVVxuICAgKi9cbiAgcmVhZG9ubHkgd2ViZ3B1OiBFbnYuV2ViR3B1RmxhZ3M7XG5cbiAgW25hbWU6IHN0cmluZ106IHVua25vd247XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGFzIGEgZ2xvYmFsIHNpbmdsZXRvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gZW52SW1wbDtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtUZW5zb3JUb0RhdGFVcmxPcHRpb25zLCBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnN9IGZyb20gJy4vdGVuc29yLWNvbnZlcnNpb24uanMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLmpzJztcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IudG9EYXRhVVJMKClcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvclRvRGF0YVVSTCA9ICh0ZW5zb3I6IFRlbnNvciwgb3B0aW9ucz86IFRlbnNvclRvRGF0YVVybE9wdGlvbnMpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgY2FudmFzLndpZHRoID0gdGVuc29yLmRpbXNbM107XG4gIGNhbnZhcy5oZWlnaHQgPSB0ZW5zb3IuZGltc1syXTtcbiAgY29uc3QgcGl4ZWxzMkRDb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgLy8gRGVmYXVsdCB2YWx1ZXMgZm9yIGhlaWdodCBhbmQgd2lkdGggJiBmb3JtYXRcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gICAgaWYgKG9wdGlvbnM/LnRlbnNvckxheW91dCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbMl07XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1szXTtcbiAgICB9IGVsc2UgeyAgLy8gRGVmYXVsdCBsYXlvdXQgaXMgTkNXSFxuICAgICAgd2lkdGggPSB0ZW5zb3IuZGltc1szXTtcbiAgICAgIGhlaWdodCA9IHRlbnNvci5kaW1zWzJdO1xuICAgIH1cblxuICAgIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucz8uZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcm1hdCA6ICdSR0InO1xuXG4gICAgY29uc3Qgbm9ybSA9IG9wdGlvbnM/Lm5vcm07XG4gICAgbGV0IG5vcm1NZWFuOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5tZWFuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1NZWFuID0gWzI1NSwgMjU1LCAyNTUsIDI1NV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW5bMF0sIG5vcm0ubWVhblsxXSwgbm9ybS5tZWFuWzJdLCAwXTtcbiAgICAgICAgaWYgKG5vcm0ubWVhblszXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybU1lYW5bM10gPSBub3JtLm1lYW5bM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm0gPT09IHVuZGVmaW5lZCB8fCBub3JtLmJpYXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9ybUJpYXMgPSBbMCwgMCwgMCwgMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0uYmlhcykgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtQmlhcyA9IFtub3JtLmJpYXNbMF0sIG5vcm0uYmlhc1sxXSwgbm9ybS5iaWFzWzJdLCAwXTtcbiAgICAgICAgaWYgKG5vcm0uYmlhc1szXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybUJpYXNbM10gPSBub3JtLmJpYXNbM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdHJpZGUgPSBoZWlnaHQgKiB3aWR0aDtcbiAgICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgICBsZXQgclRlbnNvclBvaW50ZXIgPSAwLCBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSwgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyLCBhVGVuc29yUG9pbnRlciA9IC0xO1xuXG4gICAgLy8gVXBkYXRpbmcgdGhlIHBvaW50ZXIgYXNzaWdubWVudHMgYmFzZWQgb24gdGhlIGlucHV0IGltYWdlIGZvcm1hdFxuICAgIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQkEnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICAgIGFUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMztcbiAgICB9IGVsc2UgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkdCJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JCRycpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2lkdGg7IGorKykge1xuICAgICAgICBjb25zdCBSID0gKCh0ZW5zb3IuZGF0YVtyVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMF0pICogbm9ybU1lYW5bMF07ICAvLyBSIHZhbHVlXG4gICAgICAgIGNvbnN0IEcgPSAoKHRlbnNvci5kYXRhW2dUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1sxXSkgKiBub3JtTWVhblsxXTsgIC8vIEcgdmFsdWVcbiAgICAgICAgY29uc3QgQiA9ICgodGVuc29yLmRhdGFbYlRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzJdKSAqIG5vcm1NZWFuWzJdOyAgLy8gQiB2YWx1ZVxuICAgICAgICBjb25zdCBBID0gYVRlbnNvclBvaW50ZXIgPT09IC0xID9cbiAgICAgICAgICAgIDI1NSA6XG4gICAgICAgICAgICAoKHRlbnNvci5kYXRhW2FUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1szXSkgKiBub3JtTWVhblszXTsgIC8vIEEgdmFsdWVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzXG4gICAgICAgIHBpeGVsczJEQ29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgnICsgUiArICcsJyArIEcgKyAnLCcgKyBCICsgJywnICsgQSArICcpJztcbiAgICAgICAgcGl4ZWxzMkRDb250ZXh0LmZpbGxSZWN0KGosIGksIDEsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICB9XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci50b0ltYWdlRGF0YSgpXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JUb0ltYWdlRGF0YSA9ICh0ZW5zb3I6IFRlbnNvciwgb3B0aW9ucz86IFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9ucyk6IEltYWdlRGF0YSA9PiB7XG4gIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7XG4gIGxldCBpbWFnZTogSW1hZ2VEYXRhO1xuICBpZiAocGl4ZWxzMkRDb250ZXh0ICE9IG51bGwpIHtcbiAgICAvLyBEZWZhdWx0IHZhbHVlcyBmb3IgaGVpZ2h0IGFuZCB3aWR0aCAmIGZvcm1hdFxuICAgIGxldCB3aWR0aDogbnVtYmVyO1xuICAgIGxldCBoZWlnaHQ6IG51bWJlcjtcbiAgICBsZXQgY2hhbm5lbHM6IG51bWJlcjtcbiAgICBpZiAob3B0aW9ucz8udGVuc29yTGF5b3V0ICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy50ZW5zb3JMYXlvdXQgPT09ICdOSFdDJykge1xuICAgICAgd2lkdGggPSB0ZW5zb3IuZGltc1syXTtcbiAgICAgIGhlaWdodCA9IHRlbnNvci5kaW1zWzFdO1xuICAgICAgY2hhbm5lbHMgPSB0ZW5zb3IuZGltc1szXTtcbiAgICB9IGVsc2UgeyAgLy8gRGVmYXVsdCBsYXlvdXQgaXMgTkNXSFxuICAgICAgd2lkdGggPSB0ZW5zb3IuZGltc1szXTtcbiAgICAgIGhlaWdodCA9IHRlbnNvci5kaW1zWzJdO1xuICAgICAgY2hhbm5lbHMgPSB0ZW5zb3IuZGltc1sxXTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRmb3JtYXQgPSBvcHRpb25zICE9PSB1bmRlZmluZWQgPyAob3B0aW9ucy5mb3JtYXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZm9ybWF0IDogJ1JHQicpIDogJ1JHQic7XG5cbiAgICBjb25zdCBub3JtID0gb3B0aW9ucz8ubm9ybTtcbiAgICBsZXQgbm9ybU1lYW46IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGxldCBub3JtQmlhczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgaWYgKG5vcm0gPT09IHVuZGVmaW5lZCB8fCBub3JtLm1lYW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9ybU1lYW4gPSBbMjU1LCAyNTUsIDI1NSwgMjU1XTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiAobm9ybS5tZWFuKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhblswXSwgbm9ybS5tZWFuWzFdLCBub3JtLm1lYW5bMl0sIDI1NV07XG4gICAgICAgIGlmIChub3JtLm1lYW5bM10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vcm1NZWFuWzNdID0gbm9ybS5tZWFuWzNdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5iaWFzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1CaWFzID0gWzAsIDAsIDAsIDBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIChub3JtLmJpYXMpID09PSAnbnVtYmVyJykge1xuICAgICAgICBub3JtQmlhcyA9IFtub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXNdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzWzBdLCBub3JtLmJpYXNbMV0sIG5vcm0uYmlhc1syXSwgMF07XG4gICAgICAgIGlmIChub3JtLmJpYXNbM10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vcm1CaWFzWzNdID0gbm9ybS5iaWFzWzNdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaWRlID0gaGVpZ2h0ICogd2lkdGg7XG4gICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0ICE9PSB1bmRlZmluZWQgJiYgKGNoYW5uZWxzID09PSA0ICYmIG9wdGlvbnMuZm9ybWF0ICE9PSAnUkdCQScpIHx8XG4gICAgICAgICAgKGNoYW5uZWxzID09PSAzICYmIChvcHRpb25zLmZvcm1hdCAhPT0gJ1JHQicgJiYgb3B0aW9ucy5mb3JtYXQgIT09ICdCR1InKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZW5zb3IgZm9ybWF0IGRvZXNuXFwndCBtYXRjaCBpbnB1dCB0ZW5zb3IgZGltcycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmF1bHQgcG9pbnRlciBhc3NpZ25tZW50c1xuICAgIGNvbnN0IHN0ZXAgPSA0O1xuICAgIGxldCBySW1hZ2VQb2ludGVyID0gMCwgZ0ltYWdlUG9pbnRlciA9IDEsIGJJbWFnZVBvaW50ZXIgPSAyLCBhSW1hZ2VQb2ludGVyID0gMztcbiAgICBsZXQgclRlbnNvclBvaW50ZXIgPSAwLCBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSwgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyLCBhVGVuc29yUG9pbnRlciA9IC0xO1xuXG4gICAgLy8gVXBkYXRpbmcgdGhlIHBvaW50ZXIgYXNzaWdubWVudHMgYmFzZWQgb24gdGhlIGlucHV0IGltYWdlIGZvcm1hdFxuICAgIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQkEnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICAgIGFUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMztcbiAgICB9IGVsc2UgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkdCJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JCRycpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH1cblxuICAgIGltYWdlID0gcGl4ZWxzMkRDb250ZXh0LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0ICogd2lkdGg7XG4gICAgICAgICBySW1hZ2VQb2ludGVyICs9IHN0ZXAsIGdJbWFnZVBvaW50ZXIgKz0gc3RlcCwgYkltYWdlUG9pbnRlciArPSBzdGVwLCBhSW1hZ2VQb2ludGVyICs9IHN0ZXAsIGkrKykge1xuICAgICAgaW1hZ2UuZGF0YVtySW1hZ2VQb2ludGVyXSA9ICgodGVuc29yLmRhdGFbclRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzBdKSAqIG5vcm1NZWFuWzBdOyAgLy8gUiB2YWx1ZVxuICAgICAgaW1hZ2UuZGF0YVtnSW1hZ2VQb2ludGVyXSA9ICgodGVuc29yLmRhdGFbZ1RlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzFdKSAqIG5vcm1NZWFuWzFdOyAgLy8gRyB2YWx1ZVxuICAgICAgaW1hZ2UuZGF0YVtiSW1hZ2VQb2ludGVyXSA9ICgodGVuc29yLmRhdGFbYlRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzJdKSAqIG5vcm1NZWFuWzJdOyAgLy8gQiB2YWx1ZVxuICAgICAgaW1hZ2UuZGF0YVthSW1hZ2VQb2ludGVyXSA9IGFUZW5zb3JQb2ludGVyID09PSAtMSA/XG4gICAgICAgICAgMjU1IDpcbiAgICAgICAgICAoKHRlbnNvci5kYXRhW2FUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1szXSkgKiBub3JtTWVhblszXTsgIC8vIEEgdmFsdWVcbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgYWNjZXNzIGltYWdlIGRhdGEnKTtcbiAgfVxuICByZXR1cm4gaW1hZ2U7XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge09wdGlvbnNEaW1lbnNpb25zLCBPcHRpb25zRm9ybWF0LCBPcHRpb25zTm9ybWFsaXphdGlvblBhcmFtZXRlcnMsIE9wdGlvbnNUZW5zb3JGb3JtYXQsIE9wdGlvbnNUZW5zb3JMYXlvdXQsIFRlbnNvckZyb21HcHVCdWZmZXJPcHRpb25zLCBUZW5zb3JGcm9tSW1hZ2VCaXRtYXBPcHRpb25zLCBUZW5zb3JGcm9tSW1hZ2VEYXRhT3B0aW9ucywgVGVuc29yRnJvbUltYWdlRWxlbWVudE9wdGlvbnMsIFRlbnNvckZyb21UZXh0dXJlT3B0aW9ucywgVGVuc29yRnJvbVVybE9wdGlvbnN9IGZyb20gJy4vdGVuc29yLWZhY3RvcnkuanMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLWltcGwuanMnO1xuaW1wb3J0IHtUZW5zb3IgYXMgVGVuc29ySW50ZXJmYWNlfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbmludGVyZmFjZSBCdWZmZXJUb1RlbnNvck9wdGlvbnMgZXh0ZW5kcyBPcHRpb25zRGltZW5zaW9ucywgT3B0aW9uc1RlbnNvckxheW91dCwgT3B0aW9uc05vcm1hbGl6YXRpb25QYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9wdGlvbnNGb3JtYXQsIE9wdGlvbnNUZW5zb3JGb3JtYXQge31cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgdGVuc29yIG9iamVjdCBmcm9tIGltYWdlIG9iamVjdFxuICpcbiAqIEBwYXJhbSBidWZmZXIgLSBFeHRyYWN0ZWQgaW1hZ2UgYnVmZmVyIGRhdGEgLSBhc3N1bWluZyBSR0JBIGZvcm1hdFxuICogQHBhcmFtIGltYWdlRm9ybWF0IC0gaW5wdXQgaW1hZ2UgY29uZmlndXJhdGlvbiAtIHJlcXVpcmVkIGNvbmZpZ3VyYXRpb25zIGhlaWdodCwgd2lkdGgsIGZvcm1hdFxuICogQHBhcmFtIHRlbnNvckZvcm1hdCAtIG91dHB1dCB0ZW5zb3IgY29uZmlndXJhdGlvbiAtIERlZmF1bHQgaXMgUkdCIGZvcm1hdFxuICovXG5leHBvcnQgY29uc3QgYnVmZmVyVG9UZW5zb3IgPSAoYnVmZmVyOiBVaW50OENsYW1wZWRBcnJheXx1bmRlZmluZWQsIG9wdGlvbnM6IEJ1ZmZlclRvVGVuc29yT3B0aW9ucyk6IFRlbnNvciA9PiB7XG4gIGlmIChidWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgYnVmZmVyIG11c3QgYmUgZGVmaW5lZCcpO1xuICB9XG4gIGlmIChvcHRpb25zLmhlaWdodCA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMud2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgaGVpZ2h0IGFuZCB3aWR0aCBtdXN0IGJlIGRlZmluZWQnKTtcbiAgfVxuICBpZiAob3B0aW9ucy50ZW5zb3JMYXlvdXQgPT09ICdOSFdDJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTkhXQyBUZW5zb3IgbGF5b3V0IGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICBjb25zdCB7aGVpZ2h0LCB3aWR0aH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IG5vcm0gPSBvcHRpb25zLm5vcm0gPz8ge21lYW46IDI1NSwgYmlhczogMH07XG4gIGxldCBub3JtTWVhbjogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gIGxldCBub3JtQmlhczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG5cbiAgaWYgKHR5cGVvZiAobm9ybS5tZWFuKSA9PT0gJ251bWJlcicpIHtcbiAgICBub3JtTWVhbiA9IFtub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW5dO1xuICB9IGVsc2Uge1xuICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiFbMF0sIG5vcm0ubWVhbiFbMV0sIG5vcm0ubWVhbiFbMl0sIG5vcm0ubWVhbiFbM10gPz8gMjU1XTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgKG5vcm0uYmlhcykgPT09ICdudW1iZXInKSB7XG4gICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzXTtcbiAgfSBlbHNlIHtcbiAgICBub3JtQmlhcyA9IFtub3JtLmJpYXMhWzBdLCBub3JtLmJpYXMhWzFdLCBub3JtLmJpYXMhWzJdLCBub3JtLmJpYXMhWzNdID8/IDBdO1xuICB9XG5cbiAgY29uc3QgaW5wdXRmb3JtYXQgPSBvcHRpb25zLmZvcm1hdCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5mb3JtYXQgOiAnUkdCQSc7XG4gIC8vIGRlZmF1bHQgdmFsdWUgaXMgUkdCQSBzaW5jZSBpbWFnZWRhdGEgYW5kIEhUTUxJbWFnZUVsZW1lbnQgdXNlcyBpdFxuXG4gIGNvbnN0IG91dHB1dGZvcm1hdCA9XG4gICAgICBvcHRpb25zLnRlbnNvckZvcm1hdCAhPT0gdW5kZWZpbmVkID8gKG9wdGlvbnMudGVuc29yRm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnRlbnNvckZvcm1hdCA6ICdSR0InKSA6ICdSR0InO1xuICBjb25zdCBzdHJpZGUgPSBoZWlnaHQgKiB3aWR0aDtcbiAgY29uc3QgZmxvYXQzMkRhdGEgPSBvdXRwdXRmb3JtYXQgPT09ICdSR0JBJyA/IG5ldyBGbG9hdDMyQXJyYXkoc3RyaWRlICogNCkgOiBuZXcgRmxvYXQzMkFycmF5KHN0cmlkZSAqIDMpO1xuXG4gIC8vIERlZmF1bHQgcG9pbnRlciBhc3NpZ25tZW50c1xuICBsZXQgc3RlcCA9IDQsIHJJbWFnZVBvaW50ZXIgPSAwLCBnSW1hZ2VQb2ludGVyID0gMSwgYkltYWdlUG9pbnRlciA9IDIsIGFJbWFnZVBvaW50ZXIgPSAzO1xuICBsZXQgclRlbnNvclBvaW50ZXIgPSAwLCBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSwgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyLCBhVGVuc29yUG9pbnRlciA9IC0xO1xuXG4gIC8vIFVwZGF0aW5nIHRoZSBwb2ludGVyIGFzc2lnbm1lbnRzIGJhc2VkIG9uIHRoZSBpbnB1dCBpbWFnZSBmb3JtYXRcbiAgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkdCJykge1xuICAgIHN0ZXAgPSAzO1xuICAgIHJJbWFnZVBvaW50ZXIgPSAwO1xuICAgIGdJbWFnZVBvaW50ZXIgPSAxO1xuICAgIGJJbWFnZVBvaW50ZXIgPSAyO1xuICAgIGFJbWFnZVBvaW50ZXIgPSAtMTtcbiAgfVxuXG4gIC8vIFVwZGF0aW5nIHRoZSBwb2ludGVyIGFzc2lnbm1lbnRzIGJhc2VkIG9uIHRoZSBvdXRwdXQgdGVuc29yIGZvcm1hdFxuICBpZiAob3V0cHV0Zm9ybWF0ID09PSAnUkdCQScpIHtcbiAgICBhVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDM7XG4gIH0gZWxzZSBpZiAob3V0cHV0Zm9ybWF0ID09PSAnUkJHJykge1xuICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gIH0gZWxzZSBpZiAob3V0cHV0Zm9ybWF0ID09PSAnQkdSJykge1xuICAgIGJUZW5zb3JQb2ludGVyID0gMDtcbiAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICByVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmlkZTtcbiAgICAgICBpKyssIHJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgYkltYWdlUG9pbnRlciArPSBzdGVwLCBnSW1hZ2VQb2ludGVyICs9IHN0ZXAsIGFJbWFnZVBvaW50ZXIgKz0gc3RlcCkge1xuICAgIGZsb2F0MzJEYXRhW3JUZW5zb3JQb2ludGVyKytdID0gKGJ1ZmZlcltySW1hZ2VQb2ludGVyXSArIG5vcm1CaWFzWzBdKSAvIG5vcm1NZWFuWzBdO1xuICAgIGZsb2F0MzJEYXRhW2dUZW5zb3JQb2ludGVyKytdID0gKGJ1ZmZlcltnSW1hZ2VQb2ludGVyXSArIG5vcm1CaWFzWzFdKSAvIG5vcm1NZWFuWzFdO1xuICAgIGZsb2F0MzJEYXRhW2JUZW5zb3JQb2ludGVyKytdID0gKGJ1ZmZlcltiSW1hZ2VQb2ludGVyXSArIG5vcm1CaWFzWzJdKSAvIG5vcm1NZWFuWzJdO1xuICAgIGlmIChhVGVuc29yUG9pbnRlciAhPT0gLTEgJiYgYUltYWdlUG9pbnRlciAhPT0gLTEpIHtcbiAgICAgIGZsb2F0MzJEYXRhW2FUZW5zb3JQb2ludGVyKytdID0gKGJ1ZmZlclthSW1hZ2VQb2ludGVyXSArIG5vcm1CaWFzWzNdKSAvIG5vcm1NZWFuWzNdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZsb2F0MzJBcnJheSAtPiBvcnQuVGVuc29yXG4gIGNvbnN0IG91dHB1dFRlbnNvciA9IG91dHB1dGZvcm1hdCA9PT0gJ1JHQkEnID8gbmV3IFRlbnNvcignZmxvYXQzMicsIGZsb2F0MzJEYXRhLCBbMSwgNCwgaGVpZ2h0LCB3aWR0aF0pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGVuc29yKCdmbG9hdDMyJywgZmxvYXQzMkRhdGEsIFsxLCAzLCBoZWlnaHQsIHdpZHRoXSk7XG4gIHJldHVybiBvdXRwdXRUZW5zb3I7XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci5mcm9tSW1hZ2UoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21JbWFnZSA9IGFzeW5jKFxuICAgIGltYWdlOiBJbWFnZURhdGF8SFRNTEltYWdlRWxlbWVudHxJbWFnZUJpdG1hcHxzdHJpbmcsXG4gICAgb3B0aW9ucz86IFRlbnNvckZyb21JbWFnZURhdGFPcHRpb25zfFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zfFRlbnNvckZyb21JbWFnZUJpdG1hcE9wdGlvbnN8XG4gICAgVGVuc29yRnJvbVVybE9wdGlvbnMpOiBQcm9taXNlPFRlbnNvcj4gPT4ge1xuICAvLyBjaGVja2luZyB0aGUgdHlwZSBvZiBpbWFnZSBvYmplY3RcbiAgY29uc3QgaXNIVE1MSW1hZ2VFbGUgPSB0eXBlb2YgKEhUTUxJbWFnZUVsZW1lbnQpICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQ7XG4gIGNvbnN0IGlzSW1hZ2VEYXRhRWxlID0gdHlwZW9mIChJbWFnZURhdGEpICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlRGF0YTtcbiAgY29uc3QgaXNJbWFnZUJpdG1hcCA9IHR5cGVvZiAoSW1hZ2VCaXRtYXApICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwO1xuICBjb25zdCBpc1N0cmluZyA9IHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZyc7XG5cbiAgbGV0IGRhdGE6IFVpbnQ4Q2xhbXBlZEFycmF5fHVuZGVmaW5lZDtcbiAgbGV0IGJ1ZmZlclRvVGVuc29yT3B0aW9uczogQnVmZmVyVG9UZW5zb3JPcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcblxuICAvLyBmaWxsaW5nIGFuZCBjaGVja2luZyBpbWFnZSBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgaWYgKGlzSFRNTEltYWdlRWxlKSB7XG4gICAgLy8gSFRNTEltYWdlRWxlbWVudCAtIGltYWdlIG9iamVjdCAtIGZvcm1hdCBpcyBSR0JBIGJ5IGRlZmF1bHRcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICBsZXQgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgbGV0IHdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMucmVzaXplZEhlaWdodCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMucmVzaXplZFdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaGVpZ2h0ID0gb3B0aW9ucy5yZXNpemVkSGVpZ2h0O1xuICAgICAgICB3aWR0aCA9IG9wdGlvbnMucmVzaXplZFdpZHRoO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChvcHRpb25zLnRlbnNvckZvcm1hdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZSBpbnB1dCBjb25maWcgZm9ybWF0IG11c3QgYmUgUkdCQSBmb3IgSFRNTEltYWdlRWxlbWVudCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy50ZW5zb3JGb3JtYXQgPSAnUkdCQSc7XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gd2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMudGVuc29yRm9ybWF0ID0gJ1JHQkEnO1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMud2lkdGggPSB3aWR0aDtcbiAgICAgIH1cblxuICAgICAgcGl4ZWxzMkRDb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICBkYXRhID0gcGl4ZWxzMkRDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgYWNjZXNzIGltYWdlIGRhdGEnKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNJbWFnZURhdGFFbGUpIHtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gICAgbGV0IHdpZHRoOiBudW1iZXI7XG5cbiAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMucmVzaXplZFdpZHRoICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5yZXNpemVkSGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhlaWdodCA9IG9wdGlvbnMucmVzaXplZEhlaWdodDtcbiAgICAgIHdpZHRoID0gb3B0aW9ucy5yZXNpemVkV2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICAgIHdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmZvcm1hdCA9ICdSR0JBJztcbiAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuXG4gICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgdGVtcENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgICB0ZW1wQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICB0ZW1wQ2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgY29uc3QgcGl4ZWxzMkRDb250ZXh0ID0gdGVtcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICBpZiAocGl4ZWxzMkRDb250ZXh0ICE9IG51bGwpIHtcbiAgICAgICAgcGl4ZWxzMkRDb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZSwgMCwgMCk7XG4gICAgICAgIGRhdGEgPSBwaXhlbHMyRENvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpLmRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgYWNjZXNzIGltYWdlIGRhdGEnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGltYWdlLmRhdGE7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSW1hZ2VCaXRtYXApIHtcbiAgICAvLyBJbWFnZUJpdG1hcCAtIGltYWdlIG9iamVjdCAtIGZvcm1hdCBtdXN0IGJlIHByb3ZpZGVkIGJ5IHVzZXJcbiAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSBwcm92aWRlIGltYWdlIGNvbmZpZyB3aXRoIGZvcm1hdCBmb3IgSW1hZ2ViaXRtYXAnKTtcbiAgICB9XG5cbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICBjb25zdCB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgcGl4ZWxzMkRDb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBkYXRhID0gcGl4ZWxzMkRDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhO1xuICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuICAgICAgcmV0dXJuIGJ1ZmZlclRvVGVuc29yKGRhdGEsIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1N0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGlmICghaW1hZ2UgfHwgIWNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgfVxuICAgICAgY29uc3QgbmV3SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIG5ld0ltYWdlLmNyb3NzT3JpZ2luID0gJ0Fub255bW91cyc7XG4gICAgICBuZXdJbWFnZS5zcmMgPSBpbWFnZTtcbiAgICAgIG5ld0ltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgY2FudmFzLndpZHRoID0gbmV3SW1hZ2Uud2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBuZXdJbWFnZS5oZWlnaHQ7XG4gICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKG5ld0ltYWdlLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCBpbWcgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgIHJlc29sdmUoYnVmZmVyVG9UZW5zb3IoaW1nLmRhdGEsIGJ1ZmZlclRvVGVuc29yT3B0aW9ucykpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IGRhdGEgcHJvdmlkZWQgaXMgbm90IHN1cHBvcnRlZCAtIGFib3J0ZWQgdGVuc29yIGNyZWF0aW9uJyk7XG4gIH1cblxuICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGJ1ZmZlclRvVGVuc29yKGRhdGEsIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBkYXRhIHByb3ZpZGVkIGlzIG5vdCBzdXBwb3J0ZWQgLSBhYm9ydGVkIHRlbnNvciBjcmVhdGlvbicpO1xuICB9XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci5mcm9tVGV4dHVyZSgpLlxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRnJvbVRleHR1cmUgPSA8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5UZXh0dXJlRGF0YVR5cGVzPihcbiAgICB0ZXh0dXJlOiBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZVR5cGUsIG9wdGlvbnM6IFRlbnNvckZyb21UZXh0dXJlT3B0aW9uczxUPik6IFRlbnNvciA9PiB7XG4gIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCBkb3dubG9hZCwgZGlzcG9zZX0gPSBvcHRpb25zO1xuICAvLyBBbHdheXMgYXNzdW1lIFJHQkFGMzIuIFRPRE86IHN1cHBvcnQgZGlmZmVyZW50IHRleHR1cmUgZm9ybWF0XG4gIGNvbnN0IGRpbXMgPSBbMSwgaGVpZ2h0LCB3aWR0aCwgNF07XG4gIHJldHVybiBuZXcgVGVuc29yKHtsb2NhdGlvbjogJ3RleHR1cmUnLCB0eXBlOiAnZmxvYXQzMicsIHRleHR1cmUsIGRpbXMsIGRvd25sb2FkLCBkaXNwb3NlfSk7XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci5mcm9tR3B1QnVmZmVyKCkuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JGcm9tR3B1QnVmZmVyID0gPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyRGF0YVR5cGVzPihcbiAgICBncHVCdWZmZXI6IFRlbnNvckludGVyZmFjZS5HcHVCdWZmZXJUeXBlLCBvcHRpb25zOiBUZW5zb3JGcm9tR3B1QnVmZmVyT3B0aW9uczxUPik6IFRlbnNvciA9PiB7XG4gIGNvbnN0IHtkYXRhVHlwZSwgZGltcywgZG93bmxvYWQsIGRpc3Bvc2V9ID0gb3B0aW9ucztcbiAgcmV0dXJuIG5ldyBUZW5zb3Ioe2xvY2F0aW9uOiAnZ3B1LWJ1ZmZlcicsIHR5cGU6IGRhdGFUeXBlID8/ICdmbG9hdDMyJywgZ3B1QnVmZmVyLCBkaW1zLCBkb3dubG9hZCwgZGlzcG9zZX0pO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbVBpbm5lZEJ1ZmZlcigpLlxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRnJvbVBpbm5lZEJ1ZmZlciA9IDxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkNwdVBpbm5lZERhdGFUeXBlcz4oXG4gICAgdHlwZTogVCwgYnVmZmVyOiBUZW5zb3JJbnRlcmZhY2UuRGF0YVR5cGVNYXBbVF0sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvciA9PlxuICAgIG5ldyBUZW5zb3Ioe2xvY2F0aW9uOiAnY3B1LXBpbm5lZCcsIHR5cGUsIGRhdGE6IGJ1ZmZlciwgZGltczogZGltcyA/PyBbYnVmZmVyLmxlbmd0aF19KTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLmpzJztcblxuZXhwb3J0IHR5cGUgU3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IEZsb2F0MzJBcnJheUNvbnN0cnVjdG9yfFVpbnQ4QXJyYXlDb25zdHJ1Y3RvcnxJbnQ4QXJyYXlDb25zdHJ1Y3RvcnxcbiAgICBVaW50MTZBcnJheUNvbnN0cnVjdG9yfEludDE2QXJyYXlDb25zdHJ1Y3RvcnxJbnQzMkFycmF5Q29uc3RydWN0b3J8QmlnSW50NjRBcnJheUNvbnN0cnVjdG9yfFVpbnQ4QXJyYXlDb25zdHJ1Y3RvcnxcbiAgICBGbG9hdDY0QXJyYXlDb25zdHJ1Y3RvcnxVaW50MzJBcnJheUNvbnN0cnVjdG9yfEJpZ1VpbnQ2NEFycmF5Q29uc3RydWN0b3I7XG5leHBvcnQgdHlwZSBTdXBwb3J0ZWRUeXBlZEFycmF5ID0gSW5zdGFuY2VUeXBlPFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnM+O1xuXG4vLyBhIHJ1bnRpbWUgbWFwIHRoYXQgbWFwcyB0eXBlIHN0cmluZyB0byBUeXBlZEFycmF5IGNvbnN0cnVjdG9yLiBTaG91bGQgbWF0Y2ggVGVuc29yLkRhdGFUeXBlTWFwLlxuZXhwb3J0IGNvbnN0IE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAgPSBuZXcgTWFwPHN0cmluZywgU3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycz4oW1xuICBbJ2Zsb2F0MzInLCBGbG9hdDMyQXJyYXldLFxuICBbJ3VpbnQ4JywgVWludDhBcnJheV0sXG4gIFsnaW50OCcsIEludDhBcnJheV0sXG4gIFsndWludDE2JywgVWludDE2QXJyYXldLFxuICBbJ2Zsb2F0MTYnLCBVaW50MTZBcnJheV0sXG4gIFsnaW50MTYnLCBJbnQxNkFycmF5XSxcbiAgWydpbnQzMicsIEludDMyQXJyYXldLFxuICBbJ2Jvb2wnLCBVaW50OEFycmF5XSxcbiAgWydmbG9hdDY0JywgRmxvYXQ2NEFycmF5XSxcbiAgWyd1aW50MzInLCBVaW50MzJBcnJheV0sXG5dKTtcblxuLy8gYSBydW50aW1lIG1hcCB0aGF0IG1hcHMgdHlwZSBzdHJpbmcgdG8gVHlwZWRBcnJheSBjb25zdHJ1Y3Rvci4gU2hvdWxkIG1hdGNoIFRlbnNvci5EYXRhVHlwZU1hcC5cbmV4cG9ydCBjb25zdCBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQID0gbmV3IE1hcDxTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzLCBUZW5zb3IuVHlwZT4oW1xuICBbRmxvYXQzMkFycmF5LCAnZmxvYXQzMiddLFxuICBbVWludDhBcnJheSwgJ3VpbnQ4J10sXG4gIFtJbnQ4QXJyYXksICdpbnQ4J10sXG4gIFtVaW50MTZBcnJheSwgJ3VpbnQxNiddLFxuICBbSW50MTZBcnJheSwgJ2ludDE2J10sXG4gIFtJbnQzMkFycmF5LCAnaW50MzInXSxcbiAgW0Zsb2F0NjRBcnJheSwgJ2Zsb2F0NjQnXSxcbiAgW1VpbnQzMkFycmF5LCAndWludDMyJ10sXG5dKTtcblxuLy8gdGhlIGZvbGxvd2luZyBjb2RlIGFsbG93cyBkZWxheWluZyBleGVjdXRpb24gb2YgQmlnSW50IGNoZWNraW5nLiBUaGlzIGFsbG93cyBsYXp5IGluaXRpYWxpemF0aW9uIGZvclxuLy8gTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUCBhbmQgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUCwgd2hpY2ggYWxsb3dzIEJpZ0ludCBwb2x5ZmlsbFxuLy8gaWYgYXZhaWxhYmxlLlxubGV0IGlzQmlnSW50Q2hlY2tlZCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IGNoZWNrQmlnSW50ID0gKCkgPT4ge1xuICBpZiAoIWlzQmlnSW50Q2hlY2tlZCkge1xuICAgIGlzQmlnSW50Q2hlY2tlZCA9IHRydWU7XG4gICAgY29uc3QgaXNCaWdJbnQ2NEFycmF5QXZhaWxhYmxlID0gdHlwZW9mIEJpZ0ludDY0QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBCaWdJbnQ2NEFycmF5LmZyb20gPT09ICdmdW5jdGlvbic7XG4gICAgY29uc3QgaXNCaWdVaW50NjRBcnJheUF2YWlsYWJsZSA9XG4gICAgICAgIHR5cGVvZiBCaWdVaW50NjRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEJpZ1VpbnQ2NEFycmF5LmZyb20gPT09ICdmdW5jdGlvbic7XG5cbiAgICBpZiAoaXNCaWdJbnQ2NEFycmF5QXZhaWxhYmxlKSB7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLnNldCgnaW50NjQnLCBCaWdJbnQ2NEFycmF5KTtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAuc2V0KEJpZ0ludDY0QXJyYXksICdpbnQ2NCcpO1xuICAgIH1cbiAgICBpZiAoaXNCaWdVaW50NjRBcnJheUF2YWlsYWJsZSkge1xuICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5zZXQoJ3VpbnQ2NCcsIEJpZ1VpbnQ2NEFycmF5KTtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAuc2V0KEJpZ1VpbnQ2NEFycmF5LCAndWludDY0Jyk7XG4gICAgfVxuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0NwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVycywgR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzLCBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci1pbXBsLmpzJztcblxuLyoqXG4gKiBjYWxjdWxhdGUgc2l6ZSBmcm9tIGRpbXMuXG4gKlxuICogQHBhcmFtIGRpbXMgdGhlIGRpbXMgYXJyYXkuIE1heSBiZSBhbiBpbGxlZ2FsIGlucHV0LlxuICovXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlU2l6ZSA9IChkaW1zOiByZWFkb25seSB1bmtub3duW10pOiBudW1iZXIgPT4ge1xuICBsZXQgc2l6ZSA9IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGltcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGRpbSA9IGRpbXNbaV07XG4gICAgaWYgKHR5cGVvZiBkaW0gIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNTYWZlSW50ZWdlcihkaW0pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBkaW1zWyR7aX1dIG11c3QgYmUgYW4gaW50ZWdlciwgZ290OiAke2RpbX1gKTtcbiAgICB9XG4gICAgaWYgKGRpbSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBkaW1zWyR7aX1dIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlciwgZ290OiAke2RpbX1gKTtcbiAgICB9XG4gICAgc2l6ZSAqPSBkaW07XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci5yZXNoYXBlKClcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvclJlc2hhcGUgPSAodGVuc29yOiBUZW5zb3IsIGRpbXM6IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yID0+IHtcbiAgc3dpdGNoICh0ZW5zb3IubG9jYXRpb24pIHtcbiAgICBjYXNlICdjcHUnOlxuICAgICAgcmV0dXJuIG5ldyBUZW5zb3IodGVuc29yLnR5cGUsIHRlbnNvci5kYXRhLCBkaW1zKTtcbiAgICBjYXNlICdjcHUtcGlubmVkJzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHtcbiAgICAgICAgbG9jYXRpb246ICdjcHUtcGlubmVkJyxcbiAgICAgICAgZGF0YTogdGVuc29yLmRhdGEgYXMgQ3B1UGlubmVkQ29uc3RydWN0b3JQYXJhbWV0ZXJzWydkYXRhJ10sXG4gICAgICAgIHR5cGU6IHRlbnNvci50eXBlIGFzIENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVyc1sndHlwZSddLFxuICAgICAgICBkaW1zLFxuICAgICAgfSk7XG4gICAgY2FzZSAndGV4dHVyZSc6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih7XG4gICAgICAgIGxvY2F0aW9uOiAndGV4dHVyZScsXG4gICAgICAgIHRleHR1cmU6IHRlbnNvci50ZXh0dXJlLFxuICAgICAgICB0eXBlOiB0ZW5zb3IudHlwZSBhcyBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzWyd0eXBlJ10sXG4gICAgICAgIGRpbXMsXG4gICAgICB9KTtcbiAgICBjYXNlICdncHUtYnVmZmVyJzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHtcbiAgICAgICAgbG9jYXRpb246ICdncHUtYnVmZmVyJyxcbiAgICAgICAgZ3B1QnVmZmVyOiB0ZW5zb3IuZ3B1QnVmZmVyLFxuICAgICAgICB0eXBlOiB0ZW5zb3IudHlwZSBhcyBHcHVCdWZmZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnNbJ3R5cGUnXSxcbiAgICAgICAgZGltcyxcbiAgICAgIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRlbnNvclJlc2hhcGU6IHRlbnNvciBsb2NhdGlvbiAke3RlbnNvci5sb2NhdGlvbn0gaXMgbm90IHN1cHBvcnRlZGApO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge3RlbnNvclRvRGF0YVVSTCwgdGVuc29yVG9JbWFnZURhdGF9IGZyb20gJy4vdGVuc29yLWNvbnZlcnNpb24taW1wbC5qcyc7XG5pbXBvcnQge1RlbnNvclRvRGF0YVVybE9wdGlvbnMsIFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9uc30gZnJvbSAnLi90ZW5zb3ItY29udmVyc2lvbi5qcyc7XG5pbXBvcnQge3RlbnNvckZyb21HcHVCdWZmZXIsIHRlbnNvckZyb21JbWFnZSwgdGVuc29yRnJvbVBpbm5lZEJ1ZmZlciwgdGVuc29yRnJvbVRleHR1cmV9IGZyb20gJy4vdGVuc29yLWZhY3RvcnktaW1wbC5qcyc7XG5pbXBvcnQge0NwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVycywgR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzLCBUZW5zb3JGcm9tR3B1QnVmZmVyT3B0aW9ucywgVGVuc29yRnJvbUltYWdlQml0bWFwT3B0aW9ucywgVGVuc29yRnJvbUltYWdlRGF0YU9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zLCBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnMsIFRlbnNvckZyb21VcmxPcHRpb25zLCBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7Y2hlY2tCaWdJbnQsIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAsIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAsIFN1cHBvcnRlZFR5cGVkQXJyYXksIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnN9IGZyb20gJy4vdGVuc29yLWltcGwtdHlwZS1tYXBwaW5nLmpzJztcbmltcG9ydCB7Y2FsY3VsYXRlU2l6ZSwgdGVuc29yUmVzaGFwZX0gZnJvbSAnLi90ZW5zb3ItdXRpbHMtaW1wbC5qcyc7XG5pbXBvcnQge1RlbnNvciBhcyBUZW5zb3JJbnRlcmZhY2V9IGZyb20gJy4vdGVuc29yLmpzJztcblxuLy8gdHlwZSBhbGlhc2VzIGZvciB0aG9zZSBleHBvcnRlZCBmcm9tIFRlbnNvciBpbnRlcmZhY2VcblxudHlwZSBUZW5zb3JUeXBlID0gVGVuc29ySW50ZXJmYWNlLlR5cGU7XG50eXBlIFRlbnNvckRhdGFUeXBlID0gVGVuc29ySW50ZXJmYWNlLkRhdGFUeXBlO1xudHlwZSBUZW5zb3JEYXRhTG9jYXRpb24gPSBUZW5zb3JJbnRlcmZhY2UuRGF0YUxvY2F0aW9uO1xudHlwZSBUZW5zb3JUZXh0dXJlVHlwZSA9IFRlbnNvckludGVyZmFjZS5UZXh0dXJlVHlwZTtcbnR5cGUgVGVuc29yR3B1QnVmZmVyVHlwZSA9IFRlbnNvckludGVyZmFjZS5HcHVCdWZmZXJUeXBlO1xuXG4vKipcbiAqIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IgaW50ZXJmYWNlLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIFRlbnNvciBpbXBsZW1lbnRzIFRlbnNvckludGVyZmFjZSB7XG4gIC8vICNyZWdpb24gY29uc3RydWN0b3JzXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBDUFUgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICB0eXBlOiBUZW5zb3JUeXBlLCBkYXRhOiBUZW5zb3JEYXRhVHlwZXxyZWFkb25seSBzdHJpbmdbXXxyZWFkb25seSBudW1iZXJbXXxyZWFkb25seSBib29sZWFuW10sXG4gICAgICBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pO1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IENQVSB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuIFR5cGUgaXMgaW5mZXJyZWQgZnJvbSBkYXRhLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YTogVGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgYm9vbGVhbltdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pO1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgcGlubmVkIENQVSBkYXRhIHdpdGggdGhlIGdpdmVuIHR5cGUgYW5kIGRpbXMuXG4gICAqXG4gICAqIFRlbnNvcidzIGxvY2F0aW9uIHdpbGwgYmUgc2V0IHRvICdjcHUtcGlubmVkJy5cbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIFNwZWNpZnkgdGhlIHBhcmFtZXRlcnMgdG8gY29uc3RydWN0IHRoZSB0ZW5zb3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVycyk7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBXZWJHTCB0ZXh0dXJlIHdpdGggdGhlIGdpdmVuIHR5cGUgYW5kIGRpbXMuXG4gICAqXG4gICAqIFRlbnNvcidzIGxvY2F0aW9uIHdpbGwgYmUgc2V0IHRvICd0ZXh0dXJlJy5cbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIFNwZWNpZnkgdGhlIHBhcmFtZXRlcnMgdG8gY29uc3RydWN0IHRoZSB0ZW5zb3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFRleHR1cmVDb25zdHJ1Y3RvclBhcmFtZXRlcnMpO1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgV2ViR1BVIGJ1ZmZlciB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCBkaW1zLlxuICAgKlxuICAgKiBUZW5zb3IncyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAnZ3B1LWJ1ZmZlcicuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBTcGVjaWZ5IHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnN0cnVjdCB0aGUgdGVuc29yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zOiBHcHVCdWZmZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnMpO1xuXG4gIC8qKlxuICAgKiBpbXBsZW1lbnRhdGlvbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgYXJnMDogVGVuc29yVHlwZXxUZW5zb3JEYXRhVHlwZXxyZWFkb25seSBzdHJpbmdbXXxyZWFkb25seSBib29sZWFuW118Q3B1UGlubmVkQ29uc3RydWN0b3JQYXJhbWV0ZXJzfFxuICAgICAgVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVyc3xHcHVCdWZmZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnMsXG4gICAgICBhcmcxPzogVGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgbnVtYmVyW118cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgYm9vbGVhbltdLCBhcmcyPzogcmVhZG9ubHkgbnVtYmVyW10pIHtcbiAgICAvLyBwZXJmb3JtIG9uZS10aW1lIGNoZWNrIGZvciBCaWdJbnQgc3VwcG9ydFxuICAgIGNoZWNrQmlnSW50KCk7XG5cbiAgICBsZXQgdHlwZTogVGVuc29yVHlwZTtcbiAgICBsZXQgZGltczogcmVhZG9ubHkgbnVtYmVyW107XG5cbiAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdvYmplY3QnICYmICdsb2NhdGlvbicgaW4gYXJnMCkge1xuICAgICAgLy9cbiAgICAgIC8vIGNvbnN0cnVjdGluZyB0ZW5zb3IgZnJvbSBzcGVjaWZpYyBsb2NhdGlvblxuICAgICAgLy9cbiAgICAgIHRoaXMuZGF0YUxvY2F0aW9uID0gYXJnMC5sb2NhdGlvbjtcbiAgICAgIHR5cGUgPSBhcmcwLnR5cGU7XG4gICAgICBkaW1zID0gYXJnMC5kaW1zO1xuICAgICAgc3dpdGNoIChhcmcwLmxvY2F0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2NwdS1waW5uZWQnOiB7XG4gICAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLmdldCh0eXBlKTtcbiAgICAgICAgICBpZiAoIWV4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB1bnN1cHBvcnRlZCB0eXBlIFwiJHt0eXBlfVwiIHRvIGNyZWF0ZSB0ZW5zb3IgZnJvbSBwaW5uZWQgYnVmZmVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKGFyZzAuZGF0YSBpbnN0YW5jZW9mIGV4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgYnVmZmVyIHNob3VsZCBiZSBvZiB0eXBlICR7ZXhwZWN0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3IubmFtZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jcHVEYXRhID0gYXJnMC5kYXRhO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3RleHR1cmUnOiB7XG4gICAgICAgICAgaWYgKHR5cGUgIT09ICdmbG9hdDMyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZSBcIiR7dHlwZX1cIiB0byBjcmVhdGUgdGVuc29yIGZyb20gdGV4dHVyZWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdwdVRleHR1cmVEYXRhID0gYXJnMC50ZXh0dXJlO1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRlciA9IGFyZzAuZG93bmxvYWQ7XG4gICAgICAgICAgdGhpcy5kaXNwb3NlciA9IGFyZzAuZGlzcG9zZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdncHUtYnVmZmVyJzoge1xuICAgICAgICAgIGlmICgodHlwZSAhPT0gJ2Zsb2F0MzInICYmIHR5cGUgIT09ICdmbG9hdDE2JyAmJiB0eXBlICE9PSAnaW50MzInICYmIHR5cGUgIT09ICdpbnQ2NCcgJiYgdHlwZSAhPT0gJ3VpbnQzMicgJiZcbiAgICAgICAgICAgICAgIHR5cGUgIT09ICdib29sJykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHVuc3VwcG9ydGVkIHR5cGUgXCIke3R5cGV9XCIgdG8gY3JlYXRlIHRlbnNvciBmcm9tIGdwdSBidWZmZXJgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ncHVCdWZmZXJEYXRhID0gYXJnMC5ncHVCdWZmZXI7XG4gICAgICAgICAgdGhpcy5kb3dubG9hZGVyID0gYXJnMC5kb3dubG9hZDtcbiAgICAgICAgICB0aGlzLmRpc3Bvc2VyID0gYXJnMC5kaXNwb3NlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUZW5zb3IgY29uc3RydWN0b3I6IHVuc3VwcG9ydGVkIGxvY2F0aW9uICcke3RoaXMuZGF0YUxvY2F0aW9ufSdgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy9cbiAgICAgIC8vIGNvbnN0cnVjdGluZyB0ZW5zb3Igb2YgbG9jYXRpb24gJ2NwdSdcbiAgICAgIC8vXG4gICAgICBsZXQgZGF0YTogVGVuc29yRGF0YVR5cGU7XG4gICAgICBsZXQgbWF5YmVEaW1zOiB0eXBlb2YgYXJnMXx0eXBlb2YgYXJnMjtcbiAgICAgIC8vIGNoZWNrIHdoZXRoZXIgYXJnMCBpcyB0eXBlIG9yIGRhdGFcbiAgICAgIGlmICh0eXBlb2YgYXJnMCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gT3ZlcnJpZGU6IGNvbnN0cnVjdG9yKHR5cGUsIGRhdGEsIC4uLilcbiAgICAgICAgLy9cbiAgICAgICAgdHlwZSA9IGFyZzA7XG4gICAgICAgIG1heWJlRGltcyA9IGFyZzI7XG4gICAgICAgIGlmIChhcmcwID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIHN0cmluZyB0ZW5zb3JcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Egc3RyaW5nIHRlbnNvclxcJ3MgZGF0YSBtdXN0IGJlIGEgc3RyaW5nIGFycmF5LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSBkb24ndCBjaGVjayB3aGV0aGVyIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIGFycmF5IGlzIHN0cmluZzsgdGhpcyBpcyB0b28gc2xvdy4gd2UgYXNzdW1lIGl0J3MgY29ycmVjdCBhbmRcbiAgICAgICAgICAvLyBlcnJvciB3aWxsIGJlIHBvcHVsYXRlZCBhdCBpbmZlcmVuY2VcbiAgICAgICAgICBkYXRhID0gYXJnMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBudW1lcmljIHRlbnNvclxuICAgICAgICAgIGNvbnN0IHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAuZ2V0KGFyZzApO1xuICAgICAgICAgIGlmICh0eXBlZEFycmF5Q29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5zdXBwb3J0ZWQgdGVuc29yIHR5cGU6ICR7YXJnMH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZzEpKSB7XG4gICAgICAgICAgICBpZiAoYXJnMCA9PT0gJ2Zsb2F0MTYnKSB7XG4gICAgICAgICAgICAgIC8vIFRocm93IGVycm9yIGhlcmUgYmVjYXVzZSB3aGVuIHVzZXIgdHJ5IHRvIHVzZSBudW1iZXIgYXJyYXkgYXMgZGF0YSxcbiAgICAgICAgICAgICAgLy8gZS5nLiBuZXcgVGVuc29yKCdmbG9hdDE2JywgWzEsIDIsIDMsIDRdLCBkaW1zKSksIGl0IHdpbGwgYWN0dWFsbHkgY2FsbFxuICAgICAgICAgICAgICAvLyBVaW50MTZBcnJheS5mcm9tKGFyZzEpIHdoaWNoIGdlbmVyYXRlcyB3cm9uZyBkYXRhLlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgJ0NyZWF0aW5nIGEgZmxvYXQxNiB0ZW5zb3IgZnJvbSBudW1iZXIgYXJyYXkgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBVaW50MTZBcnJheSBhcyBkYXRhLicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcwID09PSAndWludDY0JyB8fCBhcmcwID09PSAnaW50NjQnKSB7XG4gICAgICAgICAgICAgIC8vIHVzZSAnYXMgYW55JyBoZXJlIGJlY2F1c2U6XG4gICAgICAgICAgICAgIC8vIDEuIFR5cGVTY3JpcHQncyBjaGVjayBvbiB0eXBlIG9mICdBcnJheS5pc0FycmF5KCknIGRvZXMgbm90IHdvcmsgd2l0aCByZWFkb25seSBhcnJheXMuXG4gICAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzE3MDAyXG4gICAgICAgICAgICAgIC8vIDIuIFR5cGVTY3JpcHQncyBjaGVjayBvbiB1bmlvbiB0eXBlIG9mICcoQmlnSW50NjRBcnJheUNvbnN0cnVjdG9yfEJpZ1VpbnQ2NEFycmF5Q29uc3RydWN0b3IpLmZyb20oKSdcbiAgICAgICAgICAgICAgLy8gZG9lcyBub3QgYWNjZXB0IHBhcmFtZXRlciBtYXBGbi5cbiAgICAgICAgICAgICAgLy8gMy4gcGFyYW1ldGVycyBvZiAnU3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycy5mcm9tKCknIGRvZXMgbm90IG1hdGNoIHRoZSByZXF1aXJlbWVudCBvZiB0aGUgdW5pb25cbiAgICAgICAgICAgICAgLy8gdHlwZS5cblxuICAgICAgICAgICAgICAvLyBhc3N1bWUgJ2FyZzEnIGlzIG9mIHR5cGUgXCJyZWFkb25seSBudW1iZXJbXXxyZWFkb25seSBiaWdpbnRbXVwiIGhlcmUuXG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgZGF0YSA9ICh0eXBlZEFycmF5Q29uc3RydWN0b3IgYXMgYW55KS5mcm9tKGFyZzEsIEJpZ0ludCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBhc3N1bWUgJ2FyZzEnIGlzIG9mIHR5cGUgXCJyZWFkb25seSBudW1iZXJbXVwiIGhlcmUuXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgIGRhdGEgPSAodHlwZWRBcnJheUNvbnN0cnVjdG9yIGFzIGFueSkuZnJvbShhcmcxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGFyZzEgaW5zdGFuY2VvZiB0eXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGRhdGEgPSBhcmcxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBBICR7dHlwZX0gdGVuc29yJ3MgZGF0YSBtdXN0IGJlIHR5cGUgb2YgJHt0eXBlZEFycmF5Q29uc3RydWN0b3J9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL1xuICAgICAgICAvLyBPdmVycmlkZTogY29uc3RydWN0b3IoZGF0YSwgLi4uKVxuICAgICAgICAvL1xuICAgICAgICBtYXliZURpbXMgPSBhcmcxO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcwKSkge1xuICAgICAgICAgIC8vIG9ubHkgYm9vbGVhbltdIGFuZCBzdHJpbmdbXSBpcyBzdXBwb3J0ZWRcbiAgICAgICAgICBpZiAoYXJnMC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RlbnNvciB0eXBlIGNhbm5vdCBiZSBpbmZlcnJlZCBmcm9tIGFuIGVtcHR5IGFycmF5LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBmaXJzdEVsZW1lbnRUeXBlID0gdHlwZW9mIGFyZzBbMF07XG4gICAgICAgICAgaWYgKGZpcnN0RWxlbWVudFR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0eXBlID0gJ3N0cmluZyc7XG4gICAgICAgICAgICBkYXRhID0gYXJnMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0RWxlbWVudFR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdHlwZSA9ICdib29sJztcbiAgICAgICAgICAgIC8vICdhcmcwJyBpcyBvZiB0eXBlICdib29sZWFuW10nLiBVaW50OEFycmF5LmZyb20oYm9vbGVhbltdKSBhY3R1YWxseSB3b3JrcywgYnV0IHR5cGVzY3JpcHQgdGhpbmtzIHRoaXMgaXNcbiAgICAgICAgICAgIC8vIHdyb25nIHR5cGUuIFdlIHVzZSAnYXMgYW55JyB0byBtYWtlIGl0IGhhcHB5LlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGRhdGEgPSBVaW50OEFycmF5LmZyb20oYXJnMCBhcyBhbnlbXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZWxlbWVudCB0eXBlIG9mIGRhdGEgYXJyYXk6ICR7Zmlyc3RFbGVtZW50VHlwZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGdldCB0ZW5zb3IgdHlwZSBmcm9tIFR5cGVkQXJyYXlcbiAgICAgICAgICBjb25zdCBtYXBwZWRUeXBlID1cbiAgICAgICAgICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUC5nZXQoYXJnMC5jb25zdHJ1Y3RvciBhcyBTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzKTtcbiAgICAgICAgICBpZiAobWFwcGVkVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCB0eXBlIGZvciB0ZW5zb3IgZGF0YTogJHthcmcwLmNvbnN0cnVjdG9yfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHlwZSA9IG1hcHBlZFR5cGU7XG4gICAgICAgICAgZGF0YSA9IGFyZzAgYXMgU3VwcG9ydGVkVHlwZWRBcnJheTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB0eXBlIGFuZCBkYXRhIGlzIHByb2Nlc3NlZCwgbm93IHByb2Nlc3NpbmcgZGltc1xuICAgICAgaWYgKG1heWJlRGltcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGFzc3VtZSAxLUQgdGVuc29yIGlmIGRpbXMgb21pdHRlZFxuICAgICAgICBtYXliZURpbXMgPSBbZGF0YS5sZW5ndGhdO1xuICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShtYXliZURpbXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgdGVuc29yXFwncyBkaW1zIG11c3QgYmUgYSBudW1iZXIgYXJyYXknKTtcbiAgICAgIH1cbiAgICAgIGRpbXMgPSBtYXliZURpbXMgYXMgcmVhZG9ubHkgbnVtYmVyW107XG5cbiAgICAgIHRoaXMuY3B1RGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLmRhdGFMb2NhdGlvbiA9ICdjcHUnO1xuICAgIH1cblxuICAgIC8vIHBlcmZvcm0gY2hlY2sgb24gZGltc1xuICAgIGNvbnN0IHNpemUgPSBjYWxjdWxhdGVTaXplKGRpbXMpO1xuICAgIC8vIGlmIGRhdGEgaXMgb24gQ1BVLCBjaGVjayB3aGV0aGVyIGRhdGEgbGVuZ3RoIG1hdGNoZXMgdGVuc29yIHNpemVcbiAgICBpZiAodGhpcy5jcHVEYXRhICYmIHNpemUgIT09IHRoaXMuY3B1RGF0YS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGVuc29yJ3Mgc2l6ZSgke3NpemV9KSBkb2VzIG5vdCBtYXRjaCBkYXRhIGxlbmd0aCgke3RoaXMuY3B1RGF0YS5sZW5ndGh9KS5gKTtcbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuZGltcyA9IGRpbXM7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBmYWN0b3J5XG4gIHN0YXRpYyBhc3luYyBmcm9tSW1hZ2UoXG4gICAgICBpbWFnZTogSW1hZ2VEYXRhfEhUTUxJbWFnZUVsZW1lbnR8SW1hZ2VCaXRtYXB8c3RyaW5nLFxuICAgICAgb3B0aW9ucz86IFRlbnNvckZyb21JbWFnZURhdGFPcHRpb25zfFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zfFRlbnNvckZyb21JbWFnZUJpdG1hcE9wdGlvbnN8XG4gICAgICBUZW5zb3JGcm9tVXJsT3B0aW9ucyk6IFByb21pc2U8VGVuc29ySW50ZXJmYWNlPiB7XG4gICAgcmV0dXJuIHRlbnNvckZyb21JbWFnZShpbWFnZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbVRleHR1cmU8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5UZXh0dXJlRGF0YVR5cGVzPihcbiAgICAgIHRleHR1cmU6IFRlbnNvclRleHR1cmVUeXBlLCBvcHRpb25zOiBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnM8VD4pOiBUZW5zb3JJbnRlcmZhY2Uge1xuICAgIHJldHVybiB0ZW5zb3JGcm9tVGV4dHVyZSh0ZXh0dXJlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tR3B1QnVmZmVyPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyRGF0YVR5cGVzPihcbiAgICAgIGdwdUJ1ZmZlcjogVGVuc29yR3B1QnVmZmVyVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnM8VD4pOiBUZW5zb3JJbnRlcmZhY2Uge1xuICAgIHJldHVybiB0ZW5zb3JGcm9tR3B1QnVmZmVyKGdwdUJ1ZmZlciwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbVBpbm5lZEJ1ZmZlcjxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkNwdVBpbm5lZERhdGFUeXBlcz4oXG4gICAgICB0eXBlOiBULCBidWZmZXI6IFRlbnNvckludGVyZmFjZS5EYXRhVHlwZU1hcFtUXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yIHtcbiAgICByZXR1cm4gdGVuc29yRnJvbVBpbm5lZEJ1ZmZlcih0eXBlLCBidWZmZXIsIGRpbXMpO1xuICB9XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gY29udmVyc2lvbnNcbiAgdG9EYXRhVVJMKG9wdGlvbnM/OiBUZW5zb3JUb0RhdGFVcmxPcHRpb25zKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGVuc29yVG9EYXRhVVJMKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgdG9JbWFnZURhdGEob3B0aW9ucz86IFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9ucyk6IEltYWdlRGF0YSB7XG4gICAgcmV0dXJuIHRlbnNvclRvSW1hZ2VEYXRhKHRoaXMsIG9wdGlvbnMpO1xuICB9XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHB1YmxpYyBmaWVsZHNcbiAgcmVhZG9ubHkgZGltczogcmVhZG9ubHkgbnVtYmVyW107XG4gIHJlYWRvbmx5IHR5cGU6IFRlbnNvclR5cGU7XG4gIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gcHJpdmF0ZSBmaWVsZHNcblxuICAvKipcbiAgICogc3RvcmVzIHRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YS5cbiAgICovXG4gIHByaXZhdGUgZGF0YUxvY2F0aW9uOiBUZW5zb3JEYXRhTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgZGF0YSBvbiBDUFUsIGlmIGxvY2F0aW9uIGlzICdjcHUnIG9yICdjcHUtcGlubmVkJy4gb3RoZXJ3aXNlIGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSBjcHVEYXRhPzogVGVuc29yRGF0YVR5cGU7XG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgdW5kZXJseWluZyB0ZXh0dXJlIHdoZW4gbG9jYXRpb24gaXMgJ3RleHR1cmUnLiBvdGhlcndpc2UgZW1wdHkuXG4gICAqL1xuICBwcml2YXRlIGdwdVRleHR1cmVEYXRhPzogVGVuc29yVGV4dHVyZVR5cGU7XG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgdW5kZXJseWluZyBHUFUgYnVmZmVyIHdoZW4gbG9jYXRpb24gaXMgJ2dwdS1idWZmZXInLiBvdGhlcndpc2UgZW1wdHkuXG4gICAqL1xuICBwcml2YXRlIGdwdUJ1ZmZlckRhdGE/OiBUZW5zb3JHcHVCdWZmZXJUeXBlO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgYW4gb3B0aW9uYWwgZG93bmxvYWRlciBmdW5jdGlvbiB0byBkb3dubG9hZCBkYXRhIGZyb20gR1BVIHRvIENQVS5cbiAgICovXG4gIHByaXZhdGUgZG93bmxvYWRlcj8oKTogUHJvbWlzZTxUZW5zb3JEYXRhVHlwZT47XG5cbiAgLyoqXG4gICAqIGEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGRhdGEgaXMgYmVpbmcgZG93bmxvYWRlZCBmcm9tIEdQVSB0byBDUFUuXG4gICAqL1xuICBwcml2YXRlIGlzRG93bmxvYWRpbmc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgYW4gb3B0aW9uYWwgZGlzcG9zZXIgZnVuY3Rpb24gdG8gZGlzcG9zZSB0aGUgdW5kZXJseWluZyBkYXRhLlxuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3Nlcj8oKTogdm9pZDtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gcHJvcGVydGllc1xuICBnZXQgZGF0YSgpOiBUZW5zb3JEYXRhVHlwZSB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIGlmICghdGhpcy5jcHVEYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1RoZSBkYXRhIGlzIG5vdCBvbiBDUFUuIFVzZSBgZ2V0RGF0YSgpYCB0byBkb3dubG9hZCBHUFUgZGF0YSB0byBDUFUsICcgK1xuICAgICAgICAgICdvciB1c2UgYHRleHR1cmVgIG9yIGBncHVCdWZmZXJgIHByb3BlcnR5IHRvIGFjY2VzcyB0aGUgR1BVIGRhdGEgZGlyZWN0bHkuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNwdURhdGE7XG4gIH1cblxuICBnZXQgbG9jYXRpb24oKTogVGVuc29yRGF0YUxvY2F0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhTG9jYXRpb247XG4gIH1cblxuICBnZXQgdGV4dHVyZSgpOiBUZW5zb3JUZXh0dXJlVHlwZSB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIGlmICghdGhpcy5ncHVUZXh0dXJlRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZGF0YSBpcyBub3Qgc3RvcmVkIGFzIGEgV2ViR0wgdGV4dHVyZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ3B1VGV4dHVyZURhdGE7XG4gIH1cblxuICBnZXQgZ3B1QnVmZmVyKCk6IFRlbnNvckdwdUJ1ZmZlclR5cGUge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAoIXRoaXMuZ3B1QnVmZmVyRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZGF0YSBpcyBub3Qgc3RvcmVkIGFzIGEgV2ViR1BVIGJ1ZmZlci4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ3B1QnVmZmVyRGF0YTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBtZXRob2RzXG5cbiAgYXN5bmMgZ2V0RGF0YShyZWxlYXNlRGF0YT86IGJvb2xlYW4pOiBQcm9taXNlPFRlbnNvckRhdGFUeXBlPiB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIHN3aXRjaCAodGhpcy5kYXRhTG9jYXRpb24pIHtcbiAgICAgIGNhc2UgJ2NwdSc6XG4gICAgICBjYXNlICdjcHUtcGlubmVkJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgY2FzZSAnZ3B1LWJ1ZmZlcic6IHtcbiAgICAgICAgaWYgKCF0aGlzLmRvd25sb2FkZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjdXJyZW50IHRlbnNvciBpcyBub3QgY3JlYXRlZCB3aXRoIGEgc3BlY2lmaWVkIGRhdGEgZG93bmxvYWRlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0Rvd25sb2FkaW5nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VycmVudCB0ZW5zb3IgaXMgYmVpbmcgZG93bmxvYWRlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZG93bmxvYWRlcigpO1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLmRhdGFMb2NhdGlvbiA9ICdjcHUnO1xuICAgICAgICAgIHRoaXMuY3B1RGF0YSA9IGRhdGE7XG5cbiAgICAgICAgICBpZiAocmVsZWFzZURhdGEgJiYgdGhpcy5kaXNwb3Nlcikge1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlcigpO1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBnZXQgZGF0YSBmcm9tIGxvY2F0aW9uOiAke3RoaXMuZGF0YUxvY2F0aW9ufWApO1xuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNEb3dubG9hZGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VycmVudCB0ZW5zb3IgaXMgYmVpbmcgZG93bmxvYWRlZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kaXNwb3Nlcikge1xuICAgICAgdGhpcy5kaXNwb3NlcigpO1xuICAgICAgdGhpcy5kaXNwb3NlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5jcHVEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3B1VGV4dHVyZURhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ncHVCdWZmZXJEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZG93bmxvYWRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmRhdGFMb2NhdGlvbiA9ICdub25lJztcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHRlbnNvciB1dGlsaXRpZXNcbiAgcHJpdmF0ZSBlbnN1cmVWYWxpZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kYXRhTG9jYXRpb24gPT09ICdub25lJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdGVuc29yIGlzIGRpc3Bvc2VkLicpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2hhcGUoZGltczogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3JJbnRlcmZhY2Uge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAodGhpcy5kb3dubG9hZGVyIHx8IHRoaXMuZGlzcG9zZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlc2hhcGUgYSB0ZW5zb3IgdGhhdCBvd25zIEdQVSByZXNvdXJjZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbnNvclJlc2hhcGUodGhpcywgZGltcyk7XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge1RlbnNvckZhY3Rvcnl9IGZyb20gJy4vdGVuc29yLWZhY3RvcnkuanMnO1xuaW1wb3J0IHtUZW5zb3IgYXMgVGVuc29ySW1wbH0gZnJvbSAnLi90ZW5zb3ItaW1wbC5qcyc7XG5pbXBvcnQge1R5cGVkVGVuc29yVXRpbHN9IGZyb20gJy4vdGVuc29yLXV0aWxzLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAqL1xuXG4vKipcbiAqIHJlcHJlc2VudCBhIGJhc2ljIHRlbnNvciB3aXRoIHNwZWNpZmllZCBkaW1lbnNpb25zIGFuZCBkYXRhIHR5cGUuXG4gKi9cbmludGVyZmFjZSBUeXBlZFRlbnNvckJhc2U8VCBleHRlbmRzIFRlbnNvci5UeXBlPiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHRlbnNvci5cbiAgICovXG4gIHJlYWRvbmx5IGRpbXM6IHJlYWRvbmx5IG51bWJlcltdO1xuICAvKipcbiAgICogR2V0IHRoZSBkYXRhIHR5cGUgb2YgdGhlIHRlbnNvci5cbiAgICovXG4gIHJlYWRvbmx5IHR5cGU6IFQ7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGJ1ZmZlciBkYXRhIG9mIHRoZSB0ZW5zb3IuXG4gICAqXG4gICAqIElmIHRoZSBkYXRhIGlzIG5vdCBvbiBDUFUgKGVnLiBpdCdzIGluIHRoZSBmb3JtIG9mIFdlYkdMIHRleHR1cmUgb3IgV2ViR1BVIGJ1ZmZlciksIHRocm93IGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwW1RdO1xuICAvKipcbiAgICogR2V0IHRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YS5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2F0aW9uOiBUZW5zb3IuRGF0YUxvY2F0aW9uO1xuICAvKipcbiAgICogR2V0IHRoZSBXZWJHTCB0ZXh0dXJlIHRoYXQgaG9sZHMgdGhlIHRlbnNvciBkYXRhLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBub3Qgb24gR1BVIGFzIFdlYkdMIHRleHR1cmUsIHRocm93IGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgdGV4dHVyZTogVGVuc29yLlRleHR1cmVUeXBlO1xuICAvKipcbiAgICogR2V0IHRoZSBXZWJHUFUgYnVmZmVyIHRoYXQgaG9sZHMgdGhlIHRlbnNvciBkYXRhLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBub3Qgb24gR1BVIGFzIFdlYkdQVSBidWZmZXIsIHRocm93IGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgZ3B1QnVmZmVyOiBUZW5zb3IuR3B1QnVmZmVyVHlwZTtcblxuICAvKipcbiAgICogR2V0IHRoZSBidWZmZXIgZGF0YSBvZiB0aGUgdGVuc29yLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBvbiBDUFUsIHJldHVybnMgdGhlIGRhdGEgaW1tZWRpYXRlbHkuXG4gICAqIElmIHRoZSBkYXRhIGlzIG9uIEdQVSwgZG93bmxvYWRzIHRoZSBkYXRhIGFuZCByZXR1cm5zIHRoZSBwcm9taXNlLlxuICAgKlxuICAgKiBAcGFyYW0gcmVsZWFzZURhdGEgLSB3aGV0aGVyIHJlbGVhc2UgdGhlIGRhdGEgb24gR1BVLiBJZ25vcmUgaWYgZGF0YSBpcyBhbHJlYWR5IG9uIENQVS5cbiAgICovXG4gIGdldERhdGEocmVsZWFzZURhdGE/OiBib29sZWFuKTogUHJvbWlzZTxUZW5zb3IuRGF0YVR5cGVNYXBbVF0+O1xuXG4gIC8qKlxuICAgKiBEaXNwb3NlIHRoZSB0ZW5zb3IgZGF0YS5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgb24gQ1BVLCByZW1vdmUgaXRzIGludGVybmFsIHJlZmVyZW5jZSB0byB0aGUgdW5kZXJseWluZyBkYXRhLlxuICAgKiBJZiB0aGUgZGF0YSBpcyBvbiBHUFUsIHJlbGVhc2UgdGhlIGRhdGEgb24gR1BVLlxuICAgKlxuICAgKiBBZnRlciBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIHRoZSB0ZW5zb3IgaXMgY29uc2lkZXJlZCBubyBsb25nZXIgdmFsaWQuIEl0cyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAnbm9uZScuXG4gICAqL1xuICBkaXNwb3NlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBUZW5zb3Ige1xuICBpbnRlcmZhY2UgRGF0YVR5cGVNYXAge1xuICAgIGZsb2F0MzI6IEZsb2F0MzJBcnJheTtcbiAgICB1aW50ODogVWludDhBcnJheTtcbiAgICBpbnQ4OiBJbnQ4QXJyYXk7XG4gICAgdWludDE2OiBVaW50MTZBcnJheTtcbiAgICBpbnQxNjogSW50MTZBcnJheTtcbiAgICBpbnQzMjogSW50MzJBcnJheTtcbiAgICBpbnQ2NDogQmlnSW50NjRBcnJheTtcbiAgICBzdHJpbmc6IHN0cmluZ1tdO1xuICAgIGJvb2w6IFVpbnQ4QXJyYXk7XG4gICAgZmxvYXQxNjogVWludDE2QXJyYXk7ICAvLyBLZWVwIHVzaW5nIFVpbnQxNkFycmF5IHVudGlsIHdlIGhhdmUgYSBjb25jcmV0ZSBzb2x1dGlvbiBmb3IgZmxvYXQgMTYuXG4gICAgZmxvYXQ2NDogRmxvYXQ2NEFycmF5O1xuICAgIHVpbnQzMjogVWludDMyQXJyYXk7XG4gICAgdWludDY0OiBCaWdVaW50NjRBcnJheTtcbiAgICAvLyBjb21wbGV4NjQ6IG5ldmVyO1xuICAgIC8vIGNvbXBsZXgxMjg6IG5ldmVyO1xuICAgIC8vIGJmbG9hdDE2OiBuZXZlcjtcbiAgfVxuXG4gIGludGVyZmFjZSBFbGVtZW50VHlwZU1hcCB7XG4gICAgZmxvYXQzMjogbnVtYmVyO1xuICAgIHVpbnQ4OiBudW1iZXI7XG4gICAgaW50ODogbnVtYmVyO1xuICAgIHVpbnQxNjogbnVtYmVyO1xuICAgIGludDE2OiBudW1iZXI7XG4gICAgaW50MzI6IG51bWJlcjtcbiAgICBpbnQ2NDogYmlnaW50O1xuICAgIHN0cmluZzogc3RyaW5nO1xuICAgIGJvb2w6IGJvb2xlYW47XG4gICAgZmxvYXQxNjogbnVtYmVyOyAgLy8gS2VlcCB1c2luZyBVaW50MTZBcnJheSB1bnRpbCB3ZSBoYXZlIGEgY29uY3JldGUgc29sdXRpb24gZm9yIGZsb2F0IDE2LlxuICAgIGZsb2F0NjQ6IG51bWJlcjtcbiAgICB1aW50MzI6IG51bWJlcjtcbiAgICB1aW50NjQ6IGJpZ2ludDtcbiAgICAvLyBjb21wbGV4NjQ6IG5ldmVyO1xuICAgIC8vIGNvbXBsZXgxMjg6IG5ldmVyO1xuICAgIC8vIGJmbG9hdDE2OiBuZXZlcjtcbiAgfVxuXG4gIHR5cGUgRGF0YVR5cGUgPSBEYXRhVHlwZU1hcFtUeXBlXTtcbiAgdHlwZSBFbGVtZW50VHlwZSA9IEVsZW1lbnRUeXBlTWFwW1R5cGVdO1xuXG4gIC8qKlxuICAgKiBzdXBwb3J0ZWQgZGF0YSB0eXBlcyBmb3IgY29uc3RydWN0aW5nIGEgdGVuc29yIGZyb20gYSBwaW5uZWQgQ1BVIGJ1ZmZlclxuICAgKi9cbiAgZXhwb3J0IHR5cGUgQ3B1UGlubmVkRGF0YVR5cGVzID0gRXhjbHVkZTxUZW5zb3IuVHlwZSwgJ3N0cmluZyc+O1xuXG4gIC8qKlxuICAgKiB0eXBlIGFsaWFzIGZvciBXZWJHTCB0ZXh0dXJlXG4gICAqL1xuICBleHBvcnQgdHlwZSBUZXh0dXJlVHlwZSA9IFdlYkdMVGV4dHVyZTtcblxuICAvKipcbiAgICogc3VwcG9ydGVkIGRhdGEgdHlwZXMgZm9yIGNvbnN0cnVjdGluZyBhIHRlbnNvciBmcm9tIGEgV2ViR0wgdGV4dHVyZVxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVGV4dHVyZURhdGFUeXBlcyA9ICdmbG9hdDMyJztcblxuICAvKipcbiAgICogdHlwZSBhbGlhcyBmb3IgV2ViR1BVIGJ1ZmZlclxuICAgKlxuICAgKiBUaGUgcmVhc29uIHdoeSB3ZSBkb24ndCB1c2UgdHlwZSBcIkdQVUJ1ZmZlclwiIGRlZmluZWQgaW4gd2ViZ3B1LmQudHMgZnJvbSBAd2ViZ3B1L3R5cGVzIGlzIGJlY2F1c2UgXCJAd2ViZ3B1L3R5cGVzXCJcbiAgICogcmVxdWlyZXMgXCJAdHlwZXMvZG9tLXdlYmNvZGVjc1wiIGFzIHBlZXIgZGVwZW5kZW5jeSB3aGVuIHVzaW5nIFR5cGVTY3JpcHQgPCB2NS4xIGFuZCBpdHMgdmVyc2lvbiBuZWVkIHRvIGJlIGNob3NlblxuICAgKiBjYXJlZnVsbHkgYWNjb3JkaW5nIHRvIHRoZSBUeXBlU2NyaXB0IHZlcnNpb24gYmVpbmcgdXNlZC4gVGhpcyBtZWFucyBzbyBmYXIgdGhlcmUgaXMgbm90IGEgd2F5IHRvIGtlZXAgZXZlcnlcbiAgICogVHlwZVNjcmlwdCB2ZXJzaW9uIGhhcHB5LiBJdCB0dXJucyBvdXQgdGhhdCB3ZSB3aWxsIGVhc2lseSBicm9rZSB1c2VycyBvbiBzb21lIFR5cGVTY3JpcHQgdmVyc2lvbi5cbiAgICpcbiAgICogZm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dwdXdlYi90eXBlcy9pc3N1ZXMvMTI3XG4gICAqL1xuICBleHBvcnQgdHlwZSBHcHVCdWZmZXJUeXBlID0ge3NpemU6IG51bWJlcjsgbWFwU3RhdGU6ICd1bm1hcHBlZCcgfCAncGVuZGluZycgfCAnbWFwcGVkJ307XG5cbiAgLyoqXG4gICAqIHN1cHBvcnRlZCBkYXRhIHR5cGVzIGZvciBjb25zdHJ1Y3RpbmcgYSB0ZW5zb3IgZnJvbSBhIFdlYkdQVSBidWZmZXJcbiAgICovXG4gIGV4cG9ydCB0eXBlIEdwdUJ1ZmZlckRhdGFUeXBlcyA9ICdmbG9hdDMyJ3wnZmxvYXQxNid8J2ludDMyJ3wnaW50NjQnfCd1aW50MzInfCdib29sJztcblxuICAvKipcbiAgICogcmVwcmVzZW50IHdoZXJlIHRoZSB0ZW5zb3IgZGF0YSBpcyBzdG9yZWRcbiAgICovXG4gIGV4cG9ydCB0eXBlIERhdGFMb2NhdGlvbiA9ICdub25lJ3wnY3B1J3wnY3B1LXBpbm5lZCd8J3RleHR1cmUnfCdncHUtYnVmZmVyJztcblxuICAvKipcbiAgICogcmVwcmVzZW50IHRoZSBkYXRhIHR5cGUgb2YgYSB0ZW5zb3JcbiAgICovXG4gIGV4cG9ydCB0eXBlIFR5cGUgPSBrZXlvZiBEYXRhVHlwZU1hcDtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgbXVsdGktZGltZW5zaW9uYWwgYXJyYXlzIHRvIGZlZWQgdG8gb3IgZmV0Y2ggZnJvbSBtb2RlbCBpbmZlcmVuY2luZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeXBlZFRlbnNvcjxUIGV4dGVuZHMgVGVuc29yLlR5cGU+IGV4dGVuZHMgVHlwZWRUZW5zb3JCYXNlPFQ+LCBUeXBlZFRlbnNvclV0aWxzPFQ+IHt9XG4vKipcbiAqIFJlcHJlc2VudCBtdWx0aS1kaW1lbnNpb25hbCBhcnJheXMgdG8gZmVlZCB0byBvciBmZXRjaCBmcm9tIG1vZGVsIGluZmVyZW5jaW5nLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlbnNvciBleHRlbmRzIFR5cGVkVGVuc29yQmFzZTxUZW5zb3IuVHlwZT4sIFR5cGVkVGVuc29yVXRpbHM8VGVuc29yLlR5cGU+IHt9XG5cbi8qKlxuICogdHlwZSBUZW5zb3JDb25zdHJ1Y3RvciBkZWZpbmVzIHRoZSBjb25zdHJ1Y3RvcnMgb2YgJ1RlbnNvcicgdG8gY3JlYXRlIENQVSB0ZW5zb3IgaW5zdGFuY2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlbnNvckNvbnN0cnVjdG9yIHtcbiAgLy8gI3JlZ2lvbiBDUFUgdGVuc29yIC0gc3BlY2lmeSBlbGVtZW50IHR5cGVcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBzdHJpbmcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KHR5cGU6ICdzdHJpbmcnLCBkYXRhOiBUZW5zb3IuRGF0YVR5cGVNYXBbJ3N0cmluZyddfHJlYWRvbmx5IHN0cmluZ1tdLFxuICAgICAgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3N0cmluZyc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgYm9vbCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcodHlwZTogJ2Jvb2wnLCBkYXRhOiBUZW5zb3IuRGF0YVR5cGVNYXBbJ2Jvb2wnXXxyZWFkb25seSBib29sZWFuW10sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdib29sJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyA2NC1iaXQgaW50ZWdlciB0eXBlZCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXc8VCBleHRlbmRzICd1aW50NjQnfCdpbnQ2NCc+KFxuICAgICAgdHlwZTogVCwgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwW1RdfHJlYWRvbmx5IGJpZ2ludFtdfHJlYWRvbmx5IG51bWJlcltdLFxuICAgICAgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8VD47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBudW1lcmljIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldzxUIGV4dGVuZHMgRXhjbHVkZTxUZW5zb3IuVHlwZSwgJ3N0cmluZyd8J2Jvb2wnfCd1aW50NjQnfCdpbnQ2NCc+PihcbiAgICAgIHR5cGU6IFQsIGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFtUXXxyZWFkb25seSBudW1iZXJbXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8VD47XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIENQVSB0ZW5zb3IgLSBpbmZlciBlbGVtZW50IHR5cGVzXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBmbG9hdDMyIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEZsb2F0MzJBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2Zsb2F0MzInPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGludDggdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogSW50OEFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnaW50OCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdWludDggdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogVWludDhBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3VpbnQ4Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB1aW50MTYgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogVWludDE2QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCd1aW50MTYnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGludDE2IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEludDE2QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdpbnQxNic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgaW50MzIgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogSW50MzJBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2ludDMyJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBpbnQ2NCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBCaWdJbnQ2NEFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnaW50NjQnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHN0cmluZyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiByZWFkb25seSBzdHJpbmdbXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3N0cmluZyc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgYm9vbCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiByZWFkb25seSBib29sZWFuW10sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdib29sJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBmbG9hdDY0IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEZsb2F0NjRBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2Zsb2F0NjQnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHVpbnQzMiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBVaW50MzJBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3VpbnQzMic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdWludDY0IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEJpZ1VpbnQ2NEFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwndWludDY0Jz47XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gQ1BVIHRlbnNvciAtIGZhbGwgYmFjayB0byBub24tZ2VuZXJpYyB0ZW5zb3IgdHlwZSBkZWNsYXJhdGlvblxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KHR5cGU6IFRlbnNvci5UeXBlLCBkYXRhOiBUZW5zb3IuRGF0YVR5cGV8cmVhZG9ubHkgbnVtYmVyW118cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgYmlnaW50W118cmVhZG9ubHkgYm9vbGVhbltdLFxuICAgICAgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogVGVuc29yLkRhdGFUeXBlLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3I7XG4gIC8vICNlbmRyZWdpb25cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IFRlbnNvciA9IFRlbnNvckltcGwgYXMgKFRlbnNvckNvbnN0cnVjdG9yICYgVGVuc29yRmFjdG9yeSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7cmVzb2x2ZUJhY2tlbmR9IGZyb20gJy4vYmFja2VuZC1pbXBsLmpzJztcbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXJ9IGZyb20gJy4vYmFja2VuZC5qcyc7XG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24gYXMgSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZX0gZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZX0gZnJvbSAnLi9vbm54LXZhbHVlLmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbnR5cGUgU2Vzc2lvbk9wdGlvbnMgPSBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLlNlc3Npb25PcHRpb25zO1xudHlwZSBSdW5PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5SdW5PcHRpb25zO1xudHlwZSBGZWVkc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLkZlZWRzVHlwZTtcbnR5cGUgRmV0Y2hlc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLkZldGNoZXNUeXBlO1xudHlwZSBSZXR1cm5UeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5SZXR1cm5UeXBlO1xuXG5leHBvcnQgY2xhc3MgSW5mZXJlbmNlU2Vzc2lvbiBpbXBsZW1lbnRzIEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2Uge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKGhhbmRsZXI6IEluZmVyZW5jZVNlc3Npb25IYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgfVxuICBydW4oZmVlZHM6IEZlZWRzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW4oZmVlZHM6IEZlZWRzVHlwZSwgZmV0Y2hlczogRmV0Y2hlc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIGFyZzE/OiBGZXRjaGVzVHlwZXxSdW5PcHRpb25zLCBhcmcyPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IGZldGNoZXM6IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfG51bGx9ID0ge307XG4gICAgbGV0IG9wdGlvbnM6IFJ1bk9wdGlvbnMgPSB7fTtcbiAgICAvLyBjaGVjayBpbnB1dHNcbiAgICBpZiAodHlwZW9mIGZlZWRzICE9PSAnb2JqZWN0JyB8fCBmZWVkcyA9PT0gbnVsbCB8fCBmZWVkcyBpbnN0YW5jZW9mIFRlbnNvciB8fCBBcnJheS5pc0FycmF5KGZlZWRzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnXFwnZmVlZHNcXCcgbXVzdCBiZSBhbiBvYmplY3QgdGhhdCB1c2UgaW5wdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLicpO1xuICAgIH1cblxuICAgIGxldCBpc0ZldGNoZXNFbXB0eSA9IHRydWU7XG4gICAgLy8gZGV0ZXJtaW5lIHdoaWNoIG92ZXJyaWRlIGlzIGJlaW5nIHVzZWRcbiAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoYXJnMSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzFdOiBjYW5ub3QgYmUgbnVsbC4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmcxIGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2ZldGNoZXNcXCcgY2Fubm90IGJlIGEgVGVuc29yJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZzEpKSB7XG4gICAgICAgIGlmIChhcmcxLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2ZldGNoZXNcXCcgY2Fubm90IGJlIGFuIGVtcHR5IGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlzRmV0Y2hlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIC8vIG91dHB1dCBuYW1lc1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgYXJnMSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2ZldGNoZXNcXCcgbXVzdCBiZSBhIHN0cmluZyBhcnJheSBvciBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLm91dHB1dE5hbWVzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJ2ZldGNoZXMnIGNvbnRhaW5zIGludmFsaWQgb3V0cHV0IG5hbWU6ICR7bmFtZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVjaWRlIHdoZXRoZXIgYXJnMSBpcyBmZXRjaGVzIG9yIG9wdGlvbnNcbiAgICAgICAgLy8gaWYgYW55IG91dHB1dCBuYW1lIGlzIHByZXNlbnQgYW5kIGl0cyB2YWx1ZSBpcyB2YWxpZCBPbm54VmFsdWUsIHdlIGNvbnNpZGVyIGl0IGZldGNoZXNcbiAgICAgICAgbGV0IGlzRmV0Y2hlcyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBhcmcxS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFyZzEpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5vdXRwdXROYW1lcykge1xuICAgICAgICAgIGlmIChhcmcxS2V5cy5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgdiA9IChhcmcxIGFzIEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2UuTnVsbGFibGVPbm54VmFsdWVNYXBUeXBlKVtuYW1lXTtcbiAgICAgICAgICAgIGlmICh2ID09PSBudWxsIHx8IHYgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgICAgICAgaXNGZXRjaGVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaXNGZXRjaGVzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZmV0Y2hlc1tuYW1lXSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRmV0Y2hlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gJ29iamVjdCcgJiYgYXJnMiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IGFyZzI7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMgPSBhcmcxIGFzIFJ1bk9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBhcmd1bWVudFsxXTogbXVzdCBiZSBcXCdmZXRjaGVzXFwnIG9yIFxcJ29wdGlvbnNcXCcuJyk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgYWxsIGlucHV0cyBhcmUgaW4gZmVlZFxuICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLmlucHV0TmFtZXMpIHtcbiAgICAgIGlmICh0eXBlb2YgZmVlZHNbbmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgJyR7bmFtZX0nIGlzIG1pc3NpbmcgaW4gJ2ZlZWRzJy5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiBubyBmZXRjaGVzIGlzIHNwZWNpZmllZCwgd2UgdXNlIHRoZSBmdWxsIG91dHB1dCBuYW1lcyBsaXN0XG4gICAgaWYgKGlzRmV0Y2hlc0VtcHR5KSB7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5vdXRwdXROYW1lcykge1xuICAgICAgICBmZXRjaGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmZWVkcywgZmV0Y2hlcyBhbmQgb3B0aW9ucyBhcmUgcHJlcGFyZWRcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmhhbmRsZXIucnVuKGZlZWRzLCBmZXRjaGVzLCBvcHRpb25zKTtcbiAgICBjb25zdCByZXR1cm5WYWx1ZToge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVzdWx0cykge1xuICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdHMsIGtleSkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0c1trZXldO1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZVtrZXldID0gbmV3IFRlbnNvcihyZXN1bHQudHlwZSwgcmVzdWx0LmRhdGEsIHJlc3VsdC5kaW1zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICBhc3luYyByZWxlYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT47XG4gIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlckxpa2UsIG9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT47XG4gIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlckxpa2UsIGJ5dGVPZmZzZXQ6IG51bWJlciwgYnl0ZUxlbmd0aD86IG51bWJlciwgb3B0aW9ucz86IFNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT47XG4gIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBVaW50OEFycmF5LCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgYXN5bmMgY3JlYXRlKFxuICAgICAgYXJnMDogc3RyaW5nfEFycmF5QnVmZmVyTGlrZXxVaW50OEFycmF5LCBhcmcxPzogU2Vzc2lvbk9wdGlvbnN8bnVtYmVyLCBhcmcyPzogbnVtYmVyLFxuICAgICAgYXJnMz86IFNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlPiB7XG4gICAgLy8gZWl0aGVyIGxvYWQgZnJvbSBhIGZpbGUgb3IgYnVmZmVyXG4gICAgbGV0IGZpbGVQYXRoT3JVaW50OEFycmF5OiBzdHJpbmd8VWludDhBcnJheTtcbiAgICBsZXQgb3B0aW9uczogU2Vzc2lvbk9wdGlvbnMgPSB7fTtcblxuICAgIGlmICh0eXBlb2YgYXJnMCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGZpbGVQYXRoT3JVaW50OEFycmF5ID0gYXJnMDtcbiAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcgJiYgYXJnMSAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0gYXJnMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmcwIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgZmlsZVBhdGhPclVpbnQ4QXJyYXkgPSBhcmcwO1xuICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0JyAmJiBhcmcxICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSBhcmcxO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICBhcmcwIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHxcbiAgICAgICAgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgYXJnMCBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyKSkge1xuICAgICAgY29uc3QgYnVmZmVyID0gYXJnMDtcbiAgICAgIGxldCBieXRlT2Zmc2V0ID0gMDtcbiAgICAgIGxldCBieXRlTGVuZ3RoID0gYXJnMC5ieXRlTGVuZ3RoO1xuICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0JyAmJiBhcmcxICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSBhcmcxO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgYnl0ZU9mZnNldCA9IGFyZzE7XG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnYnl0ZU9mZnNldFxcJyBtdXN0IGJlIGFuIGludGVnZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJ2J5dGVPZmZzZXQnIGlzIG91dCBvZiByYW5nZSBbMCwgJHtidWZmZXIuYnl0ZUxlbmd0aH0pLmApO1xuICAgICAgICB9XG4gICAgICAgIGJ5dGVMZW5ndGggPSBhcmcwLmJ5dGVMZW5ndGggLSBieXRlT2Zmc2V0O1xuICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGFyZzI7XG4gICAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihieXRlTGVuZ3RoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2J5dGVMZW5ndGhcXCcgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8PSAwIHx8IGJ5dGVPZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGAnYnl0ZUxlbmd0aCcgaXMgb3V0IG9mIHJhbmdlICgwLCAke2J1ZmZlci5ieXRlTGVuZ3RoIC0gYnl0ZU9mZnNldH1dLmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGFyZzMgPT09ICdvYmplY3QnICYmIGFyZzMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmczO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdieXRlTGVuZ3RoXFwnIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICB9XG4gICAgICBmaWxlUGF0aE9yVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMF06IG11c3QgYmUgXFwncGF0aFxcJyBvciBcXCdidWZmZXJcXCcuJyk7XG4gICAgfVxuXG4gICAgLy8gZ2V0IGJhY2tlbmQgaGludHNcbiAgICBjb25zdCBlcHMgPSBvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycyB8fCBbXTtcbiAgICBjb25zdCBiYWNrZW5kSGludHMgPSBlcHMubWFwKGkgPT4gdHlwZW9mIGkgPT09ICdzdHJpbmcnID8gaSA6IGkubmFtZSk7XG4gICAgY29uc3QgYmFja2VuZCA9IGF3YWl0IHJlc29sdmVCYWNrZW5kKGJhY2tlbmRIaW50cyk7XG4gICAgY29uc3QgaGFuZGxlciA9IGF3YWl0IGJhY2tlbmQuY3JlYXRlSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIoZmlsZVBhdGhPclVpbnQ4QXJyYXksIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgSW5mZXJlbmNlU2Vzc2lvbihoYW5kbGVyKTtcbiAgfVxuXG4gIHN0YXJ0UHJvZmlsaW5nKCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlci5zdGFydFByb2ZpbGluZygpO1xuICB9XG4gIGVuZFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZXIuZW5kUHJvZmlsaW5nKCk7XG4gIH1cblxuICBnZXQgaW5wdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5pbnB1dE5hbWVzO1xuICB9XG4gIGdldCBvdXRwdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5vdXRwdXROYW1lcztcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlcjogSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI7XG59XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbiBhcyBJbmZlcmVuY2VTZXNzaW9uSW1wbH0gZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi1pbXBsLmpzJztcbmltcG9ydCB7T25ueFZhbHVlLCBPbm54VmFsdWVEYXRhTG9jYXRpb259IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgKi9cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEluZmVyZW5jZVNlc3Npb24ge1xuICAvLyAjcmVnaW9uIGlucHV0L291dHB1dCB0eXBlc1xuXG4gIHR5cGUgT25ueFZhbHVlTWFwVHlwZSA9IHtyZWFkb25seSBbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfTtcbiAgdHlwZSBOdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGUgPSB7cmVhZG9ubHkgW25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZSB8IG51bGx9O1xuXG4gIC8qKlxuICAgKiBBIGZlZWRzIChtb2RlbCBpbnB1dHMpIGlzIGFuIG9iamVjdCB0aGF0IHVzZXMgaW5wdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgKi9cbiAgdHlwZSBGZWVkc1R5cGUgPSBPbm54VmFsdWVNYXBUeXBlO1xuXG4gIC8qKlxuICAgKiBBIGZldGNoZXMgKG1vZGVsIG91dHB1dHMpIGNvdWxkIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICAgKlxuICAgKiAtIE9taXR0ZWQuIFVzZSBtb2RlbCdzIG91dHB1dCBuYW1lcyBkZWZpbml0aW9uLlxuICAgKiAtIEFuIGFycmF5IG9mIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBvdXRwdXQgbmFtZXMuXG4gICAqIC0gQW4gb2JqZWN0IHRoYXQgdXNlIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgb3IgbnVsbCBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBkaWZmZXJlbnQgZnJvbSBpbnB1dCBhcmd1bWVudCwgaW4gb3V0cHV0LCBPbm54VmFsdWUgaXMgb3B0aW9uYWwuIElmIGFuIE9ubnhWYWx1ZSBpcyBwcmVzZW50IGl0IHdpbGwgYmVcbiAgICogdXNlZCBhcyBhIHByZS1hbGxvY2F0ZWQgdmFsdWUgYnkgdGhlIGluZmVyZW5jZSBlbmdpbmU7IGlmIG9taXR0ZWQsIGluZmVyZW5jZSBlbmdpbmUgd2lsbCBhbGxvY2F0ZSBidWZmZXJcbiAgICogaW50ZXJuYWxseS5cbiAgICovXG4gIHR5cGUgRmV0Y2hlc1R5cGUgPSByZWFkb25seSBzdHJpbmdbXXxOdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGU7XG5cbiAgLyoqXG4gICAqIEEgaW5mZXJlbmNpbmcgcmV0dXJuIHR5cGUgaXMgYW4gb2JqZWN0IHRoYXQgdXNlcyBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgKi9cbiAgdHlwZSBSZXR1cm5UeXBlID0gT25ueFZhbHVlTWFwVHlwZTtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBzZXNzaW9uIG9wdGlvbnNcblxuICAvKipcbiAgICogQSBzZXQgb2YgY29uZmlndXJhdGlvbnMgZm9yIHNlc3Npb24gYmVoYXZpb3IuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFNlc3Npb25PcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBleGVjdXRpb24gcHJvdmlkZXIgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEFuIGV4ZWN1dGlvbiBwcm92aWRlciBvcHRpb24gY2FuIGJlIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIG5hbWUgb2YgdGhlIGV4ZWN1dGlvbiBwcm92aWRlcixcbiAgICAgKiBvciBhbiBvYmplY3Qgb2YgY29ycmVzcG9uZGluZyB0eXBlLlxuICAgICAqL1xuICAgIGV4ZWN1dGlvblByb3ZpZGVycz86IHJlYWRvbmx5IEV4ZWN1dGlvblByb3ZpZGVyQ29uZmlnW107XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50cmEgT1AgdGhyZWFkcyBudW1iZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKS5cbiAgICAgKi9cbiAgICBpbnRyYU9wTnVtVGhyZWFkcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlciBPUCB0aHJlYWRzIG51bWJlci5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpLlxuICAgICAqL1xuICAgIGludGVyT3BOdW1UaHJlYWRzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGZyZWVEaW1lbnNpb25PdmVycmlkZXM/OiB7cmVhZG9ubHkgW2RpbWVuc2lvbk5hbWU6IHN0cmluZ106IG51bWJlcn07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW1pemF0aW9uIGxldmVsLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGdyYXBoT3B0aW1pemF0aW9uTGV2ZWw/OiAnZGlzYWJsZWQnfCdiYXNpYyd8J2V4dGVuZGVkJ3wnYWxsJztcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZW5hYmxlIENQVSBtZW1vcnkgYXJlbmEuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgZW5hYmxlQ3B1TWVtQXJlbmE/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBlbmFibGUgbWVtb3J5IHBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgZW5hYmxlTWVtUGF0dGVybj86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRpb24gbW9kZS5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBleGVjdXRpb25Nb2RlPzogJ3NlcXVlbnRpYWwnfCdwYXJhbGxlbCc7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpbWl6ZWQgbW9kZWwgZmlsZSBwYXRoLlxuICAgICAqXG4gICAgICogSWYgdGhpcyBzZXR0aW5nIGlzIHNwZWNpZmllZCwgdGhlIG9wdGltaXplZCBtb2RlbCB3aWxsIGJlIGR1bXBlZC4gSW4gYnJvd3NlciwgYSBibG9iIHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIHdpdGggYSBwb3AtdXAgd2luZG93LlxuICAgICAqL1xuICAgIG9wdGltaXplZE1vZGVsRmlsZVBhdGg/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBXZXRoZXIgZW5hYmxlIHByb2ZpbGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhIHBsYWNlaG9sZGVyIGZvciBhIGZ1dHVyZSB1c2UuXG4gICAgICovXG4gICAgZW5hYmxlUHJvZmlsaW5nPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEZpbGUgcHJlZml4IGZvciBwcm9maWxpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSBmdXR1cmUgdXNlLlxuICAgICAqL1xuICAgIHByb2ZpbGVGaWxlUHJlZml4Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTG9nIElELlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGxvZ0lkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTG9nIHNldmVyaXR5IGxldmVsLiBTZWVcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L29ubnhydW50aW1lL2Jsb2IvbWFpbi9pbmNsdWRlL29ubnhydW50aW1lL2NvcmUvY29tbW9uL2xvZ2dpbmcvc2V2ZXJpdHkuaFxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGxvZ1NldmVyaXR5TGV2ZWw/OiAwfDF8MnwzfDQ7XG5cbiAgICAvKipcbiAgICAgKiBMb2cgdmVyYm9zaXR5IGxldmVsLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqL1xuICAgIGxvZ1ZlcmJvc2l0eUxldmVsPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBzdHJpbmcgYXMgYSBwcmVmZXJyZWQgZGF0YSBsb2NhdGlvbiBmb3IgYWxsIG91dHB1dHMsIG9yIGFuIG9iamVjdCB0aGF0IHVzZSBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgYVxuICAgICAqIHByZWZlcnJlZCBkYXRhIGxvY2F0aW9uIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIFdlYiBmb3IgV2ViR0wgYW5kIFdlYkdQVSBFUC5cbiAgICAgKi9cbiAgICBwcmVmZXJyZWRPdXRwdXRMb2NhdGlvbj86IE9ubnhWYWx1ZURhdGFMb2NhdGlvbnx7cmVhZG9ubHkgW291dHB1dE5hbWU6IHN0cmluZ106IE9ubnhWYWx1ZURhdGFMb2NhdGlvbn07XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZSBjb25maWd1cmF0aW9ucyBmb3IgYSBzZXNzaW9uLiBTZWVcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L29ubnhydW50aW1lL2Jsb2IvbWFpbi9pbmNsdWRlL29ubnhydW50aW1lL2NvcmUvc2Vzc2lvbi9cbiAgICAgKiBvbm54cnVudGltZV9zZXNzaW9uX29wdGlvbnNfY29uZmlnX2tleXMuaFxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIGV4dHJhOiB7XG4gICAgICogICBzZXNzaW9uOiB7XG4gICAgICogICAgIHNldF9kZW5vcm1hbF9hc196ZXJvOiBcIjFcIixcbiAgICAgKiAgICAgZGlzYWJsZV9wcmVwYWNraW5nOiBcIjFcIlxuICAgICAqICAgfSxcbiAgICAgKiAgIG9wdGltaXphdGlvbjoge1xuICAgICAqICAgICBlbmFibGVfZ2VsdV9hcHByb3hpbWF0aW9uOiBcIjFcIlxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBleHRyYT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICB9XG5cbiAgLy8gI3JlZ2lvbiBleGVjdXRpb24gcHJvdmlkZXJzXG5cbiAgLy8gQ3VycmVudGx5LCB3ZSBoYXZlIHRoZSBmb2xsb3dpbmcgYmFja2VuZHMgdG8gc3VwcG9ydCBleGVjdXRpb24gcHJvdmlkZXJzOlxuICAvLyBCYWNrZW5kIE5vZGUuanMgYmluZGluZzogc3VwcG9ydHMgJ2NwdScgYW5kICdjdWRhJy5cbiAgLy8gQmFja2VuZCBXZWJBc3NlbWJseTogc3VwcG9ydHMgJ2NwdScsICd3YXNtJywgJ3hubnBhY2snIGFuZCAnd2Vibm4nLlxuICAvLyBCYWNrZW5kIE9OTlguanM6IHN1cHBvcnRzICd3ZWJnbCcuXG4gIC8vIEJhY2tlbmQgUmVhY3QgTmF0aXZlOiBzdXBwb3J0cyAnY3B1JywgJ3hubnBhY2snLCAnY29yZW1sJyAoaU9TKSwgJ25uYXBpJyAoQW5kcm9pZCkuXG4gIGludGVyZmFjZSBFeGVjdXRpb25Qcm92aWRlck9wdGlvbk1hcCB7XG4gICAgY3B1OiBDcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBjb3JlbWw6IENvcmVNbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIGN1ZGE6IEN1ZGFFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBkbWw6IERtbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHRlbnNvcnJ0OiBUZW5zb3JSdEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdhc206IFdlYkFzc2VtYmx5RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgd2ViZ2w6IFdlYkdMRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgeG5ucGFjazogWG5ucGFja0V4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdlYmdwdTogV2ViR3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgd2Vibm46IFdlYk5ORXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgbm5hcGk6IE5uYXBpRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gIH1cblxuICB0eXBlIEV4ZWN1dGlvblByb3ZpZGVyTmFtZSA9IGtleW9mIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uTWFwO1xuICB0eXBlIEV4ZWN1dGlvblByb3ZpZGVyQ29uZmlnID1cbiAgICAgIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uTWFwW0V4ZWN1dGlvblByb3ZpZGVyTmFtZV18RXhlY3V0aW9uUHJvdmlkZXJPcHRpb258RXhlY3V0aW9uUHJvdmlkZXJOYW1lfHN0cmluZztcblxuICBleHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnY3B1JztcbiAgICB1c2VBcmVuYT86IGJvb2xlYW47XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDdWRhRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2N1ZGEnO1xuICAgIGRldmljZUlkPzogbnVtYmVyO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29yZU1sRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2NvcmVtbCc7XG4gICAgY29yZU1sRmxhZ3M/OiBudW1iZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBEbWxFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnZG1sJztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFRlbnNvclJ0RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3RlbnNvcnJ0JztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkFzc2VtYmx5RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3dhc20nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR0xFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnd2ViZ2wnO1xuICAgIC8vIFRPRE86IGFkZCBmbGFnc1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgWG5ucGFja0V4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd4bm5wYWNrJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdwdUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3ZWJncHUnO1xuICAgIHByZWZlcnJlZExheW91dD86ICdOQ0hXJ3wnTkhXQyc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3ZWJubic7XG4gICAgZGV2aWNlVHlwZT86ICdjcHUnfCdncHUnO1xuICAgIG51bVRocmVhZHM/OiBudW1iZXI7XG4gICAgcG93ZXJQcmVmZXJlbmNlPzogJ2RlZmF1bHQnfCdsb3ctcG93ZXInfCdoaWdoLXBlcmZvcm1hbmNlJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIENvcmVNTEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdjb3JlbWwnO1xuICAgIHVzZUNQVU9ubHk/OiBib29sZWFuO1xuICAgIGVuYWJsZU9uU3ViZ3JhcGg/OiBib29sZWFuO1xuICAgIG9ubHlFbmFibGVEZXZpY2VXaXRoQU5FPzogYm9vbGVhbjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIE5uYXBpRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ25uYXBpJztcbiAgICB1c2VGUDE2PzogYm9vbGVhbjtcbiAgICB1c2VOQ0hXPzogYm9vbGVhbjtcbiAgICBjcHVEaXNhYmxlZD86IGJvb2xlYW47XG4gICAgY3B1T25seT86IGJvb2xlYW47XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHJ1biBvcHRpb25zXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGNvbmZpZ3VyYXRpb25zIGZvciBpbmZlcmVuY2UgcnVuIGJlaGF2aW9yXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJ1bk9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIExvZyBzZXZlcml0eSBsZXZlbC4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL2NvbW1vbi9sb2dnaW5nL3NldmVyaXR5LmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dTZXZlcml0eUxldmVsPzogMHwxfDJ8M3w0O1xuXG4gICAgLyoqXG4gICAgICogTG9nIHZlcmJvc2l0eSBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKi9cbiAgICBsb2dWZXJib3NpdHlMZXZlbD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRlcm1pbmF0ZSBhbGwgaW5jb21wbGV0ZSBPcnRSdW4gY2FsbHMgYXMgc29vbiBhcyBwb3NzaWJsZSBpZiB0cnVlXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gV2ViQXNzZW1ibHkgYmFja2VuZC4gV2lsbCBzdXBwb3J0IE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlIGxhdGVyXG4gICAgICovXG4gICAgdGVybWluYXRlPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEEgdGFnIGZvciB0aGUgUnVuKCkgY2FsbHMgdXNpbmcgdGhpc1xuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIHRhZz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFNldCBhIHNpbmdsZSBydW4gY29uZmlndXJhdGlvbiBlbnRyeS4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL3Nlc3Npb24vXG4gICAgICogb25ueHJ1bnRpbWVfcnVuX29wdGlvbnNfY29uZmlnX2tleXMuaFxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogZXh0cmE6IHtcbiAgICAgKiAgIG1lbW9yeToge1xuICAgICAqICAgICBlbmFibGVfbWVtb3J5X2FyZW5hX3Nocmlua2FnZTogXCIxXCIsXG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGV4dHJhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiB2YWx1ZSBtZXRhZGF0YVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktaW50ZXJmYWNlXG4gIGludGVyZmFjZSBWYWx1ZU1ldGFkYXRhIHtcbiAgICAvLyBUQkRcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBydW50aW1lIGluc3RhbmNlIG9mIGFuIE9OTlggbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5mZXJlbmNlU2Vzc2lvbiB7XG4gIC8vICNyZWdpb24gcnVuKClcblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgbW9kZWwgYXN5bmNocm9ub3VzbHkgd2l0aCB0aGUgZ2l2ZW4gZmVlZHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uSW5wdXRUeXBlYCBmb3IgZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGluZmVyZW5jZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1bihmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIG1vZGVsIGFzeW5jaHJvbm91c2x5IHdpdGggdGhlIGdpdmVuIGZlZWRzLCBmZXRjaGVzIGFuZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuIFNlZSB0eXBlIGRlc2NyaXB0aW9uIG9mIGBJbmZlcmVuY2VTZXNzaW9uLklucHV0VHlwZWAgZm9yIGRldGFpbC5cbiAgICogQHBhcmFtIGZldGNoZXMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgb3V0cHV0LiBTZWUgdHlwZSBkZXNjcmlwdGlvbiBvZiBgSW5mZXJlbmNlU2Vzc2lvbi5PdXRwdXRUeXBlYCBmb3JcbiAgICogZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGluZmVyZW5jZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1bihmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIGZldGNoZXM6IEluZmVyZW5jZVNlc3Npb24uRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHJlbGVhc2UoKVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlIHRoZSBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgdGhlIHVuZGVybHlpbmcgcmVzb3VyY2VzLlxuICAgKi9cbiAgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHByb2ZpbGluZ1xuXG4gIC8qKlxuICAgKiBTdGFydCBwcm9maWxpbmcuXG4gICAqL1xuICBzdGFydFByb2ZpbGluZygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBFbmQgcHJvZmlsaW5nLlxuICAgKi9cbiAgZW5kUHJvZmlsaW5nKCk6IHZvaWQ7XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0YWRhdGFcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IG91dHB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8vIC8qKlxuICAvLyAgKiBHZXQgaW5wdXQgbWV0YWRhdGEgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgLy8gICovXG4gIC8vIHJlYWRvbmx5IGlucHV0TWV0YWRhdGE6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8SW5mZXJlbmNlU2Vzc2lvbi5WYWx1ZU1ldGFkYXRhPj47XG5cbiAgLy8gLyoqXG4gIC8vICAqIEdldCBvdXRwdXQgbWV0YWRhdGEgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgLy8gICovXG4gIC8vIHJlYWRvbmx5IG91dHB1dE1ldGFkYXRhOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEluZmVyZW5jZVNlc3Npb24uVmFsdWVNZXRhZGF0YT4+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmZlcmVuY2VTZXNzaW9uRmFjdG9yeSB7XG4gIC8vICNyZWdpb24gY3JlYXRlKClcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uIGFuZCBsb2FkIG1vZGVsIGFzeW5jaHJvbm91c2x5IGZyb20gYW4gT05OWCBtb2RlbCBmaWxlLlxuICAgKlxuICAgKiBAcGFyYW0gdXJpIC0gVGhlIFVSSSBvciBmaWxlIHBhdGggb2YgdGhlIG1vZGVsIHRvIGxvYWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gc3BlY2lmeSBjb25maWd1cmF0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbi5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gSW5mZXJlbmNlU2Vzc2lvbiBvYmplY3QuXG4gICAqL1xuICBjcmVhdGUodXJpOiBzdHJpbmcsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uPjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uIGFuZCBsb2FkIG1vZGVsIGFzeW5jaHJvbm91c2x5IGZyb20gYW4gYXJyYXkgYnVmZXIuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBbiBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIHNlZ21lbnQgb2YgYW4gYXJyYXkgYnVmZXIuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBbiBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gYnl0ZU9mZnNldCAtIFRoZSBiZWdpbm5pbmcgb2YgdGhlIHNwZWNpZmllZCBwb3J0aW9uIG9mIHRoZSBhcnJheSBidWZmZXIuXG4gICAqIEBwYXJhbSBieXRlTGVuZ3RoIC0gVGhlIGxlbmd0aCBpbiBieXRlcyBvZiB0aGUgYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBieXRlT2Zmc2V0OiBudW1iZXIsIGJ5dGVMZW5ndGg/OiBudW1iZXIsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIGEgVWludDhBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAtIEEgVWludDhBcnJheSByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IEluZmVyZW5jZVNlc3Npb246IEluZmVyZW5jZVNlc3Npb25GYWN0b3J5ID0gSW5mZXJlbmNlU2Vzc2lvbkltcGw7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbnR5cGUgTm9uVGVuc29yVHlwZSA9IG5ldmVyO1xuXG4vKipcbiAqIFR5cGUgT25ueFZhbHVlIFJlcHJlc2VudHMgYm90aCB0ZW5zb3JzIGFuZCBub24tdGVuc29ycyB2YWx1ZSBmb3IgbW9kZWwncyBpbnB1dHMvb3V0cHV0cy5cbiAqXG4gKiBOT1RFOiBjdXJyZW50bHkgbm90IHN1cHBvcnQgbm9uLXRlbnNvclxuICovXG5leHBvcnQgdHlwZSBPbm54VmFsdWUgPSBUZW5zb3J8Tm9uVGVuc29yVHlwZTtcblxuLyoqXG4gKiBUeXBlIE9ubnhWYWx1ZURhdGFMb2NhdGlvbiByZXByZXNlbnRzIHRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YSBvZiBhbiBPbm54VmFsdWUuXG4gKi9cbmV4cG9ydCB0eXBlIE9ubnhWYWx1ZURhdGFMb2NhdGlvbiA9IFRlbnNvci5EYXRhTG9jYXRpb247XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7cmVzb2x2ZUJhY2tlbmR9IGZyb20gJy4vYmFja2VuZC1pbXBsLmpzJztcbmltcG9ydCB7U2Vzc2lvbkhhbmRsZXIsIFRyYWluaW5nU2Vzc2lvbkhhbmRsZXJ9IGZyb20gJy4vYmFja2VuZC5qcyc7XG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24gYXMgSW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZX0gZnJvbSAnLi9vbm54LXZhbHVlLmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbiBhcyBUcmFpbmluZ1Nlc3Npb25JbnRlcmZhY2UsIFRyYWluaW5nU2Vzc2lvbkNyZWF0ZU9wdGlvbnN9IGZyb20gJy4vdHJhaW5pbmctc2Vzc2lvbi5qcyc7XG5cbnR5cGUgU2Vzc2lvbk9wdGlvbnMgPSBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zO1xudHlwZSBGZWVkc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZTtcbnR5cGUgRmV0Y2hlc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlO1xudHlwZSBSZXR1cm5UeXBlID0gSW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlO1xudHlwZSBSdW5PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zO1xuXG5jb25zdCBub0JhY2tlbmRFcnJNc2c6IHN0cmluZyA9ICdUcmFpbmluZyBiYWNrZW5kIGNvdWxkIG5vdCBiZSByZXNvbHZlZC4gJyArXG4gICAgJ01ha2Ugc3VyZSB5b3VcXCdyZSB1c2luZyB0aGUgY29ycmVjdCBjb25maWd1cmF0aW9uICYgV2ViQXNzZW1ibHkgZmlsZXMuJztcblxuZXhwb3J0IGNsYXNzIFRyYWluaW5nU2Vzc2lvbiBpbXBsZW1lbnRzIFRyYWluaW5nU2Vzc2lvbkludGVyZmFjZSB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IoaGFuZGxlcjogVHJhaW5pbmdTZXNzaW9uSGFuZGxlciwgaGFzT3B0aW1pemVyTW9kZWw6IGJvb2xlYW4sIGhhc0V2YWxNb2RlbDogYm9vbGVhbikge1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdGhpcy5oYXNPcHRpbWl6ZXJNb2RlbCA9IGhhc09wdGltaXplck1vZGVsO1xuICAgIHRoaXMuaGFzRXZhbE1vZGVsID0gaGFzRXZhbE1vZGVsO1xuICB9XG4gIHByaXZhdGUgaGFuZGxlcjogVHJhaW5pbmdTZXNzaW9uSGFuZGxlcjtcbiAgcHJpdmF0ZSBoYXNPcHRpbWl6ZXJNb2RlbDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBoYXNFdmFsTW9kZWw6IGJvb2xlYW47XG5cbiAgZ2V0IHRyYWluaW5nSW5wdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5pbnB1dE5hbWVzO1xuICB9XG4gIGdldCB0cmFpbmluZ091dHB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm91dHB1dE5hbWVzO1xuICB9XG5cbiAgZ2V0IGV2YWxJbnB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICBpZiAodGhpcy5oYXNFdmFsTW9kZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZXZhbElucHV0TmFtZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB0cmFpbmluZyBzZXNzaW9uIGhhcyBubyBldmFsTW9kZWwgbG9hZGVkLicpO1xuICAgIH1cbiAgfVxuICBnZXQgZXZhbE91dHB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICBpZiAodGhpcy5oYXNFdmFsTW9kZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZXZhbE91dHB1dE5hbWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgdHJhaW5pbmcgc2Vzc2lvbiBoYXMgbm8gZXZhbE1vZGVsIGxvYWRlZC4nKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlKHRyYWluaW5nT3B0aW9uczogVHJhaW5pbmdTZXNzaW9uQ3JlYXRlT3B0aW9ucywgc2Vzc2lvbk9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPFRyYWluaW5nU2Vzc2lvbj4ge1xuICAgIGNvbnN0IGV2YWxNb2RlbDogc3RyaW5nfFVpbnQ4QXJyYXkgPSB0cmFpbmluZ09wdGlvbnMuZXZhbE1vZGVsIHx8ICcnO1xuICAgIGNvbnN0IG9wdGltaXplck1vZGVsOiBzdHJpbmd8VWludDhBcnJheSA9IHRyYWluaW5nT3B0aW9ucy5vcHRpbWl6ZXJNb2RlbCB8fCAnJztcbiAgICBjb25zdCBvcHRpb25zOiBTZXNzaW9uT3B0aW9ucyA9IHNlc3Npb25PcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gZ2V0IGJhY2tlbmQgaGludHNcbiAgICBjb25zdCBlcHMgPSBvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycyB8fCBbXTtcbiAgICBjb25zdCBiYWNrZW5kSGludHMgPSBlcHMubWFwKGkgPT4gdHlwZW9mIGkgPT09ICdzdHJpbmcnID8gaSA6IGkubmFtZSk7XG4gICAgY29uc3QgYmFja2VuZCA9IGF3YWl0IHJlc29sdmVCYWNrZW5kKGJhY2tlbmRIaW50cyk7XG4gICAgaWYgKGJhY2tlbmQuY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcikge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGF3YWl0IGJhY2tlbmQuY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcihcbiAgICAgICAgICB0cmFpbmluZ09wdGlvbnMuY2hlY2twb2ludFN0YXRlLCB0cmFpbmluZ09wdGlvbnMudHJhaW5Nb2RlbCwgZXZhbE1vZGVsLCBvcHRpbWl6ZXJNb2RlbCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbmV3IFRyYWluaW5nU2Vzc2lvbihoYW5kbGVyLCAhIXRyYWluaW5nT3B0aW9ucy5vcHRpbWl6ZXJNb2RlbCwgISF0cmFpbmluZ09wdGlvbnMuZXZhbE1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQmFja2VuZEVyck1zZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgcnVuVHJhaW5TdGVwIGFuZCBmdXR1cmUgcnVuU3RlcCBtZXRob2RzIHRoYXQgaGFuZGxlcyB0aGUgdHlwZS1uYXJyb3dpbmcgY29udmVyc2lvbiBmcm9tXG4gICAqIHRoZSBnaXZlbiBwYXJhbWV0ZXJzIHRvIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlIGFuZCBSdW5PcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXROYW1lcyB0aGUgZmVlZHMgb2JqZWN0IGlzIGNoZWNrZWQgdGhhdCB0aGV5IGNvbnRhaW4gYWxsIGlucHV0IG5hbWVzIGluIHRoZSBwcm92aWRlZCBsaXN0IG9mIGlucHV0XG4gICAqIG5hbWVzLlxuICAgKiBAcGFyYW0gb3V0cHV0TmFtZXMgdGhlIGZldGNoZXMgb2JqZWN0IGlzIGNoZWNrZWQgdGhhdCB0aGVpciBrZXlzIG1hdGNoIHVwIHdpdGggdmFsaWQgbmFtZXMgaW4gdGhlIGxpc3Qgb2Ygb3V0cHV0XG4gICAqIG5hbWVzLlxuICAgKiBAcGFyYW0gZmVlZHMgdGhlIHJlcXVpcmVkIGlucHV0XG4gICAqIEBwYXJhbSBhcmcxIG5hcnJvd2VkICYgY29udmVydGVkIGludG8gdGhlIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlIG9yIFJ1bk9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSBhcmcyIG9wdGlvbmFsIFJ1bk9wdGlvbnMgb2JqZWN0LlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgdHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAoXG4gICAgICBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXSwgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdLCBmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucyxcbiAgICAgIGFyZzI/OiBSdW5PcHRpb25zKTogW1Nlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBSdW5PcHRpb25zXSB7XG4gICAgY29uc3QgZmV0Y2hlczoge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV8bnVsbH0gPSB7fTtcbiAgICBsZXQgb3B0aW9uczogUnVuT3B0aW9ucyA9IHt9O1xuICAgIC8vIGNoZWNrIGlucHV0c1xuICAgIGlmICh0eXBlb2YgZmVlZHMgIT09ICdvYmplY3QnIHx8IGZlZWRzID09PSBudWxsIHx8IGZlZWRzIGluc3RhbmNlb2YgVGVuc29yIHx8IEFycmF5LmlzQXJyYXkoZmVlZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdcXCdmZWVkc1xcJyBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IHVzZSBpbnB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuJyk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmV0Y2hlc0VtcHR5ID0gdHJ1ZTtcbiAgICAvLyBkZXRlcm1pbmUgd2hpY2ggb3ZlcnJpZGUgaXMgYmVpbmcgdXNlZFxuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChhcmcxID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IGNhbm5vdCBiZSBudWxsLicpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYSBUZW5zb3InKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgaWYgKGFyZzEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYW4gZW1wdHkgYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaXNGZXRjaGVzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgLy8gb3V0cHV0IG5hbWVzXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBhcmcxKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBtdXN0IGJlIGEgc3RyaW5nIGFycmF5IG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG91dHB1dE5hbWVzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJ2ZldGNoZXMnIGNvbnRhaW5zIGludmFsaWQgb3V0cHV0IG5hbWU6ICR7bmFtZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVjaWRlIHdoZXRoZXIgYXJnMSBpcyBmZXRjaGVzIG9yIG9wdGlvbnNcbiAgICAgICAgLy8gaWYgYW55IG91dHB1dCBuYW1lIGlzIHByZXNlbnQgYW5kIGl0cyB2YWx1ZSBpcyB2YWxpZCBPbm54VmFsdWUsIHdlIGNvbnNpZGVyIGl0IGZldGNoZXNcbiAgICAgICAgbGV0IGlzRmV0Y2hlcyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBhcmcxS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFyZzEpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygb3V0cHV0TmFtZXMpIHtcbiAgICAgICAgICBpZiAoYXJnMUtleXMuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAoYXJnMSBhcyBJbmZlcmVuY2VTZXNzaW9uLk51bGxhYmxlT25ueFZhbHVlTWFwVHlwZSlbbmFtZV07XG4gICAgICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB2IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ZldGNoZXMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMSBhcyBSdW5PcHRpb25zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IG11c3QgYmUgXFwnZmV0Y2hlc1xcJyBvciBcXCdvcHRpb25zXFwnLicpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGFsbCBpbnB1dHMgYXJlIGluIGZlZWRcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgaW5wdXROYW1lcykge1xuICAgICAgaWYgKHR5cGVvZiBmZWVkc1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCAnJHtuYW1lfScgaXMgbWlzc2luZyBpbiAnZmVlZHMnLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIG5vIGZldGNoZXMgaXMgc3BlY2lmaWVkLCB3ZSB1c2UgdGhlIGZ1bGwgb3V0cHV0IG5hbWVzIGxpc3RcbiAgICBpZiAoaXNGZXRjaGVzRW1wdHkpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBvdXRwdXROYW1lcykge1xuICAgICAgICBmZXRjaGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW2ZldGNoZXMsIG9wdGlvbnNdO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgZm9yIHJ1blRyYWluU3RlcCBhbmQgYW55IG90aGVyIHJ1blN0ZXAgbWV0aG9kcy4gVGFrZXMgdGhlIFJldHVyblR5cGUgcmVzdWx0IGZyb20gdGhlIFNlc3Npb25IYW5kbGVyXG4gICAqIGFuZCBjaGFuZ2VzIGl0IGludG8gYSBtYXAgb2YgVGVuc29ycy5cbiAgICpcbiAgICogQHBhcmFtIHJlc3VsdHNcbiAgICogQHJldHVybnNcbiAgICovXG4gIGNvbnZlcnRIYW5kbGVyUmV0dXJuVHlwZVRvTWFwT2ZUZW5zb3JzKHJlc3VsdHM6IFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGUpOiBSZXR1cm5UeXBlIHtcbiAgICBjb25zdCByZXR1cm5WYWx1ZToge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVzdWx0cykge1xuICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdHMsIGtleSkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0c1trZXldO1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZVtrZXldID0gbmV3IFRlbnNvcihyZXN1bHQudHlwZSwgcmVzdWx0LmRhdGEsIHJlc3VsdC5kaW1zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICBydW5UcmFpblN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW5UcmFpblN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgZmV0Y2hlczogRmV0Y2hlc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuVHJhaW5TdGVwKGZlZWRzOiBGZWVkc1R5cGUsIGFyZzE/OiBGZXRjaGVzVHlwZXxSdW5PcHRpb25zLCBhcmcyPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IFtmZXRjaGVzLCBvcHRpb25zXSA9XG4gICAgICAgIHRoaXMudHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAodGhpcy50cmFpbmluZ0lucHV0TmFtZXMsIHRoaXMudHJhaW5pbmdPdXRwdXROYW1lcywgZmVlZHMsIGFyZzEsIGFyZzIpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmhhbmRsZXIucnVuVHJhaW5TdGVwKGZlZWRzLCBmZXRjaGVzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jb252ZXJ0SGFuZGxlclJldHVyblR5cGVUb01hcE9mVGVuc29ycyhyZXN1bHRzKTtcbiAgfVxuXG4gIGFzeW5jIHJ1bk9wdGltaXplclN0ZXAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9uc3x1bmRlZmluZWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5oYXNPcHRpbWl6ZXJNb2RlbCkge1xuICAgICAgYXdhaXQgdGhpcy5oYW5kbGVyLnJ1bk9wdGltaXplclN0ZXAob3B0aW9ucyB8fCB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUcmFpbmluZ1Nlc3Npb24gaGFzIG5vIE9wdGltaXplck1vZGVsIGxvYWRlZC4nKTtcbiAgICB9XG4gIH1cblxuICBydW5FdmFsU3RlcChmZWVkczogRmVlZHNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9uc3x1bmRlZmluZWQpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW5FdmFsU3RlcChmZWVkczogRmVlZHNUeXBlLCBmZXRjaGVzOiBGZXRjaGVzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnN8dW5kZWZpbmVkKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuRXZhbFN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgYXJnMT86IEZldGNoZXNUeXBlfFJ1bk9wdGlvbnMsIGFyZzI/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPiB7XG4gICAgaWYgKHRoaXMuaGFzRXZhbE1vZGVsKSB7XG4gICAgICBjb25zdCBbZmV0Y2hlcywgb3B0aW9uc10gPVxuICAgICAgICAgIHRoaXMudHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAodGhpcy5ldmFsSW5wdXROYW1lcywgdGhpcy5ldmFsT3V0cHV0TmFtZXMsIGZlZWRzLCBhcmcxLCBhcmcyKTtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmhhbmRsZXIucnVuRXZhbFN0ZXAoZmVlZHMsIGZldGNoZXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXMuY29udmVydEhhbmRsZXJSZXR1cm5UeXBlVG9NYXBPZlRlbnNvcnMocmVzdWx0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUcmFpbmluZ1Nlc3Npb24gaGFzIG5vIEV2YWxNb2RlbCBsb2FkZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seSA9IHRydWUpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seSk7XG4gIH1cblxuICBhc3luYyBsb2FkUGFyYW1ldGVyc0J1ZmZlcihhcnJheTogVWludDhBcnJheSwgdHJhaW5hYmxlT25seSA9IHRydWUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBwYXJhbXNTaXplID0gYXdhaXQgdGhpcy5nZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5KTtcbiAgICAvLyBjaGVja2luZyB0aGF0IHRoZSBzaXplIG9mIHRoZSBVaW50OEFycmF5IGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJ5dGUgbGVuZ3RoIG9mIGEgRmxvYXQzMkFycmF5IG9mIHRoZSBudW1iZXJcbiAgICAvLyBvZiBwYXJhbWV0ZXJzXG4gICAgaWYgKGFycmF5Lmxlbmd0aCAhPT0gNCAqIHBhcmFtc1NpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnU2l6ZSBvZiB0aGUgYnVmZmVyIHBhc3NlZCBpbnRvIGxvYWRQYXJhbWV0ZXJzQnVmZmVyIG11c3QgbWF0Y2ggdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzIGluICcgK1xuICAgICAgICAgICd0aGUgbW9kZWwuIFBsZWFzZSB1c2UgZ2V0UGFyYW1ldGVyc1NpemUgbWV0aG9kIHRvIGNoZWNrLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5LCB0cmFpbmFibGVPbmx5KTtcbiAgfVxuXG4gIGFzeW5jIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHkgPSB0cnVlKTogUHJvbWlzZTxPbm54VmFsdWU+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHkpO1xuICB9XG5cbiAgYXN5bmMgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbiBhcyBUcmFpbmluZ1Nlc3Npb25JbXBsfSBmcm9tICcuL3RyYWluaW5nLXNlc3Npb24taW1wbC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgKi9cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFRyYWluaW5nU2Vzc2lvbiB7XG4gIC8qKlxuICAgKiBFaXRoZXIgVVJJIGZpbGUgcGF0aCAoc3RyaW5nKSBvciBVaW50OEFycmF5IGNvbnRhaW5pbmcgbW9kZWwgb3IgY2hlY2twb2ludCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHR5cGUgVVJJb3JCdWZmZXIgPSBzdHJpbmd8VWludDhBcnJheTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBydW50aW1lIGluc3RhbmNlIG9mIGFuIE9OTlggdHJhaW5pbmcgc2Vzc2lvbixcbiAqIHdoaWNoIGNvbnRhaW5zIGEgbW9kZWwgdGhhdCBjYW4gYmUgdHJhaW5lZCwgYW5kLCBvcHRpb25hbGx5LFxuICogYW4gZXZhbCBhbmQgb3B0aW1pemVyIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbiB7XG4gIC8vICNyZWdpb24gcnVuKClcblxuICAvKipcbiAgICogUnVuIFRyYWluU3RlcCBhc3luY2hyb25vdXNseSB3aXRoIHRoZSBnaXZlbiBmZWVkcyBhbmQgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LiBTZWUgdHlwZSBkZXNjcmlwdGlvbiBvZiBgSW5mZXJlbmNlU2Vzc2lvbi5JbnB1dFR5cGVgIGZvclxuICAgZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIHRyYWluaW5nLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIG1hcCwgd2hpY2ggdXNlcyBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgKi9cbiAgcnVuVHJhaW5TdGVwKGZlZWRzOiBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLyoqXG4gICAqIFJ1biBhIHNpbmdsZSB0cmFpbiBzdGVwIHdpdGggdGhlIGdpdmVuIGlucHV0cyBhbmQgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LlxuICAgKiBAcGFyYW0gZmV0Y2hlcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBvdXRwdXQuXG4gICAqIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCB0cmFpbmluZy5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nXG4gICB2YWx1ZXMuXG4gICAqL1xuICBydW5UcmFpblN0ZXAoXG4gICAgICBmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIGZldGNoZXM6IEluZmVyZW5jZVNlc3Npb24uRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBSdW5zIGEgc2luZ2xlIG9wdGltaXplciBzdGVwLCB3aGljaCBwZXJmb3JtcyB3ZWlnaHQgdXBkYXRlcyBmb3IgdGhlIHRyYWluYWJsZSBwYXJhbWV0ZXJzIHVzaW5nIHRoZSBvcHRpbWl6ZXIgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgbW9kZWwgb3B0aW1pemluZy5cbiAgICovXG4gIHJ1bk9wdGltaXplclN0ZXAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFJ1biBhIHNpbmdsZSBldmFsIHN0ZXAgd2l0aCB0aGUgZ2l2ZW4gaW5wdXRzIGFuZCBvcHRpb25zIHVzaW5nIHRoZSBldmFsIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgbW9kZWwgZXZhbCBzdGVwLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIG1hcCwgd2hpY2ggdXNlcyBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmdcbiAgIHZhbHVlcy5cbiAgICovXG4gIHJ1bkV2YWxTdGVwKGZlZWRzOiBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLyoqXG4gICAqIFJ1biBhIHNpbmdsZSBldmFsIHN0ZXAgd2l0aCB0aGUgZ2l2ZW4gaW5wdXRzIGFuZCBvcHRpb25zIHVzaW5nIHRoZSBldmFsIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuXG4gICAqIEBwYXJhbSBmZXRjaGVzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIG91dHB1dC5cbiAgICogZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGV2YWwgc3RlcC5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nXG4gICB2YWx1ZXMuXG4gICAqL1xuICBydW5FdmFsU3RlcChcbiAgICAgIGZlZWRzOiBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZSwgZmV0Y2hlczogSW5mZXJlbmNlU2Vzc2lvbi5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gY29weSBwYXJhbWV0ZXJzXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgc2l6ZSBvZiBhbGwgcGFyYW1ldGVycyBmb3IgdGhlIHRyYWluaW5nIHN0YXRlLiBDYWxjdWxhdGVzIHRoZSB0b3RhbCBudW1iZXIgb2YgcHJpbWl0aXZlIChkYXRhdHlwZSBvZlxuICAgKiB0aGUgcGFyYW1ldGVycykgZWxlbWVudHMgb2YgYWxsIHRoZSBwYXJhbWV0ZXJzIGluIHRoZSB0cmFpbmluZyBzdGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHRyYWluYWJsZU9ubHkgLSBXaGVuIHNldCB0byB0cnVlLCB0aGUgc2l6ZSBpcyBjYWxjdWxhdGVkIGZvciB0cmFpbmFibGUgcGFyYW1zIG9ubHkuIERlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIGdldFBhcmFtZXRlcnNTaXplKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPG51bWJlcj47XG5cbiAgLyoqXG4gICAqIENvcGllcyBwYXJhbWV0ZXIgdmFsdWVzIGZyb20gdGhlIGdpdmVuIGFycmF5IHRvIHRoZSB0cmFpbmluZyBzdGF0ZS4gQ3VycmVudGx5LCBvbmx5IHN1cHBvcnRpbmcgbW9kZWxzIHdpdGhcbiAgICogcGFyYW1ldGVycyBvZiB0eXBlIEZsb2F0MzIuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBGbG9hdDMyIGJ1ZmZlciBjb250YWluaW5nIHBhcmFtZXRlcnMgY29udmVydGVkIHRvIGEgVWludDhBcnJheS5cbiAgICogQHBhcmFtIHRyYWluYWJsZU9ubHkgLSBUcnVlIGlmIHRyYWluYWJsZSBwYXJhbWV0ZXJzIG9ubHkgdG8gYmUgbW9kaWZpZWQsIGZhbHNlIG90aGVyd2lzZS4gRGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgbG9hZFBhcmFtZXRlcnNCdWZmZXIoYXJyYXk6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDb3BpZXMgdGhlIG1vZGVsIHBhcmFtZXRlcnMgdG8gYSBjb250aWd1b3VzIGJ1ZmZlci4gVXN1YWxseSB1c2VkIGluIHRoZSBjb250ZXh0IG9mIEZlZGVyYXRlZCBMZWFybmluZy5cbiAgICogQ3VycmVudGx5LCBvbmx5IHN1cHBvcnRpbmcgbW9kZWxzIHdpdGggcGFyYW1ldGVycyBvZiB0eXBlIEZsb2F0MzIuXG4gICAqXG4gICAqIEBwYXJhbSB0cmFpbmFibGVPbmx5IC0gV2hlbiBzZXQgdG8gdHJ1ZSwgb25seSB0cmFpbmFibGUgcGFyYW1ldGVycyBhcmUgY29waWVkLiBUcmFpbmFibGUgcGFyYW1ldGVycyBhcmUgcGFyYW1ldGVyc1xuICAgKiBmb3Igd2hpY2ggcmVxdWlyZXNfZ3JhZCBpcyBzZXQgdG8gdHJ1ZS4gRGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIEZsb2F0MzIgT25ueFZhbHVlIG9mIHRoZSByZXF1ZXN0ZWQgcGFyYW1ldGVycy5cbiAgICovXG4gIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPE9ubnhWYWx1ZT47XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHJlbGVhc2UoKVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlIHRoZSBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgdGhlIHVuZGVybHlpbmcgcmVzb3VyY2VzLlxuICAgKi9cbiAgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+O1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBtZXRhZGF0YVxuXG4gIC8qKlxuICAgKiBHZXQgaW5wdXQgbmFtZXMgb2YgdGhlIGxvYWRlZCB0cmFpbmluZyBtb2RlbC5cbiAgICovXG4gIHJlYWRvbmx5IHRyYWluaW5nSW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEdldCBvdXRwdXQgbmFtZXMgb2YgdGhlIGxvYWRlZCB0cmFpbmluZyBtb2RlbC5cbiAgICovXG4gIHJlYWRvbmx5IHRyYWluaW5nT3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBHZXQgaW5wdXQgbmFtZXMgb2YgdGhlIGxvYWRlZCBldmFsIG1vZGVsLiBJcyBhbiBlbXB0eSBhcnJheSBpZiBubyBldmFsIG1vZGVsIGlzIGxvYWRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGV2YWxJbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IG91dHB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIGV2YWwgbW9kZWwuIElzIGFuIGVtcHR5IGFycmF5IGlmIG5vIGV2YWwgbW9kZWwgaXMgbG9hZGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZXZhbE91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgb3B0aW9uYWwgcGFyYW1ldGVycyB0aGF0IGNhbiBiZSBwYXNzZWQgaW50byB0aGUgVHJhaW5pbmdTZXNzaW9uRmFjdG9yeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFpbmluZ1Nlc3Npb25DcmVhdGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIFVSSSBvciBidWZmZXIgZm9yIGEgLmNrcHQgZmlsZSB0aGF0IGNvbnRhaW5zIHRoZSBjaGVja3BvaW50IGZvciB0aGUgdHJhaW5pbmcgbW9kZWwuXG4gICAqL1xuICBjaGVja3BvaW50U3RhdGU6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcjtcbiAgLyoqXG4gICAqIFVSSSBvciBidWZmZXIgZm9yIHRoZSAub25ueCB0cmFpbmluZyBmaWxlLlxuICAgKi9cbiAgdHJhaW5Nb2RlbDogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyO1xuICAvKipcbiAgICogT3B0aW9uYWwuIFVSSSBvciBidWZmZXIgZm9yIHRoZSAub25ueCBvcHRpbWl6ZXIgbW9kZWwgZmlsZS5cbiAgICovXG4gIG9wdGltaXplck1vZGVsPzogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyO1xuICAvKipcbiAgICogT3B0aW9uYWwuIFVSSSBvciBidWZmZXIgZm9yIHRoZSAub25ueCBldmFsIG1vZGVsIGZpbGUuXG4gICAqL1xuICBldmFsTW9kZWw/OiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXI7XG59XG5cbi8qKlxuICogRGVmaW5lcyBtZXRob2Qgb3ZlcmxvYWQgcG9zc2liaWxpdGllcyBmb3IgY3JlYXRpbmcgYSBUcmFpbmluZ1Nlc3Npb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhaW5pbmdTZXNzaW9uRmFjdG9yeSB7XG4gIC8vICNyZWdpb24gY3JlYXRlKClcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBUcmFpbmluZ1Nlc3Npb24gYW5kIGFzeW5jaHJvbm91c2x5IGxvYWRzIGFueSBtb2RlbHMgcGFzc2VkIGluIHRocm91Z2ggdHJhaW5pbmdPcHRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB0cmFpbmluZ09wdGlvbnMgc3BlY2lmeSBtb2RlbHMgYW5kIGNoZWNrcG9pbnRzIHRvIGxvYWQgaW50byB0aGUgVHJhaW5pbmcgU2Vzc2lvblxuICAgKiBAcGFyYW0gc2Vzc2lvbk9wdGlvbnMgc3BlY2lmeSBjb25maWd1cmF0aW9uIGZvciB0cmFpbmluZyBzZXNzaW9uIGJlaGF2aW9yXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIFRyYWluaW5nU2Vzc2lvbiBvYmplY3RcbiAgICovXG4gIGNyZWF0ZSh0cmFpbmluZ09wdGlvbnM6IFRyYWluaW5nU2Vzc2lvbkNyZWF0ZU9wdGlvbnMsIHNlc3Npb25PcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPFRyYWluaW5nU2Vzc2lvbj47XG5cbiAgLy8gI2VuZHJlZ2lvblxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgVHJhaW5pbmdTZXNzaW9uOiBUcmFpbmluZ1Nlc3Npb25GYWN0b3J5ID0gVHJhaW5pbmdTZXNzaW9uSW1wbDtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLyoqXG4gKiAjIE9OTlggUnVudGltZSBKYXZhU2NyaXB0IEFQSVxuICpcbiAqIE9OTlggUnVudGltZSBKYXZhU2NyaXB0IEFQSSBpcyBhIHVuaWZpZWQgQVBJIGZvciBhbGwgSmF2YVNjcmlwdCB1c2FnZXMsIGluY2x1ZGluZyB0aGUgZm9sbG93aW5nIE5QTSBwYWNrYWdlczpcbiAqXG4gKiAtIFtvbm54cnVudGltZS1ub2RlXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9vbm54cnVudGltZS1ub2RlKVxuICogLSBbb25ueHJ1bnRpbWUtd2ViXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9vbm54cnVudGltZS13ZWIpXG4gKiAtIFtvbm54cnVudGltZS1yZWFjdC1uYXRpdmVdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL29ubnhydW50aW1lLXJlYWN0LW5hdGl2ZSlcbiAqXG4gKiBTZWUgYWxzbzpcbiAqIC0gW0dldCBTdGFydGVkXShodHRwczovL29ubnhydW50aW1lLmFpL2RvY3MvZ2V0LXN0YXJ0ZWQvd2l0aC1qYXZhc2NyaXB0Lmh0bWwpXG4gKiAtIFtJbmZlcmVuY2UgZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvb25ueHJ1bnRpbWUtaW5mZXJlbmNlLWV4YW1wbGVzL3RyZWUvbWFpbi9qcylcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuXG5leHBvcnQgKiBmcm9tICcuL2JhY2tlbmQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnYuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RlbnNvci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLmpzJztcbiIsICJleHBvcnQgY29uc3QgY3B1cyA9IHVuZGVmaW5lZDsiLCAiZXhwb3J0IGNvbnN0IGpvaW4gPSB1bmRlZmluZWQ7IiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDsiLCAiZXhwb3J0IGNvbnN0IGpvaW4gPSB1bmRlZmluZWQ7IiwgIlxudmFyIG9ydFdhc20gPSAoKCkgPT4ge1xuICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09ICd1bmRlZmluZWQnKSBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICByZXR1cm4gKFxuZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcblxudmFyIGQ9bW9kdWxlQXJnLGssbDtkLnJlYWR5PW5ldyBQcm9taXNlKChhLGIpPT57az1hO2w9Yn0pO3ZhciByPU9iamVjdC5hc3NpZ24oe30sZCksdj1cIi4vdGhpcy5wcm9ncmFtXCIsYWE9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyx4PVwiZnVuY3Rpb25cIj09dHlwZW9mIGltcG9ydFNjcmlwdHMsYmE9XCJvYmplY3RcIj09dHlwZW9mIHByb2Nlc3MmJlwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzLnZlcnNpb25zJiZcInN0cmluZ1wiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLHk9XCJcIixBLEIsQztcbmlmKGJhKXt2YXIgZnM9cmVxdWlyZShcImZzXCIpLEQ9cmVxdWlyZShcInBhdGhcIik7eT14P0QuZGlybmFtZSh5KStcIi9cIjpfX2Rpcm5hbWUrXCIvXCI7QT0oYSxiKT0+e2E9YS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKT9uZXcgVVJMKGEpOkQubm9ybWFsaXplKGEpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoYSxiP3ZvaWQgMDpcInV0ZjhcIil9O0M9YT0+e2E9QShhLCEwKTthLmJ1ZmZlcnx8KGE9bmV3IFVpbnQ4QXJyYXkoYSkpO3JldHVybiBhfTtCPShhLGIsYyxlPSEwKT0+e2E9YS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKT9uZXcgVVJMKGEpOkQubm9ybWFsaXplKGEpO2ZzLnJlYWRGaWxlKGEsZT92b2lkIDA6XCJ1dGY4XCIsKGcsaCk9PntnP2MoZyk6YihlP2guYnVmZmVyOmgpfSl9OyFkLnRoaXNQcm9ncmFtJiYxPHByb2Nlc3MuYXJndi5sZW5ndGgmJih2PXByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpKTtwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7ZC5pbnNwZWN0PSgpPT5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCJ9ZWxzZSBpZihhYXx8XG54KXg/eT1zZWxmLmxvY2F0aW9uLmhyZWY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYoeT1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksX3NjcmlwdERpciYmKHk9X3NjcmlwdERpciksMCE9PXkuaW5kZXhPZihcImJsb2I6XCIpP3k9eS5zdWJzdHIoMCx5LnJlcGxhY2UoL1s/I10uKi8sXCJcIikubGFzdEluZGV4T2YoXCIvXCIpKzEpOnk9XCJcIixBPWE9Pnt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5zZW5kKG51bGwpO3JldHVybiBiLnJlc3BvbnNlVGV4dH0seCYmKEM9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Yi5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKX0pLEI9KGEsYixjKT0+e3ZhciBlPW5ldyBYTUxIdHRwUmVxdWVzdDtlLm9wZW4oXCJHRVRcIixhLCEwKTtlLnJlc3BvbnNlVHlwZT1cblwiYXJyYXlidWZmZXJcIjtlLm9ubG9hZD0oKT0+ezIwMD09ZS5zdGF0dXN8fDA9PWUuc3RhdHVzJiZlLnJlc3BvbnNlP2IoZS5yZXNwb25zZSk6YygpfTtlLm9uZXJyb3I9YztlLnNlbmQobnVsbCl9O3ZhciBjYT1kLnByaW50fHxjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLEU9ZC5wcmludEVycnx8Y29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO09iamVjdC5hc3NpZ24oZCxyKTtyPW51bGw7ZC50aGlzUHJvZ3JhbSYmKHY9ZC50aGlzUHJvZ3JhbSk7dmFyIEY7ZC53YXNtQmluYXJ5JiYoRj1kLndhc21CaW5hcnkpO3ZhciBub0V4aXRSdW50aW1lPWQubm9FeGl0UnVudGltZXx8ITA7XCJvYmplY3RcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZHKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgSCxJLGRhPSExLEosSyxMLE07XG5mdW5jdGlvbiBlYSgpe3ZhciBhPUguYnVmZmVyO2QuSEVBUDg9Sj1uZXcgSW50OEFycmF5KGEpO2QuSEVBUDE2PW5ldyBJbnQxNkFycmF5KGEpO2QuSEVBUDMyPUw9bmV3IEludDMyQXJyYXkoYSk7ZC5IRUFQVTg9Sz1uZXcgVWludDhBcnJheShhKTtkLkhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGEpO2QuSEVBUFUzMj1NPW5ldyBVaW50MzJBcnJheShhKTtkLkhFQVBGMzI9bmV3IEZsb2F0MzJBcnJheShhKTtkLkhFQVBGNjQ9bmV3IEZsb2F0NjRBcnJheShhKX12YXIgZmE9W10saGE9W10saWE9W107ZnVuY3Rpb24gamEoKXt2YXIgYT1kLnByZVJ1bi5zaGlmdCgpO2ZhLnVuc2hpZnQoYSl9dmFyIE49MCxPPW51bGwsUD1udWxsO1xuZnVuY3Rpb24gRyhhKXtpZihkLm9uQWJvcnQpZC5vbkFib3J0KGEpO2E9XCJBYm9ydGVkKFwiK2ErXCIpXCI7RShhKTtkYT0hMDthPW5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYStcIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIik7bChhKTt0aHJvdyBhO31mdW5jdGlvbiBrYShhKXtyZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKX12YXIgUTtRPVwib3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtXCI7aWYoIWthKFEpKXt2YXIgbGE9UTtRPWQubG9jYXRlRmlsZT9kLmxvY2F0ZUZpbGUobGEseSk6eStsYX1mdW5jdGlvbiBtYShhKXtpZihhPT1RJiZGKXJldHVybiBuZXcgVWludDhBcnJheShGKTtpZihDKXJldHVybiBDKGEpO3Rocm93XCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO31cbmZ1bmN0aW9uIG5hKGEpe2lmKCFGJiYoYWF8fHgpKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBmZXRjaCYmIWEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpcmV0dXJuIGZldGNoKGEse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oYj0+e2lmKCFiLm9rKXRocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIithK1wiJ1wiO3JldHVybiBiLmFycmF5QnVmZmVyKCl9KS5jYXRjaCgoKT0+bWEoYSkpO2lmKEIpcmV0dXJuIG5ldyBQcm9taXNlKChiLGMpPT57QihhLGU9PmIobmV3IFVpbnQ4QXJyYXkoZSkpLGMpfSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9Pm1hKGEpKX1mdW5jdGlvbiBvYShhLGIsYyl7cmV0dXJuIG5hKGEpLnRoZW4oZT0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZSxiKSkudGhlbihlPT5lKS50aGVuKGMsZT0+e0UoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIitlKTtHKGUpfSl9XG5mdW5jdGlvbiBwYShhLGIpe3ZhciBjPVE7cmV0dXJuIEZ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nfHxrYShjKXx8Yy5zdGFydHNXaXRoKFwiZmlsZTovL1wiKXx8YmF8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGZldGNoP29hKGMsYSxiKTpmZXRjaChjLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGU9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGUsYSkudGhlbihiLGZ1bmN0aW9uKGcpe0UoXCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogXCIrZyk7RShcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO3JldHVybiBvYShjLGEsYil9KSl9dmFyIFIsUz1hPT57Zm9yKDswPGEubGVuZ3RoOylhLnNoaWZ0KCkoZCl9O1xuZnVuY3Rpb24gcWEoYSl7dGhpcy5KYT1hLTI0O3RoaXMuTmE9ZnVuY3Rpb24oYil7TVt0aGlzLkphKzQ+PjI+Pj4wXT1ifTt0aGlzLk1hPWZ1bmN0aW9uKGIpe01bdGhpcy5KYSs4Pj4yPj4+MF09Yn07dGhpcy5LYT1mdW5jdGlvbihiLGMpe3RoaXMuTGEoKTt0aGlzLk5hKGIpO3RoaXMuTWEoYyl9O3RoaXMuTGE9ZnVuY3Rpb24oKXtNW3RoaXMuSmErMTY+PjI+Pj4wXT0wfX1cbnZhciByYT0wLHNhPTAsdGE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dm9pZCAwLHVhPShhLGIsYyk9PntiPj4+PTA7dmFyIGU9YitjO2ZvcihjPWI7YVtjXSYmIShjPj1lKTspKytjO2lmKDE2PGMtYiYmYS5idWZmZXImJnRhKXJldHVybiB0YS5kZWNvZGUoYS5zdWJhcnJheShiLGMpKTtmb3IoZT1cIlwiO2I8Yzspe3ZhciBnPWFbYisrXTtpZihnJjEyOCl7dmFyIGg9YVtiKytdJjYzO2lmKDE5Mj09KGcmMjI0KSllKz1TdHJpbmcuZnJvbUNoYXJDb2RlKChnJjMxKTw8NnxoKTtlbHNle3ZhciBtPWFbYisrXSY2MztnPTIyND09KGcmMjQwKT8oZyYxNSk8PDEyfGg8PDZ8bTooZyY3KTw8MTh8aDw8MTJ8bTw8NnxhW2IrK10mNjM7NjU1MzY+Zz9lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpOihnLT02NTUzNixlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGc+PjEwLDU2MzIwfGcmMTAyMykpfX1lbHNlIGUrPVN0cmluZy5mcm9tQ2hhckNvZGUoZyl9cmV0dXJuIGV9LFxuVD0oYSxiKT0+KGE+Pj49MCk/dWEoSyxhLGIpOlwiXCIsVT1hPT57Zm9yKHZhciBiPTAsYz0wO2M8YS5sZW5ndGg7KytjKXt2YXIgZT1hLmNoYXJDb2RlQXQoYyk7MTI3Pj1lP2IrKzoyMDQ3Pj1lP2IrPTI6NTUyOTY8PWUmJjU3MzQzPj1lPyhiKz00LCsrYyk6Yis9M31yZXR1cm4gYn0sVj0oYSxiLGMsZSk9PntjPj4+PTA7aWYoISgwPGUpKXJldHVybiAwO3ZhciBnPWM7ZT1jK2UtMTtmb3IodmFyIGg9MDtoPGEubGVuZ3RoOysraCl7dmFyIG09YS5jaGFyQ29kZUF0KGgpO2lmKDU1Mjk2PD1tJiY1NzM0Mz49bSl7dmFyIHE9YS5jaGFyQ29kZUF0KCsraCk7bT02NTUzNisoKG0mMTAyMyk8PDEwKXxxJjEwMjN9aWYoMTI3Pj1tKXtpZihjPj1lKWJyZWFrO2JbYysrPj4+MF09bX1lbHNle2lmKDIwNDc+PW0pe2lmKGMrMT49ZSlicmVhaztiW2MrKz4+PjBdPTE5MnxtPj42fWVsc2V7aWYoNjU1MzU+PW0pe2lmKGMrMj49ZSlicmVhaztiW2MrKz4+PjBdPTIyNHxtPj4xMn1lbHNle2lmKGMrMz49XG5lKWJyZWFrO2JbYysrPj4+MF09MjQwfG0+PjE4O2JbYysrPj4+MF09MTI4fG0+PjEyJjYzfWJbYysrPj4+MF09MTI4fG0+PjYmNjN9YltjKys+Pj4wXT0xMjh8bSY2M319YltjPj4+MF09MDtyZXR1cm4gYy1nfSxXPWE9PjA9PT1hJTQmJigwIT09YSUxMDB8fDA9PT1hJTQwMCksdmE9WzAsMzEsNjAsOTEsMTIxLDE1MiwxODIsMjEzLDI0NCwyNzQsMzA1LDMzNV0sd2E9WzAsMzEsNTksOTAsMTIwLDE1MSwxODEsMjEyLDI0MywyNzMsMzA0LDMzNF0sQmE9YT0+e3ZhciBiPVUoYSkrMSxjPUFhKGIpO2MmJlYoYSxLLGMsYik7cmV0dXJuIGN9LFg9e30sQ2E9KCk9PntpZighWSl7dmFyIGE9e1VTRVI6XCJ3ZWJfdXNlclwiLExPR05BTUU6XCJ3ZWJfdXNlclwiLFBBVEg6XCIvXCIsUFdEOlwiL1wiLEhPTUU6XCIvaG9tZS93ZWJfdXNlclwiLExBTkc6KFwib2JqZWN0XCI9PXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci5sYW5ndWFnZXMmJm5hdmlnYXRvci5sYW5ndWFnZXNbMF18fFwiQ1wiKS5yZXBsYWNlKFwiLVwiLFxuXCJfXCIpK1wiLlVURi04XCIsXzp2fHxcIi4vdGhpcy5wcm9ncmFtXCJ9LGI7Zm9yKGIgaW4gWCl2b2lkIDA9PT1YW2JdP2RlbGV0ZSBhW2JdOmFbYl09WFtiXTt2YXIgYz1bXTtmb3IoYiBpbiBhKWMucHVzaChgJHtifT0ke2FbYl19YCk7WT1jfXJldHVybiBZfSxZLERhPVtudWxsLFtdLFtdXSxFYT1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLEZhPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gR2EoYSl7dmFyIGI9QXJyYXkoVShhKSsxKTtWKGEsYiwwLGIubGVuZ3RoKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEhhKGEsYixjLGUpe2Z1bmN0aW9uIGcoZixuLHApe2ZvcihmPVwibnVtYmVyXCI9PXR5cGVvZiBmP2YudG9TdHJpbmcoKTpmfHxcIlwiO2YubGVuZ3RoPG47KWY9cFswXStmO3JldHVybiBmfWZ1bmN0aW9uIGgoZixuKXtyZXR1cm4gZyhmLG4sXCIwXCIpfWZ1bmN0aW9uIG0oZixuKXtmdW5jdGlvbiBwKHhhKXtyZXR1cm4gMD54YT8tMTowPHhhPzE6MH12YXIgejswPT09KHo9cChmLmdldEZ1bGxZZWFyKCktbi5nZXRGdWxsWWVhcigpKSkmJjA9PT0oej1wKGYuZ2V0TW9udGgoKS1uLmdldE1vbnRoKCkpKSYmKHo9cChmLmdldERhdGUoKS1uLmdldERhdGUoKSkpO3JldHVybiB6fWZ1bmN0aW9uIHEoZil7c3dpdGNoKGYuZ2V0RGF5KCkpe2Nhc2UgMDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gZjtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwwLDMpO2Nhc2UgMzpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLFxuMCwyKTtjYXNlIDQ6cmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwwLDEpO2Nhc2UgNTpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMzEpO2Nhc2UgNjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMzApfX1mdW5jdGlvbiB3KGYpe3ZhciBuPWYuRWE7Zm9yKGY9bmV3IERhdGUoKG5ldyBEYXRlKGYuRmErMTkwMCwwLDEpKS5nZXRUaW1lKCkpOzA8bjspe3ZhciBwPWYuZ2V0TW9udGgoKSx6PShXKGYuZ2V0RnVsbFllYXIoKSk/RWE6RmEpW3BdO2lmKG4+ei1mLmdldERhdGUoKSluLT16LWYuZ2V0RGF0ZSgpKzEsZi5zZXREYXRlKDEpLDExPnA/Zi5zZXRNb250aChwKzEpOihmLnNldE1vbnRoKDApLGYuc2V0RnVsbFllYXIoZi5nZXRGdWxsWWVhcigpKzEpKTtlbHNle2Yuc2V0RGF0ZShmLmdldERhdGUoKStuKTticmVha319cD1uZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkrMSwwLDQpO249cShuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDQpKTtwPXEocCk7cmV0dXJuIDA+PW0obixmKT8wPj1tKHAsZik/Zi5nZXRGdWxsWWVhcigpKzE6Zi5nZXRGdWxsWWVhcigpOmYuZ2V0RnVsbFllYXIoKS0xfWE+Pj49MDtiPj4+PTA7Yz4+Pj0wO2U+Pj49MDt2YXIgdD1MW2UrNDA+PjI+Pj4wXTtlPXtRYTpMW2U+PjI+Pj4wXSxQYTpMW2UrND4+Mj4+PjBdLEdhOkxbZSs4Pj4yPj4+MF0sSWE6TFtlKzEyPj4yPj4+MF0sSGE6TFtlKzE2Pj4yPj4+MF0sRmE6TFtlKzIwPj4yPj4+MF0semE6TFtlKzI0Pj4yPj4+MF0sRWE6TFtlKzI4Pj4yPj4+MF0sU2E6TFtlKzMyPj4yPj4+MF0sT2E6TFtlKzM2Pj4yPj4+MF0sUmE6dD9UKHQpOlwiXCJ9O2M9VChjKTt0PXtcIiVjXCI6XCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFwiJURcIjpcIiVtLyVkLyV5XCIsXCIlRlwiOlwiJVktJW0tJWRcIixcIiVoXCI6XCIlYlwiLFwiJXJcIjpcIiVJOiVNOiVTICVwXCIsXCIlUlwiOlwiJUg6JU1cIixcIiVUXCI6XCIlSDolTTolU1wiLFwiJXhcIjpcIiVtLyVkLyV5XCIsXCIlWFwiOlwiJUg6JU06JVNcIixcIiVFY1wiOlwiJWNcIixcblwiJUVDXCI6XCIlQ1wiLFwiJUV4XCI6XCIlbS8lZC8leVwiLFwiJUVYXCI6XCIlSDolTTolU1wiLFwiJUV5XCI6XCIleVwiLFwiJUVZXCI6XCIlWVwiLFwiJU9kXCI6XCIlZFwiLFwiJU9lXCI6XCIlZVwiLFwiJU9IXCI6XCIlSFwiLFwiJU9JXCI6XCIlSVwiLFwiJU9tXCI6XCIlbVwiLFwiJU9NXCI6XCIlTVwiLFwiJU9TXCI6XCIlU1wiLFwiJU91XCI6XCIldVwiLFwiJU9VXCI6XCIlVVwiLFwiJU9WXCI6XCIlVlwiLFwiJU93XCI6XCIld1wiLFwiJU9XXCI6XCIlV1wiLFwiJU95XCI6XCIleVwifTtmb3IodmFyIHUgaW4gdCljPWMucmVwbGFjZShuZXcgUmVnRXhwKHUsXCJnXCIpLHRbdV0pO3ZhciB5YT1cIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLHphPVwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTt0PXtcIiVhXCI6Zj0+eWFbZi56YV0uc3Vic3RyaW5nKDAsMyksXCIlQVwiOmY9PnlhW2YuemFdLFwiJWJcIjpmPT5cbnphW2YuSGFdLnN1YnN0cmluZygwLDMpLFwiJUJcIjpmPT56YVtmLkhhXSxcIiVDXCI6Zj0+aCgoZi5GYSsxOTAwKS8xMDB8MCwyKSxcIiVkXCI6Zj0+aChmLklhLDIpLFwiJWVcIjpmPT5nKGYuSWEsMixcIiBcIiksXCIlZ1wiOmY9PncoZikudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlR1wiOmY9PncoZiksXCIlSFwiOmY9PmgoZi5HYSwyKSxcIiVJXCI6Zj0+e2Y9Zi5HYTswPT1mP2Y9MTI6MTI8ZiYmKGYtPTEyKTtyZXR1cm4gaChmLDIpfSxcIiVqXCI6Zj0+e2Zvcih2YXIgbj0wLHA9MDtwPD1mLkhhLTE7bis9KFcoZi5GYSsxOTAwKT9FYTpGYSlbcCsrXSk7cmV0dXJuIGgoZi5JYStuLDMpfSxcIiVtXCI6Zj0+aChmLkhhKzEsMiksXCIlTVwiOmY9PmgoZi5QYSwyKSxcIiVuXCI6KCk9PlwiXFxuXCIsXCIlcFwiOmY9PjA8PWYuR2EmJjEyPmYuR2E/XCJBTVwiOlwiUE1cIixcIiVTXCI6Zj0+aChmLlFhLDIpLFwiJXRcIjooKT0+XCJcXHRcIixcIiV1XCI6Zj0+Zi56YXx8NyxcIiVVXCI6Zj0+aChNYXRoLmZsb29yKChmLkVhKzctZi56YSkvNyksMiksXCIlVlwiOmY9Plxue3ZhciBuPU1hdGguZmxvb3IoKGYuRWErNy0oZi56YSs2KSU3KS83KTsyPj0oZi56YSszNzEtZi5FYS0yKSU3JiZuKys7aWYobik1Mz09biYmKHA9KGYuemErMzcxLWYuRWEpJTcsND09cHx8Mz09cCYmVyhmLkZhKXx8KG49MSkpO2Vsc2V7bj01Mjt2YXIgcD0oZi56YSs3LWYuRWEtMSklNzsoND09cHx8NT09cCYmVyhmLkZhJTQwMC0xKSkmJm4rK31yZXR1cm4gaChuLDIpfSxcIiV3XCI6Zj0+Zi56YSxcIiVXXCI6Zj0+aChNYXRoLmZsb29yKChmLkVhKzctKGYuemErNiklNykvNyksMiksXCIleVwiOmY9PihmLkZhKzE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFwiJVlcIjpmPT5mLkZhKzE5MDAsXCIlelwiOmY9PntmPWYuT2E7dmFyIG49MDw9ZjtmPU1hdGguYWJzKGYpLzYwO3JldHVybihuP1wiK1wiOlwiLVwiKStTdHJpbmcoXCIwMDAwXCIrKGYvNjAqMTAwK2YlNjApKS5zbGljZSgtNCl9LFwiJVpcIjpmPT5mLlJhLFwiJSVcIjooKT0+XCIlXCJ9O2M9Yy5yZXBsYWNlKC8lJS9nLFwiXFx4MDBcXHgwMFwiKTtmb3IodSBpbiB0KWMuaW5jbHVkZXModSkmJlxuKGM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAodSxcImdcIiksdFt1XShlKSkpO2M9Yy5yZXBsYWNlKC9cXDBcXDAvZyxcIiVcIik7dT1HYShjKTtpZih1Lmxlbmd0aD5iKXJldHVybiAwO0ouc2V0KHUsYT4+PjApO3JldHVybiB1Lmxlbmd0aC0xfVxudmFyIEphPXthOmZ1bmN0aW9uKGEsYixjKXthPj4+PTA7KG5ldyBxYShhKSkuS2EoYj4+PjAsYz4+PjApO3JhPWE7c2ErKzt0aHJvdyByYTt9LGU6ZnVuY3Rpb24oKXtyZXR1cm4gMH0sSDpmdW5jdGlvbigpe30seDpmdW5jdGlvbigpe30sejpmdW5jdGlvbigpe30sazpmdW5jdGlvbigpe3JldHVybiAwfSxGOmZ1bmN0aW9uKCl7fSxCOmZ1bmN0aW9uKCl7fSxFOmZ1bmN0aW9uKCl7fSxnOmZ1bmN0aW9uKCl7fSx5OmZ1bmN0aW9uKCl7fSx2OmZ1bmN0aW9uKCl7fSxHOmZ1bmN0aW9uKCl7fSx3OmZ1bmN0aW9uKCl7fSxsOigpPT4hMCxvOmZ1bmN0aW9uKGEsYixjKXthPWIrMjA5NzE1Mj4+PjA8NDE5NDMwNS0hIWE/KGE+Pj4wKSs0Mjk0OTY3Mjk2KmI6TmFOO2M+Pj49MDthPW5ldyBEYXRlKDFFMyphKTtMW2M+PjI+Pj4wXT1hLmdldFVUQ1NlY29uZHMoKTtMW2MrND4+Mj4+PjBdPWEuZ2V0VVRDTWludXRlcygpO0xbYys4Pj4yPj4+MF09YS5nZXRVVENIb3VycygpO0xbYysxMj4+Mj4+PlxuMF09YS5nZXRVVENEYXRlKCk7TFtjKzE2Pj4yPj4+MF09YS5nZXRVVENNb250aCgpO0xbYysyMD4+Mj4+PjBdPWEuZ2V0VVRDRnVsbFllYXIoKS0xOTAwO0xbYysyND4+Mj4+PjBdPWEuZ2V0VVRDRGF5KCk7TFtjKzI4Pj4yPj4+MF09KGEuZ2V0VGltZSgpLURhdGUuVVRDKGEuZ2V0VVRDRnVsbFllYXIoKSwwLDEsMCwwLDAsMCkpLzg2NEU1fDB9LHA6ZnVuY3Rpb24oYSxiLGMpe2E9YisyMDk3MTUyPj4+MDw0MTk0MzA1LSEhYT8oYT4+PjApKzQyOTQ5NjcyOTYqYjpOYU47Yz4+Pj0wO2E9bmV3IERhdGUoMUUzKmEpO0xbYz4+Mj4+PjBdPWEuZ2V0U2Vjb25kcygpO0xbYys0Pj4yPj4+MF09YS5nZXRNaW51dGVzKCk7TFtjKzg+PjI+Pj4wXT1hLmdldEhvdXJzKCk7TFtjKzEyPj4yPj4+MF09YS5nZXREYXRlKCk7TFtjKzE2Pj4yPj4+MF09YS5nZXRNb250aCgpO0xbYysyMD4+Mj4+PjBdPWEuZ2V0RnVsbFllYXIoKS0xOTAwO0xbYysyND4+Mj4+PjBdPWEuZ2V0RGF5KCk7TFtjKzI4Pj4yPj4+XG4wXT0oVyhhLmdldEZ1bGxZZWFyKCkpP3ZhOndhKVthLmdldE1vbnRoKCldK2EuZ2V0RGF0ZSgpLTF8MDtMW2MrMzY+PjI+Pj4wXT0tKDYwKmEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7Yj0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGU9KG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpO0xbYyszMj4+Mj4+PjBdPShiIT1lJiZhLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKGUsYikpfDB9LHE6ZnVuY3Rpb24oYSl7YT4+Pj0wO3ZhciBiPW5ldyBEYXRlKExbYSsyMD4+Mj4+PjBdKzE5MDAsTFthKzE2Pj4yPj4+MF0sTFthKzEyPj4yPj4+MF0sTFthKzg+PjI+Pj4wXSxMW2ErND4+Mj4+PjBdLExbYT4+Mj4+PjBdLDApLGM9TFthKzMyPj4yPj4+MF0sZT1iLmdldFRpbWV6b25lT2Zmc2V0KCksZz0obmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCksXG5oPShuZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksMCwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSxtPU1hdGgubWluKGgsZyk7MD5jP0xbYSszMj4+Mj4+PjBdPU51bWJlcihnIT1oJiZtPT1lKTowPGMhPShtPT1lKSYmKGc9TWF0aC5tYXgoaCxnKSxiLnNldFRpbWUoYi5nZXRUaW1lKCkrNkU0KigoMDxjP206ZyktZSkpKTtMW2ErMjQ+PjI+Pj4wXT1iLmdldERheSgpO0xbYSsyOD4+Mj4+PjBdPShXKGIuZ2V0RnVsbFllYXIoKSk/dmE6d2EpW2IuZ2V0TW9udGgoKV0rYi5nZXREYXRlKCktMXwwO0xbYT4+Mj4+PjBdPWIuZ2V0U2Vjb25kcygpO0xbYSs0Pj4yPj4+MF09Yi5nZXRNaW51dGVzKCk7TFthKzg+PjI+Pj4wXT1iLmdldEhvdXJzKCk7TFthKzEyPj4yPj4+MF09Yi5nZXREYXRlKCk7TFthKzE2Pj4yPj4+MF09Yi5nZXRNb250aCgpO0xbYSsyMD4+Mj4+PjBdPWIuZ2V0WWVhcigpO2E9Yi5nZXRUaW1lKCkvMUUzO3JldHVybiBJYSgoUj1hLDE8PStNYXRoLmFicyhSKT8wPFI/K01hdGguZmxvb3IoUi9cbjQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKFItKyh+flI+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApKSxhPj4+MH0sbTpmdW5jdGlvbigpe3JldHVybi01Mn0sbjpmdW5jdGlvbigpe30sdDpmdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZSh3KXtyZXR1cm4odz13LnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLykpP3dbMV06XCJHTVRcIn1jPj4+PTA7dmFyIGc9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpLGg9bmV3IERhdGUoZywwLDEpLG09bmV3IERhdGUoZyw2LDEpO2c9aC5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBxPW0uZ2V0VGltZXpvbmVPZmZzZXQoKTtNW2E+Pj4wPj4yPj4+MF09NjAqTWF0aC5tYXgoZyxxKTtMW2I+Pj4wPj4yPj4+MF09TnVtYmVyKGchPXEpO2E9ZShoKTtiPWUobSk7YT1CYShhKTtiPUJhKGIpO3E8Zz8oTVtjPj4yPj4+MF09YSxNW2MrND4+Mj4+PjBdPWIpOihNW2M+PjI+Pj4wXT1iLE1bYys0Pj4yPj4+MF09YSl9LGQ6KCk9PntHKFwiXCIpfSxcbmg6ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX0sdTpmdW5jdGlvbigpe3JldHVybiA0Mjk0OTAxNzYwfSxiOigpPT5wZXJmb3JtYW5jZS5ub3coKSxJOmZ1bmN0aW9uKGEsYixjKXtiPj4+PTA7cmV0dXJuIEsuY29weVdpdGhpbihhPj4+MD4+PjAsYj4+PjAsYisoYz4+PjApPj4+MCl9LHM6ZnVuY3Rpb24oYSl7YT4+Pj0wO3ZhciBiPUsubGVuZ3RoO2lmKDQyOTQ5MDE3NjA8YSlyZXR1cm4hMTtmb3IodmFyIGM9MTs0Pj1jO2MqPTIpe3ZhciBlPWIqKDErLjIvYyk7ZT1NYXRoLm1pbihlLGErMTAwNjYzMjk2KTt2YXIgZz1NYXRoO2U9TWF0aC5tYXgoYSxlKTthOntnPWcubWluLmNhbGwoZyw0Mjk0OTAxNzYwLGUrKDY1NTM2LWUlNjU1MzYpJTY1NTM2KS1ILmJ1ZmZlci5ieXRlTGVuZ3RoKzY1NTM1Pj4+MTY7dHJ5e0guZ3JvdyhnKTtlYSgpO3ZhciBoPTE7YnJlYWsgYX1jYXRjaChtKXt9aD12b2lkIDB9aWYoaClyZXR1cm4hMH1yZXR1cm4hMX0sQzpmdW5jdGlvbihhLGIpe2E+Pj49XG4wO2I+Pj49MDt2YXIgYz0wO0NhKCkuZm9yRWFjaChmdW5jdGlvbihlLGcpe3ZhciBoPWIrYztnPU1bYSs0Kmc+PjI+Pj4wXT1oO2ZvcihoPTA7aDxlLmxlbmd0aDsrK2gpSltnKys+PjA+Pj4wXT1lLmNoYXJDb2RlQXQoaCk7SltnPj4wPj4+MF09MDtjKz1lLmxlbmd0aCsxfSk7cmV0dXJuIDB9LEQ6ZnVuY3Rpb24oYSxiKXthPj4+PTA7Yj4+Pj0wO3ZhciBjPUNhKCk7TVthPj4yPj4+MF09Yy5sZW5ndGg7dmFyIGU9MDtjLmZvckVhY2goZnVuY3Rpb24oZyl7ZSs9Zy5sZW5ndGgrMX0pO01bYj4+Mj4+PjBdPWU7cmV0dXJuIDB9LGY6KCk9PjUyLGo6ZnVuY3Rpb24oKXtyZXR1cm4gNTJ9LHI6ZnVuY3Rpb24oKXtyZXR1cm4gNzB9LGk6ZnVuY3Rpb24oYSxiLGMsZSl7Yj4+Pj0wO2M+Pj49MDtlPj4+PTA7Zm9yKHZhciBnPTAsaD0wO2g8YztoKyspe3ZhciBtPU1bYj4+Mj4+PjBdLHE9TVtiKzQ+PjI+Pj4wXTtiKz04O2Zvcih2YXIgdz0wO3c8cTt3Kyspe3ZhciB0PUtbbSt3Pj4+MF0sdT1cbkRhW2FdOzA9PT10fHwxMD09PXQ/KCgxPT09YT9jYTpFKSh1YSh1LDApKSx1Lmxlbmd0aD0wKTp1LnB1c2godCl9Zys9cX1NW2U+PjI+Pj4wXT1nO3JldHVybiAwfSxBOkhhLGM6ZnVuY3Rpb24oYSxiLGMsZSl7cmV0dXJuIEhhKGE+Pj4wLGI+Pj4wLGM+Pj4wLGU+Pj4wKX19O1xuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShjKXtjPWMuZXhwb3J0cztJPWM9S2EoYyk7SD1JLko7ZWEoKTtoYS51bnNoaWZ0KEkuSyk7Ti0tO2QubW9uaXRvclJ1bkRlcGVuZGVuY2llcyYmZC5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKE4pO2lmKDA9PU4mJihudWxsIT09TyYmKGNsZWFySW50ZXJ2YWwoTyksTz1udWxsKSxQKSl7dmFyIGU9UDtQPW51bGw7ZSgpfXJldHVybiBjfXZhciBiPXthOkphfTtOKys7ZC5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZkLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoTik7aWYoZC5pbnN0YW50aWF0ZVdhc20pdHJ5e3JldHVybiBkLmluc3RhbnRpYXRlV2FzbShiLGEpfWNhdGNoKGMpe0UoXCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiBcIitjKSxsKGMpfXBhKGIsZnVuY3Rpb24oYyl7YShjLmluc3RhbmNlKX0pLmNhdGNoKGwpO3JldHVybnt9fSkoKTtcbmQuX09ydEluaXQ9KGEsYik9PihkLl9PcnRJbml0PUkuTCkoYSxiKTtkLl9PcnRHZXRMYXN0RXJyb3I9KGEsYik9PihkLl9PcnRHZXRMYXN0RXJyb3I9SS5NKShhLGIpO2QuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxlLGcsaCxtLHEsdyx0KT0+KGQuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPUkuTikoYSxiLGMsZSxnLGgsbSxxLHcsdCk7ZC5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXI9KGEsYik9PihkLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj1JLk8pKGEsYik7ZC5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlPShhLGIsYyk9PihkLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9SS5QKShhLGIsYyk7ZC5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5PShhLGIsYyk9PihkLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9SS5RKShhLGIsYyk7ZC5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zPWE9PihkLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9SS5SKShhKTtcbmQuX09ydENyZWF0ZVNlc3Npb249KGEsYixjKT0+KGQuX09ydENyZWF0ZVNlc3Npb249SS5TKShhLGIsYyk7ZC5fT3J0UmVsZWFzZVNlc3Npb249YT0+KGQuX09ydFJlbGVhc2VTZXNzaW9uPUkuVCkoYSk7ZC5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD0oYSxiLGMpPT4oZC5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD1JLlUpKGEsYixjKTtkLl9PcnRHZXRJbnB1dE5hbWU9KGEsYik9PihkLl9PcnRHZXRJbnB1dE5hbWU9SS5WKShhLGIpO2QuX09ydEdldE91dHB1dE5hbWU9KGEsYik9PihkLl9PcnRHZXRPdXRwdXROYW1lPUkuVykoYSxiKTtkLl9PcnRGcmVlPWE9PihkLl9PcnRGcmVlPUkuWCkoYSk7ZC5fT3J0Q3JlYXRlVGVuc29yPShhLGIsYyxlLGcsaCk9PihkLl9PcnRDcmVhdGVUZW5zb3I9SS5ZKShhLGIsYyxlLGcsaCk7ZC5fT3J0R2V0VGVuc29yRGF0YT0oYSxiLGMsZSxnKT0+KGQuX09ydEdldFRlbnNvckRhdGE9SS5aKShhLGIsYyxlLGcpO1xuZC5fT3J0UmVsZWFzZVRlbnNvcj1hPT4oZC5fT3J0UmVsZWFzZVRlbnNvcj1JLl8pKGEpO2QuX09ydENyZWF0ZVJ1bk9wdGlvbnM9KGEsYixjLGUpPT4oZC5fT3J0Q3JlYXRlUnVuT3B0aW9ucz1JLiQpKGEsYixjLGUpO2QuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5PShhLGIsYyk9PihkLl9PcnRBZGRSdW5Db25maWdFbnRyeT1JLmFhKShhLGIsYyk7ZC5fT3J0UmVsZWFzZVJ1bk9wdGlvbnM9YT0+KGQuX09ydFJlbGVhc2VSdW5PcHRpb25zPUkuYmEpKGEpO2QuX09ydENyZWF0ZUJpbmRpbmc9YT0+KGQuX09ydENyZWF0ZUJpbmRpbmc9SS5jYSkoYSk7ZC5fT3J0QmluZElucHV0PShhLGIsYyk9PihkLl9PcnRCaW5kSW5wdXQ9SS5kYSkoYSxiLGMpO2QuX09ydEJpbmRPdXRwdXQ9KGEsYixjLGUpPT4oZC5fT3J0QmluZE91dHB1dD1JLmVhKShhLGIsYyxlKTtkLl9PcnRDbGVhckJvdW5kT3V0cHV0cz1hPT4oZC5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9SS5mYSkoYSk7XG5kLl9PcnRSZWxlYXNlQmluZGluZz1hPT4oZC5fT3J0UmVsZWFzZUJpbmRpbmc9SS5nYSkoYSk7ZC5fT3J0UnVuV2l0aEJpbmRpbmc9KGEsYixjLGUsZyk9PihkLl9PcnRSdW5XaXRoQmluZGluZz1JLmhhKShhLGIsYyxlLGcpO2QuX09ydFJ1bj0oYSxiLGMsZSxnLGgsbSxxKT0+KGQuX09ydFJ1bj1JLmlhKShhLGIsYyxlLGcsaCxtLHEpO2QuX09ydEVuZFByb2ZpbGluZz1hPT4oZC5fT3J0RW5kUHJvZmlsaW5nPUkuamEpKGEpO2QuX09ydFRyYWluaW5nTG9hZENoZWNrcG9pbnQ9KGEsYik9PihkLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50PUkua2EpKGEsYik7ZC5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludD1hPT4oZC5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludD1JLmxhKShhKTtkLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb249KGEsYixjLGUsZyxoLG0scSk9PihkLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb249SS5tYSkoYSxiLGMsZSxnLGgsbSxxKTtcbmQuX09ydFRyYWluaW5nTGF6eVJlc2V0R3JhZD1hPT4oZC5fT3J0VHJhaW5pbmdMYXp5UmVzZXRHcmFkPUkubmEpKGEpO2QuX09ydFRyYWluaW5nUnVuVHJhaW5TdGVwPShhLGIsYyxlLGcsaCk9PihkLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcD1JLm9hKShhLGIsYyxlLGcsaCk7ZC5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwPShhLGIpPT4oZC5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwPUkucGEpKGEsYik7ZC5fT3J0VHJhaW5pbmdFdmFsU3RlcD0oYSxiLGMsZSxnLGgpPT4oZC5fT3J0VHJhaW5pbmdFdmFsU3RlcD1JLnFhKShhLGIsYyxlLGcsaCk7ZC5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZT0oYSxiLGMpPT4oZC5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZT1JLnJhKShhLGIsYyk7ZC5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc1RvQnVmZmVyPShhLGIsYyxlKT0+KGQuX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNUb0J1ZmZlcj1JLnNhKShhLGIsYyxlKTtcbmQuX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNGcm9tQnVmZmVyPShhLGIsYyxlKT0+KGQuX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNGcm9tQnVmZmVyPUkudGEpKGEsYixjLGUpO2QuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dENvdW50PShhLGIsYyxlKT0+KGQuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dENvdW50PUkudWEpKGEsYixjLGUpO2QuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dE5hbWU9KGEsYixjLGUpPT4oZC5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0TmFtZT1JLnZhKShhLGIsYyxlKTtkLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uPWE9PihkLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uPUkud2EpKGEpO3ZhciBBYT1kLl9tYWxsb2M9YT0+KEFhPWQuX21hbGxvYz1JLnhhKShhKTtkLl9mcmVlPWE9PihkLl9mcmVlPUkueWEpKGEpO1xudmFyIElhPWE9PihJYT1JLkFhKShhKSxMYT0oKT0+KExhPUkuQmEpKCksTWE9YT0+KE1hPUkuQ2EpKGEpLE5hPWE9PihOYT1JLkRhKShhKTtmdW5jdGlvbiBLYShhKXthPU9iamVjdC5hc3NpZ24oe30sYSk7dmFyIGI9ZT0+KCk9PmUoKT4+PjAsYz1lPT5nPT5lKGcpPj4+MDthLl9fZXJybm9fbG9jYXRpb249YihhLl9fZXJybm9fbG9jYXRpb24pO2EubWFsbG9jPWMoYS5tYWxsb2MpO2Euc3RhY2tTYXZlPWIoYS5zdGFja1NhdmUpO2Euc3RhY2tBbGxvYz1jKGEuc3RhY2tBbGxvYyk7cmV0dXJuIGF9ZC5zdGFja0FsbG9jPU5hO2Quc3RhY2tTYXZlPUxhO2Quc3RhY2tSZXN0b3JlPU1hO2QuVVRGOFRvU3RyaW5nPVQ7ZC5zdHJpbmdUb1VURjg9KGEsYixjKT0+VihhLEssYixjKTtkLmxlbmd0aEJ5dGVzVVRGOD1VO3ZhciBaO1A9ZnVuY3Rpb24gT2EoKXtafHxQYSgpO1p8fChQPU9hKX07XG5mdW5jdGlvbiBQYSgpe2Z1bmN0aW9uIGEoKXtpZighWiYmKFo9ITAsZC5jYWxsZWRSdW49ITAsIWRhKSl7UyhoYSk7ayhkKTtpZihkLm9uUnVudGltZUluaXRpYWxpemVkKWQub25SdW50aW1lSW5pdGlhbGl6ZWQoKTtpZihkLnBvc3RSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIGQucG9zdFJ1biYmKGQucG9zdFJ1bj1bZC5wb3N0UnVuXSk7ZC5wb3N0UnVuLmxlbmd0aDspe3ZhciBiPWQucG9zdFJ1bi5zaGlmdCgpO2lhLnVuc2hpZnQoYil9UyhpYSl9fWlmKCEoMDxOKSl7aWYoZC5wcmVSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIGQucHJlUnVuJiYoZC5wcmVSdW49W2QucHJlUnVuXSk7ZC5wcmVSdW4ubGVuZ3RoOylqYSgpO1MoZmEpOzA8Tnx8KGQuc2V0U3RhdHVzPyhkLnNldFN0YXR1cyhcIlJ1bm5pbmcuLi5cIiksc2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtkLnNldFN0YXR1cyhcIlwiKX0sMSk7YSgpfSwxKSk6YSgpKX19XG5pZihkLnByZUluaXQpZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIGQucHJlSW5pdCYmKGQucHJlSW5pdD1bZC5wcmVJbml0XSk7MDxkLnByZUluaXQubGVuZ3RoOylkLnByZUluaXQucG9wKCkoKTtQYSgpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuXG4pO1xufSkoKTtcbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gb3J0V2FzbTtcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSlcbiAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtKTtcbiIsICIiLCAiIiwgImV4cG9ydCBjb25zdCBjcHVzID0gdW5kZWZpbmVkOyIsICJcbnZhciBvcnRXYXNtVGhyZWFkZWQgPSAoKCkgPT4ge1xuICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09ICd1bmRlZmluZWQnKSBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICByZXR1cm4gKFxuZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcblxuZnVuY3Rpb24gYWEoKXtkLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gbH1mdW5jdGlvbiBuKCl7ZC5idWZmZXIhPWwuYnVmZmVyJiZtKCk7cmV0dXJuIGJhfWZ1bmN0aW9uIHAoKXtkLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gY2F9ZnVuY3Rpb24gcigpe2QuYnVmZmVyIT1sLmJ1ZmZlciYmbSgpO3JldHVybiBkYX1mdW5jdGlvbiBlYSgpe2QuYnVmZmVyIT1sLmJ1ZmZlciYmbSgpO3JldHVybiBmYX12YXIgdz1tb2R1bGVBcmcsaGEseDt3LnJlYWR5PW5ldyBQcm9taXNlKChhLGIpPT57aGE9YTt4PWJ9KTtcbnZhciBpYT1PYmplY3QuYXNzaWduKHt9LHcpLGphPVwiLi90aGlzLnByb2dyYW1cIix6PShhLGIpPT57dGhyb3cgYjt9LGthPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3csQT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzLEI9XCJvYmplY3RcIj09dHlwZW9mIHByb2Nlc3MmJlwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzLnZlcnNpb25zJiZcInN0cmluZ1wiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLEQ9dy5FTlZJUk9OTUVOVF9JU19QVEhSRUFEfHwhMSxFPVwiXCI7ZnVuY3Rpb24gbGEoYSl7cmV0dXJuIHcubG9jYXRlRmlsZT93LmxvY2F0ZUZpbGUoYSxFKTpFK2F9dmFyIG1hLEYsSDtcbmlmKEIpe3ZhciBmcz1yZXF1aXJlKFwiZnNcIiksbmE9cmVxdWlyZShcInBhdGhcIik7RT1BP25hLmRpcm5hbWUoRSkrXCIvXCI6X19kaXJuYW1lK1wiL1wiO21hPShiLGMpPT57Yj1iLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpP25ldyBVUkwoYik6bmEubm9ybWFsaXplKGIpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoYixjP3ZvaWQgMDpcInV0ZjhcIil9O0g9Yj0+e2I9bWEoYiwhMCk7Yi5idWZmZXJ8fChiPW5ldyBVaW50OEFycmF5KGIpKTtyZXR1cm4gYn07Rj0oYixjLGUsaD0hMCk9PntiPWIuc3RhcnRzV2l0aChcImZpbGU6Ly9cIik/bmV3IFVSTChiKTpuYS5ub3JtYWxpemUoYik7ZnMucmVhZEZpbGUoYixoP3ZvaWQgMDpcInV0ZjhcIiwoZyxrKT0+e2c/ZShnKTpjKGg/ay5idWZmZXI6ayl9KX07IXcudGhpc1Byb2dyYW0mJjE8cHJvY2Vzcy5hcmd2Lmxlbmd0aCYmKGphPXByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpKTtwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7ej0oYixjKT0+e3Byb2Nlc3MuZXhpdENvZGU9XG5iO3Rocm93IGM7fTt3Lmluc3BlY3Q9KCk9PlwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtsZXQgYTt0cnl7YT1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIil9Y2F0Y2goYil7dGhyb3cgY29uc29sZS5lcnJvcignVGhlIFwid29ya2VyX3RocmVhZHNcIiBtb2R1bGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIG5vZGUuanMgYnVpbGQgLSBwZXJoYXBzIGEgbmV3ZXIgdmVyc2lvbiBpcyBuZWVkZWQ/JyksYjt9Z2xvYmFsLldvcmtlcj1hLldvcmtlcn1lbHNlIGlmKGthfHxBKUE/RT1zZWxmLmxvY2F0aW9uLmhyZWY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYoRT1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksKHR5cGVvZiBfc2NyaXB0RGlyICE9PSBcInVuZGVmaW5lZFwiICYmIF9zY3JpcHREaXIpJiYoRT1fc2NyaXB0RGlyKSwwIT09RS5pbmRleE9mKFwiYmxvYjpcIik/RT1FLnN1YnN0cigwLEUucmVwbGFjZSgvWz8jXS4qLyxcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikrMSk6RT1cIlwiLEJ8fChtYT1hPT57dmFyIGI9XG5uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5zZW5kKG51bGwpO3JldHVybiBiLnJlc3BvbnNlVGV4dH0sQSYmKEg9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Yi5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKX0pLEY9KGEsYixjKT0+e3ZhciBlPW5ldyBYTUxIdHRwUmVxdWVzdDtlLm9wZW4oXCJHRVRcIixhLCEwKTtlLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7ZS5vbmxvYWQ9KCk9PnsyMDA9PWUuc3RhdHVzfHwwPT1lLnN0YXR1cyYmZS5yZXNwb25zZT9iKGUucmVzcG9uc2UpOmMoKX07ZS5vbmVycm9yPWM7ZS5zZW5kKG51bGwpfSk7QiYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIHBlcmZvcm1hbmNlJiYoZ2xvYmFsLnBlcmZvcm1hbmNlPXJlcXVpcmUoXCJwZXJmX2hvb2tzXCIpLnBlcmZvcm1hbmNlKTtcbnZhciBvYT1jb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLHBhPWNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtCJiYob2E9KC4uLmEpPT5mcy53cml0ZVN5bmMoMSxhLmpvaW4oXCIgXCIpK1wiXFxuXCIpLHBhPSguLi5hKT0+ZnMud3JpdGVTeW5jKDIsYS5qb2luKFwiIFwiKStcIlxcblwiKSk7dmFyIHFhPXcucHJpbnR8fG9hLEk9dy5wcmludEVycnx8cGE7T2JqZWN0LmFzc2lnbih3LGlhKTtpYT1udWxsO3cudGhpc1Byb2dyYW0mJihqYT13LnRoaXNQcm9ncmFtKTt3LnF1aXQmJih6PXcucXVpdCk7dmFyIEo7dy53YXNtQmluYXJ5JiYoSj13Lndhc21CaW5hcnkpO3ZhciBub0V4aXRSdW50aW1lPXcubm9FeGl0UnVudGltZXx8ITA7XCJvYmplY3RcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZLKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgZCxMLHJhLE09ITEsTixsLGJhLGNhLGRhLGZhO1xuZnVuY3Rpb24gbSgpe3ZhciBhPWQuYnVmZmVyO3cuSEVBUDg9bD1uZXcgSW50OEFycmF5KGEpO3cuSEVBUDE2PW5ldyBJbnQxNkFycmF5KGEpO3cuSEVBUDMyPWNhPW5ldyBJbnQzMkFycmF5KGEpO3cuSEVBUFU4PWJhPW5ldyBVaW50OEFycmF5KGEpO3cuSEVBUFUxNj1uZXcgVWludDE2QXJyYXkoYSk7dy5IRUFQVTMyPWRhPW5ldyBVaW50MzJBcnJheShhKTt3LkhFQVBGMzI9bmV3IEZsb2F0MzJBcnJheShhKTt3LkhFQVBGNjQ9ZmE9bmV3IEZsb2F0NjRBcnJheShhKX12YXIgTz13LklOSVRJQUxfTUVNT1JZfHwxNjc3NzIxNjs1MjQyODgwPD1PfHxLKFwiSU5JVElBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFNUQUNLX1NJWkUsIHdhcyBcIitPK1wiISAoU1RBQ0tfU0laRT01MjQyODgwKVwiKTtcbmlmKEQpZD13Lndhc21NZW1vcnk7ZWxzZSBpZih3Lndhc21NZW1vcnkpZD13Lndhc21NZW1vcnk7ZWxzZSBpZihkPW5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe2luaXRpYWw6Ty82NTUzNixtYXhpbXVtOjY1NTM2LHNoYXJlZDohMH0pLCEoZC5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpdGhyb3cgSShcInJlcXVlc3RlZCBhIHNoYXJlZCBXZWJBc3NlbWJseS5NZW1vcnkgYnV0IHRoZSByZXR1cm5lZCBidWZmZXIgaXMgbm90IGEgU2hhcmVkQXJyYXlCdWZmZXIsIGluZGljYXRpbmcgdGhhdCB3aGlsZSB0aGUgYnJvd3NlciBoYXMgU2hhcmVkQXJyYXlCdWZmZXIgaXQgZG9lcyBub3QgaGF2ZSBXZWJBc3NlbWJseSB0aHJlYWRzIHN1cHBvcnQgLSB5b3UgbWF5IG5lZWQgdG8gc2V0IGEgZmxhZ1wiKSxCJiZJKFwiKG9uIG5vZGUgeW91IG1heSBuZWVkOiAtLWV4cGVyaW1lbnRhbC13YXNtLXRocmVhZHMgLS1leHBlcmltZW50YWwtd2FzbS1idWxrLW1lbW9yeSBhbmQvb3IgcmVjZW50IHZlcnNpb24pXCIpLFxuRXJyb3IoXCJiYWQgbWVtb3J5XCIpO20oKTtPPWQuYnVmZmVyLmJ5dGVMZW5ndGg7dmFyIHNhLHRhPVtdLHVhPVtdLHZhPVtdLHdhPTA7ZnVuY3Rpb24gUCgpe3JldHVybiBub0V4aXRSdW50aW1lfHwwPHdhfXZhciBRPTAseGE9bnVsbCxSPW51bGw7ZnVuY3Rpb24geWEoKXtRKys7dy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZ3Lm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoUSl9ZnVuY3Rpb24gemEoKXtRLS07dy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZ3Lm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoUSk7aWYoMD09USYmKG51bGwhPT14YSYmKGNsZWFySW50ZXJ2YWwoeGEpLHhhPW51bGwpLFIpKXt2YXIgYT1SO1I9bnVsbDthKCl9fVxuZnVuY3Rpb24gSyhhKXtpZih3Lm9uQWJvcnQpdy5vbkFib3J0KGEpO2E9XCJBYm9ydGVkKFwiK2ErXCIpXCI7SShhKTtNPSEwO049MTthPW5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYStcIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIik7eChhKTt0aHJvdyBhO31mdW5jdGlvbiBBYShhKXtyZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKX12YXIgUztTPVwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiO0FhKFMpfHwoUz1sYShTKSk7ZnVuY3Rpb24gQmEoYSl7aWYoYT09UyYmSilyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSik7aWYoSClyZXR1cm4gSChhKTt0aHJvd1wiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIjt9XG5mdW5jdGlvbiBDYShhKXtpZighSiYmKGthfHxBKSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZmV0Y2gmJiFhLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpKXJldHVybiBmZXRjaChhLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGI9PntpZighYi5vayl0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrYStcIidcIjtyZXR1cm4gYi5hcnJheUJ1ZmZlcigpfSkuY2F0Y2goKCk9PkJhKGEpKTtpZihGKXJldHVybiBuZXcgUHJvbWlzZSgoYixjKT0+e0YoYSxlPT5iKG5ldyBVaW50OEFycmF5KGUpKSxjKX0pfXJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5CYShhKSl9ZnVuY3Rpb24gRGEoYSxiLGMpe3JldHVybiBDYShhKS50aGVuKGU9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGUsYikpLnRoZW4oZT0+ZSkudGhlbihjLGU9PntJKFwiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogXCIrZSk7SyhlKX0pfVxuZnVuY3Rpb24gRWEoYSxiKXt2YXIgYz1TO3JldHVybiBKfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ3x8QWEoYyl8fGMuc3RhcnRzV2l0aChcImZpbGU6Ly9cIil8fEJ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGZldGNoP0RhKGMsYSxiKTpmZXRjaChjLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGU9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGUsYSkudGhlbihiLGZ1bmN0aW9uKGgpe0koXCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogXCIraCk7SShcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO3JldHVybiBEYShjLGEsYil9KSl9dmFyIFQ7ZnVuY3Rpb24gVShhKXt0aGlzLm5hbWU9XCJFeGl0U3RhdHVzXCI7dGhpcy5tZXNzYWdlPWBQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KCR7YX0pYDt0aGlzLnN0YXR1cz1hfVxuZnVuY3Rpb24gRmEoYSl7YS50ZXJtaW5hdGUoKTthLm9ubWVzc2FnZT0oKT0+e319ZnVuY3Rpb24gR2EoYSl7KGE9Vi5MYVthXSl8fEsoKTtWLmxiKGEpfWZ1bmN0aW9uIEhhKGEpe3ZhciBiPVYuZmIoKTtpZighYilyZXR1cm4gNjtWLk9hLnB1c2goYik7Vi5MYVthLk5hXT1iO2IuTmE9YS5OYTt2YXIgYz17Y21kOlwicnVuXCIsc3RhcnRfcm91dGluZTphLm1iLGFyZzphLmViLHB0aHJlYWRfcHRyOmEuTmF9O0ImJmIudW5yZWYoKTtiLnBvc3RNZXNzYWdlKGMsYS5zYik7cmV0dXJuIDB9XG52YXIgSWE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dm9pZCAwLEphPShhLGIsYyk9PntiPj4+PTA7dmFyIGU9YitjO2ZvcihjPWI7YVtjXSYmIShjPj1lKTspKytjO2lmKDE2PGMtYiYmYS5idWZmZXImJklhKXJldHVybiBJYS5kZWNvZGUoYS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj9hLnNsaWNlKGIsYyk6YS5zdWJhcnJheShiLGMpKTtmb3IoZT1cIlwiO2I8Yzspe3ZhciBoPWFbYisrXTtpZihoJjEyOCl7dmFyIGc9YVtiKytdJjYzO2lmKDE5Mj09KGgmMjI0KSllKz1TdHJpbmcuZnJvbUNoYXJDb2RlKChoJjMxKTw8NnxnKTtlbHNle3ZhciBrPWFbYisrXSY2MztoPTIyND09KGgmMjQwKT8oaCYxNSk8PDEyfGc8PDZ8azooaCY3KTw8MTh8Zzw8MTJ8azw8NnxhW2IrK10mNjM7NjU1MzY+aD9lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGgpOihoLT02NTUzNixlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGg+PlxuMTAsNTYzMjB8aCYxMDIzKSl9fWVsc2UgZSs9U3RyaW5nLmZyb21DaGFyQ29kZShoKX1yZXR1cm4gZX0sS2E9KGEsYik9PihhPj4+PTApP0phKG4oKSxhLGIpOlwiXCI7ZnVuY3Rpb24gTGEoYSl7aWYoRClyZXR1cm4gVygxLDEsYSk7Tj1hO2lmKCFQKCkpe1YubmIoKTtpZih3Lm9uRXhpdCl3Lm9uRXhpdChhKTtNPSEwfXooYSxuZXcgVShhKSl9XG52YXIgTmE9YT0+e049YTtpZihEKXRocm93IE1hKGEpLFwidW53aW5kXCI7TGEoYSl9LFY9e1JhOltdLE9hOltdLFphOltdLExhOnt9LFZhOmZ1bmN0aW9uKCl7RD9WLmhiKCk6Vi5nYigpfSxnYjpmdW5jdGlvbigpe3RhLnVuc2hpZnQoKCk9Pnt5YSgpO1YuaWIoKCk9PnphKCkpfSl9LGhiOmZ1bmN0aW9uKCl7Vi5yZWNlaXZlT2JqZWN0VHJhbnNmZXI9Vi5rYjtWLnRocmVhZEluaXRUTFM9Vi5ZYTtWLnNldEV4aXRTdGF0dXM9Vi5YYTtub0V4aXRSdW50aW1lPSExfSxYYTpmdW5jdGlvbihhKXtOPWF9LHhiOltcIiR0ZXJtaW5hdGVXb3JrZXJcIl0sbmI6ZnVuY3Rpb24oKXtmb3IodmFyIGEgb2YgVi5PYSlGYShhKTtmb3IoYSBvZiBWLlJhKUZhKGEpO1YuUmE9W107Vi5PYT1bXTtWLkxhPVtdfSxsYjpmdW5jdGlvbihhKXt2YXIgYj1hLk5hO2RlbGV0ZSBWLkxhW2JdO1YuUmEucHVzaChhKTtWLk9hLnNwbGljZShWLk9hLmluZGV4T2YoYSksMSk7YS5OYT0wO09hKGIpfSxrYjpmdW5jdGlvbigpe30sXG5ZYTpmdW5jdGlvbigpe1YuWmEuZm9yRWFjaChhPT5hKCkpfSxqYjphPT5uZXcgUHJvbWlzZShiPT57YS5vbm1lc3NhZ2U9Zz0+e2c9Zy5kYXRhO3ZhciBrPWcuY21kO2lmKGcudGFyZ2V0VGhyZWFkJiZnLnRhcmdldFRocmVhZCE9WCgpKXt2YXIgdD1WLkxhW2cud2JdO3Q/dC5wb3N0TWVzc2FnZShnLGcudHJhbnNmZXJMaXN0KTpJKCdJbnRlcm5hbCBlcnJvciEgV29ya2VyIHNlbnQgYSBtZXNzYWdlIFwiJytrKydcIiB0byB0YXJnZXQgcHRocmVhZCAnK2cudGFyZ2V0VGhyZWFkK1wiLCBidXQgdGhhdCB0aHJlYWQgbm8gbG9uZ2VyIGV4aXN0cyFcIil9ZWxzZSBpZihcImNoZWNrTWFpbGJveFwiPT09aylZKCk7ZWxzZSBpZihcInNwYXduVGhyZWFkXCI9PT1rKUhhKGcpO2Vsc2UgaWYoXCJjbGVhbnVwVGhyZWFkXCI9PT1rKUdhKGcudGhyZWFkKTtlbHNlIGlmKFwia2lsbFRocmVhZFwiPT09aylnPWcudGhyZWFkLGs9Vi5MYVtnXSxkZWxldGUgVi5MYVtnXSxGYShrKSxPYShnKSxWLk9hLnNwbGljZShWLk9hLmluZGV4T2YoayksXG4xKSxrLk5hPTA7ZWxzZSBpZihcImNhbmNlbFRocmVhZFwiPT09aylWLkxhW2cudGhyZWFkXS5wb3N0TWVzc2FnZSh7Y21kOlwiY2FuY2VsXCJ9KTtlbHNlIGlmKFwibG9hZGVkXCI9PT1rKWEubG9hZGVkPSEwLGIoYSk7ZWxzZSBpZihcImFsZXJ0XCI9PT1rKWFsZXJ0KFwiVGhyZWFkIFwiK2cudGhyZWFkSWQrXCI6IFwiK2cudGV4dCk7ZWxzZSBpZihcInNldGltbWVkaWF0ZVwiPT09Zy50YXJnZXQpYS5wb3N0TWVzc2FnZShnKTtlbHNlIGlmKFwiY2FsbEhhbmRsZXJcIj09PWspd1tnLmhhbmRsZXJdKC4uLmcuYXJncyk7ZWxzZSBrJiZJKFwid29ya2VyIHNlbnQgYW4gdW5rbm93biBjb21tYW5kIFwiK2spfTthLm9uZXJyb3I9Zz0+e0koXCJ3b3JrZXIgc2VudCBhbiBlcnJvciEgXCIrZy5maWxlbmFtZStcIjpcIitnLmxpbmVubytcIjogXCIrZy5tZXNzYWdlKTt0aHJvdyBnO307QiYmKGEub24oXCJtZXNzYWdlXCIsZnVuY3Rpb24oZyl7YS5vbm1lc3NhZ2Uoe2RhdGE6Z30pfSksYS5vbihcImVycm9yXCIsZnVuY3Rpb24oZyl7YS5vbmVycm9yKGcpfSkpO1xudmFyIGM9W10sZT1bXCJvbkV4aXRcIixcIm9uQWJvcnRcIixcInByaW50XCIsXCJwcmludEVyclwiXSxoO2ZvcihoIG9mIGUpdy5oYXNPd25Qcm9wZXJ0eShoKSYmYy5wdXNoKGgpO2EucG9zdE1lc3NhZ2Uoe2NtZDpcImxvYWRcIixoYW5kbGVyczpjLHVybE9yQmxvYjp3Lm1haW5TY3JpcHRVcmxPckJsb2J8fF9zY3JpcHREaXIsd2FzbU1lbW9yeTpkLHdhc21Nb2R1bGU6cmF9KX0pLGliOmZ1bmN0aW9uKGEpe2EoKX0sY2I6ZnVuY3Rpb24oKXt2YXIgYT1sYShcIm9ydC13YXNtLXRocmVhZGVkLndvcmtlci5qc1wiKTthPW5ldyBXb3JrZXIoYSk7Vi5SYS5wdXNoKGEpfSxmYjpmdW5jdGlvbigpezA9PVYuUmEubGVuZ3RoJiYoVi5jYigpLFYuamIoVi5SYVswXSkpO3JldHVybiBWLlJhLnBvcCgpfX07dy5QVGhyZWFkPVY7dmFyIFBhPWE9Pntmb3IoOzA8YS5sZW5ndGg7KWEuc2hpZnQoKSh3KX07XG53LmVzdGFibGlzaFN0YWNrU3BhY2U9ZnVuY3Rpb24oKXt2YXIgYT1YKCksYj1wKClbYSs1Mj4+Mj4+PjBdO2E9cCgpW2ErNTY+PjI+Pj4wXTtRYShiLGItYSk7UmEoYil9O2Z1bmN0aW9uIE1hKGEpe2lmKEQpcmV0dXJuIFcoMiwwLGEpO05hKGEpfXZhciBTYT1bXTt3Lmludm9rZUVudHJ5UG9pbnQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1TYVthXTtjfHwoYT49U2EubGVuZ3RoJiYoU2EubGVuZ3RoPWErMSksU2FbYV09Yz1zYS5nZXQoYSkpO2E9YyhiKTtQKCk/Vi5YYShhKTpUYShhKX07ZnVuY3Rpb24gVWEoYSl7dGhpcy5VYT1hLTI0O3RoaXMuYmI9ZnVuY3Rpb24oYil7cigpW3RoaXMuVWErND4+Mj4+PjBdPWJ9O3RoaXMuYWI9ZnVuY3Rpb24oYil7cigpW3RoaXMuVWErOD4+Mj4+PjBdPWJ9O3RoaXMuVmE9ZnVuY3Rpb24oYixjKXt0aGlzLiRhKCk7dGhpcy5iYihiKTt0aGlzLmFiKGMpfTt0aGlzLiRhPWZ1bmN0aW9uKCl7cigpW3RoaXMuVWErMTY+PjI+Pj4wXT0wfX1cbnZhciBWYT0wLFdhPTA7ZnVuY3Rpb24gWGEoYSxiLGMsZSl7cmV0dXJuIEQ/VygzLDEsYSxiLGMsZSk6WWEoYSxiLGMsZSl9ZnVuY3Rpb24gWWEoYSxiLGMsZSl7YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZT4+Pj0wO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcilyZXR1cm4gSShcIkN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTaGFyZWRBcnJheUJ1ZmZlciwgcHRocmVhZHMgYXJlIG5vdCBhdmFpbGFibGUhXCIpLDY7dmFyIGg9W107aWYoRCYmMD09PWgubGVuZ3RoKXJldHVybiBYYShhLGIsYyxlKTthPXttYjpjLE5hOmEsZWI6ZSxzYjpofTtyZXR1cm4gRD8oYS51Yj1cInNwYXduVGhyZWFkXCIscG9zdE1lc3NhZ2UoYSxoKSwwKTpIYShhKX1mdW5jdGlvbiBaYShhLGIsYyl7cmV0dXJuIEQ/Vyg0LDEsYSxiLGMpOjB9ZnVuY3Rpb24gJGEoYSxiKXtpZihEKXJldHVybiBXKDUsMSxhLGIpfVxudmFyIGFiPWE9Pntmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBlPWEuY2hhckNvZGVBdChjKTsxMjc+PWU/YisrOjIwNDc+PWU/Yis9Mjo1NTI5Njw9ZSYmNTczNDM+PWU/KGIrPTQsKytjKTpiKz0zfXJldHVybiBifSxiYj0oYSxiLGMsZSk9PntjPj4+PTA7aWYoISgwPGUpKXJldHVybiAwO3ZhciBoPWM7ZT1jK2UtMTtmb3IodmFyIGc9MDtnPGEubGVuZ3RoOysrZyl7dmFyIGs9YS5jaGFyQ29kZUF0KGcpO2lmKDU1Mjk2PD1rJiY1NzM0Mz49ayl7dmFyIHQ9YS5jaGFyQ29kZUF0KCsrZyk7az02NTUzNisoKGsmMTAyMyk8PDEwKXx0JjEwMjN9aWYoMTI3Pj1rKXtpZihjPj1lKWJyZWFrO2JbYysrPj4+MF09a31lbHNle2lmKDIwNDc+PWspe2lmKGMrMT49ZSlicmVhaztiW2MrKz4+PjBdPTE5MnxrPj42fWVsc2V7aWYoNjU1MzU+PWspe2lmKGMrMj49ZSlicmVhaztiW2MrKz4+PjBdPTIyNHxrPj4xMn1lbHNle2lmKGMrMz49ZSlicmVhaztiW2MrKz4+PjBdPTI0MHxrPj5cbjE4O2JbYysrPj4+MF09MTI4fGs+PjEyJjYzfWJbYysrPj4+MF09MTI4fGs+PjYmNjN9YltjKys+Pj4wXT0xMjh8ayY2M319YltjPj4+MF09MDtyZXR1cm4gYy1ofSxjYj0oYSxiLGMpPT5iYihhLG4oKSxiLGMpO2Z1bmN0aW9uIGRiKGEsYil7aWYoRClyZXR1cm4gVyg2LDEsYSxiKX1mdW5jdGlvbiBlYihhLGIsYyl7aWYoRClyZXR1cm4gVyg3LDEsYSxiLGMpfWZ1bmN0aW9uIGZiKGEsYixjKXtyZXR1cm4gRD9XKDgsMSxhLGIsYyk6MH1mdW5jdGlvbiBnYihhLGIpe2lmKEQpcmV0dXJuIFcoOSwxLGEsYil9ZnVuY3Rpb24gaGIoYSxiLGMpe2lmKEQpcmV0dXJuIFcoMTAsMSxhLGIsYyl9ZnVuY3Rpb24gaWIoYSxiLGMsZSl7aWYoRClyZXR1cm4gVygxMSwxLGEsYixjLGUpfWZ1bmN0aW9uIGpiKGEsYixjLGUpe2lmKEQpcmV0dXJuIFcoMTIsMSxhLGIsYyxlKX1mdW5jdGlvbiBrYihhLGIsYyxlKXtpZihEKXJldHVybiBXKDEzLDEsYSxiLGMsZSl9XG5mdW5jdGlvbiBsYihhKXtpZihEKXJldHVybiBXKDE0LDEsYSl9ZnVuY3Rpb24gbWIoYSxiKXtpZihEKXJldHVybiBXKDE1LDEsYSxiKX1mdW5jdGlvbiBuYihhLGIsYyl7aWYoRClyZXR1cm4gVygxNiwxLGEsYixjKX12YXIgb2I9YT0+e2lmKCFNKXRyeXtpZihhKCksIVAoKSl0cnl7RD9UYShOKTpOYShOKX1jYXRjaChiKXtiIGluc3RhbmNlb2YgVXx8XCJ1bndpbmRcIj09Ynx8eigxLGIpfX1jYXRjaChiKXtiIGluc3RhbmNlb2YgVXx8XCJ1bndpbmRcIj09Ynx8eigxLGIpfX07ZnVuY3Rpb24gcGIoYSl7YT4+Pj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBBdG9taWNzLnRiJiYoQXRvbWljcy50YihwKCksYT4+MixhKS52YWx1ZS50aGVuKFkpLGErPTEyOCxBdG9taWNzLnN0b3JlKHAoKSxhPj4yLDEpKX13Ll9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdD1wYjtmdW5jdGlvbiBZKCl7dmFyIGE9WCgpO2EmJihwYihhKSxvYigoKT0+cWIoKSkpfXcuY2hlY2tNYWlsYm94PVk7XG52YXIgWj1hPT4wPT09YSU0JiYoMCE9PWElMTAwfHwwPT09YSU0MDApLHJiPVswLDMxLDYwLDkxLDEyMSwxNTIsMTgyLDIxMywyNDQsMjc0LDMwNSwzMzVdLHNiPVswLDMxLDU5LDkwLDEyMCwxNTEsMTgxLDIxMiwyNDMsMjczLDMwNCwzMzRdO2Z1bmN0aW9uIHRiKGEsYixjLGUsaCxnLGssdCl7cmV0dXJuIEQ/VygxNywxLGEsYixjLGUsaCxnLGssdCk6LTUyfWZ1bmN0aW9uIHViKGEsYixjLGUsaCxnLGspe2lmKEQpcmV0dXJuIFcoMTgsMSxhLGIsYyxlLGgsZyxrKX12YXIgd2I9YT0+e3ZhciBiPWFiKGEpKzEsYz12YihiKTtjJiZjYihhLGMsYik7cmV0dXJuIGN9LHliPWE9Pnt2YXIgYj14YigpO2E9YSgpO1JhKGIpO3JldHVybiBhfTtcbmZ1bmN0aW9uIFcoYSxiKXt2YXIgYz1hcmd1bWVudHMubGVuZ3RoLTIsZT1hcmd1bWVudHM7cmV0dXJuIHliKCgpPT57Zm9yKHZhciBoPXpiKDgqYyksZz1oPj4zLGs9MDtrPGM7aysrKXt2YXIgdD1lWzIra107ZWEoKVtnK2s+Pj4wXT10fXJldHVybiBBYihhLGMsaCxiKX0pfVxudmFyIEJiPVtdLENiPXt9LEViPSgpPT57aWYoIURiKXt2YXIgYT17VVNFUjpcIndlYl91c2VyXCIsTE9HTkFNRTpcIndlYl91c2VyXCIsUEFUSDpcIi9cIixQV0Q6XCIvXCIsSE9NRTpcIi9ob21lL3dlYl91c2VyXCIsTEFORzooXCJvYmplY3RcIj09dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLmxhbmd1YWdlcyYmbmF2aWdhdG9yLmxhbmd1YWdlc1swXXx8XCJDXCIpLnJlcGxhY2UoXCItXCIsXCJfXCIpK1wiLlVURi04XCIsXzpqYXx8XCIuL3RoaXMucHJvZ3JhbVwifSxiO2ZvcihiIGluIENiKXZvaWQgMD09PUNiW2JdP2RlbGV0ZSBhW2JdOmFbYl09Q2JbYl07dmFyIGM9W107Zm9yKGIgaW4gYSljLnB1c2goYCR7Yn09JHthW2JdfWApO0RiPWN9cmV0dXJuIERifSxEYjtcbmZ1bmN0aW9uIEZiKGEsYil7aWYoRClyZXR1cm4gVygxOSwxLGEsYik7YT4+Pj0wO2I+Pj49MDt2YXIgYz0wO0ViKCkuZm9yRWFjaChmdW5jdGlvbihlLGgpe3ZhciBnPWIrYztoPXIoKVthKzQqaD4+Mj4+PjBdPWc7Zm9yKGc9MDtnPGUubGVuZ3RoOysrZylhYSgpW2grKz4+MD4+PjBdPWUuY2hhckNvZGVBdChnKTthYSgpW2g+PjA+Pj4wXT0wO2MrPWUubGVuZ3RoKzF9KTtyZXR1cm4gMH1mdW5jdGlvbiBHYihhLGIpe2lmKEQpcmV0dXJuIFcoMjAsMSxhLGIpO2E+Pj49MDtiPj4+PTA7dmFyIGM9RWIoKTtyKClbYT4+Mj4+PjBdPWMubGVuZ3RoO3ZhciBlPTA7Yy5mb3JFYWNoKGZ1bmN0aW9uKGgpe2UrPWgubGVuZ3RoKzF9KTtyKClbYj4+Mj4+PjBdPWU7cmV0dXJuIDB9ZnVuY3Rpb24gSGIoYSl7cmV0dXJuIEQ/VygyMSwxLGEpOjUyfWZ1bmN0aW9uIExiKGEsYixjLGUpe3JldHVybiBEP1coMjIsMSxhLGIsYyxlKTo1Mn1cbmZ1bmN0aW9uIE1iKGEsYixjLGUsaCl7cmV0dXJuIEQ/VygyMywxLGEsYixjLGUsaCk6NzB9dmFyIE5iPVtudWxsLFtdLFtdXTtmdW5jdGlvbiBPYihhLGIsYyxlKXtpZihEKXJldHVybiBXKDI0LDEsYSxiLGMsZSk7Yj4+Pj0wO2M+Pj49MDtlPj4+PTA7Zm9yKHZhciBoPTAsZz0wO2c8YztnKyspe3ZhciBrPXIoKVtiPj4yPj4+MF0sdD1yKClbYis0Pj4yPj4+MF07Yis9ODtmb3IodmFyIEM9MDtDPHQ7QysrKXt2YXIgdj1uKClbaytDPj4+MF0seT1OYlthXTswPT09dnx8MTA9PT12PygoMT09PWE/cWE6SSkoSmEoeSwwKSkseS5sZW5ndGg9MCk6eS5wdXNoKHYpfWgrPXR9cigpW2U+PjI+Pj4wXT1oO3JldHVybiAwfXZhciBQYj1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLFFiPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gUmIoYSl7dmFyIGI9QXJyYXkoYWIoYSkrMSk7YmIoYSxiLDAsYi5sZW5ndGgpO3JldHVybiBifVxudmFyIFNiPShhLGIpPT57YWEoKS5zZXQoYSxiPj4+MCl9O1xuZnVuY3Rpb24gVGIoYSxiLGMsZSl7ZnVuY3Rpb24gaChmLHEsdSl7Zm9yKGY9XCJudW1iZXJcIj09dHlwZW9mIGY/Zi50b1N0cmluZygpOmZ8fFwiXCI7Zi5sZW5ndGg8cTspZj11WzBdK2Y7cmV0dXJuIGZ9ZnVuY3Rpb24gZyhmLHEpe3JldHVybiBoKGYscSxcIjBcIil9ZnVuY3Rpb24gayhmLHEpe2Z1bmN0aW9uIHUoSWIpe3JldHVybiAwPkliPy0xOjA8SWI/MTowfXZhciBHOzA9PT0oRz11KGYuZ2V0RnVsbFllYXIoKS1xLmdldEZ1bGxZZWFyKCkpKSYmMD09PShHPXUoZi5nZXRNb250aCgpLXEuZ2V0TW9udGgoKSkpJiYoRz11KGYuZ2V0RGF0ZSgpLXEuZ2V0RGF0ZSgpKSk7cmV0dXJuIEd9ZnVuY3Rpb24gdChmKXtzd2l0Y2goZi5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwyOSk7Y2FzZSAxOnJldHVybiBmO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMSk7Y2FzZSA1OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIEMoZil7dmFyIHE9Zi5QYTtmb3IoZj1uZXcgRGF0ZSgobmV3IERhdGUoZi5RYSsxOTAwLDAsMSkpLmdldFRpbWUoKSk7MDxxOyl7dmFyIHU9Zi5nZXRNb250aCgpLEc9KFooZi5nZXRGdWxsWWVhcigpKT9QYjpRYilbdV07aWYocT5HLWYuZ2V0RGF0ZSgpKXEtPUctZi5nZXREYXRlKCkrMSxmLnNldERhdGUoMSksMTE+dT9mLnNldE1vbnRoKHUrMSk6KGYuc2V0TW9udGgoMCksZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkrMSkpO2Vsc2V7Zi5zZXREYXRlKGYuZ2V0RGF0ZSgpK3EpO2JyZWFrfX11PW5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSsxLDAsNCk7cT10KG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSxcbjAsNCkpO3U9dCh1KTtyZXR1cm4gMD49ayhxLGYpPzA+PWsodSxmKT9mLmdldEZ1bGxZZWFyKCkrMTpmLmdldEZ1bGxZZWFyKCk6Zi5nZXRGdWxsWWVhcigpLTF9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZT4+Pj0wO3ZhciB2PXAoKVtlKzQwPj4yPj4+MF07ZT17cWI6cCgpW2U+PjI+Pj4wXSxwYjpwKClbZSs0Pj4yPj4+MF0sU2E6cCgpW2UrOD4+Mj4+PjBdLFdhOnAoKVtlKzEyPj4yPj4+MF0sVGE6cCgpW2UrMTY+PjI+Pj4wXSxRYTpwKClbZSsyMD4+Mj4+PjBdLE1hOnAoKVtlKzI0Pj4yPj4+MF0sUGE6cCgpW2UrMjg+PjI+Pj4wXSx5YjpwKClbZSszMj4+Mj4+PjBdLG9iOnAoKVtlKzM2Pj4yPj4+MF0scmI6dj9LYSh2KTpcIlwifTtjPUthKGMpO3Y9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcblwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgeSBpbiB2KWM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAoeSxcImdcIiksdlt5XSk7dmFyIEpiPVwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksS2I9XCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO3Y9e1wiJWFcIjpmPT5KYltmLk1hXS5zdWJzdHJpbmcoMCwzKSxcblwiJUFcIjpmPT5KYltmLk1hXSxcIiViXCI6Zj0+S2JbZi5UYV0uc3Vic3RyaW5nKDAsMyksXCIlQlwiOmY9PktiW2YuVGFdLFwiJUNcIjpmPT5nKChmLlFhKzE5MDApLzEwMHwwLDIpLFwiJWRcIjpmPT5nKGYuV2EsMiksXCIlZVwiOmY9PmgoZi5XYSwyLFwiIFwiKSxcIiVnXCI6Zj0+QyhmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVHXCI6Zj0+QyhmKSxcIiVIXCI6Zj0+ZyhmLlNhLDIpLFwiJUlcIjpmPT57Zj1mLlNhOzA9PWY/Zj0xMjoxMjxmJiYoZi09MTIpO3JldHVybiBnKGYsMil9LFwiJWpcIjpmPT57Zm9yKHZhciBxPTAsdT0wO3U8PWYuVGEtMTtxKz0oWihmLlFhKzE5MDApP1BiOlFiKVt1KytdKTtyZXR1cm4gZyhmLldhK3EsMyl9LFwiJW1cIjpmPT5nKGYuVGErMSwyKSxcIiVNXCI6Zj0+ZyhmLnBiLDIpLFwiJW5cIjooKT0+XCJcXG5cIixcIiVwXCI6Zj0+MDw9Zi5TYSYmMTI+Zi5TYT9cIkFNXCI6XCJQTVwiLFwiJVNcIjpmPT5nKGYucWIsMiksXCIldFwiOigpPT5cIlxcdFwiLFwiJXVcIjpmPT5mLk1hfHw3LFwiJVVcIjpmPT5nKE1hdGguZmxvb3IoKGYuUGErXG43LWYuTWEpLzcpLDIpLFwiJVZcIjpmPT57dmFyIHE9TWF0aC5mbG9vcigoZi5QYSs3LShmLk1hKzYpJTcpLzcpOzI+PShmLk1hKzM3MS1mLlBhLTIpJTcmJnErKztpZihxKTUzPT1xJiYodT0oZi5NYSszNzEtZi5QYSklNyw0PT11fHwzPT11JiZaKGYuUWEpfHwocT0xKSk7ZWxzZXtxPTUyO3ZhciB1PShmLk1hKzctZi5QYS0xKSU3Oyg0PT11fHw1PT11JiZaKGYuUWElNDAwLTEpKSYmcSsrfXJldHVybiBnKHEsMil9LFwiJXdcIjpmPT5mLk1hLFwiJVdcIjpmPT5nKE1hdGguZmxvb3IoKGYuUGErNy0oZi5NYSs2KSU3KS83KSwyKSxcIiV5XCI6Zj0+KGYuUWErMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlWVwiOmY9PmYuUWErMTkwMCxcIiV6XCI6Zj0+e2Y9Zi5vYjt2YXIgcT0wPD1mO2Y9TWF0aC5hYnMoZikvNjA7cmV0dXJuKHE/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIisoZi82MCoxMDArZiU2MCkpLnNsaWNlKC00KX0sXCIlWlwiOmY9PmYucmIsXCIlJVwiOigpPT5cIiVcIn07Yz1jLnJlcGxhY2UoLyUlL2csXG5cIlxceDAwXFx4MDBcIik7Zm9yKHkgaW4gdiljLmluY2x1ZGVzKHkpJiYoYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh5LFwiZ1wiKSx2W3ldKGUpKSk7Yz1jLnJlcGxhY2UoL1xcMFxcMC9nLFwiJVwiKTt5PVJiKGMpO2lmKHkubGVuZ3RoPmIpcmV0dXJuIDA7U2IoeSxhKTtyZXR1cm4geS5sZW5ndGgtMX1WLlZhKCk7XG52YXIgVWI9W251bGwsTGEsTWEsWGEsWmEsJGEsZGIsZWIsZmIsZ2IsaGIsaWIsamIsa2IsbGIsbWIsbmIsdGIsdWIsRmIsR2IsSGIsTGIsTWIsT2JdLFhiPXtiOmZ1bmN0aW9uKGEsYixjKXthPj4+PTA7KG5ldyBVYShhKSkuVmEoYj4+PjAsYz4+PjApO1ZhPWE7V2ErKzt0aHJvdyBWYTt9LE46ZnVuY3Rpb24oYSl7VmIoYT4+PjAsIUEsMSwha2EsMTMxMDcyLCExKTtWLllhKCl9LGo6ZnVuY3Rpb24oYSl7YT4+Pj0wO0Q/cG9zdE1lc3NhZ2Uoe2NtZDpcImNsZWFudXBUaHJlYWRcIix0aHJlYWQ6YX0pOkdhKGEpfSxJOllhLGg6WmEsVDokYSxEOmRiLEY6ZWIsVTpmYixSOmdiLEo6aGIsUTppYixuOmpiLEU6a2IsQjpsYixTOm1iLEM6bmIscTooKT0+ITAsejpmdW5jdGlvbihhLGIpe2E+Pj49MDthPT1iPj4+MD9zZXRUaW1lb3V0KCgpPT5ZKCkpOkQ/cG9zdE1lc3NhZ2Uoe3RhcmdldFRocmVhZDphLGNtZDpcImNoZWNrTWFpbGJveFwifSk6KGE9Vi5MYVthXSkmJmEucG9zdE1lc3NhZ2Uoe2NtZDpcImNoZWNrTWFpbGJveFwifSl9LFxuTDpmdW5jdGlvbigpe3JldHVybi0xfSxNOnBiLHA6ZnVuY3Rpb24oYSl7QiYmVi5MYVthPj4+MF0ucmVmKCl9LHQ6ZnVuY3Rpb24oYSxiLGMpe2E9YisyMDk3MTUyPj4+MDw0MTk0MzA1LSEhYT8oYT4+PjApKzQyOTQ5NjcyOTYqYjpOYU47Yz4+Pj0wO2E9bmV3IERhdGUoMUUzKmEpO3AoKVtjPj4yPj4+MF09YS5nZXRVVENTZWNvbmRzKCk7cCgpW2MrND4+Mj4+PjBdPWEuZ2V0VVRDTWludXRlcygpO3AoKVtjKzg+PjI+Pj4wXT1hLmdldFVUQ0hvdXJzKCk7cCgpW2MrMTI+PjI+Pj4wXT1hLmdldFVUQ0RhdGUoKTtwKClbYysxNj4+Mj4+PjBdPWEuZ2V0VVRDTW9udGgoKTtwKClbYysyMD4+Mj4+PjBdPWEuZ2V0VVRDRnVsbFllYXIoKS0xOTAwO3AoKVtjKzI0Pj4yPj4+MF09YS5nZXRVVENEYXkoKTthPShhLmdldFRpbWUoKS1EYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksMCwxLDAsMCwwLDApKS84NjRFNXwwO3AoKVtjKzI4Pj4yPj4+MF09YX0sdTpmdW5jdGlvbihhLGIsYyl7YT1iK1xuMjA5NzE1Mj4+PjA8NDE5NDMwNS0hIWE/KGE+Pj4wKSs0Mjk0OTY3Mjk2KmI6TmFOO2M+Pj49MDthPW5ldyBEYXRlKDFFMyphKTtwKClbYz4+Mj4+PjBdPWEuZ2V0U2Vjb25kcygpO3AoKVtjKzQ+PjI+Pj4wXT1hLmdldE1pbnV0ZXMoKTtwKClbYys4Pj4yPj4+MF09YS5nZXRIb3VycygpO3AoKVtjKzEyPj4yPj4+MF09YS5nZXREYXRlKCk7cCgpW2MrMTY+PjI+Pj4wXT1hLmdldE1vbnRoKCk7cCgpW2MrMjA+PjI+Pj4wXT1hLmdldEZ1bGxZZWFyKCktMTkwMDtwKClbYysyND4+Mj4+PjBdPWEuZ2V0RGF5KCk7Yj0oWihhLmdldEZ1bGxZZWFyKCkpP3JiOnNiKVthLmdldE1vbnRoKCldK2EuZ2V0RGF0ZSgpLTF8MDtwKClbYysyOD4+Mj4+PjBdPWI7cCgpW2MrMzY+PjI+Pj4wXT0tKDYwKmEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7Yj0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGU9KG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuYT0oYiE9ZSYmYS5nZXRUaW1lem9uZU9mZnNldCgpPT1NYXRoLm1pbihlLGIpKXwwO3AoKVtjKzMyPj4yPj4+MF09YX0sdjpmdW5jdGlvbihhKXthPj4+PTA7dmFyIGI9bmV3IERhdGUocCgpW2ErMjA+PjI+Pj4wXSsxOTAwLHAoKVthKzE2Pj4yPj4+MF0scCgpW2ErMTI+PjI+Pj4wXSxwKClbYSs4Pj4yPj4+MF0scCgpW2ErND4+Mj4+PjBdLHAoKVthPj4yPj4+MF0sMCksYz1wKClbYSszMj4+Mj4+PjBdLGU9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGg9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGs9TWF0aC5taW4oZyxoKTswPmM/cCgpW2ErMzI+PjI+Pj4wXT1OdW1iZXIoaCE9ZyYmaz09ZSk6MDxjIT0oaz09ZSkmJihoPU1hdGgubWF4KGcsaCksYi5zZXRUaW1lKGIuZ2V0VGltZSgpKzZFNCooKDA8Yz9rOmgpLWUpKSk7cCgpW2ErMjQ+PjI+Pj5cbjBdPWIuZ2V0RGF5KCk7Yz0oWihiLmdldEZ1bGxZZWFyKCkpP3JiOnNiKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDtwKClbYSsyOD4+Mj4+PjBdPWM7cCgpW2E+PjI+Pj4wXT1iLmdldFNlY29uZHMoKTtwKClbYSs0Pj4yPj4+MF09Yi5nZXRNaW51dGVzKCk7cCgpW2ErOD4+Mj4+PjBdPWIuZ2V0SG91cnMoKTtwKClbYSsxMj4+Mj4+PjBdPWIuZ2V0RGF0ZSgpO3AoKVthKzE2Pj4yPj4+MF09Yi5nZXRNb250aCgpO3AoKVthKzIwPj4yPj4+MF09Yi5nZXRZZWFyKCk7YT1iLmdldFRpbWUoKS8xRTM7cmV0dXJuIFdiKChUPWEsMTw9K01hdGguYWJzKFQpPzA8VD8rTWF0aC5mbG9vcihULzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKFQtKyh+flQ+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApKSxhPj4+MH0scjp0YixzOnViLHk6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGUodil7cmV0dXJuKHY9di50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKT9cbnZbMV06XCJHTVRcIn1hPj4+PTA7Yj4+Pj0wO2M+Pj49MDt2YXIgaD0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCksZz1uZXcgRGF0ZShoLDAsMSksaz1uZXcgRGF0ZShoLDYsMSk7aD1nLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHQ9ay5nZXRUaW1lem9uZU9mZnNldCgpLEM9TWF0aC5tYXgoaCx0KTtyKClbYT4+Mj4+PjBdPTYwKkM7cCgpW2I+PjI+Pj4wXT1OdW1iZXIoaCE9dCk7YT1lKGcpO2I9ZShrKTthPXdiKGEpO2I9d2IoYik7dDxoPyhyKClbYz4+Mj4+PjBdPWEscigpW2MrND4+Mj4+PjBdPWIpOihyKClbYz4+Mj4+PjBdPWIscigpW2MrND4+Mj4+PjBdPWEpfSxjOigpPT57SyhcIlwiKX0sazpmdW5jdGlvbigpe30saTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfSxvOigpPT57d2ErPTE7dGhyb3dcInVud2luZFwiO30sQTpmdW5jdGlvbigpe3JldHVybiA0Mjk0OTAxNzYwfSxlOigpPT5wZXJmb3JtYW5jZS50aW1lT3JpZ2luK3BlcmZvcm1hbmNlLm5vdygpLGY6ZnVuY3Rpb24oKXtyZXR1cm4gQj9cbnJlcXVpcmUoXCJvc1wiKS5jcHVzKCkubGVuZ3RoOm5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5fSxLOmZ1bmN0aW9uKGEsYixjLGUpe1YudmI9Yj4+PjA7QmIubGVuZ3RoPWM7Yj1lPj4+MD4+Mztmb3IoZT0wO2U8YztlKyspQmJbZV09ZWEoKVtiK2U+Pj4wXTtyZXR1cm4gVWJbYV0uYXBwbHkobnVsbCxCYil9LHg6ZnVuY3Rpb24oYSl7YT4+Pj0wO3ZhciBiPW4oKS5sZW5ndGg7aWYoYTw9Ynx8NDI5NDkwMTc2MDxhKXJldHVybiExO2Zvcih2YXIgYz0xOzQ+PWM7Yyo9Mil7dmFyIGU9YiooMSsuMi9jKTtlPU1hdGgubWluKGUsYSsxMDA2NjMyOTYpO3ZhciBoPU1hdGg7ZT1NYXRoLm1heChhLGUpO2E6e2g9aC5taW4uY2FsbChoLDQyOTQ5MDE3NjAsZSsoNjU1MzYtZSU2NTUzNiklNjU1MzYpLWQuYnVmZmVyLmJ5dGVMZW5ndGgrNjU1MzU+Pj4xNjt0cnl7ZC5ncm93KGgpO20oKTt2YXIgZz0xO2JyZWFrIGF9Y2F0Y2goayl7fWc9dm9pZCAwfWlmKGcpcmV0dXJuITB9cmV0dXJuITF9LFxuTzpGYixQOkdiLEg6TmEsZzpIYixtOkxiLHc6TWIsbDpPYixhOmR8fHcud2FzbU1lbW9yeSxHOlRiLGQ6ZnVuY3Rpb24oYSxiLGMsZSl7cmV0dXJuIFRiKGE+Pj4wLGI+Pj4wLGM+Pj4wLGU+Pj4wKX19OyhmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYyxlKXtjPWMuZXhwb3J0cztMPWM9WWIoYyk7Vi5aYS5wdXNoKEwueWEpO3NhPUwuemE7dWEudW5zaGlmdChMLlYpO3JhPWU7emEoKTtyZXR1cm4gY312YXIgYj17YTpYYn07eWEoKTtpZih3Lmluc3RhbnRpYXRlV2FzbSl0cnl7cmV0dXJuIHcuaW5zdGFudGlhdGVXYXNtKGIsYSl9Y2F0Y2goYyl7SShcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiK2MpLHgoYyl9RWEoYixmdW5jdGlvbihjKXthKGMuaW5zdGFuY2UsYy5tb2R1bGUpfSkuY2F0Y2goeCk7cmV0dXJue319KSgpO3cuX09ydEluaXQ9KGEsYik9Pih3Ll9PcnRJbml0PUwuVykoYSxiKTtcbncuX09ydEdldExhc3RFcnJvcj0oYSxiKT0+KHcuX09ydEdldExhc3RFcnJvcj1MLlgpKGEsYik7dy5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnM9KGEsYixjLGUsaCxnLGssdCxDLHYpPT4ody5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnM9TC5ZKShhLGIsYyxlLGgsZyxrLHQsQyx2KTt3Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj0oYSxiKT0+KHcuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyPUwuWikoYSxiKTt3Ll9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9KGEsYixjKT0+KHcuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZT1MLl8pKGEsYixjKTt3Ll9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9KGEsYixjKT0+KHcuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeT1MLiQpKGEsYixjKTt3Ll9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9YT0+KHcuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucz1MLmFhKShhKTtcbncuX09ydENyZWF0ZVNlc3Npb249KGEsYixjKT0+KHcuX09ydENyZWF0ZVNlc3Npb249TC5iYSkoYSxiLGMpO3cuX09ydFJlbGVhc2VTZXNzaW9uPWE9Pih3Ll9PcnRSZWxlYXNlU2Vzc2lvbj1MLmNhKShhKTt3Ll9PcnRHZXRJbnB1dE91dHB1dENvdW50PShhLGIsYyk9Pih3Ll9PcnRHZXRJbnB1dE91dHB1dENvdW50PUwuZGEpKGEsYixjKTt3Ll9PcnRHZXRJbnB1dE5hbWU9KGEsYik9Pih3Ll9PcnRHZXRJbnB1dE5hbWU9TC5lYSkoYSxiKTt3Ll9PcnRHZXRPdXRwdXROYW1lPShhLGIpPT4ody5fT3J0R2V0T3V0cHV0TmFtZT1MLmZhKShhLGIpO3cuX09ydEZyZWU9YT0+KHcuX09ydEZyZWU9TC5nYSkoYSk7dy5fT3J0Q3JlYXRlVGVuc29yPShhLGIsYyxlLGgsZyk9Pih3Ll9PcnRDcmVhdGVUZW5zb3I9TC5oYSkoYSxiLGMsZSxoLGcpO3cuX09ydEdldFRlbnNvckRhdGE9KGEsYixjLGUsaCk9Pih3Ll9PcnRHZXRUZW5zb3JEYXRhPUwuaWEpKGEsYixjLGUsaCk7XG53Ll9PcnRSZWxlYXNlVGVuc29yPWE9Pih3Ll9PcnRSZWxlYXNlVGVuc29yPUwuamEpKGEpO3cuX09ydENyZWF0ZVJ1bk9wdGlvbnM9KGEsYixjLGUpPT4ody5fT3J0Q3JlYXRlUnVuT3B0aW9ucz1MLmthKShhLGIsYyxlKTt3Ll9PcnRBZGRSdW5Db25maWdFbnRyeT0oYSxiLGMpPT4ody5fT3J0QWRkUnVuQ29uZmlnRW50cnk9TC5sYSkoYSxiLGMpO3cuX09ydFJlbGVhc2VSdW5PcHRpb25zPWE9Pih3Ll9PcnRSZWxlYXNlUnVuT3B0aW9ucz1MLm1hKShhKTt3Ll9PcnRDcmVhdGVCaW5kaW5nPWE9Pih3Ll9PcnRDcmVhdGVCaW5kaW5nPUwubmEpKGEpO3cuX09ydEJpbmRJbnB1dD0oYSxiLGMpPT4ody5fT3J0QmluZElucHV0PUwub2EpKGEsYixjKTt3Ll9PcnRCaW5kT3V0cHV0PShhLGIsYyxlKT0+KHcuX09ydEJpbmRPdXRwdXQ9TC5wYSkoYSxiLGMsZSk7dy5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9YT0+KHcuX09ydENsZWFyQm91bmRPdXRwdXRzPUwucWEpKGEpO1xudy5fT3J0UmVsZWFzZUJpbmRpbmc9YT0+KHcuX09ydFJlbGVhc2VCaW5kaW5nPUwucmEpKGEpO3cuX09ydFJ1bldpdGhCaW5kaW5nPShhLGIsYyxlLGgpPT4ody5fT3J0UnVuV2l0aEJpbmRpbmc9TC5zYSkoYSxiLGMsZSxoKTt3Ll9PcnRSdW49KGEsYixjLGUsaCxnLGssdCk9Pih3Ll9PcnRSdW49TC50YSkoYSxiLGMsZSxoLGcsayx0KTt3Ll9PcnRFbmRQcm9maWxpbmc9YT0+KHcuX09ydEVuZFByb2ZpbGluZz1MLnVhKShhKTt2YXIgWD13Ll9wdGhyZWFkX3NlbGY9KCk9PihYPXcuX3B0aHJlYWRfc2VsZj1MLnZhKSgpLHZiPXcuX21hbGxvYz1hPT4odmI9dy5fbWFsbG9jPUwud2EpKGEpO3cuX2ZyZWU9YT0+KHcuX2ZyZWU9TC54YSkoYSk7dy5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQ9KCk9Pih3Ll9fZW1zY3JpcHRlbl90bHNfaW5pdD1MLnlhKSgpO1xudmFyIFZiPXcuX19lbXNjcmlwdGVuX3RocmVhZF9pbml0PShhLGIsYyxlLGgsZyk9PihWYj13Ll9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdD1MLkFhKShhLGIsYyxlLGgsZyk7dy5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWQ9KCk9Pih3Ll9fZW1zY3JpcHRlbl90aHJlYWRfY3Jhc2hlZD1MLkJhKSgpO3ZhciBBYj0oYSxiLGMsZSk9PihBYj1MLkNhKShhLGIsYyxlKSxPYT1hPT4oT2E9TC5EYSkoYSksVGE9dy5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQ9YT0+KFRhPXcuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0PUwuRWEpKGEpLHFiPXcuX19lbXNjcmlwdGVuX2NoZWNrX21haWxib3g9KCk9PihxYj13Ll9fZW1zY3JpcHRlbl9jaGVja19tYWlsYm94PUwuRmEpKCksV2I9YT0+KFdiPUwuR2EpKGEpLFFhPShhLGIpPT4oUWE9TC5IYSkoYSxiKSx4Yj0oKT0+KHhiPUwuSWEpKCksUmE9YT0+KFJhPUwuSmEpKGEpLHpiPWE9Pih6Yj1MLkthKShhKTtcbmZ1bmN0aW9uIFliKGEpe2E9T2JqZWN0LmFzc2lnbih7fSxhKTt2YXIgYj1lPT4oKT0+ZSgpPj4+MCxjPWU9Pmg9PmUoaCk+Pj4wO2EuX19lcnJub19sb2NhdGlvbj1iKGEuX19lcnJub19sb2NhdGlvbik7YS5wdGhyZWFkX3NlbGY9YihhLnB0aHJlYWRfc2VsZik7YS5tYWxsb2M9YyhhLm1hbGxvYyk7YS5zdGFja1NhdmU9YihhLnN0YWNrU2F2ZSk7YS5zdGFja0FsbG9jPWMoYS5zdGFja0FsbG9jKTtyZXR1cm4gYX13LmtlZXBSdW50aW1lQWxpdmU9UDt3Lndhc21NZW1vcnk9ZDt3LnN0YWNrQWxsb2M9emI7dy5zdGFja1NhdmU9eGI7dy5zdGFja1Jlc3RvcmU9UmE7dy5VVEY4VG9TdHJpbmc9S2E7dy5zdHJpbmdUb1VURjg9Y2I7dy5sZW5ndGhCeXRlc1VURjg9YWI7dy5FeGl0U3RhdHVzPVU7dy5QVGhyZWFkPVY7dmFyIFpiO1I9ZnVuY3Rpb24gJGIoKXtaYnx8YWMoKTtaYnx8KFI9JGIpfTtcbmZ1bmN0aW9uIGFjKCl7ZnVuY3Rpb24gYSgpe2lmKCFaYiYmKFpiPSEwLHcuY2FsbGVkUnVuPSEwLCFNKSl7RHx8UGEodWEpO2hhKHcpO2lmKHcub25SdW50aW1lSW5pdGlhbGl6ZWQpdy5vblJ1bnRpbWVJbml0aWFsaXplZCgpO2lmKCFEKXtpZih3LnBvc3RSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIHcucG9zdFJ1biYmKHcucG9zdFJ1bj1bdy5wb3N0UnVuXSk7dy5wb3N0UnVuLmxlbmd0aDspe3ZhciBiPXcucG9zdFJ1bi5zaGlmdCgpO3ZhLnVuc2hpZnQoYil9UGEodmEpfX19aWYoISgwPFEpKWlmKEQpaGEodyksRHx8UGEodWEpLHN0YXJ0V29ya2VyKHcpO2Vsc2V7aWYody5wcmVSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIHcucHJlUnVuJiYody5wcmVSdW49W3cucHJlUnVuXSk7dy5wcmVSdW4ubGVuZ3RoOyl0YS51bnNoaWZ0KHcucHJlUnVuLnNoaWZ0KCkpO1BhKHRhKTswPFF8fCh3LnNldFN0YXR1cz8ody5zZXRTdGF0dXMoXCJSdW5uaW5nLi4uXCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dy5zZXRTdGF0dXMoXCJcIil9LFxuMSk7YSgpfSwxKSk6YSgpKX19aWYody5wcmVJbml0KWZvcihcImZ1bmN0aW9uXCI9PXR5cGVvZiB3LnByZUluaXQmJih3LnByZUluaXQ9W3cucHJlSW5pdF0pOzA8dy5wcmVJbml0Lmxlbmd0aDspdy5wcmVJbml0LnBvcCgpKCk7YWMoKTtcblxuXG4gIHJldHVybiBtb2R1bGVBcmcucmVhZHlcbn1cblxuKTtcbn0pKCk7XG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc21UaHJlYWRlZDtcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSlcbiAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtVGhyZWFkZWQpO1xuIiwgIlwidXNlIHN0cmljdFwiO3ZhciBNb2R1bGU9e307dmFyIEVOVklST05NRU5UX0lTX05PREU9dHlwZW9mIHByb2Nlc3M9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlPT1cInN0cmluZ1wiO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBub2RlV29ya2VyVGhyZWFkcz1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIik7dmFyIHBhcmVudFBvcnQ9bm9kZVdvcmtlclRocmVhZHMucGFyZW50UG9ydDtwYXJlbnRQb3J0Lm9uKFwibWVzc2FnZVwiLGRhdGE9Pm9ubWVzc2FnZSh7ZGF0YTpkYXRhfSkpO3ZhciBmcz1yZXF1aXJlKFwiZnNcIik7T2JqZWN0LmFzc2lnbihnbG9iYWwse3NlbGY6Z2xvYmFsLHJlcXVpcmU6cmVxdWlyZSxNb2R1bGU6TW9kdWxlLGxvY2F0aW9uOntocmVmOl9fZmlsZW5hbWV9LFdvcmtlcjpub2RlV29ya2VyVGhyZWFkcy5Xb3JrZXIsaW1wb3J0U2NyaXB0czpmPT4oMCxldmFsKShmcy5yZWFkRmlsZVN5bmMoZixcInV0ZjhcIikrXCIvLyMgc291cmNlVVJMPVwiK2YpLHBvc3RNZXNzYWdlOm1zZz0+cGFyZW50UG9ydC5wb3N0TWVzc2FnZShtc2cpLHBlcmZvcm1hbmNlOmdsb2JhbC5wZXJmb3JtYW5jZXx8e25vdzpEYXRlLm5vd319KX12YXIgaW5pdGlhbGl6ZWRKUz1mYWxzZTtmdW5jdGlvbiB0aHJlYWRQcmludEVycigpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7ZnMud3JpdGVTeW5jKDIsdGV4dCtcIlxcblwiKTtyZXR1cm59Y29uc29sZS5lcnJvcih0ZXh0KX1mdW5jdGlvbiB0aHJlYWRBbGVydCgpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7cG9zdE1lc3NhZ2Uoe2NtZDpcImFsZXJ0XCIsdGV4dDp0ZXh0LHRocmVhZElkOk1vZHVsZVtcIl9wdGhyZWFkX3NlbGZcIl0oKX0pfXZhciBlcnI9dGhyZWFkUHJpbnRFcnI7c2VsZi5hbGVydD10aHJlYWRBbGVydDtNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl09KGluZm8scmVjZWl2ZUluc3RhbmNlKT0+e3ZhciBtb2R1bGU9TW9kdWxlW1wid2FzbU1vZHVsZVwiXTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPW51bGw7dmFyIGluc3RhbmNlPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUsaW5mbyk7cmV0dXJuIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSl9O3NlbGYub251bmhhbmRsZWRyZWplY3Rpb249ZT0+e3Rocm93IGUucmVhc29uPz9lfTtmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGUpe3RyeXtpZihlLmRhdGEuY21kPT09XCJsb2FkXCIpe2xldCBtZXNzYWdlUXVldWU9W107c2VsZi5vbm1lc3NhZ2U9ZT0+bWVzc2FnZVF1ZXVlLnB1c2goZSk7c2VsZi5zdGFydFdvcmtlcj1pbnN0YW5jZT0+e01vZHVsZT1pbnN0YW5jZTtwb3N0TWVzc2FnZSh7XCJjbWRcIjpcImxvYWRlZFwifSk7Zm9yKGxldCBtc2cgb2YgbWVzc2FnZVF1ZXVlKXtoYW5kbGVNZXNzYWdlKG1zZyl9c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZX07TW9kdWxlW1wid2FzbU1vZHVsZVwiXT1lLmRhdGEud2FzbU1vZHVsZTtmb3IoY29uc3QgaGFuZGxlciBvZiBlLmRhdGEuaGFuZGxlcnMpe01vZHVsZVtoYW5kbGVyXT0oLi4uYXJncyk9Pntwb3N0TWVzc2FnZSh7Y21kOlwiY2FsbEhhbmRsZXJcIixoYW5kbGVyOmhhbmRsZXIsYXJnczphcmdzfSl9fU1vZHVsZVtcIndhc21NZW1vcnlcIl09ZS5kYXRhLndhc21NZW1vcnk7TW9kdWxlW1wiYnVmZmVyXCJdPU1vZHVsZVtcIndhc21NZW1vcnlcIl0uYnVmZmVyO01vZHVsZVtcIkVOVklST05NRU5UX0lTX1BUSFJFQURcIl09dHJ1ZTtpZih0eXBlb2YgZS5kYXRhLnVybE9yQmxvYj09XCJzdHJpbmdcIil7aW1wb3J0U2NyaXB0cyhlLmRhdGEudXJsT3JCbG9iKX1lbHNle3ZhciBvYmplY3RVcmw9VVJMLmNyZWF0ZU9iamVjdFVSTChlLmRhdGEudXJsT3JCbG9iKTtpbXBvcnRTY3JpcHRzKG9iamVjdFVybCk7VVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVcmwpfW9ydFdhc21UaHJlYWRlZChNb2R1bGUpfWVsc2UgaWYoZS5kYXRhLmNtZD09PVwicnVuXCIpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdFwiXShlLmRhdGEucHRocmVhZF9wdHIsLyppc01haW5Ccm93c2VyVGhyZWFkPSovMCwvKmlzTWFpblJ1bnRpbWVUaHJlYWQ9Ki8wLC8qY2FuQmxvY2s9Ki8xKTtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyKTtNb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdKCk7TW9kdWxlW1wiUFRocmVhZFwiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnRocmVhZEluaXRUTFMoKTtpZighaW5pdGlhbGl6ZWRKUyl7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtNb2R1bGVbXCJpbnZva2VFbnRyeVBvaW50XCJdKGUuZGF0YS5zdGFydF9yb3V0aW5lLGUuZGF0YS5hcmcpfWNhdGNoKGV4KXtpZihleCE9XCJ1bndpbmRcIil7dGhyb3cgZXh9fX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNhbmNlbFwiKXtpZihNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCkpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdFwiXSgtMSl9fWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe31lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJjaGVja01haWxib3hcIl0oKX19ZWxzZSBpZihlLmRhdGEuY21kKXtlcnIoXCJ3b3JrZXIuanMgcmVjZWl2ZWQgdW5rbm93biBjb21tYW5kIFwiK2UuZGF0YS5jbWQpO2VycihlLmRhdGEpfX1jYXRjaChleCl7aWYoTW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdKXtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWRcIl0oKX10aHJvdyBleH19c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHtFbnZ9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7T3J0V2FzbU1vZHVsZX0gZnJvbSAnLi9iaW5kaW5nL29ydC13YXNtJztcbmltcG9ydCB7T3J0V2FzbVRocmVhZGVkTW9kdWxlfSBmcm9tICcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzICovXG5sZXQgb3J0V2FzbUZhY3Rvcnk6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+O1xuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICBvcnRXYXNtRmFjdG9yeSA9IHJlcXVpcmUoJy4vYmluZGluZy9vcnQtdHJhaW5pbmctd2FzbS1zaW1kLmpzJyk7XG59IGVsc2Uge1xuICBvcnRXYXNtRmFjdG9yeSA9XG4gICAgICBCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVID8gcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLmpzJykgOiByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC5qc2VwLmpzJyk7XG59XG5cbmNvbnN0IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQ6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+ID0gIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCA/XG4gICAgKEJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgPyByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanMnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC10aHJlYWRlZC5qc2VwLmpzJykpIDpcbiAgICBvcnRXYXNtRmFjdG9yeTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuXG5sZXQgd2FzbTogT3J0V2FzbU1vZHVsZXx1bmRlZmluZWQ7XG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmxldCBpbml0aWFsaXppbmcgPSBmYWxzZTtcbmxldCBhYm9ydGVkID0gZmFsc2U7XG5cbmNvbnN0IGlzTXVsdGlUaHJlYWRTdXBwb3J0ZWQgPSAoKTogYm9vbGVhbiA9PiB7XG4gIHRyeSB7XG4gICAgLy8gSWYgJ1NoYXJlZEFycmF5QnVmZmVyJyBpcyBub3QgYXZhaWxhYmxlLCBXZWJBc3NlbWJseSB0aHJlYWRzIHdpbGwgbm90IHdvcmsuXG4gICAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUZXN0IGZvciB0cmFuc2ZlcmFiaWxpdHkgb2YgU0FCcyAoZm9yIGJyb3dzZXJzLiBuZWVkZWQgZm9yIEZpcmVmb3gpXG4gICAgLy8gaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIW1zZy9tb3ppbGxhLmRldi5wbGF0Zm9ybS9JSGtCWmxIRVRwQS9kd3NNTmNoV0VRQUpcbiAgICBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEucG9zdE1lc3NhZ2UobmV3IFNoYXJlZEFycmF5QnVmZmVyKDEpKTtcbiAgICB9XG5cbiAgICAvLyBUZXN0IGZvciBXZWJBc3NlbWJseSB0aHJlYWRzIGNhcGFiaWxpdHkgKGZvciBib3RoIGJyb3dzZXJzIGFuZCBOb2RlLmpzKVxuICAgIC8vIFRoaXMgdHlwZWQgYXJyYXkgaXMgYSBXZWJBc3NlbWJseSBwcm9ncmFtIGNvbnRhaW5pbmcgdGhyZWFkZWQgaW5zdHJ1Y3Rpb25zLlxuICAgIHJldHVybiBXZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAwLCA5NywgMTE1LCAxMDksIDEsIDAsICAwLCAgMCwgMSwgNCwgMSwgIDk2LCAwLCAgIDAsICAzLCAyLCAxLCAgMCwgNSxcbiAgICAgIDQsIDEsICAzLCAgIDEsICAgMSwgMTAsIDExLCAxLCA5LCAwLCA2NSwgMCwgIDI1NCwgMTYsIDIsIDAsIDI2LCAxMVxuICAgIF0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuY29uc3QgaXNTaW1kU3VwcG9ydGVkID0gKCk6IGJvb2xlYW4gPT4ge1xuICB0cnkge1xuICAgIC8vIFRlc3QgZm9yIFdlYkFzc2VtYmx5IFNJTUQgY2FwYWJpbGl0eSAoZm9yIGJvdGggYnJvd3NlcnMgYW5kIE5vZGUuanMpXG4gICAgLy8gVGhpcyB0eXBlZCBhcnJheSBpcyBhIFdlYkFzc2VtYmx5IHByb2dyYW0gY29udGFpbmluZyBTSU1EIGluc3RydWN0aW9ucy5cblxuICAgIC8vIFRoZSBiaW5hcnkgZGF0YSBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgZm9sbG93aW5nIGNvZGUgYnkgd2F0Mndhc206XG4gICAgLy9cbiAgICAvLyAobW9kdWxlXG4gICAgLy8gICAodHlwZSAkdDAgKGZ1bmMpKVxuICAgIC8vICAgKGZ1bmMgJGYwICh0eXBlICR0MClcbiAgICAvLyAgICAgKGRyb3BcbiAgICAvLyAgICAgICAoaTMyeDQuZG90X2kxNng4X3NcbiAgICAvLyAgICAgICAgIChpOHgxNi5zcGxhdFxuICAgIC8vICAgICAgICAgICAoaTMyLmNvbnN0IDApKVxuICAgIC8vICAgICAgICAgKHYxMjguY29uc3QgaTMyeDQgMHgwMDAwMDAwMCAweDAwMDAwMDAwIDB4MDAwMDAwMDAgMHgwMDAwMDAwMCkpKSkpXG5cbiAgICByZXR1cm4gV2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMCwgICA5NywgMTE1LCAxMDksIDEsIDAsIDAsIDAsIDEsIDQsIDEsIDk2LCAwLCAwLCAzLCAyLCAxLCAwLCAxMCwgMzAsIDEsICAgMjgsICAwLCA2NSwgMCxcbiAgICAgIDI1MywgMTUsIDI1MywgMTIsICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgIDAsICAyNTMsIDE4NiwgMSwgMjYsIDExXG4gICAgXSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5jb25zdCBnZXRXYXNtRmlsZU5hbWUgPSAodXNlU2ltZDogYm9vbGVhbiwgdXNlVGhyZWFkczogYm9vbGVhbikgPT4ge1xuICBpZiAodXNlU2ltZCkge1xuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1RSQUlOSU5HKSB7XG4gICAgICByZXR1cm4gJ29ydC10cmFpbmluZy13YXNtLXNpbWQud2FzbSc7XG4gICAgfVxuICAgIHJldHVybiB1c2VUaHJlYWRzID8gJ29ydC13YXNtLXNpbWQtdGhyZWFkZWQud2FzbScgOiAnb3J0LXdhc20tc2ltZC53YXNtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdXNlVGhyZWFkcyA/ICdvcnQtd2FzbS10aHJlYWRlZC53YXNtJyA6ICdvcnQtd2FzbS53YXNtJztcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVXZWJBc3NlbWJseSA9IGFzeW5jKGZsYWdzOiBFbnYuV2ViQXNzZW1ibHlGbGFncyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgaWYgKGluaXRpYWxpemluZykge1xuICAgIHRocm93IG5ldyBFcnJvcignbXVsdGlwbGUgY2FsbHMgdG8gXFwnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KClcXCcgZGV0ZWN0ZWQuJyk7XG4gIH1cbiAgaWYgKGFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXZpb3VzIGNhbGwgdG8gXFwnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KClcXCcgZmFpbGVkLicpO1xuICB9XG5cbiAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAvLyB3YXNtIGZsYWdzIGFyZSBhbHJlYWR5IGluaXRpYWxpemVkXG4gIGNvbnN0IHRpbWVvdXQgPSBmbGFncy5pbml0VGltZW91dCE7XG4gIGNvbnN0IG51bVRocmVhZHMgPSBmbGFncy5udW1UaHJlYWRzITtcbiAgY29uc3Qgc2ltZCA9IGZsYWdzLnNpbWQhO1xuXG4gIGNvbnN0IHVzZVRocmVhZHMgPSBudW1UaHJlYWRzID4gMSAmJiBpc011bHRpVGhyZWFkU3VwcG9ydGVkKCk7XG4gIGNvbnN0IHVzZVNpbWQgPSBzaW1kICYmIGlzU2ltZFN1cHBvcnRlZCgpO1xuXG4gIGNvbnN0IHdhc21QYXRocyA9IGZsYWdzLndhc21QYXRocztcbiAgY29uc3Qgd2FzbVByZWZpeE92ZXJyaWRlID0gdHlwZW9mIHdhc21QYXRocyA9PT0gJ3N0cmluZycgPyB3YXNtUGF0aHMgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IHdhc21GaWxlTmFtZSA9IGdldFdhc21GaWxlTmFtZSh1c2VTaW1kLCB1c2VUaHJlYWRzKTtcbiAgY29uc3Qgd2FzbVBhdGhPdmVycmlkZSA9IHR5cGVvZiB3YXNtUGF0aHMgPT09ICdvYmplY3QnID8gd2FzbVBhdGhzW3dhc21GaWxlTmFtZV0gOiB1bmRlZmluZWQ7XG5cbiAgbGV0IGlzVGltZW91dCA9IGZhbHNlO1xuXG4gIGNvbnN0IHRhc2tzOiBBcnJheTxQcm9taXNlPHZvaWQ+PiA9IFtdO1xuXG4gIC8vIHByb21pc2UgZm9yIHRpbWVvdXRcbiAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgdGFza3MucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlzVGltZW91dCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8vIHByb21pc2UgZm9yIG1vZHVsZSBpbml0aWFsaXphdGlvblxuICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBmYWN0b3J5ID0gdXNlVGhyZWFkcyA/IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQgOiBvcnRXYXNtRmFjdG9yeTtcbiAgICBjb25zdCBjb25maWc6IFBhcnRpYWw8T3J0V2FzbU1vZHVsZT4gPSB7XG4gICAgICBsb2NhdGVGaWxlOiAoZmlsZU5hbWU6IHN0cmluZywgc2NyaXB0RGlyZWN0b3J5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9USFJFQUQgJiYgdXNlVGhyZWFkcyAmJiBmaWxlTmFtZS5lbmRzV2l0aCgnLndvcmtlci5qcycpICYmXG4gICAgICAgICAgICB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgcmVxdWlyZSgpIGZ1bmN0aW9uIGlzIGhhbmRsZWQgYnkgZXNidWlsZCBwbHVnaW4gdG8gbG9hZCBmaWxlIGNvbnRlbnQgYXMgc3RyaW5nLlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgICAgICAgICAgcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qcycpXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxlTmFtZS5lbmRzV2l0aCgnLndhc20nKSkge1xuICAgICAgICAgIGlmICh3YXNtUGF0aE92ZXJyaWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gd2FzbVBhdGhPdmVycmlkZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwcmVmaXggPSB3YXNtUHJlZml4T3ZlcnJpZGUgPz8gc2NyaXB0RGlyZWN0b3J5O1xuXG4gICAgICAgICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVKSB7XG4gICAgICAgICAgICBpZiAod2FzbUZpbGVOYW1lID09PSAnb3J0LXdhc20tc2ltZC53YXNtJykge1xuICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJ29ydC13YXNtLXNpbWQuanNlcC53YXNtJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2FzbUZpbGVOYW1lID09PSAnb3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtJykge1xuICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJ29ydC13YXNtLXNpbWQtdGhyZWFkZWQuanNlcC53YXNtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcHJlZml4ICsgd2FzbUZpbGVOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNjcmlwdERpcmVjdG9yeSArIGZpbGVOYW1lO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCAmJiB1c2VUaHJlYWRzKSB7XG4gICAgICBpZiAodHlwZW9mIEJsb2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ29ydC13YXNtLXRocmVhZGVkLmpzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY3JpcHRTb3VyY2VDb2RlID0gYHZhciBvcnRXYXNtVGhyZWFkZWQ9JHtmYWN0b3J5LnRvU3RyaW5nKCl9O2A7XG4gICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gbmV3IEJsb2IoW3NjcmlwdFNvdXJjZUNvZGVdLCB7dHlwZTogJ3RleHQvamF2YXNjcmlwdCd9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmYWN0b3J5KGNvbmZpZykudGhlbihcbiAgICAgICAgLy8gd2FzbSBtb2R1bGUgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgIG1vZHVsZSA9PiB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIHdhc20gPSBtb2R1bGU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyB3YXNtIG1vZHVsZSBmYWlsZWQgdG8gaW5pdGlhbGl6ZVxuICAgICAgICAod2hhdCkgPT4ge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgIHJlamVjdCh3aGF0KTtcbiAgICAgICAgfSk7XG4gIH0pKTtcblxuICBhd2FpdCBQcm9taXNlLnJhY2UodGFza3MpO1xuXG4gIGlmIChpc1RpbWVvdXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFdlYkFzc2VtYmx5IGJhY2tlbmQgaW5pdGlhbGl6aW5nIGZhaWxlZCBkdWUgdG8gdGltZW91dDogJHt0aW1lb3V0fW1zYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJbnN0YW5jZSA9ICgpOiBPcnRXYXNtTW9kdWxlID0+IHtcbiAgaWYgKGluaXRpYWxpemVkICYmIHdhc20pIHtcbiAgICByZXR1cm4gd2FzbTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignV2ViQXNzZW1ibHkgaXMgbm90IGluaXRpYWxpemVkIHlldC4nKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkaXNwb3NlID0gKCk6IHZvaWQgPT4ge1xuICBpZiAoaW5pdGlhbGl6ZWQgJiYgIWluaXRpYWxpemluZyAmJiAhYWJvcnRlZCkge1xuICAgIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAod2FzbSBhcyBPcnRXYXNtVGhyZWFkZWRNb2R1bGUpLlBUaHJlYWQ/LnRlcm1pbmF0ZUFsbFRocmVhZHMoKTtcbiAgICB3YXNtID0gdW5kZWZpbmVkO1xuXG4gICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuXG5leHBvcnQgY29uc3QgYWxsb2NXYXNtU3RyaW5nID0gKGRhdGE6IHN0cmluZywgYWxsb2NzOiBudW1iZXJbXSk6IG51bWJlciA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGNvbnN0IGRhdGFMZW5ndGggPSB3YXNtLmxlbmd0aEJ5dGVzVVRGOChkYXRhKSArIDE7XG4gIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtLl9tYWxsb2MoZGF0YUxlbmd0aCk7XG4gIHdhc20uc3RyaW5nVG9VVEY4KGRhdGEsIGRhdGFPZmZzZXQsIGRhdGFMZW5ndGgpO1xuICBhbGxvY3MucHVzaChkYXRhT2Zmc2V0KTtcblxuICByZXR1cm4gZGF0YU9mZnNldDtcbn07XG5cbmludGVyZmFjZSBFeHRyYU9wdGlvbnNIYW5kbGVyIHtcbiAgKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBpdGVyYXRlRXh0cmFPcHRpb25zID1cbiAgICAob3B0aW9uczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIHByZWZpeDogc3RyaW5nLCBzZWVuOiBXZWFrU2V0PFJlY29yZDxzdHJpbmcsIHVua25vd24+PixcbiAgICAgaGFuZGxlcjogRXh0cmFPcHRpb25zSGFuZGxlcik6IHZvaWQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdvYmplY3QnICYmIG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHNlZW4uaGFzKG9wdGlvbnMpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgaW4gb3B0aW9ucycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW4uYWRkKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gKHByZWZpeCkgPyBwcmVmaXggKyBrZXkgOiBrZXk7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyh2YWx1ZSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgbmFtZSArICcuJywgc2VlbiwgaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgaGFuZGxlcihuYW1lLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIGhhbmRsZXIobmFtZSwgKHZhbHVlKSA/ICcxJyA6ICcwJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBoYW5kbGUgZXh0cmEgY29uZmlnIHR5cGU6ICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4vKipcbiAqIGNoZWNrIHdlYiBhc3NlbWJseSBBUEkncyBsYXN0IGVycm9yIGFuZCB0aHJvdyBlcnJvciBpZiBhbnkgZXJyb3Igb2NjdXJyZWQuXG4gKiBAcGFyYW0gbWVzc2FnZSBhIG1lc3NhZ2UgdXNlZCB3aGVuIGFuIGVycm9yIG9jY3VycmVkLlxuICovXG5leHBvcnQgY29uc3QgY2hlY2tMYXN0RXJyb3IgPSAobWVzc2FnZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJhbXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoOCk7XG4gICAgd2FzbS5fT3J0R2V0TGFzdEVycm9yKHBhcmFtc09mZnNldCwgcGFyYW1zT2Zmc2V0ICsgNCk7XG4gICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5IRUFQMzJbcGFyYW1zT2Zmc2V0IC8gNF07XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlUG9pbnRlciA9IHdhc20uSEVBUFUzMltwYXJhbXNPZmZzZXQgLyA0ICsgMV07XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlUG9pbnRlciA/IHdhc20uVVRGOFRvU3RyaW5nKGVycm9yTWVzc2FnZVBvaW50ZXIpIDogJyc7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke21lc3NhZ2V9IEVSUk9SX0NPREU6ICR7ZXJyb3JDb2RlfSwgRVJST1JfTUVTU0FHRTogJHtlcnJvck1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7Z2V0SW5zdGFuY2V9IGZyb20gJy4vd2FzbS1mYWN0b3J5JztcbmltcG9ydCB7YWxsb2NXYXNtU3RyaW5nLCBjaGVja0xhc3RFcnJvciwgaXRlcmF0ZUV4dHJhT3B0aW9uc30gZnJvbSAnLi93YXNtLXV0aWxzJztcblxuZXhwb3J0IGNvbnN0IHNldFJ1bk9wdGlvbnMgPSAob3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogW251bWJlciwgbnVtYmVyW11dID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgY29uc3QgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IHJ1bk9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucz8ubG9nU2V2ZXJpdHlMZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBydW5PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPSAyOyAgLy8gRGVmYXVsdCB0byB3YXJuaW5nXG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dTZXZlcml0eUxldmVsKSB8fFxuICAgICAgICBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPCAwIHx8IG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA+IDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHNlcnZlcml0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dTZXZlcml0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy5sb2dWZXJib3NpdHlMZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBydW5PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsID0gMDsgIC8vIERlZmF1bHQgdG8gMFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyB2ZXJib3NpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke29wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnM/LnRlcm1pbmF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBydW5PcHRpb25zLnRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGxldCB0YWdEYXRhT2Zmc2V0ID0gMDtcbiAgICBpZiAob3B0aW9ucz8udGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhZ0RhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcob3B0aW9ucy50YWcsIGFsbG9jcyk7XG4gICAgfVxuXG4gICAgcnVuT3B0aW9uc0hhbmRsZSA9IHdhc20uX09ydENyZWF0ZVJ1bk9wdGlvbnMoXG4gICAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCEsIHJ1bk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwhLCAhIXJ1bk9wdGlvbnMudGVybWluYXRlISwgdGFnRGF0YU9mZnNldCk7XG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgPT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGNyZWF0ZSBydW4gb3B0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucz8uZXh0cmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyhvcHRpb25zLmV4dHJhLCAnJywgbmV3IFdlYWtTZXQ8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+KCksIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoa2V5LCBhbGxvY3MpO1xuICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcodmFsdWUsIGFsbG9jcyk7XG5cbiAgICAgICAgaWYgKHdhc20uX09ydEFkZFJ1bkNvbmZpZ0VudHJ5KHJ1bk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgcnVuIGNvbmZpZyBlbnRyeTogJHtrZXl9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBbcnVuT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yLCBpdGVyYXRlRXh0cmFPcHRpb25zfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuXG5jb25zdCBnZXRHcmFwaE9wdGltemF0aW9uTGV2ZWwgPSAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbDogc3RyaW5nfHVua25vd24pOiBudW1iZXIgPT4ge1xuICBzd2l0Y2ggKGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwpIHtcbiAgICBjYXNlICdkaXNhYmxlZCc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdiYXNpYyc6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlICdleHRlbmRlZCc6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlICdhbGwnOlxuICAgICAgcmV0dXJuIDk5O1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGdyYXBoIG9wdGltaXphdGlvbiBsZXZlbDogJHtncmFwaE9wdGltaXphdGlvbkxldmVsfWApO1xuICB9XG59O1xuXG5jb25zdCBnZXRFeGVjdXRpb25Nb2RlID0gKGV4ZWN1dGlvbk1vZGU6ICdzZXF1ZW50aWFsJ3wncGFyYWxsZWwnKTogbnVtYmVyID0+IHtcbiAgc3dpdGNoIChleGVjdXRpb25Nb2RlKSB7XG4gICAgY2FzZSAnc2VxdWVudGlhbCc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdwYXJhbGxlbCc6XG4gICAgICByZXR1cm4gMTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBleGVjdXRpb24gbW9kZTogJHtleGVjdXRpb25Nb2RlfWApO1xuICB9XG59O1xuXG5jb25zdCBhcHBlbmREZWZhdWx0T3B0aW9ucyA9IChvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogdm9pZCA9PiB7XG4gIGlmICghb3B0aW9ucy5leHRyYSkge1xuICAgIG9wdGlvbnMuZXh0cmEgPSB7fTtcbiAgfVxuICBpZiAoIW9wdGlvbnMuZXh0cmEuc2Vzc2lvbikge1xuICAgIG9wdGlvbnMuZXh0cmEuc2Vzc2lvbiA9IHt9O1xuICB9XG4gIGNvbnN0IHNlc3Npb24gPSBvcHRpb25zLmV4dHJhLnNlc3Npb24gYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgaWYgKCFzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgc2Vzc2lvbi51c2Vfb3J0X21vZGVsX2J5dGVzX2RpcmVjdGx5ID0gJzEnO1xuICB9XG5cbiAgLy8gaWYgdXNpbmcgSlNFUCB3aXRoIFdlYkdQVSwgYWx3YXlzIGRpc2FibGUgbWVtb3J5IHBhdHRlcm5cbiAgaWYgKG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzICYmXG4gICAgICBvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycy5zb21lKGVwID0+ICh0eXBlb2YgZXAgPT09ICdzdHJpbmcnID8gZXAgOiBlcC5uYW1lKSA9PT0gJ3dlYmdwdScpKSB7XG4gICAgb3B0aW9ucy5lbmFibGVNZW1QYXR0ZXJuID0gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IHNldEV4ZWN1dGlvblByb3ZpZGVycyA9XG4gICAgKHNlc3Npb25PcHRpb25zSGFuZGxlOiBudW1iZXIsIGV4ZWN1dGlvblByb3ZpZGVyczogcmVhZG9ubHkgSW5mZXJlbmNlU2Vzc2lvbi5FeGVjdXRpb25Qcm92aWRlckNvbmZpZ1tdLFxuICAgICBhbGxvY3M6IG51bWJlcltdKTogdm9pZCA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGVwIG9mIGV4ZWN1dGlvblByb3ZpZGVycykge1xuICAgICAgICBsZXQgZXBOYW1lID0gdHlwZW9mIGVwID09PSAnc3RyaW5nJyA/IGVwIDogZXAubmFtZTtcblxuICAgICAgICAvLyBjaGVjayBFUCBuYW1lXG4gICAgICAgIHN3aXRjaCAoZXBOYW1lKSB7XG4gICAgICAgICAgY2FzZSAneG5ucGFjayc6XG4gICAgICAgICAgICBlcE5hbWUgPSAnWE5OUEFDSyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd3ZWJubic6XG4gICAgICAgICAgICBlcE5hbWUgPSAnV0VCTk4nO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29uc3Qgd2Vibm5PcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5kZXZpY2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnZGV2aWNlVHlwZScsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYm5uT3B0aW9ucy5kZXZpY2VUeXBlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ2RldmljZVR5cGUnIC0gJHt3ZWJubk9wdGlvbnMuZGV2aWNlVHlwZX0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/Lm51bVRocmVhZHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbnVtVGhyZWFkcyA9IHdlYm5uT3B0aW9ucy5udW1UaHJlYWRzO1xuICAgICAgICAgICAgICAgIC8vIEp1c3QgaWdub3JlIGludmFsaWQgd2Vibm5PcHRpb25zLm51bVRocmVhZHMuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudW1UaHJlYWRzICE9ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG51bVRocmVhZHMpIHx8IG51bVRocmVhZHMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBudW1UaHJlYWRzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnbnVtVGhyZWFkcycsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG51bVRocmVhZHMudG9TdHJpbmcoKSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PVxuICAgICAgICAgICAgICAgICAgICAwKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdudW1UaHJlYWRzJyAtICR7d2Vibm5PcHRpb25zLm51bVRocmVhZHN9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5wb3dlclByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKCdwb3dlclByZWZlcmVuY2UnLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3Bvd2VyUHJlZmVyZW5jZScgLSAke3dlYm5uT3B0aW9ucy5wb3dlclByZWZlcmVuY2V9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnd2ViZ3B1JzpcbiAgICAgICAgICAgIGVwTmFtZSA9ICdKUyc7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb25zdCB3ZWJncHVPcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJHcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICAgICAgICAgICAgaWYgKHdlYmdwdU9wdGlvbnM/LnByZWZlcnJlZExheW91dCkge1xuICAgICAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gJ05DSFcnICYmIHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0ICE9PSAnTkhXQycpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJlZmVycmVkTGF5b3V0IG11c3QgYmUgZWl0aGVyICdOQ0hXJyBvciAnTkhXQyc6ICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoJ3ByZWZlcnJlZExheW91dCcsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0LCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3ByZWZlcnJlZExheW91dCcgLSAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3dhc20nOlxuICAgICAgICAgIGNhc2UgJ2NwdSc6XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlcE5hbWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGVwTmFtZSwgYWxsb2NzKTtcbiAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyKHNlc3Npb25PcHRpb25zSGFuZGxlLCBlcE5hbWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhcHBlbmQgZXhlY3V0aW9uIHByb3ZpZGVyOiAke2VwTmFtZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgY29uc3Qgc2V0U2Vzc2lvbk9wdGlvbnMgPSAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBbbnVtYmVyLCBudW1iZXJbXV0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgY29uc3QgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IHNlc3Npb25PcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgYXBwZW5kRGVmYXVsdE9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA9IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbChzZXNzaW9uT3B0aW9ucy5ncmFwaE9wdGltaXphdGlvbkxldmVsID8/ICdhbGwnKTtcbiAgICBjb25zdCBleGVjdXRpb25Nb2RlID0gZ2V0RXhlY3V0aW9uTW9kZShzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Nb2RlID8/ICdzZXF1ZW50aWFsJyk7XG4gICAgY29uc3QgbG9nSWREYXRhT2Zmc2V0ID1cbiAgICAgICAgdHlwZW9mIHNlc3Npb25PcHRpb25zLmxvZ0lkID09PSAnc3RyaW5nJyA/IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5sb2dJZCwgYWxsb2NzKSA6IDA7XG5cbiAgICBjb25zdCBsb2dTZXZlcml0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA/PyAyOyAgLy8gRGVmYXVsdCB0byAyIC0gd2FybmluZ1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsb2dTZXZlcml0eUxldmVsKSB8fCBsb2dTZXZlcml0eUxldmVsIDwgMCB8fCBsb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dTZXZlcml0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGxvZ1ZlcmJvc2l0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPz8gMDsgIC8vIERlZmF1bHQgdG8gMCAtIHZlcmJvc2VcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nVmVyYm9zaXR5TGV2ZWwpIHx8IGxvZ1ZlcmJvc2l0eUxldmVsIDwgMCB8fCBsb2dWZXJib3NpdHlMZXZlbCA+IDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW1pemVkTW9kZWxGaWxlUGF0aE9mZnNldCA9IHR5cGVvZiBzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoID09PSAnc3RyaW5nJyA/XG4gICAgICAgIGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoLCBhbGxvY3MpIDpcbiAgICAgICAgMDtcblxuICAgIHNlc3Npb25PcHRpb25zSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMoXG4gICAgICAgIGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlQ3B1TWVtQXJlbmEsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybiwgZXhlY3V0aW9uTW9kZSxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVQcm9maWxpbmcsIDAsIGxvZ0lkRGF0YU9mZnNldCwgbG9nU2V2ZXJpdHlMZXZlbCwgbG9nVmVyYm9zaXR5TGV2ZWwsXG4gICAgICAgIG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXQpO1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIHNlc3Npb24gb3B0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICBzZXRFeGVjdXRpb25Qcm92aWRlcnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycywgYWxsb2NzKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykge1xuICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIG5hbWUgbXVzdCBiZSBhIHN0cmluZzogJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSB8fCB2YWx1ZSA8IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIHZhbHVlIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG5hbWUsIGFsbG9jcyk7XG4gICAgICAgIGlmICh3YXNtLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIG5hbWVPZmZzZXQsIHZhbHVlKSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZTogJHtuYW1lfSAtICR7dmFsdWV9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlc3Npb25PcHRpb25zLmV4dHJhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMuZXh0cmEsICcnLCBuZXcgV2Vha1NldDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcblxuICAgICAgICBpZiAod2FzbS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG4vLyBUaGlzIGZpbGUgaW5jbHVkZXMgY29tbW9uIGRlZmluaXRpb25zLiBUaGV5IGRvIE5PVCBoYXZlIGRlcGVuZGVuY3kgb24gdGhlIFdlYkFzc2VtYmx5IGluc3RhbmNlLlxuXG4vKipcbiAqIENvcGllZCBmcm9tIE9OTlggZGVmaW5pdGlvbi4gVXNlIHRoaXMgdG8gZHJvcCBkZXBlbmRlbmN5ICdvbm54X3Byb3RvJyB0byBkZWNyZWFzZSBjb21waWxlZCAuanMgZmlsZSBzaXplLlxuICovXG5leHBvcnQgY29uc3QgZW51bSBEYXRhVHlwZSB7XG4gIHVuZGVmaW5lZCA9IDAsXG4gIGZsb2F0ID0gMSxcbiAgdWludDggPSAyLFxuICBpbnQ4ID0gMyxcbiAgdWludDE2ID0gNCxcbiAgaW50MTYgPSA1LFxuICBpbnQzMiA9IDYsXG4gIGludDY0ID0gNyxcbiAgc3RyaW5nID0gOCxcbiAgYm9vbCA9IDksXG4gIGZsb2F0MTYgPSAxMCxcbiAgZG91YmxlID0gMTEsXG4gIHVpbnQzMiA9IDEyLFxuICB1aW50NjQgPSAxMyxcbiAgY29tcGxleDY0ID0gMTQsXG4gIGNvbXBsZXgxMjggPSAxNSxcbiAgYmZsb2F0MTYgPSAxNlxufVxuXG4vKipcbiAqIE1hcCBzdHJpbmcgdGVuc29yIGRhdGEgdG8gZW51bSB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0gPSAodHlwZTogc3RyaW5nKTogRGF0YVR5cGUgPT4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdpbnQ4JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQ4O1xuICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50ODtcbiAgICBjYXNlICdib29sJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5ib29sO1xuICAgIGNhc2UgJ2ludDE2JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQxNjtcbiAgICBjYXNlICd1aW50MTYnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLnVpbnQxNjtcbiAgICBjYXNlICdpbnQzMic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuaW50MzI7XG4gICAgY2FzZSAndWludDMyJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50MzI7XG4gICAgY2FzZSAnZmxvYXQxNic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuZmxvYXQxNjtcbiAgICBjYXNlICdmbG9hdDMyJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5mbG9hdDtcbiAgICBjYXNlICdmbG9hdDY0JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5kb3VibGU7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5zdHJpbmc7XG4gICAgY2FzZSAnaW50NjQnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLmludDY0O1xuICAgIGNhc2UgJ3VpbnQ2NCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUudWludDY0O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogTWFwIGVudW0gdmFsdWUgdG8gc3RyaW5nIHRlbnNvciBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyA9ICh0eXBlUHJvdG86IERhdGFUeXBlKTogVGVuc29yLlR5cGUgPT4ge1xuICBzd2l0Y2ggKHR5cGVQcm90bykge1xuICAgIGNhc2UgRGF0YVR5cGUuaW50ODpcbiAgICAgIHJldHVybiAnaW50OCc7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50ODpcbiAgICAgIHJldHVybiAndWludDgnO1xuICAgIGNhc2UgRGF0YVR5cGUuYm9vbDpcbiAgICAgIHJldHVybiAnYm9vbCc7XG4gICAgY2FzZSBEYXRhVHlwZS5pbnQxNjpcbiAgICAgIHJldHVybiAnaW50MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUudWludDE2OlxuICAgICAgcmV0dXJuICd1aW50MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUuaW50MzI6XG4gICAgICByZXR1cm4gJ2ludDMyJztcbiAgICBjYXNlIERhdGFUeXBlLnVpbnQzMjpcbiAgICAgIHJldHVybiAndWludDMyJztcbiAgICBjYXNlIERhdGFUeXBlLmZsb2F0MTY6XG4gICAgICByZXR1cm4gJ2Zsb2F0MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUuZmxvYXQ6XG4gICAgICByZXR1cm4gJ2Zsb2F0MzInO1xuICAgIGNhc2UgRGF0YVR5cGUuZG91YmxlOlxuICAgICAgcmV0dXJuICdmbG9hdDY0JztcbiAgICBjYXNlIERhdGFUeXBlLnN0cmluZzpcbiAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICBjYXNlIERhdGFUeXBlLmludDY0OlxuICAgICAgcmV0dXJuICdpbnQ2NCc7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50NjQ6XG4gICAgICByZXR1cm4gJ3VpbnQ2NCc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZVByb3RvfWApO1xuICB9XG59O1xuXG4vKipcbiAqIGdldCB0ZW5zb3IgZWxlbWVudCBzaXplIGluIGJ5dGVzIGJ5IHRoZSBnaXZlbiBkYXRhIHR5cGVcbiAqIEByZXR1cm5zIHNpemUgaW4gaW50ZWdlciBvciB1bmRlZmluZWQgaWYgdGhlIGRhdGEgdHlwZSBpcyBub3Qgc3VwcG9ydGVkXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUZW5zb3JFbGVtZW50U2l6ZSA9IChkYXRlVHlwZTogbnVtYmVyKTogbnVtYmVyfFxuICAgIHVuZGVmaW5lZCA9PiBbdW5kZWZpbmVkLCA0LCAxLCAxLCAyLCAyLCA0LCA4LCB1bmRlZmluZWQsIDEsIDIsIDgsIDQsIDgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdW2RhdGVUeXBlXTtcblxuLyoqXG4gKiBnZXQgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IgYnkgdGhlIGdpdmVuIHRlbnNvciB0eXBlXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IgPSAodHlwZTogVGVuc29yLlR5cGUpOiBGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgSW50OEFycmF5Q29uc3RydWN0b3J8VWludDE2QXJyYXlDb25zdHJ1Y3RvcnxJbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MzJBcnJheUNvbnN0cnVjdG9yfEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxcbiAgICBVaW50OEFycmF5Q29uc3RydWN0b3J8RmxvYXQ2NEFycmF5Q29uc3RydWN0b3J8VWludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yID0+IHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdmbG9hdDE2JzpcbiAgICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2Zsb2F0MzInOlxuICAgICAgICAgIHJldHVybiBGbG9hdDMyQXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgICAgY2FzZSAnaW50OCc6XG4gICAgICAgICAgcmV0dXJuIEludDhBcnJheTtcbiAgICAgICAgY2FzZSAndWludDE2JzpcbiAgICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDE2JzpcbiAgICAgICAgICByZXR1cm4gSW50MTZBcnJheTtcbiAgICAgICAgY2FzZSAnaW50MzInOlxuICAgICAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgICAgICBjYXNlICdib29sJzpcbiAgICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgICAgY2FzZSAnZmxvYXQ2NCc6XG4gICAgICAgICAgcmV0dXJuIEZsb2F0NjRBcnJheTtcbiAgICAgICAgY2FzZSAndWludDMyJzpcbiAgICAgICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDY0JzpcbiAgICAgICAgICByZXR1cm4gQmlnSW50NjRBcnJheTtcbiAgICAgICAgY2FzZSAndWludDY0JzpcbiAgICAgICAgICByZXR1cm4gQmlnVWludDY0QXJyYXk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCB0eXBlOiAke3R5cGV9YCk7XG4gICAgICB9XG4gICAgfTtcblxuLyoqXG4gKiBNYXAgc3RyaW5nIGxvZyBsZXZlbCB0byBpbnRlZ2VyIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBsb2dMZXZlbFN0cmluZ1RvRW51bSA9IChsb2dMZXZlbD86ICd2ZXJib3NlJ3wnaW5mbyd8J3dhcm5pbmcnfCdlcnJvcid8J2ZhdGFsJyk6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAobG9nTGV2ZWwpIHtcbiAgICBjYXNlICd2ZXJib3NlJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2luZm8nOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAnd2FybmluZyc6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlICdmYXRhbCc6XG4gICAgICByZXR1cm4gNDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke2xvZ0xldmVsfWApO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHRlbnNvciB0eXBlIGlzIHN1cHBvcnRlZCBieSBHUFUgYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUgPSAodHlwZTogVGVuc29yLlR5cGUpOiB0eXBlIGlzIFRlbnNvci5HcHVCdWZmZXJEYXRhVHlwZXMgPT4gdHlwZSA9PT0gJ2Zsb2F0MzInIHx8XG4gICAgdHlwZSA9PT0gJ2ludDMyJyB8fCB0eXBlID09PSAnaW50NjQnIHx8IHR5cGUgPT09ICdib29sJyB8fCB0eXBlID09PSAnZmxvYXQxNicgfHwgdHlwZSA9PT0gJ3VpbnQzMic7XG5cbi8qKlxuICogTWFwIHN0cmluZyBkYXRhIGxvY2F0aW9uIHRvIGludGVnZXIgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bSA9IChsb2NhdGlvbjogVGVuc29yLkRhdGFMb2NhdGlvbik6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAobG9jYXRpb24pIHtcbiAgICBjYXNlICdub25lJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2NwdSc6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlICdjcHUtcGlubmVkJzpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gNDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIGxvY2F0aW9uOiAke2xvY2F0aW9ufWApO1xuICB9XG59O1xuXG4vKipcbiAqIE1hcCBpbnRlZ2VyIGRhdGEgbG9jYXRpb24gdG8gc3RyaW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBkYXRhTG9jYXRpb25FbnVtVG9TdHJpbmcgPSAobG9jYXRpb246IG51bWJlcik6IFRlbnNvci5EYXRhTG9jYXRpb258dW5kZWZpbmVkID0+XG4gICAgKFsnbm9uZScsICdjcHUnLCAnY3B1LXBpbm5lZCcsICd0ZXh0dXJlJywgJ2dwdS1idWZmZXInXSBhcyBjb25zdClbbG9jYXRpb25dO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0VudiwgSW5mZXJlbmNlU2Vzc2lvbiwgVGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge1NlcmlhbGl6YWJsZU1vZGVsZGF0YSwgU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhLCBTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YSwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtzZXRSdW5PcHRpb25zfSBmcm9tICcuL3J1bi1vcHRpb25zJztcbmltcG9ydCB7c2V0U2Vzc2lvbk9wdGlvbnN9IGZyb20gJy4vc2Vzc2lvbi1vcHRpb25zJztcbmltcG9ydCB7ZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtLCBnZXRUZW5zb3JFbGVtZW50U2l6ZSwgaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlLCBsb2dMZXZlbFN0cmluZ1RvRW51bSwgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcsIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtLCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3J9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuXG5sZXQgb3J0RW52SW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBnZXQgdGhlIGlucHV0L291dHB1dCBjb3VudCBvZiB0aGUgc2Vzc2lvbi5cbiAqIEBwYXJhbSBzZXNzaW9uSGFuZGxlIHRoZSBoYW5kbGUgcmVwcmVzZW50aW5nIHRoZSBzZXNzaW9uLiBzaG91bGQgYmUgbm9uLXplcm8uXG4gKiBAcmV0dXJucyBhIHR1cGxlIGluY2x1ZGluZyAyIG51bWJlcnMsIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgY291bnQgYW5kIG91dHB1dCBjb3VudC5cbiAqL1xuY29uc3QgZ2V0U2Vzc2lvbklucHV0T3V0cHV0Q291bnQgPSAoc2Vzc2lvbkhhbmRsZTogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRJbnB1dE91dHB1dENvdW50KHNlc3Npb25IYW5kbGUsIGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyA0KTtcbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgc2Vzc2lvbiBpbnB1dC9vdXRwdXQgY291bnQuJyk7XG4gICAgfVxuICAgIHJldHVybiBbd2FzbS5IRUFQMzJbZGF0YU9mZnNldCAvIDRdLCB3YXNtLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogaW5pdGlhbGl6ZSBPUlQgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0gbnVtVGhyZWFkcyBTZXRHbG9iYWxJbnRyYU9wTnVtVGhyZWFkcyhudW1UaHJlYWRzKVxuICogQHBhcmFtIGxvZ2dpbmdMZXZlbCBDcmVhdGVFbnYoc3RhdGljX2Nhc3Q8T3J0TG9nZ2luZ0xldmVsPihsb2dnaW5nX2xldmVsKSlcbiAqL1xuY29uc3QgaW5pdE9ydCA9IChudW1UaHJlYWRzOiBudW1iZXIsIGxvZ2dpbmdMZXZlbDogbnVtYmVyKTogdm9pZCA9PiB7XG4gIGNvbnN0IGVycm9yQ29kZSA9IGdldEluc3RhbmNlKCkuX09ydEluaXQobnVtVGhyZWFkcywgbG9nZ2luZ0xldmVsKTtcbiAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGluaXRpYWxpemUgb25ueHJ1bnRpbWUuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogaW50aWFsaXplIHJ1bnRpbWUgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0gZW52IHBhc3NlZCBpbiB0aGUgZW52aXJvbm1lbnQgY29uZmlnIG9iamVjdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGluaXRSdW50aW1lID0gYXN5bmMoZW52OiBFbnYpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgLy8gaW5pdCBPUlRcbiAgaW5pdE9ydChlbnYud2FzbS5udW1UaHJlYWRzISwgbG9nTGV2ZWxTdHJpbmdUb0VudW0oZW52LmxvZ0xldmVsKSk7XG5cbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVKSB7XG4gICAgLy8gaW5pdCBKU0VQIGlmIGF2YWlsYWJsZVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHMsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICBjb25zdCBpbml0SnNlcCA9IHJlcXVpcmUoJy4vanNlcC9pbml0JykuaW5pdDtcbiAgICBhd2FpdCBpbml0SnNlcChnZXRJbnN0YW5jZSgpLCBlbnYpO1xuICB9XG5cbiAgb3J0RW52SW5pdGlhbGl6ZWQgPSB0cnVlO1xufTtcblxuLyoqXG4gKiB2YWxpZCBkYXRhIGxvY2F0aW9ucyBmb3IgaW5wdXQvb3V0cHV0IHRlbnNvcnMuXG4gKi9cbnR5cGUgU3VwcG9ydGVkVGVuc29yRGF0YUxvY2F0aW9uRm9ySW5wdXRPdXRwdXQgPSAnY3B1J3wnY3B1LXBpbm5lZCd8J2dwdS1idWZmZXInO1xuXG50eXBlIElPQmluZGluZ1N0YXRlID0ge1xuICAvKipcbiAgICogdGhlIGhhbmRsZSBvZiBJTyBiaW5kaW5nLlxuICAgKi9cbiAgcmVhZG9ubHkgaGFuZGxlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIHRoZSBwcmVmZXJyZWQgbG9jYXRpb24gZm9yIGVhY2ggb3V0cHV0IHRlbnNvci5cbiAgICpcbiAgICogdmFsdWUgaXMgb25lIG9mICdjcHUnLCAnY3B1LXBpbm5lZCcsICdncHUtYnVmZmVyJy5cbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dFByZWZlcnJlZExvY2F0aW9uczogcmVhZG9ubHkgU3VwcG9ydGVkVGVuc29yRGF0YUxvY2F0aW9uRm9ySW5wdXRPdXRwdXRbXTtcblxuICAvKipcbiAgICogZW51bSB2YWx1ZSBvZiB0aGUgcHJlZmVycmVkIGxvY2F0aW9uIGZvciBlYWNoIG91dHB1dCB0ZW5zb3IuXG4gICAqL1xuICByZWFkb25seSBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkOiByZWFkb25seSBudW1iZXJbXTtcbn07XG5cbi8qKlxuICogIHR1cGxlIGVsZW1lbnRzIGFyZTogSW5mZXJlbmNlU2Vzc2lvbiBJRDsgaW5wdXROYW1lc1VURjhFbmNvZGVkOyBvdXRwdXROYW1lc1VURjhFbmNvZGVkOyBiaW5kaW5nU3RhdGVcbiAqL1xudHlwZSBTZXNzaW9uTWV0YWRhdGEgPSBbXG4gIGluZmVyZW5jZVNlc3Npb25JZDogbnVtYmVyLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQ6IG51bWJlcltdLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkOiBudW1iZXJbXSxcbiAgYmluZGluZ1N0YXRlOiBJT0JpbmRpbmdTdGF0ZXxudWxsXG5dO1xuXG5jb25zdCBhY3RpdmVTZXNzaW9ucyA9IG5ldyBNYXA8bnVtYmVyLCBTZXNzaW9uTWV0YWRhdGE+KCk7XG5cbmV4cG9ydCBjb25zdCBpc09ydEVudkluaXRpYWxpemVkID0gKCk6IGJvb2xlYW4gPT4gb3J0RW52SW5pdGlhbGl6ZWQ7XG5cbi8qKlxuICogYWxsb2NhdGUgdGhlIG1lbW9yeSBhbmQgbWVtY3B5IHRoZSBtb2RlbCBieXRlcywgcHJlcGFyaW5nIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiBJbmZlcmVuY2VTZXNzaW9uLlxuICogQHJldHVybnMgYSAyLWVsZW1lbnRzIHR1cGxlIC0gdGhlIHBvaW50ZXIgYW5kIHNpemUgb2YgdGhlIGFsbG9jYXRlZCBidWZmZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlc3Npb25BbGxvY2F0ZSA9IChtb2RlbDogVWludDhBcnJheSk6IFtudW1iZXIsIG51bWJlcl0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3QgbW9kZWxEYXRhT2Zmc2V0ID0gd2FzbS5fbWFsbG9jKG1vZGVsLmJ5dGVMZW5ndGgpO1xuICBpZiAobW9kZWxEYXRhT2Zmc2V0ID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLiBmYWlsZWQgdG8gYWxsb2NhdGUgYSBidWZmZXIgb2Ygc2l6ZSAke21vZGVsLmJ5dGVMZW5ndGh9LmApO1xuICB9XG4gIHdhc20uSEVBUFU4LnNldChtb2RlbCwgbW9kZWxEYXRhT2Zmc2V0KTtcbiAgcmV0dXJuIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsLmJ5dGVMZW5ndGhdO1xufTtcblxuLyoqXG4gKiBjcmVhdGUgYW4gaW5mZXJlbmNlIHNlc3Npb24gdXNpbmcgdGhlIHByZXBhcmVkIGJ1ZmZlciBjb250YWluaW5nIHRoZSBtb2RlbCBkYXRhLlxuICogQHBhcmFtIG1vZGVsRGF0YSBhIDItZWxlbWVudHMgdHVwbGUgY29udGFpbmluZyB0aGUgcG9pbnRlciBhbmQgc2l6ZSBvZiB0aGUgbW9kZWwgZGF0YSBidWZmZXIuXG4gKiBAcGFyYW0gb3B0aW9ucyBhbiBvcHRpb25hbCBzZXNzaW9uIG9wdGlvbnMgb2JqZWN0LlxuICogQHJldHVybnMgYSAzLWVsZW1lbnRzIHR1cGxlIGNvbnRhaW5pbmcgW3Nlc3Npb24gaGFuZGxlLCBpbnB1dCBuYW1lcywgb3V0cHV0IG5hbWVzXVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2Vzc2lvbkZpbmFsaXplID1cbiAgICAobW9kZWxEYXRhOiBTZXJpYWxpemFibGVNb2RlbGRhdGEsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhID0+IHtcbiAgICAgIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gICAgICBsZXQgc2Vzc2lvbkhhbmRsZSA9IDA7XG4gICAgICBsZXQgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgICAgbGV0IGlvQmluZGluZ0hhbmRsZSA9IDA7XG4gICAgICBsZXQgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgY29uc3QgaW5wdXROYW1lc1VURjhFbmNvZGVkID0gW107XG4gICAgICBjb25zdCBvdXRwdXROYW1lc1VURjhFbmNvZGVkID0gW107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXSA9IHNldFNlc3Npb25PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIHNlc3Npb25IYW5kbGUgPSB3YXNtLl9PcnRDcmVhdGVTZXNzaW9uKG1vZGVsRGF0YVswXSwgbW9kZWxEYXRhWzFdLCBzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICAgIGlmIChzZXNzaW9uSGFuZGxlID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIGEgc2Vzc2lvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtpbnB1dENvdW50LCBvdXRwdXRDb3VudF0gPSBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlKTtcblxuICAgICAgICBjb25zdCBpbnB1dE5hbWVzID0gW107XG4gICAgICAgIGNvbnN0IG91dHB1dE5hbWVzID0gW107XG4gICAgICAgIGNvbnN0IG91dHB1dFByZWZlcnJlZExvY2F0aW9uczogU3VwcG9ydGVkVGVuc29yRGF0YUxvY2F0aW9uRm9ySW5wdXRPdXRwdXRbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtLl9PcnRHZXRJbnB1dE5hbWUoc2Vzc2lvbkhhbmRsZSwgaSk7XG4gICAgICAgICAgaWYgKG5hbWUgPT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGdldCBhbiBpbnB1dCBuYW1lLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgICBpbnB1dE5hbWVzLnB1c2god2FzbS5VVEY4VG9TdHJpbmcobmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtLl9PcnRHZXRPdXRwdXROYW1lKHNlc3Npb25IYW5kbGUsIGkpO1xuICAgICAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgYW4gb3V0cHV0IG5hbWUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgICBjb25zdCBuYW1lU3RyaW5nID0gd2FzbS5VVEY4VG9TdHJpbmcobmFtZSk7XG4gICAgICAgICAgb3V0cHV0TmFtZXMucHVzaChuYW1lU3RyaW5nKTtcblxuICAgICAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSkge1xuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0eXBlb2Ygb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24gPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgICAgICBvcHRpb25zLnByZWZlcnJlZE91dHB1dExvY2F0aW9uIDpcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbj8uW25hbWVTdHJpbmddID8/ICdjcHUnO1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uICE9PSAnY3B1JyAmJiBsb2NhdGlvbiAhPT0gJ2NwdS1waW5uZWQnICYmIGxvY2F0aW9uICE9PSAnZ3B1LWJ1ZmZlcicpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3Qgc3VwcG9ydGVkIHByZWZlcnJlZCBvdXRwdXQgbG9jYXRpb246ICR7bG9jYXRpb259LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnB1c2gobG9jYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVzZSBJTyBiaW5kaW5nIG9ubHkgd2hlbiBhdCBsZWFzdCBvbmUgb3V0cHV0IGlzIHByZWZmZXJlZCB0byBiZSBvbiBHUFUuXG4gICAgICAgIGxldCBiaW5kaW5nU3RhdGU6IElPQmluZGluZ1N0YXRlfG51bGwgPSBudWxsO1xuICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnNvbWUobCA9PiBsID09PSAnZ3B1LWJ1ZmZlcicpKSB7XG4gICAgICAgICAgaW9CaW5kaW5nSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlQmluZGluZyhzZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgICBpZiAoaW9CaW5kaW5nSGFuZGxlID09PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBjcmVhdGUgSU8gYmluZGluZy4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiaW5kaW5nU3RhdGUgPSB7XG4gICAgICAgICAgICBoYW5kbGU6IGlvQmluZGluZ0hhbmRsZSxcbiAgICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucyxcbiAgICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQ6IG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5tYXAobCA9PiBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obCkpLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBhY3RpdmVTZXNzaW9ucy5zZXQoc2Vzc2lvbkhhbmRsZSwgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgYmluZGluZ1N0YXRlXSk7XG4gICAgICAgIHJldHVybiBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lcywgb3V0cHV0TmFtZXNdO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaChidWYgPT4gd2FzbS5fT3J0RnJlZShidWYpKTtcbiAgICAgICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuXG4gICAgICAgIGlmIChpb0JpbmRpbmdIYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlQmluZGluZyhpb0JpbmRpbmdIYW5kbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlc3Npb25IYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5fZnJlZShtb2RlbERhdGFbMF0pO1xuICAgICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgICB9XG4gICAgICAgIGFsbG9jcy5mb3JFYWNoKGFsbG9jID0+IHdhc20uX2ZyZWUoYWxsb2MpKTtcbiAgICAgIH1cbiAgICB9O1xuXG5cbi8qKlxuICogY3JlYXRlIGFuIGluc3RhbmNlIG9mIEluZmVyZW5jZVNlc3Npb24uXG4gKiBAcmV0dXJucyB0aGUgbWV0YWRhdGEgb2YgSW5mZXJlbmNlU2Vzc2lvbi4gMC12YWx1ZSBoYW5kbGUgZm9yIGZhaWx1cmUuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uID1cbiAgICAobW9kZWw6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhID0+IHtcbiAgICAgIGNvbnN0IG1vZGVsRGF0YTogU2VyaWFsaXphYmxlTW9kZWxkYXRhID0gY3JlYXRlU2Vzc2lvbkFsbG9jYXRlKG1vZGVsKTtcbiAgICAgIHJldHVybiBjcmVhdGVTZXNzaW9uRmluYWxpemUobW9kZWxEYXRhLCBvcHRpb25zKTtcbiAgICB9O1xuXG5leHBvcnQgY29uc3QgcmVsZWFzZVNlc3Npb24gPSAoc2Vzc2lvbklkOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVsZWFzZSBzZXNzaW9uLiBpbnZhbGlkIHNlc3Npb24gaWQ6ICR7c2Vzc2lvbklkfWApO1xuICB9XG4gIGNvbnN0IFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGlvQmluZGluZ1N0YXRlXSA9IHNlc3Npb247XG5cbiAgaWYgKGlvQmluZGluZ1N0YXRlKSB7XG4gICAgd2FzbS5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgfVxuXG4gIHdhc20uanNlcFVucmVnaXN0ZXJCdWZmZXJzPy4oc2Vzc2lvbklkKTtcblxuICBpbnB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaChidWYgPT4gd2FzbS5fT3J0RnJlZShidWYpKTtcbiAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgYWN0aXZlU2Vzc2lvbnMuZGVsZXRlKHNlc3Npb25JZCk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yID1cbiAgICAodGVuc29yOiBUZW5zb3JNZXRhZGF0YXxudWxsLCB0ZW5zb3JIYW5kbGVzOiBudW1iZXJbXSwgYWxsb2NzOiBudW1iZXJbXSwgc2Vzc2lvbklkOiBudW1iZXIsIGluZGV4OiBudW1iZXIpOlxuICAgICAgICB2b2lkID0+IHtcbiAgICAgICAgICBpZiAoIXRlbnNvcikge1xuICAgICAgICAgICAgdGVuc29ySGFuZGxlcy5wdXNoKDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB0ZW5zb3JbMF07XG4gICAgICAgICAgY29uc3QgZGltcyA9IHRlbnNvclsxXTtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRlbnNvclszXTtcblxuICAgICAgICAgIGxldCByYXdEYXRhOiBudW1iZXI7XG4gICAgICAgICAgbGV0IGRhdGFCeXRlTGVuZ3RoOiBudW1iZXI7XG5cbiAgICAgICAgICBpZiAoZGF0YVR5cGUgPT09ICdzdHJpbmcnICYmIGxvY2F0aW9uID09PSAnZ3B1LWJ1ZmZlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIHRlbnNvciBpcyBub3Qgc3VwcG9ydGVkIG9uIEdQVS4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobG9jYXRpb24gPT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICAgICAgY29uc3QgZ3B1QnVmZmVyID0gdGVuc29yWzJdLmdwdUJ1ZmZlciBhcyBHUFVCdWZmZXI7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50U2l6ZUluQnl0ZXMgPSBnZXRUZW5zb3JFbGVtZW50U2l6ZSh0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSkpITtcbiAgICAgICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKSAqIGVsZW1lbnRTaXplSW5CeXRlcztcbiAgICAgICAgICAgIHJhd0RhdGEgPSB3YXNtLmpzZXBSZWdpc3RlckJ1ZmZlcihzZXNzaW9uSWQsIGluZGV4LCBncHVCdWZmZXIsIGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgLy8gc3RyaW5nIHRlbnNvclxuICAgICAgICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IDQgKiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgcmF3RGF0YSA9IHdhc20uX21hbGxvYyhkYXRhQnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgIGFsbG9jcy5wdXNoKHJhd0RhdGEpO1xuICAgICAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gcmF3RGF0YSAvIDQ7XG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHRlbnNvciBkYXRhIGF0IGluZGV4ICR7aX0gaXMgbm90IGEgc3RyaW5nYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhc20uSEVBUFUzMltkYXRhSW5kZXgrK10gPSBhbGxvY1dhc21TdHJpbmcoZGF0YVtpXSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgIHJhd0RhdGEgPSB3YXNtLl9tYWxsb2MoZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICBhbGxvY3MucHVzaChyYXdEYXRhKTtcbiAgICAgICAgICAgICAgd2FzbS5IRUFQVTguc2V0KG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGFCeXRlTGVuZ3RoKSwgcmF3RGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICAgICAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCAqIGRpbXMubGVuZ3RoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGRpbUluZGV4ID0gZGltc09mZnNldCAvIDQ7XG4gICAgICAgICAgICBkaW1zLmZvckVhY2goZCA9PiB3YXNtLkhFQVAzMltkaW1JbmRleCsrXSA9IGQpO1xuICAgICAgICAgICAgY29uc3QgdGVuc29yID0gd2FzbS5fT3J0Q3JlYXRlVGVuc29yKFxuICAgICAgICAgICAgICAgIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKGRhdGFUeXBlKSwgcmF3RGF0YSwgZGF0YUJ5dGVMZW5ndGgsIGRpbXNPZmZzZXQsIGRpbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsb2NhdGlvbikpO1xuICAgICAgICAgICAgaWYgKHRlbnNvciA9PT0gMCkge1xuICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgY3JlYXRlIHRlbnNvciBmb3IgaW5wdXQvb3V0cHV0LiBzZXNzaW9uPSR7c2Vzc2lvbklkfSwgaW5kZXg9JHtpbmRleH0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW5zb3JIYW5kbGVzLnB1c2godGVuc29yKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuLyoqXG4gKiBwZXJmb3JtIGluZmVyZW5jZSBydW5cbiAqL1xuZXhwb3J0IGNvbnN0IHJ1biA9IGFzeW5jKFxuICAgIHNlc3Npb25JZDogbnVtYmVyLCBpbnB1dEluZGljZXM6IG51bWJlcltdLCBpbnB1dFRlbnNvcnM6IFRlbnNvck1ldGFkYXRhW10sIG91dHB1dEluZGljZXM6IG51bWJlcltdLFxuICAgIG91dHB1dFRlbnNvcnM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+LCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFRlbnNvck1ldGFkYXRhW10+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcnVuIGluZmVyZW5jZS4gaW52YWxpZCBzZXNzaW9uIGlkOiAke3Nlc3Npb25JZH1gKTtcbiAgfVxuICBjb25zdCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZV0gPSBzZXNzaW9uO1xuXG4gIGNvbnN0IGlucHV0Q291bnQgPSBpbnB1dEluZGljZXMubGVuZ3RoO1xuICBjb25zdCBvdXRwdXRDb3VudCA9IG91dHB1dEluZGljZXMubGVuZ3RoO1xuXG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgbGV0IHJ1bk9wdGlvbnNBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgaW5wdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBvdXRwdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBpbnB1dE91dHB1dEFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBiZWZvcmVSdW5TdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIGNvbnN0IGlucHV0VmFsdWVzT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgY29uc3QgaW5wdXROYW1lc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhpbnB1dENvdW50ICogNCk7XG4gIGNvbnN0IG91dHB1dFZhbHVlc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuICBjb25zdCBvdXRwdXROYW1lc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuXG4gIHRyeSB7XG4gICAgW3J1bk9wdGlvbnNIYW5kbGUsIHJ1bk9wdGlvbnNBbGxvY3NdID0gc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIGNyZWF0ZSBpbnB1dCB0ZW5zb3JzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihpbnB1dFRlbnNvcnNbaV0sIGlucHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzW2ldKTtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgb3V0cHV0IHRlbnNvcnNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihcbiAgICAgICAgICBvdXRwdXRUZW5zb3JzW2ldLCBvdXRwdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgc2Vzc2lvbklkLCBpbnB1dENvdW50ICsgb3V0cHV0SW5kaWNlc1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGlucHV0VmFsdWVzSW5kZXggPSBpbnB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgbGV0IGlucHV0TmFtZXNJbmRleCA9IGlucHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgIGxldCBvdXRwdXRWYWx1ZXNJbmRleCA9IG91dHB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgbGV0IG91dHB1dE5hbWVzSW5kZXggPSBvdXRwdXROYW1lc09mZnNldCAvIDQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIHdhc20uSEVBUFUzMltpbnB1dFZhbHVlc0luZGV4KytdID0gaW5wdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgd2FzbS5IRUFQVTMyW2lucHV0TmFtZXNJbmRleCsrXSA9IGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbnB1dEluZGljZXNbaV1dO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgIHdhc20uSEVBUFUzMltvdXRwdXRWYWx1ZXNJbmRleCsrXSA9IG91dHB1dFRlbnNvckhhbmRsZXNbaV07XG4gICAgICB3YXNtLkhFQVBVMzJbb3V0cHV0TmFtZXNJbmRleCsrXSA9IG91dHB1dE5hbWVzVVRGOEVuY29kZWRbb3V0cHV0SW5kaWNlc1tpXV07XG4gICAgfVxuXG4gICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVICYmIGlvQmluZGluZ1N0YXRlKSB7XG4gICAgICBjb25zdCB7aGFuZGxlLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWR9ID0gaW9CaW5kaW5nU3RhdGU7XG5cbiAgICAgIGlmIChpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RoICE9PSBpbnB1dENvdW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgY291bnQgZnJvbSBmZWVkcyAoJHtcbiAgICAgICAgICAgIGlucHV0Q291bnR9KSBpcyBleHBlY3RlZCB0byBiZSBhbHdheXMgZXF1YWwgdG8gbW9kZWwncyBpbnB1dCBjb3VudCAoJHtpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RofSkuYCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHByb2Nlc3MgaW5wdXRzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBpbmRleCA9IGlucHV0SW5kaWNlc1tpXTtcbiAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gYXdhaXQgd2FzbS5fT3J0QmluZElucHV0KGhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgaW5wdXRUZW5zb3JIYW5kbGVzW2ldKTtcbiAgICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIGlucHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwcm9jZXNzIHByZS1hbGxvY2F0ZWQgb3V0cHV0c1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gb3V0cHV0SW5kaWNlc1tpXTtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBvdXRwdXRUZW5zb3JzW2ldPy5bM107ICAvLyB1bmRlZmluZWQgbWVhbnMgb3V0cHV0IGlzIG5vdCBwcmUtYWxsb2NhdGVkLlxuXG4gICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgIC8vIG91dHB1dCBpcyBwcmUtYWxsb2NhdGVkLiBiaW5kIHRoZSB0ZW5zb3IuXG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldLCAwKTtcbiAgICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBwcmUtYWxsb2NhdGVkIG91dHB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG91dHB1dCBpcyBub3QgcHJlLWFsbG9jYXRlZC4gcmVzZXQgcHJlZmVycmVkIGxvY2F0aW9uLlxuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9XG4gICAgICAgICAgICAgIHdhc20uX09ydEJpbmRPdXRwdXQoaGFuZGxlLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgMCwgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZFtpbmRleF0pO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIG91dHB1dFske2l9XSB0byAke291dHB1dFByZWZlcnJlZExvY2F0aW9uc1tpXX0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBlcnJvckNvZGU6IG51bWJlcjtcblxuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSAmJiBpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgZXJyb3JDb2RlID0gYXdhaXQgd2FzbS5fT3J0UnVuV2l0aEJpbmRpbmcoXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSwgaW9CaW5kaW5nU3RhdGUuaGFuZGxlLCBvdXRwdXRDb3VudCwgb3V0cHV0VmFsdWVzT2Zmc2V0LCBydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JDb2RlID0gYXdhaXQgd2FzbS5fT3J0UnVuKFxuICAgICAgICAgIHNlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNPZmZzZXQsIGlucHV0VmFsdWVzT2Zmc2V0LCBpbnB1dENvdW50LCBvdXRwdXROYW1lc09mZnNldCwgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LCBydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignZmFpbGVkIHRvIGNhbGwgT3J0UnVuKCkuJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0OiBUZW5zb3JNZXRhZGF0YVtdID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHRlbnNvciA9IHdhc20uSEVBUFUzMltvdXRwdXRWYWx1ZXNPZmZzZXQgLyA0ICsgaV07XG4gICAgICBpZiAodGVuc29yID09PSBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldKSB7XG4gICAgICAgIC8vIG91dHB1dCB0ZW5zb3IgaXMgcHJlLWFsbG9jYXRlZC4gbm8gbmVlZCB0byBjb3B5IGRhdGEuXG4gICAgICAgIG91dHB1dC5wdXNoKG91dHB1dFRlbnNvcnNbaV0hKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gICAgICAvLyBzdGFjayBhbGxvY2F0ZSA0IHBvaW50ZXIgdmFsdWVcbiAgICAgIGNvbnN0IHRlbnNvckRhdGFPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCAqIDQpO1xuXG4gICAgICBsZXQga2VlcE91dHB1dFRlbnNvciA9IGZhbHNlO1xuICAgICAgbGV0IHR5cGU6IFRlbnNvci5UeXBlfHVuZGVmaW5lZCwgZGF0YU9mZnNldCA9IDA7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRUZW5zb3JEYXRhKFxuICAgICAgICAgICAgdGVuc29yLCB0ZW5zb3JEYXRhT2Zmc2V0LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgNCwgdGVuc29yRGF0YU9mZnNldCArIDgsIHRlbnNvckRhdGFPZmZzZXQgKyAxMik7XG4gICAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYWNjZXNzIG91dHB1dCB0ZW5zb3IgZGF0YSBvbiBpbmRleCAke2l9LmApO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZW5zb3JEYXRhSW5kZXggPSB0ZW5zb3JEYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICBkYXRhT2Zmc2V0ID0gd2FzbS5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgY29uc3QgZGltc09mZnNldCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgIGNvbnN0IGRpbXNMZW5ndGggPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICBjb25zdCBkaW1zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGltc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZGltcy5wdXNoKHdhc20uSEVBUFUzMltkaW1zT2Zmc2V0IC8gNCArIGldKTtcbiAgICAgICAgfVxuICAgICAgICB3YXNtLl9PcnRGcmVlKGRpbXNPZmZzZXQpO1xuXG4gICAgICAgIGNvbnN0IHNpemUgPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpO1xuICAgICAgICB0eXBlID0gdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcoZGF0YVR5cGUpO1xuXG4gICAgICAgIGNvbnN0IHByZWZlcnJlZExvY2F0aW9uID0gaW9CaW5kaW5nU3RhdGU/Lm91dHB1dFByZWZlcnJlZExvY2F0aW9uc1tvdXRwdXRJbmRpY2VzW2ldXTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzdHJpbmdEYXRhOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgIGxldCBkYXRhSW5kZXggPSBkYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gd2FzbS5IRUFQVTMyW2RhdGFJbmRleCsrXTtcbiAgICAgICAgICAgIGNvbnN0IG1heEJ5dGVzVG9SZWFkID0gaSA9PT0gc2l6ZSAtIDEgPyB1bmRlZmluZWQgOiB3YXNtLkhFQVBVMzJbZGF0YUluZGV4XSAtIG9mZnNldDtcbiAgICAgICAgICAgIHN0cmluZ0RhdGEucHVzaCh3YXNtLlVURjhUb1N0cmluZyhvZmZzZXQsIG1heEJ5dGVzVG9SZWFkKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBzdHJpbmdEYXRhLCAnY3B1J10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIGEgY2VydGFpbiBvdXRwdXQncyBwcmVmZXJyZWQgbG9jYXRpb24gaXMgR1BVIGJ1dCB0aGUgdGVuc29yIGlzIGVtcHR5LCB3ZSBzdGlsbCBuZWVkIHRvIGNyZWF0ZSBhIENQVVxuICAgICAgICAgIC8vIHRlbnNvciBmb3IgaXQuIFRoZXJlIGlzIG5vIG1hcHBpbmcgR1BVIGJ1ZmZlciBmb3IgYW4gZW1wdHkgdGVuc29yLlxuICAgICAgICAgIGlmIChwcmVmZXJyZWRMb2NhdGlvbiA9PT0gJ2dwdS1idWZmZXInICYmIHNpemUgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBncHVCdWZmZXIgPSB3YXNtLmpzZXBHZXRCdWZmZXIoZGF0YU9mZnNldCk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50U2l6ZSA9IGdldFRlbnNvckVsZW1lbnRTaXplKGRhdGFUeXBlKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50U2l6ZSA9PT0gdW5kZWZpbmVkIHx8ICFpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZG8gbm90IHJlbGVhc2UgdGhlIHRlbnNvciByaWdodCBub3cuIGl0IHdpbGwgYmUgcmVsZWFzZWQgd2hlbiB1c2VyIGNhbGxzIHRlbnNvci5kaXNwb3NlKCkuXG4gICAgICAgICAgICBrZWVwT3V0cHV0VGVuc29yID0gdHJ1ZTtcblxuICAgICAgICAgICAgb3V0cHV0LnB1c2goW1xuICAgICAgICAgICAgICB0eXBlLCBkaW1zLCB7XG4gICAgICAgICAgICAgICAgZ3B1QnVmZmVyLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkOiB3YXNtLmpzZXBDcmVhdGVEb3dubG9hZGVyKGdwdUJ1ZmZlciwgc2l6ZSAqIGVsZW1lbnRTaXplLCB0eXBlKSxcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnZ3B1LWJ1ZmZlcidcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IodHlwZSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IHR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzaXplKTtcbiAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAuc2V0KHdhc20uSEVBUFU4LnN1YmFycmF5KGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyBkYXRhLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBkYXRhLCAnY3B1J10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5zdGFja1Jlc3RvcmUoYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIGRhdGFPZmZzZXQpIHtcbiAgICAgICAgICB3YXNtLl9mcmVlKGRhdGFPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgha2VlcE91dHB1dFRlbnNvcikge1xuICAgICAgICAgIHdhc20uX09ydFJlbGVhc2VUZW5zb3IodGVuc29yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgd2FzbS5fT3J0Q2xlYXJCb3VuZE91dHB1dHMoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKGJlZm9yZVJ1blN0YWNrKTtcblxuICAgIGlucHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgb3V0cHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgaW5wdXRPdXRwdXRBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuXG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBydW5PcHRpb25zQWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcbiAgfVxufTtcblxuLyoqXG4gKiBlbmQgcHJvZmlsaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBlbmRQcm9maWxpbmcgPSAoc2Vzc2lvbklkOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNlc3Npb24gaWQnKTtcbiAgfVxuICBjb25zdCBzZXNzaW9uSGFuZGxlID0gc2Vzc2lvblswXTtcblxuICAvLyBwcm9maWxlIGZpbGUgbmFtZSBpcyBub3QgdXNlZCB5ZXQsIGJ1dCBpdCBtdXN0IGJlIGZyZWVkLlxuICBjb25zdCBwcm9maWxlRmlsZU5hbWUgPSB3YXNtLl9PcnRFbmRQcm9maWxpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gIGlmIChwcm9maWxlRmlsZU5hbWUgPT09IDApIHtcbiAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgYW4gcHJvZmlsZSBmaWxlIG5hbWUuJyk7XG4gIH1cbiAgd2FzbS5fT3J0RnJlZShwcm9maWxlRmlsZU5hbWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzID0gKHRlbnNvcnM6IHJlYWRvbmx5IFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhW10pOiBBcnJheUJ1ZmZlckxpa2VbXSA9PiB7XG4gIGNvbnN0IGJ1ZmZlcnM6IEFycmF5QnVmZmVyTGlrZVtdID0gW107XG4gIGZvciAoY29uc3QgdGVuc29yIG9mIHRlbnNvcnMpIHtcbiAgICBjb25zdCBkYXRhID0gdGVuc29yWzJdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSAmJiAnYnVmZmVyJyBpbiBkYXRhKSB7XG4gICAgICBidWZmZXJzLnB1c2goZGF0YS5idWZmZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnVmZmVycztcbn07XG4iLCAiLyohXG4gKiBPTk5YIFJ1bnRpbWUgV2ViIHYxLjE3LjBcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cInVzZSBzdHJpY3RcIjtcbigoKSA9PiB7XG4gIHZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gIHZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgdmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gIHZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgX19lc20gPSAoZm4sIHJlcykgPT4gZnVuY3Rpb24gX19pbml0KCkge1xuICAgIHJldHVybiBmbiAmJiAocmVzID0gKDAsIGZuW19fZ2V0T3duUHJvcE5hbWVzKGZuKVswXV0pKGZuID0gMCkpLCByZXM7XG4gIH07XG4gIHZhciBfX2NvbW1vbkpTID0gKGNiLCBtb2QpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZSgpIHtcbiAgICByZXR1cm4gbW9kIHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QpLCBtb2QuZXhwb3J0cztcbiAgfTtcbiAgdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICB9O1xuICB2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICAgIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gICAgfVxuICAgIHJldHVybiB0bztcbiAgfTtcbiAgdmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpmc1xuICB2YXIgZnNfZXhwb3J0cyA9IHt9O1xuICBfX2V4cG9ydChmc19leHBvcnRzLCB7XG4gICAgcmVhZEZpbGU6ICgpID0+IHJlYWRGaWxlXG4gIH0pO1xuICB2YXIgcmVhZEZpbGU7XG4gIHZhciBpbml0X2ZzID0gX19lc20oe1xuICAgIFwibm9kZWpzLWlnbm9yZTpmc1wiKCkge1xuICAgICAgcmVhZEZpbGUgPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyBub2RlanMtaWdub3JlOnBhdGhcbiAgdmFyIHBhdGhfZXhwb3J0cyA9IHt9O1xuICBfX2V4cG9ydChwYXRoX2V4cG9ydHMsIHtcbiAgICBqb2luOiAoKSA9PiBqb2luMlxuICB9KTtcbiAgdmFyIGpvaW4yO1xuICB2YXIgaW5pdF9wYXRoID0gX19lc20oe1xuICAgIFwibm9kZWpzLWlnbm9yZTpwYXRoXCIoKSB7XG4gICAgICBqb2luMiA9IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHdlYi9saWIvd2FzbS9iaW5kaW5nL29ydC10cmFpbmluZy13YXNtLXNpbWQuanNcbiAgdmFyIHJlcXVpcmVfb3J0X3RyYWluaW5nX3dhc21fc2ltZCA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXRyYWluaW5nLXdhc20tc2ltZC5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICB2YXIgb3J0V2FzbSA9ICgoKSA9PiB7XG4gICAgICAgIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuICAgICAgICAgIHZhciBkID0gbW9kdWxlQXJnLCBrLCBsO1xuICAgICAgICAgIGQucmVhZHkgPSBuZXcgUHJvbWlzZSgoYSwgYikgPT4ge1xuICAgICAgICAgICAgayA9IGE7XG4gICAgICAgICAgICBsID0gYjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgciA9IE9iamVjdC5hc3NpZ24oe30sIGQpLCB2ID0gXCIuL3RoaXMucHJvZ3JhbVwiLCBhYSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHdpbmRvdywgeCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW1wb3J0U2NyaXB0cywgYmEgPSBcIm9iamVjdFwiID09IHR5cGVvZiBwcm9jZXNzICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLCB5ID0gXCJcIiwgQSwgQiwgQztcbiAgICAgICAgICBpZiAoYmEpIHtcbiAgICAgICAgICAgIHZhciBmcyA9IChpbml0X2ZzKCksIF9fdG9Db21tb25KUyhmc19leHBvcnRzKSksIEQgPSAoaW5pdF9wYXRoKCksIF9fdG9Db21tb25KUyhwYXRoX2V4cG9ydHMpKTtcbiAgICAgICAgICAgIHkgPSB4ID8gRC5kaXJuYW1lKHkpICsgXCIvXCIgOiBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICAgICAgICAgIEEgPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgICBhID0gYS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSA/IG5ldyBVUkwoYSkgOiBELm5vcm1hbGl6ZShhKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhhLCBiID8gdm9pZCAwIDogXCJ1dGY4XCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEMgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICBhID0gQShhLCB0cnVlKTtcbiAgICAgICAgICAgICAgYS5idWZmZXIgfHwgKGEgPSBuZXcgVWludDhBcnJheShhKSk7XG4gICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEIgPSAoYSwgYiwgYywgZSA9IHRydWUpID0+IHtcbiAgICAgICAgICAgICAgYSA9IGEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBuZXcgVVJMKGEpIDogRC5ub3JtYWxpemUoYSk7XG4gICAgICAgICAgICAgIGZzLnJlYWRGaWxlKGEsIGUgPyB2b2lkIDAgOiBcInV0ZjhcIiwgKGcsIGgpID0+IHtcbiAgICAgICAgICAgICAgICBnID8gYyhnKSA6IGIoZSA/IGguYnVmZmVyIDogaCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICFkLnRoaXNQcm9ncmFtICYmIDEgPCBwcm9jZXNzLmFyZ3YubGVuZ3RoICYmICh2ID0gcHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpKTtcbiAgICAgICAgICAgIHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgICAgICAgICAgIGQuaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFhIHx8IHgpXG4gICAgICAgICAgICB4ID8geSA9IHNlbGYubG9jYXRpb24uaHJlZiA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgKHkgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksIF9zY3JpcHREaXIgJiYgKHkgPSBfc2NyaXB0RGlyKSwgMCAhPT0geS5pbmRleE9mKFwiYmxvYjpcIikgPyB5ID0geS5zdWJzdHIoMCwgeS5yZXBsYWNlKC9bPyNdLiovLCBcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKSA6IHkgPSBcIlwiLCBBID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgYi5zZW5kKG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm4gYi5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB9LCB4ICYmIChDID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgYi5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpO1xuICAgICAgICAgICAgfSksIEIgPSAoYSwgYiwgYykgPT4ge1xuICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBlLm9wZW4oXCJHRVRcIiwgYSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIGUucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICBlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAyMDAgPT0gZS5zdGF0dXMgfHwgMCA9PSBlLnN0YXR1cyAmJiBlLnJlc3BvbnNlID8gYihlLnJlc3BvbnNlKSA6IGMoKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgZS5vbmVycm9yID0gYztcbiAgICAgICAgICAgICAgZS5zZW5kKG51bGwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgY2EgPSBkLnByaW50IHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksIEUgPSBkLnByaW50RXJyIHx8IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGQsIHIpO1xuICAgICAgICAgIHIgPSBudWxsO1xuICAgICAgICAgIGQudGhpc1Byb2dyYW0gJiYgKHYgPSBkLnRoaXNQcm9ncmFtKTtcbiAgICAgICAgICB2YXIgRjtcbiAgICAgICAgICBkLndhc21CaW5hcnkgJiYgKEYgPSBkLndhc21CaW5hcnkpO1xuICAgICAgICAgIHZhciBub0V4aXRSdW50aW1lID0gZC5ub0V4aXRSdW50aW1lIHx8IHRydWU7XG4gICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYgRyhcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgdmFyIEgsIEksIGRhID0gZmFsc2UsIEosIEssIEwsIE07XG4gICAgICAgICAgZnVuY3Rpb24gZWEoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IEguYnVmZmVyO1xuICAgICAgICAgICAgZC5IRUFQOCA9IEogPSBuZXcgSW50OEFycmF5KGEpO1xuICAgICAgICAgICAgZC5IRUFQMTYgPSBuZXcgSW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIGQuSEVBUDMyID0gTCA9IG5ldyBJbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgZC5IRUFQVTggPSBLID0gbmV3IFVpbnQ4QXJyYXkoYSk7XG4gICAgICAgICAgICBkLkhFQVBVMTYgPSBuZXcgVWludDE2QXJyYXkoYSk7XG4gICAgICAgICAgICBkLkhFQVBVMzIgPSBNID0gbmV3IFVpbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgZC5IRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShhKTtcbiAgICAgICAgICAgIGQuSEVBUEY2NCA9IG5ldyBGbG9hdDY0QXJyYXkoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBmYSA9IFtdLCBoYSA9IFtdLCBpYSA9IFtdO1xuICAgICAgICAgIGZ1bmN0aW9uIGphKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBkLnByZVJ1bi5zaGlmdCgpO1xuICAgICAgICAgICAgZmEudW5zaGlmdChhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIE4gPSAwLCBPID0gbnVsbCwgUCA9IG51bGw7XG4gICAgICAgICAgZnVuY3Rpb24gRyhhKSB7XG4gICAgICAgICAgICBpZiAoZC5vbkFib3J0KVxuICAgICAgICAgICAgICBkLm9uQWJvcnQoYSk7XG4gICAgICAgICAgICBhID0gXCJBYm9ydGVkKFwiICsgYSArIFwiKVwiO1xuICAgICAgICAgICAgRShhKTtcbiAgICAgICAgICAgIGRhID0gdHJ1ZTtcbiAgICAgICAgICAgIGEgPSBuZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKGEgKyBcIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIik7XG4gICAgICAgICAgICBsKGEpO1xuICAgICAgICAgICAgdGhyb3cgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24ga2EoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGEuc3RhcnRzV2l0aChcImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBRO1xuICAgICAgICAgIFEgPSBcIm9ydC10cmFpbmluZy13YXNtLXNpbWQud2FzbVwiO1xuICAgICAgICAgIGlmICgha2EoUSkpIHtcbiAgICAgICAgICAgIHZhciBsYSA9IFE7XG4gICAgICAgICAgICBRID0gZC5sb2NhdGVGaWxlID8gZC5sb2NhdGVGaWxlKGxhLCB5KSA6IHkgKyBsYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbWEoYSkge1xuICAgICAgICAgICAgaWYgKGEgPT0gUSAmJiBGKVxuICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoRik7XG4gICAgICAgICAgICBpZiAoQylcbiAgICAgICAgICAgICAgcmV0dXJuIEMoYSk7XG4gICAgICAgICAgICB0aHJvdyBcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG5hKGEpIHtcbiAgICAgICAgICAgIGlmICghRiAmJiAoYWEgfHwgeCkpIHtcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZmV0Y2ggJiYgIWEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGEsIHsgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIiB9KS50aGVuKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWIub2spXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIgKyBhICsgXCInXCI7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYi5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IG1hKGEpKTtcbiAgICAgICAgICAgICAgaWYgKEIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgICAgICBCKGEsIChlKSA9PiBiKG5ldyBVaW50OEFycmF5KGUpKSwgYyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBtYShhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG9hKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHJldHVybiBuYShhKS50aGVuKChlKSA9PiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShlLCBiKSkudGhlbigoZSkgPT4gZSkudGhlbihjLCAoZSkgPT4ge1xuICAgICAgICAgICAgICBFKFwiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogXCIgKyBlKTtcbiAgICAgICAgICAgICAgRyhlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBwYShhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IFE7XG4gICAgICAgICAgICByZXR1cm4gRiB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nIHx8IGthKGMpIHx8IGMuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgfHwgYmEgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBmZXRjaCA/IG9hKGMsIGEsIGIpIDogZmV0Y2goYywgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGUpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGUsIGEpLnRoZW4oYiwgZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICBFKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiICsgZyk7XG4gICAgICAgICAgICAgIEUoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9hKGMsIGEsIGIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgUiwgUyA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKDsgMCA8IGEubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGEuc2hpZnQoKShkKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIHFhKGEpIHtcbiAgICAgICAgICAgIHRoaXMuSmEgPSBhIC0gMjQ7XG4gICAgICAgICAgICB0aGlzLk5hID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICBNW3RoaXMuSmEgKyA0ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLk1hID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICBNW3RoaXMuSmEgKyA4ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLkthID0gZnVuY3Rpb24oYiwgYykge1xuICAgICAgICAgICAgICB0aGlzLkxhKCk7XG4gICAgICAgICAgICAgIHRoaXMuTmEoYik7XG4gICAgICAgICAgICAgIHRoaXMuTWEoYyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5MYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBNW3RoaXMuSmEgKyAxNiA+PiAyID4+PiAwXSA9IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmEgPSAwLCBzYSA9IDAsIHRhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpIDogdm9pZCAwLCB1YSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBlID0gYiArIGM7XG4gICAgICAgICAgICBmb3IgKGMgPSBiOyBhW2NdICYmICEoYyA+PSBlKTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBhLmJ1ZmZlciAmJiB0YSlcbiAgICAgICAgICAgICAgcmV0dXJuIHRhLmRlY29kZShhLnN1YmFycmF5KGIsIGMpKTtcbiAgICAgICAgICAgIGZvciAoZSA9IFwiXCI7IGIgPCBjOyApIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSBhW2IrK107XG4gICAgICAgICAgICAgIGlmIChnICYgMTI4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGggPSBhW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICBpZiAoMTkyID09IChnICYgMjI0KSlcbiAgICAgICAgICAgICAgICAgIGUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoZyAmIDMxKSA8PCA2IHwgaCk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbSA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgZyA9IDIyNCA9PSAoZyAmIDI0MCkgPyAoZyAmIDE1KSA8PCAxMiB8IGggPDwgNiB8IG0gOiAoZyAmIDcpIDw8IDE4IHwgaCA8PCAxMiB8IG0gPDwgNiB8IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgNjU1MzYgPiBnID8gZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpIDogKGcgLT0gNjU1MzYsIGUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGcgPj4gMTAsIDU2MzIwIHwgZyAmIDEwMjMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIGUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgIH0sIFQgPSAoYSwgYikgPT4gKGEgPj4+PSAwKSA/IHVhKEssIGEsIGIpIDogXCJcIiwgVSA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBlID0gYS5jaGFyQ29kZUF0KGMpO1xuICAgICAgICAgICAgICAxMjcgPj0gZSA/IGIrKyA6IDIwNDcgPj0gZSA/IGIgKz0gMiA6IDU1Mjk2IDw9IGUgJiYgNTczNDMgPj0gZSA/IChiICs9IDQsICsrYykgOiBiICs9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9LCBWID0gKGEsIGIsIGMsIGUpID0+IHtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKCEoMCA8IGUpKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIHZhciBnID0gYztcbiAgICAgICAgICAgIGUgPSBjICsgZSAtIDE7XG4gICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IGEubGVuZ3RoOyArK2gpIHtcbiAgICAgICAgICAgICAgdmFyIG0gPSBhLmNoYXJDb2RlQXQoaCk7XG4gICAgICAgICAgICAgIGlmICg1NTI5NiA8PSBtICYmIDU3MzQzID49IG0pIHtcbiAgICAgICAgICAgICAgICB2YXIgcSA9IGEuY2hhckNvZGVBdCgrK2gpO1xuICAgICAgICAgICAgICAgIG0gPSA2NTUzNiArICgobSAmIDEwMjMpIDw8IDEwKSB8IHEgJiAxMDIzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgxMjcgPj0gbSkge1xuICAgICAgICAgICAgICAgIGlmIChjID49IGUpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSBtO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgyMDQ3ID49IG0pIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjICsgMSA+PSBlKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDE5MiB8IG0gPj4gNjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKDY1NTM1ID49IG0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAyID49IGUpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDIyNCB8IG0gPj4gMTI7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDMgPj0gZSlcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMjQwIHwgbSA+PiAxODtcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgbSA+PiAxMiAmIDYzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgbSA+PiA2ICYgNjM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IG0gJiA2MztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYltjID4+PiAwXSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gYyAtIGc7XG4gICAgICAgICAgfSwgVyA9IChhKSA9PiAwID09PSBhICUgNCAmJiAoMCAhPT0gYSAlIDEwMCB8fCAwID09PSBhICUgNDAwKSwgdmEgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdLCB3YSA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sIEJhID0gKGEpID0+IHtcbiAgICAgICAgICAgIHZhciBiID0gVShhKSArIDEsIGMgPSBBYShiKTtcbiAgICAgICAgICAgIGMgJiYgVihhLCBLLCBjLCBiKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIFggPSB7fSwgQ2EgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIVkpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSB7IFVTRVI6IFwid2ViX3VzZXJcIiwgTE9HTkFNRTogXCJ3ZWJfdXNlclwiLCBQQVRIOiBcIi9cIiwgUFdEOiBcIi9cIiwgSE9NRTogXCIvaG9tZS93ZWJfdXNlclwiLCBMQU5HOiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgbmF2aWdhdG9yICYmIG5hdmlnYXRvci5sYW5ndWFnZXMgJiYgbmF2aWdhdG9yLmxhbmd1YWdlc1swXSB8fCBcIkNcIikucmVwbGFjZShcbiAgICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgICBcIl9cIlxuICAgICAgICAgICAgICApICsgXCIuVVRGLThcIiwgXzogdiB8fCBcIi4vdGhpcy5wcm9ncmFtXCIgfSwgYjtcbiAgICAgICAgICAgICAgZm9yIChiIGluIFgpXG4gICAgICAgICAgICAgICAgdm9pZCAwID09PSBYW2JdID8gZGVsZXRlIGFbYl0gOiBhW2JdID0gWFtiXTtcbiAgICAgICAgICAgICAgdmFyIGMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChiIGluIGEpXG4gICAgICAgICAgICAgICAgYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtcbiAgICAgICAgICAgICAgWSA9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWTtcbiAgICAgICAgICB9LCBZLCBEYSA9IFtudWxsLCBbXSwgW11dLCBFYSA9IFszMSwgMjksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXSwgRmEgPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG4gICAgICAgICAgZnVuY3Rpb24gR2EoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSBBcnJheShVKGEpICsgMSk7XG4gICAgICAgICAgICBWKGEsIGIsIDAsIGIubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBIYShhLCBiLCBjLCBlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBnKGYsIG4sIHApIHtcbiAgICAgICAgICAgICAgZm9yIChmID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgZiA/IGYudG9TdHJpbmcoKSA6IGYgfHwgXCJcIjsgZi5sZW5ndGggPCBuOyApXG4gICAgICAgICAgICAgICAgZiA9IHBbMF0gKyBmO1xuICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGgoZiwgbikge1xuICAgICAgICAgICAgICByZXR1cm4gZyhmLCBuLCBcIjBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtKGYsIG4pIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gcCh4YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwID4geGEgPyAtMSA6IDAgPCB4YSA/IDEgOiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciB6O1xuICAgICAgICAgICAgICAwID09PSAoeiA9IHAoZi5nZXRGdWxsWWVhcigpIC0gbi5nZXRGdWxsWWVhcigpKSkgJiYgMCA9PT0gKHogPSBwKGYuZ2V0TW9udGgoKSAtIG4uZ2V0TW9udGgoKSkpICYmICh6ID0gcChmLmdldERhdGUoKSAtIG4uZ2V0RGF0ZSgpKSk7XG4gICAgICAgICAgICAgIHJldHVybiB6O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcShmKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZi5nZXREYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMjkpO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDMpO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgZi5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB3KGYpIHtcbiAgICAgICAgICAgICAgdmFyIG4gPSBmLkVhO1xuICAgICAgICAgICAgICBmb3IgKGYgPSBuZXcgRGF0ZShuZXcgRGF0ZShmLkZhICsgMTkwMCwgMCwgMSkuZ2V0VGltZSgpKTsgMCA8IG47ICkge1xuICAgICAgICAgICAgICAgIHZhciBwID0gZi5nZXRNb250aCgpLCB6ID0gKFcoZi5nZXRGdWxsWWVhcigpKSA/IEVhIDogRmEpW3BdO1xuICAgICAgICAgICAgICAgIGlmIChuID4geiAtIGYuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgbiAtPSB6IC0gZi5nZXREYXRlKCkgKyAxLCBmLnNldERhdGUoMSksIDExID4gcCA/IGYuc2V0TW9udGgocCArIDEpIDogKGYuc2V0TW9udGgoMCksIGYuc2V0RnVsbFllYXIoZi5nZXRGdWxsWWVhcigpICsgMSkpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZi5zZXREYXRlKGYuZ2V0RGF0ZSgpICsgbik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcCA9IG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSArIDEsIDAsIDQpO1xuICAgICAgICAgICAgICBuID0gcShuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICBmLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICBwID0gcShwKTtcbiAgICAgICAgICAgICAgcmV0dXJuIDAgPj0gbShuLCBmKSA/IDAgPj0gbShwLCBmKSA/IGYuZ2V0RnVsbFllYXIoKSArIDEgOiBmLmdldEZ1bGxZZWFyKCkgOiBmLmdldEZ1bGxZZWFyKCkgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZSA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgdCA9IExbZSArIDQwID4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgZSA9IHsgUWE6IExbZSA+PiAyID4+PiAwXSwgUGE6IExbZSArIDQgPj4gMiA+Pj4gMF0sIEdhOiBMW2UgKyA4ID4+IDIgPj4+IDBdLCBJYTogTFtlICsgMTIgPj4gMiA+Pj4gMF0sIEhhOiBMW2UgKyAxNiA+PiAyID4+PiAwXSwgRmE6IExbZSArIDIwID4+IDIgPj4+IDBdLCB6YTogTFtlICsgMjQgPj4gMiA+Pj4gMF0sIEVhOiBMW2UgKyAyOCA+PiAyID4+PiAwXSwgU2E6IExbZSArIDMyID4+IDIgPj4+IDBdLCBPYTogTFtlICsgMzYgPj4gMiA+Pj4gMF0sIFJhOiB0ID8gVCh0KSA6IFwiXCIgfTtcbiAgICAgICAgICAgIGMgPSBUKGMpO1xuICAgICAgICAgICAgdCA9IHtcbiAgICAgICAgICAgICAgXCIlY1wiOiBcIiVhICViICVkICVIOiVNOiVTICVZXCIsXG4gICAgICAgICAgICAgIFwiJURcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVGXCI6IFwiJVktJW0tJWRcIixcbiAgICAgICAgICAgICAgXCIlaFwiOiBcIiViXCIsXG4gICAgICAgICAgICAgIFwiJXJcIjogXCIlSTolTTolUyAlcFwiLFxuICAgICAgICAgICAgICBcIiVSXCI6IFwiJUg6JU1cIixcbiAgICAgICAgICAgICAgXCIlVFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJXhcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVYXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIlRWNcIjogXCIlY1wiLFxuICAgICAgICAgICAgICBcIiVFQ1wiOiBcIiVDXCIsXG4gICAgICAgICAgICAgIFwiJUV4XCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlRVhcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiVFeVwiOiBcIiV5XCIsXG4gICAgICAgICAgICAgIFwiJUVZXCI6IFwiJVlcIixcbiAgICAgICAgICAgICAgXCIlT2RcIjogXCIlZFwiLFxuICAgICAgICAgICAgICBcIiVPZVwiOiBcIiVlXCIsXG4gICAgICAgICAgICAgIFwiJU9IXCI6IFwiJUhcIixcbiAgICAgICAgICAgICAgXCIlT0lcIjogXCIlSVwiLFxuICAgICAgICAgICAgICBcIiVPbVwiOiBcIiVtXCIsXG4gICAgICAgICAgICAgIFwiJU9NXCI6IFwiJU1cIixcbiAgICAgICAgICAgICAgXCIlT1NcIjogXCIlU1wiLFxuICAgICAgICAgICAgICBcIiVPdVwiOiBcIiV1XCIsXG4gICAgICAgICAgICAgIFwiJU9VXCI6IFwiJVVcIixcbiAgICAgICAgICAgICAgXCIlT1ZcIjogXCIlVlwiLFxuICAgICAgICAgICAgICBcIiVPd1wiOiBcIiV3XCIsXG4gICAgICAgICAgICAgIFwiJU9XXCI6IFwiJVdcIixcbiAgICAgICAgICAgICAgXCIlT3lcIjogXCIleVwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgdSBpbiB0KVxuICAgICAgICAgICAgICBjID0gYy5yZXBsYWNlKG5ldyBSZWdFeHAodSwgXCJnXCIpLCB0W3VdKTtcbiAgICAgICAgICAgIHZhciB5YSA9IFwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksIHphID0gXCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgdCA9IHsgXCIlYVwiOiAoZikgPT4geWFbZi56YV0uc3Vic3RyaW5nKDAsIDMpLCBcIiVBXCI6IChmKSA9PiB5YVtmLnphXSwgXCIlYlwiOiAoZikgPT4gemFbZi5IYV0uc3Vic3RyaW5nKDAsIDMpLCBcIiVCXCI6IChmKSA9PiB6YVtmLkhhXSwgXCIlQ1wiOiAoZikgPT4gaCgoZi5GYSArIDE5MDApIC8gMTAwIHwgMCwgMiksIFwiJWRcIjogKGYpID0+IGgoZi5JYSwgMiksIFwiJWVcIjogKGYpID0+IGcoZi5JYSwgMiwgXCIgXCIpLCBcIiVnXCI6IChmKSA9PiB3KGYpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLCBcIiVHXCI6IChmKSA9PiB3KGYpLCBcIiVIXCI6IChmKSA9PiBoKGYuR2EsIDIpLCBcIiVJXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgIGYgPSBmLkdhO1xuICAgICAgICAgICAgICAwID09IGYgPyBmID0gMTIgOiAxMiA8IGYgJiYgKGYgLT0gMTIpO1xuICAgICAgICAgICAgICByZXR1cm4gaChmLCAyKTtcbiAgICAgICAgICAgIH0sIFwiJWpcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHAgPSAwOyBwIDw9IGYuSGEgLSAxOyBuICs9IChXKGYuRmEgKyAxOTAwKSA/IEVhIDogRmEpW3ArK10pXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICByZXR1cm4gaChmLklhICsgbiwgMyk7XG4gICAgICAgICAgICB9LCBcIiVtXCI6IChmKSA9PiBoKGYuSGEgKyAxLCAyKSwgXCIlTVwiOiAoZikgPT4gaChmLlBhLCAyKSwgXCIlblwiOiAoKSA9PiBcIlxcblwiLCBcIiVwXCI6IChmKSA9PiAwIDw9IGYuR2EgJiYgMTIgPiBmLkdhID8gXCJBTVwiIDogXCJQTVwiLCBcIiVTXCI6IChmKSA9PiBoKGYuUWEsIDIpLCBcIiV0XCI6ICgpID0+IFwiXHRcIiwgXCIldVwiOiAoZikgPT4gZi56YSB8fCA3LCBcIiVVXCI6IChmKSA9PiBoKE1hdGguZmxvb3IoKGYuRWEgKyA3IC0gZi56YSkgLyA3KSwgMiksIFwiJVZcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgdmFyIG4gPSBNYXRoLmZsb29yKChmLkVhICsgNyAtIChmLnphICsgNikgJSA3KSAvIDcpO1xuICAgICAgICAgICAgICAyID49IChmLnphICsgMzcxIC0gZi5FYSAtIDIpICUgNyAmJiBuKys7XG4gICAgICAgICAgICAgIGlmIChuKVxuICAgICAgICAgICAgICAgIDUzID09IG4gJiYgKHAgPSAoZi56YSArIDM3MSAtIGYuRWEpICUgNywgNCA9PSBwIHx8IDMgPT0gcCAmJiBXKGYuRmEpIHx8IChuID0gMSkpO1xuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuID0gNTI7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSAoZi56YSArIDcgLSBmLkVhIC0gMSkgJSA3O1xuICAgICAgICAgICAgICAgICg0ID09IHAgfHwgNSA9PSBwICYmIFcoZi5GYSAlIDQwMCAtIDEpKSAmJiBuKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGgobiwgMik7XG4gICAgICAgICAgICB9LCBcIiV3XCI6IChmKSA9PiBmLnphLCBcIiVXXCI6IChmKSA9PiBoKE1hdGguZmxvb3IoKGYuRWEgKyA3IC0gKGYuemEgKyA2KSAlIDcpIC8gNyksIDIpLCBcIiV5XCI6IChmKSA9PiAoZi5GYSArIDE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLCBcIiVZXCI6IChmKSA9PiBmLkZhICsgMTkwMCwgXCIlelwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICBmID0gZi5PYTtcbiAgICAgICAgICAgICAgdmFyIG4gPSAwIDw9IGY7XG4gICAgICAgICAgICAgIGYgPSBNYXRoLmFicyhmKSAvIDYwO1xuICAgICAgICAgICAgICByZXR1cm4gKG4gPyBcIitcIiA6IFwiLVwiKSArIFN0cmluZyhcIjAwMDBcIiArIChmIC8gNjAgKiAxMDAgKyBmICUgNjApKS5zbGljZSgtNCk7XG4gICAgICAgICAgICB9LCBcIiVaXCI6IChmKSA9PiBmLlJhLCBcIiUlXCI6ICgpID0+IFwiJVwiIH07XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKC8lJS9nLCBcIlxcMFxcMFwiKTtcbiAgICAgICAgICAgIGZvciAodSBpbiB0KVxuICAgICAgICAgICAgICBjLmluY2x1ZGVzKHUpICYmIChjID0gYy5yZXBsYWNlKG5ldyBSZWdFeHAodSwgXCJnXCIpLCB0W3VdKGUpKSk7XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKC9cXDBcXDAvZywgXCIlXCIpO1xuICAgICAgICAgICAgdSA9IEdhKGMpO1xuICAgICAgICAgICAgaWYgKHUubGVuZ3RoID4gYilcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBKLnNldCh1LCBhID4+PiAwKTtcbiAgICAgICAgICAgIHJldHVybiB1Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBKYSA9IHtcbiAgICAgICAgICAgIGE6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIG5ldyBxYShhKS5LYShiID4+PiAwLCBjID4+PiAwKTtcbiAgICAgICAgICAgICAgcmEgPSBhO1xuICAgICAgICAgICAgICBzYSsrO1xuICAgICAgICAgICAgICB0aHJvdyByYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgejogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEY6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHY6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGw6ICgpID0+IHRydWUsXG4gICAgICAgICAgICBvOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGEgPSBiICsgMjA5NzE1MiA+Pj4gMCA8IDQxOTQzMDUgLSAhIWEgPyAoYSA+Pj4gMCkgKyA0Mjk0OTY3Mjk2ICogYiA6IE5hTjtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPSBuZXcgRGF0ZSgxZTMgKiBhKTtcbiAgICAgICAgICAgICAgTFtjID4+IDIgPj4+IDBdID0gYS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIExbYyArIDQgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgTFtjICsgOCA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDSG91cnMoKTtcbiAgICAgICAgICAgICAgTFtjICsgMTIgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgICAgICAgTFtjICsgMTYgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICAgIExbYyArIDIwID4+IDIgPj4+IDBdID0gYS5nZXRVVENGdWxsWWVhcigpIC0gMTkwMDtcbiAgICAgICAgICAgICAgTFtjICsgMjQgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0RheSgpO1xuICAgICAgICAgICAgICBMW2MgKyAyOCA+PiAyID4+PiAwXSA9IChhLmdldFRpbWUoKSAtIERhdGUuVVRDKGEuZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSwgMCwgMCwgMCwgMCkpIC8gODY0ZTUgfCAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHA6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgYSA9IGIgKyAyMDk3MTUyID4+PiAwIDwgNDE5NDMwNSAtICEhYSA/IChhID4+PiAwKSArIDQyOTQ5NjcyOTYgKiBiIDogTmFOO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9IG5ldyBEYXRlKDFlMyAqIGEpO1xuICAgICAgICAgICAgICBMW2MgPj4gMiA+Pj4gMF0gPSBhLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgICAgTFtjICsgNCA+PiAyID4+PiAwXSA9IGEuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBMW2MgKyA4ID4+IDIgPj4+IDBdID0gYS5nZXRIb3VycygpO1xuICAgICAgICAgICAgICBMW2MgKyAxMiA+PiAyID4+PiAwXSA9IGEuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICBMW2MgKyAxNiA+PiAyID4+PiAwXSA9IGEuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgTFtjICsgMjAgPj4gMiA+Pj4gMF0gPSBhLmdldEZ1bGxZZWFyKCkgLSAxOTAwO1xuICAgICAgICAgICAgICBMW2MgKyAyNCA+PiAyID4+PiAwXSA9IGEuZ2V0RGF5KCk7XG4gICAgICAgICAgICAgIExbYyArIDI4ID4+IDIgPj4+IDBdID0gKFcoYS5nZXRGdWxsWWVhcigpKSA/IHZhIDogd2EpW2EuZ2V0TW9udGgoKV0gKyBhLmdldERhdGUoKSAtIDEgfCAwO1xuICAgICAgICAgICAgICBMW2MgKyAzNiA+PiAyID4+PiAwXSA9IC0oNjAgKiBhLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgICBiID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgTFtjICsgMzIgPj4gMiA+Pj4gMF0gPSAoYiAhPSBlICYmIGEuZ2V0VGltZXpvbmVPZmZzZXQoKSA9PSBNYXRoLm1pbihlLCBiKSkgfCAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHE6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IERhdGUoTFthICsgMjAgPj4gMiA+Pj4gMF0gKyAxOTAwLCBMW2EgKyAxNiA+PiAyID4+PiAwXSwgTFthICsgMTIgPj4gMiA+Pj4gMF0sIExbYSArIDggPj4gMiA+Pj4gMF0sIExbYSArIDQgPj4gMiA+Pj4gMF0sIExbYSA+PiAyID4+PiAwXSwgMCksIGMgPSBMW2EgKyAzMiA+PiAyID4+PiAwXSwgZSA9IGIuZ2V0VGltZXpvbmVPZmZzZXQoKSwgZyA9IG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwgNiwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKSwgaCA9IG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKSwgbSA9IE1hdGgubWluKGgsIGcpO1xuICAgICAgICAgICAgICAwID4gYyA/IExbYSArIDMyID4+IDIgPj4+IDBdID0gTnVtYmVyKGcgIT0gaCAmJiBtID09IGUpIDogMCA8IGMgIT0gKG0gPT0gZSkgJiYgKGcgPSBNYXRoLm1heChoLCBnKSwgYi5zZXRUaW1lKGIuZ2V0VGltZSgpICsgNmU0ICogKCgwIDwgYyA/IG0gOiBnKSAtIGUpKSk7XG4gICAgICAgICAgICAgIExbYSArIDI0ID4+IDIgPj4+IDBdID0gYi5nZXREYXkoKTtcbiAgICAgICAgICAgICAgTFthICsgMjggPj4gMiA+Pj4gMF0gPSAoVyhiLmdldEZ1bGxZZWFyKCkpID8gdmEgOiB3YSlbYi5nZXRNb250aCgpXSArIGIuZ2V0RGF0ZSgpIC0gMSB8IDA7XG4gICAgICAgICAgICAgIExbYSA+PiAyID4+PiAwXSA9IGIuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgICBMW2EgKyA0ID4+IDIgPj4+IDBdID0gYi5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICAgIExbYSArIDggPj4gMiA+Pj4gMF0gPSBiLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIExbYSArIDEyID4+IDIgPj4+IDBdID0gYi5nZXREYXRlKCk7XG4gICAgICAgICAgICAgIExbYSArIDE2ID4+IDIgPj4+IDBdID0gYi5nZXRNb250aCgpO1xuICAgICAgICAgICAgICBMW2EgKyAyMCA+PiAyID4+PiAwXSA9IGIuZ2V0WWVhcigpO1xuICAgICAgICAgICAgICBhID0gYi5nZXRUaW1lKCkgLyAxZTM7XG4gICAgICAgICAgICAgIHJldHVybiBJYSgoUiA9IGEsIDEgPD0gK01hdGguYWJzKFIpID8gMCA8IFIgPyArTWF0aC5mbG9vcihSIC8gNDI5NDk2NzI5NikgPj4+IDAgOiB+fitNYXRoLmNlaWwoKFIgLSArKH5+UiA+Pj4gMCkpIC8gNDI5NDk2NzI5NikgPj4+IDAgOiAwKSksIGEgPj4+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAtNTI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBlKHcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHcgPSB3LnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLykpID8gd1sxXSA6IFwiR01UXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBnID0gKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKS5nZXRGdWxsWWVhcigpLCBoID0gbmV3IERhdGUoZywgMCwgMSksIG0gPSBuZXcgRGF0ZShnLCA2LCAxKTtcbiAgICAgICAgICAgICAgZyA9IGguZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgdmFyIHEgPSBtLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICAgIE1bYSA+Pj4gMCA+PiAyID4+PiAwXSA9IDYwICogTWF0aC5tYXgoZywgcSk7XG4gICAgICAgICAgICAgIExbYiA+Pj4gMCA+PiAyID4+PiAwXSA9IE51bWJlcihnICE9IHEpO1xuICAgICAgICAgICAgICBhID0gZShoKTtcbiAgICAgICAgICAgICAgYiA9IGUobSk7XG4gICAgICAgICAgICAgIGEgPSBCYShhKTtcbiAgICAgICAgICAgICAgYiA9IEJhKGIpO1xuICAgICAgICAgICAgICBxIDwgZyA/IChNW2MgPj4gMiA+Pj4gMF0gPSBhLCBNW2MgKyA0ID4+IDIgPj4+IDBdID0gYikgOiAoTVtjID4+IDIgPj4+IDBdID0gYiwgTVtjICsgNCA+PiAyID4+PiAwXSA9IGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgRyhcIlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiA0Mjk0OTAxNzYwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGI6ICgpID0+IHBlcmZvcm1hbmNlLm5vdygpLFxuICAgICAgICAgICAgSTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgcmV0dXJuIEsuY29weVdpdGhpbihhID4+PiAwID4+PiAwLCBiID4+PiAwLCBiICsgKGMgPj4+IDApID4+PiAwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICB2YXIgYiA9IEsubGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAoNDI5NDkwMTc2MCA8IGEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMTsgNCA+PSBjOyBjICo9IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGIgKiAoMSArIDAuMiAvIGMpO1xuICAgICAgICAgICAgICAgIGUgPSBNYXRoLm1pbihlLCBhICsgMTAwNjYzMjk2KTtcbiAgICAgICAgICAgICAgICB2YXIgZyA9IE1hdGg7XG4gICAgICAgICAgICAgICAgZSA9IE1hdGgubWF4KGEsIGUpO1xuICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgIGcgPSBnLm1pbi5jYWxsKGcsIDQyOTQ5MDE3NjAsIGUgKyAoNjU1MzYgLSBlICUgNjU1MzYpICUgNjU1MzYpIC0gSC5idWZmZXIuYnl0ZUxlbmd0aCArIDY1NTM1ID4+PiAxNjtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIEguZ3JvdyhnKTtcbiAgICAgICAgICAgICAgICAgICAgZWEoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGggPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAobSkge1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGgpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQzogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgICAgQ2EoKS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGcpIHtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IGIgKyBjO1xuICAgICAgICAgICAgICAgIGcgPSBNW2EgKyA0ICogZyA+PiAyID4+PiAwXSA9IGg7XG4gICAgICAgICAgICAgICAgZm9yIChoID0gMDsgaCA8IGUubGVuZ3RoOyArK2gpXG4gICAgICAgICAgICAgICAgICBKW2crKyA+PiAwID4+PiAwXSA9IGUuY2hhckNvZGVBdChoKTtcbiAgICAgICAgICAgICAgICBKW2cgPj4gMCA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgICAgIGMgKz0gZS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBjID0gQ2EoKTtcbiAgICAgICAgICAgICAgTVthID4+IDIgPj4+IDBdID0gYy5sZW5ndGg7XG4gICAgICAgICAgICAgIHZhciBlID0gMDtcbiAgICAgICAgICAgICAgYy5mb3JFYWNoKGZ1bmN0aW9uKGcpIHtcbiAgICAgICAgICAgICAgICBlICs9IGcubGVuZ3RoICsgMTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIE1bYiA+PiAyID4+PiAwXSA9IGU7XG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGY6ICgpID0+IDUyLFxuICAgICAgICAgICAgajogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiA1MjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDcwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGk6IGZ1bmN0aW9uKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBlID4+Pj0gMDtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IDAsIGggPSAwOyBoIDwgYzsgaCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSBNW2IgPj4gMiA+Pj4gMF0sIHEgPSBNW2IgKyA0ID4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgICAgIGIgKz0gODtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB3ID0gMDsgdyA8IHE7IHcrKykge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSBLW20gKyB3ID4+PiAwXSwgdSA9IERhW2FdO1xuICAgICAgICAgICAgICAgICAgMCA9PT0gdCB8fCAxMCA9PT0gdCA/ICgoMSA9PT0gYSA/IGNhIDogRSkodWEodSwgMCkpLCB1Lmxlbmd0aCA9IDApIDogdS5wdXNoKHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnICs9IHE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgTVtlID4+IDIgPj4+IDBdID0gZztcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQTogSGEsXG4gICAgICAgICAgICBjOiBmdW5jdGlvbihhLCBiLCBjLCBlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBIYShhID4+PiAwLCBiID4+PiAwLCBjID4+PiAwLCBlID4+PiAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGEoYykge1xuICAgICAgICAgICAgICBjID0gYy5leHBvcnRzO1xuICAgICAgICAgICAgICBJID0gYyA9IEthKGMpO1xuICAgICAgICAgICAgICBIID0gSS5KO1xuICAgICAgICAgICAgICBlYSgpO1xuICAgICAgICAgICAgICBoYS51bnNoaWZ0KEkuSyk7XG4gICAgICAgICAgICAgIE4tLTtcbiAgICAgICAgICAgICAgZC5tb25pdG9yUnVuRGVwZW5kZW5jaWVzICYmIGQubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhOKTtcbiAgICAgICAgICAgICAgaWYgKDAgPT0gTiAmJiAobnVsbCAhPT0gTyAmJiAoY2xlYXJJbnRlcnZhbChPKSwgTyA9IG51bGwpLCBQKSkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gUDtcbiAgICAgICAgICAgICAgICBQID0gbnVsbDtcbiAgICAgICAgICAgICAgICBlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYiA9IHsgYTogSmEgfTtcbiAgICAgICAgICAgIE4rKztcbiAgICAgICAgICAgIGQubW9uaXRvclJ1bkRlcGVuZGVuY2llcyAmJiBkLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoTik7XG4gICAgICAgICAgICBpZiAoZC5pbnN0YW50aWF0ZVdhc20pXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuaW5zdGFudGlhdGVXYXNtKGIsIGEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgRShcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiICsgYyksIGwoYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhKGIsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgYShjLmluc3RhbmNlKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGwpO1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgZC5fT3J0SW5pdCA9IChhLCBiKSA9PiAoZC5fT3J0SW5pdCA9IEkuTCkoYSwgYik7XG4gICAgICAgICAgZC5fT3J0R2V0TGFzdEVycm9yID0gKGEsIGIpID0+IChkLl9PcnRHZXRMYXN0RXJyb3IgPSBJLk0pKGEsIGIpO1xuICAgICAgICAgIGQuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zID0gKGEsIGIsIGMsIGUsIGcsIGgsIG0sIHEsIHcsIHQpID0+IChkLl9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyA9IEkuTikoYSwgYiwgYywgZSwgZywgaCwgbSwgcSwgdywgdCk7XG4gICAgICAgICAgZC5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXIgPSAoYSwgYikgPT4gKGQuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyID0gSS5PKShhLCBiKTtcbiAgICAgICAgICBkLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUgPSAoYSwgYiwgYykgPT4gKGQuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZSA9IEkuUCkoYSwgYiwgYyk7XG4gICAgICAgICAgZC5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5ID0gKGEsIGIsIGMpID0+IChkLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkgPSBJLlEpKGEsIGIsIGMpO1xuICAgICAgICAgIGQuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyA9IChhKSA9PiAoZC5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zID0gSS5SKShhKTtcbiAgICAgICAgICBkLl9PcnRDcmVhdGVTZXNzaW9uID0gKGEsIGIsIGMpID0+IChkLl9PcnRDcmVhdGVTZXNzaW9uID0gSS5TKShhLCBiLCBjKTtcbiAgICAgICAgICBkLl9PcnRSZWxlYXNlU2Vzc2lvbiA9IChhKSA9PiAoZC5fT3J0UmVsZWFzZVNlc3Npb24gPSBJLlQpKGEpO1xuICAgICAgICAgIGQuX09ydEdldElucHV0T3V0cHV0Q291bnQgPSAoYSwgYiwgYykgPT4gKGQuX09ydEdldElucHV0T3V0cHV0Q291bnQgPSBJLlUpKGEsIGIsIGMpO1xuICAgICAgICAgIGQuX09ydEdldElucHV0TmFtZSA9IChhLCBiKSA9PiAoZC5fT3J0R2V0SW5wdXROYW1lID0gSS5WKShhLCBiKTtcbiAgICAgICAgICBkLl9PcnRHZXRPdXRwdXROYW1lID0gKGEsIGIpID0+IChkLl9PcnRHZXRPdXRwdXROYW1lID0gSS5XKShhLCBiKTtcbiAgICAgICAgICBkLl9PcnRGcmVlID0gKGEpID0+IChkLl9PcnRGcmVlID0gSS5YKShhKTtcbiAgICAgICAgICBkLl9PcnRDcmVhdGVUZW5zb3IgPSAoYSwgYiwgYywgZSwgZywgaCkgPT4gKGQuX09ydENyZWF0ZVRlbnNvciA9IEkuWSkoYSwgYiwgYywgZSwgZywgaCk7XG4gICAgICAgICAgZC5fT3J0R2V0VGVuc29yRGF0YSA9IChhLCBiLCBjLCBlLCBnKSA9PiAoZC5fT3J0R2V0VGVuc29yRGF0YSA9IEkuWikoYSwgYiwgYywgZSwgZyk7XG4gICAgICAgICAgZC5fT3J0UmVsZWFzZVRlbnNvciA9IChhKSA9PiAoZC5fT3J0UmVsZWFzZVRlbnNvciA9IEkuXykoYSk7XG4gICAgICAgICAgZC5fT3J0Q3JlYXRlUnVuT3B0aW9ucyA9IChhLCBiLCBjLCBlKSA9PiAoZC5fT3J0Q3JlYXRlUnVuT3B0aW9ucyA9IEkuJCkoYSwgYiwgYywgZSk7XG4gICAgICAgICAgZC5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKGQuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gSS5hYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZC5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSAoYSkgPT4gKGQuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gSS5iYSkoYSk7XG4gICAgICAgICAgZC5fT3J0Q3JlYXRlQmluZGluZyA9IChhKSA9PiAoZC5fT3J0Q3JlYXRlQmluZGluZyA9IEkuY2EpKGEpO1xuICAgICAgICAgIGQuX09ydEJpbmRJbnB1dCA9IChhLCBiLCBjKSA9PiAoZC5fT3J0QmluZElucHV0ID0gSS5kYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZC5fT3J0QmluZE91dHB1dCA9IChhLCBiLCBjLCBlKSA9PiAoZC5fT3J0QmluZE91dHB1dCA9IEkuZWEpKGEsIGIsIGMsIGUpO1xuICAgICAgICAgIGQuX09ydENsZWFyQm91bmRPdXRwdXRzID0gKGEpID0+IChkLl9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IEkuZmEpKGEpO1xuICAgICAgICAgIGQuX09ydFJlbGVhc2VCaW5kaW5nID0gKGEpID0+IChkLl9PcnRSZWxlYXNlQmluZGluZyA9IEkuZ2EpKGEpO1xuICAgICAgICAgIGQuX09ydFJ1bldpdGhCaW5kaW5nID0gKGEsIGIsIGMsIGUsIGcpID0+IChkLl9PcnRSdW5XaXRoQmluZGluZyA9IEkuaGEpKGEsIGIsIGMsIGUsIGcpO1xuICAgICAgICAgIGQuX09ydFJ1biA9IChhLCBiLCBjLCBlLCBnLCBoLCBtLCBxKSA9PiAoZC5fT3J0UnVuID0gSS5pYSkoYSwgYiwgYywgZSwgZywgaCwgbSwgcSk7XG4gICAgICAgICAgZC5fT3J0RW5kUHJvZmlsaW5nID0gKGEpID0+IChkLl9PcnRFbmRQcm9maWxpbmcgPSBJLmphKShhKTtcbiAgICAgICAgICBkLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50ID0gKGEsIGIpID0+IChkLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50ID0gSS5rYSkoYSwgYik7XG4gICAgICAgICAgZC5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludCA9IChhKSA9PiAoZC5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludCA9IEkubGEpKGEpO1xuICAgICAgICAgIGQuX09ydFRyYWluaW5nQ3JlYXRlU2Vzc2lvbiA9IChhLCBiLCBjLCBlLCBnLCBoLCBtLCBxKSA9PiAoZC5fT3J0VHJhaW5pbmdDcmVhdGVTZXNzaW9uID0gSS5tYSkoYSwgYiwgYywgZSwgZywgaCwgbSwgcSk7XG4gICAgICAgICAgZC5fT3J0VHJhaW5pbmdMYXp5UmVzZXRHcmFkID0gKGEpID0+IChkLl9PcnRUcmFpbmluZ0xhenlSZXNldEdyYWQgPSBJLm5hKShhKTtcbiAgICAgICAgICBkLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcCA9IChhLCBiLCBjLCBlLCBnLCBoKSA9PiAoZC5fT3J0VHJhaW5pbmdSdW5UcmFpblN0ZXAgPSBJLm9hKShhLCBiLCBjLCBlLCBnLCBoKTtcbiAgICAgICAgICBkLl9PcnRUcmFpbmluZ09wdGltaXplclN0ZXAgPSAoYSwgYikgPT4gKGQuX09ydFRyYWluaW5nT3B0aW1pemVyU3RlcCA9IEkucGEpKGEsIGIpO1xuICAgICAgICAgIGQuX09ydFRyYWluaW5nRXZhbFN0ZXAgPSAoYSwgYiwgYywgZSwgZywgaCkgPT4gKGQuX09ydFRyYWluaW5nRXZhbFN0ZXAgPSBJLnFhKShhLCBiLCBjLCBlLCBnLCBoKTtcbiAgICAgICAgICBkLl9PcnRUcmFpbmluZ0dldFBhcmFtZXRlcnNTaXplID0gKGEsIGIsIGMpID0+IChkLl9PcnRUcmFpbmluZ0dldFBhcmFtZXRlcnNTaXplID0gSS5yYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZC5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc1RvQnVmZmVyID0gKGEsIGIsIGMsIGUpID0+IChkLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzVG9CdWZmZXIgPSBJLnNhKShhLCBiLCBjLCBlKTtcbiAgICAgICAgICBkLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlciA9IChhLCBiLCBjLCBlKSA9PiAoZC5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc0Zyb21CdWZmZXIgPSBJLnRhKShhLCBiLCBjLCBlKTtcbiAgICAgICAgICBkLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXRDb3VudCA9IChhLCBiLCBjLCBlKSA9PiAoZC5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0Q291bnQgPSBJLnVhKShhLCBiLCBjLCBlKTtcbiAgICAgICAgICBkLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXROYW1lID0gKGEsIGIsIGMsIGUpID0+IChkLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXROYW1lID0gSS52YSkoYSwgYiwgYywgZSk7XG4gICAgICAgICAgZC5fT3J0VHJhaW5pbmdSZWxlYXNlU2Vzc2lvbiA9IChhKSA9PiAoZC5fT3J0VHJhaW5pbmdSZWxlYXNlU2Vzc2lvbiA9IEkud2EpKGEpO1xuICAgICAgICAgIHZhciBBYSA9IGQuX21hbGxvYyA9IChhKSA9PiAoQWEgPSBkLl9tYWxsb2MgPSBJLnhhKShhKTtcbiAgICAgICAgICBkLl9mcmVlID0gKGEpID0+IChkLl9mcmVlID0gSS55YSkoYSk7XG4gICAgICAgICAgdmFyIElhID0gKGEpID0+IChJYSA9IEkuQWEpKGEpLCBMYSA9ICgpID0+IChMYSA9IEkuQmEpKCksIE1hID0gKGEpID0+IChNYSA9IEkuQ2EpKGEpLCBOYSA9IChhKSA9PiAoTmEgPSBJLkRhKShhKTtcbiAgICAgICAgICBmdW5jdGlvbiBLYShhKSB7XG4gICAgICAgICAgICBhID0gT2JqZWN0LmFzc2lnbih7fSwgYSk7XG4gICAgICAgICAgICB2YXIgYiA9IChlKSA9PiAoKSA9PiBlKCkgPj4+IDAsIGMgPSAoZSkgPT4gKGcpID0+IGUoZykgPj4+IDA7XG4gICAgICAgICAgICBhLl9fZXJybm9fbG9jYXRpb24gPSBiKGEuX19lcnJub19sb2NhdGlvbik7XG4gICAgICAgICAgICBhLm1hbGxvYyA9IGMoYS5tYWxsb2MpO1xuICAgICAgICAgICAgYS5zdGFja1NhdmUgPSBiKGEuc3RhY2tTYXZlKTtcbiAgICAgICAgICAgIGEuc3RhY2tBbGxvYyA9IGMoYS5zdGFja0FsbG9jKTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkLnN0YWNrQWxsb2MgPSBOYTtcbiAgICAgICAgICBkLnN0YWNrU2F2ZSA9IExhO1xuICAgICAgICAgIGQuc3RhY2tSZXN0b3JlID0gTWE7XG4gICAgICAgICAgZC5VVEY4VG9TdHJpbmcgPSBUO1xuICAgICAgICAgIGQuc3RyaW5nVG9VVEY4ID0gKGEsIGIsIGMpID0+IFYoYSwgSywgYiwgYyk7XG4gICAgICAgICAgZC5sZW5ndGhCeXRlc1VURjggPSBVO1xuICAgICAgICAgIHZhciBaO1xuICAgICAgICAgIFAgPSBmdW5jdGlvbiBPYSgpIHtcbiAgICAgICAgICAgIFogfHwgUGEoKTtcbiAgICAgICAgICAgIFogfHwgKFAgPSBPYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBQYSgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGEoKSB7XG4gICAgICAgICAgICAgIGlmICghWiAmJiAoWiA9IHRydWUsIGQuY2FsbGVkUnVuID0gdHJ1ZSwgIWRhKSkge1xuICAgICAgICAgICAgICAgIFMoaGEpO1xuICAgICAgICAgICAgICAgIGsoZCk7XG4gICAgICAgICAgICAgICAgaWYgKGQub25SdW50aW1lSW5pdGlhbGl6ZWQpXG4gICAgICAgICAgICAgICAgICBkLm9uUnVudGltZUluaXRpYWxpemVkKCk7XG4gICAgICAgICAgICAgICAgaWYgKGQucG9zdFJ1bilcbiAgICAgICAgICAgICAgICAgIGZvciAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBkLnBvc3RSdW4gJiYgKGQucG9zdFJ1biA9IFtkLnBvc3RSdW5dKTsgZC5wb3N0UnVuLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gZC5wb3N0UnVuLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlhLnVuc2hpZnQoYik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUyhpYSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKDAgPCBOKSkge1xuICAgICAgICAgICAgICBpZiAoZC5wcmVSdW4pXG4gICAgICAgICAgICAgICAgZm9yIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGQucHJlUnVuICYmIChkLnByZVJ1biA9IFtkLnByZVJ1bl0pOyBkLnByZVJ1bi5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICAgIGphKCk7XG4gICAgICAgICAgICAgIFMoZmEpO1xuICAgICAgICAgICAgICAwIDwgTiB8fCAoZC5zZXRTdGF0dXMgPyAoZC5zZXRTdGF0dXMoXCJSdW5uaW5nLi4uXCIpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBkLnNldFN0YXR1cyhcIlwiKTtcbiAgICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICAgIH0sIDEpKSA6IGEoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkLnByZUluaXQpXG4gICAgICAgICAgICBmb3IgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZC5wcmVJbml0ICYmIChkLnByZUluaXQgPSBbZC5wcmVJbml0XSk7IDAgPCBkLnByZUluaXQubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGQucHJlSW5pdC5wb3AoKSgpO1xuICAgICAgICAgIFBhKCk7XG4gICAgICAgICAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeTtcbiAgICAgICAgfTtcbiAgICAgIH0pKCk7XG4gICAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBvcnRXYXNtO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVtcImFtZFwiXSlcbiAgICAgICAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHNcbiAgdmFyIHJlcXVpcmVfd29ya2VyX3RocmVhZHMgPSBfX2NvbW1vbkpTKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHNcIigpIHtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6cGVyZl9ob29rc1xuICB2YXIgcmVxdWlyZV9wZXJmX2hvb2tzID0gX19jb21tb25KUyh7XG4gICAgXCJub2RlanMtaWdub3JlOnBlcmZfaG9va3NcIigpIHtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6b3NcbiAgdmFyIG9zX2V4cG9ydHMgPSB7fTtcbiAgX19leHBvcnQob3NfZXhwb3J0cywge1xuICAgIGNwdXM6ICgpID0+IGNwdXNcbiAgfSk7XG4gIHZhciBjcHVzO1xuICB2YXIgaW5pdF9vcyA9IF9fZXNtKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6b3NcIigpIHtcbiAgICAgIGNwdXMgPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyB3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC5qc1xuICB2YXIgcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZCA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgdmFyIG9ydFdhc21UaHJlYWRlZCA9ICgoKSA9PiB7XG4gICAgICAgIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuICAgICAgICAgIGZ1bmN0aW9uIGFhKCkge1xuICAgICAgICAgICAgZC5idWZmZXIgIT0gbC5idWZmZXIgJiYgbSgpO1xuICAgICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgICBkLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gYmE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHAoKSB7XG4gICAgICAgICAgICBkLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gY2E7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHIoKSB7XG4gICAgICAgICAgICBkLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gZGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGVhKCkge1xuICAgICAgICAgICAgZC5idWZmZXIgIT0gbC5idWZmZXIgJiYgbSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdyA9IG1vZHVsZUFyZywgaGEsIHg7XG4gICAgICAgICAgdy5yZWFkeSA9IG5ldyBQcm9taXNlKChhLCBiKSA9PiB7XG4gICAgICAgICAgICBoYSA9IGE7XG4gICAgICAgICAgICB4ID0gYjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgaWEgPSBPYmplY3QuYXNzaWduKHt9LCB3KSwgamEgPSBcIi4vdGhpcy5wcm9ncmFtXCIsIHogPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgdGhyb3cgYjtcbiAgICAgICAgICB9LCBrYSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHdpbmRvdywgQSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW1wb3J0U2NyaXB0cywgQiA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsIEQgPSB3LkVOVklST05NRU5UX0lTX1BUSFJFQUQgfHwgZmFsc2UsIEUgPSBcIlwiO1xuICAgICAgICAgIGZ1bmN0aW9uIGxhKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB3LmxvY2F0ZUZpbGUgPyB3LmxvY2F0ZUZpbGUoYSwgRSkgOiBFICsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG1hLCBGLCBIO1xuICAgICAgICAgIGlmIChCKSB7XG4gICAgICAgICAgICB2YXIgZnMgPSAoaW5pdF9mcygpLCBfX3RvQ29tbW9uSlMoZnNfZXhwb3J0cykpLCBuYSA9IChpbml0X3BhdGgoKSwgX190b0NvbW1vbkpTKHBhdGhfZXhwb3J0cykpO1xuICAgICAgICAgICAgRSA9IEEgPyBuYS5kaXJuYW1lKEUpICsgXCIvXCIgOiBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICAgICAgICAgIG1hID0gKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgYiA9IGIuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBuZXcgVVJMKGIpIDogbmEubm9ybWFsaXplKGIpO1xuICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGIsIGMgPyB2b2lkIDAgOiBcInV0ZjhcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgSCA9IChiKSA9PiB7XG4gICAgICAgICAgICAgIGIgPSBtYShiLCB0cnVlKTtcbiAgICAgICAgICAgICAgYi5idWZmZXIgfHwgKGIgPSBuZXcgVWludDhBcnJheShiKSk7XG4gICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEYgPSAoYiwgYywgZSwgaCA9IHRydWUpID0+IHtcbiAgICAgICAgICAgICAgYiA9IGIuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBuZXcgVVJMKGIpIDogbmEubm9ybWFsaXplKGIpO1xuICAgICAgICAgICAgICBmcy5yZWFkRmlsZShiLCBoID8gdm9pZCAwIDogXCJ1dGY4XCIsIChnLCBrKSA9PiB7XG4gICAgICAgICAgICAgICAgZyA/IGUoZykgOiBjKGggPyBrLmJ1ZmZlciA6IGspO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAhdy50aGlzUHJvZ3JhbSAmJiAxIDwgcHJvY2Vzcy5hcmd2Lmxlbmd0aCAmJiAoamEgPSBwcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikpO1xuICAgICAgICAgICAgcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuICAgICAgICAgICAgeiA9IChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSBiO1xuICAgICAgICAgICAgICB0aHJvdyBjO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHcuaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICAgIGxldCBhO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYSA9IHJlcXVpcmVfd29ya2VyX3RocmVhZHMoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgY29uc29sZS5lcnJvcignVGhlIFwid29ya2VyX3RocmVhZHNcIiBtb2R1bGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIG5vZGUuanMgYnVpbGQgLSBwZXJoYXBzIGEgbmV3ZXIgdmVyc2lvbiBpcyBuZWVkZWQ/JyksIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbG9iYWwuV29ya2VyID0gYS5Xb3JrZXI7XG4gICAgICAgICAgfSBlbHNlIGlmIChrYSB8fCBBKVxuICAgICAgICAgICAgQSA/IEUgPSBzZWxmLmxvY2F0aW9uLmhyZWYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIChFID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCB0eXBlb2YgX3NjcmlwdERpciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfc2NyaXB0RGlyICYmIChFID0gX3NjcmlwdERpciksIDAgIT09IEUuaW5kZXhPZihcImJsb2I6XCIpID8gRSA9IEUuc3Vic3RyKDAsIEUucmVwbGFjZSgvWz8jXS4qLywgXCJcIikubGFzdEluZGV4T2YoXCIvXCIpICsgMSkgOiBFID0gXCJcIiwgQiB8fCAobWEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBiLm9wZW4oXCJHRVRcIiwgYSwgZmFsc2UpO1xuICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybiBiLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH0sIEEgJiYgKEggPSAoYSkgPT4ge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBiLm9wZW4oXCJHRVRcIiwgYSwgZmFsc2UpO1xuICAgICAgICAgICAgICBiLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgYi5zZW5kKG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYi5yZXNwb25zZSk7XG4gICAgICAgICAgICB9KSwgRiA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBlID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGUub3BlbihcIkdFVFwiLCBhLCB0cnVlKTtcbiAgICAgICAgICAgICAgZS5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgIGUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIDIwMCA9PSBlLnN0YXR1cyB8fCAwID09IGUuc3RhdHVzICYmIGUucmVzcG9uc2UgPyBiKGUucmVzcG9uc2UpIDogYygpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBlLm9uZXJyb3IgPSBjO1xuICAgICAgICAgICAgICBlLnNlbmQobnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBCICYmIFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHBlcmZvcm1hbmNlICYmIChnbG9iYWwucGVyZm9ybWFuY2UgPSByZXF1aXJlX3BlcmZfaG9va3MoKS5wZXJmb3JtYW5jZSk7XG4gICAgICAgICAgdmFyIG9hID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwgcGEgPSBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7XG4gICAgICAgICAgQiAmJiAob2EgPSAoLi4uYSkgPT4gZnMud3JpdGVTeW5jKDEsIGEuam9pbihcIiBcIikgKyBcIlxcblwiKSwgcGEgPSAoLi4uYSkgPT4gZnMud3JpdGVTeW5jKDIsIGEuam9pbihcIiBcIikgKyBcIlxcblwiKSk7XG4gICAgICAgICAgdmFyIHFhID0gdy5wcmludCB8fCBvYSwgSSA9IHcucHJpbnRFcnIgfHwgcGE7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih3LCBpYSk7XG4gICAgICAgICAgaWEgPSBudWxsO1xuICAgICAgICAgIHcudGhpc1Byb2dyYW0gJiYgKGphID0gdy50aGlzUHJvZ3JhbSk7XG4gICAgICAgICAgdy5xdWl0ICYmICh6ID0gdy5xdWl0KTtcbiAgICAgICAgICB2YXIgSjtcbiAgICAgICAgICB3Lndhc21CaW5hcnkgJiYgKEogPSB3Lndhc21CaW5hcnkpO1xuICAgICAgICAgIHZhciBub0V4aXRSdW50aW1lID0gdy5ub0V4aXRSdW50aW1lIHx8IHRydWU7XG4gICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYgSyhcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgdmFyIGQsIEwsIHJhLCBNID0gZmFsc2UsIE4sIGwsIGJhLCBjYSwgZGEsIGZhO1xuICAgICAgICAgIGZ1bmN0aW9uIG0oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGQuYnVmZmVyO1xuICAgICAgICAgICAgdy5IRUFQOCA9IGwgPSBuZXcgSW50OEFycmF5KGEpO1xuICAgICAgICAgICAgdy5IRUFQMTYgPSBuZXcgSW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUDMyID0gY2EgPSBuZXcgSW50MzJBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUFU4ID0gYmEgPSBuZXcgVWludDhBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUFUzMiA9IGRhID0gbmV3IFVpbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgdy5IRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUEY2NCA9IGZhID0gbmV3IEZsb2F0NjRBcnJheShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIE8gPSB3LklOSVRJQUxfTUVNT1JZIHx8IDE2Nzc3MjE2O1xuICAgICAgICAgIDUyNDI4ODAgPD0gTyB8fCBLKFwiSU5JVElBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFNUQUNLX1NJWkUsIHdhcyBcIiArIE8gKyBcIiEgKFNUQUNLX1NJWkU9NTI0Mjg4MClcIik7XG4gICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICBkID0gdy53YXNtTWVtb3J5O1xuICAgICAgICAgIGVsc2UgaWYgKHcud2FzbU1lbW9yeSlcbiAgICAgICAgICAgIGQgPSB3Lndhc21NZW1vcnk7XG4gICAgICAgICAgZWxzZSBpZiAoZCA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoeyBpbml0aWFsOiBPIC8gNjU1MzYsIG1heGltdW06IDY1NTM2LCBzaGFyZWQ6IHRydWUgfSksICEoZC5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpXG4gICAgICAgICAgICB0aHJvdyBJKFwicmVxdWVzdGVkIGEgc2hhcmVkIFdlYkFzc2VtYmx5Lk1lbW9yeSBidXQgdGhlIHJldHVybmVkIGJ1ZmZlciBpcyBub3QgYSBTaGFyZWRBcnJheUJ1ZmZlciwgaW5kaWNhdGluZyB0aGF0IHdoaWxlIHRoZSBicm93c2VyIGhhcyBTaGFyZWRBcnJheUJ1ZmZlciBpdCBkb2VzIG5vdCBoYXZlIFdlYkFzc2VtYmx5IHRocmVhZHMgc3VwcG9ydCAtIHlvdSBtYXkgbmVlZCB0byBzZXQgYSBmbGFnXCIpLCBCICYmIEkoXCIob24gbm9kZSB5b3UgbWF5IG5lZWQ6IC0tZXhwZXJpbWVudGFsLXdhc20tdGhyZWFkcyAtLWV4cGVyaW1lbnRhbC13YXNtLWJ1bGstbWVtb3J5IGFuZC9vciByZWNlbnQgdmVyc2lvbilcIiksIEVycm9yKFwiYmFkIG1lbW9yeVwiKTtcbiAgICAgICAgICBtKCk7XG4gICAgICAgICAgTyA9IGQuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgdmFyIHNhLCB0YSA9IFtdLCB1YSA9IFtdLCB2YSA9IFtdLCB3YSA9IDA7XG4gICAgICAgICAgZnVuY3Rpb24gUCgpIHtcbiAgICAgICAgICAgIHJldHVybiBub0V4aXRSdW50aW1lIHx8IDAgPCB3YTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFEgPSAwLCB4YSA9IG51bGwsIFIgPSBudWxsO1xuICAgICAgICAgIGZ1bmN0aW9uIHlhKCkge1xuICAgICAgICAgICAgUSsrO1xuICAgICAgICAgICAgdy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzICYmIHcubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhRKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gemEoKSB7XG4gICAgICAgICAgICBRLS07XG4gICAgICAgICAgICB3Lm1vbml0b3JSdW5EZXBlbmRlbmNpZXMgJiYgdy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKFEpO1xuICAgICAgICAgICAgaWYgKDAgPT0gUSAmJiAobnVsbCAhPT0geGEgJiYgKGNsZWFySW50ZXJ2YWwoeGEpLCB4YSA9IG51bGwpLCBSKSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IFI7XG4gICAgICAgICAgICAgIFIgPSBudWxsO1xuICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEsoYSkge1xuICAgICAgICAgICAgaWYgKHcub25BYm9ydClcbiAgICAgICAgICAgICAgdy5vbkFib3J0KGEpO1xuICAgICAgICAgICAgYSA9IFwiQWJvcnRlZChcIiArIGEgKyBcIilcIjtcbiAgICAgICAgICAgIEkoYSk7XG4gICAgICAgICAgICBNID0gdHJ1ZTtcbiAgICAgICAgICAgIE4gPSAxO1xuICAgICAgICAgICAgYSA9IG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYSArIFwiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTtcbiAgICAgICAgICAgIHgoYSk7XG4gICAgICAgICAgICB0aHJvdyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBBYShhKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFM7XG4gICAgICAgICAgUyA9IFwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiO1xuICAgICAgICAgIEFhKFMpIHx8IChTID0gbGEoUykpO1xuICAgICAgICAgIGZ1bmN0aW9uIEJhKGEpIHtcbiAgICAgICAgICAgIGlmIChhID09IFMgJiYgSilcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KEopO1xuICAgICAgICAgICAgaWYgKEgpXG4gICAgICAgICAgICAgIHJldHVybiBIKGEpO1xuICAgICAgICAgICAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBDYShhKSB7XG4gICAgICAgICAgICBpZiAoIUogJiYgKGthIHx8IEEpKSB7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGZldGNoICYmICFhLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaChhLCB7IGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIgfSkudGhlbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFiLm9rKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcImZhaWxlZCB0byBsb2FkIHdhc20gYmluYXJ5IGZpbGUgYXQgJ1wiICsgYSArIFwiJ1wiO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiBCYShhKSk7XG4gICAgICAgICAgICAgIGlmIChGKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoYiwgYykgPT4ge1xuICAgICAgICAgICAgICAgICAgRihhLCAoZSkgPT4gYihuZXcgVWludDhBcnJheShlKSksIGMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gQmEoYSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBEYShhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2EoYSkudGhlbigoZSkgPT4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZSwgYikpLnRoZW4oKGUpID0+IGUpLnRoZW4oYywgKGUpID0+IHtcbiAgICAgICAgICAgICAgSShcImZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206IFwiICsgZSk7XG4gICAgICAgICAgICAgIEsoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gRWEoYSwgYikge1xuICAgICAgICAgICAgdmFyIGMgPSBTO1xuICAgICAgICAgICAgcmV0dXJuIEogfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyB8fCBBYShjKSB8fCBjLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpIHx8IEIgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBmZXRjaCA/IERhKGMsIGEsIGIpIDogZmV0Y2goYywgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGUpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGUsIGEpLnRoZW4oYiwgZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgICBJKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiICsgaCk7XG4gICAgICAgICAgICAgIEkoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIERhKGMsIGEsIGIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICBmdW5jdGlvbiBVKGEpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiRXhpdFN0YXR1c1wiO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gYFByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoJHthfSlgO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBGYShhKSB7XG4gICAgICAgICAgICBhLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgYS5vbm1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBHYShhKSB7XG4gICAgICAgICAgICAoYSA9IFYuTGFbYV0pIHx8IEsoKTtcbiAgICAgICAgICAgIFYubGIoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEhhKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gVi5mYigpO1xuICAgICAgICAgICAgaWYgKCFiKVxuICAgICAgICAgICAgICByZXR1cm4gNjtcbiAgICAgICAgICAgIFYuT2EucHVzaChiKTtcbiAgICAgICAgICAgIFYuTGFbYS5OYV0gPSBiO1xuICAgICAgICAgICAgYi5OYSA9IGEuTmE7XG4gICAgICAgICAgICB2YXIgYyA9IHsgY21kOiBcInJ1blwiLCBzdGFydF9yb3V0aW5lOiBhLm1iLCBhcmc6IGEuZWIsIHB0aHJlYWRfcHRyOiBhLk5hIH07XG4gICAgICAgICAgICBCICYmIGIudW5yZWYoKTtcbiAgICAgICAgICAgIGIucG9zdE1lc3NhZ2UoYywgYS5zYik7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIElhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpIDogdm9pZCAwLCBKYSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBlID0gYiArIGM7XG4gICAgICAgICAgICBmb3IgKGMgPSBiOyBhW2NdICYmICEoYyA+PSBlKTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBhLmJ1ZmZlciAmJiBJYSlcbiAgICAgICAgICAgICAgcmV0dXJuIElhLmRlY29kZShhLmJ1ZmZlciBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyID8gYS5zbGljZShiLCBjKSA6IGEuc3ViYXJyYXkoYiwgYykpO1xuICAgICAgICAgICAgZm9yIChlID0gXCJcIjsgYiA8IGM7ICkge1xuICAgICAgICAgICAgICB2YXIgaCA9IGFbYisrXTtcbiAgICAgICAgICAgICAgaWYgKGggJiAxMjgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZyA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICgxOTIgPT0gKGggJiAyMjQpKVxuICAgICAgICAgICAgICAgICAgZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChoICYgMzEpIDw8IDYgfCBnKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBrID0gYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICBoID0gMjI0ID09IChoICYgMjQwKSA/IChoICYgMTUpIDw8IDEyIHwgZyA8PCA2IHwgayA6IChoICYgNykgPDwgMTggfCBnIDw8IDEyIHwgayA8PCA2IHwgYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICA2NTUzNiA+IGggPyBlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoaCkgOiAoaCAtPSA2NTUzNiwgZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgaCA+PiAxMCwgNTYzMjAgfCBoICYgMTAyMykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgfSwgS2EgPSAoYSwgYikgPT4gKGEgPj4+PSAwKSA/IEphKG4oKSwgYSwgYikgOiBcIlwiO1xuICAgICAgICAgIGZ1bmN0aW9uIExhKGEpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxLCAxLCBhKTtcbiAgICAgICAgICAgIE4gPSBhO1xuICAgICAgICAgICAgaWYgKCFQKCkpIHtcbiAgICAgICAgICAgICAgVi5uYigpO1xuICAgICAgICAgICAgICBpZiAody5vbkV4aXQpXG4gICAgICAgICAgICAgICAgdy5vbkV4aXQoYSk7XG4gICAgICAgICAgICAgIE0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeihhLCBuZXcgVShhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBOYSA9IChhKSA9PiB7XG4gICAgICAgICAgICBOID0gYTtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICB0aHJvdyBNYShhKSwgXCJ1bndpbmRcIjtcbiAgICAgICAgICAgIExhKGEpO1xuICAgICAgICAgIH0sIFYgPSB7XG4gICAgICAgICAgICBSYTogW10sXG4gICAgICAgICAgICBPYTogW10sXG4gICAgICAgICAgICBaYTogW10sXG4gICAgICAgICAgICBMYToge30sXG4gICAgICAgICAgICBWYTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIEQgPyBWLmhiKCkgOiBWLmdiKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB0YS51bnNoaWZ0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB5YSgpO1xuICAgICAgICAgICAgICAgIFYuaWIoKCkgPT4gemEoKSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgVi5yZWNlaXZlT2JqZWN0VHJhbnNmZXIgPSBWLmtiO1xuICAgICAgICAgICAgICBWLnRocmVhZEluaXRUTFMgPSBWLllhO1xuICAgICAgICAgICAgICBWLnNldEV4aXRTdGF0dXMgPSBWLlhhO1xuICAgICAgICAgICAgICBub0V4aXRSdW50aW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgWGE6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgTiA9IGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGI6IFtcIiR0ZXJtaW5hdGVXb3JrZXJcIl0sXG4gICAgICAgICAgICBuYjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGEgb2YgVi5PYSlcbiAgICAgICAgICAgICAgICBGYShhKTtcbiAgICAgICAgICAgICAgZm9yIChhIG9mIFYuUmEpXG4gICAgICAgICAgICAgICAgRmEoYSk7XG4gICAgICAgICAgICAgIFYuUmEgPSBbXTtcbiAgICAgICAgICAgICAgVi5PYSA9IFtdO1xuICAgICAgICAgICAgICBWLkxhID0gW107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGI6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBhLk5hO1xuICAgICAgICAgICAgICBkZWxldGUgVi5MYVtiXTtcbiAgICAgICAgICAgICAgVi5SYS5wdXNoKGEpO1xuICAgICAgICAgICAgICBWLk9hLnNwbGljZShWLk9hLmluZGV4T2YoYSksIDEpO1xuICAgICAgICAgICAgICBhLk5hID0gMDtcbiAgICAgICAgICAgICAgT2EoYik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFlhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgVi5aYS5mb3JFYWNoKChhKSA9PiBhKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGpiOiAoYSkgPT4gbmV3IFByb21pc2UoKGIpID0+IHtcbiAgICAgICAgICAgICAgYS5vbm1lc3NhZ2UgPSAoZykgPT4ge1xuICAgICAgICAgICAgICAgIGcgPSBnLmRhdGE7XG4gICAgICAgICAgICAgICAgdmFyIGsgPSBnLmNtZDtcbiAgICAgICAgICAgICAgICBpZiAoZy50YXJnZXRUaHJlYWQgJiYgZy50YXJnZXRUaHJlYWQgIT0gWCgpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IFYuTGFbZy53Yl07XG4gICAgICAgICAgICAgICAgICB0ID8gdC5wb3N0TWVzc2FnZShnLCBnLnRyYW5zZmVyTGlzdCkgOiBJKCdJbnRlcm5hbCBlcnJvciEgV29ya2VyIHNlbnQgYSBtZXNzYWdlIFwiJyArIGsgKyAnXCIgdG8gdGFyZ2V0IHB0aHJlYWQgJyArIGcudGFyZ2V0VGhyZWFkICsgXCIsIGJ1dCB0aGF0IHRocmVhZCBubyBsb25nZXIgZXhpc3RzIVwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiY2hlY2tNYWlsYm94XCIgPT09IGspXG4gICAgICAgICAgICAgICAgICBZKCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJzcGF3blRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgICAgSGEoZyk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJjbGVhbnVwVGhyZWFkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgICBHYShnLnRocmVhZCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJraWxsVGhyZWFkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgICBnID0gZy50aHJlYWQsIGsgPSBWLkxhW2ddLCBkZWxldGUgVi5MYVtnXSwgRmEoayksIE9hKGcpLCBWLk9hLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgVi5PYS5pbmRleE9mKGspLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLCBrLk5hID0gMDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcImNhbmNlbFRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgICAgVi5MYVtnLnRocmVhZF0ucG9zdE1lc3NhZ2UoeyBjbWQ6IFwiY2FuY2VsXCIgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJsb2FkZWRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICAgIGEubG9hZGVkID0gdHJ1ZSwgYihhKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcImFsZXJ0XCIgPT09IGspXG4gICAgICAgICAgICAgICAgICBhbGVydChcIlRocmVhZCBcIiArIGcudGhyZWFkSWQgKyBcIjogXCIgKyBnLnRleHQpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwic2V0aW1tZWRpYXRlXCIgPT09IGcudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgYS5wb3N0TWVzc2FnZShnKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcImNhbGxIYW5kbGVyXCIgPT09IGspXG4gICAgICAgICAgICAgICAgICB3W2cuaGFuZGxlcl0oLi4uZy5hcmdzKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICBrICYmIEkoXCJ3b3JrZXIgc2VudCBhbiB1bmtub3duIGNvbW1hbmQgXCIgKyBrKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgYS5vbmVycm9yID0gKGcpID0+IHtcbiAgICAgICAgICAgICAgICBJKFwid29ya2VyIHNlbnQgYW4gZXJyb3IhIFwiICsgZy5maWxlbmFtZSArIFwiOlwiICsgZy5saW5lbm8gKyBcIjogXCIgKyBnLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHRocm93IGc7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIEIgJiYgKGEub24oXCJtZXNzYWdlXCIsIGZ1bmN0aW9uKGcpIHtcbiAgICAgICAgICAgICAgICBhLm9ubWVzc2FnZSh7IGRhdGE6IGcgfSk7XG4gICAgICAgICAgICAgIH0pLCBhLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICAgIGEub25lcnJvcihnKTtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICB2YXIgYyA9IFtdLCBlID0gW1wib25FeGl0XCIsIFwib25BYm9ydFwiLCBcInByaW50XCIsIFwicHJpbnRFcnJcIl0sIGg7XG4gICAgICAgICAgICAgIGZvciAoaCBvZiBlKVxuICAgICAgICAgICAgICAgIHcuaGFzT3duUHJvcGVydHkoaCkgJiYgYy5wdXNoKGgpO1xuICAgICAgICAgICAgICBhLnBvc3RNZXNzYWdlKHsgY21kOiBcImxvYWRcIiwgaGFuZGxlcnM6IGMsIHVybE9yQmxvYjogdy5tYWluU2NyaXB0VXJsT3JCbG9iIHx8IF9zY3JpcHREaXIsIHdhc21NZW1vcnk6IGQsIHdhc21Nb2R1bGU6IHJhIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpYjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgYSA9IGxhKFwib3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIpO1xuICAgICAgICAgICAgICBhID0gbmV3IFdvcmtlcihhKTtcbiAgICAgICAgICAgICAgVi5SYS5wdXNoKGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgMCA9PSBWLlJhLmxlbmd0aCAmJiAoVi5jYigpLCBWLmpiKFYuUmFbMF0pKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFYuUmEucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3LlBUaHJlYWQgPSBWO1xuICAgICAgICAgIHZhciBQYSA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKDsgMCA8IGEubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGEuc2hpZnQoKSh3KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHcuZXN0YWJsaXNoU3RhY2tTcGFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBYKCksIGIgPSBwKClbYSArIDUyID4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgYSA9IHAoKVthICsgNTYgPj4gMiA+Pj4gMF07XG4gICAgICAgICAgICBRYShiLCBiIC0gYSk7XG4gICAgICAgICAgICBSYShiKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIE1hKGEpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygyLCAwLCBhKTtcbiAgICAgICAgICAgIE5hKGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgU2EgPSBbXTtcbiAgICAgICAgICB3Lmludm9rZUVudHJ5UG9pbnQgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IFNhW2FdO1xuICAgICAgICAgICAgYyB8fCAoYSA+PSBTYS5sZW5ndGggJiYgKFNhLmxlbmd0aCA9IGEgKyAxKSwgU2FbYV0gPSBjID0gc2EuZ2V0KGEpKTtcbiAgICAgICAgICAgIGEgPSBjKGIpO1xuICAgICAgICAgICAgUCgpID8gVi5YYShhKSA6IFRhKGEpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gVWEoYSkge1xuICAgICAgICAgICAgdGhpcy5VYSA9IGEgLSAyNDtcbiAgICAgICAgICAgIHRoaXMuYmIgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgIHIoKVt0aGlzLlVhICsgNCA+PiAyID4+PiAwXSA9IGI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hYiA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgcigpW3RoaXMuVWEgKyA4ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLlZhID0gZnVuY3Rpb24oYiwgYykge1xuICAgICAgICAgICAgICB0aGlzLiRhKCk7XG4gICAgICAgICAgICAgIHRoaXMuYmIoYik7XG4gICAgICAgICAgICAgIHRoaXMuYWIoYyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy4kYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByKClbdGhpcy5VYSArIDE2ID4+IDIgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBWYSA9IDAsIFdhID0gMDtcbiAgICAgICAgICBmdW5jdGlvbiBYYShhLCBiLCBjLCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFcoMywgMSwgYSwgYiwgYywgZSkgOiBZYShhLCBiLCBjLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gWWEoYSwgYiwgYywgZSkge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZSA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIpXG4gICAgICAgICAgICAgIHJldHVybiBJKFwiQ3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IFNoYXJlZEFycmF5QnVmZmVyLCBwdGhyZWFkcyBhcmUgbm90IGF2YWlsYWJsZSFcIiksIDY7XG4gICAgICAgICAgICB2YXIgaCA9IFtdO1xuICAgICAgICAgICAgaWYgKEQgJiYgMCA9PT0gaC5sZW5ndGgpXG4gICAgICAgICAgICAgIHJldHVybiBYYShhLCBiLCBjLCBlKTtcbiAgICAgICAgICAgIGEgPSB7IG1iOiBjLCBOYTogYSwgZWI6IGUsIHNiOiBoIH07XG4gICAgICAgICAgICByZXR1cm4gRCA/IChhLnViID0gXCJzcGF3blRocmVhZFwiLCBwb3N0TWVzc2FnZShhLCBoKSwgMCkgOiBIYShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gWmEoYSwgYiwgYykge1xuICAgICAgICAgICAgcmV0dXJuIEQgPyBXKDQsIDEsIGEsIGIsIGMpIDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gJGEoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDUsIDEsIGEsIGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYWIgPSAoYSkgPT4ge1xuICAgICAgICAgICAgZm9yICh2YXIgYiA9IDAsIGMgPSAwOyBjIDwgYS5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgICB2YXIgZSA9IGEuY2hhckNvZGVBdChjKTtcbiAgICAgICAgICAgICAgMTI3ID49IGUgPyBiKysgOiAyMDQ3ID49IGUgPyBiICs9IDIgOiA1NTI5NiA8PSBlICYmIDU3MzQzID49IGUgPyAoYiArPSA0LCArK2MpIDogYiArPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfSwgYmIgPSAoYSwgYiwgYywgZSkgPT4ge1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoISgwIDwgZSkpXG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgdmFyIGggPSBjO1xuICAgICAgICAgICAgZSA9IGMgKyBlIC0gMTtcbiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgYS5sZW5ndGg7ICsrZykge1xuICAgICAgICAgICAgICB2YXIgayA9IGEuY2hhckNvZGVBdChnKTtcbiAgICAgICAgICAgICAgaWYgKDU1Mjk2IDw9IGsgJiYgNTczNDMgPj0gaykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gYS5jaGFyQ29kZUF0KCsrZyk7XG4gICAgICAgICAgICAgICAgayA9IDY1NTM2ICsgKChrICYgMTAyMykgPDwgMTApIHwgdCAmIDEwMjM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKDEyNyA+PSBrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPj0gZSlcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IGs7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKDIwNDcgPj0gaykge1xuICAgICAgICAgICAgICAgICAgaWYgKGMgKyAxID49IGUpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTkyIHwgayA+PiA2O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNjU1MzUgPj0gaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDIgPj0gZSlcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMjI0IHwgayA+PiAxMjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICsgMyA+PSBlKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAyNDAgfCBrID4+IDE4O1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBrID4+IDEyICYgNjM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBrID4+IDYgJiA2MztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgayAmIDYzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiW2MgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIHJldHVybiBjIC0gaDtcbiAgICAgICAgICB9LCBjYiA9IChhLCBiLCBjKSA9PiBiYihhLCBuKCksIGIsIGMpO1xuICAgICAgICAgIGZ1bmN0aW9uIGRiKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVyg2LCAxLCBhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZWIoYSwgYiwgYykge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDcsIDEsIGEsIGIsIGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBmYihhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFcoOCwgMSwgYSwgYiwgYykgOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBnYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoOSwgMSwgYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGhiKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxMCwgMSwgYSwgYiwgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGliKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxMSwgMSwgYSwgYiwgYywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGpiKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxMiwgMSwgYSwgYiwgYywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGtiKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxMywgMSwgYSwgYiwgYywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGxiKGEpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxNCwgMSwgYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG1iKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxNSwgMSwgYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG5iKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxNiwgMSwgYSwgYiwgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvYiA9IChhKSA9PiB7XG4gICAgICAgICAgICBpZiAoIU0pXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGEoKSwgIVAoKSlcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIEQgPyBUYShOKSA6IE5hKE4pO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoYikge1xuICAgICAgICAgICAgICAgICAgICBiIGluc3RhbmNlb2YgVSB8fCBcInVud2luZFwiID09IGIgfHwgeigxLCBiKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoYikge1xuICAgICAgICAgICAgICAgIGIgaW5zdGFuY2VvZiBVIHx8IFwidW53aW5kXCIgPT0gYiB8fCB6KDEsIGIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBwYihhKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIEF0b21pY3MudGIgJiYgKEF0b21pY3MudGIocCgpLCBhID4+IDIsIGEpLnZhbHVlLnRoZW4oWSksIGEgKz0gMTI4LCBBdG9taWNzLnN0b3JlKHAoKSwgYSA+PiAyLCAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHcuX19lbXNjcmlwdGVuX3RocmVhZF9tYWlsYm94X2F3YWl0ID0gcGI7XG4gICAgICAgICAgZnVuY3Rpb24gWSgpIHtcbiAgICAgICAgICAgIHZhciBhID0gWCgpO1xuICAgICAgICAgICAgYSAmJiAocGIoYSksIG9iKCgpID0+IHFiKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdy5jaGVja01haWxib3ggPSBZO1xuICAgICAgICAgIHZhciBaID0gKGEpID0+IDAgPT09IGEgJSA0ICYmICgwICE9PSBhICUgMTAwIHx8IDAgPT09IGEgJSA0MDApLCByYiA9IFswLCAzMSwgNjAsIDkxLCAxMjEsIDE1MiwgMTgyLCAyMTMsIDI0NCwgMjc0LCAzMDUsIDMzNV0sIHNiID0gWzAsIDMxLCA1OSwgOTAsIDEyMCwgMTUxLCAxODEsIDIxMiwgMjQzLCAyNzMsIDMwNCwgMzM0XTtcbiAgICAgICAgICBmdW5jdGlvbiB0YihhLCBiLCBjLCBlLCBoLCBnLCBrLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFcoMTcsIDEsIGEsIGIsIGMsIGUsIGgsIGcsIGssIHQpIDogLTUyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB1YihhLCBiLCBjLCBlLCBoLCBnLCBrKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoMTgsIDEsIGEsIGIsIGMsIGUsIGgsIGcsIGspO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgd2IgPSAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBhYihhKSArIDEsIGMgPSB2YihiKTtcbiAgICAgICAgICAgIGMgJiYgY2IoYSwgYywgYik7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9LCB5YiA9IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9IHhiKCk7XG4gICAgICAgICAgICBhID0gYSgpO1xuICAgICAgICAgICAgUmEoYik7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFcoYSwgYikge1xuICAgICAgICAgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoIC0gMiwgZSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiB5YigoKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGggPSB6Yig4ICogYyksIGcgPSBoID4+IDMsIGsgPSAwOyBrIDwgYzsgaysrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlWzIgKyBrXTtcbiAgICAgICAgICAgICAgICBlYSgpW2cgKyBrID4+PiAwXSA9IHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIEFiKGEsIGMsIGgsIGIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBCYiA9IFtdLCBDYiA9IHt9LCBFYiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghRGIpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSB7IFVTRVI6IFwid2ViX3VzZXJcIiwgTE9HTkFNRTogXCJ3ZWJfdXNlclwiLCBQQVRIOiBcIi9cIiwgUFdEOiBcIi9cIiwgSE9NRTogXCIvaG9tZS93ZWJfdXNlclwiLCBMQU5HOiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgbmF2aWdhdG9yICYmIG5hdmlnYXRvci5sYW5ndWFnZXMgJiYgbmF2aWdhdG9yLmxhbmd1YWdlc1swXSB8fCBcIkNcIikucmVwbGFjZShcIi1cIiwgXCJfXCIpICsgXCIuVVRGLThcIiwgXzogamEgfHwgXCIuL3RoaXMucHJvZ3JhbVwiIH0sIGI7XG4gICAgICAgICAgICAgIGZvciAoYiBpbiBDYilcbiAgICAgICAgICAgICAgICB2b2lkIDAgPT09IENiW2JdID8gZGVsZXRlIGFbYl0gOiBhW2JdID0gQ2JbYl07XG4gICAgICAgICAgICAgIHZhciBjID0gW107XG4gICAgICAgICAgICAgIGZvciAoYiBpbiBhKVxuICAgICAgICAgICAgICAgIGMucHVzaChgJHtifT0ke2FbYl19YCk7XG4gICAgICAgICAgICAgIERiID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBEYjtcbiAgICAgICAgICB9LCBEYjtcbiAgICAgICAgICBmdW5jdGlvbiBGYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoMTksIDEsIGEsIGIpO1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgIEViKCkuZm9yRWFjaChmdW5jdGlvbihlLCBoKSB7XG4gICAgICAgICAgICAgIHZhciBnID0gYiArIGM7XG4gICAgICAgICAgICAgIGggPSByKClbYSArIDQgKiBoID4+IDIgPj4+IDBdID0gZztcbiAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IGUubGVuZ3RoOyArK2cpXG4gICAgICAgICAgICAgICAgYWEoKVtoKysgPj4gMCA+Pj4gMF0gPSBlLmNoYXJDb2RlQXQoZyk7XG4gICAgICAgICAgICAgIGFhKClbaCA+PiAwID4+PiAwXSA9IDA7XG4gICAgICAgICAgICAgIGMgKz0gZS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gR2IoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDIwLCAxLCBhLCBiKTtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgYyA9IEViKCk7XG4gICAgICAgICAgICByKClbYSA+PiAyID4+PiAwXSA9IGMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGUgPSAwO1xuICAgICAgICAgICAgYy5mb3JFYWNoKGZ1bmN0aW9uKGgpIHtcbiAgICAgICAgICAgICAgZSArPSBoLmxlbmd0aCArIDE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHIoKVtiID4+IDIgPj4+IDBdID0gZTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBIYihhKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFcoMjEsIDEsIGEpIDogNTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIExiKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVygyMiwgMSwgYSwgYiwgYywgZSkgOiA1MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gTWIoYSwgYiwgYywgZSwgaCkge1xuICAgICAgICAgICAgcmV0dXJuIEQgPyBXKDIzLCAxLCBhLCBiLCBjLCBlLCBoKSA6IDcwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgTmIgPSBbbnVsbCwgW10sIFtdXTtcbiAgICAgICAgICBmdW5jdGlvbiBPYihhLCBiLCBjLCBlKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoMjQsIDEsIGEsIGIsIGMsIGUpO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGUgPj4+PSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaCA9IDAsIGcgPSAwOyBnIDwgYzsgZysrKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcigpW2IgPj4gMiA+Pj4gMF0sIHQgPSByKClbYiArIDQgPj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgIGIgKz0gODtcbiAgICAgICAgICAgICAgZm9yICh2YXIgQyA9IDA7IEMgPCB0OyBDKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IG4oKVtrICsgQyA+Pj4gMF0sIHkgPSBOYlthXTtcbiAgICAgICAgICAgICAgICAwID09PSB2IHx8IDEwID09PSB2ID8gKCgxID09PSBhID8gcWEgOiBJKShKYSh5LCAwKSksIHkubGVuZ3RoID0gMCkgOiB5LnB1c2godik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaCArPSB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcigpW2UgPj4gMiA+Pj4gMF0gPSBoO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBQYiA9IFszMSwgMjksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXSwgUWIgPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG4gICAgICAgICAgZnVuY3Rpb24gUmIoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSBBcnJheShhYihhKSArIDEpO1xuICAgICAgICAgICAgYmIoYSwgYiwgMCwgYi5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBTYiA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICBhYSgpLnNldChhLCBiID4+PiAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFRiKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGgoZiwgcSwgdSkge1xuICAgICAgICAgICAgICBmb3IgKGYgPSBcIm51bWJlclwiID09IHR5cGVvZiBmID8gZi50b1N0cmluZygpIDogZiB8fCBcIlwiOyBmLmxlbmd0aCA8IHE7IClcbiAgICAgICAgICAgICAgICBmID0gdVswXSArIGY7XG4gICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZyhmLCBxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoKGYsIHEsIFwiMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGsoZiwgcSkge1xuICAgICAgICAgICAgICBmdW5jdGlvbiB1KEliKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPiBJYiA/IC0xIDogMCA8IEliID8gMSA6IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIEc7XG4gICAgICAgICAgICAgIDAgPT09IChHID0gdShmLmdldEZ1bGxZZWFyKCkgLSBxLmdldEZ1bGxZZWFyKCkpKSAmJiAwID09PSAoRyA9IHUoZi5nZXRNb250aCgpIC0gcS5nZXRNb250aCgpKSkgJiYgKEcgPSB1KGYuZ2V0RGF0ZSgpIC0gcS5nZXREYXRlKCkpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIEc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB0KGYpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChmLmdldERheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAyOSk7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwgMCwgMyk7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBmLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEMoZikge1xuICAgICAgICAgICAgICB2YXIgcSA9IGYuUGE7XG4gICAgICAgICAgICAgIGZvciAoZiA9IG5ldyBEYXRlKG5ldyBEYXRlKGYuUWEgKyAxOTAwLCAwLCAxKS5nZXRUaW1lKCkpOyAwIDwgcTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHUgPSBmLmdldE1vbnRoKCksIEcgPSAoWihmLmdldEZ1bGxZZWFyKCkpID8gUGIgOiBRYilbdV07XG4gICAgICAgICAgICAgICAgaWYgKHEgPiBHIC0gZi5nZXREYXRlKCkpXG4gICAgICAgICAgICAgICAgICBxIC09IEcgLSBmLmdldERhdGUoKSArIDEsIGYuc2V0RGF0ZSgxKSwgMTEgPiB1ID8gZi5zZXRNb250aCh1ICsgMSkgOiAoZi5zZXRNb250aCgwKSwgZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkgKyAxKSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmLnNldERhdGUoZi5nZXREYXRlKCkgKyBxKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1ID0gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpICsgMSwgMCwgNCk7XG4gICAgICAgICAgICAgIHEgPSB0KG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgIGYuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgIHUgPSB0KHUpO1xuICAgICAgICAgICAgICByZXR1cm4gMCA+PSBrKHEsIGYpID8gMCA+PSBrKHUsIGYpID8gZi5nZXRGdWxsWWVhcigpICsgMSA6IGYuZ2V0RnVsbFllYXIoKSA6IGYuZ2V0RnVsbFllYXIoKSAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBlID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciB2ID0gcCgpW2UgKyA0MCA+PiAyID4+PiAwXTtcbiAgICAgICAgICAgIGUgPSB7IHFiOiBwKClbZSA+PiAyID4+PiAwXSwgcGI6IHAoKVtlICsgNCA+PiAyID4+PiAwXSwgU2E6IHAoKVtlICsgOCA+PiAyID4+PiAwXSwgV2E6IHAoKVtlICsgMTIgPj4gMiA+Pj4gMF0sIFRhOiBwKClbZSArIDE2ID4+IDIgPj4+IDBdLCBRYTogcCgpW2UgKyAyMCA+PiAyID4+PiAwXSwgTWE6IHAoKVtlICsgMjQgPj4gMiA+Pj4gMF0sIFBhOiBwKClbZSArIDI4ID4+IDIgPj4+IDBdLCB5YjogcCgpW2UgKyAzMiA+PiAyID4+PiAwXSwgb2I6IHAoKVtlICsgMzYgPj4gMiA+Pj4gMF0sIHJiOiB2ID8gS2EodikgOiBcIlwiIH07XG4gICAgICAgICAgICBjID0gS2EoYyk7XG4gICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICBcIiVjXCI6IFwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcbiAgICAgICAgICAgICAgXCIlRFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUZcIjogXCIlWS0lbS0lZFwiLFxuICAgICAgICAgICAgICBcIiVoXCI6IFwiJWJcIixcbiAgICAgICAgICAgICAgXCIlclwiOiBcIiVJOiVNOiVTICVwXCIsXG4gICAgICAgICAgICAgIFwiJVJcIjogXCIlSDolTVwiLFxuICAgICAgICAgICAgICBcIiVUXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIleFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJVhcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiVFY1wiOiBcIiVjXCIsXG4gICAgICAgICAgICAgIFwiJUVDXCI6IFwiJUNcIixcbiAgICAgICAgICAgICAgXCIlRXhcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVFWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUV5XCI6IFwiJXlcIixcbiAgICAgICAgICAgICAgXCIlRVlcIjogXCIlWVwiLFxuICAgICAgICAgICAgICBcIiVPZFwiOiBcIiVkXCIsXG4gICAgICAgICAgICAgIFwiJU9lXCI6IFwiJWVcIixcbiAgICAgICAgICAgICAgXCIlT0hcIjogXCIlSFwiLFxuICAgICAgICAgICAgICBcIiVPSVwiOiBcIiVJXCIsXG4gICAgICAgICAgICAgIFwiJU9tXCI6IFwiJW1cIixcbiAgICAgICAgICAgICAgXCIlT01cIjogXCIlTVwiLFxuICAgICAgICAgICAgICBcIiVPU1wiOiBcIiVTXCIsXG4gICAgICAgICAgICAgIFwiJU91XCI6IFwiJXVcIixcbiAgICAgICAgICAgICAgXCIlT1VcIjogXCIlVVwiLFxuICAgICAgICAgICAgICBcIiVPVlwiOiBcIiVWXCIsXG4gICAgICAgICAgICAgIFwiJU93XCI6IFwiJXdcIixcbiAgICAgICAgICAgICAgXCIlT1dcIjogXCIlV1wiLFxuICAgICAgICAgICAgICBcIiVPeVwiOiBcIiV5XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciB5IGluIHYpXG4gICAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UobmV3IFJlZ0V4cCh5LCBcImdcIiksIHZbeV0pO1xuICAgICAgICAgICAgdmFyIEpiID0gXCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSwgS2IgPSBcIkphbnVhcnkgRmVicnVhcnkgTWFyY2ggQXByaWwgTWF5IEp1bmUgSnVseSBBdWd1c3QgU2VwdGVtYmVyIE9jdG9iZXIgTm92ZW1iZXIgRGVjZW1iZXJcIi5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICBcIiVhXCI6IChmKSA9PiBKYltmLk1hXS5zdWJzdHJpbmcoMCwgMyksXG4gICAgICAgICAgICAgIFwiJUFcIjogKGYpID0+IEpiW2YuTWFdLFxuICAgICAgICAgICAgICBcIiViXCI6IChmKSA9PiBLYltmLlRhXS5zdWJzdHJpbmcoMCwgMyksXG4gICAgICAgICAgICAgIFwiJUJcIjogKGYpID0+IEtiW2YuVGFdLFxuICAgICAgICAgICAgICBcIiVDXCI6IChmKSA9PiBnKChmLlFhICsgMTkwMCkgLyAxMDAgfCAwLCAyKSxcbiAgICAgICAgICAgICAgXCIlZFwiOiAoZikgPT4gZyhmLldhLCAyKSxcbiAgICAgICAgICAgICAgXCIlZVwiOiAoZikgPT4gaChmLldhLCAyLCBcIiBcIiksXG4gICAgICAgICAgICAgIFwiJWdcIjogKGYpID0+IEMoZikudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgICAgIFwiJUdcIjogKGYpID0+IEMoZiksXG4gICAgICAgICAgICAgIFwiJUhcIjogKGYpID0+IGcoZi5TYSwgMiksXG4gICAgICAgICAgICAgIFwiJUlcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmID0gZi5TYTtcbiAgICAgICAgICAgICAgICAwID09IGYgPyBmID0gMTIgOiAxMiA8IGYgJiYgKGYgLT0gMTIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBnKGYsIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiVqXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcSA9IDAsIHUgPSAwOyB1IDw9IGYuVGEgLSAxOyBxICs9IChaKGYuUWEgKyAxOTAwKSA/IFBiIDogUWIpW3UrK10pXG4gICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGcoZi5XYSArIHEsIDMpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiVtXCI6IChmKSA9PiBnKGYuVGEgKyAxLCAyKSxcbiAgICAgICAgICAgICAgXCIlTVwiOiAoZikgPT4gZyhmLnBiLCAyKSxcbiAgICAgICAgICAgICAgXCIlblwiOiAoKSA9PiBcIlxcblwiLFxuICAgICAgICAgICAgICBcIiVwXCI6IChmKSA9PiAwIDw9IGYuU2EgJiYgMTIgPiBmLlNhID8gXCJBTVwiIDogXCJQTVwiLFxuICAgICAgICAgICAgICBcIiVTXCI6IChmKSA9PiBnKGYucWIsIDIpLFxuICAgICAgICAgICAgICBcIiV0XCI6ICgpID0+IFwiXHRcIixcbiAgICAgICAgICAgICAgXCIldVwiOiAoZikgPT4gZi5NYSB8fCA3LFxuICAgICAgICAgICAgICBcIiVVXCI6IChmKSA9PiBnKE1hdGguZmxvb3IoKGYuUGEgKyA3IC0gZi5NYSkgLyA3KSwgMiksXG4gICAgICAgICAgICAgIFwiJVZcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcSA9IE1hdGguZmxvb3IoKGYuUGEgKyA3IC0gKGYuTWEgKyA2KSAlIDcpIC8gNyk7XG4gICAgICAgICAgICAgICAgMiA+PSAoZi5NYSArIDM3MSAtIGYuUGEgLSAyKSAlIDcgJiYgcSsrO1xuICAgICAgICAgICAgICAgIGlmIChxKVxuICAgICAgICAgICAgICAgICAgNTMgPT0gcSAmJiAodSA9IChmLk1hICsgMzcxIC0gZi5QYSkgJSA3LCA0ID09IHUgfHwgMyA9PSB1ICYmIFooZi5RYSkgfHwgKHEgPSAxKSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBxID0gNTI7XG4gICAgICAgICAgICAgICAgICB2YXIgdSA9IChmLk1hICsgNyAtIGYuUGEgLSAxKSAlIDc7XG4gICAgICAgICAgICAgICAgICAoNCA9PSB1IHx8IDUgPT0gdSAmJiBaKGYuUWEgJSA0MDAgLSAxKSkgJiYgcSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZyhxLCAyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCIld1wiOiAoZikgPT4gZi5NYSxcbiAgICAgICAgICAgICAgXCIlV1wiOiAoZikgPT4gZyhNYXRoLmZsb29yKChmLlBhICsgNyAtIChmLk1hICsgNikgJSA3KSAvIDcpLCAyKSxcbiAgICAgICAgICAgICAgXCIleVwiOiAoZikgPT4gKGYuUWEgKyAxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcbiAgICAgICAgICAgICAgXCIlWVwiOiAoZikgPT4gZi5RYSArIDE5MDAsXG4gICAgICAgICAgICAgIFwiJXpcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmID0gZi5vYjtcbiAgICAgICAgICAgICAgICB2YXIgcSA9IDAgPD0gZjtcbiAgICAgICAgICAgICAgICBmID0gTWF0aC5hYnMoZikgLyA2MDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHEgPyBcIitcIiA6IFwiLVwiKSArIFN0cmluZyhcIjAwMDBcIiArIChmIC8gNjAgKiAxMDAgKyBmICUgNjApKS5zbGljZSgtNCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJVpcIjogKGYpID0+IGYucmIsXG4gICAgICAgICAgICAgIFwiJSVcIjogKCkgPT4gXCIlXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKFxuICAgICAgICAgICAgICAvJSUvZyxcbiAgICAgICAgICAgICAgXCJcXDBcXDBcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvciAoeSBpbiB2KVxuICAgICAgICAgICAgICBjLmluY2x1ZGVzKHkpICYmIChjID0gYy5yZXBsYWNlKG5ldyBSZWdFeHAoeSwgXCJnXCIpLCB2W3ldKGUpKSk7XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKC9cXDBcXDAvZywgXCIlXCIpO1xuICAgICAgICAgICAgeSA9IFJiKGMpO1xuICAgICAgICAgICAgaWYgKHkubGVuZ3RoID4gYilcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBTYih5LCBhKTtcbiAgICAgICAgICAgIHJldHVybiB5Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIFYuVmEoKTtcbiAgICAgICAgICB2YXIgVWIgPSBbbnVsbCwgTGEsIE1hLCBYYSwgWmEsICRhLCBkYiwgZWIsIGZiLCBnYiwgaGIsIGliLCBqYiwga2IsIGxiLCBtYiwgbmIsIHRiLCB1YiwgRmIsIEdiLCBIYiwgTGIsIE1iLCBPYl0sIFhiID0ge1xuICAgICAgICAgICAgYjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgbmV3IFVhKGEpLlZhKGIgPj4+IDAsIGMgPj4+IDApO1xuICAgICAgICAgICAgICBWYSA9IGE7XG4gICAgICAgICAgICAgIFdhKys7XG4gICAgICAgICAgICAgIHRocm93IFZhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE46IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgVmIoYSA+Pj4gMCwgIUEsIDEsICFrYSwgMTMxMDcyLCBmYWxzZSk7XG4gICAgICAgICAgICAgIFYuWWEoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBqOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBEID8gcG9zdE1lc3NhZ2UoeyBjbWQ6IFwiY2xlYW51cFRocmVhZFwiLCB0aHJlYWQ6IGEgfSkgOiBHYShhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBJOiBZYSxcbiAgICAgICAgICAgIGg6IFphLFxuICAgICAgICAgICAgVDogJGEsXG4gICAgICAgICAgICBEOiBkYixcbiAgICAgICAgICAgIEY6IGViLFxuICAgICAgICAgICAgVTogZmIsXG4gICAgICAgICAgICBSOiBnYixcbiAgICAgICAgICAgIEo6IGhiLFxuICAgICAgICAgICAgUTogaWIsXG4gICAgICAgICAgICBuOiBqYixcbiAgICAgICAgICAgIEU6IGtiLFxuICAgICAgICAgICAgQjogbGIsXG4gICAgICAgICAgICBTOiBtYixcbiAgICAgICAgICAgIEM6IG5iLFxuICAgICAgICAgICAgcTogKCkgPT4gdHJ1ZSxcbiAgICAgICAgICAgIHo6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPT0gYiA+Pj4gMCA/IHNldFRpbWVvdXQoKCkgPT4gWSgpKSA6IEQgPyBwb3N0TWVzc2FnZSh7IHRhcmdldFRocmVhZDogYSwgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pIDogKGEgPSBWLkxhW2FdKSAmJiBhLnBvc3RNZXNzYWdlKHsgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgTTogcGIsXG4gICAgICAgICAgICBwOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIEIgJiYgVi5MYVthID4+PiAwXS5yZWYoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGEgPSBiICsgMjA5NzE1MiA+Pj4gMCA8IDQxOTQzMDUgLSAhIWEgPyAoYSA+Pj4gMCkgKyA0Mjk0OTY3Mjk2ICogYiA6IE5hTjtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPSBuZXcgRGF0ZSgxZTMgKiBhKTtcbiAgICAgICAgICAgICAgcCgpW2MgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyA0ID4+IDIgPj4+IDBdID0gYS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgOCA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDSG91cnMoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAxMiA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgICBwKClbYyArIDE2ID4+IDIgPj4+IDBdID0gYS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgICBwKClbYyArIDIwID4+IDIgPj4+IDBdID0gYS5nZXRVVENGdWxsWWVhcigpIC0gMTkwMDtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyNCA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICAgIGEgPSAoYS5nZXRUaW1lKCkgLSBEYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEsIDAsIDAsIDAsIDApKSAvIDg2NGU1IHwgMDtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyOCA+PiAyID4+PiAwXSA9IGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID0gYiArIDIwOTcxNTIgPj4+IDAgPCA0MTk0MzA1IC0gISFhID8gKGEgPj4+IDApICsgNDI5NDk2NzI5NiAqIGIgOiBOYU47XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICAgIHAoKVtjID4+IDIgPj4+IDBdID0gYS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgNCA+PiAyID4+PiAwXSA9IGEuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBwKClbYyArIDggPj4gMiA+Pj4gMF0gPSBhLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgMTIgPj4gMiA+Pj4gMF0gPSBhLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAxNiA+PiAyID4+PiAwXSA9IGEuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyMCA+PiAyID4+PiAwXSA9IGEuZ2V0RnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMjQgPj4gMiA+Pj4gMF0gPSBhLmdldERheSgpO1xuICAgICAgICAgICAgICBiID0gKFooYS5nZXRGdWxsWWVhcigpKSA/IHJiIDogc2IpW2EuZ2V0TW9udGgoKV0gKyBhLmdldERhdGUoKSAtIDEgfCAwO1xuICAgICAgICAgICAgICBwKClbYyArIDI4ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgICAgcCgpW2MgKyAzNiA+PiAyID4+PiAwXSA9IC0oNjAgKiBhLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgICBiID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgYSA9IChiICE9IGUgJiYgYS5nZXRUaW1lem9uZU9mZnNldCgpID09IE1hdGgubWluKGUsIGIpKSB8IDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMzIgPj4gMiA+Pj4gMF0gPSBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHY6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IERhdGUocCgpW2EgKyAyMCA+PiAyID4+PiAwXSArIDE5MDAsIHAoKVthICsgMTYgPj4gMiA+Pj4gMF0sIHAoKVthICsgMTIgPj4gMiA+Pj4gMF0sIHAoKVthICsgOCA+PiAyID4+PiAwXSwgcCgpW2EgKyA0ID4+IDIgPj4+IDBdLCBwKClbYSA+PiAyID4+PiAwXSwgMCksIGMgPSBwKClbYSArIDMyID4+IDIgPj4+IDBdLCBlID0gYi5nZXRUaW1lem9uZU9mZnNldCgpLCBoID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBnID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBrID0gTWF0aC5taW4oZywgaCk7XG4gICAgICAgICAgICAgIDAgPiBjID8gcCgpW2EgKyAzMiA+PiAyID4+PiAwXSA9IE51bWJlcihoICE9IGcgJiYgayA9PSBlKSA6IDAgPCBjICE9IChrID09IGUpICYmIChoID0gTWF0aC5tYXgoZywgaCksIGIuc2V0VGltZShiLmdldFRpbWUoKSArIDZlNCAqICgoMCA8IGMgPyBrIDogaCkgLSBlKSkpO1xuICAgICAgICAgICAgICBwKClbYSArIDI0ID4+IDIgPj4+IDBdID0gYi5nZXREYXkoKTtcbiAgICAgICAgICAgICAgYyA9IChaKGIuZ2V0RnVsbFllYXIoKSkgPyByYiA6IHNiKVtiLmdldE1vbnRoKCldICsgYi5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgICAgcCgpW2EgKyAyOCA+PiAyID4+PiAwXSA9IGM7XG4gICAgICAgICAgICAgIHAoKVthID4+IDIgPj4+IDBdID0gYi5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIHAoKVthICsgNCA+PiAyID4+PiAwXSA9IGIuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBwKClbYSArIDggPj4gMiA+Pj4gMF0gPSBiLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIHAoKVthICsgMTIgPj4gMiA+Pj4gMF0gPSBiLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyAxNiA+PiAyID4+PiAwXSA9IGIuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyAyMCA+PiAyID4+PiAwXSA9IGIuZ2V0WWVhcigpO1xuICAgICAgICAgICAgICBhID0gYi5nZXRUaW1lKCkgLyAxZTM7XG4gICAgICAgICAgICAgIHJldHVybiBXYigoVCA9IGEsIDEgPD0gK01hdGguYWJzKFQpID8gMCA8IFQgPyArTWF0aC5mbG9vcihUIC8gNDI5NDk2NzI5NikgPj4+IDAgOiB+fitNYXRoLmNlaWwoKFQgLSArKH5+VCA+Pj4gMCkpIC8gNDI5NDk2NzI5NikgPj4+IDAgOiAwKSksIGEgPj4+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcjogdGIsXG4gICAgICAgICAgICBzOiB1YixcbiAgICAgICAgICAgIHk6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gZSh2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2ID0gdi50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKSA/IHZbMV0gOiBcIkdNVFwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBoID0gKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKS5nZXRGdWxsWWVhcigpLCBnID0gbmV3IERhdGUoaCwgMCwgMSksIGsgPSBuZXcgRGF0ZShoLCA2LCAxKTtcbiAgICAgICAgICAgICAgaCA9IGcuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgdmFyIHQgPSBrLmdldFRpbWV6b25lT2Zmc2V0KCksIEMgPSBNYXRoLm1heChoLCB0KTtcbiAgICAgICAgICAgICAgcigpW2EgPj4gMiA+Pj4gMF0gPSA2MCAqIEM7XG4gICAgICAgICAgICAgIHAoKVtiID4+IDIgPj4+IDBdID0gTnVtYmVyKGggIT0gdCk7XG4gICAgICAgICAgICAgIGEgPSBlKGcpO1xuICAgICAgICAgICAgICBiID0gZShrKTtcbiAgICAgICAgICAgICAgYSA9IHdiKGEpO1xuICAgICAgICAgICAgICBiID0gd2IoYik7XG4gICAgICAgICAgICAgIHQgPCBoID8gKHIoKVtjID4+IDIgPj4+IDBdID0gYSwgcigpW2MgKyA0ID4+IDIgPj4+IDBdID0gYikgOiAocigpW2MgPj4gMiA+Pj4gMF0gPSBiLCByKClbYyArIDQgPj4gMiA+Pj4gMF0gPSBhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjOiAoKSA9PiB7XG4gICAgICAgICAgICAgIEsoXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG86ICgpID0+IHtcbiAgICAgICAgICAgICAgd2EgKz0gMTtcbiAgICAgICAgICAgICAgdGhyb3cgXCJ1bndpbmRcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBBOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDQyOTQ5MDE3NjA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZTogKCkgPT4gcGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlLm5vdygpLFxuICAgICAgICAgICAgZjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBCID8gKGluaXRfb3MoKSwgX190b0NvbW1vbkpTKG9zX2V4cG9ydHMpKS5jcHVzKCkubGVuZ3RoIDogbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSzogZnVuY3Rpb24oYSwgYiwgYywgZSkge1xuICAgICAgICAgICAgICBWLnZiID0gYiA+Pj4gMDtcbiAgICAgICAgICAgICAgQmIubGVuZ3RoID0gYztcbiAgICAgICAgICAgICAgYiA9IGUgPj4+IDAgPj4gMztcbiAgICAgICAgICAgICAgZm9yIChlID0gMDsgZSA8IGM7IGUrKylcbiAgICAgICAgICAgICAgICBCYltlXSA9IGVhKClbYiArIGUgPj4+IDBdO1xuICAgICAgICAgICAgICByZXR1cm4gVWJbYV0uYXBwbHkobnVsbCwgQmIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHg6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gbigpLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKGEgPD0gYiB8fCA0Mjk0OTAxNzYwIDwgYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyA0ID49IGM7IGMgKj0gMikge1xuICAgICAgICAgICAgICAgIHZhciBlID0gYiAqICgxICsgMC4yIC8gYyk7XG4gICAgICAgICAgICAgICAgZSA9IE1hdGgubWluKGUsIGEgKyAxMDA2NjMyOTYpO1xuICAgICAgICAgICAgICAgIHZhciBoID0gTWF0aDtcbiAgICAgICAgICAgICAgICBlID0gTWF0aC5tYXgoYSwgZSk7XG4gICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgaCA9IGgubWluLmNhbGwoaCwgNDI5NDkwMTc2MCwgZSArICg2NTUzNiAtIGUgJSA2NTUzNikgJSA2NTUzNikgLSBkLmJ1ZmZlci5ieXRlTGVuZ3RoICsgNjU1MzUgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZC5ncm93KGgpO1xuICAgICAgICAgICAgICAgICAgICBtKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGcgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE86IEZiLFxuICAgICAgICAgICAgUDogR2IsXG4gICAgICAgICAgICBIOiBOYSxcbiAgICAgICAgICAgIGc6IEhiLFxuICAgICAgICAgICAgbTogTGIsXG4gICAgICAgICAgICB3OiBNYixcbiAgICAgICAgICAgIGw6IE9iLFxuICAgICAgICAgICAgYTogZCB8fCB3Lndhc21NZW1vcnksXG4gICAgICAgICAgICBHOiBUYixcbiAgICAgICAgICAgIGQ6IGZ1bmN0aW9uKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFRiKGEgPj4+IDAsIGIgPj4+IDAsIGMgPj4+IDAsIGUgPj4+IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gYShjLCBlKSB7XG4gICAgICAgICAgICAgIGMgPSBjLmV4cG9ydHM7XG4gICAgICAgICAgICAgIEwgPSBjID0gWWIoYyk7XG4gICAgICAgICAgICAgIFYuWmEucHVzaChMLnlhKTtcbiAgICAgICAgICAgICAgc2EgPSBMLnphO1xuICAgICAgICAgICAgICB1YS51bnNoaWZ0KEwuVik7XG4gICAgICAgICAgICAgIHJhID0gZTtcbiAgICAgICAgICAgICAgemEoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYiA9IHsgYTogWGIgfTtcbiAgICAgICAgICAgIHlhKCk7XG4gICAgICAgICAgICBpZiAody5pbnN0YW50aWF0ZVdhc20pXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHcuaW5zdGFudGlhdGVXYXNtKGIsIGEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgSShcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiICsgYyksIHgoYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEVhKGIsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgYShjLmluc3RhbmNlLCBjLm1vZHVsZSk7XG4gICAgICAgICAgICB9KS5jYXRjaCh4KTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICB9KSgpO1xuICAgICAgICAgIHcuX09ydEluaXQgPSAoYSwgYikgPT4gKHcuX09ydEluaXQgPSBMLlcpKGEsIGIpO1xuICAgICAgICAgIHcuX09ydEdldExhc3RFcnJvciA9IChhLCBiKSA9PiAody5fT3J0R2V0TGFzdEVycm9yID0gTC5YKShhLCBiKTtcbiAgICAgICAgICB3Ll9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyA9IChhLCBiLCBjLCBlLCBoLCBnLCBrLCB0LCBDLCB2KSA9PiAody5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSBMLlkpKGEsIGIsIGMsIGUsIGgsIGcsIGssIHQsIEMsIHYpO1xuICAgICAgICAgIHcuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyID0gKGEsIGIpID0+ICh3Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IEwuWikoYSwgYik7XG4gICAgICAgICAgdy5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gKGEsIGIsIGMpID0+ICh3Ll9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUgPSBMLl8pKGEsIGIsIGMpO1xuICAgICAgICAgIHcuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IChhLCBiLCBjKSA9PiAody5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5ID0gTC4kKShhLCBiLCBjKTtcbiAgICAgICAgICB3Ll9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSAoYSkgPT4gKHcuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyA9IEwuYWEpKGEpO1xuICAgICAgICAgIHcuX09ydENyZWF0ZVNlc3Npb24gPSAoYSwgYiwgYykgPT4gKHcuX09ydENyZWF0ZVNlc3Npb24gPSBMLmJhKShhLCBiLCBjKTtcbiAgICAgICAgICB3Ll9PcnRSZWxlYXNlU2Vzc2lvbiA9IChhKSA9PiAody5fT3J0UmVsZWFzZVNlc3Npb24gPSBMLmNhKShhKTtcbiAgICAgICAgICB3Ll9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gKGEsIGIsIGMpID0+ICh3Ll9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gTC5kYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdy5fT3J0R2V0SW5wdXROYW1lID0gKGEsIGIpID0+ICh3Ll9PcnRHZXRJbnB1dE5hbWUgPSBMLmVhKShhLCBiKTtcbiAgICAgICAgICB3Ll9PcnRHZXRPdXRwdXROYW1lID0gKGEsIGIpID0+ICh3Ll9PcnRHZXRPdXRwdXROYW1lID0gTC5mYSkoYSwgYik7XG4gICAgICAgICAgdy5fT3J0RnJlZSA9IChhKSA9PiAody5fT3J0RnJlZSA9IEwuZ2EpKGEpO1xuICAgICAgICAgIHcuX09ydENyZWF0ZVRlbnNvciA9IChhLCBiLCBjLCBlLCBoLCBnKSA9PiAody5fT3J0Q3JlYXRlVGVuc29yID0gTC5oYSkoYSwgYiwgYywgZSwgaCwgZyk7XG4gICAgICAgICAgdy5fT3J0R2V0VGVuc29yRGF0YSA9IChhLCBiLCBjLCBlLCBoKSA9PiAody5fT3J0R2V0VGVuc29yRGF0YSA9IEwuaWEpKGEsIGIsIGMsIGUsIGgpO1xuICAgICAgICAgIHcuX09ydFJlbGVhc2VUZW5zb3IgPSAoYSkgPT4gKHcuX09ydFJlbGVhc2VUZW5zb3IgPSBMLmphKShhKTtcbiAgICAgICAgICB3Ll9PcnRDcmVhdGVSdW5PcHRpb25zID0gKGEsIGIsIGMsIGUpID0+ICh3Ll9PcnRDcmVhdGVSdW5PcHRpb25zID0gTC5rYSkoYSwgYiwgYywgZSk7XG4gICAgICAgICAgdy5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKHcuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gTC5sYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdy5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSAoYSkgPT4gKHcuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gTC5tYSkoYSk7XG4gICAgICAgICAgdy5fT3J0Q3JlYXRlQmluZGluZyA9IChhKSA9PiAody5fT3J0Q3JlYXRlQmluZGluZyA9IEwubmEpKGEpO1xuICAgICAgICAgIHcuX09ydEJpbmRJbnB1dCA9IChhLCBiLCBjKSA9PiAody5fT3J0QmluZElucHV0ID0gTC5vYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdy5fT3J0QmluZE91dHB1dCA9IChhLCBiLCBjLCBlKSA9PiAody5fT3J0QmluZE91dHB1dCA9IEwucGEpKGEsIGIsIGMsIGUpO1xuICAgICAgICAgIHcuX09ydENsZWFyQm91bmRPdXRwdXRzID0gKGEpID0+ICh3Ll9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IEwucWEpKGEpO1xuICAgICAgICAgIHcuX09ydFJlbGVhc2VCaW5kaW5nID0gKGEpID0+ICh3Ll9PcnRSZWxlYXNlQmluZGluZyA9IEwucmEpKGEpO1xuICAgICAgICAgIHcuX09ydFJ1bldpdGhCaW5kaW5nID0gKGEsIGIsIGMsIGUsIGgpID0+ICh3Ll9PcnRSdW5XaXRoQmluZGluZyA9IEwuc2EpKGEsIGIsIGMsIGUsIGgpO1xuICAgICAgICAgIHcuX09ydFJ1biA9IChhLCBiLCBjLCBlLCBoLCBnLCBrLCB0KSA9PiAody5fT3J0UnVuID0gTC50YSkoYSwgYiwgYywgZSwgaCwgZywgaywgdCk7XG4gICAgICAgICAgdy5fT3J0RW5kUHJvZmlsaW5nID0gKGEpID0+ICh3Ll9PcnRFbmRQcm9maWxpbmcgPSBMLnVhKShhKTtcbiAgICAgICAgICB2YXIgWCA9IHcuX3B0aHJlYWRfc2VsZiA9ICgpID0+IChYID0gdy5fcHRocmVhZF9zZWxmID0gTC52YSkoKSwgdmIgPSB3Ll9tYWxsb2MgPSAoYSkgPT4gKHZiID0gdy5fbWFsbG9jID0gTC53YSkoYSk7XG4gICAgICAgICAgdy5fZnJlZSA9IChhKSA9PiAody5fZnJlZSA9IEwueGEpKGEpO1xuICAgICAgICAgIHcuX19lbXNjcmlwdGVuX3Rsc19pbml0ID0gKCkgPT4gKHcuX19lbXNjcmlwdGVuX3Rsc19pbml0ID0gTC55YSkoKTtcbiAgICAgICAgICB2YXIgVmIgPSB3Ll9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IChhLCBiLCBjLCBlLCBoLCBnKSA9PiAoVmIgPSB3Ll9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IEwuQWEpKGEsIGIsIGMsIGUsIGgsIGcpO1xuICAgICAgICAgIHcuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gKCkgPT4gKHcuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gTC5CYSkoKTtcbiAgICAgICAgICB2YXIgQWIgPSAoYSwgYiwgYywgZSkgPT4gKEFiID0gTC5DYSkoYSwgYiwgYywgZSksIE9hID0gKGEpID0+IChPYSA9IEwuRGEpKGEpLCBUYSA9IHcuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gKGEpID0+IChUYSA9IHcuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gTC5FYSkoYSksIHFiID0gdy5fX2Vtc2NyaXB0ZW5fY2hlY2tfbWFpbGJveCA9ICgpID0+IChxYiA9IHcuX19lbXNjcmlwdGVuX2NoZWNrX21haWxib3ggPSBMLkZhKSgpLCBXYiA9IChhKSA9PiAoV2IgPSBMLkdhKShhKSwgUWEgPSAoYSwgYikgPT4gKFFhID0gTC5IYSkoYSwgYiksIHhiID0gKCkgPT4gKHhiID0gTC5JYSkoKSwgUmEgPSAoYSkgPT4gKFJhID0gTC5KYSkoYSksIHpiID0gKGEpID0+ICh6YiA9IEwuS2EpKGEpO1xuICAgICAgICAgIGZ1bmN0aW9uIFliKGEpIHtcbiAgICAgICAgICAgIGEgPSBPYmplY3QuYXNzaWduKHt9LCBhKTtcbiAgICAgICAgICAgIHZhciBiID0gKGUpID0+ICgpID0+IGUoKSA+Pj4gMCwgYyA9IChlKSA9PiAoaCkgPT4gZShoKSA+Pj4gMDtcbiAgICAgICAgICAgIGEuX19lcnJub19sb2NhdGlvbiA9IGIoYS5fX2Vycm5vX2xvY2F0aW9uKTtcbiAgICAgICAgICAgIGEucHRocmVhZF9zZWxmID0gYihhLnB0aHJlYWRfc2VsZik7XG4gICAgICAgICAgICBhLm1hbGxvYyA9IGMoYS5tYWxsb2MpO1xuICAgICAgICAgICAgYS5zdGFja1NhdmUgPSBiKGEuc3RhY2tTYXZlKTtcbiAgICAgICAgICAgIGEuc3RhY2tBbGxvYyA9IGMoYS5zdGFja0FsbG9jKTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3LmtlZXBSdW50aW1lQWxpdmUgPSBQO1xuICAgICAgICAgIHcud2FzbU1lbW9yeSA9IGQ7XG4gICAgICAgICAgdy5zdGFja0FsbG9jID0gemI7XG4gICAgICAgICAgdy5zdGFja1NhdmUgPSB4YjtcbiAgICAgICAgICB3LnN0YWNrUmVzdG9yZSA9IFJhO1xuICAgICAgICAgIHcuVVRGOFRvU3RyaW5nID0gS2E7XG4gICAgICAgICAgdy5zdHJpbmdUb1VURjggPSBjYjtcbiAgICAgICAgICB3Lmxlbmd0aEJ5dGVzVVRGOCA9IGFiO1xuICAgICAgICAgIHcuRXhpdFN0YXR1cyA9IFU7XG4gICAgICAgICAgdy5QVGhyZWFkID0gVjtcbiAgICAgICAgICB2YXIgWmI7XG4gICAgICAgICAgUiA9IGZ1bmN0aW9uICRiKCkge1xuICAgICAgICAgICAgWmIgfHwgYWMoKTtcbiAgICAgICAgICAgIFpiIHx8IChSID0gJGIpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gYWMoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhKCkge1xuICAgICAgICAgICAgICBpZiAoIVpiICYmIChaYiA9IHRydWUsIHcuY2FsbGVkUnVuID0gdHJ1ZSwgIU0pKSB7XG4gICAgICAgICAgICAgICAgRCB8fCBQYSh1YSk7XG4gICAgICAgICAgICAgICAgaGEodyk7XG4gICAgICAgICAgICAgICAgaWYgKHcub25SdW50aW1lSW5pdGlhbGl6ZWQpXG4gICAgICAgICAgICAgICAgICB3Lm9uUnVudGltZUluaXRpYWxpemVkKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFEKSB7XG4gICAgICAgICAgICAgICAgICBpZiAody5wb3N0UnVuKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygdy5wb3N0UnVuICYmICh3LnBvc3RSdW4gPSBbdy5wb3N0UnVuXSk7IHcucG9zdFJ1bi5sZW5ndGg7ICkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gdy5wb3N0UnVuLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgdmEudW5zaGlmdChiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgUGEodmEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoMCA8IFEpKVxuICAgICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgICBoYSh3KSwgRCB8fCBQYSh1YSksIHN0YXJ0V29ya2VyKHcpO1xuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAody5wcmVSdW4pXG4gICAgICAgICAgICAgICAgICBmb3IgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygdy5wcmVSdW4gJiYgKHcucHJlUnVuID0gW3cucHJlUnVuXSk7IHcucHJlUnVuLmxlbmd0aDsgKVxuICAgICAgICAgICAgICAgICAgICB0YS51bnNoaWZ0KHcucHJlUnVuLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIFBhKHRhKTtcbiAgICAgICAgICAgICAgICAwIDwgUSB8fCAody5zZXRTdGF0dXMgPyAody5zZXRTdGF0dXMoXCJSdW5uaW5nLi4uXCIpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdy5zZXRTdGF0dXMoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICAgICAgfSwgMSkpIDogYSgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAody5wcmVJbml0KVxuICAgICAgICAgICAgZm9yIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHcucHJlSW5pdCAmJiAody5wcmVJbml0ID0gW3cucHJlSW5pdF0pOyAwIDwgdy5wcmVJbml0Lmxlbmd0aDsgKVxuICAgICAgICAgICAgICB3LnByZUluaXQucG9wKCkoKTtcbiAgICAgICAgICBhYygpO1xuICAgICAgICAgIHJldHVybiBtb2R1bGVBcmcucmVhZHk7XG4gICAgICAgIH07XG4gICAgICB9KSgpO1xuICAgICAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gb3J0V2FzbVRocmVhZGVkO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVtcImFtZFwiXSlcbiAgICAgICAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtVGhyZWFkZWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gd2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXG4gIHZhciByZXF1aXJlX29ydF93YXNtX3RocmVhZGVkX3dvcmtlciA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIoZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9ICdcInVzZSBzdHJpY3RcIjt2YXIgTW9kdWxlPXt9O3ZhciBFTlZJUk9OTUVOVF9JU19OT0RFPXR5cGVvZiBwcm9jZXNzPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09XCJzdHJpbmdcIjtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXt2YXIgbm9kZVdvcmtlclRocmVhZHM9cmVxdWlyZShcIndvcmtlcl90aHJlYWRzXCIpO3ZhciBwYXJlbnRQb3J0PW5vZGVXb3JrZXJUaHJlYWRzLnBhcmVudFBvcnQ7cGFyZW50UG9ydC5vbihcIm1lc3NhZ2VcIixkYXRhPT5vbm1lc3NhZ2Uoe2RhdGE6ZGF0YX0pKTt2YXIgZnM9cmVxdWlyZShcImZzXCIpO09iamVjdC5hc3NpZ24oZ2xvYmFsLHtzZWxmOmdsb2JhbCxyZXF1aXJlOnJlcXVpcmUsTW9kdWxlOk1vZHVsZSxsb2NhdGlvbjp7aHJlZjpfX2ZpbGVuYW1lfSxXb3JrZXI6bm9kZVdvcmtlclRocmVhZHMuV29ya2VyLGltcG9ydFNjcmlwdHM6Zj0+KDAsZXZhbCkoZnMucmVhZEZpbGVTeW5jKGYsXCJ1dGY4XCIpK1wiLy8jIHNvdXJjZVVSTD1cIitmKSxwb3N0TWVzc2FnZTptc2c9PnBhcmVudFBvcnQucG9zdE1lc3NhZ2UobXNnKSxwZXJmb3JtYW5jZTpnbG9iYWwucGVyZm9ybWFuY2V8fHtub3c6RGF0ZS5ub3d9fSl9dmFyIGluaXRpYWxpemVkSlM9ZmFsc2U7ZnVuY3Rpb24gdGhyZWFkUHJpbnRFcnIoKXt2YXIgdGV4dD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oXCIgXCIpO2lmKEVOVklST05NRU5UX0lTX05PREUpe2ZzLndyaXRlU3luYygyLHRleHQrXCJcXFxcblwiKTtyZXR1cm59Y29uc29sZS5lcnJvcih0ZXh0KX1mdW5jdGlvbiB0aHJlYWRBbGVydCgpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7cG9zdE1lc3NhZ2Uoe2NtZDpcImFsZXJ0XCIsdGV4dDp0ZXh0LHRocmVhZElkOk1vZHVsZVtcIl9wdGhyZWFkX3NlbGZcIl0oKX0pfXZhciBlcnI9dGhyZWFkUHJpbnRFcnI7c2VsZi5hbGVydD10aHJlYWRBbGVydDtNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl09KGluZm8scmVjZWl2ZUluc3RhbmNlKT0+e3ZhciBtb2R1bGU9TW9kdWxlW1wid2FzbU1vZHVsZVwiXTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPW51bGw7dmFyIGluc3RhbmNlPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUsaW5mbyk7cmV0dXJuIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSl9O3NlbGYub251bmhhbmRsZWRyZWplY3Rpb249ZT0+e3Rocm93IGUucmVhc29uPz9lfTtmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGUpe3RyeXtpZihlLmRhdGEuY21kPT09XCJsb2FkXCIpe2xldCBtZXNzYWdlUXVldWU9W107c2VsZi5vbm1lc3NhZ2U9ZT0+bWVzc2FnZVF1ZXVlLnB1c2goZSk7c2VsZi5zdGFydFdvcmtlcj1pbnN0YW5jZT0+e01vZHVsZT1pbnN0YW5jZTtwb3N0TWVzc2FnZSh7XCJjbWRcIjpcImxvYWRlZFwifSk7Zm9yKGxldCBtc2cgb2YgbWVzc2FnZVF1ZXVlKXtoYW5kbGVNZXNzYWdlKG1zZyl9c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZX07TW9kdWxlW1wid2FzbU1vZHVsZVwiXT1lLmRhdGEud2FzbU1vZHVsZTtmb3IoY29uc3QgaGFuZGxlciBvZiBlLmRhdGEuaGFuZGxlcnMpe01vZHVsZVtoYW5kbGVyXT0oLi4uYXJncyk9Pntwb3N0TWVzc2FnZSh7Y21kOlwiY2FsbEhhbmRsZXJcIixoYW5kbGVyOmhhbmRsZXIsYXJnczphcmdzfSl9fU1vZHVsZVtcIndhc21NZW1vcnlcIl09ZS5kYXRhLndhc21NZW1vcnk7TW9kdWxlW1wiYnVmZmVyXCJdPU1vZHVsZVtcIndhc21NZW1vcnlcIl0uYnVmZmVyO01vZHVsZVtcIkVOVklST05NRU5UX0lTX1BUSFJFQURcIl09dHJ1ZTtpZih0eXBlb2YgZS5kYXRhLnVybE9yQmxvYj09XCJzdHJpbmdcIil7aW1wb3J0U2NyaXB0cyhlLmRhdGEudXJsT3JCbG9iKX1lbHNle3ZhciBvYmplY3RVcmw9VVJMLmNyZWF0ZU9iamVjdFVSTChlLmRhdGEudXJsT3JCbG9iKTtpbXBvcnRTY3JpcHRzKG9iamVjdFVybCk7VVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVcmwpfW9ydFdhc21UaHJlYWRlZChNb2R1bGUpfWVsc2UgaWYoZS5kYXRhLmNtZD09PVwicnVuXCIpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdFwiXShlLmRhdGEucHRocmVhZF9wdHIsLyppc01haW5Ccm93c2VyVGhyZWFkPSovMCwvKmlzTWFpblJ1bnRpbWVUaHJlYWQ9Ki8wLC8qY2FuQmxvY2s9Ki8xKTtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyKTtNb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdKCk7TW9kdWxlW1wiUFRocmVhZFwiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnRocmVhZEluaXRUTFMoKTtpZighaW5pdGlhbGl6ZWRKUyl7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtNb2R1bGVbXCJpbnZva2VFbnRyeVBvaW50XCJdKGUuZGF0YS5zdGFydF9yb3V0aW5lLGUuZGF0YS5hcmcpfWNhdGNoKGV4KXtpZihleCE9XCJ1bndpbmRcIil7dGhyb3cgZXh9fX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNhbmNlbFwiKXtpZihNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCkpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdFwiXSgtMSl9fWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe31lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJjaGVja01haWxib3hcIl0oKX19ZWxzZSBpZihlLmRhdGEuY21kKXtlcnIoXCJ3b3JrZXIuanMgcmVjZWl2ZWQgdW5rbm93biBjb21tYW5kIFwiK2UuZGF0YS5jbWQpO2VycihlLmRhdGEpfX1jYXRjaChleCl7aWYoTW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdKXtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWRcIl0oKX10aHJvdyBleH19c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZTtcXG4nO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpub2RlOnBhdGhcbiAgdmFyIGpvaW4gPSB2b2lkIDA7XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tZmFjdG9yeS50c1xuICB2YXIgb3J0V2FzbUZhY3Rvcnk7XG4gIGlmICh0cnVlKSB7XG4gICAgb3J0V2FzbUZhY3RvcnkgPSByZXF1aXJlX29ydF90cmFpbmluZ193YXNtX3NpbWQoKTtcbiAgfSBlbHNlIHtcbiAgICBvcnRXYXNtRmFjdG9yeSA9IHRydWUgPyBudWxsIDogbnVsbDtcbiAgfVxuICB2YXIgb3J0V2FzbUZhY3RvcnlUaHJlYWRlZCA9IHRydWUgPyB0cnVlID8gcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZCgpIDogbnVsbCA6IG9ydFdhc21GYWN0b3J5O1xuICB2YXIgd2FzbTtcbiAgdmFyIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHZhciBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgdmFyIGFib3J0ZWQgPSBmYWxzZTtcbiAgdmFyIGlzTXVsdGlUaHJlYWRTdXBwb3J0ZWQgPSAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBuZXcgTWVzc2FnZUNoYW5uZWwoKS5wb3J0MS5wb3N0TWVzc2FnZShuZXcgU2hhcmVkQXJyYXlCdWZmZXIoMSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFdlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgMCxcbiAgICAgICAgOTcsXG4gICAgICAgIDExNSxcbiAgICAgICAgMTA5LFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAxLFxuICAgICAgICA0LFxuICAgICAgICAxLFxuICAgICAgICA5NixcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMyxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgNSxcbiAgICAgICAgNCxcbiAgICAgICAgMSxcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMTAsXG4gICAgICAgIDExLFxuICAgICAgICAxLFxuICAgICAgICA5LFxuICAgICAgICAwLFxuICAgICAgICA2NSxcbiAgICAgICAgMCxcbiAgICAgICAgMjU0LFxuICAgICAgICAxNixcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMjYsXG4gICAgICAgIDExXG4gICAgICBdKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGlzU2ltZFN1cHBvcnRlZCA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFdlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgMCxcbiAgICAgICAgOTcsXG4gICAgICAgIDExNSxcbiAgICAgICAgMTA5LFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAxLFxuICAgICAgICA0LFxuICAgICAgICAxLFxuICAgICAgICA5NixcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMyxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMTAsXG4gICAgICAgIDMwLFxuICAgICAgICAxLFxuICAgICAgICAyOCxcbiAgICAgICAgMCxcbiAgICAgICAgNjUsXG4gICAgICAgIDAsXG4gICAgICAgIDI1MyxcbiAgICAgICAgMTUsXG4gICAgICAgIDI1MyxcbiAgICAgICAgMTIsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDI1MyxcbiAgICAgICAgMTg2LFxuICAgICAgICAxLFxuICAgICAgICAyNixcbiAgICAgICAgMTFcbiAgICAgIF0pKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0V2FzbUZpbGVOYW1lID0gKHVzZVNpbWQsIHVzZVRocmVhZHMpID0+IHtcbiAgICBpZiAodXNlU2ltZCkge1xuICAgICAgaWYgKHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFwib3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXNlVGhyZWFkcyA/IFwib3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtXCIgOiBcIm9ydC13YXNtLXNpbWQud2FzbVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXNlVGhyZWFkcyA/IFwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiIDogXCJvcnQtd2FzbS53YXNtXCI7XG4gICAgfVxuICB9O1xuICB2YXIgaW5pdGlhbGl6ZVdlYkFzc2VtYmx5ID0gYXN5bmMgKGZsYWdzKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIGNhbGxzIHRvICdpbml0aWFsaXplV2ViQXNzZW1ibHkoKScgZGV0ZWN0ZWQuXCIpO1xuICAgIH1cbiAgICBpZiAoYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJldmlvdXMgY2FsbCB0byAnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KCknIGZhaWxlZC5cIik7XG4gICAgfVxuICAgIGluaXRpYWxpemluZyA9IHRydWU7XG4gICAgY29uc3QgdGltZW91dCA9IGZsYWdzLmluaXRUaW1lb3V0O1xuICAgIGNvbnN0IG51bVRocmVhZHMgPSBmbGFncy5udW1UaHJlYWRzO1xuICAgIGNvbnN0IHNpbWQgPSBmbGFncy5zaW1kO1xuICAgIGNvbnN0IHVzZVRocmVhZHMgPSBudW1UaHJlYWRzID4gMSAmJiBpc011bHRpVGhyZWFkU3VwcG9ydGVkKCk7XG4gICAgY29uc3QgdXNlU2ltZCA9IHNpbWQgJiYgaXNTaW1kU3VwcG9ydGVkKCk7XG4gICAgY29uc3Qgd2FzbVBhdGhzID0gZmxhZ3Mud2FzbVBhdGhzO1xuICAgIGNvbnN0IHdhc21QcmVmaXhPdmVycmlkZSA9IHR5cGVvZiB3YXNtUGF0aHMgPT09IFwic3RyaW5nXCIgPyB3YXNtUGF0aHMgOiB2b2lkIDA7XG4gICAgY29uc3Qgd2FzbUZpbGVOYW1lID0gZ2V0V2FzbUZpbGVOYW1lKHVzZVNpbWQsIHVzZVRocmVhZHMpO1xuICAgIGNvbnN0IHdhc21QYXRoT3ZlcnJpZGUgPSB0eXBlb2Ygd2FzbVBhdGhzID09PSBcIm9iamVjdFwiID8gd2FzbVBhdGhzW3dhc21GaWxlTmFtZV0gOiB2b2lkIDA7XG4gICAgbGV0IGlzVGltZW91dCA9IGZhbHNlO1xuICAgIGNvbnN0IHRhc2tzID0gW107XG4gICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlzVGltZW91dCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgdGFza3MucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBmYWN0b3J5ID0gdXNlVGhyZWFkcyA/IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQgOiBvcnRXYXNtRmFjdG9yeTtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgbG9jYXRlRmlsZTogKGZpbGVOYW1lLCBzY3JpcHREaXJlY3RvcnkpID0+IHtcbiAgICAgICAgICBpZiAodXNlVGhyZWFkcyAmJiBmaWxlTmFtZS5lbmRzV2l0aChcIi53b3JrZXIuanNcIikgJiYgdHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgLy8gVGhpcyByZXF1aXJlKCkgZnVuY3Rpb24gaXMgaGFuZGxlZCBieSBlc2J1aWxkIHBsdWdpbiB0byBsb2FkIGZpbGUgY29udGVudCBhcyBzdHJpbmcuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgICAgICAgICByZXF1aXJlX29ydF93YXNtX3RocmVhZGVkX3dvcmtlcigpXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHsgdHlwZTogXCJ0ZXh0L2phdmFzY3JpcHRcIiB9XG4gICAgICAgICAgICApKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpbGVOYW1lLmVuZHNXaXRoKFwiLndhc21cIikpIHtcbiAgICAgICAgICAgIGlmICh3YXNtUGF0aE92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB3YXNtUGF0aE92ZXJyaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gd2FzbVByZWZpeE92ZXJyaWRlID8/IHNjcmlwdERpcmVjdG9yeTtcbiAgICAgICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgICAgICBpZiAod2FzbUZpbGVOYW1lID09PSBcIm9ydC13YXNtLXNpbWQud2FzbVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIFwib3J0LXdhc20tc2ltZC5qc2VwLndhc21cIjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXNtRmlsZU5hbWUgPT09IFwib3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgXCJvcnQtd2FzbS1zaW1kLXRocmVhZGVkLmpzZXAud2FzbVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgd2FzbUZpbGVOYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2NyaXB0RGlyZWN0b3J5ICsgZmlsZU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAodXNlVGhyZWFkcykge1xuICAgICAgICBpZiAodHlwZW9mIEJsb2IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBjb25maWcubWFpblNjcmlwdFVybE9yQmxvYiA9IGpvaW4oX19kaXJuYW1lLCBcIm9ydC13YXNtLXRocmVhZGVkLmpzXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNjcmlwdFNvdXJjZUNvZGUgPSBgdmFyIG9ydFdhc21UaHJlYWRlZD0ke2ZhY3RvcnkudG9TdHJpbmcoKX07YDtcbiAgICAgICAgICBjb25maWcubWFpblNjcmlwdFVybE9yQmxvYiA9IG5ldyBCbG9iKFtzY3JpcHRTb3VyY2VDb2RlXSwgeyB0eXBlOiBcInRleHQvamF2YXNjcmlwdFwiIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmYWN0b3J5KGNvbmZpZykudGhlbihcbiAgICAgICAgLy8gd2FzbSBtb2R1bGUgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgIChtb2R1bGUpID0+IHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgd2FzbSA9IG1vZHVsZTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHdhc20gbW9kdWxlIGZhaWxlZCB0byBpbml0aWFsaXplXG4gICAgICAgICh3aGF0KSA9PiB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgcmVqZWN0KHdoYXQpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pKTtcbiAgICBhd2FpdCBQcm9taXNlLnJhY2UodGFza3MpO1xuICAgIGlmIChpc1RpbWVvdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgV2ViQXNzZW1ibHkgYmFja2VuZCBpbml0aWFsaXppbmcgZmFpbGVkIGR1ZSB0byB0aW1lb3V0OiAke3RpbWVvdXR9bXNgKTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRJbnN0YW5jZSA9ICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgd2FzbSkge1xuICAgICAgcmV0dXJuIHdhc207XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIldlYkFzc2VtYmx5IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQuXCIpO1xuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLXV0aWxzLnRzXG4gIHZhciBhbGxvY1dhc21TdHJpbmcgPSAoZGF0YSwgYWxsb2NzKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IGRhdGFMZW5ndGggPSB3YXNtMi5sZW5ndGhCeXRlc1VURjgoZGF0YSkgKyAxO1xuICAgIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtMi5fbWFsbG9jKGRhdGFMZW5ndGgpO1xuICAgIHdhc20yLnN0cmluZ1RvVVRGOChkYXRhLCBkYXRhT2Zmc2V0LCBkYXRhTGVuZ3RoKTtcbiAgICBhbGxvY3MucHVzaChkYXRhT2Zmc2V0KTtcbiAgICByZXR1cm4gZGF0YU9mZnNldDtcbiAgfTtcbiAgdmFyIGl0ZXJhdGVFeHRyYU9wdGlvbnMgPSAob3B0aW9ucywgcHJlZml4LCBzZWVuLCBoYW5kbGVyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwib2JqZWN0XCIgJiYgb3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNlZW4uaGFzKG9wdGlvbnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNpcmN1bGFyIHJlZmVyZW5jZSBpbiBvcHRpb25zXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Vlbi5hZGQob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IHByZWZpeCA/IHByZWZpeCArIGtleSA6IGtleTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyh2YWx1ZSwgbmFtZSArIFwiLlwiLCBzZWVuLCBoYW5kbGVyKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBoYW5kbGVyKG5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIGhhbmRsZXIobmFtZSwgdmFsdWUgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgaGFuZGxlIGV4dHJhIGNvbmZpZyB0eXBlOiAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgdmFyIGNoZWNrTGFzdEVycm9yID0gKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyYW1zT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyg4KTtcbiAgICAgIHdhc20yLl9PcnRHZXRMYXN0RXJyb3IocGFyYW1zT2Zmc2V0LCBwYXJhbXNPZmZzZXQgKyA0KTtcbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20yLkhFQVAzMltwYXJhbXNPZmZzZXQgLyA0XTtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZVBvaW50ZXIgPSB3YXNtMi5IRUFQVTMyW3BhcmFtc09mZnNldCAvIDQgKyAxXTtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZVBvaW50ZXIgPyB3YXNtMi5VVEY4VG9TdHJpbmcoZXJyb3JNZXNzYWdlUG9pbnRlcikgOiBcIlwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21lc3NhZ2V9IEVSUk9SX0NPREU6ICR7ZXJyb3JDb2RlfSwgRVJST1JfTUVTU0FHRTogJHtlcnJvck1lc3NhZ2V9YCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHdhc20yLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS9ydW4tb3B0aW9ucy50c1xuICB2YXIgc2V0UnVuT3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgICBjb25zdCBhbGxvY3MgPSBbXTtcbiAgICBjb25zdCBydW5PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0cnkge1xuICAgICAgaWYgKG9wdGlvbnM/LmxvZ1NldmVyaXR5TGV2ZWwgPT09IHZvaWQgMCkge1xuICAgICAgICBydW5PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPSAyO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCkgfHwgb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsIDwgMCB8fCBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPiA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHNlcnZlcml0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dTZXZlcml0eUxldmVsfWApO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnM/LmxvZ1ZlcmJvc2l0eUxldmVsID09PSB2b2lkIDApIHtcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbH1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zPy50ZXJtaW5hdGUgPT09IHZvaWQgMCkge1xuICAgICAgICBydW5PcHRpb25zLnRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgbGV0IHRhZ0RhdGFPZmZzZXQgPSAwO1xuICAgICAgaWYgKG9wdGlvbnM/LnRhZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHRhZ0RhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcob3B0aW9ucy50YWcsIGFsbG9jcyk7XG4gICAgICB9XG4gICAgICBydW5PcHRpb25zSGFuZGxlID0gd2FzbTIuX09ydENyZWF0ZVJ1bk9wdGlvbnMoXG4gICAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCxcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCxcbiAgICAgICAgISFydW5PcHRpb25zLnRlcm1pbmF0ZSxcbiAgICAgICAgdGFnRGF0YU9mZnNldFxuICAgICAgKTtcbiAgICAgIGlmIChydW5PcHRpb25zSGFuZGxlID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgY3JlYXRlIHJ1biBvcHRpb25zLlwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zPy5leHRyYSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMob3B0aW9ucy5leHRyYSwgXCJcIiwgLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCksIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHZhbHVlLCBhbGxvY3MpO1xuICAgICAgICAgIGlmICh3YXNtMi5fT3J0QWRkUnVuQ29uZmlnRW50cnkocnVuT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHJ1biBjb25maWcgZW50cnk6ICR7a2V5fSAtICR7dmFsdWV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3J1bk9wdGlvbnNIYW5kbGUsIGFsbG9jc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgICAgfVxuICAgICAgYWxsb2NzLmZvckVhY2goKGFsbG9jKSA9PiB3YXNtMi5fZnJlZShhbGxvYykpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3Nlc3Npb24tb3B0aW9ucy50c1xuICB2YXIgZ2V0R3JhcGhPcHRpbXphdGlvbkxldmVsID0gKGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwpID0+IHtcbiAgICBzd2l0Y2ggKGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwpIHtcbiAgICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgXCJiYXNpY1wiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgXCJleHRlbmRlZFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGNhc2UgXCJhbGxcIjpcbiAgICAgICAgcmV0dXJuIDk5O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBncmFwaCBvcHRpbWl6YXRpb24gbGV2ZWw6ICR7Z3JhcGhPcHRpbWl6YXRpb25MZXZlbH1gKTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRFeGVjdXRpb25Nb2RlID0gKGV4ZWN1dGlvbk1vZGUpID0+IHtcbiAgICBzd2l0Y2ggKGV4ZWN1dGlvbk1vZGUpIHtcbiAgICAgIGNhc2UgXCJzZXF1ZW50aWFsXCI6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSBcInBhcmFsbGVsXCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBleGVjdXRpb24gbW9kZTogJHtleGVjdXRpb25Nb2RlfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFwcGVuZERlZmF1bHRPcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMuZXh0cmEpIHtcbiAgICAgIG9wdGlvbnMuZXh0cmEgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmV4dHJhLnNlc3Npb24pIHtcbiAgICAgIG9wdGlvbnMuZXh0cmEuc2Vzc2lvbiA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBzZXNzaW9uID0gb3B0aW9ucy5leHRyYS5zZXNzaW9uO1xuICAgIGlmICghc2Vzc2lvbi51c2Vfb3J0X21vZGVsX2J5dGVzX2RpcmVjdGx5KSB7XG4gICAgICBzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkgPSBcIjFcIjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzICYmIG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzLnNvbWUoKGVwKSA9PiAodHlwZW9mIGVwID09PSBcInN0cmluZ1wiID8gZXAgOiBlcC5uYW1lKSA9PT0gXCJ3ZWJncHVcIikpIHtcbiAgICAgIG9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHNldEV4ZWN1dGlvblByb3ZpZGVycyA9IChzZXNzaW9uT3B0aW9uc0hhbmRsZSwgZXhlY3V0aW9uUHJvdmlkZXJzLCBhbGxvY3MpID0+IHtcbiAgICBmb3IgKGNvbnN0IGVwIG9mIGV4ZWN1dGlvblByb3ZpZGVycykge1xuICAgICAgbGV0IGVwTmFtZSA9IHR5cGVvZiBlcCA9PT0gXCJzdHJpbmdcIiA/IGVwIDogZXAubmFtZTtcbiAgICAgIHN3aXRjaCAoZXBOYW1lKSB7XG4gICAgICAgIGNhc2UgXCJ4bm5wYWNrXCI6XG4gICAgICAgICAgZXBOYW1lID0gXCJYTk5QQUNLXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ3ZWJublwiOlxuICAgICAgICAgIGVwTmFtZSA9IFwiV0VCTk5cIjtcbiAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCB3ZWJubk9wdGlvbnMgPSBlcDtcbiAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/LmRldmljZVR5cGUpIHtcbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcImRldmljZVR5cGVcIiwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYm5uT3B0aW9ucy5kZXZpY2VUeXBlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAnZGV2aWNlVHlwZScgLSAke3dlYm5uT3B0aW9ucy5kZXZpY2VUeXBlfS5gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdlYm5uT3B0aW9ucz8ubnVtVGhyZWFkcykge1xuICAgICAgICAgICAgICBsZXQgbnVtVGhyZWFkcyA9IHdlYm5uT3B0aW9ucy5udW1UaHJlYWRzO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG51bVRocmVhZHMgIT0gXCJudW1iZXJcIiB8fCAhTnVtYmVyLmlzSW50ZWdlcihudW1UaHJlYWRzKSB8fCBudW1UaHJlYWRzIDwgMCkge1xuICAgICAgICAgICAgICAgIG51bVRocmVhZHMgPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoXCJudW1UaHJlYWRzXCIsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhudW1UaHJlYWRzLnRvU3RyaW5nKCksIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdudW1UaHJlYWRzJyAtICR7d2Vibm5PcHRpb25zLm51bVRocmVhZHN9LmApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5wb3dlclByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcInBvd2VyUHJlZmVyZW5jZVwiLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcod2Vibm5PcHRpb25zLnBvd2VyUHJlZmVyZW5jZSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAncG93ZXJQcmVmZXJlbmNlJyAtICR7d2Vibm5PcHRpb25zLnBvd2VyUHJlZmVyZW5jZX0uYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ3ZWJncHVcIjpcbiAgICAgICAgICBlcE5hbWUgPSBcIkpTXCI7XG4gICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3Qgd2ViZ3B1T3B0aW9ucyA9IGVwO1xuICAgICAgICAgICAgaWYgKHdlYmdwdU9wdGlvbnM/LnByZWZlcnJlZExheW91dCkge1xuICAgICAgICAgICAgICBpZiAod2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXQgIT09IFwiTkNIV1wiICYmIHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0ICE9PSBcIk5IV0NcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJlZmVycmVkTGF5b3V0IG11c3QgYmUgZWl0aGVyICdOQ0hXJyBvciAnTkhXQyc6ICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9YCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcInByZWZlcnJlZExheW91dFwiLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcod2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXQsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihcbiAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3ByZWZlcnJlZExheW91dCcgLSAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndhc21cIjpcbiAgICAgICAgY2FzZSBcImNwdVwiOlxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbm90IHN1cHBvcnRlZCBleGVjdXRpb24gcHJvdmlkZXI6ICR7ZXBOYW1lfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgZXBOYW1lRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhlcE5hbWUsIGFsbG9jcyk7XG4gICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXIoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGVwTmFtZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhcHBlbmQgZXhlY3V0aW9uIHByb3ZpZGVyOiAke2VwTmFtZX0uYCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgc2V0U2Vzc2lvbk9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBsZXQgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGNvbnN0IGFsbG9jcyA9IFtdO1xuICAgIGNvbnN0IHNlc3Npb25PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBhcHBlbmREZWZhdWx0T3B0aW9ucyhzZXNzaW9uT3B0aW9ucyk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwgPSBnZXRHcmFwaE9wdGltemF0aW9uTGV2ZWwoc2Vzc2lvbk9wdGlvbnMuZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA/PyBcImFsbFwiKTtcbiAgICAgIGNvbnN0IGV4ZWN1dGlvbk1vZGUgPSBnZXRFeGVjdXRpb25Nb2RlKHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvbk1vZGUgPz8gXCJzZXF1ZW50aWFsXCIpO1xuICAgICAgY29uc3QgbG9nSWREYXRhT2Zmc2V0ID0gdHlwZW9mIHNlc3Npb25PcHRpb25zLmxvZ0lkID09PSBcInN0cmluZ1wiID8gYWxsb2NXYXNtU3RyaW5nKHNlc3Npb25PcHRpb25zLmxvZ0lkLCBhbGxvY3MpIDogMDtcbiAgICAgIGNvbnN0IGxvZ1NldmVyaXR5TGV2ZWwgPSBzZXNzaW9uT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsID8/IDI7XG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nU2V2ZXJpdHlMZXZlbCkgfHwgbG9nU2V2ZXJpdHlMZXZlbCA8IDAgfHwgbG9nU2V2ZXJpdHlMZXZlbCA+IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dTZXZlcml0eUxldmVsfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgbG9nVmVyYm9zaXR5TGV2ZWwgPSBzZXNzaW9uT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCA/PyAwO1xuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGxvZ1ZlcmJvc2l0eUxldmVsKSB8fCBsb2dWZXJib3NpdHlMZXZlbCA8IDAgfHwgbG9nVmVyYm9zaXR5TGV2ZWwgPiA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoT2Zmc2V0ID0gdHlwZW9mIHNlc3Npb25PcHRpb25zLm9wdGltaXplZE1vZGVsRmlsZVBhdGggPT09IFwic3RyaW5nXCIgPyBhbGxvY1dhc21TdHJpbmcoc2Vzc2lvbk9wdGlvbnMub3B0aW1pemVkTW9kZWxGaWxlUGF0aCwgYWxsb2NzKSA6IDA7XG4gICAgICBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IHdhc20yLl9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyhcbiAgICAgICAgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVDcHVNZW1BcmVuYSxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVNZW1QYXR0ZXJuLFxuICAgICAgICBleGVjdXRpb25Nb2RlLFxuICAgICAgICAhIXNlc3Npb25PcHRpb25zLmVuYWJsZVByb2ZpbGluZyxcbiAgICAgICAgMCxcbiAgICAgICAgbG9nSWREYXRhT2Zmc2V0LFxuICAgICAgICBsb2dTZXZlcml0eUxldmVsLFxuICAgICAgICBsb2dWZXJib3NpdHlMZXZlbCxcbiAgICAgICAgb3B0aW1pemVkTW9kZWxGaWxlUGF0aE9mZnNldFxuICAgICAgKTtcbiAgICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGNyZWF0ZSBzZXNzaW9uIG9wdGlvbnMuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycykge1xuICAgICAgICBzZXRFeGVjdXRpb25Qcm92aWRlcnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycywgYWxsb2NzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXNzaW9uT3B0aW9ucy5mcmVlRGltZW5zaW9uT3ZlcnJpZGVzKSB7XG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzZXNzaW9uT3B0aW9ucy5mcmVlRGltZW5zaW9uT3ZlcnJpZGVzKSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZSBuYW1lIG11c3QgYmUgYSBzdHJpbmc6ICR7bmFtZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIiB8fCAhTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIHZhbHVlIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbmFtZU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhuYW1lLCBhbGxvY3MpO1xuICAgICAgICAgIGlmICh3YXNtMi5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlKHNlc3Npb25PcHRpb25zSGFuZGxlLCBuYW1lT2Zmc2V0LCB2YWx1ZSkgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZTogJHtuYW1lfSAtICR7dmFsdWV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlc3Npb25PcHRpb25zLmV4dHJhICE9PSB2b2lkIDApIHtcbiAgICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyhzZXNzaW9uT3B0aW9ucy5leHRyYSwgXCJcIiwgLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCksIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHZhbHVlLCBhbGxvY3MpO1xuICAgICAgICAgIGlmICh3YXNtMi5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICR7a2V5fSAtICR7dmFsdWV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3Nlc3Npb25PcHRpb25zSGFuZGxlLCBhbGxvY3NdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGFsbG9jcy5mb3JFYWNoKChhbGxvYykgPT4gd2FzbTIuX2ZyZWUoYWxsb2MpKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLWNvbW1vbi50c1xuICB2YXIgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0gPSAodHlwZSkgPT4ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImludDhcIjpcbiAgICAgICAgcmV0dXJuIDMgLyogaW50OCAqLztcbiAgICAgIGNhc2UgXCJ1aW50OFwiOlxuICAgICAgICByZXR1cm4gMiAvKiB1aW50OCAqLztcbiAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgIHJldHVybiA5IC8qIGJvb2wgKi87XG4gICAgICBjYXNlIFwiaW50MTZcIjpcbiAgICAgICAgcmV0dXJuIDUgLyogaW50MTYgKi87XG4gICAgICBjYXNlIFwidWludDE2XCI6XG4gICAgICAgIHJldHVybiA0IC8qIHVpbnQxNiAqLztcbiAgICAgIGNhc2UgXCJpbnQzMlwiOlxuICAgICAgICByZXR1cm4gNiAvKiBpbnQzMiAqLztcbiAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgcmV0dXJuIDEyIC8qIHVpbnQzMiAqLztcbiAgICAgIGNhc2UgXCJmbG9hdDE2XCI6XG4gICAgICAgIHJldHVybiAxMCAvKiBmbG9hdDE2ICovO1xuICAgICAgY2FzZSBcImZsb2F0MzJcIjpcbiAgICAgICAgcmV0dXJuIDEgLyogZmxvYXQgKi87XG4gICAgICBjYXNlIFwiZmxvYXQ2NFwiOlxuICAgICAgICByZXR1cm4gMTEgLyogZG91YmxlICovO1xuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICByZXR1cm4gOCAvKiBzdHJpbmcgKi87XG4gICAgICBjYXNlIFwiaW50NjRcIjpcbiAgICAgICAgcmV0dXJuIDcgLyogaW50NjQgKi87XG4gICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgIHJldHVybiAxMyAvKiB1aW50NjQgKi87XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRlbnNvckRhdGFUeXBlRW51bVRvU3RyaW5nID0gKHR5cGVQcm90bykgPT4ge1xuICAgIHN3aXRjaCAodHlwZVByb3RvKSB7XG4gICAgICBjYXNlIDMgLyogaW50OCAqLzpcbiAgICAgICAgcmV0dXJuIFwiaW50OFwiO1xuICAgICAgY2FzZSAyIC8qIHVpbnQ4ICovOlxuICAgICAgICByZXR1cm4gXCJ1aW50OFwiO1xuICAgICAgY2FzZSA5IC8qIGJvb2wgKi86XG4gICAgICAgIHJldHVybiBcImJvb2xcIjtcbiAgICAgIGNhc2UgNSAvKiBpbnQxNiAqLzpcbiAgICAgICAgcmV0dXJuIFwiaW50MTZcIjtcbiAgICAgIGNhc2UgNCAvKiB1aW50MTYgKi86XG4gICAgICAgIHJldHVybiBcInVpbnQxNlwiO1xuICAgICAgY2FzZSA2IC8qIGludDMyICovOlxuICAgICAgICByZXR1cm4gXCJpbnQzMlwiO1xuICAgICAgY2FzZSAxMiAvKiB1aW50MzIgKi86XG4gICAgICAgIHJldHVybiBcInVpbnQzMlwiO1xuICAgICAgY2FzZSAxMCAvKiBmbG9hdDE2ICovOlxuICAgICAgICByZXR1cm4gXCJmbG9hdDE2XCI7XG4gICAgICBjYXNlIDEgLyogZmxvYXQgKi86XG4gICAgICAgIHJldHVybiBcImZsb2F0MzJcIjtcbiAgICAgIGNhc2UgMTEgLyogZG91YmxlICovOlxuICAgICAgICByZXR1cm4gXCJmbG9hdDY0XCI7XG4gICAgICBjYXNlIDggLyogc3RyaW5nICovOlxuICAgICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICAgIGNhc2UgNyAvKiBpbnQ2NCAqLzpcbiAgICAgICAgcmV0dXJuIFwiaW50NjRcIjtcbiAgICAgIGNhc2UgMTMgLyogdWludDY0ICovOlxuICAgICAgICByZXR1cm4gXCJ1aW50NjRcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGVQcm90b31gKTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRUZW5zb3JFbGVtZW50U2l6ZSA9IChkYXRlVHlwZSkgPT4gW3ZvaWQgMCwgNCwgMSwgMSwgMiwgMiwgNCwgOCwgdm9pZCAwLCAxLCAyLCA4LCA0LCA4LCB2b2lkIDAsIHZvaWQgMCwgdm9pZCAwXVtkYXRlVHlwZV07XG4gIHZhciB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IgPSAodHlwZSkgPT4ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImZsb2F0MTZcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuICAgICAgY2FzZSBcImZsb2F0MzJcIjpcbiAgICAgICAgcmV0dXJuIEZsb2F0MzJBcnJheTtcbiAgICAgIGNhc2UgXCJ1aW50OFwiOlxuICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgIGNhc2UgXCJpbnQ4XCI6XG4gICAgICAgIHJldHVybiBJbnQ4QXJyYXk7XG4gICAgICBjYXNlIFwidWludDE2XCI6XG4gICAgICAgIHJldHVybiBVaW50MTZBcnJheTtcbiAgICAgIGNhc2UgXCJpbnQxNlwiOlxuICAgICAgICByZXR1cm4gSW50MTZBcnJheTtcbiAgICAgIGNhc2UgXCJpbnQzMlwiOlxuICAgICAgICByZXR1cm4gSW50MzJBcnJheTtcbiAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5O1xuICAgICAgY2FzZSBcImZsb2F0NjRcIjpcbiAgICAgICAgcmV0dXJuIEZsb2F0NjRBcnJheTtcbiAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQzMkFycmF5O1xuICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgIHJldHVybiBCaWdJbnQ2NEFycmF5O1xuICAgICAgY2FzZSBcInVpbnQ2NFwiOlxuICAgICAgICByZXR1cm4gQmlnVWludDY0QXJyYXk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIHR5cGU6ICR7dHlwZX1gKTtcbiAgICB9XG4gIH07XG4gIHZhciBsb2dMZXZlbFN0cmluZ1RvRW51bSA9IChsb2dMZXZlbCkgPT4ge1xuICAgIHN3aXRjaCAobG9nTGV2ZWwpIHtcbiAgICAgIGNhc2UgXCJ2ZXJib3NlXCI6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSBcImluZm9cIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwid2FybmluZ1wiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICByZXR1cm4gMztcbiAgICAgIGNhc2UgXCJmYXRhbFwiOlxuICAgICAgICByZXR1cm4gNDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgbG9nZ2luZyBsZXZlbDogJHtsb2dMZXZlbH1gKTtcbiAgICB9XG4gIH07XG4gIHZhciBpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUgPSAodHlwZSkgPT4gdHlwZSA9PT0gXCJmbG9hdDMyXCIgfHwgdHlwZSA9PT0gXCJpbnQzMlwiIHx8IHR5cGUgPT09IFwiaW50NjRcIiB8fCB0eXBlID09PSBcImJvb2xcIiB8fCB0eXBlID09PSBcImZsb2F0MTZcIiB8fCB0eXBlID09PSBcInVpbnQzMlwiO1xuICB2YXIgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtID0gKGxvY2F0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChsb2NhdGlvbikge1xuICAgICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwiY3B1XCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBcImNwdS1waW5uZWRcIjpcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICBjYXNlIFwidGV4dHVyZVwiOlxuICAgICAgICByZXR1cm4gMztcbiAgICAgIGNhc2UgXCJncHUtYnVmZmVyXCI6XG4gICAgICAgIHJldHVybiA0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIGxvY2F0aW9uOiAke2xvY2F0aW9ufWApO1xuICAgIH1cbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vd2FzbS1jb3JlLWltcGwudHNcbiAgdmFyIG9ydEVudkluaXRpYWxpemVkID0gZmFsc2U7XG4gIHZhciBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudCA9IChzZXNzaW9uSGFuZGxlKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDgpO1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbTIuX09ydEdldElucHV0T3V0cHV0Q291bnQoc2Vzc2lvbkhhbmRsZSwgZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIDQpO1xuICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGdldCBzZXNzaW9uIGlucHV0L291dHB1dCBjb3VudC5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3dhc20yLkhFQVAzMltkYXRhT2Zmc2V0IC8gNF0sIHdhc20yLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbml0T3J0ID0gKG51bVRocmVhZHMsIGxvZ2dpbmdMZXZlbCkgPT4ge1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IGdldEluc3RhbmNlKCkuX09ydEluaXQobnVtVGhyZWFkcywgbG9nZ2luZ0xldmVsKTtcbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGluaXRpYWxpemUgb25ueHJ1bnRpbWUuXCIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluaXRSdW50aW1lID0gYXN5bmMgKGVudikgPT4ge1xuICAgIGluaXRPcnQoZW52Lndhc20ubnVtVGhyZWFkcywgbG9nTGV2ZWxTdHJpbmdUb0VudW0oZW52LmxvZ0xldmVsKSk7XG4gICAgaWYgKGZhbHNlKSB7XG4gICAgICBjb25zdCBpbml0SnNlcCA9IG51bGwuaW5pdDtcbiAgICAgIGF3YWl0IGluaXRKc2VwKGdldEluc3RhbmNlKCksIGVudik7XG4gICAgfVxuICAgIG9ydEVudkluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfTtcbiAgdmFyIGFjdGl2ZVNlc3Npb25zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgdmFyIGlzT3J0RW52SW5pdGlhbGl6ZWQgPSAoKSA9PiBvcnRFbnZJbml0aWFsaXplZDtcbiAgdmFyIGNyZWF0ZVNlc3Npb25BbGxvY2F0ZSA9IChtb2RlbCkgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBtb2RlbERhdGFPZmZzZXQgPSB3YXNtMi5fbWFsbG9jKG1vZGVsLmJ5dGVMZW5ndGgpO1xuICAgIGlmIChtb2RlbERhdGFPZmZzZXQgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgY3JlYXRlIGEgc2Vzc2lvbi4gZmFpbGVkIHRvIGFsbG9jYXRlIGEgYnVmZmVyIG9mIHNpemUgJHttb2RlbC5ieXRlTGVuZ3RofS5gKTtcbiAgICB9XG4gICAgd2FzbTIuSEVBUFU4LnNldChtb2RlbCwgbW9kZWxEYXRhT2Zmc2V0KTtcbiAgICByZXR1cm4gW21vZGVsRGF0YU9mZnNldCwgbW9kZWwuYnl0ZUxlbmd0aF07XG4gIH07XG4gIHZhciBjcmVhdGVTZXNzaW9uRmluYWxpemUgPSAobW9kZWxEYXRhLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGxldCBzZXNzaW9uSGFuZGxlID0gMDtcbiAgICBsZXQgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGxldCBpb0JpbmRpbmdIYW5kbGUgPSAwO1xuICAgIGxldCBhbGxvY3MgPSBbXTtcbiAgICBjb25zdCBpbnB1dE5hbWVzVVRGOEVuY29kZWQgPSBbXTtcbiAgICBjb25zdCBvdXRwdXROYW1lc1VURjhFbmNvZGVkID0gW107XG4gICAgdHJ5IHtcbiAgICAgIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXSA9IHNldFNlc3Npb25PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgc2Vzc2lvbkhhbmRsZSA9IHdhc20yLl9PcnRDcmVhdGVTZXNzaW9uKG1vZGVsRGF0YVswXSwgbW9kZWxEYXRhWzFdLCBzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICBpZiAoc2Vzc2lvbkhhbmRsZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGNyZWF0ZSBhIHNlc3Npb24uXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgW2lucHV0Q291bnQsIG91dHB1dENvdW50XSA9IGdldFNlc3Npb25JbnB1dE91dHB1dENvdW50KHNlc3Npb25IYW5kbGUpO1xuICAgICAgY29uc3QgaW5wdXROYW1lcyA9IFtdO1xuICAgICAgY29uc3Qgb3V0cHV0TmFtZXMgPSBbXTtcbiAgICAgIGNvbnN0IG91dHB1dFByZWZlcnJlZExvY2F0aW9ucyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHdhc20yLl9PcnRHZXRJbnB1dE5hbWUoc2Vzc2lvbkhhbmRsZSwgaSk7XG4gICAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBnZXQgYW4gaW5wdXQgbmFtZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLnB1c2gobmFtZSk7XG4gICAgICAgIGlucHV0TmFtZXMucHVzaCh3YXNtMi5VVEY4VG9TdHJpbmcobmFtZSkpO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtMi5fT3J0R2V0T3V0cHV0TmFtZShzZXNzaW9uSGFuZGxlLCBpKTtcbiAgICAgICAgaWYgKG5hbWUgPT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGdldCBhbiBvdXRwdXQgbmFtZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5wdXNoKG5hbWUpO1xuICAgICAgICBjb25zdCBuYW1lU3RyaW5nID0gd2FzbTIuVVRGOFRvU3RyaW5nKG5hbWUpO1xuICAgICAgICBvdXRwdXROYW1lcy5wdXNoKG5hbWVTdHJpbmcpO1xuICAgICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHR5cGVvZiBvcHRpb25zPy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IG9wdGlvbnMucHJlZmVycmVkT3V0cHV0TG9jYXRpb24gOiBvcHRpb25zPy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbj8uW25hbWVTdHJpbmddID8/IFwiY3B1XCI7XG4gICAgICAgICAgaWYgKGxvY2F0aW9uICE9PSBcImNwdVwiICYmIGxvY2F0aW9uICE9PSBcImNwdS1waW5uZWRcIiAmJiBsb2NhdGlvbiAhPT0gXCJncHUtYnVmZmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IHN1cHBvcnRlZCBwcmVmZXJyZWQgb3V0cHV0IGxvY2F0aW9uOiAke2xvY2F0aW9ufS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnB1c2gobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgYmluZGluZ1N0YXRlID0gbnVsbDtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBpb0JpbmRpbmdIYW5kbGUgPSB3YXNtMi5fT3J0Q3JlYXRlQmluZGluZyhzZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgaWYgKGlvQmluZGluZ0hhbmRsZSA9PT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgY3JlYXRlIElPIGJpbmRpbmcuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGJpbmRpbmdTdGF0ZSA9IHtcbiAgICAgICAgICBoYW5kbGU6IGlvQmluZGluZ0hhbmRsZSxcbiAgICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsXG4gICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZDogb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLm1hcCgobCkgPT4gZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGwpKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgYWN0aXZlU2Vzc2lvbnMuc2V0KHNlc3Npb25IYW5kbGUsIFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGJpbmRpbmdTdGF0ZV0pO1xuICAgICAgcmV0dXJuIFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzLCBvdXRwdXROYW1lc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goKGJ1ZikgPT4gd2FzbTIuX09ydEZyZWUoYnVmKSk7XG4gICAgICBvdXRwdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goKGJ1ZikgPT4gd2FzbTIuX09ydEZyZWUoYnVmKSk7XG4gICAgICBpZiAoaW9CaW5kaW5nSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlQmluZGluZyhpb0JpbmRpbmdIYW5kbGUpO1xuICAgICAgfVxuICAgICAgaWYgKHNlc3Npb25IYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VTZXNzaW9uKHNlc3Npb25IYW5kbGUpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuX2ZyZWUobW9kZWxEYXRhWzBdKTtcbiAgICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGFsbG9jcy5mb3JFYWNoKChhbGxvYykgPT4gd2FzbTIuX2ZyZWUoYWxsb2MpKTtcbiAgICB9XG4gIH07XG4gIHZhciBjcmVhdGVTZXNzaW9uID0gKG1vZGVsLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgbW9kZWxEYXRhID0gY3JlYXRlU2Vzc2lvbkFsbG9jYXRlKG1vZGVsKTtcbiAgICByZXR1cm4gY3JlYXRlU2Vzc2lvbkZpbmFsaXplKG1vZGVsRGF0YSwgb3B0aW9ucyk7XG4gIH07XG4gIHZhciByZWxlYXNlU2Vzc2lvbiA9IChzZXNzaW9uSWQpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVsZWFzZSBzZXNzaW9uLiBpbnZhbGlkIHNlc3Npb24gaWQ6ICR7c2Vzc2lvbklkfWApO1xuICAgIH1cbiAgICBjb25zdCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZV0gPSBzZXNzaW9uO1xuICAgIGlmIChpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgd2FzbTIuX09ydFJlbGVhc2VCaW5kaW5nKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gICAgfVxuICAgIHdhc20yLmpzZXBVbnJlZ2lzdGVyQnVmZmVycz8uKHNlc3Npb25JZCk7XG4gICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goKGJ1ZikgPT4gd2FzbTIuX09ydEZyZWUoYnVmKSk7XG4gICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgIHdhc20yLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgICBhY3RpdmVTZXNzaW9ucy5kZWxldGUoc2Vzc2lvbklkKTtcbiAgfTtcbiAgdmFyIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvciA9ICh0ZW5zb3IsIHRlbnNvckhhbmRsZXMsIGFsbG9jcywgc2Vzc2lvbklkLCBpbmRleCkgPT4ge1xuICAgIGlmICghdGVuc29yKSB7XG4gICAgICB0ZW5zb3JIYW5kbGVzLnB1c2goMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBkYXRhVHlwZSA9IHRlbnNvclswXTtcbiAgICBjb25zdCBkaW1zID0gdGVuc29yWzFdO1xuICAgIGNvbnN0IGxvY2F0aW9uID0gdGVuc29yWzNdO1xuICAgIGxldCByYXdEYXRhO1xuICAgIGxldCBkYXRhQnl0ZUxlbmd0aDtcbiAgICBpZiAoZGF0YVR5cGUgPT09IFwic3RyaW5nXCIgJiYgbG9jYXRpb24gPT09IFwiZ3B1LWJ1ZmZlclwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLlwiKTtcbiAgICB9XG4gICAgaWYgKGxvY2F0aW9uID09PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgY29uc3QgZ3B1QnVmZmVyID0gdGVuc29yWzJdLmdwdUJ1ZmZlcjtcbiAgICAgIGNvbnN0IGVsZW1lbnRTaXplSW5CeXRlcyA9IGdldFRlbnNvckVsZW1lbnRTaXplKHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKGRhdGFUeXBlKSk7XG4gICAgICBkYXRhQnl0ZUxlbmd0aCA9IGRpbXMucmVkdWNlKChhLCBiKSA9PiBhICogYiwgMSkgKiBlbGVtZW50U2l6ZUluQnl0ZXM7XG4gICAgICByYXdEYXRhID0gd2FzbTIuanNlcFJlZ2lzdGVyQnVmZmVyKHNlc3Npb25JZCwgaW5kZXgsIGdwdUJ1ZmZlciwgZGF0YUJ5dGVMZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkYXRhID0gdGVuc29yWzJdO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSA0ICogZGF0YS5sZW5ndGg7XG4gICAgICAgIHJhd0RhdGEgPSB3YXNtMi5fbWFsbG9jKGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgYWxsb2NzLnB1c2gocmF3RGF0YSk7XG4gICAgICAgIGxldCBkYXRhSW5kZXggPSByYXdEYXRhIC8gNDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2ldICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB0ZW5zb3IgZGF0YSBhdCBpbmRleCAke2l9IGlzIG5vdCBhIHN0cmluZ2ApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXNtMi5IRUFQVTMyW2RhdGFJbmRleCsrXSA9IGFsbG9jV2FzbVN0cmluZyhkYXRhW2ldLCBhbGxvY3MpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgcmF3RGF0YSA9IHdhc20yLl9tYWxsb2MoZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICBhbGxvY3MucHVzaChyYXdEYXRhKTtcbiAgICAgICAgd2FzbTIuSEVBUFU4LnNldChuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhQnl0ZUxlbmd0aCksIHJhd0RhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDQgKiBkaW1zLmxlbmd0aCk7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBkaW1JbmRleCA9IGRpbXNPZmZzZXQgLyA0O1xuICAgICAgZGltcy5mb3JFYWNoKChkKSA9PiB3YXNtMi5IRUFQMzJbZGltSW5kZXgrK10gPSBkKTtcbiAgICAgIGNvbnN0IHRlbnNvcjIgPSB3YXNtMi5fT3J0Q3JlYXRlVGVuc29yKFxuICAgICAgICB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSksXG4gICAgICAgIHJhd0RhdGEsXG4gICAgICAgIGRhdGFCeXRlTGVuZ3RoLFxuICAgICAgICBkaW1zT2Zmc2V0LFxuICAgICAgICBkaW1zLmxlbmd0aCxcbiAgICAgICAgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGxvY2F0aW9uKVxuICAgICAgKTtcbiAgICAgIGlmICh0ZW5zb3IyID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBjcmVhdGUgdGVuc29yIGZvciBpbnB1dC9vdXRwdXQuIHNlc3Npb249JHtzZXNzaW9uSWR9LCBpbmRleD0ke2luZGV4fS5gKTtcbiAgICAgIH1cbiAgICAgIHRlbnNvckhhbmRsZXMucHVzaCh0ZW5zb3IyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB9XG4gIH07XG4gIHZhciBydW4gPSBhc3luYyAoc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0VGVuc29ycywgb3V0cHV0SW5kaWNlcywgb3V0cHV0VGVuc29ycywgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBydW4gaW5mZXJlbmNlLiBpbnZhbGlkIHNlc3Npb24gaWQ6ICR7c2Vzc2lvbklkfWApO1xuICAgIH1cbiAgICBjb25zdCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZV0gPSBzZXNzaW9uO1xuICAgIGNvbnN0IGlucHV0Q291bnQgPSBpbnB1dEluZGljZXMubGVuZ3RoO1xuICAgIGNvbnN0IG91dHB1dENvdW50ID0gb3V0cHV0SW5kaWNlcy5sZW5ndGg7XG4gICAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGxldCBydW5PcHRpb25zQWxsb2NzID0gW107XG4gICAgY29uc3QgaW5wdXRUZW5zb3JIYW5kbGVzID0gW107XG4gICAgY29uc3Qgb3V0cHV0VGVuc29ySGFuZGxlcyA9IFtdO1xuICAgIGNvbnN0IGlucHV0T3V0cHV0QWxsb2NzID0gW107XG4gICAgY29uc3QgYmVmb3JlUnVuU3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICBjb25zdCBpbnB1dFZhbHVlc09mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoaW5wdXRDb3VudCAqIDQpO1xuICAgIGNvbnN0IGlucHV0TmFtZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgICBjb25zdCBvdXRwdXRWYWx1ZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKG91dHB1dENvdW50ICogNCk7XG4gICAgY29uc3Qgb3V0cHV0TmFtZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKG91dHB1dENvdW50ICogNCk7XG4gICAgdHJ5IHtcbiAgICAgIFtydW5PcHRpb25zSGFuZGxlLCBydW5PcHRpb25zQWxsb2NzXSA9IHNldFJ1bk9wdGlvbnMob3B0aW9ucyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IoaW5wdXRUZW5zb3JzW2ldLCBpbnB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCBzZXNzaW9uSWQsIGlucHV0SW5kaWNlc1tpXSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKFxuICAgICAgICAgIG91dHB1dFRlbnNvcnNbaV0sXG4gICAgICAgICAgb3V0cHV0VGVuc29ySGFuZGxlcyxcbiAgICAgICAgICBpbnB1dE91dHB1dEFsbG9jcyxcbiAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgaW5wdXRDb3VudCArIG91dHB1dEluZGljZXNbaV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGxldCBpbnB1dFZhbHVlc0luZGV4ID0gaW5wdXRWYWx1ZXNPZmZzZXQgLyA0O1xuICAgICAgbGV0IGlucHV0TmFtZXNJbmRleCA9IGlucHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgICAgbGV0IG91dHB1dFZhbHVlc0luZGV4ID0gb3V0cHV0VmFsdWVzT2Zmc2V0IC8gNDtcbiAgICAgIGxldCBvdXRwdXROYW1lc0luZGV4ID0gb3V0cHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgd2FzbTIuSEVBUFUzMltpbnB1dFZhbHVlc0luZGV4KytdID0gaW5wdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgICB3YXNtMi5IRUFQVTMyW2lucHV0TmFtZXNJbmRleCsrXSA9IGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbnB1dEluZGljZXNbaV1dO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIHdhc20yLkhFQVBVMzJbb3V0cHV0VmFsdWVzSW5kZXgrK10gPSBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgICB3YXNtMi5IRUFQVTMyW291dHB1dE5hbWVzSW5kZXgrK10gPSBvdXRwdXROYW1lc1VURjhFbmNvZGVkW291dHB1dEluZGljZXNbaV1dO1xuICAgICAgfVxuICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHsgaGFuZGxlLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQgfSA9IGlvQmluZGluZ1N0YXRlO1xuICAgICAgICBpZiAoaW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aCAhPT0gaW5wdXRDb3VudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgY291bnQgZnJvbSBmZWVkcyAoJHtpbnB1dENvdW50fSkgaXMgZXhwZWN0ZWQgdG8gYmUgYWx3YXlzIGVxdWFsIHRvIG1vZGVsJ3MgaW5wdXQgY291bnQgKCR7aW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aH0pLmApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBpbnB1dEluZGljZXNbaV07XG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IGF3YWl0IHdhc20yLl9PcnRCaW5kSW5wdXQoaGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBpbnB1dFRlbnNvckhhbmRsZXNbaV0pO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBpbnB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gb3V0cHV0SW5kaWNlc1tpXTtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG91dHB1dFRlbnNvcnNbaV0/LlszXTtcbiAgICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ29kZTIgPSB3YXNtMi5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldLCAwKTtcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIHByZS1hbGxvY2F0ZWQgb3V0cHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IHdhc20yLl9PcnRCaW5kT3V0cHV0KGhhbmRsZSwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIDAsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWRbaW5kZXhdKTtcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIG91dHB1dFske2l9XSB0byAke291dHB1dFByZWZlcnJlZExvY2F0aW9uc1tpXX0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGVycm9yQ29kZTtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBlcnJvckNvZGUgPSBhd2FpdCB3YXNtMi5fT3J0UnVuV2l0aEJpbmRpbmcoXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSxcbiAgICAgICAgICBpb0JpbmRpbmdTdGF0ZS5oYW5kbGUsXG4gICAgICAgICAgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIHJ1bk9wdGlvbnNIYW5kbGVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20yLl9PcnRSdW4oXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSxcbiAgICAgICAgICBpbnB1dE5hbWVzT2Zmc2V0LFxuICAgICAgICAgIGlucHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIGlucHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0TmFtZXNPZmZzZXQsXG4gICAgICAgICAgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIHJ1bk9wdGlvbnNIYW5kbGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJmYWlsZWQgdG8gY2FsbCBPcnRSdW4oKS5cIik7XG4gICAgICB9XG4gICAgICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCB0ZW5zb3IgPSB3YXNtMi5IRUFQVTMyW291dHB1dFZhbHVlc09mZnNldCAvIDQgKyBpXTtcbiAgICAgICAgaWYgKHRlbnNvciA9PT0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXSkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKG91dHB1dFRlbnNvcnNbaV0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgICAgICBjb25zdCB0ZW5zb3JEYXRhT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyg0ICogNCk7XG4gICAgICAgIGxldCBrZWVwT3V0cHV0VGVuc29yID0gZmFsc2U7XG4gICAgICAgIGxldCB0eXBlLCBkYXRhT2Zmc2V0ID0gMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUyID0gd2FzbTIuX09ydEdldFRlbnNvckRhdGEoXG4gICAgICAgICAgICB0ZW5zb3IsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0LFxuICAgICAgICAgICAgdGVuc29yRGF0YU9mZnNldCArIDQsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0ICsgOCxcbiAgICAgICAgICAgIHRlbnNvckRhdGFPZmZzZXQgKyAxMlxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGVycm9yQ29kZTIgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhY2Nlc3Mgb3V0cHV0IHRlbnNvciBkYXRhIG9uIGluZGV4ICR7aX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCB0ZW5zb3JEYXRhSW5kZXggPSB0ZW5zb3JEYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICBjb25zdCBkYXRhVHlwZSA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGRhdGFPZmZzZXQgPSB3YXNtMi5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbTIuSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltc0xlbmd0aCA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgZGltc0xlbmd0aDsgaTIrKykge1xuICAgICAgICAgICAgZGltcy5wdXNoKHdhc20yLkhFQVBVMzJbZGltc09mZnNldCAvIDQgKyBpMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXNtMi5fT3J0RnJlZShkaW1zT2Zmc2V0KTtcbiAgICAgICAgICBjb25zdCBzaXplID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKTtcbiAgICAgICAgICB0eXBlID0gdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcoZGF0YVR5cGUpO1xuICAgICAgICAgIGNvbnN0IHByZWZlcnJlZExvY2F0aW9uID0gaW9CaW5kaW5nU3RhdGU/Lm91dHB1dFByZWZlcnJlZExvY2F0aW9uc1tvdXRwdXRJbmRpY2VzW2ldXTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHByZWZlcnJlZExvY2F0aW9uID09PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ0RhdGEgPSBbXTtcbiAgICAgICAgICAgIGxldCBkYXRhSW5kZXggPSBkYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBzaXplOyBpMisrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdhc20yLkhFQVBVMzJbZGF0YUluZGV4KytdO1xuICAgICAgICAgICAgICBjb25zdCBtYXhCeXRlc1RvUmVhZCA9IGkyID09PSBzaXplIC0gMSA/IHZvaWQgMCA6IHdhc20yLkhFQVBVMzJbZGF0YUluZGV4XSAtIG9mZnNldDtcbiAgICAgICAgICAgICAgc3RyaW5nRGF0YS5wdXNoKHdhc20yLlVURjhUb1N0cmluZyhvZmZzZXQsIG1heEJ5dGVzVG9SZWFkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgc3RyaW5nRGF0YSwgXCJjcHVcIl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09IFwiZ3B1LWJ1ZmZlclwiICYmIHNpemUgPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHdhc20yLmpzZXBHZXRCdWZmZXIoZGF0YU9mZnNldCk7XG4gICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRTaXplID0gZ2V0VGVuc29yRWxlbWVudFNpemUoZGF0YVR5cGUpO1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudFNpemUgPT09IHZvaWQgMCB8fCAhaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBrZWVwT3V0cHV0VGVuc29yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgb3V0cHV0LnB1c2goW1xuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgZGltcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBncHVCdWZmZXIsXG4gICAgICAgICAgICAgICAgICBkb3dubG9hZDogd2FzbTIuanNlcENyZWF0ZURvd25sb2FkZXIoZ3B1QnVmZmVyLCBzaXplICogZWxlbWVudFNpemUsIHR5cGUpLFxuICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJncHUtYnVmZmVyXCJcbiAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IodHlwZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgdHlwZWRBcnJheUNvbnN0cnVjdG9yKHNpemUpO1xuICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLnNldCh3YXNtMi5IRUFQVTguc3ViYXJyYXkoZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIGRhdGEuYnl0ZUxlbmd0aCkpO1xuICAgICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgZGF0YSwgXCJjcHVcIl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrKTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBkYXRhT2Zmc2V0KSB7XG4gICAgICAgICAgICB3YXNtMi5fZnJlZShkYXRhT2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFrZWVwT3V0cHV0VGVuc29yKSB7XG4gICAgICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlvQmluZGluZ1N0YXRlKSB7XG4gICAgICAgIHdhc20yLl9PcnRDbGVhckJvdW5kT3V0cHV0cyhpb0JpbmRpbmdTdGF0ZS5oYW5kbGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKGJlZm9yZVJ1blN0YWNrKTtcbiAgICAgIGlucHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKCh2KSA9PiB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgICBvdXRwdXRUZW5zb3JIYW5kbGVzLmZvckVhY2goKHYpID0+IHdhc20yLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICAgIGlucHV0T3V0cHV0QWxsb2NzLmZvckVhY2goKHApID0+IHdhc20yLl9mcmVlKHApKTtcbiAgICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIHJ1bk9wdGlvbnNBbGxvY3MuZm9yRWFjaCgocCkgPT4gd2FzbTIuX2ZyZWUocCkpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGVuZFByb2ZpbGluZyA9IChzZXNzaW9uSWQpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzZXNzaW9uIGlkXCIpO1xuICAgIH1cbiAgICBjb25zdCBzZXNzaW9uSGFuZGxlID0gc2Vzc2lvblswXTtcbiAgICBjb25zdCBwcm9maWxlRmlsZU5hbWUgPSB3YXNtMi5fT3J0RW5kUHJvZmlsaW5nKHNlc3Npb25IYW5kbGUpO1xuICAgIGlmIChwcm9maWxlRmlsZU5hbWUgPT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IGFuIHByb2ZpbGUgZmlsZSBuYW1lLlwiKTtcbiAgICB9XG4gICAgd2FzbTIuX09ydEZyZWUocHJvZmlsZUZpbGVOYW1lKTtcbiAgfTtcbiAgdmFyIGV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzID0gKHRlbnNvcnMpID0+IHtcbiAgICBjb25zdCBidWZmZXJzID0gW107XG4gICAgZm9yIChjb25zdCB0ZW5zb3Igb2YgdGVuc29ycykge1xuICAgICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSAmJiBcImJ1ZmZlclwiIGluIGRhdGEpIHtcbiAgICAgICAgYnVmZmVycy5wdXNoKGRhdGEuYnVmZmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlcnM7XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3Byb3h5LXdvcmtlci9tYWluLnRzXG4gIHNlbGYub25tZXNzYWdlID0gKGV2KSA9PiB7XG4gICAgc3dpdGNoIChldi5kYXRhLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJpbml0LXdhc21cIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbml0aWFsaXplV2ViQXNzZW1ibHkoZXYuZGF0YS5pbikudGhlbihcbiAgICAgICAgICAgICgpID0+IHBvc3RNZXNzYWdlKHsgdHlwZTogXCJpbml0LXdhc21cIiB9KSxcbiAgICAgICAgICAgIChlcnIpID0+IHBvc3RNZXNzYWdlKHsgdHlwZTogXCJpbml0LXdhc21cIiwgZXJyIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImluaXQtd2FzbVwiLCBlcnIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiaW5pdC1vcnRcIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbml0UnVudGltZShldi5kYXRhLmluKS50aGVuKCgpID0+IHBvc3RNZXNzYWdlKHsgdHlwZTogXCJpbml0LW9ydFwiIH0pLCAoZXJyKSA9PiBwb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcImluaXQtb3J0XCIsXG4gICAgICAgICAgICBlcnJcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJpbml0LW9ydFwiLCBlcnIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY3JlYXRlX2FsbG9jYXRlXCI6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBtb2RlbCB9ID0gZXYuZGF0YS5pbjtcbiAgICAgICAgICBjb25zdCBtb2RlbGRhdGEgPSBjcmVhdGVTZXNzaW9uQWxsb2NhdGUobW9kZWwpO1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJjcmVhdGVfYWxsb2NhdGVcIiwgb3V0OiBtb2RlbGRhdGEgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJjcmVhdGVfYWxsb2NhdGVcIiwgZXJyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNyZWF0ZV9maW5hbGl6ZVwiOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgbW9kZWxkYXRhLCBvcHRpb25zIH0gPSBldi5kYXRhLmluO1xuICAgICAgICAgIGNvbnN0IHNlc3Npb25NZXRhZGF0YSA9IGNyZWF0ZVNlc3Npb25GaW5hbGl6ZShtb2RlbGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJjcmVhdGVfZmluYWxpemVcIiwgb3V0OiBzZXNzaW9uTWV0YWRhdGEgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJjcmVhdGVfZmluYWxpemVcIiwgZXJyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNyZWF0ZVwiOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgbW9kZWwsIG9wdGlvbnMgfSA9IGV2LmRhdGEuaW47XG4gICAgICAgICAgY29uc3Qgc2Vzc2lvbk1ldGFkYXRhID0gY3JlYXRlU2Vzc2lvbihtb2RlbCwgb3B0aW9ucyk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImNyZWF0ZVwiLCBvdXQ6IHNlc3Npb25NZXRhZGF0YSB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImNyZWF0ZVwiLCBlcnIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicmVsZWFzZVwiOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlbGVhc2VTZXNzaW9uKGV2LmRhdGEuaW4pO1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJyZWxlYXNlXCIgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJyZWxlYXNlXCIsIGVyciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJydW5cIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB7IHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG9wdGlvbnMgfSA9IGV2LmRhdGEuaW47XG4gICAgICAgICAgcnVuKHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG5ldyBBcnJheShvdXRwdXRJbmRpY2VzLmxlbmd0aCkuZmlsbChudWxsKSwgb3B0aW9ucykudGhlbihcbiAgICAgICAgICAgIChvdXRwdXRzKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChvdXRwdXRzLnNvbWUoKG8pID0+IG9bM10gIT09IFwiY3B1XCIpKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcInJ1blwiLCBlcnI6IFwiUHJveHkgZG9lcyBub3Qgc3VwcG9ydCBub24tY3B1IHRlbnNvciBsb2NhdGlvbi5cIiB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZShcbiAgICAgICAgICAgICAgICAgIHsgdHlwZTogXCJydW5cIiwgb3V0OiBvdXRwdXRzIH0sXG4gICAgICAgICAgICAgICAgICBleHRyYWN0VHJhbnNmZXJhYmxlQnVmZmVycyhvdXRwdXRzKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJydW5cIiwgZXJyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJydW5cIiwgZXJyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVuZC1wcm9maWxpbmdcIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBoYW5kbGVyID0gZXYuZGF0YS5pbjtcbiAgICAgICAgICBlbmRQcm9maWxpbmcoaGFuZGxlcik7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImVuZC1wcm9maWxpbmdcIiB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImVuZC1wcm9maWxpbmdcIiwgZXJyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImlzLW9ydC1lbnYtaW5pdGlhbGl6ZWRcIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBvcnRFbnZJbml0aWFsaXplZDIgPSBpc09ydEVudkluaXRpYWxpemVkKCk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImlzLW9ydC1lbnYtaW5pdGlhbGl6ZWRcIiwgb3V0OiBvcnRFbnZJbml0aWFsaXplZDIgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJpcy1vcnQtZW52LWluaXRpYWxpemVkXCIsIGVyciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9O1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXdvZ0lDSjJaWEp6YVc5dUlqb2dNeXdLSUNBaWMyOTFjbU5sY3lJNklGc2libTlrWldwekxXbG5ibTl5WlRwbWN5SXNJQ0p1YjJSbGFuTXRhV2R1YjNKbE9uQmhkR2dpTENBaUxpNHZiR2xpTDNkaGMyMHZZbWx1WkdsdVp5OXZjblF0ZEhKaGFXNXBibWN0ZDJGemJTMXphVzFrTG1weklpd2dJbTV2WkdWcWN5MXBaMjV2Y21VNmQyOXlhMlZ5WDNSb2NtVmhaSE1pTENBaWJtOWtaV3B6TFdsbmJtOXlaVHB3WlhKbVgyaHZiMnR6SWl3Z0ltNXZaR1ZxY3kxcFoyNXZjbVU2YjNNaUxDQWlMaTR2YkdsaUwzZGhjMjB2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzVxY3lJc0lDSXVMaTlzYVdJdmQyRnpiUzlpYVc1a2FXNW5MMjl5ZEMxM1lYTnRMWFJvY21WaFpHVmtMbmR2Y210bGNpNXFjeUlzSUNKdWIyUmxhbk10YVdkdWIzSmxPbTV2WkdVNmNHRjBhQ0lzSUNJdUxpOXNhV0l2ZDJGemJTOTNZWE50TFdaaFkzUnZjbmt1ZEhNaUxDQWlMaTR2YkdsaUwzZGhjMjB2ZDJGemJTMTFkR2xzY3k1MGN5SXNJQ0l1TGk5c2FXSXZkMkZ6YlM5eWRXNHRiM0IwYVc5dWN5NTBjeUlzSUNJdUxpOXNhV0l2ZDJGemJTOXpaWE56YVc5dUxXOXdkR2x2Ym5NdWRITWlMQ0FpTGk0dmJHbGlMM2RoYzIwdmQyRnpiUzFqYjIxdGIyNHVkSE1pTENBaUxpNHZiR2xpTDNkaGMyMHZkMkZ6YlMxamIzSmxMV2x0Y0d3dWRITWlMQ0FpTGk0dmJHbGlMM2RoYzIwdmNISnZlSGt0ZDI5eWEyVnlMMjFoYVc0dWRITWlYU3dLSUNBaWMyOTFjbU5sYzBOdmJuUmxiblFpT2lCYkltVjRjRzl5ZENCamIyNXpkQ0J5WldGa1JtbHNaU0E5SUhWdVpHVm1hVzVsWkRzaUxDQWlaWGh3YjNKMElHTnZibk4wSUdwdmFXNGdQU0IxYm1SbFptbHVaV1E3SWl3Z0lseHVkbUZ5SUc5eWRGZGhjMjBnUFNBb0tDa2dQVDRnZTF4dUlDQjJZWElnWDNOamNtbHdkRVJwY2lBOUlIUjVjR1Z2WmlCa2IyTjFiV1Z1ZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ1pHOWpkVzFsYm5RdVkzVnljbVZ1ZEZOamNtbHdkQ0EvSUdSdlkzVnRaVzUwTG1OMWNuSmxiblJUWTNKcGNIUXVjM0pqSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0JwWmlBb2RIbHdaVzltSUY5ZlptbHNaVzVoYldVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCZmMyTnlhWEIwUkdseUlEMGdYM05qY21sd2RFUnBjaUI4ZkNCZlgyWnBiR1Z1WVcxbE8xeHVJQ0J5WlhSMWNtNGdLRnh1Wm5WdVkzUnBiMjRvYlc5a2RXeGxRWEpuSUQwZ2UzMHBJSHRjYmx4dWRtRnlJR1E5Ylc5a2RXeGxRWEpuTEdzc2JEdGtMbkpsWVdSNVBXNWxkeUJRY205dGFYTmxLQ2hoTEdJcFBUNTdhejFoTzJ3OVluMHBPM1poY2lCeVBVOWlhbVZqZEM1aGMzTnBaMjRvZTMwc1pDa3NkajFjSWk0dmRHaHBjeTV3Y205bmNtRnRYQ0lzWVdFOVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIZHBibVJ2ZHl4NFBWd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR2x0Y0c5eWRGTmpjbWx3ZEhNc1ltRTlYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JSEJ5YjJObGMzTW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJ3Y205alpYTnpMblpsY25OcGIyNXpKaVpjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnY0hKdlkyVnpjeTUyWlhKemFXOXVjeTV1YjJSbExIazlYQ0pjSWl4QkxFSXNRenRjYm1sbUtHSmhLWHQyWVhJZ1puTTljbVZ4ZFdseVpTaGNJbVp6WENJcExFUTljbVZ4ZFdseVpTaGNJbkJoZEdoY0lpazdlVDE0UDBRdVpHbHlibUZ0WlNoNUtTdGNJaTljSWpwZlgyUnBjbTVoYldVclhDSXZYQ0k3UVQwb1lTeGlLVDArZTJFOVlTNXpkR0Z5ZEhOWGFYUm9LRndpWm1sc1pUb3ZMMXdpS1Q5dVpYY2dWVkpNS0dFcE9rUXVibTl5YldGc2FYcGxLR0VwTzNKbGRIVnliaUJtY3k1eVpXRmtSbWxzWlZONWJtTW9ZU3hpUDNadmFXUWdNRHBjSW5WMFpqaGNJaWw5TzBNOVlUMCtlMkU5UVNoaExDRXdLVHRoTG1KMVptWmxjbng4S0dFOWJtVjNJRlZwYm5RNFFYSnlZWGtvWVNrcE8zSmxkSFZ5YmlCaGZUdENQU2hoTEdJc1l5eGxQU0V3S1QwK2UyRTlZUzV6ZEdGeWRITlhhWFJvS0Z3aVptbHNaVG92TDF3aUtUOXVaWGNnVlZKTUtHRXBPa1F1Ym05eWJXRnNhWHBsS0dFcE8yWnpMbkpsWVdSR2FXeGxLR0VzWlQ5MmIybGtJREE2WENKMWRHWTRYQ0lzS0djc2FDazlQbnRuUDJNb1p5azZZaWhsUDJndVluVm1abVZ5T21ncGZTbDlPeUZrTG5Sb2FYTlFjbTluY21GdEppWXhQSEJ5YjJObGMzTXVZWEpuZGk1c1pXNW5kR2dtSmloMlBYQnliMk5sYzNNdVlYSm5kbHN4WFM1eVpYQnNZV05sS0M5Y1hGeGNMMmNzWENJdlhDSXBLVHR3Y205alpYTnpMbUZ5WjNZdWMyeHBZMlVvTWlrN1pDNXBibk53WldOMFBTZ3BQVDVjSWx0RmJYTmpjbWx3ZEdWdUlFMXZaSFZzWlNCdlltcGxZM1JkWENKOVpXeHpaU0JwWmloaFlYeDhYRzU0S1hnL2VUMXpaV3htTG14dlkyRjBhVzl1TG1oeVpXWTZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUdSdlkzVnRaVzUwSmlaa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBKaVlvZVQxa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBMbk55WXlrc1gzTmpjbWx3ZEVScGNpWW1LSGs5WDNOamNtbHdkRVJwY2lrc01DRTlQWGt1YVc1a1pYaFBaaWhjSW1Kc2IySTZYQ0lwUDNrOWVTNXpkV0p6ZEhJb01DeDVMbkpsY0d4aFkyVW9MMXMvSTEwdUtpOHNYQ0pjSWlrdWJHRnpkRWx1WkdWNFQyWW9YQ0l2WENJcEt6RXBPbms5WENKY0lpeEJQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXpaVzVrS0c1MWJHd3BPM0psZEhWeWJpQmlMbkpsYzNCdmJuTmxWR1Y0ZEgwc2VDWW1LRU05WVQwK2UzWmhjaUJpUFc1bGR5QllUVXhJZEhSd1VtVnhkV1Z6ZER0aUxtOXdaVzRvWENKSFJWUmNJaXhoTENFeEtUdGlMbkpsYzNCdmJuTmxWSGx3WlQxY0ltRnljbUY1WW5WbVptVnlYQ0k3WWk1elpXNWtLRzUxYkd3cE8zSmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hpTG5KbGMzQnZibk5sS1gwcExFSTlLR0VzWWl4aktUMCtlM1poY2lCbFBXNWxkeUJZVFV4SWRIUndVbVZ4ZFdWemREdGxMbTl3Wlc0b1hDSkhSVlJjSWl4aExDRXdLVHRsTG5KbGMzQnZibk5sVkhsd1pUMWNibHdpWVhKeVlYbGlkV1ptWlhKY0lqdGxMbTl1Ykc5aFpEMG9LVDArZXpJd01EMDlaUzV6ZEdGMGRYTjhmREE5UFdVdWMzUmhkSFZ6SmlabExuSmxjM0J2Ym5ObFAySW9aUzV5WlhOd2IyNXpaU2s2WXlncGZUdGxMbTl1WlhKeWIzSTlZenRsTG5ObGJtUW9iblZzYkNsOU8zWmhjaUJqWVQxa0xuQnlhVzUwZkh4amIyNXpiMnhsTG14dlp5NWlhVzVrS0dOdmJuTnZiR1VwTEVVOVpDNXdjbWx1ZEVWeWNueDhZMjl1YzI5c1pTNWxjbkp2Y2k1aWFXNWtLR052Ym5OdmJHVXBPMDlpYW1WamRDNWhjM05wWjI0b1pDeHlLVHR5UFc1MWJHdzdaQzUwYUdselVISnZaM0poYlNZbUtIWTlaQzUwYUdselVISnZaM0poYlNrN2RtRnlJRVk3WkM1M1lYTnRRbWx1WVhKNUppWW9SajFrTG5kaGMyMUNhVzVoY25rcE8zWmhjaUJ1YjBWNGFYUlNkVzUwYVcxbFBXUXVibTlGZUdsMFVuVnVkR2x0Wlh4OElUQTdYQ0p2WW1wbFkzUmNJaUU5ZEhsd1pXOW1JRmRsWWtGemMyVnRZbXg1SmlaSEtGd2libThnYm1GMGFYWmxJSGRoYzIwZ2MzVndjRzl5ZENCa1pYUmxZM1JsWkZ3aUtUdDJZWElnU0N4SkxHUmhQU0V4TEVvc1N5eE1MRTA3WEc1bWRXNWpkR2x2YmlCbFlTZ3BlM1poY2lCaFBVZ3VZblZtWm1WeU8yUXVTRVZCVURnOVNqMXVaWGNnU1c1ME9FRnljbUY1S0dFcE8yUXVTRVZCVURFMlBXNWxkeUJKYm5ReE5rRnljbUY1S0dFcE8yUXVTRVZCVURNeVBVdzlibVYzSUVsdWRETXlRWEp5WVhrb1lTazdaQzVJUlVGUVZUZzlTejF1WlhjZ1ZXbHVkRGhCY25KaGVTaGhLVHRrTGtoRlFWQlZNVFk5Ym1WM0lGVnBiblF4TmtGeWNtRjVLR0VwTzJRdVNFVkJVRlV6TWoxTlBXNWxkeUJWYVc1ME16SkJjbkpoZVNoaEtUdGtMa2hGUVZCR016STlibVYzSUVac2IyRjBNekpCY25KaGVTaGhLVHRrTGtoRlFWQkdOalE5Ym1WM0lFWnNiMkYwTmpSQmNuSmhlU2hoS1gxMllYSWdabUU5VzEwc2FHRTlXMTBzYVdFOVcxMDdablZ1WTNScGIyNGdhbUVvS1h0MllYSWdZVDFrTG5CeVpWSjFiaTV6YUdsbWRDZ3BPMlpoTG5WdWMyaHBablFvWVNsOWRtRnlJRTQ5TUN4UFBXNTFiR3dzVUQxdWRXeHNPMXh1Wm5WdVkzUnBiMjRnUnloaEtYdHBaaWhrTG05dVFXSnZjblFwWkM1dmJrRmliM0owS0dFcE8yRTlYQ0pCWW05eWRHVmtLRndpSzJFclhDSXBYQ0k3UlNoaEtUdGtZVDBoTUR0aFBXNWxkeUJYWldKQmMzTmxiV0pzZVM1U2RXNTBhVzFsUlhKeWIzSW9ZU3RjSWk0Z1FuVnBiR1FnZDJsMGFDQXRjMEZUVTBWU1ZFbFBUbE1nWm05eUlHMXZjbVVnYVc1bWJ5NWNJaWs3YkNoaEtUdDBhSEp2ZHlCaE8zMW1kVzVqZEdsdmJpQnJZU2hoS1h0eVpYUjFjbTRnWVM1emRHRnlkSE5YYVhSb0tGd2laR0YwWVRwaGNIQnNhV05oZEdsdmJpOXZZM1JsZEMxemRISmxZVzA3WW1GelpUWTBMRndpS1gxMllYSWdVVHRSUFZ3aWIzSjBMWFJ5WVdsdWFXNW5MWGRoYzIwdGMybHRaQzUzWVhOdFhDSTdhV1lvSVd0aEtGRXBLWHQyWVhJZ2JHRTlVVHRSUFdRdWJHOWpZWFJsUm1sc1pUOWtMbXh2WTJGMFpVWnBiR1VvYkdFc2VTazZlU3RzWVgxbWRXNWpkR2x2YmlCdFlTaGhLWHRwWmloaFBUMVJKaVpHS1hKbGRIVnliaUJ1WlhjZ1ZXbHVkRGhCY25KaGVTaEdLVHRwWmloREtYSmxkSFZ5YmlCREtHRXBPM1JvY205M1hDSmliM1JvSUdGemVXNWpJR0Z1WkNCemVXNWpJR1psZEdOb2FXNW5JRzltSUhSb1pTQjNZWE50SUdaaGFXeGxaRndpTzMxY2JtWjFibU4wYVc5dUlHNWhLR0VwZTJsbUtDRkdKaVlvWVdGOGZIZ3BLWHRwWmloY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQm1aWFJqYUNZbUlXRXVjM1JoY25SelYybDBhQ2hjSW1acGJHVTZMeTljSWlrcGNtVjBkWEp1SUdabGRHTm9LR0VzZTJOeVpXUmxiblJwWVd4ek9sd2ljMkZ0WlMxdmNtbG5hVzVjSW4wcExuUm9aVzRvWWowK2UybG1LQ0ZpTG05cktYUm9jbTkzWENKbVlXbHNaV1FnZEc4Z2JHOWhaQ0IzWVhOdElHSnBibUZ5ZVNCbWFXeGxJR0YwSUNkY0lpdGhLMXdpSjF3aU8zSmxkSFZ5YmlCaUxtRnljbUY1UW5WbVptVnlLQ2w5S1M1allYUmphQ2dvS1QwK2JXRW9ZU2twTzJsbUtFSXBjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2hpTEdNcFBUNTdRaWhoTEdVOVBtSW9ibVYzSUZWcGJuUTRRWEp5WVhrb1pTa3BMR01wZlNsOWNtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTG5Sb1pXNG9LQ2s5UG0xaEtHRXBLWDFtZFc1amRHbHZiaUJ2WVNoaExHSXNZeWw3Y21WMGRYSnVJRzVoS0dFcExuUm9aVzRvWlQwK1YyVmlRWE56WlcxaWJIa3VhVzV6ZEdGdWRHbGhkR1VvWlN4aUtTa3VkR2hsYmlobFBUNWxLUzUwYUdWdUtHTXNaVDArZTBVb1hDSm1ZV2xzWldRZ2RHOGdZWE41Ym1Ob2NtOXViM1Z6YkhrZ2NISmxjR0Z5WlNCM1lYTnRPaUJjSWl0bEtUdEhLR1VwZlNsOVhHNW1kVzVqZEdsdmJpQndZU2hoTEdJcGUzWmhjaUJqUFZFN2NtVjBkWEp1SUVaOGZGd2lablZ1WTNScGIyNWNJaUU5ZEhsd1pXOW1JRmRsWWtGemMyVnRZbXg1TG1sdWMzUmhiblJwWVhSbFUzUnlaV0Z0YVc1bmZIeHJZU2hqS1h4OFl5NXpkR0Z5ZEhOWGFYUm9LRndpWm1sc1pUb3ZMMXdpS1h4OFltRjhmRndpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUdabGRHTm9QMjloS0dNc1lTeGlLVHBtWlhSamFDaGpMSHRqY21Wa1pXNTBhV0ZzY3pwY0luTmhiV1V0YjNKcFoybHVYQ0o5S1M1MGFHVnVLR1U5UGxkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxVM1J5WldGdGFXNW5LR1VzWVNrdWRHaGxiaWhpTEdaMWJtTjBhVzl1S0djcGUwVW9YQ0ozWVhOdElITjBjbVZoYldsdVp5QmpiMjF3YVd4bElHWmhhV3hsWkRvZ1hDSXJaeWs3UlNoY0ltWmhiR3hwYm1jZ1ltRmpheUIwYnlCQmNuSmhlVUoxWm1abGNpQnBibk4wWVc1MGFXRjBhVzl1WENJcE8zSmxkSFZ5YmlCdllTaGpMR0VzWWlsOUtTbDlkbUZ5SUZJc1V6MWhQVDU3Wm05eUtEc3dQR0V1YkdWdVozUm9PeWxoTG5Ob2FXWjBLQ2tvWkNsOU8xeHVablZ1WTNScGIyNGdjV0VvWVNsN2RHaHBjeTVLWVQxaExUSTBPM1JvYVhNdVRtRTlablZ1WTNScGIyNG9ZaWw3VFZ0MGFHbHpMa3BoS3pRK1BqSStQajR3WFQxaWZUdDBhR2x6TGsxaFBXWjFibU4wYVc5dUtHSXBlMDFiZEdocGN5NUtZU3M0UGo0eVBqNCtNRjA5WW4wN2RHaHBjeTVMWVQxbWRXNWpkR2x2YmloaUxHTXBlM1JvYVhNdVRHRW9LVHQwYUdsekxrNWhLR0lwTzNSb2FYTXVUV0VvWXlsOU8zUm9hWE11VEdFOVpuVnVZM1JwYjI0b0tYdE5XM1JvYVhNdVNtRXJNVFkrUGpJK1BqNHdYVDB3ZlgxY2JuWmhjaUJ5WVQwd0xITmhQVEFzZEdFOVhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JRlJsZUhSRVpXTnZaR1Z5UDI1bGR5QlVaWGgwUkdWamIyUmxjaWhjSW5WMFpqaGNJaWs2ZG05cFpDQXdMSFZoUFNoaExHSXNZeWs5UG50aVBqNCtQVEE3ZG1GeUlHVTlZaXRqTzJadmNpaGpQV0k3WVZ0alhTWW1JU2hqUGoxbEtUc3BLeXRqTzJsbUtERTJQR010WWlZbVlTNWlkV1ptWlhJbUpuUmhLWEpsZEhWeWJpQjBZUzVrWldOdlpHVW9ZUzV6ZFdKaGNuSmhlU2hpTEdNcEtUdG1iM0lvWlQxY0lsd2lPMkk4WXpzcGUzWmhjaUJuUFdGYllpc3JYVHRwWmlobkpqRXlPQ2w3ZG1GeUlHZzlZVnRpS3l0ZEpqWXpPMmxtS0RFNU1qMDlLR2NtTWpJMEtTbGxLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0NobkpqTXhLVHc4Tm54b0tUdGxiSE5sZTNaaGNpQnRQV0ZiWWlzclhTWTJNenRuUFRJeU5EMDlLR2NtTWpRd0tUOG9aeVl4TlNrOFBERXlmR2c4UERaOGJUb29aeVkzS1R3OE1UaDhhRHc4TVRKOGJUdzhObnhoVzJJcksxMG1Oak03TmpVMU16WStaejlsS3oxVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtHY3BPaWhuTFQwMk5UVXpOaXhsS3oxVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtEVTFNamsyZkdjK1BqRXdMRFUyTXpJd2ZHY21NVEF5TXlrcGZYMWxiSE5sSUdVclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9aeWw5Y21WMGRYSnVJR1Y5TEZ4dVZEMG9ZU3hpS1QwK0tHRStQajQ5TUNrL2RXRW9TeXhoTEdJcE9sd2lYQ0lzVlQxaFBUNTdabTl5S0haaGNpQmlQVEFzWXowd08yTThZUzVzWlc1bmRHZzdLeXRqS1h0MllYSWdaVDFoTG1Ob1lYSkRiMlJsUVhRb1l5azdNVEkzUGoxbFAySXJLem95TURRM1BqMWxQMklyUFRJNk5UVXlPVFk4UFdVbUpqVTNNelF6UGoxbFB5aGlLejAwTENzcll5azZZaXM5TTMxeVpYUjFjbTRnWW4wc1ZqMG9ZU3hpTEdNc1pTazlQbnRqUGo0K1BUQTdhV1lvSVNnd1BHVXBLWEpsZEhWeWJpQXdPM1poY2lCblBXTTdaVDFqSzJVdE1UdG1iM0lvZG1GeUlHZzlNRHRvUEdFdWJHVnVaM1JvT3lzcmFDbDdkbUZ5SUcwOVlTNWphR0Z5UTI5a1pVRjBLR2dwTzJsbUtEVTFNamsyUEQxdEppWTFOek0wTXo0OWJTbDdkbUZ5SUhFOVlTNWphR0Z5UTI5a1pVRjBLQ3NyYUNrN2JUMDJOVFV6Tmlzb0tHMG1NVEF5TXlrOFBERXdLWHh4SmpFd01qTjlhV1lvTVRJM1BqMXRLWHRwWmloalBqMWxLV0p5WldGck8ySmJZeXNyUGo0K01GMDliWDFsYkhObGUybG1LREl3TkRjK1BXMHBlMmxtS0dNck1UNDlaU2xpY21WaGF6dGlXMk1yS3o0K1BqQmRQVEU1TW54dFBqNDJmV1ZzYzJWN2FXWW9OalUxTXpVK1BXMHBlMmxtS0dNck1qNDlaU2xpY21WaGF6dGlXMk1yS3o0K1BqQmRQVEl5Tkh4dFBqNHhNbjFsYkhObGUybG1LR01yTXo0OVhHNWxLV0p5WldGck8ySmJZeXNyUGo0K01GMDlNalF3ZkcwK1BqRTRPMkpiWXlzclBqNCtNRjA5TVRJNGZHMCtQakV5SmpZemZXSmJZeXNyUGo0K01GMDlNVEk0ZkcwK1BqWW1Oak45WWx0akt5cytQajR3WFQweE1qaDhiU1kyTTMxOVlsdGpQajQrTUYwOU1EdHlaWFIxY200Z1l5MW5mU3hYUFdFOVBqQTlQVDFoSlRRbUppZ3dJVDA5WVNVeE1EQjhmREE5UFQxaEpUUXdNQ2tzZG1FOVd6QXNNekVzTmpBc09URXNNVEl4TERFMU1pd3hPRElzTWpFekxESTBOQ3d5TnpRc016QTFMRE16TlYwc2QyRTlXekFzTXpFc05Ua3NPVEFzTVRJd0xERTFNU3d4T0RFc01qRXlMREkwTXl3eU56TXNNekEwTERNek5GMHNRbUU5WVQwK2UzWmhjaUJpUFZVb1lTa3JNU3hqUFVGaEtHSXBPMk1tSmxZb1lTeExMR01zWWlrN2NtVjBkWEp1SUdOOUxGZzllMzBzUTJFOUtDazlQbnRwWmlnaFdTbDdkbUZ5SUdFOWUxVlRSVkk2WENKM1pXSmZkWE5sY2x3aUxFeFBSMDVCVFVVNlhDSjNaV0pmZFhObGNsd2lMRkJCVkVnNlhDSXZYQ0lzVUZkRU9sd2lMMXdpTEVoUFRVVTZYQ0l2YUc5dFpTOTNaV0pmZFhObGNsd2lMRXhCVGtjNktGd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQnVZWFpwWjJGMGIzSW1KbTVoZG1sbllYUnZjaTVzWVc1bmRXRm5aWE1tSm01aGRtbG5ZWFJ2Y2k1c1lXNW5kV0ZuWlhOYk1GMThmRndpUTF3aUtTNXlaWEJzWVdObEtGd2lMVndpTEZ4dVhDSmZYQ0lwSzF3aUxsVlVSaTA0WENJc1h6cDJmSHhjSWk0dmRHaHBjeTV3Y205bmNtRnRYQ0o5TEdJN1ptOXlLR0lnYVc0Z1dDbDJiMmxrSURBOVBUMVlXMkpkUDJSbGJHVjBaU0JoVzJKZE9tRmJZbDA5V0Z0aVhUdDJZWElnWXoxYlhUdG1iM0lvWWlCcGJpQmhLV011Y0hWemFDaGdKSHRpZlQwa2UyRmJZbDE5WUNrN1dUMWpmWEpsZEhWeWJpQlpmU3haTEVSaFBWdHVkV3hzTEZ0ZExGdGRYU3hGWVQxYk16RXNNamtzTXpFc016QXNNekVzTXpBc016RXNNekVzTXpBc016RXNNekFzTXpGZExFWmhQVnN6TVN3eU9Dd3pNU3d6TUN3ek1Td3pNQ3d6TVN3ek1Td3pNQ3d6TVN3ek1Dd3pNVjA3Wm5WdVkzUnBiMjRnUjJFb1lTbDdkbUZ5SUdJOVFYSnlZWGtvVlNoaEtTc3hLVHRXS0dFc1lpd3dMR0l1YkdWdVozUm9LVHR5WlhSMWNtNGdZbjFjYm1aMWJtTjBhVzl1SUVoaEtHRXNZaXhqTEdVcGUyWjFibU4wYVc5dUlHY29aaXh1TEhBcGUyWnZjaWhtUFZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCbVAyWXVkRzlUZEhKcGJtY29LVHBtZkh4Y0lsd2lPMll1YkdWdVozUm9QRzQ3S1dZOWNGc3dYU3RtTzNKbGRIVnliaUJtZldaMWJtTjBhVzl1SUdnb1ppeHVLWHR5WlhSMWNtNGdaeWhtTEc0c1hDSXdYQ0lwZldaMWJtTjBhVzl1SUcwb1ppeHVLWHRtZFc1amRHbHZiaUJ3S0hoaEtYdHlaWFIxY200Z01ENTRZVDh0TVRvd1BIaGhQekU2TUgxMllYSWdlanN3UFQwOUtIbzljQ2htTG1kbGRFWjFiR3haWldGeUtDa3RiaTVuWlhSR2RXeHNXV1ZoY2lncEtTa21KakE5UFQwb2VqMXdLR1l1WjJWMFRXOXVkR2dvS1MxdUxtZGxkRTF2Ym5Sb0tDa3BLU1ltS0hvOWNDaG1MbWRsZEVSaGRHVW9LUzF1TG1kbGRFUmhkR1VvS1NrcE8zSmxkSFZ5YmlCNmZXWjFibU4wYVc5dUlIRW9aaWw3YzNkcGRHTm9LR1l1WjJWMFJHRjVLQ2twZTJOaGMyVWdNRHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTWprcE8yTmhjMlVnTVRweVpYUjFjbTRnWmp0allYTmxJREk2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMRE1wTzJOaGMyVWdNenB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExGeHVNQ3d5S1R0allYTmxJRFE2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwTzJOaGMyVWdOVHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTXpFcE8yTmhjMlVnTmpweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc016QXBmWDFtZFc1amRHbHZiaUIzS0dZcGUzWmhjaUJ1UFdZdVJXRTdabTl5S0dZOWJtVjNJRVJoZEdVb0tHNWxkeUJFWVhSbEtHWXVSbUVyTVRrd01Dd3dMREVwS1M1blpYUlVhVzFsS0NrcE96QThianNwZTNaaGNpQndQV1l1WjJWMFRXOXVkR2dvS1N4NlBTaFhLR1l1WjJWMFJuVnNiRmxsWVhJb0tTay9SV0U2Um1FcFczQmRPMmxtS0c0K2VpMW1MbWRsZEVSaGRHVW9LU2x1TFQxNkxXWXVaMlYwUkdGMFpTZ3BLekVzWmk1elpYUkVZWFJsS0RFcExERXhQbkEvWmk1elpYUk5iMjUwYUNod0t6RXBPaWhtTG5ObGRFMXZiblJvS0RBcExHWXVjMlYwUm5Wc2JGbGxZWElvWmk1blpYUkdkV3hzV1dWaGNpZ3BLekVwS1R0bGJITmxlMll1YzJWMFJHRjBaU2htTG1kbGRFUmhkR1VvS1N0dUtUdGljbVZoYTMxOWNEMXVaWGNnUkdGMFpTaG1MbWRsZEVaMWJHeFpaV0Z5S0Nrck1Td3dMRFFwTzI0OWNTaHVaWGNnUkdGMFpTaG1MbWRsZEVaMWJHeFpaV0Z5S0Nrc1hHNHdMRFFwS1R0d1BYRW9jQ2s3Y21WMGRYSnVJREErUFcwb2JpeG1LVDh3UGoxdEtIQXNaaWsvWmk1blpYUkdkV3hzV1dWaGNpZ3BLekU2Wmk1blpYUkdkV3hzV1dWaGNpZ3BPbVl1WjJWMFJuVnNiRmxsWVhJb0tTMHhmV0UrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzJVK1BqNDlNRHQyWVhJZ2REMU1XMlVyTkRBK1BqSStQajR3WFR0bFBYdFJZVHBNVzJVK1BqSStQajR3WFN4UVlUcE1XMlVyTkQ0K01qNCtQakJkTEVkaE9reGJaU3M0UGo0eVBqNCtNRjBzU1dFNlRGdGxLekV5UGo0eVBqNCtNRjBzU0dFNlRGdGxLekUyUGo0eVBqNCtNRjBzUm1FNlRGdGxLekl3UGo0eVBqNCtNRjBzZW1FNlRGdGxLekkwUGo0eVBqNCtNRjBzUldFNlRGdGxLekk0UGo0eVBqNCtNRjBzVTJFNlRGdGxLek15UGo0eVBqNCtNRjBzVDJFNlRGdGxLek0yUGo0eVBqNCtNRjBzVW1FNmREOVVLSFFwT2x3aVhDSjlPMk05VkNoaktUdDBQWHRjSWlWalhDSTZYQ0lsWVNBbFlpQWxaQ0FsU0RvbFRUb2xVeUFsV1Z3aUxGd2lKVVJjSWpwY0lpVnRMeVZrTHlWNVhDSXNYQ0lsUmx3aU9sd2lKVmt0SlcwdEpXUmNJaXhjSWlWb1hDSTZYQ0lsWWx3aUxGd2lKWEpjSWpwY0lpVkpPaVZOT2lWVElDVndYQ0lzWENJbFVsd2lPbHdpSlVnNkpVMWNJaXhjSWlWVVhDSTZYQ0lsU0RvbFRUb2xVMXdpTEZ3aUpYaGNJanBjSWlWdEx5VmtMeVY1WENJc1hDSWxXRndpT2x3aUpVZzZKVTA2SlZOY0lpeGNJaVZGWTF3aU9sd2lKV05jSWl4Y2Jsd2lKVVZEWENJNlhDSWxRMXdpTEZ3aUpVVjRYQ0k2WENJbGJTOGxaQzhsZVZ3aUxGd2lKVVZZWENJNlhDSWxTRG9sVFRvbFUxd2lMRndpSlVWNVhDSTZYQ0lsZVZ3aUxGd2lKVVZaWENJNlhDSWxXVndpTEZ3aUpVOWtYQ0k2WENJbFpGd2lMRndpSlU5bFhDSTZYQ0lsWlZ3aUxGd2lKVTlJWENJNlhDSWxTRndpTEZ3aUpVOUpYQ0k2WENJbFNWd2lMRndpSlU5dFhDSTZYQ0lsYlZ3aUxGd2lKVTlOWENJNlhDSWxUVndpTEZ3aUpVOVRYQ0k2WENJbFUxd2lMRndpSlU5MVhDSTZYQ0lsZFZ3aUxGd2lKVTlWWENJNlhDSWxWVndpTEZ3aUpVOVdYQ0k2WENJbFZsd2lMRndpSlU5M1hDSTZYQ0lsZDF3aUxGd2lKVTlYWENJNlhDSWxWMXdpTEZ3aUpVOTVYQ0k2WENJbGVWd2lmVHRtYjNJb2RtRnlJSFVnYVc0Z2RDbGpQV011Y21Wd2JHRmpaU2h1WlhjZ1VtVm5SWGh3S0hVc1hDSm5YQ0lwTEhSYmRWMHBPM1poY2lCNVlUMWNJbE4xYm1SaGVTQk5iMjVrWVhrZ1ZIVmxjMlJoZVNCWFpXUnVaWE5rWVhrZ1ZHaDFjbk5rWVhrZ1JuSnBaR0Y1SUZOaGRIVnlaR0Y1WENJdWMzQnNhWFFvWENJZ1hDSXBMSHBoUFZ3aVNtRnVkV0Z5ZVNCR1pXSnlkV0Z5ZVNCTllYSmphQ0JCY0hKcGJDQk5ZWGtnU25WdVpTQktkV3g1SUVGMVozVnpkQ0JUWlhCMFpXMWlaWElnVDJOMGIySmxjaUJPYjNabGJXSmxjaUJFWldObGJXSmxjbHdpTG5Od2JHbDBLRndpSUZ3aUtUdDBQWHRjSWlWaFhDSTZaajArZVdGYlppNTZZVjB1YzNWaWMzUnlhVzVuS0RBc015a3NYQ0lsUVZ3aU9tWTlQbmxoVzJZdWVtRmRMRndpSldKY0lqcG1QVDVjYm5waFcyWXVTR0ZkTG5OMVluTjBjbWx1Wnlnd0xETXBMRndpSlVKY0lqcG1QVDU2WVZ0bUxraGhYU3hjSWlWRFhDSTZaajArYUNnb1ppNUdZU3N4T1RBd0tTOHhNREI4TUN3eUtTeGNJaVZrWENJNlpqMCthQ2htTGtsaExESXBMRndpSldWY0lqcG1QVDVuS0dZdVNXRXNNaXhjSWlCY0lpa3NYQ0lsWjF3aU9tWTlQbmNvWmlrdWRHOVRkSEpwYm1jb0tTNXpkV0p6ZEhKcGJtY29NaWtzWENJbFIxd2lPbVk5UG5jb1ppa3NYQ0lsU0Z3aU9tWTlQbWdvWmk1SFlTd3lLU3hjSWlWSlhDSTZaajArZTJZOVppNUhZVHN3UFQxbVAyWTlNVEk2TVRJOFppWW1LR1l0UFRFeUtUdHlaWFIxY200Z2FDaG1MRElwZlN4Y0lpVnFYQ0k2WmowK2UyWnZjaWgyWVhJZ2JqMHdMSEE5TUR0d1BEMW1Ma2hoTFRFN2JpczlLRmNvWmk1R1lTc3hPVEF3S1Q5RllUcEdZU2xiY0NzclhTazdjbVYwZFhKdUlHZ29aaTVKWVN0dUxETXBmU3hjSWlWdFhDSTZaajArYUNobUxraGhLekVzTWlrc1hDSWxUVndpT21ZOVBtZ29aaTVRWVN3eUtTeGNJaVZ1WENJNktDazlQbHdpWEZ4dVhDSXNYQ0lsY0Z3aU9tWTlQakE4UFdZdVIyRW1KakV5UG1ZdVIyRS9YQ0pCVFZ3aU9sd2lVRTFjSWl4Y0lpVlRYQ0k2WmowK2FDaG1MbEZoTERJcExGd2lKWFJjSWpvb0tUMCtYQ0pjWEhSY0lpeGNJaVYxWENJNlpqMCtaaTU2WVh4OE55eGNJaVZWWENJNlpqMCthQ2hOWVhSb0xtWnNiMjl5S0NobUxrVmhLemN0Wmk1NllTa3ZOeWtzTWlrc1hDSWxWbHdpT21ZOVBseHVlM1poY2lCdVBVMWhkR2d1Wm14dmIzSW9LR1l1UldFck55MG9aaTU2WVNzMktTVTNLUzgzS1RzeVBqMG9aaTU2WVNzek56RXRaaTVGWVMweUtTVTNKaVp1S3lzN2FXWW9iaWsxTXowOWJpWW1LSEE5S0dZdWVtRXJNemN4TFdZdVJXRXBKVGNzTkQwOWNIeDhNejA5Y0NZbVZ5aG1Ma1poS1h4OEtHNDlNU2twTzJWc2MyVjdiajAxTWp0MllYSWdjRDBvWmk1NllTczNMV1l1UldFdE1Ta2xOenNvTkQwOWNIeDhOVDA5Y0NZbVZ5aG1Ma1poSlRRd01DMHhLU2ttSm00ckszMXlaWFIxY200Z2FDaHVMRElwZlN4Y0lpVjNYQ0k2WmowK1ppNTZZU3hjSWlWWFhDSTZaajArYUNoTllYUm9MbVpzYjI5eUtDaG1Ma1ZoS3pjdEtHWXVlbUVyTmlrbE55a3ZOeWtzTWlrc1hDSWxlVndpT21ZOVBpaG1Ma1poS3pFNU1EQXBMblJ2VTNSeWFXNW5LQ2t1YzNWaWMzUnlhVzVuS0RJcExGd2lKVmxjSWpwbVBUNW1Ma1poS3pFNU1EQXNYQ0lsZWx3aU9tWTlQbnRtUFdZdVQyRTdkbUZ5SUc0OU1EdzlaanRtUFUxaGRHZ3VZV0p6S0dZcEx6WXdPM0psZEhWeWJpaHVQMXdpSzF3aU9sd2lMVndpS1N0VGRISnBibWNvWENJd01EQXdYQ0lyS0dZdk5qQXFNVEF3SzJZbE5qQXBLUzV6YkdsalpTZ3ROQ2w5TEZ3aUpWcGNJanBtUFQ1bUxsSmhMRndpSlNWY0lqb29LVDArWENJbFhDSjlPMk05WXk1eVpYQnNZV05sS0M4bEpTOW5MRndpWEZ4NE1EQmNYSGd3TUZ3aUtUdG1iM0lvZFNCcGJpQjBLV011YVc1amJIVmtaWE1vZFNrbUpseHVLR005WXk1eVpYQnNZV05sS0c1bGR5QlNaV2RGZUhBb2RTeGNJbWRjSWlrc2RGdDFYU2hsS1NrcE8yTTlZeTV5WlhCc1lXTmxLQzljWERCY1hEQXZaeXhjSWlWY0lpazdkVDFIWVNoaktUdHBaaWgxTG14bGJtZDBhRDVpS1hKbGRIVnliaUF3TzBvdWMyVjBLSFVzWVQ0K1BqQXBPM0psZEhWeWJpQjFMbXhsYm1kMGFDMHhmVnh1ZG1GeUlFcGhQWHRoT21aMWJtTjBhVzl1S0dFc1lpeGpLWHRoUGo0K1BUQTdLRzVsZHlCeFlTaGhLU2t1UzJFb1lqNCtQakFzWXo0K1BqQXBPM0poUFdFN2MyRXJLenQwYUhKdmR5QnlZVHQ5TEdVNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z01IMHNTRHBtZFc1amRHbHZiaWdwZTMwc2VEcG1kVzVqZEdsdmJpZ3BlMzBzZWpwbWRXNWpkR2x2YmlncGUzMHNhenBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUF3ZlN4R09tWjFibU4wYVc5dUtDbDdmU3hDT21aMWJtTjBhVzl1S0NsN2ZTeEZPbVoxYm1OMGFXOXVLQ2w3ZlN4bk9tWjFibU4wYVc5dUtDbDdmU3g1T21aMWJtTjBhVzl1S0NsN2ZTeDJPbVoxYm1OMGFXOXVLQ2w3ZlN4SE9tWjFibU4wYVc5dUtDbDdmU3gzT21aMWJtTjBhVzl1S0NsN2ZTeHNPaWdwUFQ0aE1DeHZPbVoxYm1OMGFXOXVLR0VzWWl4aktYdGhQV0lyTWpBNU56RTFNajQrUGpBOE5ERTVORE13TlMwaElXRS9LR0UrUGo0d0tTczBNamswT1RZM01qazJLbUk2VG1GT08yTStQajQ5TUR0aFBXNWxkeUJFWVhSbEtERkZNeXBoS1R0TVcyTStQakkrUGo0d1hUMWhMbWRsZEZWVVExTmxZMjl1WkhNb0tUdE1XMk1yTkQ0K01qNCtQakJkUFdFdVoyVjBWVlJEVFdsdWRYUmxjeWdwTzB4Yll5czRQajR5UGo0K01GMDlZUzVuWlhSVlZFTkliM1Z5Y3lncE8weGJZeXN4TWo0K01qNCtQbHh1TUYwOVlTNW5aWFJWVkVORVlYUmxLQ2s3VEZ0akt6RTJQajR5UGo0K01GMDlZUzVuWlhSVlZFTk5iMjUwYUNncE8weGJZeXN5TUQ0K01qNCtQakJkUFdFdVoyVjBWVlJEUm5Wc2JGbGxZWElvS1MweE9UQXdPMHhiWXlzeU5ENCtNajQrUGpCZFBXRXVaMlYwVlZSRFJHRjVLQ2s3VEZ0akt6STRQajR5UGo0K01GMDlLR0V1WjJWMFZHbHRaU2dwTFVSaGRHVXVWVlJES0dFdVoyVjBWVlJEUm5Wc2JGbGxZWElvS1N3d0xERXNNQ3d3TERBc01Da3BMemcyTkVVMWZEQjlMSEE2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkU5WWlzeU1EazNNVFV5UGo0K01EdzBNVGswTXpBMUxTRWhZVDhvWVQ0K1BqQXBLelF5T1RRNU5qY3lPVFlxWWpwT1lVNDdZejQrUGowd08yRTlibVYzSUVSaGRHVW9NVVV6S21FcE8weGJZejQrTWo0K1BqQmRQV0V1WjJWMFUyVmpiMjVrY3lncE8weGJZeXMwUGo0eVBqNCtNRjA5WVM1blpYUk5hVzUxZEdWektDazdURnRqS3pnK1BqSStQajR3WFQxaExtZGxkRWh2ZFhKektDazdURnRqS3pFeVBqNHlQajQrTUYwOVlTNW5aWFJFWVhSbEtDazdURnRqS3pFMlBqNHlQajQrTUYwOVlTNW5aWFJOYjI1MGFDZ3BPMHhiWXlzeU1ENCtNajQrUGpCZFBXRXVaMlYwUm5Wc2JGbGxZWElvS1MweE9UQXdPMHhiWXlzeU5ENCtNajQrUGpCZFBXRXVaMlYwUkdGNUtDazdURnRqS3pJNFBqNHlQajQrWEc0d1hUMG9WeWhoTG1kbGRFWjFiR3haWldGeUtDa3BQM1poT25kaEtWdGhMbWRsZEUxdmJuUm9LQ2xkSzJFdVoyVjBSR0YwWlNncExURjhNRHRNVzJNck16WStQakkrUGo0d1hUMHRLRFl3S21FdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTazdZajBvYm1WM0lFUmhkR1VvWVM1blpYUkdkV3hzV1dWaGNpZ3BMRFlzTVNrcExtZGxkRlJwYldWNmIyNWxUMlptYzJWMEtDazdkbUZ5SUdVOUtHNWxkeUJFWVhSbEtHRXVaMlYwUm5Wc2JGbGxZWElvS1N3d0xERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTzB4Yll5c3pNajQrTWo0K1BqQmRQU2hpSVQxbEppWmhMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s5UFUxaGRHZ3ViV2x1S0dVc1lpa3BmREI5TEhFNlpuVnVZM1JwYjI0b1lTbDdZVDQrUGowd08zWmhjaUJpUFc1bGR5QkVZWFJsS0V4YllTc3lNRDQrTWo0K1BqQmRLekU1TURBc1RGdGhLekUyUGo0eVBqNCtNRjBzVEZ0aEt6RXlQajR5UGo0K01GMHNURnRoS3pnK1BqSStQajR3WFN4TVcyRXJORDQrTWo0K1BqQmRMRXhiWVQ0K01qNCtQakJkTERBcExHTTlURnRoS3pNeVBqNHlQajQrTUYwc1pUMWlMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2tzWnowb2JtVjNJRVJoZEdVb1lpNW5aWFJHZFd4c1dXVmhjaWdwTERZc01Ta3BMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2tzWEc1b1BTaHVaWGNnUkdGMFpTaGlMbWRsZEVaMWJHeFpaV0Z5S0Nrc01Dd3hLU2t1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1N4dFBVMWhkR2d1YldsdUtHZ3NaeWs3TUQ1alAweGJZU3N6TWo0K01qNCtQakJkUFU1MWJXSmxjaWhuSVQxb0ppWnRQVDFsS1Rvd1BHTWhQU2h0UFQxbEtTWW1LR2M5VFdGMGFDNXRZWGdvYUN4bktTeGlMbk5sZEZScGJXVW9ZaTVuWlhSVWFXMWxLQ2tyTmtVMEtpZ29NRHhqUDIwNlp5a3RaU2twS1R0TVcyRXJNalErUGpJK1BqNHdYVDFpTG1kbGRFUmhlU2dwTzB4YllTc3lPRDQrTWo0K1BqQmRQU2hYS0dJdVoyVjBSblZzYkZsbFlYSW9LU2svZG1FNmQyRXBXMkl1WjJWMFRXOXVkR2dvS1YwcllpNW5aWFJFWVhSbEtDa3RNWHd3TzB4YllUNCtNajQrUGpCZFBXSXVaMlYwVTJWamIyNWtjeWdwTzB4YllTczBQajR5UGo0K01GMDlZaTVuWlhSTmFXNTFkR1Z6S0NrN1RGdGhLemcrUGpJK1BqNHdYVDFpTG1kbGRFaHZkWEp6S0NrN1RGdGhLekV5UGo0eVBqNCtNRjA5WWk1blpYUkVZWFJsS0NrN1RGdGhLekUyUGo0eVBqNCtNRjA5WWk1blpYUk5iMjUwYUNncE8weGJZU3N5TUQ0K01qNCtQakJkUFdJdVoyVjBXV1ZoY2lncE8yRTlZaTVuWlhSVWFXMWxLQ2t2TVVVek8zSmxkSFZ5YmlCSllTZ29VajFoTERFOFBTdE5ZWFJvTG1GaWN5aFNLVDh3UEZJL0swMWhkR2d1Wm14dmIzSW9VaTljYmpReU9UUTVOamN5T1RZcFBqNCtNRHArZml0TllYUm9MbU5sYVd3b0tGSXRLeWgrZmxJK1BqNHdLU2t2TkRJNU5EazJOekk1TmlrK1BqNHdPakFwS1N4aFBqNCtNSDBzYlRwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmkwMU1uMHNianBtZFc1amRHbHZiaWdwZTMwc2REcG1kVzVqZEdsdmJpaGhMR0lzWXlsN1puVnVZM1JwYjI0Z1pTaDNLWHR5WlhSMWNtNG9kejEzTG5SdlZHbHRaVk4wY21sdVp5Z3BMbTFoZEdOb0tDOWNYQ2dvVzBFdFdtRXRlaUJkS3lsY1hDa2tMeWtwUDNkYk1WMDZYQ0pIVFZSY0luMWpQajQrUFRBN2RtRnlJR2M5S0c1bGR5QkVZWFJsS1M1blpYUkdkV3hzV1dWaGNpZ3BMR2c5Ym1WM0lFUmhkR1VvWnl3d0xERXBMRzA5Ym1WM0lFUmhkR1VvWnl3MkxERXBPMmM5YUM1blpYUlVhVzFsZW05dVpVOW1abk5sZENncE8zWmhjaUJ4UFcwdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tUdE5XMkUrUGo0d1BqNHlQajQrTUYwOU5qQXFUV0YwYUM1dFlYZ29aeXh4S1R0TVcySStQajR3UGo0eVBqNCtNRjA5VG5WdFltVnlLR2NoUFhFcE8yRTlaU2hvS1R0aVBXVW9iU2s3WVQxQ1lTaGhLVHRpUFVKaEtHSXBPM0U4Wno4b1RWdGpQajR5UGo0K01GMDlZU3hOVzJNck5ENCtNajQrUGpCZFBXSXBPaWhOVzJNK1BqSStQajR3WFQxaUxFMWJZeXMwUGo0eVBqNCtNRjA5WVNsOUxHUTZLQ2s5UG50SEtGd2lYQ0lwZlN4Y2JtZzZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdSR0YwWlM1dWIzY29LWDBzZFRwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlBME1qazBPVEF4TnpZd2ZTeGlPaWdwUFQ1d1pYSm1iM0p0WVc1alpTNXViM2NvS1N4Sk9tWjFibU4wYVc5dUtHRXNZaXhqS1h0aVBqNCtQVEE3Y21WMGRYSnVJRXN1WTI5d2VWZHBkR2hwYmloaFBqNCtNRDQrUGpBc1lqNCtQakFzWWlzb1l6NCtQakFwUGo0K01DbDlMSE02Wm5WdVkzUnBiMjRvWVNsN1lUNCtQajB3TzNaaGNpQmlQVXN1YkdWdVozUm9PMmxtS0RReU9UUTVNREUzTmpBOFlTbHlaWFIxY200aE1UdG1iM0lvZG1GeUlHTTlNVHMwUGoxak8yTXFQVElwZTNaaGNpQmxQV0lxS0RFckxqSXZZeWs3WlQxTllYUm9MbTFwYmlobExHRXJNVEF3TmpZek1qazJLVHQyWVhJZ1p6MU5ZWFJvTzJVOVRXRjBhQzV0WVhnb1lTeGxLVHRoT250blBXY3ViV2x1TG1OaGJHd29aeXcwTWprME9UQXhOell3TEdVcktEWTFOVE0yTFdVbE5qVTFNellwSlRZMU5UTTJLUzFJTG1KMVptWmxjaTVpZVhSbFRHVnVaM1JvS3pZMU5UTTFQajQrTVRZN2RISjVlMGd1WjNKdmR5aG5LVHRsWVNncE8zWmhjaUJvUFRFN1luSmxZV3NnWVgxallYUmphQ2h0S1h0OWFEMTJiMmxrSURCOWFXWW9hQ2x5WlhSMWNtNGhNSDF5WlhSMWNtNGhNWDBzUXpwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OVhHNHdPMkkrUGo0OU1EdDJZWElnWXowd08wTmhLQ2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsTEdjcGUzWmhjaUJvUFdJcll6dG5QVTFiWVNzMEttYytQakkrUGo0d1hUMW9PMlp2Y2lob1BUQTdhRHhsTG14bGJtZDBhRHNySzJncFNsdG5LeXMrUGpBK1BqNHdYVDFsTG1Ob1lYSkRiMlJsUVhRb2FDazdTbHRuUGo0d1BqNCtNRjA5TUR0akt6MWxMbXhsYm1kMGFDc3hmU2s3Y21WMGRYSnVJREI5TEVRNlpuVnVZM1JwYjI0b1lTeGlLWHRoUGo0K1BUQTdZajQrUGowd08zWmhjaUJqUFVOaEtDazdUVnRoUGo0eVBqNCtNRjA5WXk1c1pXNW5kR2c3ZG1GeUlHVTlNRHRqTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWnlsN1pTczlaeTVzWlc1bmRHZ3JNWDBwTzAxYllqNCtNajQrUGpCZFBXVTdjbVYwZFhKdUlEQjlMR1k2S0NrOVBqVXlMR282Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnTlRKOUxISTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdOekI5TEdrNlpuVnVZM1JwYjI0b1lTeGlMR01zWlNsN1lqNCtQajB3TzJNK1BqNDlNRHRsUGo0K1BUQTdabTl5S0haaGNpQm5QVEFzYUQwd08yZzhZenRvS3lzcGUzWmhjaUJ0UFUxYllqNCtNajQrUGpCZExIRTlUVnRpS3pRK1BqSStQajR3WFR0aUt6MDRPMlp2Y2loMllYSWdkejB3TzNjOGNUdDNLeXNwZTNaaGNpQjBQVXRiYlN0M1BqNCtNRjBzZFQxY2JrUmhXMkZkT3pBOVBUMTBmSHd4TUQwOVBYUS9LQ2d4UFQwOVlUOWpZVHBGS1NoMVlTaDFMREFwS1N4MUxteGxibWQwYUQwd0tUcDFMbkIxYzJnb2RDbDlaeXM5Y1gxTlcyVStQakkrUGo0d1hUMW5PM0psZEhWeWJpQXdmU3hCT2toaExHTTZablZ1WTNScGIyNG9ZU3hpTEdNc1pTbDdjbVYwZFhKdUlFaGhLR0UrUGo0d0xHSStQajR3TEdNK1BqNHdMR1UrUGo0d0tYMTlPMXh1S0daMWJtTjBhVzl1S0NsN1puVnVZM1JwYjI0Z1lTaGpLWHRqUFdNdVpYaHdiM0owY3p0SlBXTTlTMkVvWXlrN1NEMUpMa283WldFb0tUdG9ZUzUxYm5Ob2FXWjBLRWt1U3lrN1RpMHRPMlF1Ylc5dWFYUnZjbEoxYmtSbGNHVnVaR1Z1WTJsbGN5WW1aQzV0YjI1cGRHOXlVblZ1UkdWd1pXNWtaVzVqYVdWektFNHBPMmxtS0RBOVBVNG1KaWh1ZFd4c0lUMDlUeVltS0dOc1pXRnlTVzUwWlhKMllXd29UeWtzVHoxdWRXeHNLU3hRS1NsN2RtRnlJR1U5VUR0UVBXNTFiR3c3WlNncGZYSmxkSFZ5YmlCamZYWmhjaUJpUFh0aE9rcGhmVHRPS3lzN1pDNXRiMjVwZEc5eVVuVnVSR1Z3Wlc1a1pXNWphV1Z6Smlaa0xtMXZibWwwYjNKU2RXNUVaWEJsYm1SbGJtTnBaWE1vVGlrN2FXWW9aQzVwYm5OMFlXNTBhV0YwWlZkaGMyMHBkSEo1ZTNKbGRIVnliaUJrTG1sdWMzUmhiblJwWVhSbFYyRnpiU2hpTEdFcGZXTmhkR05vS0dNcGUwVW9YQ0pOYjJSMWJHVXVhVzV6ZEdGdWRHbGhkR1ZYWVhOdElHTmhiR3hpWVdOcklHWmhhV3hsWkNCM2FYUm9JR1Z5Y205eU9pQmNJaXRqS1N4c0tHTXBmWEJoS0dJc1puVnVZM1JwYjI0b1l5bDdZU2hqTG1sdWMzUmhibU5sS1gwcExtTmhkR05vS0d3cE8zSmxkSFZ5Ym50OWZTa29LVHRjYm1RdVgwOXlkRWx1YVhROUtHRXNZaWs5UGloa0xsOVBjblJKYm1sMFBVa3VUQ2tvWVN4aUtUdGtMbDlQY25SSFpYUk1ZWE4wUlhKeWIzSTlLR0VzWWlrOVBpaGtMbDlQY25SSFpYUk1ZWE4wUlhKeWIzSTlTUzVOS1NoaExHSXBPMlF1WDA5eWRFTnlaV0YwWlZObGMzTnBiMjVQY0hScGIyNXpQU2hoTEdJc1l5eGxMR2NzYUN4dExIRXNkeXgwS1QwK0tHUXVYMDl5ZEVOeVpXRjBaVk5sYzNOcGIyNVBjSFJwYjI1elBVa3VUaWtvWVN4aUxHTXNaU3huTEdnc2JTeHhMSGNzZENrN1pDNWZUM0owUVhCd1pXNWtSWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSTlLR0VzWWlrOVBpaGtMbDlQY25SQmNIQmxibVJGZUdWamRYUnBiMjVRY205MmFXUmxjajFKTGs4cEtHRXNZaWs3WkM1ZlQzSjBRV1JrUm5KbFpVUnBiV1Z1YzJsdmJrOTJaWEp5YVdSbFBTaGhMR0lzWXlrOVBpaGtMbDlQY25SQlpHUkdjbVZsUkdsdFpXNXphVzl1VDNabGNuSnBaR1U5U1M1UUtTaGhMR0lzWXlrN1pDNWZUM0owUVdSa1UyVnpjMmx2YmtOdmJtWnBaMFZ1ZEhKNVBTaGhMR0lzWXlrOVBpaGtMbDlQY25SQlpHUlRaWE56YVc5dVEyOXVabWxuUlc1MGNuazlTUzVSS1NoaExHSXNZeWs3WkM1ZlQzSjBVbVZzWldGelpWTmxjM05wYjI1UGNIUnBiMjV6UFdFOVBpaGtMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiazl3ZEdsdmJuTTlTUzVTS1NoaEtUdGNibVF1WDA5eWRFTnlaV0YwWlZObGMzTnBiMjQ5S0dFc1lpeGpLVDArS0dRdVgwOXlkRU55WldGMFpWTmxjM05wYjI0OVNTNVRLU2hoTEdJc1l5azdaQzVmVDNKMFVtVnNaV0Z6WlZObGMzTnBiMjQ5WVQwK0tHUXVYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVQVWt1VkNrb1lTazdaQzVmVDNKMFIyVjBTVzV3ZFhSUGRYUndkWFJEYjNWdWREMG9ZU3hpTEdNcFBUNG9aQzVmVDNKMFIyVjBTVzV3ZFhSUGRYUndkWFJEYjNWdWREMUpMbFVwS0dFc1lpeGpLVHRrTGw5UGNuUkhaWFJKYm5CMWRFNWhiV1U5S0dFc1lpazlQaWhrTGw5UGNuUkhaWFJKYm5CMWRFNWhiV1U5U1M1V0tTaGhMR0lwTzJRdVgwOXlkRWRsZEU5MWRIQjFkRTVoYldVOUtHRXNZaWs5UGloa0xsOVBjblJIWlhSUGRYUndkWFJPWVcxbFBVa3VWeWtvWVN4aUtUdGtMbDlQY25SR2NtVmxQV0U5UGloa0xsOVBjblJHY21WbFBVa3VXQ2tvWVNrN1pDNWZUM0owUTNKbFlYUmxWR1Z1YzI5eVBTaGhMR0lzWXl4bExHY3NhQ2s5UGloa0xsOVBjblJEY21WaGRHVlVaVzV6YjNJOVNTNVpLU2hoTEdJc1l5eGxMR2NzYUNrN1pDNWZUM0owUjJWMFZHVnVjMjl5UkdGMFlUMG9ZU3hpTEdNc1pTeG5LVDArS0dRdVgwOXlkRWRsZEZSbGJuTnZja1JoZEdFOVNTNWFLU2hoTEdJc1l5eGxMR2NwTzF4dVpDNWZUM0owVW1Wc1pXRnpaVlJsYm5OdmNqMWhQVDRvWkM1ZlQzSjBVbVZzWldGelpWUmxibk52Y2oxSkxsOHBLR0VwTzJRdVgwOXlkRU55WldGMFpWSjFiazl3ZEdsdmJuTTlLR0VzWWl4akxHVXBQVDRvWkM1ZlQzSjBRM0psWVhSbFVuVnVUM0IwYVc5dWN6MUpMaVFwS0dFc1lpeGpMR1VwTzJRdVgwOXlkRUZrWkZKMWJrTnZibVpwWjBWdWRISjVQU2hoTEdJc1l5azlQaWhrTGw5UGNuUkJaR1JTZFc1RGIyNW1hV2RGYm5SeWVUMUpMbUZoS1NoaExHSXNZeWs3WkM1ZlQzSjBVbVZzWldGelpWSjFiazl3ZEdsdmJuTTlZVDArS0dRdVgwOXlkRkpsYkdWaGMyVlNkVzVQY0hScGIyNXpQVWt1WW1FcEtHRXBPMlF1WDA5eWRFTnlaV0YwWlVKcGJtUnBibWM5WVQwK0tHUXVYMDl5ZEVOeVpXRjBaVUpwYm1ScGJtYzlTUzVqWVNrb1lTazdaQzVmVDNKMFFtbHVaRWx1Y0hWMFBTaGhMR0lzWXlrOVBpaGtMbDlQY25SQ2FXNWtTVzV3ZFhROVNTNWtZU2tvWVN4aUxHTXBPMlF1WDA5eWRFSnBibVJQZFhSd2RYUTlLR0VzWWl4akxHVXBQVDRvWkM1ZlQzSjBRbWx1WkU5MWRIQjFkRDFKTG1WaEtTaGhMR0lzWXl4bEtUdGtMbDlQY25SRGJHVmhja0p2ZFc1a1QzVjBjSFYwY3oxaFBUNG9aQzVmVDNKMFEyeGxZWEpDYjNWdVpFOTFkSEIxZEhNOVNTNW1ZU2tvWVNrN1hHNWtMbDlQY25SU1pXeGxZWE5sUW1sdVpHbHVaejFoUFQ0b1pDNWZUM0owVW1Wc1pXRnpaVUpwYm1ScGJtYzlTUzVuWVNrb1lTazdaQzVmVDNKMFVuVnVWMmwwYUVKcGJtUnBibWM5S0dFc1lpeGpMR1VzWnlrOVBpaGtMbDlQY25SU2RXNVhhWFJvUW1sdVpHbHVaejFKTG1oaEtTaGhMR0lzWXl4bExHY3BPMlF1WDA5eWRGSjFiajBvWVN4aUxHTXNaU3huTEdnc2JTeHhLVDArS0dRdVgwOXlkRkoxYmoxSkxtbGhLU2hoTEdJc1l5eGxMR2NzYUN4dExIRXBPMlF1WDA5eWRFVnVaRkJ5YjJacGJHbHVaejFoUFQ0b1pDNWZUM0owUlc1a1VISnZabWxzYVc1blBVa3VhbUVwS0dFcE8yUXVYMDl5ZEZSeVlXbHVhVzVuVEc5aFpFTm9aV05yY0c5cGJuUTlLR0VzWWlrOVBpaGtMbDlQY25SVWNtRnBibWx1WjB4dllXUkRhR1ZqYTNCdmFXNTBQVWt1YTJFcEtHRXNZaWs3WkM1ZlQzSjBWSEpoYVc1cGJtZFNaV3hsWVhObFEyaGxZMnR3YjJsdWREMWhQVDRvWkM1ZlQzSjBWSEpoYVc1cGJtZFNaV3hsWVhObFEyaGxZMnR3YjJsdWREMUpMbXhoS1NoaEtUdGtMbDlQY25SVWNtRnBibWx1WjBOeVpXRjBaVk5sYzNOcGIyNDlLR0VzWWl4akxHVXNaeXhvTEcwc2NTazlQaWhrTGw5UGNuUlVjbUZwYm1sdVowTnlaV0YwWlZObGMzTnBiMjQ5U1M1dFlTa29ZU3hpTEdNc1pTeG5MR2dzYlN4eEtUdGNibVF1WDA5eWRGUnlZV2x1YVc1blRHRjZlVkpsYzJWMFIzSmhaRDFoUFQ0b1pDNWZUM0owVkhKaGFXNXBibWRNWVhwNVVtVnpaWFJIY21Ga1BVa3VibUVwS0dFcE8yUXVYMDl5ZEZSeVlXbHVhVzVuVW5WdVZISmhhVzVUZEdWd1BTaGhMR0lzWXl4bExHY3NhQ2s5UGloa0xsOVBjblJVY21GcGJtbHVaMUoxYmxSeVlXbHVVM1JsY0QxSkxtOWhLU2hoTEdJc1l5eGxMR2NzYUNrN1pDNWZUM0owVkhKaGFXNXBibWRQY0hScGJXbDZaWEpUZEdWd1BTaGhMR0lwUFQ0b1pDNWZUM0owVkhKaGFXNXBibWRQY0hScGJXbDZaWEpUZEdWd1BVa3VjR0VwS0dFc1lpazdaQzVmVDNKMFZISmhhVzVwYm1kRmRtRnNVM1JsY0Qwb1lTeGlMR01zWlN4bkxHZ3BQVDRvWkM1ZlQzSjBWSEpoYVc1cGJtZEZkbUZzVTNSbGNEMUpMbkZoS1NoaExHSXNZeXhsTEdjc2FDazdaQzVmVDNKMFZISmhhVzVwYm1kSFpYUlFZWEpoYldWMFpYSnpVMmw2WlQwb1lTeGlMR01wUFQ0b1pDNWZUM0owVkhKaGFXNXBibWRIWlhSUVlYSmhiV1YwWlhKelUybDZaVDFKTG5KaEtTaGhMR0lzWXlrN1pDNWZUM0owVkhKaGFXNXBibWREYjNCNVVHRnlZVzFsZEdWeWMxUnZRblZtWm1WeVBTaGhMR0lzWXl4bEtUMCtLR1F1WDA5eWRGUnlZV2x1YVc1blEyOXdlVkJoY21GdFpYUmxjbk5VYjBKMVptWmxjajFKTG5OaEtTaGhMR0lzWXl4bEtUdGNibVF1WDA5eWRGUnlZV2x1YVc1blEyOXdlVkJoY21GdFpYUmxjbk5HY205dFFuVm1abVZ5UFNoaExHSXNZeXhsS1QwK0tHUXVYMDl5ZEZSeVlXbHVhVzVuUTI5d2VWQmhjbUZ0WlhSbGNuTkdjbTl0UW5WbVptVnlQVWt1ZEdFcEtHRXNZaXhqTEdVcE8yUXVYMDl5ZEZSeVlXbHVhVzVuUjJWMFRXOWtaV3hKYm5CMWRFOTFkSEIxZEVOdmRXNTBQU2hoTEdJc1l5eGxLVDArS0dRdVgwOXlkRlJ5WVdsdWFXNW5SMlYwVFc5a1pXeEpibkIxZEU5MWRIQjFkRU52ZFc1MFBVa3VkV0VwS0dFc1lpeGpMR1VwTzJRdVgwOXlkRlJ5WVdsdWFXNW5SMlYwVFc5a1pXeEpibkIxZEU5MWRIQjFkRTVoYldVOUtHRXNZaXhqTEdVcFBUNG9aQzVmVDNKMFZISmhhVzVwYm1kSFpYUk5iMlJsYkVsdWNIVjBUM1YwY0hWMFRtRnRaVDFKTG5aaEtTaGhMR0lzWXl4bEtUdGtMbDlQY25SVWNtRnBibWx1WjFKbGJHVmhjMlZUWlhOemFXOXVQV0U5UGloa0xsOVBjblJVY21GcGJtbHVaMUpsYkdWaGMyVlRaWE56YVc5dVBVa3VkMkVwS0dFcE8zWmhjaUJCWVQxa0xsOXRZV3hzYjJNOVlUMCtLRUZoUFdRdVgyMWhiR3h2WXoxSkxuaGhLU2hoS1R0a0xsOW1jbVZsUFdFOVBpaGtMbDltY21WbFBVa3VlV0VwS0dFcE8xeHVkbUZ5SUVsaFBXRTlQaWhKWVQxSkxrRmhLU2hoS1N4TVlUMG9LVDArS0V4aFBVa3VRbUVwS0Nrc1RXRTlZVDArS0UxaFBVa3VRMkVwS0dFcExFNWhQV0U5UGloT1lUMUpMa1JoS1NoaEtUdG1kVzVqZEdsdmJpQkxZU2hoS1h0aFBVOWlhbVZqZEM1aGMzTnBaMjRvZTMwc1lTazdkbUZ5SUdJOVpUMCtLQ2s5UG1Vb0tUNCtQakFzWXoxbFBUNW5QVDVsS0djcFBqNCtNRHRoTGw5ZlpYSnlibTlmYkc5allYUnBiMjQ5WWloaExsOWZaWEp5Ym05ZmJHOWpZWFJwYjI0cE8yRXViV0ZzYkc5alBXTW9ZUzV0WVd4c2IyTXBPMkV1YzNSaFkydFRZWFpsUFdJb1lTNXpkR0ZqYTFOaGRtVXBPMkV1YzNSaFkydEJiR3h2WXoxaktHRXVjM1JoWTJ0QmJHeHZZeWs3Y21WMGRYSnVJR0Y5WkM1emRHRmphMEZzYkc5alBVNWhPMlF1YzNSaFkydFRZWFpsUFV4aE8yUXVjM1JoWTJ0U1pYTjBiM0psUFUxaE8yUXVWVlJHT0ZSdlUzUnlhVzVuUFZRN1pDNXpkSEpwYm1kVWIxVlVSamc5S0dFc1lpeGpLVDArVmloaExFc3NZaXhqS1R0a0xteGxibWQwYUVKNWRHVnpWVlJHT0QxVk8zWmhjaUJhTzFBOVpuVnVZM1JwYjI0Z1QyRW9LWHRhZkh4UVlTZ3BPMXA4ZkNoUVBVOWhLWDA3WEc1bWRXNWpkR2x2YmlCUVlTZ3BlMloxYm1OMGFXOXVJR0VvS1h0cFppZ2hXaVltS0ZvOUlUQXNaQzVqWVd4c1pXUlNkVzQ5SVRBc0lXUmhLU2w3VXlob1lTazdheWhrS1R0cFppaGtMbTl1VW5WdWRHbHRaVWx1YVhScFlXeHBlbVZrS1dRdWIyNVNkVzUwYVcxbFNXNXBkR2xoYkdsNlpXUW9LVHRwWmloa0xuQnZjM1JTZFc0cFptOXlLRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdRdWNHOXpkRkoxYmlZbUtHUXVjRzl6ZEZKMWJqMWJaQzV3YjNOMFVuVnVYU2s3WkM1d2IzTjBVblZ1TG14bGJtZDBhRHNwZTNaaGNpQmlQV1F1Y0c5emRGSjFiaTV6YUdsbWRDZ3BPMmxoTG5WdWMyaHBablFvWWlsOVV5aHBZU2w5ZldsbUtDRW9NRHhPS1NsN2FXWW9aQzV3Y21WU2RXNHBabTl5S0Z3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHUXVjSEpsVW5WdUppWW9aQzV3Y21WU2RXNDlXMlF1Y0hKbFVuVnVYU2s3WkM1d2NtVlNkVzR1YkdWdVozUm9PeWxxWVNncE8xTW9abUVwT3pBOFRueDhLR1F1YzJWMFUzUmhkSFZ6UHloa0xuTmxkRk4wWVhSMWN5aGNJbEoxYm01cGJtY3VMaTVjSWlrc2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlM05sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0a0xuTmxkRk4wWVhSMWN5aGNJbHdpS1gwc01TazdZU2dwZlN3eEtTazZZU2dwS1gxOVhHNXBaaWhrTG5CeVpVbHVhWFFwWm05eUtGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1F1Y0hKbFNXNXBkQ1ltS0dRdWNISmxTVzVwZEQxYlpDNXdjbVZKYm1sMFhTazdNRHhrTG5CeVpVbHVhWFF1YkdWdVozUm9PeWxrTG5CeVpVbHVhWFF1Y0c5d0tDa29LVHRRWVNncE8xeHVYRzVjYmlBZ2NtVjBkWEp1SUcxdlpIVnNaVUZ5Wnk1eVpXRmtlVnh1ZlZ4dVhHNHBPMXh1ZlNrb0tUdGNibWxtSUNoMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdKMjlpYW1WamRDY3BYRzRnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnYjNKMFYyRnpiVHRjYm1Wc2MyVWdhV1lnS0hSNWNHVnZaaUJrWldacGJtVWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdaR1ZtYVc1bFd5ZGhiV1FuWFNsY2JpQWdaR1ZtYVc1bEtGdGRMQ0FvS1NBOVBpQnZjblJYWVhOdEtUdGNiaUlzSUNJaUxDQWlJaXdnSW1WNGNHOXlkQ0JqYjI1emRDQmpjSFZ6SUQwZ2RXNWtaV1pwYm1Wa095SXNJQ0pjYm5aaGNpQnZjblJYWVhOdFZHaHlaV0ZrWldRZ1BTQW9LQ2tnUFQ0Z2UxeHVJQ0IyWVhJZ1gzTmpjbWx3ZEVScGNpQTlJSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdaRzlqZFcxbGJuUXVZM1Z5Y21WdWRGTmpjbWx3ZENBL0lHUnZZM1Z0Wlc1MExtTjFjbkpsYm5SVFkzSnBjSFF1YzNKaklEb2dkVzVrWldacGJtVmtPMXh1SUNCcFppQW9kSGx3Wlc5bUlGOWZabWxzWlc1aGJXVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQmZjMk55YVhCMFJHbHlJRDBnWDNOamNtbHdkRVJwY2lCOGZDQmZYMlpwYkdWdVlXMWxPMXh1SUNCeVpYUjFjbTRnS0Z4dVpuVnVZM1JwYjI0b2JXOWtkV3hsUVhKbklEMGdlMzBwSUh0Y2JseHVablZ1WTNScGIyNGdZV0VvS1h0a0xtSjFabVpsY2lFOWJDNWlkV1ptWlhJbUptMG9LVHR5WlhSMWNtNGdiSDFtZFc1amRHbHZiaUJ1S0NsN1pDNWlkV1ptWlhJaFBXd3VZblZtWm1WeUppWnRLQ2s3Y21WMGRYSnVJR0poZldaMWJtTjBhVzl1SUhBb0tYdGtMbUoxWm1abGNpRTliQzVpZFdabVpYSW1KbTBvS1R0eVpYUjFjbTRnWTJGOVpuVnVZM1JwYjI0Z2NpZ3BlMlF1WW5WbVptVnlJVDFzTG1KMVptWmxjaVltYlNncE8zSmxkSFZ5YmlCa1lYMW1kVzVqZEdsdmJpQmxZU2dwZTJRdVluVm1abVZ5SVQxc0xtSjFabVpsY2lZbWJTZ3BPM0psZEhWeWJpQm1ZWDEyWVhJZ2R6MXRiMlIxYkdWQmNtY3NhR0VzZUR0M0xuSmxZV1I1UFc1bGR5QlFjbTl0YVhObEtDaGhMR0lwUFQ1N2FHRTlZVHQ0UFdKOUtUdGNiblpoY2lCcFlUMVBZbXBsWTNRdVlYTnphV2R1S0h0OUxIY3BMR3BoUFZ3aUxpOTBhR2x6TG5CeWIyZHlZVzFjSWl4NlBTaGhMR0lwUFQ1N2RHaHliM2NnWWp0OUxHdGhQVndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUIzYVc1a2IzY3NRVDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCcGJYQnZjblJUWTNKcGNIUnpMRUk5WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhCeWIyTmxjM01tSmx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCd2NtOWpaWE56TG5abGNuTnBiMjV6SmlaY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2NISnZZMlZ6Y3k1MlpYSnphVzl1Y3k1dWIyUmxMRVE5ZHk1RlRsWkpVazlPVFVWT1ZGOUpVMTlRVkVoU1JVRkVmSHdoTVN4RlBWd2lYQ0k3Wm5WdVkzUnBiMjRnYkdFb1lTbDdjbVYwZFhKdUlIY3ViRzlqWVhSbFJtbHNaVDkzTG14dlkyRjBaVVpwYkdVb1lTeEZLVHBGSzJGOWRtRnlJRzFoTEVZc1NEdGNibWxtS0VJcGUzWmhjaUJtY3oxeVpYRjFhWEpsS0Z3aVpuTmNJaWtzYm1FOWNtVnhkV2x5WlNoY0luQmhkR2hjSWlrN1JUMUJQMjVoTG1ScGNtNWhiV1VvUlNrclhDSXZYQ0k2WDE5a2FYSnVZVzFsSzF3aUwxd2lPMjFoUFNoaUxHTXBQVDU3WWoxaUxuTjBZWEowYzFkcGRHZ29YQ0ptYVd4bE9pOHZYQ0lwUDI1bGR5QlZVa3dvWWlrNmJtRXVibTl5YldGc2FYcGxLR0lwTzNKbGRIVnliaUJtY3k1eVpXRmtSbWxzWlZONWJtTW9ZaXhqUDNadmFXUWdNRHBjSW5WMFpqaGNJaWw5TzBnOVlqMCtlMkk5YldFb1lpd2hNQ2s3WWk1aWRXWm1aWEo4ZkNoaVBXNWxkeUJWYVc1ME9FRnljbUY1S0dJcEtUdHlaWFIxY200Z1luMDdSajBvWWl4akxHVXNhRDBoTUNrOVBudGlQV0l1YzNSaGNuUnpWMmwwYUNoY0ltWnBiR1U2THk5Y0lpay9ibVYzSUZWU1RDaGlLVHB1WVM1dWIzSnRZV3hwZW1Vb1lpazdabk11Y21WaFpFWnBiR1VvWWl4b1AzWnZhV1FnTURwY0luVjBaamhjSWl3b1p5eHJLVDArZTJjL1pTaG5LVHBqS0dnL2F5NWlkV1ptWlhJNmF5bDlLWDA3SVhjdWRHaHBjMUJ5YjJkeVlXMG1KakU4Y0hKdlkyVnpjeTVoY21kMkxteGxibWQwYUNZbUtHcGhQWEJ5YjJObGMzTXVZWEpuZGxzeFhTNXlaWEJzWVdObEtDOWNYRnhjTDJjc1hDSXZYQ0lwS1R0d2NtOWpaWE56TG1GeVozWXVjMnhwWTJVb01pazdlajBvWWl4aktUMCtlM0J5YjJObGMzTXVaWGhwZEVOdlpHVTlYRzVpTzNSb2NtOTNJR003ZlR0M0xtbHVjM0JsWTNROUtDazlQbHdpVzBWdGMyTnlhWEIwWlc0Z1RXOWtkV3hsSUc5aWFtVmpkRjFjSWp0c1pYUWdZVHQwY25sN1lUMXlaWEYxYVhKbEtGd2lkMjl5YTJWeVgzUm9jbVZoWkhOY0lpbDlZMkYwWTJnb1lpbDdkR2h5YjNjZ1kyOXVjMjlzWlM1bGNuSnZjaWduVkdobElGd2lkMjl5YTJWeVgzUm9jbVZoWkhOY0lpQnRiMlIxYkdVZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNCcGJpQjBhR2x6SUc1dlpHVXVhbk1nWW5WcGJHUWdMU0J3WlhKb1lYQnpJR0VnYm1WM1pYSWdkbVZ5YzJsdmJpQnBjeUJ1WldWa1pXUS9KeWtzWWp0OVoyeHZZbUZzTGxkdmNtdGxjajFoTGxkdmNtdGxjbjFsYkhObElHbG1LR3RoZkh4QktVRS9SVDF6Wld4bUxteHZZMkYwYVc5dUxtaHlaV1k2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHUnZZM1Z0Wlc1MEppWmtiMk4xYldWdWRDNWpkWEp5Wlc1MFUyTnlhWEIwSmlZb1JUMWtiMk4xYldWdWRDNWpkWEp5Wlc1MFUyTnlhWEIwTG5OeVl5a3NLSFI1Y0dWdlppQmZjMk55YVhCMFJHbHlJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ1ltSUY5elkzSnBjSFJFYVhJcEppWW9SVDFmYzJOeWFYQjBSR2x5S1N3d0lUMDlSUzVwYm1SbGVFOW1LRndpWW14dllqcGNJaWsvUlQxRkxuTjFZbk4wY2lnd0xFVXVjbVZ3YkdGalpTZ3ZXejhqWFM0cUx5eGNJbHdpS1M1c1lYTjBTVzVrWlhoUFppaGNJaTljSWlrck1TazZSVDFjSWx3aUxFSjhmQ2h0WVQxaFBUNTdkbUZ5SUdJOVhHNXVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUTdZaTV2Y0dWdUtGd2lSMFZVWENJc1lTd2hNU2s3WWk1elpXNWtLRzUxYkd3cE8zSmxkSFZ5YmlCaUxuSmxjM0J2Ym5ObFZHVjRkSDBzUVNZbUtFZzlZVDArZTNaaGNpQmlQVzVsZHlCWVRVeElkSFJ3VW1WeGRXVnpkRHRpTG05d1pXNG9YQ0pIUlZSY0lpeGhMQ0V4S1R0aUxuSmxjM0J2Ym5ObFZIbHdaVDFjSW1GeWNtRjVZblZtWm1WeVhDSTdZaTV6Wlc1a0tHNTFiR3dwTzNKbGRIVnliaUJ1WlhjZ1ZXbHVkRGhCY25KaGVTaGlMbkpsYzNCdmJuTmxLWDBwTEVZOUtHRXNZaXhqS1QwK2UzWmhjaUJsUFc1bGR5QllUVXhJZEhSd1VtVnhkV1Z6ZER0bExtOXdaVzRvWENKSFJWUmNJaXhoTENFd0tUdGxMbkpsYzNCdmJuTmxWSGx3WlQxY0ltRnljbUY1WW5WbVptVnlYQ0k3WlM1dmJteHZZV1E5S0NrOVBuc3lNREE5UFdVdWMzUmhkSFZ6Zkh3d1BUMWxMbk4wWVhSMWN5WW1aUzV5WlhOd2IyNXpaVDlpS0dVdWNtVnpjRzl1YzJVcE9tTW9LWDA3WlM1dmJtVnljbTl5UFdNN1pTNXpaVzVrS0c1MWJHd3BmU2s3UWlZbVhDSjFibVJsWm1sdVpXUmNJajA5ZEhsd1pXOW1JSEJsY21admNtMWhibU5sSmlZb1oyeHZZbUZzTG5CbGNtWnZjbTFoYm1ObFBYSmxjWFZwY21Vb1hDSndaWEptWDJodmIydHpYQ0lwTG5CbGNtWnZjbTFoYm1ObEtUdGNiblpoY2lCdllUMWpiMjV6YjJ4bExteHZaeTVpYVc1a0tHTnZibk52YkdVcExIQmhQV052Ym5OdmJHVXVaWEp5YjNJdVltbHVaQ2hqYjI1emIyeGxLVHRDSmlZb2IyRTlLQzR1TG1FcFBUNW1jeTUzY21sMFpWTjVibU1vTVN4aExtcHZhVzRvWENJZ1hDSXBLMXdpWEZ4dVhDSXBMSEJoUFNndUxpNWhLVDArWm5NdWQzSnBkR1ZUZVc1aktESXNZUzVxYjJsdUtGd2lJRndpS1N0Y0lseGNibHdpS1NrN2RtRnlJSEZoUFhjdWNISnBiblI4Zkc5aExFazlkeTV3Y21sdWRFVnljbng4Y0dFN1QySnFaV04wTG1GemMybG5iaWgzTEdsaEtUdHBZVDF1ZFd4c08zY3VkR2hwYzFCeWIyZHlZVzBtSmlocVlUMTNMblJvYVhOUWNtOW5jbUZ0S1R0M0xuRjFhWFFtSmloNlBYY3VjWFZwZENrN2RtRnlJRW83ZHk1M1lYTnRRbWx1WVhKNUppWW9TajEzTG5kaGMyMUNhVzVoY25rcE8zWmhjaUJ1YjBWNGFYUlNkVzUwYVcxbFBYY3VibTlGZUdsMFVuVnVkR2x0Wlh4OElUQTdYQ0p2WW1wbFkzUmNJaUU5ZEhsd1pXOW1JRmRsWWtGemMyVnRZbXg1SmlaTEtGd2libThnYm1GMGFYWmxJSGRoYzIwZ2MzVndjRzl5ZENCa1pYUmxZM1JsWkZ3aUtUdDJZWElnWkN4TUxISmhMRTA5SVRFc1RpeHNMR0poTEdOaExHUmhMR1poTzF4dVpuVnVZM1JwYjI0Z2JTZ3BlM1poY2lCaFBXUXVZblZtWm1WeU8zY3VTRVZCVURnOWJEMXVaWGNnU1c1ME9FRnljbUY1S0dFcE8zY3VTRVZCVURFMlBXNWxkeUJKYm5ReE5rRnljbUY1S0dFcE8zY3VTRVZCVURNeVBXTmhQVzVsZHlCSmJuUXpNa0Z5Y21GNUtHRXBPM2N1U0VWQlVGVTRQV0poUFc1bGR5QlZhVzUwT0VGeWNtRjVLR0VwTzNjdVNFVkJVRlV4TmoxdVpYY2dWV2x1ZERFMlFYSnlZWGtvWVNrN2R5NUlSVUZRVlRNeVBXUmhQVzVsZHlCVmFXNTBNekpCY25KaGVTaGhLVHQzTGtoRlFWQkdNekk5Ym1WM0lFWnNiMkYwTXpKQmNuSmhlU2hoS1R0M0xraEZRVkJHTmpROVptRTlibVYzSUVac2IyRjBOalJCY25KaGVTaGhLWDEyWVhJZ1R6MTNMa2xPU1ZSSlFVeGZUVVZOVDFKWmZId3hOamMzTnpJeE5qczFNalF5T0Rnd1BEMVBmSHhMS0Z3aVNVNUpWRWxCVEY5TlJVMVBVbGtnYzJodmRXeGtJR0psSUd4aGNtZGxjaUIwYUdGdUlGTlVRVU5MWDFOSldrVXNJSGRoY3lCY0lpdFBLMXdpSVNBb1UxUkJRMHRmVTBsYVJUMDFNalF5T0Rnd0tWd2lLVHRjYm1sbUtFUXBaRDEzTG5kaGMyMU5aVzF2Y25rN1pXeHpaU0JwWmloM0xuZGhjMjFOWlcxdmNua3BaRDEzTG5kaGMyMU5aVzF2Y25rN1pXeHpaU0JwWmloa1BXNWxkeUJYWldKQmMzTmxiV0pzZVM1TlpXMXZjbmtvZTJsdWFYUnBZV3c2VHk4Mk5UVXpOaXh0WVhocGJYVnRPalkxTlRNMkxITm9ZWEpsWkRvaE1IMHBMQ0VvWkM1aWRXWm1aWElnYVc1emRHRnVZMlZ2WmlCVGFHRnlaV1JCY25KaGVVSjFabVpsY2lrcGRHaHliM2NnU1NoY0luSmxjWFZsYzNSbFpDQmhJSE5vWVhKbFpDQlhaV0pCYzNObGJXSnNlUzVOWlcxdmNua2dZblYwSUhSb1pTQnlaWFIxY201bFpDQmlkV1ptWlhJZ2FYTWdibTkwSUdFZ1UyaGhjbVZrUVhKeVlYbENkV1ptWlhJc0lHbHVaR2xqWVhScGJtY2dkR2hoZENCM2FHbHNaU0IwYUdVZ1luSnZkM05sY2lCb1lYTWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSWdhWFFnWkc5bGN5QnViM1FnYUdGMlpTQlhaV0pCYzNObGJXSnNlU0IwYUhKbFlXUnpJSE4xY0hCdmNuUWdMU0I1YjNVZ2JXRjVJRzVsWldRZ2RHOGdjMlYwSUdFZ1pteGhaMXdpS1N4Q0ppWkpLRndpS0c5dUlHNXZaR1VnZVc5MUlHMWhlU0J1WldWa09pQXRMV1Y0Y0dWeWFXMWxiblJoYkMxM1lYTnRMWFJvY21WaFpITWdMUzFsZUhCbGNtbHRaVzUwWVd3dGQyRnpiUzFpZFd4ckxXMWxiVzl5ZVNCaGJtUXZiM0lnY21WalpXNTBJSFpsY25OcGIyNHBYQ0lwTEZ4dVJYSnliM0lvWENKaVlXUWdiV1Z0YjNKNVhDSXBPMjBvS1R0UFBXUXVZblZtWm1WeUxtSjVkR1ZNWlc1bmRHZzdkbUZ5SUhOaExIUmhQVnRkTEhWaFBWdGRMSFpoUFZ0ZExIZGhQVEE3Wm5WdVkzUnBiMjRnVUNncGUzSmxkSFZ5YmlCdWIwVjRhWFJTZFc1MGFXMWxmSHd3UEhkaGZYWmhjaUJSUFRBc2VHRTliblZzYkN4U1BXNTFiR3c3Wm5WdVkzUnBiMjRnZVdFb0tYdFJLeXM3ZHk1dGIyNXBkRzl5VW5WdVJHVndaVzVrWlc1amFXVnpKaVozTG0xdmJtbDBiM0pTZFc1RVpYQmxibVJsYm1OcFpYTW9VU2w5Wm5WdVkzUnBiMjRnZW1Fb0tYdFJMUzA3ZHk1dGIyNXBkRzl5VW5WdVJHVndaVzVrWlc1amFXVnpKaVozTG0xdmJtbDBiM0pTZFc1RVpYQmxibVJsYm1OcFpYTW9VU2s3YVdZb01EMDlVU1ltS0c1MWJHd2hQVDE0WVNZbUtHTnNaV0Z5U1c1MFpYSjJZV3dvZUdFcExIaGhQVzUxYkd3cExGSXBLWHQyWVhJZ1lUMVNPMUk5Ym5Wc2JEdGhLQ2w5ZlZ4dVpuVnVZM1JwYjI0Z1N5aGhLWHRwWmloM0xtOXVRV0p2Y25RcGR5NXZia0ZpYjNKMEtHRXBPMkU5WENKQlltOXlkR1ZrS0Z3aUsyRXJYQ0lwWENJN1NTaGhLVHROUFNFd08wNDlNVHRoUFc1bGR5QlhaV0pCYzNObGJXSnNlUzVTZFc1MGFXMWxSWEp5YjNJb1lTdGNJaTRnUW5WcGJHUWdkMmwwYUNBdGMwRlRVMFZTVkVsUFRsTWdabTl5SUcxdmNtVWdhVzVtYnk1Y0lpazdlQ2hoS1R0MGFISnZkeUJoTzMxbWRXNWpkR2x2YmlCQllTaGhLWHR5WlhSMWNtNGdZUzV6ZEdGeWRITlhhWFJvS0Z3aVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5dlkzUmxkQzF6ZEhKbFlXMDdZbUZ6WlRZMExGd2lLWDEyWVhJZ1V6dFRQVndpYjNKMExYZGhjMjB0ZEdoeVpXRmtaV1F1ZDJGemJWd2lPMEZoS0ZNcGZId29VejFzWVNoVEtTazdablZ1WTNScGIyNGdRbUVvWVNsN2FXWW9ZVDA5VXlZbVNpbHlaWFIxY200Z2JtVjNJRlZwYm5RNFFYSnlZWGtvU2lrN2FXWW9TQ2x5WlhSMWNtNGdTQ2hoS1R0MGFISnZkMXdpWW05MGFDQmhjM2x1WXlCaGJtUWdjM2x1WXlCbVpYUmphR2x1WnlCdlppQjBhR1VnZDJGemJTQm1ZV2xzWldSY0lqdDlYRzVtZFc1amRHbHZiaUJEWVNoaEtYdHBaaWdoU2lZbUtHdGhmSHhCS1NsN2FXWW9YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWm1WMFkyZ21KaUZoTG5OMFlYSjBjMWRwZEdnb1hDSm1hV3hsT2k4dlhDSXBLWEpsZEhWeWJpQm1aWFJqYUNoaExIdGpjbVZrWlc1MGFXRnNjenBjSW5OaGJXVXRiM0pwWjJsdVhDSjlLUzUwYUdWdUtHSTlQbnRwWmlnaFlpNXZheWwwYUhKdmQxd2labUZwYkdWa0lIUnZJR3h2WVdRZ2QyRnpiU0JpYVc1aGNua2dabWxzWlNCaGRDQW5YQ0lyWVN0Y0lpZGNJanR5WlhSMWNtNGdZaTVoY25KaGVVSjFabVpsY2lncGZTa3VZMkYwWTJnb0tDazlQa0poS0dFcEtUdHBaaWhHS1hKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb1lpeGpLVDArZTBZb1lTeGxQVDVpS0c1bGR5QlZhVzUwT0VGeWNtRjVLR1VwS1N4aktYMHBmWEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tTNTBhR1Z1S0NncFBUNUNZU2hoS1NsOVpuVnVZM1JwYjI0Z1JHRW9ZU3hpTEdNcGUzSmxkSFZ5YmlCRFlTaGhLUzUwYUdWdUtHVTlQbGRsWWtGemMyVnRZbXg1TG1sdWMzUmhiblJwWVhSbEtHVXNZaWtwTG5Sb1pXNG9aVDArWlNrdWRHaGxiaWhqTEdVOVBudEpLRndpWm1GcGJHVmtJSFJ2SUdGemVXNWphSEp2Ym05MWMyeDVJSEJ5WlhCaGNtVWdkMkZ6YlRvZ1hDSXJaU2s3U3lobEtYMHBmVnh1Wm5WdVkzUnBiMjRnUldFb1lTeGlLWHQyWVhJZ1l6MVRPM0psZEhWeWJpQktmSHhjSW1aMWJtTjBhVzl1WENJaFBYUjVjR1Z2WmlCWFpXSkJjM05sYldKc2VTNXBibk4wWVc1MGFXRjBaVk4wY21WaGJXbHVaM3g4UVdFb1l5bDhmR011YzNSaGNuUnpWMmwwYUNoY0ltWnBiR1U2THk5Y0lpbDhmRUo4ZkZ3aVpuVnVZM1JwYjI1Y0lpRTlkSGx3Wlc5bUlHWmxkR05vUDBSaEtHTXNZU3hpS1RwbVpYUmphQ2hqTEh0amNtVmtaVzUwYVdGc2N6cGNJbk5oYldVdGIzSnBaMmx1WENKOUtTNTBhR1Z1S0dVOVBsZGxZa0Z6YzJWdFlteDVMbWx1YzNSaGJuUnBZWFJsVTNSeVpXRnRhVzVuS0dVc1lTa3VkR2hsYmloaUxHWjFibU4wYVc5dUtHZ3BlMGtvWENKM1lYTnRJSE4wY21WaGJXbHVaeUJqYjIxd2FXeGxJR1poYVd4bFpEb2dYQ0lyYUNrN1NTaGNJbVpoYkd4cGJtY2dZbUZqYXlCMGJ5QkJjbkpoZVVKMVptWmxjaUJwYm5OMFlXNTBhV0YwYVc5dVhDSXBPM0psZEhWeWJpQkVZU2hqTEdFc1lpbDlLU2w5ZG1GeUlGUTdablZ1WTNScGIyNGdWU2hoS1h0MGFHbHpMbTVoYldVOVhDSkZlR2wwVTNSaGRIVnpYQ0k3ZEdocGN5NXRaWE56WVdkbFBXQlFjbTluY21GdElIUmxjbTFwYm1GMFpXUWdkMmwwYUNCbGVHbDBLQ1I3WVgwcFlEdDBhR2x6TG5OMFlYUjFjejFoZlZ4dVpuVnVZM1JwYjI0Z1JtRW9ZU2w3WVM1MFpYSnRhVzVoZEdVb0tUdGhMbTl1YldWemMyRm5aVDBvS1QwK2UzMTlablZ1WTNScGIyNGdSMkVvWVNsN0tHRTlWaTVNWVZ0aFhTbDhmRXNvS1R0V0xteGlLR0VwZldaMWJtTjBhVzl1SUVoaEtHRXBlM1poY2lCaVBWWXVabUlvS1R0cFppZ2hZaWx5WlhSMWNtNGdOanRXTGs5aExuQjFjMmdvWWlrN1ZpNU1ZVnRoTGs1aFhUMWlPMkl1VG1FOVlTNU9ZVHQyWVhJZ1l6MTdZMjFrT2x3aWNuVnVYQ0lzYzNSaGNuUmZjbTkxZEdsdVpUcGhMbTFpTEdGeVp6cGhMbVZpTEhCMGFISmxZV1JmY0hSeU9tRXVUbUY5TzBJbUptSXVkVzV5WldZb0tUdGlMbkJ2YzNSTlpYTnpZV2RsS0dNc1lTNXpZaWs3Y21WMGRYSnVJREI5WEc1MllYSWdTV0U5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlGUmxlSFJFWldOdlpHVnlQMjVsZHlCVVpYaDBSR1ZqYjJSbGNpaGNJblYwWmpoY0lpazZkbTlwWkNBd0xFcGhQU2hoTEdJc1l5azlQbnRpUGo0K1BUQTdkbUZ5SUdVOVlpdGpPMlp2Y2loalBXSTdZVnRqWFNZbUlTaGpQajFsS1RzcEt5dGpPMmxtS0RFMlBHTXRZaVltWVM1aWRXWm1aWEltSmtsaEtYSmxkSFZ5YmlCSllTNWtaV052WkdVb1lTNWlkV1ptWlhJZ2FXNXpkR0Z1WTJWdlppQlRhR0Z5WldSQmNuSmhlVUoxWm1abGNqOWhMbk5zYVdObEtHSXNZeWs2WVM1emRXSmhjbkpoZVNoaUxHTXBLVHRtYjNJb1pUMWNJbHdpTzJJOFl6c3BlM1poY2lCb1BXRmJZaXNyWFR0cFppaG9KakV5T0NsN2RtRnlJR2M5WVZ0aUt5dGRKall6TzJsbUtERTVNajA5S0dnbU1qSTBLU2xsS3oxVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDaG9Kak14S1R3OE5ueG5LVHRsYkhObGUzWmhjaUJyUFdGYllpc3JYU1kyTXp0b1BUSXlORDA5S0dnbU1qUXdLVDhvYUNZeE5TazhQREV5ZkdjOFBEWjhhem9vYUNZM0tUdzhNVGg4Wnp3OE1USjhhenc4Tm54aFcySXJLMTBtTmpNN05qVTFNelkrYUQ5bEt6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR2dwT2lob0xUMDJOVFV6Tml4bEt6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLRFUxTWprMmZHZytQbHh1TVRBc05UWXpNakI4YUNZeE1ESXpLU2w5ZldWc2MyVWdaU3M5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNob0tYMXlaWFIxY200Z1pYMHNTMkU5S0dFc1lpazlQaWhoUGo0K1BUQXBQMHBoS0c0b0tTeGhMR0lwT2x3aVhDSTdablZ1WTNScGIyNGdUR0VvWVNsN2FXWW9SQ2x5WlhSMWNtNGdWeWd4TERFc1lTazdUajFoTzJsbUtDRlFLQ2twZTFZdWJtSW9LVHRwWmloM0xtOXVSWGhwZENsM0xtOXVSWGhwZENoaEtUdE5QU0V3Zlhvb1lTeHVaWGNnVlNoaEtTbDlYRzUyWVhJZ1RtRTlZVDArZTA0OVlUdHBaaWhFS1hSb2NtOTNJRTFoS0dFcExGd2lkVzUzYVc1a1hDSTdUR0VvWVNsOUxGWTllMUpoT2x0ZExFOWhPbHRkTEZwaE9sdGRMRXhoT250OUxGWmhPbVoxYm1OMGFXOXVLQ2w3UkQ5V0xtaGlLQ2s2Vmk1bllpZ3BmU3huWWpwbWRXNWpkR2x2YmlncGUzUmhMblZ1YzJocFpuUW9LQ2s5UG50NVlTZ3BPMVl1YVdJb0tDazlQbnBoS0NrcGZTbDlMR2hpT21aMWJtTjBhVzl1S0NsN1ZpNXlaV05sYVhabFQySnFaV04wVkhKaGJuTm1aWEk5Vmk1cllqdFdMblJvY21WaFpFbHVhWFJVVEZNOVZpNVpZVHRXTG5ObGRFVjRhWFJUZEdGMGRYTTlWaTVZWVR0dWIwVjRhWFJTZFc1MGFXMWxQU0V4ZlN4WVlUcG1kVzVqZEdsdmJpaGhLWHRPUFdGOUxIaGlPbHRjSWlSMFpYSnRhVzVoZEdWWGIzSnJaWEpjSWwwc2JtSTZablZ1WTNScGIyNG9LWHRtYjNJb2RtRnlJR0VnYjJZZ1ZpNVBZU2xHWVNoaEtUdG1iM0lvWVNCdlppQldMbEpoS1VaaEtHRXBPMVl1VW1FOVcxMDdWaTVQWVQxYlhUdFdMa3hoUFZ0ZGZTeHNZanBtZFc1amRHbHZiaWhoS1h0MllYSWdZajFoTGs1aE8yUmxiR1YwWlNCV0xreGhXMkpkTzFZdVVtRXVjSFZ6YUNoaEtUdFdMazloTG5Od2JHbGpaU2hXTGs5aExtbHVaR1Y0VDJZb1lTa3NNU2s3WVM1T1lUMHdPMDloS0dJcGZTeHJZanBtZFc1amRHbHZiaWdwZTMwc1hHNVpZVHBtZFc1amRHbHZiaWdwZTFZdVdtRXVabTl5UldGamFDaGhQVDVoS0NrcGZTeHFZanBoUFQ1dVpYY2dVSEp2YldselpTaGlQVDU3WVM1dmJtMWxjM05oWjJVOVp6MCtlMmM5Wnk1a1lYUmhPM1poY2lCclBXY3VZMjFrTzJsbUtHY3VkR0Z5WjJWMFZHaHlaV0ZrSmlabkxuUmhjbWRsZEZSb2NtVmhaQ0U5V0NncEtYdDJZWElnZEQxV0xreGhXMmN1ZDJKZE8zUS9kQzV3YjNOMFRXVnpjMkZuWlNobkxHY3VkSEpoYm5ObVpYSk1hWE4wS1RwSktDZEpiblJsY201aGJDQmxjbkp2Y2lFZ1YyOXlhMlZ5SUhObGJuUWdZU0J0WlhOellXZGxJRndpSnl0ckt5ZGNJaUIwYnlCMFlYSm5aWFFnY0hSb2NtVmhaQ0FuSzJjdWRHRnlaMlYwVkdoeVpXRmtLMXdpTENCaWRYUWdkR2hoZENCMGFISmxZV1FnYm04Z2JHOXVaMlZ5SUdWNGFYTjBjeUZjSWlsOVpXeHpaU0JwWmloY0ltTm9aV05yVFdGcGJHSnZlRndpUFQwOWF5bFpLQ2s3Wld4elpTQnBaaWhjSW5Od1lYZHVWR2h5WldGa1hDSTlQVDFyS1VoaEtHY3BPMlZzYzJVZ2FXWW9YQ0pqYkdWaGJuVndWR2h5WldGa1hDSTlQVDFyS1VkaEtHY3VkR2h5WldGa0tUdGxiSE5sSUdsbUtGd2lhMmxzYkZSb2NtVmhaRndpUFQwOWF5bG5QV2N1ZEdoeVpXRmtMR3M5Vmk1TVlWdG5YU3hrWld4bGRHVWdWaTVNWVZ0blhTeEdZU2hyS1N4UFlTaG5LU3hXTGs5aExuTndiR2xqWlNoV0xrOWhMbWx1WkdWNFQyWW9heWtzWEc0eEtTeHJMazVoUFRBN1pXeHpaU0JwWmloY0ltTmhibU5sYkZSb2NtVmhaRndpUFQwOWF5bFdMa3hoVzJjdWRHaHlaV0ZrWFM1d2IzTjBUV1Z6YzJGblpTaDdZMjFrT2x3aVkyRnVZMlZzWENKOUtUdGxiSE5sSUdsbUtGd2liRzloWkdWa1hDSTlQVDFyS1dFdWJHOWhaR1ZrUFNFd0xHSW9ZU2s3Wld4elpTQnBaaWhjSW1Gc1pYSjBYQ0k5UFQxcktXRnNaWEowS0Z3aVZHaHlaV0ZrSUZ3aUsyY3VkR2h5WldGa1NXUXJYQ0k2SUZ3aUsyY3VkR1Y0ZENrN1pXeHpaU0JwWmloY0luTmxkR2x0YldWa2FXRjBaVndpUFQwOVp5NTBZWEpuWlhRcFlTNXdiM04wVFdWemMyRm5aU2huS1R0bGJITmxJR2xtS0Z3aVkyRnNiRWhoYm1Sc1pYSmNJajA5UFdzcGQxdG5MbWhoYm1Sc1pYSmRLQzR1TG1jdVlYSm5jeWs3Wld4elpTQnJKaVpKS0Z3aWQyOXlhMlZ5SUhObGJuUWdZVzRnZFc1cmJtOTNiaUJqYjIxdFlXNWtJRndpSzJzcGZUdGhMbTl1WlhKeWIzSTlaejArZTBrb1hDSjNiM0pyWlhJZ2MyVnVkQ0JoYmlCbGNuSnZjaUVnWENJclp5NW1hV3hsYm1GdFpTdGNJanBjSWl0bkxteHBibVZ1Ynl0Y0lqb2dYQ0lyWnk1dFpYTnpZV2RsS1R0MGFISnZkeUJuTzMwN1FpWW1LR0V1YjI0b1hDSnRaWE56WVdkbFhDSXNablZ1WTNScGIyNG9aeWw3WVM1dmJtMWxjM05oWjJVb2UyUmhkR0U2WjMwcGZTa3NZUzV2YmloY0ltVnljbTl5WENJc1puVnVZM1JwYjI0b1p5bDdZUzV2Ym1WeWNtOXlLR2NwZlNrcE8xeHVkbUZ5SUdNOVcxMHNaVDFiWENKdmJrVjRhWFJjSWl4Y0ltOXVRV0p2Y25SY0lpeGNJbkJ5YVc1MFhDSXNYQ0p3Y21sdWRFVnljbHdpWFN4b08yWnZjaWhvSUc5bUlHVXBkeTVvWVhOUGQyNVFjbTl3WlhKMGVTaG9LU1ltWXk1d2RYTm9LR2dwTzJFdWNHOXpkRTFsYzNOaFoyVW9lMk50WkRwY0lteHZZV1JjSWl4b1lXNWtiR1Z5Y3pwakxIVnliRTl5UW14dllqcDNMbTFoYVc1VFkzSnBjSFJWY214UGNrSnNiMko4ZkY5elkzSnBjSFJFYVhJc2QyRnpiVTFsYlc5eWVUcGtMSGRoYzIxTmIyUjFiR1U2Y21GOUtYMHBMR2xpT21aMWJtTjBhVzl1S0dFcGUyRW9LWDBzWTJJNlpuVnVZM1JwYjI0b0tYdDJZWElnWVQxc1lTaGNJbTl5ZEMxM1lYTnRMWFJvY21WaFpHVmtMbmR2Y210bGNpNXFjMXdpS1R0aFBXNWxkeUJYYjNKclpYSW9ZU2s3Vmk1U1lTNXdkWE5vS0dFcGZTeG1ZanBtZFc1amRHbHZiaWdwZXpBOVBWWXVVbUV1YkdWdVozUm9KaVlvVmk1allpZ3BMRll1YW1Jb1ZpNVNZVnN3WFNrcE8zSmxkSFZ5YmlCV0xsSmhMbkJ2Y0NncGZYMDdkeTVRVkdoeVpXRmtQVlk3ZG1GeUlGQmhQV0U5UG50bWIzSW9PekE4WVM1c1pXNW5kR2c3S1dFdWMyaHBablFvS1NoM0tYMDdYRzUzTG1WemRHRmliR2x6YUZOMFlXTnJVM0JoWTJVOVpuVnVZM1JwYjI0b0tYdDJZWElnWVQxWUtDa3NZajF3S0NsYllTczFNajQrTWo0K1BqQmRPMkU5Y0NncFcyRXJOVFkrUGpJK1BqNHdYVHRSWVNoaUxHSXRZU2s3VW1Fb1lpbDlPMloxYm1OMGFXOXVJRTFoS0dFcGUybG1LRVFwY21WMGRYSnVJRmNvTWl3d0xHRXBPMDVoS0dFcGZYWmhjaUJUWVQxYlhUdDNMbWx1ZG05clpVVnVkSEo1VUc5cGJuUTlablZ1WTNScGIyNG9ZU3hpS1h0MllYSWdZejFUWVZ0aFhUdGpmSHdvWVQ0OVUyRXViR1Z1WjNSb0ppWW9VMkV1YkdWdVozUm9QV0VyTVNrc1UyRmJZVjA5WXoxellTNW5aWFFvWVNrcE8yRTlZeWhpS1R0UUtDay9WaTVZWVNoaEtUcFVZU2hoS1gwN1puVnVZM1JwYjI0Z1ZXRW9ZU2w3ZEdocGN5NVZZVDFoTFRJME8zUm9hWE11WW1JOVpuVnVZM1JwYjI0b1lpbDdjaWdwVzNSb2FYTXVWV0VyTkQ0K01qNCtQakJkUFdKOU8zUm9hWE11WVdJOVpuVnVZM1JwYjI0b1lpbDdjaWdwVzNSb2FYTXVWV0VyT0Q0K01qNCtQakJkUFdKOU8zUm9hWE11Vm1FOVpuVnVZM1JwYjI0b1lpeGpLWHQwYUdsekxpUmhLQ2s3ZEdocGN5NWlZaWhpS1R0MGFHbHpMbUZpS0dNcGZUdDBhR2x6TGlSaFBXWjFibU4wYVc5dUtDbDdjaWdwVzNSb2FYTXVWV0VyTVRZK1BqSStQajR3WFQwd2ZYMWNiblpoY2lCV1lUMHdMRmRoUFRBN1puVnVZM1JwYjI0Z1dHRW9ZU3hpTEdNc1pTbDdjbVYwZFhKdUlFUS9WeWd6TERFc1lTeGlMR01zWlNrNldXRW9ZU3hpTEdNc1pTbDlablZ1WTNScGIyNGdXV0VvWVN4aUxHTXNaU2w3WVQ0K1BqMHdPMkkrUGo0OU1EdGpQajQrUFRBN1pUNCtQajB3TzJsbUtGd2lkVzVrWldacGJtVmtYQ0k5UFhSNWNHVnZaaUJUYUdGeVpXUkJjbkpoZVVKMVptWmxjaWx5WlhSMWNtNGdTU2hjSWtOMWNuSmxiblFnWlc1MmFYSnZibTFsYm5RZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCVGFHRnlaV1JCY25KaGVVSjFabVpsY2l3Z2NIUm9jbVZoWkhNZ1lYSmxJRzV2ZENCaGRtRnBiR0ZpYkdVaFhDSXBMRFk3ZG1GeUlHZzlXMTA3YVdZb1JDWW1NRDA5UFdndWJHVnVaM1JvS1hKbGRIVnliaUJZWVNoaExHSXNZeXhsS1R0aFBYdHRZanBqTEU1aE9tRXNaV0k2WlN4ellqcG9mVHR5WlhSMWNtNGdSRDhvWVM1MVlqMWNJbk53WVhkdVZHaHlaV0ZrWENJc2NHOXpkRTFsYzNOaFoyVW9ZU3hvS1N3d0tUcElZU2hoS1gxbWRXNWpkR2x2YmlCYVlTaGhMR0lzWXlsN2NtVjBkWEp1SUVRL1Z5ZzBMREVzWVN4aUxHTXBPakI5Wm5WdVkzUnBiMjRnSkdFb1lTeGlLWHRwWmloRUtYSmxkSFZ5YmlCWEtEVXNNU3hoTEdJcGZWeHVkbUZ5SUdGaVBXRTlQbnRtYjNJb2RtRnlJR0k5TUN4alBUQTdZenhoTG14bGJtZDBhRHNySzJNcGUzWmhjaUJsUFdFdVkyaGhja052WkdWQmRDaGpLVHN4TWpjK1BXVS9ZaXNyT2pJd05EYytQV1UvWWlzOU1qbzFOVEk1Tmp3OVpTWW1OVGN6TkRNK1BXVS9LR0lyUFRRc0t5dGpLVHBpS3owemZYSmxkSFZ5YmlCaWZTeGlZajBvWVN4aUxHTXNaU2s5UG50alBqNCtQVEE3YVdZb0lTZ3dQR1VwS1hKbGRIVnliaUF3TzNaaGNpQm9QV003WlQxaksyVXRNVHRtYjNJb2RtRnlJR2M5TUR0blBHRXViR1Z1WjNSb095c3JaeWw3ZG1GeUlHczlZUzVqYUdGeVEyOWtaVUYwS0djcE8ybG1LRFUxTWprMlBEMXJKaVkxTnpNME16NDlheWw3ZG1GeUlIUTlZUzVqYUdGeVEyOWtaVUYwS0Nzclp5azdhejAyTlRVek5pc29LR3NtTVRBeU15azhQREV3S1h4MEpqRXdNak45YVdZb01USTNQajFyS1h0cFppaGpQajFsS1dKeVpXRnJPMkpiWXlzclBqNCtNRjA5YTMxbGJITmxlMmxtS0RJd05EYytQV3NwZTJsbUtHTXJNVDQ5WlNsaWNtVmhhenRpVzJNckt6NCtQakJkUFRFNU1ueHJQajQyZldWc2MyVjdhV1lvTmpVMU16VStQV3NwZTJsbUtHTXJNajQ5WlNsaWNtVmhhenRpVzJNckt6NCtQakJkUFRJeU5IeHJQajR4TW4xbGJITmxlMmxtS0dNck16NDlaU2xpY21WaGF6dGlXMk1yS3o0K1BqQmRQVEkwTUh4clBqNWNiakU0TzJKYll5c3JQajQrTUYwOU1USTRmR3MrUGpFeUpqWXpmV0piWXlzclBqNCtNRjA5TVRJNGZHcytQalltTmpOOVlsdGpLeXMrUGo0d1hUMHhNamg4YXlZMk0zMTlZbHRqUGo0K01GMDlNRHR5WlhSMWNtNGdZeTFvZlN4allqMG9ZU3hpTEdNcFBUNWlZaWhoTEc0b0tTeGlMR01wTzJaMWJtTjBhVzl1SUdSaUtHRXNZaWw3YVdZb1JDbHlaWFIxY200Z1Z5ZzJMREVzWVN4aUtYMW1kVzVqZEdsdmJpQmxZaWhoTEdJc1l5bDdhV1lvUkNseVpYUjFjbTRnVnlnM0xERXNZU3hpTEdNcGZXWjFibU4wYVc5dUlHWmlLR0VzWWl4aktYdHlaWFIxY200Z1JEOVhLRGdzTVN4aExHSXNZeWs2TUgxbWRXNWpkR2x2YmlCbllpaGhMR0lwZTJsbUtFUXBjbVYwZFhKdUlGY29PU3d4TEdFc1lpbDlablZ1WTNScGIyNGdhR0lvWVN4aUxHTXBlMmxtS0VRcGNtVjBkWEp1SUZjb01UQXNNU3hoTEdJc1l5bDlablZ1WTNScGIyNGdhV0lvWVN4aUxHTXNaU2w3YVdZb1JDbHlaWFIxY200Z1Z5Z3hNU3d4TEdFc1lpeGpMR1VwZldaMWJtTjBhVzl1SUdwaUtHRXNZaXhqTEdVcGUybG1LRVFwY21WMGRYSnVJRmNvTVRJc01TeGhMR0lzWXl4bEtYMW1kVzVqZEdsdmJpQnJZaWhoTEdJc1l5eGxLWHRwWmloRUtYSmxkSFZ5YmlCWEtERXpMREVzWVN4aUxHTXNaU2w5WEc1bWRXNWpkR2x2YmlCc1lpaGhLWHRwWmloRUtYSmxkSFZ5YmlCWEtERTBMREVzWVNsOVpuVnVZM1JwYjI0Z2JXSW9ZU3hpS1h0cFppaEVLWEpsZEhWeWJpQlhLREUxTERFc1lTeGlLWDFtZFc1amRHbHZiaUJ1WWloaExHSXNZeWw3YVdZb1JDbHlaWFIxY200Z1Z5Z3hOaXd4TEdFc1lpeGpLWDEyWVhJZ2IySTlZVDArZTJsbUtDRk5LWFJ5ZVh0cFppaGhLQ2tzSVZBb0tTbDBjbmw3UkQ5VVlTaE9LVHBPWVNoT0tYMWpZWFJqYUNoaUtYdGlJR2x1YzNSaGJtTmxiMllnVlh4OFhDSjFibmRwYm1SY0lqMDlZbng4ZWlneExHSXBmWDFqWVhSamFDaGlLWHRpSUdsdWMzUmhibU5sYjJZZ1ZYeDhYQ0oxYm5kcGJtUmNJajA5WW54OGVpZ3hMR0lwZlgwN1puVnVZM1JwYjI0Z2NHSW9ZU2w3WVQ0K1BqMHdPMXdpWm5WdVkzUnBiMjVjSWowOVBYUjVjR1Z2WmlCQmRHOXRhV056TG5SaUppWW9RWFJ2YldsamN5NTBZaWh3S0Nrc1lUNCtNaXhoS1M1MllXeDFaUzUwYUdWdUtGa3BMR0VyUFRFeU9DeEJkRzl0YVdOekxuTjBiM0psS0hBb0tTeGhQajR5TERFcEtYMTNMbDlmWlcxelkzSnBjSFJsYmw5MGFISmxZV1JmYldGcGJHSnZlRjloZDJGcGREMXdZanRtZFc1amRHbHZiaUJaS0NsN2RtRnlJR0U5V0NncE8yRW1KaWh3WWloaEtTeHZZaWdvS1QwK2NXSW9LU2twZlhjdVkyaGxZMnROWVdsc1ltOTRQVms3WEc1MllYSWdXajFoUFQ0d1BUMDlZU1UwSmlZb01DRTlQV0VsTVRBd2ZId3dQVDA5WVNVME1EQXBMSEppUFZzd0xETXhMRFl3TERreExERXlNU3d4TlRJc01UZ3lMREl4TXl3eU5EUXNNamMwTERNd05Td3pNelZkTEhOaVBWc3dMRE14TERVNUxEa3dMREV5TUN3eE5URXNNVGd4TERJeE1pd3lORE1zTWpjekxETXdOQ3d6TXpSZE8yWjFibU4wYVc5dUlIUmlLR0VzWWl4akxHVXNhQ3huTEdzc2RDbDdjbVYwZFhKdUlFUS9WeWd4Tnl3eExHRXNZaXhqTEdVc2FDeG5MR3NzZENrNkxUVXlmV1oxYm1OMGFXOXVJSFZpS0dFc1lpeGpMR1VzYUN4bkxHc3BlMmxtS0VRcGNtVjBkWEp1SUZjb01UZ3NNU3hoTEdJc1l5eGxMR2dzWnl4cktYMTJZWElnZDJJOVlUMCtlM1poY2lCaVBXRmlLR0VwS3pFc1l6MTJZaWhpS1R0akppWmpZaWhoTEdNc1lpazdjbVYwZFhKdUlHTjlMSGxpUFdFOVBudDJZWElnWWoxNFlpZ3BPMkU5WVNncE8xSmhLR0lwTzNKbGRIVnliaUJoZlR0Y2JtWjFibU4wYVc5dUlGY29ZU3hpS1h0MllYSWdZejFoY21kMWJXVnVkSE11YkdWdVozUm9MVElzWlQxaGNtZDFiV1Z1ZEhNN2NtVjBkWEp1SUhsaUtDZ3BQVDU3Wm05eUtIWmhjaUJvUFhwaUtEZ3FZeWtzWnoxb1BqNHpMR3M5TUR0clBHTTdheXNyS1h0MllYSWdkRDFsV3pJcmExMDdaV0VvS1Z0bksycytQajR3WFQxMGZYSmxkSFZ5YmlCQllpaGhMR01zYUN4aUtYMHBmVnh1ZG1GeUlFSmlQVnRkTEVOaVBYdDlMRVZpUFNncFBUNTdhV1lvSVVSaUtYdDJZWElnWVQxN1ZWTkZVanBjSW5kbFlsOTFjMlZ5WENJc1RFOUhUa0ZOUlRwY0luZGxZbDkxYzJWeVhDSXNVRUZVU0RwY0lpOWNJaXhRVjBRNlhDSXZYQ0lzU0U5TlJUcGNJaTlvYjIxbEwzZGxZbDkxYzJWeVhDSXNURUZPUnpvb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHNWhkbWxuWVhSdmNpWW1ibUYyYVdkaGRHOXlMbXhoYm1kMVlXZGxjeVltYm1GMmFXZGhkRzl5TG14aGJtZDFZV2RsYzFzd1hYeDhYQ0pEWENJcExuSmxjR3hoWTJVb1hDSXRYQ0lzWENKZlhDSXBLMXdpTGxWVVJpMDRYQ0lzWHpwcVlYeDhYQ0l1TDNSb2FYTXVjSEp2WjNKaGJWd2lmU3hpTzJadmNpaGlJR2x1SUVOaUtYWnZhV1FnTUQwOVBVTmlXMkpkUDJSbGJHVjBaU0JoVzJKZE9tRmJZbDA5UTJKYllsMDdkbUZ5SUdNOVcxMDdabTl5S0dJZ2FXNGdZU2xqTG5CMWMyZ29ZQ1I3WW4wOUpIdGhXMkpkZldBcE8wUmlQV045Y21WMGRYSnVJRVJpZlN4RVlqdGNibVoxYm1OMGFXOXVJRVppS0dFc1lpbDdhV1lvUkNseVpYUjFjbTRnVnlneE9Td3hMR0VzWWlrN1lUNCtQajB3TzJJK1BqNDlNRHQyWVhJZ1l6MHdPMFZpS0NrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlobExHZ3BlM1poY2lCblBXSXJZenRvUFhJb0tWdGhLelFxYUQ0K01qNCtQakJkUFdjN1ptOXlLR2M5TUR0blBHVXViR1Z1WjNSb095c3JaeWxoWVNncFcyZ3JLejQrTUQ0K1BqQmRQV1V1WTJoaGNrTnZaR1ZCZENobktUdGhZU2dwVzJnK1BqQStQajR3WFQwd08yTXJQV1V1YkdWdVozUm9LekY5S1R0eVpYUjFjbTRnTUgxbWRXNWpkR2x2YmlCSFlpaGhMR0lwZTJsbUtFUXBjbVYwZFhKdUlGY29NakFzTVN4aExHSXBPMkUrUGo0OU1EdGlQajQrUFRBN2RtRnlJR005UldJb0tUdHlLQ2xiWVQ0K01qNCtQakJkUFdNdWJHVnVaM1JvTzNaaGNpQmxQVEE3WXk1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dncGUyVXJQV2d1YkdWdVozUm9LekY5S1R0eUtDbGJZajQrTWo0K1BqQmRQV1U3Y21WMGRYSnVJREI5Wm5WdVkzUnBiMjRnU0dJb1lTbDdjbVYwZFhKdUlFUS9WeWd5TVN3eExHRXBPalV5ZldaMWJtTjBhVzl1SUV4aUtHRXNZaXhqTEdVcGUzSmxkSFZ5YmlCRVAxY29NaklzTVN4aExHSXNZeXhsS1RvMU1uMWNibVoxYm1OMGFXOXVJRTFpS0dFc1lpeGpMR1VzYUNsN2NtVjBkWEp1SUVRL1Z5Z3lNeXd4TEdFc1lpeGpMR1VzYUNrNk56QjlkbUZ5SUU1aVBWdHVkV3hzTEZ0ZExGdGRYVHRtZFc1amRHbHZiaUJQWWloaExHSXNZeXhsS1h0cFppaEVLWEpsZEhWeWJpQlhLREkwTERFc1lTeGlMR01zWlNrN1lqNCtQajB3TzJNK1BqNDlNRHRsUGo0K1BUQTdabTl5S0haaGNpQm9QVEFzWnowd08yYzhZenRuS3lzcGUzWmhjaUJyUFhJb0tWdGlQajR5UGo0K01GMHNkRDF5S0NsYllpczBQajR5UGo0K01GMDdZaXM5T0R0bWIzSW9kbUZ5SUVNOU1EdERQSFE3UXlzcktYdDJZWElnZGoxdUtDbGJheXREUGo0K01GMHNlVDFPWWx0aFhUc3dQVDA5ZG54OE1UQTlQVDEyUHlnb01UMDlQV0UvY1dFNlNTa29TbUVvZVN3d0tTa3NlUzVzWlc1bmRHZzlNQ2s2ZVM1d2RYTm9LSFlwZldnclBYUjljaWdwVzJVK1BqSStQajR3WFQxb08zSmxkSFZ5YmlBd2ZYWmhjaUJRWWoxYk16RXNNamtzTXpFc016QXNNekVzTXpBc016RXNNekVzTXpBc016RXNNekFzTXpGZExGRmlQVnN6TVN3eU9Dd3pNU3d6TUN3ek1Td3pNQ3d6TVN3ek1Td3pNQ3d6TVN3ek1Dd3pNVjA3Wm5WdVkzUnBiMjRnVW1Jb1lTbDdkbUZ5SUdJOVFYSnlZWGtvWVdJb1lTa3JNU2s3WW1Jb1lTeGlMREFzWWk1c1pXNW5kR2dwTzNKbGRIVnliaUJpZlZ4dWRtRnlJRk5pUFNoaExHSXBQVDU3WVdFb0tTNXpaWFFvWVN4aVBqNCtNQ2w5TzF4dVpuVnVZM1JwYjI0Z1ZHSW9ZU3hpTEdNc1pTbDdablZ1WTNScGIyNGdhQ2htTEhFc2RTbDdabTl5S0dZOVhDSnVkVzFpWlhKY0lqMDlkSGx3Wlc5bUlHWS9aaTUwYjFOMGNtbHVaeWdwT21aOGZGd2lYQ0k3Wmk1c1pXNW5kR2c4Y1RzcFpqMTFXekJkSzJZN2NtVjBkWEp1SUdaOVpuVnVZM1JwYjI0Z1p5aG1MSEVwZTNKbGRIVnliaUJvS0dZc2NTeGNJakJjSWlsOVpuVnVZM1JwYjI0Z2F5aG1MSEVwZTJaMWJtTjBhVzl1SUhVb1NXSXBlM0psZEhWeWJpQXdQa2xpUHkweE9qQThTV0kvTVRvd2ZYWmhjaUJIT3pBOVBUMG9SejExS0dZdVoyVjBSblZzYkZsbFlYSW9LUzF4TG1kbGRFWjFiR3haWldGeUtDa3BLU1ltTUQwOVBTaEhQWFVvWmk1blpYUk5iMjUwYUNncExYRXVaMlYwVFc5dWRHZ29LU2twSmlZb1J6MTFLR1l1WjJWMFJHRjBaU2dwTFhFdVoyVjBSR0YwWlNncEtTazdjbVYwZFhKdUlFZDlablZ1WTNScGIyNGdkQ2htS1h0emQybDBZMmdvWmk1blpYUkVZWGtvS1NsN1kyRnpaU0F3T25KbGRIVnliaUJ1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3RNU3d4TVN3eU9TazdZMkZ6WlNBeE9uSmxkSFZ5YmlCbU8yTmhjMlVnTWpweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMREFzTXlrN1kyRnpaU0F6T25KbGRIVnliaUJ1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3NYRzR3TERJcE8yTmhjMlVnTkRweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMREFzTVNrN1kyRnpaU0ExT25KbGRIVnliaUJ1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3RNU3d4TVN3ek1TazdZMkZ6WlNBMk9uSmxkSFZ5YmlCdVpYY2dSR0YwWlNobUxtZGxkRVoxYkd4WlpXRnlLQ2t0TVN3eE1Td3pNQ2w5ZldaMWJtTjBhVzl1SUVNb1ppbDdkbUZ5SUhFOVppNVFZVHRtYjNJb1pqMXVaWGNnUkdGMFpTZ29ibVYzSUVSaGRHVW9aaTVSWVNzeE9UQXdMREFzTVNrcExtZGxkRlJwYldVb0tTazdNRHh4T3lsN2RtRnlJSFU5Wmk1blpYUk5iMjUwYUNncExFYzlLRm9vWmk1blpYUkdkV3hzV1dWaGNpZ3BLVDlRWWpwUllpbGJkVjA3YVdZb2NUNUhMV1l1WjJWMFJHRjBaU2dwS1hFdFBVY3RaaTVuWlhSRVlYUmxLQ2tyTVN4bUxuTmxkRVJoZEdVb01Ta3NNVEUrZFQ5bUxuTmxkRTF2Ym5Sb0tIVXJNU2s2S0dZdWMyVjBUVzl1ZEdnb01Da3NaaTV6WlhSR2RXeHNXV1ZoY2lobUxtZGxkRVoxYkd4WlpXRnlLQ2tyTVNrcE8yVnNjMlY3Wmk1elpYUkVZWFJsS0dZdVoyVjBSR0YwWlNncEszRXBPMkp5WldGcmZYMTFQVzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTc3hMREFzTkNrN2NUMTBLRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTeGNiakFzTkNrcE8zVTlkQ2gxS1R0eVpYUjFjbTRnTUQ0OWF5aHhMR1lwUHpBK1BXc29kU3htS1Q5bUxtZGxkRVoxYkd4WlpXRnlLQ2tyTVRwbUxtZGxkRVoxYkd4WlpXRnlLQ2s2Wmk1blpYUkdkV3hzV1dWaGNpZ3BMVEY5WVQ0K1BqMHdPMkkrUGo0OU1EdGpQajQrUFRBN1pUNCtQajB3TzNaaGNpQjJQWEFvS1Z0bEt6UXdQajR5UGo0K01GMDdaVDE3Y1dJNmNDZ3BXMlUrUGpJK1BqNHdYU3h3WWpwd0tDbGJaU3MwUGo0eVBqNCtNRjBzVTJFNmNDZ3BXMlVyT0Q0K01qNCtQakJkTEZkaE9uQW9LVnRsS3pFeVBqNHlQajQrTUYwc1ZHRTZjQ2dwVzJVck1UWStQakkrUGo0d1hTeFJZVHB3S0NsYlpTc3lNRDQrTWo0K1BqQmRMRTFoT25Bb0tWdGxLekkwUGo0eVBqNCtNRjBzVUdFNmNDZ3BXMlVyTWpnK1BqSStQajR3WFN4NVlqcHdLQ2xiWlNzek1qNCtNajQrUGpCZExHOWlPbkFvS1Z0bEt6TTJQajR5UGo0K01GMHNjbUk2ZGo5TFlTaDJLVHBjSWx3aWZUdGpQVXRoS0dNcE8zWTllMXdpSldOY0lqcGNJaVZoSUNWaUlDVmtJQ1ZJT2lWTk9pVlRJQ1ZaWENJc1hDSWxSRndpT2x3aUpXMHZKV1F2SlhsY0lpeGNJaVZHWENJNlhDSWxXUzBsYlMwbFpGd2lMRndpSldoY0lqcGNJaVZpWENJc1hDSWxjbHdpT2x3aUpVazZKVTA2SlZNZ0pYQmNJaXhjSWlWU1hDSTZYQ0lsU0RvbFRWd2lMRndpSlZSY0lqcGNJaVZJT2lWTk9pVlRYQ0lzWENJbGVGd2lPbHdpSlcwdkpXUXZKWGxjSWl4Y2Jsd2lKVmhjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsUldOY0lqcGNJaVZqWENJc1hDSWxSVU5jSWpwY0lpVkRYQ0lzWENJbFJYaGNJanBjSWlWdEx5VmtMeVY1WENJc1hDSWxSVmhjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsUlhsY0lqcGNJaVY1WENJc1hDSWxSVmxjSWpwY0lpVlpYQ0lzWENJbFQyUmNJanBjSWlWa1hDSXNYQ0lsVDJWY0lqcGNJaVZsWENJc1hDSWxUMGhjSWpwY0lpVklYQ0lzWENJbFQwbGNJanBjSWlWSlhDSXNYQ0lsVDIxY0lqcGNJaVZ0WENJc1hDSWxUMDFjSWpwY0lpVk5YQ0lzWENJbFQxTmNJanBjSWlWVFhDSXNYQ0lsVDNWY0lqcGNJaVYxWENJc1hDSWxUMVZjSWpwY0lpVlZYQ0lzWENJbFQxWmNJanBjSWlWV1hDSXNYQ0lsVDNkY0lqcGNJaVYzWENJc1hDSWxUMWRjSWpwY0lpVlhYQ0lzWENJbFQzbGNJanBjSWlWNVhDSjlPMlp2Y2loMllYSWdlU0JwYmlCMktXTTlZeTV5WlhCc1lXTmxLRzVsZHlCU1pXZEZlSEFvZVN4Y0ltZGNJaWtzZGx0NVhTazdkbUZ5SUVwaVBWd2lVM1Z1WkdGNUlFMXZibVJoZVNCVWRXVnpaR0Y1SUZkbFpHNWxjMlJoZVNCVWFIVnljMlJoZVNCR2NtbGtZWGtnVTJGMGRYSmtZWGxjSWk1emNHeHBkQ2hjSWlCY0lpa3NTMkk5WENKS1lXNTFZWEo1SUVabFluSjFZWEo1SUUxaGNtTm9JRUZ3Y21sc0lFMWhlU0JLZFc1bElFcDFiSGtnUVhWbmRYTjBJRk5sY0hSbGJXSmxjaUJQWTNSdlltVnlJRTV2ZG1WdFltVnlJRVJsWTJWdFltVnlYQ0l1YzNCc2FYUW9YQ0lnWENJcE8zWTllMXdpSldGY0lqcG1QVDVLWWx0bUxrMWhYUzV6ZFdKemRISnBibWNvTUN3ektTeGNibHdpSlVGY0lqcG1QVDVLWWx0bUxrMWhYU3hjSWlWaVhDSTZaajArUzJKYlppNVVZVjB1YzNWaWMzUnlhVzVuS0RBc015a3NYQ0lsUWx3aU9tWTlQa3RpVzJZdVZHRmRMRndpSlVOY0lqcG1QVDVuS0NobUxsRmhLekU1TURBcEx6RXdNSHd3TERJcExGd2lKV1JjSWpwbVBUNW5LR1l1VjJFc01pa3NYQ0lsWlZ3aU9tWTlQbWdvWmk1WFlTd3lMRndpSUZ3aUtTeGNJaVZuWENJNlpqMCtReWhtS1M1MGIxTjBjbWx1WnlncExuTjFZbk4wY21sdVp5Z3lLU3hjSWlWSFhDSTZaajArUXlobUtTeGNJaVZJWENJNlpqMCtaeWhtTGxOaExESXBMRndpSlVsY0lqcG1QVDU3WmoxbUxsTmhPekE5UFdZL1pqMHhNam94TWp4bUppWW9aaTA5TVRJcE8zSmxkSFZ5YmlCbktHWXNNaWw5TEZ3aUpXcGNJanBtUFQ1N1ptOXlLSFpoY2lCeFBUQXNkVDB3TzNVOFBXWXVWR0V0TVR0eEt6MG9XaWhtTGxGaEt6RTVNREFwUDFCaU9sRmlLVnQxS3l0ZEtUdHlaWFIxY200Z1p5aG1MbGRoSzNFc015bDlMRndpSlcxY0lqcG1QVDVuS0dZdVZHRXJNU3d5S1N4Y0lpVk5YQ0k2WmowK1p5aG1MbkJpTERJcExGd2lKVzVjSWpvb0tUMCtYQ0pjWEc1Y0lpeGNJaVZ3WENJNlpqMCtNRHc5Wmk1VFlTWW1NVEkrWmk1VFlUOWNJa0ZOWENJNlhDSlFUVndpTEZ3aUpWTmNJanBtUFQ1bktHWXVjV0lzTWlrc1hDSWxkRndpT2lncFBUNWNJbHhjZEZ3aUxGd2lKWFZjSWpwbVBUNW1MazFoZkh3M0xGd2lKVlZjSWpwbVBUNW5LRTFoZEdndVpteHZiM0lvS0dZdVVHRXJYRzQzTFdZdVRXRXBMemNwTERJcExGd2lKVlpjSWpwbVBUNTdkbUZ5SUhFOVRXRjBhQzVtYkc5dmNpZ29aaTVRWVNzM0xTaG1MazFoS3pZcEpUY3BMemNwT3pJK1BTaG1MazFoS3pNM01TMW1MbEJoTFRJcEpUY21KbkVyS3p0cFppaHhLVFV6UFQxeEppWW9kVDBvWmk1TllTc3pOekV0Wmk1UVlTa2xOeXcwUFQxMWZId3pQVDExSmlaYUtHWXVVV0VwZkh3b2NUMHhLU2s3Wld4elpYdHhQVFV5TzNaaGNpQjFQU2htTGsxaEt6Y3RaaTVRWVMweEtTVTNPeWcwUFQxMWZIdzFQVDExSmlaYUtHWXVVV0VsTkRBd0xURXBLU1ltY1NzcmZYSmxkSFZ5YmlCbktIRXNNaWw5TEZ3aUpYZGNJanBtUFQ1bUxrMWhMRndpSlZkY0lqcG1QVDVuS0UxaGRHZ3VabXh2YjNJb0tHWXVVR0VyTnkwb1ppNU5ZU3MyS1NVM0tTODNLU3d5S1N4Y0lpVjVYQ0k2WmowK0tHWXVVV0VyTVRrd01Da3VkRzlUZEhKcGJtY29LUzV6ZFdKemRISnBibWNvTWlrc1hDSWxXVndpT21ZOVBtWXVVV0VyTVRrd01DeGNJaVY2WENJNlpqMCtlMlk5Wmk1dllqdDJZWElnY1Qwd1BEMW1PMlk5VFdGMGFDNWhZbk1vWmlrdk5qQTdjbVYwZFhKdUtIRS9YQ0lyWENJNlhDSXRYQ0lwSzFOMGNtbHVaeWhjSWpBd01EQmNJaXNvWmk4Mk1Db3hNREFyWmlVMk1Da3BMbk5zYVdObEtDMDBLWDBzWENJbFdsd2lPbVk5UG1ZdWNtSXNYQ0lsSlZ3aU9pZ3BQVDVjSWlWY0luMDdZejFqTG5KbGNHeGhZMlVvTHlVbEwyY3NYRzVjSWx4Y2VEQXdYRng0TURCY0lpazdabTl5S0hrZ2FXNGdkaWxqTG1sdVkyeDFaR1Z6S0hrcEppWW9ZejFqTG5KbGNHeGhZMlVvYm1WM0lGSmxaMFY0Y0NoNUxGd2laMXdpS1N4MlczbGRLR1VwS1NrN1l6MWpMbkpsY0d4aFkyVW9MMXhjTUZ4Y01DOW5MRndpSlZ3aUtUdDVQVkppS0dNcE8ybG1LSGt1YkdWdVozUm9QbUlwY21WMGRYSnVJREE3VTJJb2VTeGhLVHR5WlhSMWNtNGdlUzVzWlc1bmRHZ3RNWDFXTGxaaEtDazdYRzUyWVhJZ1ZXSTlXMjUxYkd3c1RHRXNUV0VzV0dFc1dtRXNKR0VzWkdJc1pXSXNabUlzWjJJc2FHSXNhV0lzYW1Jc2EySXNiR0lzYldJc2JtSXNkR0lzZFdJc1JtSXNSMklzU0dJc1RHSXNUV0lzVDJKZExGaGlQWHRpT21aMWJtTjBhVzl1S0dFc1lpeGpLWHRoUGo0K1BUQTdLRzVsZHlCVllTaGhLU2t1Vm1Fb1lqNCtQakFzWXo0K1BqQXBPMVpoUFdFN1YyRXJLenQwYUhKdmR5QldZVHQ5TEU0NlpuVnVZM1JwYjI0b1lTbDdWbUlvWVQ0K1BqQXNJVUVzTVN3aGEyRXNNVE14TURjeUxDRXhLVHRXTGxsaEtDbDlMR282Wm5WdVkzUnBiMjRvWVNsN1lUNCtQajB3TzBRL2NHOXpkRTFsYzNOaFoyVW9lMk50WkRwY0ltTnNaV0Z1ZFhCVWFISmxZV1JjSWl4MGFISmxZV1E2WVgwcE9rZGhLR0VwZlN4Sk9sbGhMR2c2V21Fc1ZEb2tZU3hFT21SaUxFWTZaV0lzVlRwbVlpeFNPbWRpTEVvNmFHSXNVVHBwWWl4dU9tcGlMRVU2YTJJc1FqcHNZaXhUT20xaUxFTTZibUlzY1Rvb0tUMCtJVEFzZWpwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OU1EdGhQVDFpUGo0K01EOXpaWFJVYVcxbGIzVjBLQ2dwUFQ1WktDa3BPa1EvY0c5emRFMWxjM05oWjJVb2UzUmhjbWRsZEZSb2NtVmhaRHBoTEdOdFpEcGNJbU5vWldOclRXRnBiR0p2ZUZ3aWZTazZLR0U5Vmk1TVlWdGhYU2ttSm1FdWNHOXpkRTFsYzNOaFoyVW9lMk50WkRwY0ltTm9aV05yVFdGcGJHSnZlRndpZlNsOUxGeHVURHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaTB4ZlN4Tk9uQmlMSEE2Wm5WdVkzUnBiMjRvWVNsN1FpWW1WaTVNWVZ0aFBqNCtNRjB1Y21WbUtDbDlMSFE2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkU5WWlzeU1EazNNVFV5UGo0K01EdzBNVGswTXpBMUxTRWhZVDhvWVQ0K1BqQXBLelF5T1RRNU5qY3lPVFlxWWpwT1lVNDdZejQrUGowd08yRTlibVYzSUVSaGRHVW9NVVV6S21FcE8zQW9LVnRqUGo0eVBqNCtNRjA5WVM1blpYUlZWRU5UWldOdmJtUnpLQ2s3Y0NncFcyTXJORDQrTWo0K1BqQmRQV0V1WjJWMFZWUkRUV2x1ZFhSbGN5Z3BPM0FvS1Z0akt6ZytQakkrUGo0d1hUMWhMbWRsZEZWVVEwaHZkWEp6S0NrN2NDZ3BXMk1yTVRJK1BqSStQajR3WFQxaExtZGxkRlZVUTBSaGRHVW9LVHR3S0NsYll5c3hOajQrTWo0K1BqQmRQV0V1WjJWMFZWUkRUVzl1ZEdnb0tUdHdLQ2xiWXlzeU1ENCtNajQrUGpCZFBXRXVaMlYwVlZSRFJuVnNiRmxsWVhJb0tTMHhPVEF3TzNBb0tWdGpLekkwUGo0eVBqNCtNRjA5WVM1blpYUlZWRU5FWVhrb0tUdGhQU2hoTG1kbGRGUnBiV1VvS1MxRVlYUmxMbFZVUXloaExtZGxkRlZVUTBaMWJHeFpaV0Z5S0Nrc01Dd3hMREFzTUN3d0xEQXBLUzg0TmpSRk5Yd3dPM0FvS1Z0akt6STRQajR5UGo0K01GMDlZWDBzZFRwbWRXNWpkR2x2YmloaExHSXNZeWw3WVQxaUsxeHVNakE1TnpFMU1qNCtQakE4TkRFNU5ETXdOUzBoSVdFL0tHRStQajR3S1NzME1qazBPVFkzTWprMkttSTZUbUZPTzJNK1BqNDlNRHRoUFc1bGR5QkVZWFJsS0RGRk15cGhLVHR3S0NsYll6NCtNajQrUGpCZFBXRXVaMlYwVTJWamIyNWtjeWdwTzNBb0tWdGpLelErUGpJK1BqNHdYVDFoTG1kbGRFMXBiblYwWlhNb0tUdHdLQ2xiWXlzNFBqNHlQajQrTUYwOVlTNW5aWFJJYjNWeWN5Z3BPM0FvS1Z0akt6RXlQajR5UGo0K01GMDlZUzVuWlhSRVlYUmxLQ2s3Y0NncFcyTXJNVFkrUGpJK1BqNHdYVDFoTG1kbGRFMXZiblJvS0NrN2NDZ3BXMk1yTWpBK1BqSStQajR3WFQxaExtZGxkRVoxYkd4WlpXRnlLQ2t0TVRrd01EdHdLQ2xiWXlzeU5ENCtNajQrUGpCZFBXRXVaMlYwUkdGNUtDazdZajBvV2loaExtZGxkRVoxYkd4WlpXRnlLQ2twUDNKaU9uTmlLVnRoTG1kbGRFMXZiblJvS0NsZEsyRXVaMlYwUkdGMFpTZ3BMVEY4TUR0d0tDbGJZeXN5T0Q0K01qNCtQakJkUFdJN2NDZ3BXMk1yTXpZK1BqSStQajR3WFQwdEtEWXdLbUV1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1NrN1lqMG9ibVYzSUVSaGRHVW9ZUzVuWlhSR2RXeHNXV1ZoY2lncExEWXNNU2twTG1kbGRGUnBiV1Y2YjI1bFQyWm1jMlYwS0NrN2RtRnlJR1U5S0c1bGR5QkVZWFJsS0dFdVoyVjBSblZzYkZsbFlYSW9LU3d3TERFcEtTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BPMXh1WVQwb1lpRTlaU1ltWVM1blpYUlVhVzFsZW05dVpVOW1abk5sZENncFBUMU5ZWFJvTG0xcGJpaGxMR0lwS1h3d08zQW9LVnRqS3pNeVBqNHlQajQrTUYwOVlYMHNkanBtZFc1amRHbHZiaWhoS1h0aFBqNCtQVEE3ZG1GeUlHSTlibVYzSUVSaGRHVW9jQ2dwVzJFck1qQStQakkrUGo0d1hTc3hPVEF3TEhBb0tWdGhLekUyUGo0eVBqNCtNRjBzY0NncFcyRXJNVEkrUGpJK1BqNHdYU3h3S0NsYllTczRQajR5UGo0K01GMHNjQ2dwVzJFck5ENCtNajQrUGpCZExIQW9LVnRoUGo0eVBqNCtNRjBzTUNrc1l6MXdLQ2xiWVNzek1qNCtNajQrUGpCZExHVTlZaTVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTEdnOUtHNWxkeUJFWVhSbEtHSXVaMlYwUm5Wc2JGbGxZWElvS1N3MkxERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTEdjOUtHNWxkeUJFWVhSbEtHSXVaMlYwUm5Wc2JGbGxZWElvS1N3d0xERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTEdzOVRXRjBhQzV0YVc0b1p5eG9LVHN3UG1NL2NDZ3BXMkVyTXpJK1BqSStQajR3WFQxT2RXMWlaWElvYUNFOVp5WW1hejA5WlNrNk1EeGpJVDBvYXowOVpTa21KaWhvUFUxaGRHZ3ViV0Y0S0djc2FDa3NZaTV6WlhSVWFXMWxLR0l1WjJWMFZHbHRaU2dwS3paRk5Db29LREE4WXo5ck9tZ3BMV1VwS1NrN2NDZ3BXMkVyTWpRK1BqSStQajVjYmpCZFBXSXVaMlYwUkdGNUtDazdZejBvV2loaUxtZGxkRVoxYkd4WlpXRnlLQ2twUDNKaU9uTmlLVnRpTG1kbGRFMXZiblJvS0NsZEsySXVaMlYwUkdGMFpTZ3BMVEY4TUR0d0tDbGJZU3N5T0Q0K01qNCtQakJkUFdNN2NDZ3BXMkUrUGpJK1BqNHdYVDFpTG1kbGRGTmxZMjl1WkhNb0tUdHdLQ2xiWVNzMFBqNHlQajQrTUYwOVlpNW5aWFJOYVc1MWRHVnpLQ2s3Y0NncFcyRXJPRDQrTWo0K1BqQmRQV0l1WjJWMFNHOTFjbk1vS1R0d0tDbGJZU3N4TWo0K01qNCtQakJkUFdJdVoyVjBSR0YwWlNncE8zQW9LVnRoS3pFMlBqNHlQajQrTUYwOVlpNW5aWFJOYjI1MGFDZ3BPM0FvS1Z0aEt6SXdQajR5UGo0K01GMDlZaTVuWlhSWlpXRnlLQ2s3WVQxaUxtZGxkRlJwYldVb0tTOHhSVE03Y21WMGRYSnVJRmRpS0NoVVBXRXNNVHc5SzAxaGRHZ3VZV0p6S0ZRcFB6QThWRDhyVFdGMGFDNW1iRzl2Y2loVUx6UXlPVFE1TmpjeU9UWXBQajQrTURwK2ZpdE5ZWFJvTG1ObGFXd29LRlF0S3loK2ZsUStQajR3S1Nrdk5ESTVORGsyTnpJNU5paytQajR3T2pBcEtTeGhQajQrTUgwc2NqcDBZaXh6T25WaUxIazZablZ1WTNScGIyNG9ZU3hpTEdNcGUyWjFibU4wYVc5dUlHVW9kaWw3Y21WMGRYSnVLSFk5ZGk1MGIxUnBiV1ZUZEhKcGJtY29LUzV0WVhSamFDZ3ZYRndvS0Z0QkxWcGhMWG9nWFNzcFhGd3BKQzhwS1Q5Y2JuWmJNVjA2WENKSFRWUmNJbjFoUGo0K1BUQTdZajQrUGowd08yTStQajQ5TUR0MllYSWdhRDBvYm1WM0lFUmhkR1VwTG1kbGRFWjFiR3haWldGeUtDa3NaejF1WlhjZ1JHRjBaU2hvTERBc01Ta3NhejF1WlhjZ1JHRjBaU2hvTERZc01TazdhRDFuTG1kbGRGUnBiV1Y2YjI1bFQyWm1jMlYwS0NrN2RtRnlJSFE5YXk1blpYUlVhVzFsZW05dVpVOW1abk5sZENncExFTTlUV0YwYUM1dFlYZ29hQ3gwS1R0eUtDbGJZVDQrTWo0K1BqQmRQVFl3S2tNN2NDZ3BXMkkrUGpJK1BqNHdYVDFPZFcxaVpYSW9hQ0U5ZENrN1lUMWxLR2NwTzJJOVpTaHJLVHRoUFhkaUtHRXBPMkk5ZDJJb1lpazdkRHhvUHloeUtDbGJZejQrTWo0K1BqQmRQV0VzY2lncFcyTXJORDQrTWo0K1BqQmRQV0lwT2loeUtDbGJZejQrTWo0K1BqQmRQV0lzY2lncFcyTXJORDQrTWo0K1BqQmRQV0VwZlN4ak9pZ3BQVDU3U3loY0lsd2lLWDBzYXpwbWRXNWpkR2x2YmlncGUzMHNhVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJFWVhSbExtNXZkeWdwZlN4dk9pZ3BQVDU3ZDJFclBURTdkR2h5YjNkY0luVnVkMmx1WkZ3aU8zMHNRVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUEwTWprME9UQXhOell3ZlN4bE9pZ3BQVDV3WlhKbWIzSnRZVzVqWlM1MGFXMWxUM0pwWjJsdUszQmxjbVp2Y20xaGJtTmxMbTV2ZHlncExHWTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdRajljYm5KbGNYVnBjbVVvWENKdmMxd2lLUzVqY0hWektDa3ViR1Z1WjNSb09tNWhkbWxuWVhSdmNpNW9ZWEprZDJGeVpVTnZibU4xY25KbGJtTjVmU3hMT21aMWJtTjBhVzl1S0dFc1lpeGpMR1VwZTFZdWRtSTlZajQrUGpBN1FtSXViR1Z1WjNSb1BXTTdZajFsUGo0K01ENCtNenRtYjNJb1pUMHdPMlU4WXp0bEt5c3BRbUpiWlYwOVpXRW9LVnRpSzJVK1BqNHdYVHR5WlhSMWNtNGdWV0piWVYwdVlYQndiSGtvYm5Wc2JDeENZaWw5TEhnNlpuVnVZM1JwYjI0b1lTbDdZVDQrUGowd08zWmhjaUJpUFc0b0tTNXNaVzVuZEdnN2FXWW9ZVHc5WW54OE5ESTVORGt3TVRjMk1EeGhLWEpsZEhWeWJpRXhPMlp2Y2loMllYSWdZejB4T3pRK1BXTTdZeW85TWlsN2RtRnlJR1U5WWlvb01Tc3VNaTlqS1R0bFBVMWhkR2d1YldsdUtHVXNZU3N4TURBMk5qTXlPVFlwTzNaaGNpQm9QVTFoZEdnN1pUMU5ZWFJvTG0xaGVDaGhMR1VwTzJFNmUyZzlhQzV0YVc0dVkyRnNiQ2hvTERReU9UUTVNREUzTmpBc1pTc29OalUxTXpZdFpTVTJOVFV6TmlrbE5qVTFNellwTFdRdVluVm1abVZ5TG1KNWRHVk1aVzVuZEdnck5qVTFNelUrUGo0eE5qdDBjbmw3WkM1bmNtOTNLR2dwTzIwb0tUdDJZWElnWnoweE8ySnlaV0ZySUdGOVkyRjBZMmdvYXlsN2ZXYzlkbTlwWkNBd2ZXbG1LR2NwY21WMGRYSnVJVEI5Y21WMGRYSnVJVEY5TEZ4dVR6cEdZaXhRT2tkaUxFZzZUbUVzWnpwSVlpeHRPa3hpTEhjNlRXSXNiRHBQWWl4aE9tUjhmSGN1ZDJGemJVMWxiVzl5ZVN4SE9sUmlMR1E2Wm5WdVkzUnBiMjRvWVN4aUxHTXNaU2w3Y21WMGRYSnVJRlJpS0dFK1BqNHdMR0krUGo0d0xHTStQajR3TEdVK1BqNHdLWDE5T3lobWRXNWpkR2x2YmlncGUyWjFibU4wYVc5dUlHRW9ZeXhsS1h0alBXTXVaWGh3YjNKMGN6dE1QV005V1dJb1l5azdWaTVhWVM1d2RYTm9LRXd1ZVdFcE8zTmhQVXd1ZW1FN2RXRXVkVzV6YUdsbWRDaE1MbFlwTzNKaFBXVTdlbUVvS1R0eVpYUjFjbTRnWTMxMllYSWdZajE3WVRwWVluMDdlV0VvS1R0cFppaDNMbWx1YzNSaGJuUnBZWFJsVjJGemJTbDBjbmw3Y21WMGRYSnVJSGN1YVc1emRHRnVkR2xoZEdWWFlYTnRLR0lzWVNsOVkyRjBZMmdvWXlsN1NTaGNJazF2WkhWc1pTNXBibk4wWVc1MGFXRjBaVmRoYzIwZ1kyRnNiR0poWTJzZ1ptRnBiR1ZrSUhkcGRHZ2daWEp5YjNJNklGd2lLMk1wTEhnb1l5bDlSV0VvWWl4bWRXNWpkR2x2YmloaktYdGhLR011YVc1emRHRnVZMlVzWXk1dGIyUjFiR1VwZlNrdVkyRjBZMmdvZUNrN2NtVjBkWEp1ZTMxOUtTZ3BPM2N1WDA5eWRFbHVhWFE5S0dFc1lpazlQaWgzTGw5UGNuUkpibWwwUFV3dVZ5a29ZU3hpS1R0Y2JuY3VYMDl5ZEVkbGRFeGhjM1JGY25KdmNqMG9ZU3hpS1QwK0tIY3VYMDl5ZEVkbGRFeGhjM1JGY25KdmNqMU1MbGdwS0dFc1lpazdkeTVmVDNKMFEzSmxZWFJsVTJWemMybHZiazl3ZEdsdmJuTTlLR0VzWWl4akxHVXNhQ3huTEdzc2RDeERMSFlwUFQ0b2R5NWZUM0owUTNKbFlYUmxVMlZ6YzJsdmJrOXdkR2x2Ym5NOVRDNVpLU2hoTEdJc1l5eGxMR2dzWnl4ckxIUXNReXgyS1R0M0xsOVBjblJCY0hCbGJtUkZlR1ZqZFhScGIyNVFjbTkyYVdSbGNqMG9ZU3hpS1QwK0tIY3VYMDl5ZEVGd2NHVnVaRVY0WldOMWRHbHZibEJ5YjNacFpHVnlQVXd1V2lrb1lTeGlLVHQzTGw5UGNuUkJaR1JHY21WbFJHbHRaVzV6YVc5dVQzWmxjbkpwWkdVOUtHRXNZaXhqS1QwK0tIY3VYMDl5ZEVGa1pFWnlaV1ZFYVcxbGJuTnBiMjVQZG1WeWNtbGtaVDFNTGw4cEtHRXNZaXhqS1R0M0xsOVBjblJCWkdSVFpYTnphVzl1UTI5dVptbG5SVzUwY25rOUtHRXNZaXhqS1QwK0tIY3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVUMU1MaVFwS0dFc1lpeGpLVHQzTGw5UGNuUlNaV3hsWVhObFUyVnpjMmx2Yms5d2RHbHZibk05WVQwK0tIY3VYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVUM0IwYVc5dWN6MU1MbUZoS1NoaEtUdGNibmN1WDA5eWRFTnlaV0YwWlZObGMzTnBiMjQ5S0dFc1lpeGpLVDArS0hjdVgwOXlkRU55WldGMFpWTmxjM05wYjI0OVRDNWlZU2tvWVN4aUxHTXBPM2N1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1UFdFOVBpaDNMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiajFNTG1OaEtTaGhLVHQzTGw5UGNuUkhaWFJKYm5CMWRFOTFkSEIxZEVOdmRXNTBQU2hoTEdJc1l5azlQaWgzTGw5UGNuUkhaWFJKYm5CMWRFOTFkSEIxZEVOdmRXNTBQVXd1WkdFcEtHRXNZaXhqS1R0M0xsOVBjblJIWlhSSmJuQjFkRTVoYldVOUtHRXNZaWs5UGloM0xsOVBjblJIWlhSSmJuQjFkRTVoYldVOVRDNWxZU2tvWVN4aUtUdDNMbDlQY25SSFpYUlBkWFJ3ZFhST1lXMWxQU2hoTEdJcFBUNG9keTVmVDNKMFIyVjBUM1YwY0hWMFRtRnRaVDFNTG1aaEtTaGhMR0lwTzNjdVgwOXlkRVp5WldVOVlUMCtLSGN1WDA5eWRFWnlaV1U5VEM1bllTa29ZU2s3ZHk1ZlQzSjBRM0psWVhSbFZHVnVjMjl5UFNoaExHSXNZeXhsTEdnc1p5azlQaWgzTGw5UGNuUkRjbVZoZEdWVVpXNXpiM0k5VEM1b1lTa29ZU3hpTEdNc1pTeG9MR2NwTzNjdVgwOXlkRWRsZEZSbGJuTnZja1JoZEdFOUtHRXNZaXhqTEdVc2FDazlQaWgzTGw5UGNuUkhaWFJVWlc1emIzSkVZWFJoUFV3dWFXRXBLR0VzWWl4akxHVXNhQ2s3WEc1M0xsOVBjblJTWld4bFlYTmxWR1Z1YzI5eVBXRTlQaWgzTGw5UGNuUlNaV3hsWVhObFZHVnVjMjl5UFV3dWFtRXBLR0VwTzNjdVgwOXlkRU55WldGMFpWSjFiazl3ZEdsdmJuTTlLR0VzWWl4akxHVXBQVDRvZHk1ZlQzSjBRM0psWVhSbFVuVnVUM0IwYVc5dWN6MU1MbXRoS1NoaExHSXNZeXhsS1R0M0xsOVBjblJCWkdSU2RXNURiMjVtYVdkRmJuUnllVDBvWVN4aUxHTXBQVDRvZHk1ZlQzSjBRV1JrVW5WdVEyOXVabWxuUlc1MGNuazlUQzVzWVNrb1lTeGlMR01wTzNjdVgwOXlkRkpsYkdWaGMyVlNkVzVQY0hScGIyNXpQV0U5UGloM0xsOVBjblJTWld4bFlYTmxVblZ1VDNCMGFXOXVjejFNTG0xaEtTaGhLVHQzTGw5UGNuUkRjbVZoZEdWQ2FXNWthVzVuUFdFOVBpaDNMbDlQY25SRGNtVmhkR1ZDYVc1a2FXNW5QVXd1Ym1FcEtHRXBPM2N1WDA5eWRFSnBibVJKYm5CMWREMG9ZU3hpTEdNcFBUNG9keTVmVDNKMFFtbHVaRWx1Y0hWMFBVd3ViMkVwS0dFc1lpeGpLVHQzTGw5UGNuUkNhVzVrVDNWMGNIVjBQU2hoTEdJc1l5eGxLVDArS0hjdVgwOXlkRUpwYm1SUGRYUndkWFE5VEM1d1lTa29ZU3hpTEdNc1pTazdkeTVmVDNKMFEyeGxZWEpDYjNWdVpFOTFkSEIxZEhNOVlUMCtLSGN1WDA5eWRFTnNaV0Z5UW05MWJtUlBkWFJ3ZFhSelBVd3VjV0VwS0dFcE8xeHVkeTVmVDNKMFVtVnNaV0Z6WlVKcGJtUnBibWM5WVQwK0tIY3VYMDl5ZEZKbGJHVmhjMlZDYVc1a2FXNW5QVXd1Y21FcEtHRXBPM2N1WDA5eWRGSjFibGRwZEdoQ2FXNWthVzVuUFNoaExHSXNZeXhsTEdncFBUNG9keTVmVDNKMFVuVnVWMmwwYUVKcGJtUnBibWM5VEM1ellTa29ZU3hpTEdNc1pTeG9LVHQzTGw5UGNuUlNkVzQ5S0dFc1lpeGpMR1VzYUN4bkxHc3NkQ2s5UGloM0xsOVBjblJTZFc0OVRDNTBZU2tvWVN4aUxHTXNaU3hvTEdjc2F5eDBLVHQzTGw5UGNuUkZibVJRY205bWFXeHBibWM5WVQwK0tIY3VYMDl5ZEVWdVpGQnliMlpwYkdsdVp6MU1MblZoS1NoaEtUdDJZWElnV0QxM0xsOXdkR2h5WldGa1gzTmxiR1k5S0NrOVBpaFlQWGN1WDNCMGFISmxZV1JmYzJWc1pqMU1MblpoS1NncExIWmlQWGN1WDIxaGJHeHZZejFoUFQ0b2RtSTlkeTVmYldGc2JHOWpQVXd1ZDJFcEtHRXBPM2N1WDJaeVpXVTlZVDArS0hjdVgyWnlaV1U5VEM1NFlTa29ZU2s3ZHk1ZlgyVnRjMk55YVhCMFpXNWZkR3h6WDJsdWFYUTlLQ2s5UGloM0xsOWZaVzF6WTNKcGNIUmxibDkwYkhOZmFXNXBkRDFNTG5saEtTZ3BPMXh1ZG1GeUlGWmlQWGN1WDE5bGJYTmpjbWx3ZEdWdVgzUm9jbVZoWkY5cGJtbDBQU2hoTEdJc1l5eGxMR2dzWnlrOVBpaFdZajEzTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZmFXNXBkRDFNTGtGaEtTaGhMR0lzWXl4bExHZ3NaeWs3ZHk1ZlgyVnRjMk55YVhCMFpXNWZkR2h5WldGa1gyTnlZWE5vWldROUtDazlQaWgzTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlkzSmhjMmhsWkQxTUxrSmhLU2dwTzNaaGNpQkJZajBvWVN4aUxHTXNaU2s5UGloQllqMU1Ma05oS1NoaExHSXNZeXhsS1N4UFlUMWhQVDRvVDJFOVRDNUVZU2tvWVNrc1ZHRTlkeTVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDJWNGFYUTlZVDArS0ZSaFBYY3VYMTlsYlhOamNtbHdkR1Z1WDNSb2NtVmhaRjlsZUdsMFBVd3VSV0VwS0dFcExIRmlQWGN1WDE5bGJYTmpjbWx3ZEdWdVgyTm9aV05yWDIxaGFXeGliM2c5S0NrOVBpaHhZajEzTGw5ZlpXMXpZM0pwY0hSbGJsOWphR1ZqYTE5dFlXbHNZbTk0UFV3dVJtRXBLQ2tzVjJJOVlUMCtLRmRpUFV3dVIyRXBLR0VwTEZGaFBTaGhMR0lwUFQ0b1VXRTlUQzVJWVNrb1lTeGlLU3g0WWowb0tUMCtLSGhpUFV3dVNXRXBLQ2tzVW1FOVlUMCtLRkpoUFV3dVNtRXBLR0VwTEhwaVBXRTlQaWg2WWoxTUxrdGhLU2hoS1R0Y2JtWjFibU4wYVc5dUlGbGlLR0VwZTJFOVQySnFaV04wTG1GemMybG5iaWg3ZlN4aEtUdDJZWElnWWoxbFBUNG9LVDArWlNncFBqNCtNQ3hqUFdVOVBtZzlQbVVvYUNrK1BqNHdPMkV1WDE5bGNuSnViMTlzYjJOaGRHbHZiajFpS0dFdVgxOWxjbkp1YjE5c2IyTmhkR2x2YmlrN1lTNXdkR2h5WldGa1gzTmxiR1k5WWloaExuQjBhSEpsWVdSZmMyVnNaaWs3WVM1dFlXeHNiMk05WXloaExtMWhiR3h2WXlrN1lTNXpkR0ZqYTFOaGRtVTlZaWhoTG5OMFlXTnJVMkYyWlNrN1lTNXpkR0ZqYTBGc2JHOWpQV01vWVM1emRHRmphMEZzYkc5aktUdHlaWFIxY200Z1lYMTNMbXRsWlhCU2RXNTBhVzFsUVd4cGRtVTlVRHQzTG5kaGMyMU5aVzF2Y25rOVpEdDNMbk4wWVdOclFXeHNiMk05ZW1JN2R5NXpkR0ZqYTFOaGRtVTllR0k3ZHk1emRHRmphMUpsYzNSdmNtVTlVbUU3ZHk1VlZFWTRWRzlUZEhKcGJtYzlTMkU3ZHk1emRISnBibWRVYjFWVVJqZzlZMkk3ZHk1c1pXNW5kR2hDZVhSbGMxVlVSamc5WVdJN2R5NUZlR2wwVTNSaGRIVnpQVlU3ZHk1UVZHaHlaV0ZrUFZZN2RtRnlJRnBpTzFJOVpuVnVZM1JwYjI0Z0pHSW9LWHRhWW54OFlXTW9LVHRhWW54OEtGSTlKR0lwZlR0Y2JtWjFibU4wYVc5dUlHRmpLQ2w3Wm5WdVkzUnBiMjRnWVNncGUybG1LQ0ZhWWlZbUtGcGlQU0V3TEhjdVkyRnNiR1ZrVW5WdVBTRXdMQ0ZOS1NsN1JIeDhVR0VvZFdFcE8yaGhLSGNwTzJsbUtIY3ViMjVTZFc1MGFXMWxTVzVwZEdsaGJHbDZaV1FwZHk1dmJsSjFiblJwYldWSmJtbDBhV0ZzYVhwbFpDZ3BPMmxtS0NGRUtYdHBaaWgzTG5CdmMzUlNkVzRwWm05eUtGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSGN1Y0c5emRGSjFiaVltS0hjdWNHOXpkRkoxYmoxYmR5NXdiM04wVW5WdVhTazdkeTV3YjNOMFVuVnVMbXhsYm1kMGFEc3BlM1poY2lCaVBYY3VjRzl6ZEZKMWJpNXphR2xtZENncE8zWmhMblZ1YzJocFpuUW9ZaWw5VUdFb2RtRXBmWDE5YVdZb0lTZ3dQRkVwS1dsbUtFUXBhR0VvZHlrc1JIeDhVR0VvZFdFcExITjBZWEowVjI5eWEyVnlLSGNwTzJWc2MyVjdhV1lvZHk1d2NtVlNkVzRwWm05eUtGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSGN1Y0hKbFVuVnVKaVlvZHk1d2NtVlNkVzQ5VzNjdWNISmxVblZ1WFNrN2R5NXdjbVZTZFc0dWJHVnVaM1JvT3lsMFlTNTFibk5vYVdaMEtIY3VjSEpsVW5WdUxuTm9hV1owS0NrcE8xQmhLSFJoS1Rzd1BGRjhmQ2gzTG5ObGRGTjBZWFIxY3o4b2R5NXpaWFJUZEdGMGRYTW9YQ0pTZFc1dWFXNW5MaTR1WENJcExITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LWHR6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN2R5NXpaWFJUZEdGMGRYTW9YQ0pjSWlsOUxGeHVNU2s3WVNncGZTd3hLU2s2WVNncEtYMTlhV1lvZHk1d2NtVkpibWwwS1dadmNpaGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUIzTG5CeVpVbHVhWFFtSmloM0xuQnlaVWx1YVhROVczY3VjSEpsU1c1cGRGMHBPekE4ZHk1d2NtVkpibWwwTG14bGJtZDBhRHNwZHk1d2NtVkpibWwwTG5CdmNDZ3BLQ2s3WVdNb0tUdGNibHh1WEc0Z0lISmxkSFZ5YmlCdGIyUjFiR1ZCY21jdWNtVmhaSGxjYm4xY2JseHVLVHRjYm4wcEtDazdYRzVwWmlBb2RIbHdaVzltSUdWNGNHOXlkSE1nUFQwOUlDZHZZbXBsWTNRbklDWW1JSFI1Y0dWdlppQnRiMlIxYkdVZ1BUMDlJQ2R2WW1wbFkzUW5LVnh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUc5eWRGZGhjMjFVYUhKbFlXUmxaRHRjYm1Wc2MyVWdhV1lnS0hSNWNHVnZaaUJrWldacGJtVWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdaR1ZtYVc1bFd5ZGhiV1FuWFNsY2JpQWdaR1ZtYVc1bEtGdGRMQ0FvS1NBOVBpQnZjblJYWVhOdFZHaHlaV0ZrWldRcE8xeHVJaXdnSWx3aWRYTmxJSE4wY21samRGd2lPM1poY2lCTmIyUjFiR1U5ZTMwN2RtRnlJRVZPVmtsU1QwNU5SVTVVWDBsVFgwNVBSRVU5ZEhsd1pXOW1JSEJ5YjJObGMzTTlQVndpYjJKcVpXTjBYQ0ltSm5SNWNHVnZaaUJ3Y205alpYTnpMblpsY25OcGIyNXpQVDFjSW05aWFtVmpkRndpSmlaMGVYQmxiMllnY0hKdlkyVnpjeTUyWlhKemFXOXVjeTV1YjJSbFBUMWNJbk4wY21sdVoxd2lPMmxtS0VWT1ZrbFNUMDVOUlU1VVgwbFRYMDVQUkVVcGUzWmhjaUJ1YjJSbFYyOXlhMlZ5VkdoeVpXRmtjejF5WlhGMWFYSmxLRndpZDI5eWEyVnlYM1JvY21WaFpITmNJaWs3ZG1GeUlIQmhjbVZ1ZEZCdmNuUTlibTlrWlZkdmNtdGxjbFJvY21WaFpITXVjR0Z5Wlc1MFVHOXlkRHR3WVhKbGJuUlFiM0owTG05dUtGd2liV1Z6YzJGblpWd2lMR1JoZEdFOVBtOXViV1Z6YzJGblpTaDdaR0YwWVRwa1lYUmhmU2twTzNaaGNpQm1jejF5WlhGMWFYSmxLRndpWm5OY0lpazdUMkpxWldOMExtRnpjMmxuYmlobmJHOWlZV3dzZTNObGJHWTZaMnh2WW1Gc0xISmxjWFZwY21VNmNtVnhkV2x5WlN4TmIyUjFiR1U2VFc5a2RXeGxMR3h2WTJGMGFXOXVPbnRvY21WbU9sOWZabWxzWlc1aGJXVjlMRmR2Y210bGNqcHViMlJsVjI5eWEyVnlWR2h5WldGa2N5NVhiM0pyWlhJc2FXMXdiM0owVTJOeWFYQjBjenBtUFQ0b01DeGxkbUZzS1NobWN5NXlaV0ZrUm1sc1pWTjVibU1vWml4Y0luVjBaamhjSWlrclhDSXZMeU1nYzI5MWNtTmxWVkpNUFZ3aUsyWXBMSEJ2YzNSTlpYTnpZV2RsT20xelp6MCtjR0Z5Wlc1MFVHOXlkQzV3YjNOMFRXVnpjMkZuWlNodGMyY3BMSEJsY21admNtMWhibU5sT21kc2IySmhiQzV3WlhKbWIzSnRZVzVqWlh4OGUyNXZkenBFWVhSbExtNXZkMzE5S1gxMllYSWdhVzVwZEdsaGJHbDZaV1JLVXoxbVlXeHpaVHRtZFc1amRHbHZiaUIwYUhKbFlXUlFjbWx1ZEVWeWNpZ3BlM1poY2lCMFpYaDBQVUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeWt1YW05cGJpaGNJaUJjSWlrN2FXWW9SVTVXU1ZKUFRrMUZUbFJmU1ZOZlRrOUVSU2w3Wm5NdWQzSnBkR1ZUZVc1aktESXNkR1Y0ZEN0Y0lseGNibHdpS1R0eVpYUjFjbTU5WTI5dWMyOXNaUzVsY25KdmNpaDBaWGgwS1gxbWRXNWpkR2x2YmlCMGFISmxZV1JCYkdWeWRDZ3BlM1poY2lCMFpYaDBQVUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeWt1YW05cGJpaGNJaUJjSWlrN2NHOXpkRTFsYzNOaFoyVW9lMk50WkRwY0ltRnNaWEowWENJc2RHVjRkRHAwWlhoMExIUm9jbVZoWkVsa09rMXZaSFZzWlZ0Y0lsOXdkR2h5WldGa1gzTmxiR1pjSWwwb0tYMHBmWFpoY2lCbGNuSTlkR2h5WldGa1VISnBiblJGY25JN2MyVnNaaTVoYkdWeWREMTBhSEpsWVdSQmJHVnlkRHROYjJSMWJHVmJYQ0pwYm5OMFlXNTBhV0YwWlZkaGMyMWNJbDA5S0dsdVptOHNjbVZqWldsMlpVbHVjM1JoYm1ObEtUMCtlM1poY2lCdGIyUjFiR1U5VFc5a2RXeGxXMXdpZDJGemJVMXZaSFZzWlZ3aVhUdE5iMlIxYkdWYlhDSjNZWE50VFc5a2RXeGxYQ0pkUFc1MWJHdzdkbUZ5SUdsdWMzUmhibU5sUFc1bGR5QlhaV0pCYzNObGJXSnNlUzVKYm5OMFlXNWpaU2h0YjJSMWJHVXNhVzVtYnlrN2NtVjBkWEp1SUhKbFkyVnBkbVZKYm5OMFlXNWpaU2hwYm5OMFlXNWpaU2w5TzNObGJHWXViMjUxYm1oaGJtUnNaV1J5WldwbFkzUnBiMjQ5WlQwK2UzUm9jbTkzSUdVdWNtVmhjMjl1UHo5bGZUdG1kVzVqZEdsdmJpQm9ZVzVrYkdWTlpYTnpZV2RsS0dVcGUzUnllWHRwWmlobExtUmhkR0V1WTIxa1BUMDlYQ0pzYjJGa1hDSXBlMnhsZENCdFpYTnpZV2RsVVhWbGRXVTlXMTA3YzJWc1ppNXZibTFsYzNOaFoyVTlaVDArYldWemMyRm5aVkYxWlhWbExuQjFjMmdvWlNrN2MyVnNaaTV6ZEdGeWRGZHZjbXRsY2oxcGJuTjBZVzVqWlQwK2UwMXZaSFZzWlQxcGJuTjBZVzVqWlR0d2IzTjBUV1Z6YzJGblpTaDdYQ0pqYldSY0lqcGNJbXh2WVdSbFpGd2lmU2s3Wm05eUtHeGxkQ0J0YzJjZ2IyWWdiV1Z6YzJGblpWRjFaWFZsS1h0b1lXNWtiR1ZOWlhOellXZGxLRzF6WnlsOWMyVnNaaTV2Ym0xbGMzTmhaMlU5YUdGdVpHeGxUV1Z6YzJGblpYMDdUVzlrZFd4bFcxd2lkMkZ6YlUxdlpIVnNaVndpWFQxbExtUmhkR0V1ZDJGemJVMXZaSFZzWlR0bWIzSW9ZMjl1YzNRZ2FHRnVaR3hsY2lCdlppQmxMbVJoZEdFdWFHRnVaR3hsY25NcGUwMXZaSFZzWlZ0b1lXNWtiR1Z5WFQwb0xpNHVZWEpuY3lrOVBudHdiM04wVFdWemMyRm5aU2g3WTIxa09sd2lZMkZzYkVoaGJtUnNaWEpjSWl4b1lXNWtiR1Z5T21oaGJtUnNaWElzWVhKbmN6cGhjbWR6ZlNsOWZVMXZaSFZzWlZ0Y0luZGhjMjFOWlcxdmNubGNJbDA5WlM1a1lYUmhMbmRoYzIxTlpXMXZjbms3VFc5a2RXeGxXMXdpWW5WbVptVnlYQ0pkUFUxdlpIVnNaVnRjSW5kaGMyMU5aVzF2Y25sY0lsMHVZblZtWm1WeU8wMXZaSFZzWlZ0Y0lrVk9Wa2xTVDA1TlJVNVVYMGxUWDFCVVNGSkZRVVJjSWwwOWRISjFaVHRwWmloMGVYQmxiMllnWlM1a1lYUmhMblZ5YkU5eVFteHZZajA5WENKemRISnBibWRjSWlsN2FXMXdiM0owVTJOeWFYQjBjeWhsTG1SaGRHRXVkWEpzVDNKQ2JHOWlLWDFsYkhObGUzWmhjaUJ2WW1wbFkzUlZjbXc5VlZKTUxtTnlaV0YwWlU5aWFtVmpkRlZTVENobExtUmhkR0V1ZFhKc1QzSkNiRzlpS1R0cGJYQnZjblJUWTNKcGNIUnpLRzlpYW1WamRGVnliQ2s3VlZKTUxuSmxkbTlyWlU5aWFtVmpkRlZTVENodlltcGxZM1JWY213cGZXOXlkRmRoYzIxVWFISmxZV1JsWkNoTmIyUjFiR1VwZldWc2MyVWdhV1lvWlM1a1lYUmhMbU50WkQwOVBWd2ljblZ1WENJcGUwMXZaSFZzWlZ0Y0lsOWZaVzF6WTNKcGNIUmxibDkwYUhKbFlXUmZhVzVwZEZ3aVhTaGxMbVJoZEdFdWNIUm9jbVZoWkY5d2RISXNMeXBwYzAxaGFXNUNjbTkzYzJWeVZHaHlaV0ZrUFNvdk1Dd3ZLbWx6VFdGcGJsSjFiblJwYldWVWFISmxZV1E5S2k4d0xDOHFZMkZ1UW14dlkyczlLaTh4S1R0TmIyUjFiR1ZiWENKZlgyVnRjMk55YVhCMFpXNWZkR2h5WldGa1gyMWhhV3hpYjNoZllYZGhhWFJjSWwwb1pTNWtZWFJoTG5CMGFISmxZV1JmY0hSeUtUdE5iMlIxYkdWYlhDSmxjM1JoWW14cGMyaFRkR0ZqYTFOd1lXTmxYQ0pkS0NrN1RXOWtkV3hsVzF3aVVGUm9jbVZoWkZ3aVhTNXlaV05sYVhabFQySnFaV04wVkhKaGJuTm1aWElvWlM1a1lYUmhLVHROYjJSMWJHVmJYQ0pRVkdoeVpXRmtYQ0pkTG5Sb2NtVmhaRWx1YVhSVVRGTW9LVHRwWmlnaGFXNXBkR2xoYkdsNlpXUktVeWw3YVc1cGRHbGhiR2w2WldSS1V6MTBjblZsZlhSeWVYdE5iMlIxYkdWYlhDSnBiblp2YTJWRmJuUnllVkJ2YVc1MFhDSmRLR1V1WkdGMFlTNXpkR0Z5ZEY5eWIzVjBhVzVsTEdVdVpHRjBZUzVoY21jcGZXTmhkR05vS0dWNEtYdHBaaWhsZUNFOVhDSjFibmRwYm1SY0lpbDdkR2h5YjNjZ1pYaDlmWDFsYkhObElHbG1LR1V1WkdGMFlTNWpiV1E5UFQxY0ltTmhibU5sYkZ3aUtYdHBaaWhOYjJSMWJHVmJYQ0pmY0hSb2NtVmhaRjl6Wld4bVhDSmRLQ2twZTAxdlpIVnNaVnRjSWw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlpYaHBkRndpWFNndE1TbDlmV1ZzYzJVZ2FXWW9aUzVrWVhSaExuUmhjbWRsZEQwOVBWd2ljMlYwYVcxdFpXUnBZWFJsWENJcGUzMWxiSE5sSUdsbUtHVXVaR0YwWVM1amJXUTlQVDFjSW1Ob1pXTnJUV0ZwYkdKdmVGd2lLWHRwWmlocGJtbDBhV0ZzYVhwbFpFcFRLWHROYjJSMWJHVmJYQ0pqYUdWamEwMWhhV3hpYjNoY0lsMG9LWDE5Wld4elpTQnBaaWhsTG1SaGRHRXVZMjFrS1h0bGNuSW9YQ0ozYjNKclpYSXVhbk1nY21WalpXbDJaV1FnZFc1cmJtOTNiaUJqYjIxdFlXNWtJRndpSzJVdVpHRjBZUzVqYldRcE8yVnljaWhsTG1SaGRHRXBmWDFqWVhSamFDaGxlQ2w3YVdZb1RXOWtkV3hsVzF3aVgxOWxiWE5qY21sd2RHVnVYM1JvY21WaFpGOWpjbUZ6YUdWa1hDSmRLWHROYjJSMWJHVmJYQ0pmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDJOeVlYTm9aV1JjSWwwb0tYMTBhSEp2ZHlCbGVIMTljMlZzWmk1dmJtMWxjM05oWjJVOWFHRnVaR3hsVFdWemMyRm5aVHRjYmlJc0lDSmxlSEJ2Y25RZ1kyOXVjM1FnYW05cGJpQTlJSFZ1WkdWbWFXNWxaRHNpTENBaUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc1Y2JtbHRjRzl5ZENBcUlHRnpJSEJoZEdnZ1puSnZiU0FuYm05a1pUcHdZWFJvSnp0Y2JtbHRjRzl5ZENCN1JXNTJmU0JtY205dElDZHZibTU0Y25WdWRHbHRaUzFqYjIxdGIyNG5PMXh1WEc1cGJYQnZjblFnZTA5eWRGZGhjMjFOYjJSMWJHVjlJR1p5YjIwZ0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTYzdYRzVwYlhCdmNuUWdlMDl5ZEZkaGMyMVVhSEpsWVdSbFpFMXZaSFZzWlgwZ1puSnZiU0FuTGk5aWFXNWthVzVuTDI5eWRDMTNZWE50TFhSb2NtVmhaR1ZrSnp0Y2JseHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhKbGNYVnBjbVV0YVcxd2IzSjBjeUFxTDF4dWJHVjBJRzl5ZEZkaGMyMUdZV04wYjNKNU9pQkZiWE5qY21sd2RHVnVUVzlrZFd4bFJtRmpkRzl5ZVR4UGNuUlhZWE50VFc5a2RXeGxQanRjYmx4dWFXWWdLQ0ZDVlVsTVJGOUVSVVpUTGtSSlUwRkNURVZmVkZKQlNVNUpUa2NwSUh0Y2JpQWdiM0owVjJGemJVWmhZM1J2Y25rZ1BTQnlaWEYxYVhKbEtDY3VMMkpwYm1ScGJtY3ZiM0owTFhSeVlXbHVhVzVuTFhkaGMyMHRjMmx0WkM1cWN5Y3BPMXh1ZlNCbGJITmxJSHRjYmlBZ2IzSjBWMkZ6YlVaaFkzUnZjbmtnUFZ4dUlDQWdJQ0FnUWxWSlRFUmZSRVZHVXk1RVNWTkJRa3hGWDFkRlFrZFFWU0EvSUhKbGNYVnBjbVVvSnk0dlltbHVaR2x1Wnk5dmNuUXRkMkZ6YlM1cWN5Y3BJRG9nY21WeGRXbHlaU2duTGk5aWFXNWthVzVuTDI5eWRDMTNZWE50TFhOcGJXUXVhbk5sY0M1cWN5Y3BPMXh1ZlZ4dVhHNWpiMjV6ZENCdmNuUlhZWE50Um1GamRHOXllVlJvY21WaFpHVmtPaUJGYlhOamNtbHdkR1Z1VFc5a2RXeGxSbUZqZEc5eWVUeFBjblJYWVhOdFRXOWtkV3hsUGlBOUlDRkNWVWxNUkY5RVJVWlRMa1JKVTBGQ1RFVmZWMEZUVFY5VVNGSkZRVVFnUDF4dUlDQWdJQ2hDVlVsTVJGOUVSVVpUTGtSSlUwRkNURVZmVjBWQ1IxQlZJRDhnY21WeGRXbHlaU2duTGk5aWFXNWthVzVuTDI5eWRDMTNZWE50TFhSb2NtVmhaR1ZrTG1wekp5a2dPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ4ZFdseVpTZ25MaTlpYVc1a2FXNW5MMjl5ZEMxM1lYTnRMWE5wYldRdGRHaHlaV0ZrWldRdWFuTmxjQzVxY3ljcEtTQTZYRzRnSUNBZ2IzSjBWMkZ6YlVaaFkzUnZjbms3WEc0dktpQmxjMnhwYm5RdFpXNWhZbXhsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MXlaWEYxYVhKbExXbHRjRzl5ZEhNZ0tpOWNibHh1YkdWMElIZGhjMjA2SUU5eWRGZGhjMjFOYjJSMWJHVjhkVzVrWldacGJtVmtPMXh1YkdWMElHbHVhWFJwWVd4cGVtVmtJRDBnWm1Gc2MyVTdYRzVzWlhRZ2FXNXBkR2xoYkdsNmFXNW5JRDBnWm1Gc2MyVTdYRzVzWlhRZ1lXSnZjblJsWkNBOUlHWmhiSE5sTzF4dVhHNWpiMjV6ZENCcGMwMTFiSFJwVkdoeVpXRmtVM1Z3Y0c5eWRHVmtJRDBnS0NrNklHSnZiMnhsWVc0Z1BUNGdlMXh1SUNCMGNua2dlMXh1SUNBZ0lDOHZJRWxtSUNkVGFHRnlaV1JCY25KaGVVSjFabVpsY2ljZ2FYTWdibTkwSUdGMllXbHNZV0pzWlN3Z1YyVmlRWE56WlcxaWJIa2dkR2h5WldGa2N5QjNhV3hzSUc1dmRDQjNiM0pyTGx4dUlDQWdJR2xtSUNoMGVYQmxiMllnVTJoaGNtVmtRWEp5WVhsQ2RXWm1aWElnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ZHVnpkQ0JtYjNJZ2RISmhibk5tWlhKaFltbHNhWFI1SUc5bUlGTkJRbk1nS0dadmNpQmljbTkzYzJWeWN5NGdibVZsWkdWa0lHWnZjaUJHYVhKbFptOTRLVnh1SUNBZ0lDOHZJR2gwZEhCek9pOHZaM0p2ZFhCekxtZHZiMmRzWlM1amIyMHZabTl5ZFcwdkl5RnRjMmN2Ylc5NmFXeHNZUzVrWlhZdWNHeGhkR1p2Y20wdlNVaHJRbHBzU0VWVWNFRXZaSGR6VFU1amFGZEZVVUZLWEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJOWlhOellXZGxRMmhoYm01bGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lHNWxkeUJOWlhOellXZGxRMmhoYm01bGJDZ3BMbkJ2Y25ReExuQnZjM1JOWlhOellXZGxLRzVsZHlCVGFHRnlaV1JCY25KaGVVSjFabVpsY2lneEtTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdWR1Z6ZENCbWIzSWdWMlZpUVhOelpXMWliSGtnZEdoeVpXRmtjeUJqWVhCaFltbHNhWFI1SUNobWIzSWdZbTkwYUNCaWNtOTNjMlZ5Y3lCaGJtUWdUbTlrWlM1cWN5bGNiaUFnSUNBdkx5QlVhR2x6SUhSNWNHVmtJR0Z5Y21GNUlHbHpJR0VnVjJWaVFYTnpaVzFpYkhrZ2NISnZaM0poYlNCamIyNTBZV2x1YVc1bklIUm9jbVZoWkdWa0lHbHVjM1J5ZFdOMGFXOXVjeTVjYmlBZ0lDQnlaWFIxY200Z1YyVmlRWE56WlcxaWJIa3VkbUZzYVdSaGRHVW9ibVYzSUZWcGJuUTRRWEp5WVhrb1cxeHVJQ0FnSUNBZ01Dd2dPVGNzSURFeE5Td2dNVEE1TENBeExDQXdMQ0FnTUN3Z0lEQXNJREVzSURRc0lERXNJQ0E1Tml3Z01Dd2dJQ0F3TENBZ015d2dNaXdnTVN3Z0lEQXNJRFVzWEc0Z0lDQWdJQ0EwTENBeExDQWdNeXdnSUNBeExDQWdJREVzSURFd0xDQXhNU3dnTVN3Z09Td2dNQ3dnTmpVc0lEQXNJQ0F5TlRRc0lERTJMQ0F5TENBd0xDQXlOaXdnTVRGY2JpQWdJQ0JkS1NrN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYm4wN1hHNWNibU52Ym5OMElHbHpVMmx0WkZOMWNIQnZjblJsWkNBOUlDZ3BPaUJpYjI5c1pXRnVJRDArSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0F2THlCVVpYTjBJR1p2Y2lCWFpXSkJjM05sYldKc2VTQlRTVTFFSUdOaGNHRmlhV3hwZEhrZ0tHWnZjaUJpYjNSb0lHSnliM2R6WlhKeklHRnVaQ0JPYjJSbExtcHpLVnh1SUNBZ0lDOHZJRlJvYVhNZ2RIbHdaV1FnWVhKeVlYa2dhWE1nWVNCWFpXSkJjM05sYldKc2VTQndjbTluY21GdElHTnZiblJoYVc1cGJtY2dVMGxOUkNCcGJuTjBjblZqZEdsdmJuTXVYRzVjYmlBZ0lDQXZMeUJVYUdVZ1ltbHVZWEo1SUdSaGRHRWdhWE1nWjJWdVpYSmhkR1ZrSUdaeWIyMGdkR2hsSUdadmJHeHZkMmx1WnlCamIyUmxJR0o1SUhkaGRESjNZWE50T2x4dUlDQWdJQzh2WEc0Z0lDQWdMeThnS0cxdlpIVnNaVnh1SUNBZ0lDOHZJQ0FnS0hSNWNHVWdKSFF3SUNobWRXNWpLU2xjYmlBZ0lDQXZMeUFnSUNobWRXNWpJQ1JtTUNBb2RIbHdaU0FrZERBcFhHNGdJQ0FnTHk4Z0lDQWdJQ2hrY205d1hHNGdJQ0FnTHk4Z0lDQWdJQ0FnS0drek1uZzBMbVJ2ZEY5cE1UWjRPRjl6WEc0Z0lDQWdMeThnSUNBZ0lDQWdJQ0FvYVRoNE1UWXVjM0JzWVhSY2JpQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0tHa3pNaTVqYjI1emRDQXdLU2xjYmlBZ0lDQXZMeUFnSUNBZ0lDQWdJQ2gyTVRJNExtTnZibk4wSUdrek1uZzBJREI0TURBd01EQXdNREFnTUhnd01EQXdNREF3TUNBd2VEQXdNREF3TURBd0lEQjRNREF3TURBd01EQXBLU2twS1Z4dVhHNGdJQ0FnY21WMGRYSnVJRmRsWWtGemMyVnRZbXg1TG5aaGJHbGtZWFJsS0c1bGR5QlZhVzUwT0VGeWNtRjVLRnRjYmlBZ0lDQWdJREFzSUNBZ09UY3NJREV4TlN3Z01UQTVMQ0F4TENBd0xDQXdMQ0F3TENBeExDQTBMQ0F4TENBNU5pd2dNQ3dnTUN3Z015d2dNaXdnTVN3Z01Dd2dNVEFzSURNd0xDQXhMQ0FnSURJNExDQWdNQ3dnTmpVc0lEQXNYRzRnSUNBZ0lDQXlOVE1zSURFMUxDQXlOVE1zSURFeUxDQWdNQ3dnTUN3Z01Dd2dNQ3dnTUN3Z01Dd2dNQ3dnTUN3Z0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJQ0F3TENBZ01qVXpMQ0F4T0RZc0lERXNJREkyTENBeE1WeHVJQ0FnSUYwcEtUdGNiaUFnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlZ4dWZUdGNibHh1WTI5dWMzUWdaMlYwVjJGemJVWnBiR1ZPWVcxbElEMGdLSFZ6WlZOcGJXUTZJR0p2YjJ4bFlXNHNJSFZ6WlZSb2NtVmhaSE02SUdKdmIyeGxZVzRwSUQwK0lIdGNiaUFnYVdZZ0tIVnpaVk5wYldRcElIdGNiaUFnSUNCcFppQW9JVUpWU1V4RVgwUkZSbE11UkVsVFFVSk1SVjlVVWtGSlRrbE9SeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2R2Y25RdGRISmhhVzVwYm1jdGQyRnpiUzF6YVcxa0xuZGhjMjBuTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RYTmxWR2h5WldGa2N5QS9JQ2R2Y25RdGQyRnpiUzF6YVcxa0xYUm9jbVZoWkdWa0xuZGhjMjBuSURvZ0oyOXlkQzEzWVhOdExYTnBiV1F1ZDJGemJTYzdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlIVnpaVlJvY21WaFpITWdQeUFuYjNKMExYZGhjMjB0ZEdoeVpXRmtaV1F1ZDJGemJTY2dPaUFuYjNKMExYZGhjMjB1ZDJGemJTYzdYRzRnSUgxY2JuMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnBibWwwYVdGc2FYcGxWMlZpUVhOelpXMWliSGtnUFNCaGMzbHVZeWhtYkdGbmN6b2dSVzUyTGxkbFlrRnpjMlZ0WW14NVJteGhaM01wT2lCUWNtOXRhWE5sUEhadmFXUStJRDArSUh0Y2JpQWdhV1lnS0dsdWFYUnBZV3hwZW1Wa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQjlYRzRnSUdsbUlDaHBibWwwYVdGc2FYcHBibWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMjExYkhScGNHeGxJR05oYkd4eklIUnZJRnhjSjJsdWFYUnBZV3hwZW1WWFpXSkJjM05sYldKc2VTZ3BYRnduSUdSbGRHVmpkR1ZrTGljcE8xeHVJQ0I5WEc0Z0lHbG1JQ2hoWW05eWRHVmtLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdjbVYyYVc5MWN5QmpZV3hzSUhSdklGeGNKMmx1YVhScFlXeHBlbVZYWldKQmMzTmxiV0pzZVNncFhGd25JR1poYVd4bFpDNG5LVHRjYmlBZ2ZWeHVYRzRnSUdsdWFYUnBZV3hwZW1sdVp5QTlJSFJ5ZFdVN1hHNWNiaUFnTHk4Z2QyRnpiU0JtYkdGbmN5QmhjbVVnWVd4eVpXRmtlU0JwYm1sMGFXRnNhWHBsWkZ4dUlDQmpiMjV6ZENCMGFXMWxiM1YwSUQwZ1pteGhaM011YVc1cGRGUnBiV1Z2ZFhRaE8xeHVJQ0JqYjI1emRDQnVkVzFVYUhKbFlXUnpJRDBnWm14aFozTXViblZ0VkdoeVpXRmtjeUU3WEc0Z0lHTnZibk4wSUhOcGJXUWdQU0JtYkdGbmN5NXphVzFrSVR0Y2JseHVJQ0JqYjI1emRDQjFjMlZVYUhKbFlXUnpJRDBnYm5WdFZHaHlaV0ZrY3lBK0lERWdKaVlnYVhOTmRXeDBhVlJvY21WaFpGTjFjSEJ2Y25SbFpDZ3BPMXh1SUNCamIyNXpkQ0IxYzJWVGFXMWtJRDBnYzJsdFpDQW1KaUJwYzFOcGJXUlRkWEJ3YjNKMFpXUW9LVHRjYmx4dUlDQmpiMjV6ZENCM1lYTnRVR0YwYUhNZ1BTQm1iR0ZuY3k1M1lYTnRVR0YwYUhNN1hHNGdJR052Ym5OMElIZGhjMjFRY21WbWFYaFBkbVZ5Y21sa1pTQTlJSFI1Y0dWdlppQjNZWE50VUdGMGFITWdQVDA5SUNkemRISnBibWNuSUQ4Z2QyRnpiVkJoZEdoeklEb2dkVzVrWldacGJtVmtPMXh1SUNCamIyNXpkQ0IzWVhOdFJtbHNaVTVoYldVZ1BTQm5aWFJYWVhOdFJtbHNaVTVoYldVb2RYTmxVMmx0WkN3Z2RYTmxWR2h5WldGa2N5azdYRzRnSUdOdmJuTjBJSGRoYzIxUVlYUm9UM1psY25KcFpHVWdQU0IwZVhCbGIyWWdkMkZ6YlZCaGRHaHpJRDA5UFNBbmIySnFaV04wSnlBL0lIZGhjMjFRWVhSb2MxdDNZWE50Um1sc1pVNWhiV1ZkSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUd4bGRDQnBjMVJwYldWdmRYUWdQU0JtWVd4elpUdGNibHh1SUNCamIyNXpkQ0IwWVhOcmN6b2dRWEp5WVhrOFVISnZiV2x6WlR4MmIybGtQajRnUFNCYlhUdGNibHh1SUNBdkx5QndjbTl0YVhObElHWnZjaUIwYVcxbGIzVjBYRzRnSUdsbUlDaDBhVzFsYjNWMElENGdNQ2tnZTF4dUlDQWdJSFJoYzJ0ekxuQjFjMmdvYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1VcElEMCtJSHRjYmlBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwYzFScGJXVnZkWFFnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdJQ0I5TENCMGFXMWxiM1YwS1R0Y2JpQWdJQ0I5S1NrN1hHNGdJSDFjYmx4dUlDQXZMeUJ3Y205dGFYTmxJR1p2Y2lCdGIyUjFiR1VnYVc1cGRHbGhiR2w2WVhScGIyNWNiaUFnZEdGemEzTXVjSFZ6YUNodVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1ptRmpkRzl5ZVNBOUlIVnpaVlJvY21WaFpITWdQeUJ2Y25SWFlYTnRSbUZqZEc5eWVWUm9jbVZoWkdWa0lEb2diM0owVjJGemJVWmhZM1J2Y25rN1hHNGdJQ0FnWTI5dWMzUWdZMjl1Wm1sbk9pQlFZWEowYVdGc1BFOXlkRmRoYzIxTmIyUjFiR1UrSUQwZ2UxeHVJQ0FnSUNBZ2JHOWpZWFJsUm1sc1pUb2dLR1pwYkdWT1lXMWxPaUJ6ZEhKcGJtY3NJSE5qY21sd2RFUnBjbVZqZEc5eWVUb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRCVTAxZlZFaFNSVUZFSUNZbUlIVnpaVlJvY21WaFpITWdKaVlnWm1sc1pVNWhiV1V1Wlc1a2MxZHBkR2dvSnk1M2IzSnJaWEl1YW5NbktTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVzltSUVKc2IySWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRlZTVEM1amNtVmhkR1ZQWW1wbFkzUlZVa3dvYm1WM0lFSnNiMklvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJSEpsY1hWcGNtVW9LU0JtZFc1amRHbHZiaUJwY3lCb1lXNWtiR1ZrSUdKNUlHVnpZblZwYkdRZ2NHeDFaMmx1SUhSdklHeHZZV1FnWm1sc1pTQmpiMjUwWlc1MElHRnpJSE4wY21sdVp5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhKbGNYVnBjbVV0YVcxd2IzSjBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWcGNtVW9KeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzUzYjNKclpYSXVhbk1uS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEhsd1pUb2dKM1JsZUhRdmFtRjJZWE5qY21sd2RDZDlLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvWm1sc1pVNWhiV1V1Wlc1a2MxZHBkR2dvSnk1M1lYTnRKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZDJGemJWQmhkR2hQZG1WeWNtbGtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIZGhjMjFRWVhSb1QzWmxjbkpwWkdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbFptbDRJRDBnZDJGemJWQnlaV1pwZUU5MlpYSnlhV1JsSUQ4L0lITmpjbWx3ZEVScGNtVmpkRzl5ZVR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjFHYVd4bFRtRnRaU0E5UFQwZ0oyOXlkQzEzWVhOdExYTnBiV1F1ZDJGemJTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklDZHZjblF0ZDJGemJTMXphVzFrTG1welpYQXVkMkZ6YlNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hkaGMyMUdhV3hsVG1GdFpTQTlQVDBnSjI5eWRDMTNZWE50TFhOcGJXUXRkR2h5WldGa1pXUXVkMkZ6YlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlQ0FySUNkdmNuUXRkMkZ6YlMxemFXMWtMWFJvY21WaFpHVmtMbXB6WlhBdWQyRnpiU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklIZGhjMjFHYVd4bFRtRnRaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelkzSnBjSFJFYVhKbFkzUnZjbmtnS3lCbWFXeGxUbUZ0WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnYVdZZ0tDRkNWVWxNUkY5RVJVWlRMa1JKVTBGQ1RFVmZWMEZUVFY5VVNGSkZRVVFnSmlZZ2RYTmxWR2h5WldGa2N5a2dlMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJDYkc5aUlEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjVtYVdjdWJXRnBibE5qY21sd2RGVnliRTl5UW14dllpQTlJSEJoZEdndWFtOXBiaWhmWDJScGNtNWhiV1VzSUNkdmNuUXRkMkZ6YlMxMGFISmxZV1JsWkM1cWN5Y3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MyTnlhWEIwVTI5MWNtTmxRMjlrWlNBOUlHQjJZWElnYjNKMFYyRnpiVlJvY21WaFpHVmtQU1I3Wm1GamRHOXllUzUwYjFOMGNtbHVaeWdwZlR0Z08xeHVJQ0FnSUNBZ0lDQmpiMjVtYVdjdWJXRnBibE5qY21sd2RGVnliRTl5UW14dllpQTlJRzVsZHlCQ2JHOWlLRnR6WTNKcGNIUlRiM1Z5WTJWRGIyUmxYU3dnZTNSNWNHVTZJQ2QwWlhoMEwycGhkbUZ6WTNKcGNIUW5mU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabUZqZEc5eWVTaGpiMjVtYVdjcExuUm9aVzRvWEc0Z0lDQWdJQ0FnSUM4dklIZGhjMjBnYlc5a2RXeGxJR2x1YVhScFlXeHBlbVZrSUhOMVkyTmxjM05tZFd4c2VWeHVJQ0FnSUNBZ0lDQnRiMlIxYkdVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsdWFYUnBZV3hwZW1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJR2x1YVhScFlXeHBlbVZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNCM1lYTnRJRDBnYlc5a2RXeGxPMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdMeThnZDJGemJTQnRiMlIxYkdVZ1ptRnBiR1ZrSUhSdklHbHVhWFJwWVd4cGVtVmNiaUFnSUNBZ0lDQWdLSGRvWVhRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCcGJtbDBhV0ZzYVhwcGJtY2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0JoWW05eWRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9kMmhoZENrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNCOUtTazdYRzVjYmlBZ1lYZGhhWFFnVUhKdmJXbHpaUzV5WVdObEtIUmhjMnR6S1R0Y2JseHVJQ0JwWmlBb2FYTlVhVzFsYjNWMEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCWFpXSkJjM05sYldKc2VTQmlZV05yWlc1a0lHbHVhWFJwWVd4cGVtbHVaeUJtWVdsc1pXUWdaSFZsSUhSdklIUnBiV1Z2ZFhRNklDUjdkR2x0Wlc5MWRIMXRjMkFwTzF4dUlDQjlYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWjJWMFNXNXpkR0Z1WTJVZ1BTQW9LVG9nVDNKMFYyRnpiVTF2WkhWc1pTQTlQaUI3WEc0Z0lHbG1JQ2hwYm1sMGFXRnNhWHBsWkNBbUppQjNZWE50S1NCN1hHNGdJQ0FnY21WMGRYSnVJSGRoYzIwN1hHNGdJSDFjYmx4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxZGxZa0Z6YzJWdFlteDVJR2x6SUc1dmRDQnBibWwwYVdGc2FYcGxaQ0I1WlhRdUp5azdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWkdsemNHOXpaU0E5SUNncE9pQjJiMmxrSUQwK0lIdGNiaUFnYVdZZ0tHbHVhWFJwWVd4cGVtVmtJQ1ltSUNGcGJtbDBhV0ZzYVhwcGJtY2dKaVlnSVdGaWIzSjBaV1FwSUh0Y2JpQWdJQ0JwYm1sMGFXRnNhWHBwYm1jZ1BTQjBjblZsTzF4dVhHNGdJQ0FnS0hkaGMyMGdZWE1nVDNKMFYyRnpiVlJvY21WaFpHVmtUVzlrZFd4bEtTNVFWR2h5WldGa1B5NTBaWEp0YVc1aGRHVkJiR3hVYUhKbFlXUnpLQ2s3WEc0Z0lDQWdkMkZ6YlNBOUlIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lHbHVhWFJwWVd4cGVtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lHbHVhWFJwWVd4cGVtVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ1lXSnZjblJsWkNBOUlIUnlkV1U3WEc0Z0lIMWNibjA3WEc0aUxDQWlMeThnUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlFeHBZMlZ1YzJVdVhHNWNibWx0Y0c5eWRDQjdaMlYwU1c1emRHRnVZMlY5SUdaeWIyMGdKeTR2ZDJGemJTMW1ZV04wYjNKNUp6dGNibHh1Wlhod2IzSjBJR052Ym5OMElHRnNiRzlqVjJGemJWTjBjbWx1WnlBOUlDaGtZWFJoT2lCemRISnBibWNzSUdGc2JHOWpjem9nYm5WdFltVnlXMTBwT2lCdWRXMWlaWElnUFQ0Z2UxeHVJQ0JqYjI1emRDQjNZWE50SUQwZ1oyVjBTVzV6ZEdGdVkyVW9LVHRjYmx4dUlDQmpiMjV6ZENCa1lYUmhUR1Z1WjNSb0lEMGdkMkZ6YlM1c1pXNW5kR2hDZVhSbGMxVlVSamdvWkdGMFlTa2dLeUF4TzF4dUlDQmpiMjV6ZENCa1lYUmhUMlptYzJWMElEMGdkMkZ6YlM1ZmJXRnNiRzlqS0dSaGRHRk1aVzVuZEdncE8xeHVJQ0IzWVhOdExuTjBjbWx1WjFSdlZWUkdPQ2hrWVhSaExDQmtZWFJoVDJabWMyVjBMQ0JrWVhSaFRHVnVaM1JvS1R0Y2JpQWdZV3hzYjJOekxuQjFjMmdvWkdGMFlVOW1abk5sZENrN1hHNWNiaUFnY21WMGRYSnVJR1JoZEdGUFptWnpaWFE3WEc1OU8xeHVYRzVwYm5SbGNtWmhZMlVnUlhoMGNtRlBjSFJwYjI1elNHRnVaR3hsY2lCN1hHNGdJQ2h1WVcxbE9pQnpkSEpwYm1jc0lIWmhiSFZsT2lCemRISnBibWNwT2lCMmIybGtPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVhSbGNtRjBaVVY0ZEhKaFQzQjBhVzl1Y3lBOVhHNGdJQ0FnS0c5d2RHbHZibk02SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtMQ0J3Y21WbWFYZzZJSE4wY21sdVp5d2djMlZsYmpvZ1YyVmhhMU5sZER4U1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQajRzWEc0Z0lDQWdJR2hoYm1Sc1pYSTZJRVY0ZEhKaFQzQjBhVzl1YzBoaGJtUnNaWElwT2lCMmIybGtJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3lBOVBTQW5iMkpxWldOMEp5QW1KaUJ2Y0hScGIyNXpJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV1Z1TG1oaGN5aHZjSFJwYjI1ektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUTJseVkzVnNZWElnY21WbVpYSmxibU5sSUdsdUlHOXdkR2x2Ym5NbktUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J6WldWdUxtRmtaQ2h2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCUFltcGxZM1F1Wlc1MGNtbGxjeWh2Y0hScGIyNXpLUzVtYjNKRllXTm9LQ2hiYTJWNUxDQjJZV3gxWlYwcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibUZ0WlNBOUlDaHdjbVZtYVhncElEOGdjSEpsWm1sNElDc2dhMlY1SURvZ2EyVjVPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2wwWlhKaGRHVkZlSFJ5WVU5d2RHbHZibk1vZG1Gc2RXVWdZWE1nVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNHNJRzVoYldVZ0t5QW5MaWNzSUhObFpXNHNJR2hoYm1Sc1pYSXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjNOMGNtbHVaeWNnZkh3Z2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pYSW9ibUZ0WlN3Z2RtRnNkV1V1ZEc5VGRISnBibWNvS1NrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5ZbTl2YkdWaGJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5S0c1aGJXVXNJQ2gyWVd4MVpTa2dQeUFuTVNjZ09pQW5NQ2NwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1EyRnVKM1FnYUdGdVpHeGxJR1Y0ZEhKaElHTnZibVpwWnlCMGVYQmxPaUFrZTNSNWNHVnZaaUIyWVd4MVpYMWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlR0Y2JseHVMeW9xWEc0Z0tpQmphR1ZqYXlCM1pXSWdZWE56WlcxaWJIa2dRVkJKSjNNZ2JHRnpkQ0JsY25KdmNpQmhibVFnZEdoeWIzY2daWEp5YjNJZ2FXWWdZVzU1SUdWeWNtOXlJRzlqWTNWeWNtVmtMbHh1SUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlVnWVNCdFpYTnpZV2RsSUhWelpXUWdkMmhsYmlCaGJpQmxjbkp2Y2lCdlkyTjFjbkpsWkM1Y2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHTm9aV05yVEdGemRFVnljbTl5SUQwZ0tHMWxjM05oWjJVNklITjBjbWx1WnlrNklIWnZhV1FnUFQ0Z2UxeHVJQ0JqYjI1emRDQjNZWE50SUQwZ1oyVjBTVzV6ZEdGdVkyVW9LVHRjYmx4dUlDQmpiMjV6ZENCemRHRmpheUE5SUhkaGMyMHVjM1JoWTJ0VFlYWmxLQ2s3WEc0Z0lIUnllU0I3WEc0Z0lDQWdZMjl1YzNRZ2NHRnlZVzF6VDJabWMyVjBJRDBnZDJGemJTNXpkR0ZqYTBGc2JHOWpLRGdwTzF4dUlDQWdJSGRoYzIwdVgwOXlkRWRsZEV4aGMzUkZjbkp2Y2lod1lYSmhiWE5QWm1aelpYUXNJSEJoY21GdGMwOW1abk5sZENBcklEUXBPMXh1SUNBZ0lHTnZibk4wSUdWeWNtOXlRMjlrWlNBOUlIZGhjMjB1U0VWQlVETXlXM0JoY21GdGMwOW1abk5sZENBdklEUmRPMXh1SUNBZ0lHTnZibk4wSUdWeWNtOXlUV1Z6YzJGblpWQnZhVzUwWlhJZ1BTQjNZWE50TGtoRlFWQlZNekpiY0dGeVlXMXpUMlptYzJWMElDOGdOQ0FySURGZE8xeHVJQ0FnSUdOdmJuTjBJR1Z5Y205eVRXVnpjMkZuWlNBOUlHVnljbTl5VFdWemMyRm5aVkJ2YVc1MFpYSWdQeUIzWVhOdExsVlVSamhVYjFOMGNtbHVaeWhsY25KdmNrMWxjM05oWjJWUWIybHVkR1Z5S1NBNklDY25PMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ0pIdHRaWE56WVdkbGZTQkZVbEpQVWw5RFQwUkZPaUFrZTJWeWNtOXlRMjlrWlgwc0lFVlNVazlTWDAxRlUxTkJSMFU2SUNSN1pYSnliM0pOWlhOellXZGxmV0FwTzF4dUlDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lIZGhjMjB1YzNSaFkydFNaWE4wYjNKbEtITjBZV05yS1R0Y2JpQWdmVnh1ZlR0Y2JpSXNJQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2Ymk0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdUR2xqWlc1elpTNWNibHh1YVcxd2IzSjBJSHRKYm1abGNtVnVZMlZUWlhOemFXOXVmU0JtY205dElDZHZibTU0Y25WdWRHbHRaUzFqYjIxdGIyNG5PMXh1WEc1cGJYQnZjblFnZTJkbGRFbHVjM1JoYm1ObGZTQm1jbTl0SUNjdUwzZGhjMjB0Wm1GamRHOXllU2M3WEc1cGJYQnZjblFnZTJGc2JHOWpWMkZ6YlZOMGNtbHVaeXdnWTJobFkydE1ZWE4wUlhKeWIzSXNJR2wwWlhKaGRHVkZlSFJ5WVU5d2RHbHZibk45SUdaeWIyMGdKeTR2ZDJGemJTMTFkR2xzY3ljN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCelpYUlNkVzVQY0hScGIyNXpJRDBnS0c5d2RHbHZibk02SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1VW5WdVQzQjBhVzl1Y3lrNklGdHVkVzFpWlhJc0lHNTFiV0psY2x0ZFhTQTlQaUI3WEc0Z0lHTnZibk4wSUhkaGMyMGdQU0JuWlhSSmJuTjBZVzVqWlNncE8xeHVJQ0JzWlhRZ2NuVnVUM0IwYVc5dWMwaGhibVJzWlNBOUlEQTdYRzRnSUdOdmJuTjBJR0ZzYkc5amN6b2diblZ0WW1WeVcxMGdQU0JiWFR0Y2JseHVJQ0JqYjI1emRDQnlkVzVQY0hScGIyNXpPaUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbEoxYms5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk0vTG14dloxTmxkbVZ5YVhSNVRHVjJaV3dnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjblZ1VDNCMGFXOXVjeTVzYjJkVFpYWmxjbWwwZVV4bGRtVnNJRDBnTWpzZ0lDOHZJRVJsWm1GMWJIUWdkRzhnZDJGeWJtbHVaMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9YRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQnZjSFJwYjI1ekxteHZaMU5sZG1WeWFYUjVUR1YyWld3Z0lUMDlJQ2R1ZFcxaVpYSW5JSHg4SUNGT2RXMWlaWEl1YVhOSmJuUmxaMlZ5S0c5d2RHbHZibk11Ykc5blUyVjJaWEpwZEhsTVpYWmxiQ2tnZkh4Y2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1c2IyZFRaWFpsY21sMGVVeGxkbVZzSUR3Z01DQjhmQ0J2Y0hScGIyNXpMbXh2WjFObGRtVnlhWFI1VEdWMlpXd2dQaUEwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUd4dlp5QnpaWEoyWlhKcGRIa2diR1YyWld3Z2FYTWdibTkwSUhaaGJHbGtPaUFrZTI5d2RHbHZibk11Ykc5blUyVjJaWEpwZEhsTVpYWmxiSDFnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3o4dWJHOW5WbVZ5WW05emFYUjVUR1YyWld3Z1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY25WdVQzQjBhVzl1Y3k1c2IyZFdaWEppYjNOcGRIbE1aWFpsYkNBOUlEQTdJQ0F2THlCRVpXWmhkV3gwSUhSdklEQmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6TG14dloxWmxjbUp2YzJsMGVVeGxkbVZzSUNFOVBTQW5iblZ0WW1WeUp5QjhmQ0FoVG5WdFltVnlMbWx6U1c1MFpXZGxjaWh2Y0hScGIyNXpMbXh2WjFabGNtSnZjMmwwZVV4bGRtVnNLU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JzYjJjZ2RtVnlZbTl6YVhSNUlHeGxkbVZzSUdseklHNXZkQ0IyWVd4cFpEb2dKSHR2Y0hScGIyNXpMbXh2WjFabGNtSnZjMmwwZVV4bGRtVnNmV0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodmNIUnBiMjV6UHk1MFpYSnRhVzVoZEdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY25WdVQzQjBhVzl1Y3k1MFpYSnRhVzVoZEdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2RHRm5SR0YwWVU5bVpuTmxkQ0E5SURBN1hHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NL0xuUmhaeUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQjBZV2RFWVhSaFQyWm1jMlYwSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0c5d2RHbHZibk11ZEdGbkxDQmhiR3h2WTNNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKMWJrOXdkR2x2Ym5OSVlXNWtiR1VnUFNCM1lYTnRMbDlQY25SRGNtVmhkR1ZTZFc1UGNIUnBiMjV6S0Z4dUlDQWdJQ0FnSUNCeWRXNVBjSFJwYjI1ekxteHZaMU5sZG1WeWFYUjVUR1YyWld3aExDQnlkVzVQY0hScGIyNXpMbXh2WjFabGNtSnZjMmwwZVV4bGRtVnNJU3dnSVNGeWRXNVBjSFJwYjI1ekxuUmxjbTFwYm1GMFpTRXNJSFJoWjBSaGRHRlBabVp6WlhRcE8xeHVJQ0FnSUdsbUlDaHlkVzVQY0hScGIyNXpTR0Z1Wkd4bElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWduUTJGdVhGd25kQ0JqY21WaGRHVWdjblZ1SUc5d2RHbHZibk11SnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NL0xtVjRkSEpoSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJR2wwWlhKaGRHVkZlSFJ5WVU5d2RHbHZibk1vYjNCMGFXOXVjeTVsZUhSeVlTd2dKeWNzSUc1bGR5QlhaV0ZyVTJWMFBGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrUGlncExDQW9hMlY1TENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYbEVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LR3RsZVN3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2RXVkVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LSFpoYkhWbExDQmhiR3h2WTNNcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoM1lYTnRMbDlQY25SQlpHUlNkVzVEYjI1bWFXZEZiblJ5ZVNoeWRXNVBjSFJwYjI1elNHRnVaR3hsTENCclpYbEVZWFJoVDJabWMyVjBMQ0IyWVd4MVpVUmhkR0ZQWm1aelpYUXBJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElITmxkQ0JoSUhKMWJpQmpiMjVtYVdjZ1pXNTBjbms2SUNSN2EyVjVmU0F0SUNSN2RtRnNkV1Y5TG1BcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1czSjFiazl3ZEdsdmJuTklZVzVrYkdVc0lHRnNiRzlqYzEwN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0JwWmlBb2NuVnVUM0IwYVc5dWMwaGhibVJzWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnZDJGemJTNWZUM0owVW1Wc1pXRnpaVkoxYms5d2RHbHZibk1vY25WdVQzQjBhVzl1YzBoaGJtUnNaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHRnNiRzlqY3k1bWIzSkZZV05vS0dGc2JHOWpJRDArSUhkaGMyMHVYMlp5WldVb1lXeHNiMk1wS1R0Y2JpQWdJQ0IwYUhKdmR5QmxPMXh1SUNCOVhHNTlPMXh1SWl3Z0lpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ1RXbGpjbTl6YjJaMElFTnZjbkJ2Y21GMGFXOXVMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUx5OGdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dVhHNXBiWEJ2Y25RZ2UwbHVabVZ5Wlc1alpWTmxjM05wYjI1OUlHWnliMjBnSjI5dWJuaHlkVzUwYVcxbExXTnZiVzF2YmljN1hHNWNibWx0Y0c5eWRDQjdaMlYwU1c1emRHRnVZMlY5SUdaeWIyMGdKeTR2ZDJGemJTMW1ZV04wYjNKNUp6dGNibWx0Y0c5eWRDQjdZV3hzYjJOWFlYTnRVM1J5YVc1bkxDQmphR1ZqYTB4aGMzUkZjbkp2Y2l3Z2FYUmxjbUYwWlVWNGRISmhUM0IwYVc5dWMzMGdabkp2YlNBbkxpOTNZWE50TFhWMGFXeHpKenRjYmx4dVkyOXVjM1FnWjJWMFIzSmhjR2hQY0hScGJYcGhkR2x2Ymt4bGRtVnNJRDBnS0dkeVlYQm9UM0IwYVcxcGVtRjBhVzl1VEdWMlpXdzZJSE4wY21sdVozeDFibXR1YjNkdUtUb2diblZ0WW1WeUlEMCtJSHRjYmlBZ2MzZHBkR05vSUNobmNtRndhRTl3ZEdsdGFYcGhkR2x2Ymt4bGRtVnNLU0I3WEc0Z0lDQWdZMkZ6WlNBblpHbHpZV0pzWldRbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURBN1hHNGdJQ0FnWTJGelpTQW5ZbUZ6YVdNbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURFN1hHNGdJQ0FnWTJGelpTQW5aWGgwWlc1a1pXUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlESTdYRzRnSUNBZ1kyRnpaU0FuWVd4c0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBNU9UdGNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0IxYm5OMWNIQnZjblJsWkNCbmNtRndhQ0J2Y0hScGJXbDZZWFJwYjI0Z2JHVjJaV3c2SUNSN1ozSmhjR2hQY0hScGJXbDZZWFJwYjI1TVpYWmxiSDFnS1R0Y2JpQWdmVnh1ZlR0Y2JseHVZMjl1YzNRZ1oyVjBSWGhsWTNWMGFXOXVUVzlrWlNBOUlDaGxlR1ZqZFhScGIyNU5iMlJsT2lBbmMyVnhkV1Z1ZEdsaGJDZDhKM0JoY21Gc2JHVnNKeWs2SUc1MWJXSmxjaUE5UGlCN1hHNGdJSE4zYVhSamFDQW9aWGhsWTNWMGFXOXVUVzlrWlNrZ2UxeHVJQ0FnSUdOaGMyVWdKM05sY1hWbGJuUnBZV3duT2x4dUlDQWdJQ0FnY21WMGRYSnVJREE3WEc0Z0lDQWdZMkZ6WlNBbmNHRnlZV3hzWld3bk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURFN1hHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdkVzV6ZFhCd2IzSjBaV1FnWlhobFkzVjBhVzl1SUcxdlpHVTZJQ1I3WlhobFkzVjBhVzl1VFc5a1pYMWdLVHRjYmlBZ2ZWeHVmVHRjYmx4dVkyOXVjM1FnWVhCd1pXNWtSR1ZtWVhWc2RFOXdkR2x2Ym5NZ1BTQW9iM0IwYVc5dWN6b2dTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNVRaWE56YVc5dVQzQjBhVzl1Y3lrNklIWnZhV1FnUFQ0Z2UxeHVJQ0JwWmlBb0lXOXdkR2x2Ym5NdVpYaDBjbUVwSUh0Y2JpQWdJQ0J2Y0hScGIyNXpMbVY0ZEhKaElEMGdlMzA3WEc0Z0lIMWNiaUFnYVdZZ0tDRnZjSFJwYjI1ekxtVjRkSEpoTG5ObGMzTnBiMjRwSUh0Y2JpQWdJQ0J2Y0hScGIyNXpMbVY0ZEhKaExuTmxjM05wYjI0Z1BTQjdmVHRjYmlBZ2ZWeHVJQ0JqYjI1emRDQnpaWE56YVc5dUlEMGdiM0IwYVc5dWN5NWxlSFJ5WVM1elpYTnphVzl1SUdGeklGSmxZMjl5WkR4emRISnBibWNzSUhOMGNtbHVaejQ3WEc0Z0lHbG1JQ2doYzJWemMybHZiaTUxYzJWZmIzSjBYMjF2WkdWc1gySjVkR1Z6WDJScGNtVmpkR3g1S1NCN1hHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdOaGJXVnNZMkZ6WlZ4dUlDQWdJSE5sYzNOcGIyNHVkWE5sWDI5eWRGOXRiMlJsYkY5aWVYUmxjMTlrYVhKbFkzUnNlU0E5SUNjeEp6dGNiaUFnZlZ4dVhHNGdJQzh2SUdsbUlIVnphVzVuSUVwVFJWQWdkMmwwYUNCWFpXSkhVRlVzSUdGc2QyRjVjeUJrYVhOaFlteGxJRzFsYlc5eWVTQndZWFIwWlhKdVhHNGdJR2xtSUNodmNIUnBiMjV6TG1WNFpXTjFkR2x2YmxCeWIzWnBaR1Z5Y3lBbUpseHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1bGVHVmpkWFJwYjI1UWNtOTJhV1JsY25NdWMyOXRaU2hsY0NBOVBpQW9kSGx3Wlc5bUlHVndJRDA5UFNBbmMzUnlhVzVuSnlBL0lHVndJRG9nWlhBdWJtRnRaU2tnUFQwOUlDZDNaV0puY0hVbktTa2dlMXh1SUNBZ0lHOXdkR2x2Ym5NdVpXNWhZbXhsVFdWdFVHRjBkR1Z5YmlBOUlHWmhiSE5sTzF4dUlDQjlYRzU5TzF4dVhHNWpiMjV6ZENCelpYUkZlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTWdQVnh1SUNBZ0lDaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaVG9nYm5WdFltVnlMQ0JsZUdWamRYUnBiMjVRY205MmFXUmxjbk02SUhKbFlXUnZibXg1SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1UlhobFkzVjBhVzl1VUhKdmRtbGtaWEpEYjI1bWFXZGJYU3hjYmlBZ0lDQWdZV3hzYjJOek9pQnVkVzFpWlhKYlhTazZJSFp2YVdRZ1BUNGdlMXh1SUNBZ0lDQWdabTl5SUNoamIyNXpkQ0JsY0NCdlppQmxlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHVndUbUZ0WlNBOUlIUjVjR1Z2WmlCbGNDQTlQVDBnSjNOMGNtbHVaeWNnUHlCbGNDQTZJR1Z3TG01aGJXVTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1kyaGxZMnNnUlZBZ2JtRnRaVnh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR1Z3VG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM2h1Ym5CaFkyc25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pYQk9ZVzFsSUQwZ0oxaE9UbEJCUTBzbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kMlZpYm00bk9seHVJQ0FnSUNBZ0lDQWdJQ0FnWlhCT1lXMWxJRDBnSjFkRlFrNU9KenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdaWEFnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhkbFltNXVUM0IwYVc5dWN5QTlJR1Z3SUdGeklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVYyVmlUazVGZUdWamRYUnBiMjVRY205MmFXUmxjazl3ZEdsdmJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRsWW01dVQzQjBhVzl1Y3o4dVpHVjJhV05sVkhsd1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHdGxlVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvSjJSbGRtbGpaVlI1Y0dVbkxDQmhiR3h2WTNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhaaGJIVmxSR0YwWVU5bVpuTmxkQ0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWgzWldKdWJrOXdkR2x2Ym5NdVpHVjJhV05sVkhsd1pTd2dZV3hzYjJOektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWjJWMFNXNXpkR0Z1WTJVb0tTNWZUM0owUVdSa1UyVnpjMmx2YmtOdmJtWnBaMFZ1ZEhKNUtITmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxMQ0JyWlhsRVlYUmhUMlptYzJWMExDQjJZV3gxWlVSaGRHRlBabVp6WlhRcElDRTlQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUdWamEweGhjM1JGY25KdmNpaGdRMkZ1SjNRZ2MyVjBJR0VnYzJWemMybHZiaUJqYjI1bWFXY2daVzUwY25rNklDZGtaWFpwWTJWVWVYQmxKeUF0SUNSN2QyVmlibTVQY0hScGIyNXpMbVJsZG1salpWUjVjR1Y5TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kMlZpYm01UGNIUnBiMjV6UHk1dWRXMVVhSEpsWVdSektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc1MWJWUm9jbVZoWkhNZ1BTQjNaV0p1Yms5d2RHbHZibk11Ym5WdFZHaHlaV0ZrY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QktkWE4wSUdsbmJtOXlaU0JwYm5aaGJHbGtJSGRsWW01dVQzQjBhVzl1Y3k1dWRXMVVhSEpsWVdSekxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiblZ0VkdoeVpXRmtjeUFoUFNBbmJuVnRZbVZ5SnlCOGZDQWhUblZ0WW1WeUxtbHpTVzUwWldkbGNpaHVkVzFVYUhKbFlXUnpLU0I4ZkNCdWRXMVVhSEpsWVdSeklEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRWR2h5WldGa2N5QTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3RsZVVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb0oyNTFiVlJvY21WaFpITW5MQ0JoYkd4dlkzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIWmhiSFZsUkdGMFlVOW1abk5sZENBOUlHRnNiRzlqVjJGemJWTjBjbWx1WnlodWRXMVVhSEpsWVdSekxuUnZVM1J5YVc1bktDa3NJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbGRFbHVjM1JoYm1ObEtDa3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElITmxkQ0JoSUhObGMzTnBiMjRnWTI5dVptbG5JR1Z1ZEhKNU9pQW5iblZ0VkdoeVpXRmtjeWNnTFNBa2UzZGxZbTV1VDNCMGFXOXVjeTV1ZFcxVWFISmxZV1J6ZlM1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRsWW01dVQzQjBhVzl1Y3o4dWNHOTNaWEpRY21WbVpYSmxibU5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNVJHRjBZVTltWm5ObGRDQTlJR0ZzYkc5alYyRnpiVk4wY21sdVp5Z25jRzkzWlhKUWNtVm1aWEpsYm1ObEp5d2dZV3hzYjJOektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMllXeDFaVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvZDJWaWJtNVBjSFJwYjI1ekxuQnZkMlZ5VUhKbFptVnlaVzVqWlN3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aMlYwU1c1emRHRnVZMlVvS1M1ZlQzSjBRV1JrVTJWemMybHZia052Ym1acFowVnVkSEo1S0hObGMzTnBiMjVQY0hScGIyNXpTR0Z1Wkd4bExDQnJaWGxFWVhSaFQyWm1jMlYwTENCMllXeDFaVVJoZEdGUFptWnpaWFFwSUNFOVBWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnUTJGdUozUWdjMlYwSUdFZ2MyVnpjMmx2YmlCamIyNW1hV2NnWlc1MGNuazZJQ2R3YjNkbGNsQnlaV1psY21WdVkyVW5JQzBnSkh0M1pXSnViazl3ZEdsdmJuTXVjRzkzWlhKUWNtVm1aWEpsYm1ObGZTNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM2RsWW1kd2RTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCbGNFNWhiV1VnUFNBblNsTW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmxjQ0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZDJWaVozQjFUM0IwYVc5dWN5QTlJR1Z3SUdGeklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVYyVmlSM0IxUlhobFkzVjBhVzl1VUhKdmRtbGtaWEpQY0hScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gzWldKbmNIVlBjSFJwYjI1elB5NXdjbVZtWlhKeVpXUk1ZWGx2ZFhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZDJWaVozQjFUM0IwYVc5dWN5NXdjbVZtWlhKeVpXUk1ZWGx2ZFhRZ0lUMDlJQ2RPUTBoWEp5QW1KaUIzWldKbmNIVlBjSFJwYjI1ekxuQnlaV1psY25KbFpFeGhlVzkxZENBaFBUMGdKMDVJVjBNbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZSEJ5WldabGNuSmxaRXhoZVc5MWRDQnRkWE4wSUdKbElHVnBkR2hsY2lBblRrTklWeWNnYjNJZ0owNUlWME1uT2lBa2UzZGxZbWR3ZFU5d2RHbHZibk11Y0hKbFptVnljbVZrVEdGNWIzVjBmV0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktDZHdjbVZtWlhKeVpXUk1ZWGx2ZFhRbkxDQmhiR3h2WTNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhaaGJIVmxSR0YwWVU5bVpuTmxkQ0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWgzWldKbmNIVlBjSFJwYjI1ekxuQnlaV1psY25KbFpFeGhlVzkxZEN3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aMlYwU1c1emRHRnVZMlVvS1M1ZlQzSjBRV1JrVTJWemMybHZia052Ym1acFowVnVkSEo1S0hObGMzTnBiMjVQY0hScGIyNXpTR0Z1Wkd4bExDQnJaWGxFWVhSaFQyWm1jMlYwTENCMllXeDFaVVJoZEdGUFptWnpaWFFwSUNFOVBWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnUTJGdUozUWdjMlYwSUdFZ2MyVnpjMmx2YmlCamIyNW1hV2NnWlc1MGNuazZJQ2R3Y21WbVpYSnlaV1JNWVhsdmRYUW5JQzBnSkh0M1pXSm5jSFZQY0hScGIyNXpMbkJ5WldabGNuSmxaRXhoZVc5MWRIMHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCallYTmxJQ2QzWVhOdEp6cGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZGpjSFVuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ2JtOTBJSE4xY0hCdmNuUmxaQ0JsZUdWamRYUnBiMjRnY0hKdmRtbGtaWEk2SUNSN1pYQk9ZVzFsZldBcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaWEJPWVcxbFJHRjBZVTltWm5ObGRDQTlJR0ZzYkc5alYyRnpiVk4wY21sdVp5aGxjRTVoYldVc0lHRnNiRzlqY3lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2huWlhSSmJuTjBZVzVqWlNncExsOVBjblJCY0hCbGJtUkZlR1ZqZFhScGIyNVFjbTkyYVdSbGNpaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnWlhCT1lXMWxSR0YwWVU5bVpuTmxkQ2tnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWhnUTJGdUozUWdZWEJ3Wlc1a0lHVjRaV04xZEdsdmJpQndjbTkyYVdSbGNqb2dKSHRsY0U1aGJXVjlMbUFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUhObGRGTmxjM05wYjI1UGNIUnBiMjV6SUQwZ0tHOXdkR2x2Ym5NL09pQkpibVpsY21WdVkyVlRaWE56YVc5dUxsTmxjM05wYjI1UGNIUnBiMjV6S1RvZ1cyNTFiV0psY2l3Z2JuVnRZbVZ5VzExZElEMCtJSHRjYmlBZ1kyOXVjM1FnZDJGemJTQTlJR2RsZEVsdWMzUmhibU5sS0NrN1hHNGdJR3hsZENCelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTQTlJREE3WEc0Z0lHTnZibk4wSUdGc2JHOWpjem9nYm5WdFltVnlXMTBnUFNCYlhUdGNibHh1SUNCamIyNXpkQ0J6WlhOemFXOXVUM0IwYVc5dWN6b2dTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNVRaWE56YVc5dVQzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lHRndjR1Z1WkVSbFptRjFiSFJQY0hScGIyNXpLSE5sYzNOcGIyNVBjSFJwYjI1ektUdGNibHh1SUNCMGNua2dlMXh1SUNBZ0lHTnZibk4wSUdkeVlYQm9UM0IwYVcxcGVtRjBhVzl1VEdWMlpXd2dQU0JuWlhSSGNtRndhRTl3ZEdsdGVtRjBhVzl1VEdWMlpXd29jMlZ6YzJsdmJrOXdkR2x2Ym5NdVozSmhjR2hQY0hScGJXbDZZWFJwYjI1TVpYWmxiQ0EvUHlBbllXeHNKeWs3WEc0Z0lDQWdZMjl1YzNRZ1pYaGxZM1YwYVc5dVRXOWtaU0E5SUdkbGRFVjRaV04xZEdsdmJrMXZaR1VvYzJWemMybHZiazl3ZEdsdmJuTXVaWGhsWTNWMGFXOXVUVzlrWlNBL1B5QW5jMlZ4ZFdWdWRHbGhiQ2NwTzF4dUlDQWdJR052Ym5OMElHeHZaMGxrUkdGMFlVOW1abk5sZENBOVhHNGdJQ0FnSUNBZ0lIUjVjR1Z2WmlCelpYTnphVzl1VDNCMGFXOXVjeTVzYjJkSlpDQTlQVDBnSjNOMGNtbHVaeWNnUHlCaGJHeHZZMWRoYzIxVGRISnBibWNvYzJWemMybHZiazl3ZEdsdmJuTXViRzluU1dRc0lHRnNiRzlqY3lrZ09pQXdPMXh1WEc0Z0lDQWdZMjl1YzNRZ2JHOW5VMlYyWlhKcGRIbE1aWFpsYkNBOUlITmxjM05wYjI1UGNIUnBiMjV6TG14dloxTmxkbVZ5YVhSNVRHVjJaV3dnUHo4Z01qc2dJQzh2SUVSbFptRjFiSFFnZEc4Z01pQXRJSGRoY201cGJtZGNiaUFnSUNCcFppQW9JVTUxYldKbGNpNXBjMGx1ZEdWblpYSW9iRzluVTJWMlpYSnBkSGxNWlhabGJDa2dmSHdnYkc5blUyVjJaWEpwZEhsTVpYWmxiQ0E4SURBZ2ZId2diRzluVTJWMlpYSnBkSGxNWlhabGJDQStJRFFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnYkc5bklITmxjblpsY21sMGVTQnNaWFpsYkNCcGN5QnViM1FnZG1Gc2FXUTZJQ1I3Ykc5blUyVjJaWEpwZEhsTVpYWmxiSDFnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnNiMmRXWlhKaWIzTnBkSGxNWlhabGJDQTlJSE5sYzNOcGIyNVBjSFJwYjI1ekxteHZaMVpsY21KdmMybDBlVXhsZG1Wc0lEOC9JREE3SUNBdkx5QkVaV1poZFd4MElIUnZJREFnTFNCMlpYSmliM05sWEc0Z0lDQWdhV1lnS0NGT2RXMWlaWEl1YVhOSmJuUmxaMlZ5S0d4dloxWmxjbUp2YzJsMGVVeGxkbVZzS1NCOGZDQnNiMmRXWlhKaWIzTnBkSGxNWlhabGJDQThJREFnZkh3Z2JHOW5WbVZ5WW05emFYUjVUR1YyWld3Z1BpQTBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZR3h2WnlCMlpYSmliM05wZEhrZ2JHVjJaV3dnYVhNZ2JtOTBJSFpoYkdsa09pQWtlMnh2WjFabGNtSnZjMmwwZVV4bGRtVnNmV0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHOXdkR2x0YVhwbFpFMXZaR1ZzUm1sc1pWQmhkR2hQWm1aelpYUWdQU0IwZVhCbGIyWWdjMlZ6YzJsdmJrOXdkR2x2Ym5NdWIzQjBhVzFwZW1Wa1RXOWtaV3hHYVd4bFVHRjBhQ0E5UFQwZ0ozTjBjbWx1WnljZ1AxeHVJQ0FnSUNBZ0lDQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2MyVnpjMmx2Yms5d2RHbHZibk11YjNCMGFXMXBlbVZrVFc5a1pXeEdhV3hsVUdGMGFDd2dZV3hzYjJOektTQTZYRzRnSUNBZ0lDQWdJREE3WEc1Y2JpQWdJQ0J6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlNBOUlIZGhjMjB1WDA5eWRFTnlaV0YwWlZObGMzTnBiMjVQY0hScGIyNXpLRnh1SUNBZ0lDQWdJQ0JuY21Gd2FFOXdkR2x0YVhwaGRHbHZia3hsZG1Wc0xDQWhJWE5sYzNOcGIyNVBjSFJwYjI1ekxtVnVZV0pzWlVOd2RVMWxiVUZ5Wlc1aExDQWhJWE5sYzNOcGIyNVBjSFJwYjI1ekxtVnVZV0pzWlUxbGJWQmhkSFJsY200c0lHVjRaV04xZEdsdmJrMXZaR1VzWEc0Z0lDQWdJQ0FnSUNFaGMyVnpjMmx2Yms5d2RHbHZibk11Wlc1aFlteGxVSEp2Wm1sc2FXNW5MQ0F3TENCc2IyZEpaRVJoZEdGUFptWnpaWFFzSUd4dloxTmxkbVZ5YVhSNVRHVjJaV3dzSUd4dloxWmxjbUp2YzJsMGVVeGxkbVZzTEZ4dUlDQWdJQ0FnSUNCdmNIUnBiV2w2WldSTmIyUmxiRVpwYkdWUVlYUm9UMlptYzJWMEtUdGNiaUFnSUNCcFppQW9jMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtDZERZVzVjWENkMElHTnlaV0YwWlNCelpYTnphVzl1SUc5d2RHbHZibk11SnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITmxjM05wYjI1UGNIUnBiMjV6TG1WNFpXTjFkR2x2YmxCeWIzWnBaR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ2MyVjBSWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSnpLSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsTENCelpYTnphVzl1VDNCMGFXOXVjeTVsZUdWamRYUnBiMjVRY205MmFXUmxjbk1zSUdGc2JHOWpjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hObGMzTnBiMjVQY0hScGIyNXpMbVp5WldWRWFXMWxibk5wYjI1UGRtVnljbWxrWlhNcElIdGNiaUFnSUNBZ0lHWnZjaUFvWTI5dWMzUWdXMjVoYldVc0lIWmhiSFZsWFNCdlppQlBZbXBsWTNRdVpXNTBjbWxsY3loelpYTnphVzl1VDNCMGFXOXVjeTVtY21WbFJHbHRaVzV6YVc5dVQzWmxjbkpwWkdWektTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1aGJXVWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQm1jbVZsSUdScGJXVnVjMmx2YmlCdmRtVnljbWxrWlNCdVlXMWxJRzExYzNRZ1ltVWdZU0J6ZEhKcGJtYzZJQ1I3Ym1GdFpYMWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUNFOVBTQW5iblZ0WW1WeUp5QjhmQ0FoVG5WdFltVnlMbWx6U1c1MFpXZGxjaWgyWVd4MVpTa2dmSHdnZG1Gc2RXVWdQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQm1jbVZsSUdScGJXVnVjMmx2YmlCdmRtVnljbWxrWlNCMllXeDFaU0J0ZFhOMElHSmxJR0VnYm05dUxXNWxaMkYwYVhabElHbHVkR1ZuWlhJNklDUjdkbUZzZFdWOVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibUZ0WlU5bVpuTmxkQ0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWh1WVcxbExDQmhiR3h2WTNNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZDJGemJTNWZUM0owUVdSa1JuSmxaVVJwYldWdWMybHZiazkyWlhKeWFXUmxLSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsTENCdVlXMWxUMlptYzJWMExDQjJZV3gxWlNrZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loZ1EyRnVKM1FnYzJWMElHRWdabkpsWlNCa2FXMWxibk5wYjI0Z2IzWmxjbkpwWkdVNklDUjdibUZ0WlgwZ0xTQWtlM1poYkhWbGZTNWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoelpYTnphVzl1VDNCMGFXOXVjeTVsZUhSeVlTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCcGRHVnlZWFJsUlhoMGNtRlBjSFJwYjI1ektITmxjM05wYjI1UGNIUnBiMjV6TG1WNGRISmhMQ0FuSnl3Z2JtVjNJRmRsWVd0VFpYUThVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0K0tDa3NJQ2hyWlhrc0lIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHdGxlVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvYTJWNUxDQmhiR3h2WTNNcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMllXeDFaVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvZG1Gc2RXVXNJR0ZzYkc5amN5azdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjB1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllU2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlN3Z2EyVjVSR0YwWVU5bVpuTmxkQ3dnZG1Gc2RXVkVZWFJoVDJabWMyVjBLU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLR0JEWVc0bmRDQnpaWFFnWVNCelpYTnphVzl1SUdOdmJtWnBaeUJsYm5SeWVUb2dKSHRyWlhsOUlDMGdKSHQyWVd4MVpYMHVZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJiYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHRnNiRzlqYzEwN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0JwWmlBb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1VDNCMGFXOXVjeWh6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR0ZzYkc5amN5NW1iM0pGWVdOb0tHRnNiRzlqSUQwK0lIZGhjMjB1WDJaeVpXVW9ZV3hzYjJNcEtUdGNiaUFnSUNCMGFISnZkeUJsTzF4dUlDQjlYRzU5TzF4dUlpd2dJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVYRzVwYlhCdmNuUWdlMVJsYm5OdmNuMGdabkp2YlNBbmIyNXVlSEoxYm5ScGJXVXRZMjl0Ylc5dUp6dGNibHh1THk4Z1ZHaHBjeUJtYVd4bElHbHVZMngxWkdWeklHTnZiVzF2YmlCa1pXWnBibWwwYVc5dWN5NGdWR2hsZVNCa2J5Qk9UMVFnYUdGMlpTQmtaWEJsYm1SbGJtTjVJRzl1SUhSb1pTQlhaV0pCYzNObGJXSnNlU0JwYm5OMFlXNWpaUzVjYmx4dUx5b3FYRzRnS2lCRGIzQnBaV1FnWm5KdmJTQlBUazVZSUdSbFptbHVhWFJwYjI0dUlGVnpaU0IwYUdseklIUnZJR1J5YjNBZ1pHVndaVzVrWlc1amVTQW5iMjV1ZUY5d2NtOTBieWNnZEc4Z1pHVmpjbVZoYzJVZ1kyOXRjR2xzWldRZ0xtcHpJR1pwYkdVZ2MybDZaUzVjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUdWdWRXMGdSR0YwWVZSNWNHVWdlMXh1SUNCMWJtUmxabWx1WldRZ1BTQXdMRnh1SUNCbWJHOWhkQ0E5SURFc1hHNGdJSFZwYm5RNElEMGdNaXhjYmlBZ2FXNTBPQ0E5SURNc1hHNGdJSFZwYm5ReE5pQTlJRFFzWEc0Z0lHbHVkREUySUQwZ05TeGNiaUFnYVc1ME16SWdQU0EyTEZ4dUlDQnBiblEyTkNBOUlEY3NYRzRnSUhOMGNtbHVaeUE5SURnc1hHNGdJR0p2YjJ3Z1BTQTVMRnh1SUNCbWJHOWhkREUySUQwZ01UQXNYRzRnSUdSdmRXSnNaU0E5SURFeExGeHVJQ0IxYVc1ME16SWdQU0F4TWl4Y2JpQWdkV2x1ZERZMElEMGdNVE1zWEc0Z0lHTnZiWEJzWlhnMk5DQTlJREUwTEZ4dUlDQmpiMjF3YkdWNE1USTRJRDBnTVRVc1hHNGdJR0ptYkc5aGRERTJJRDBnTVRaY2JuMWNibHh1THlvcVhHNGdLaUJOWVhBZ2MzUnlhVzVuSUhSbGJuTnZjaUJrWVhSaElIUnZJR1Z1ZFcwZ2RtRnNkV1ZjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUhSbGJuTnZja1JoZEdGVWVYQmxVM1J5YVc1blZHOUZiblZ0SUQwZ0tIUjVjR1U2SUhOMGNtbHVaeWs2SUVSaGRHRlVlWEJsSUQwK0lIdGNiaUFnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzRnSUNBZ1kyRnpaU0FuYVc1ME9DYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1JHRjBZVlI1Y0dVdWFXNTBPRHRjYmlBZ0lDQmpZWE5sSUNkMWFXNTBPQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdSR0YwWVZSNWNHVXVkV2x1ZERnN1hHNGdJQ0FnWTJGelpTQW5ZbTl2YkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnUkdGMFlWUjVjR1V1WW05dmJEdGNiaUFnSUNCallYTmxJQ2RwYm5ReE5pYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1JHRjBZVlI1Y0dVdWFXNTBNVFk3WEc0Z0lDQWdZMkZ6WlNBbmRXbHVkREUySnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJFWVhSaFZIbHdaUzUxYVc1ME1UWTdYRzRnSUNBZ1kyRnpaU0FuYVc1ME16SW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExtbHVkRE15TzF4dUlDQWdJR05oYzJVZ0ozVnBiblF6TWljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnUkdGMFlWUjVjR1V1ZFdsdWRETXlPMXh1SUNBZ0lHTmhjMlVnSjJac2IyRjBNVFluT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbVpzYjJGME1UWTdYRzRnSUNBZ1kyRnpaU0FuWm14dllYUXpNaWM2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdSR0YwWVZSNWNHVXVabXh2WVhRN1hHNGdJQ0FnWTJGelpTQW5abXh2WVhRMk5DYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1JHRjBZVlI1Y0dVdVpHOTFZbXhsTzF4dUlDQWdJR05oYzJVZ0ozTjBjbWx1WnljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnUkdGMFlWUjVjR1V1YzNSeWFXNW5PMXh1SUNBZ0lHTmhjMlVnSjJsdWREWTBKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQkVZWFJoVkhsd1pTNXBiblEyTkR0Y2JpQWdJQ0JqWVhObElDZDFhVzUwTmpRbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG5WcGJuUTJORHRjYmx4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lIVnVjM1Z3Y0c5eWRHVmtJR1JoZEdFZ2RIbHdaVG9nSkh0MGVYQmxmV0FwTzF4dUlDQjlYRzU5TzF4dVhHNHZLaXBjYmlBcUlFMWhjQ0JsYm5WdElIWmhiSFZsSUhSdklITjBjbWx1WnlCMFpXNXpiM0lnWkdGMFlWeHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdkR1Z1YzI5eVJHRjBZVlI1Y0dWRmJuVnRWRzlUZEhKcGJtY2dQU0FvZEhsd1pWQnliM1J2T2lCRVlYUmhWSGx3WlNrNklGUmxibk52Y2k1VWVYQmxJRDArSUh0Y2JpQWdjM2RwZEdOb0lDaDBlWEJsVUhKdmRHOHBJSHRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG1sdWREZzZYRzRnSUNBZ0lDQnlaWFIxY200Z0oybHVkRGduTzF4dUlDQWdJR05oYzJVZ1JHRjBZVlI1Y0dVdWRXbHVkRGc2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKM1ZwYm5RNEp6dGNiaUFnSUNCallYTmxJRVJoZEdGVWVYQmxMbUp2YjJ3NlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjJKdmIyd25PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1YVc1ME1UWTZYRzRnSUNBZ0lDQnlaWFIxY200Z0oybHVkREUySnp0Y2JpQWdJQ0JqWVhObElFUmhkR0ZVZVhCbExuVnBiblF4TmpwY2JpQWdJQ0FnSUhKbGRIVnliaUFuZFdsdWRERTJKenRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG1sdWRETXlPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZHBiblF6TWljN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNTFhVzUwTXpJNlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjNWcGJuUXpNaWM3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1bWJHOWhkREUyT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2RtYkc5aGRERTJKenRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG1ac2IyRjBPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZG1iRzloZERNeUp6dGNiaUFnSUNCallYTmxJRVJoZEdGVWVYQmxMbVJ2ZFdKc1pUcGNiaUFnSUNBZ0lISmxkSFZ5YmlBblpteHZZWFEyTkNjN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNXpkSEpwYm1jNlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjNOMGNtbHVaeWM3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1cGJuUTJORHBjYmlBZ0lDQWdJSEpsZEhWeWJpQW5hVzUwTmpRbk8xeHVJQ0FnSUdOaGMyVWdSR0YwWVZSNWNHVXVkV2x1ZERZME9seHVJQ0FnSUNBZ2NtVjBkWEp1SUNkMWFXNTBOalFuTzF4dVhHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdkVzV6ZFhCd2IzSjBaV1FnWkdGMFlTQjBlWEJsT2lBa2UzUjVjR1ZRY205MGIzMWdLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCblpYUWdkR1Z1YzI5eUlHVnNaVzFsYm5RZ2MybDZaU0JwYmlCaWVYUmxjeUJpZVNCMGFHVWdaMmwyWlc0Z1pHRjBZU0IwZVhCbFhHNGdLaUJBY21WMGRYSnVjeUJ6YVhwbElHbHVJR2x1ZEdWblpYSWdiM0lnZFc1a1pXWnBibVZrSUdsbUlIUm9aU0JrWVhSaElIUjVjR1VnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaRnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnWjJWMFZHVnVjMjl5Uld4bGJXVnVkRk5wZW1VZ1BTQW9aR0YwWlZSNWNHVTZJRzUxYldKbGNpazZJRzUxYldKbGNueGNiaUFnSUNCMWJtUmxabWx1WldRZ1BUNGdXM1Z1WkdWbWFXNWxaQ3dnTkN3Z01Td2dNU3dnTWl3Z01pd2dOQ3dnT0N3Z2RXNWtaV1pwYm1Wa0xDQXhMQ0F5TENBNExDQTBMQ0E0TENCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dkVzVrWldacGJtVmtYVnRrWVhSbFZIbHdaVjA3WEc1Y2JpOHFLbHh1SUNvZ1oyVjBJSFI1Y0dWa0lHRnljbUY1SUdOdmJuTjBjblZqZEc5eUlHSjVJSFJvWlNCbmFYWmxiaUIwWlc1emIzSWdkSGx3WlZ4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ2RHVnVjMjl5Vkhsd1pWUnZWSGx3WldSQmNuSmhlVU52Ym5OMGNuVmpkRzl5SUQwZ0tIUjVjR1U2SUZSbGJuTnZjaTVVZVhCbEtUb2dSbXh2WVhRek1rRnljbUY1UTI5dWMzUnlkV04wYjNKOFZXbHVkRGhCY25KaGVVTnZibk4wY25WamRHOXlmRnh1SUNBZ0lFbHVkRGhCY25KaGVVTnZibk4wY25WamRHOXlmRlZwYm5ReE5rRnljbUY1UTI5dWMzUnlkV04wYjNKOFNXNTBNVFpCY25KaGVVTnZibk4wY25WamRHOXlmRWx1ZERNeVFYSnlZWGxEYjI1emRISjFZM1J2Y254Q2FXZEpiblEyTkVGeWNtRjVRMjl1YzNSeWRXTjBiM0o4WEc0Z0lDQWdWV2x1ZERoQmNuSmhlVU52Ym5OMGNuVmpkRzl5ZkVac2IyRjBOalJCY25KaGVVTnZibk4wY25WamRHOXlmRlZwYm5Rek1rRnljbUY1UTI5dWMzUnlkV04wYjNKOFFtbG5WV2x1ZERZMFFYSnlZWGxEYjI1emRISjFZM1J2Y2lBOVBpQjdYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tIUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuWm14dllYUXhOaWM2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZWcGJuUXhOa0Z5Y21GNU8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkbWJHOWhkRE15SnpwY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JteHZZWFF6TWtGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZDFhVzUwT0NjNlhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGVnBiblE0UVhKeVlYazdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oybHVkRGduT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCSmJuUTRRWEp5WVhrN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjNWcGJuUXhOaWM2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZWcGJuUXhOa0Z5Y21GNU8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkcGJuUXhOaWM2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVsdWRERTJRWEp5WVhrN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJsdWRETXlKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnU1c1ME16SkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuWW05dmJDYzZYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRlZwYm5RNFFYSnlZWGs3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMlpzYjJGME5qUW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJHYkc5aGREWTBRWEp5WVhrN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjNWcGJuUXpNaWM2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZWcGJuUXpNa0Z5Y21GNU8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkcGJuUTJOQ2M2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVKcFowbHVkRFkwUVhKeVlYazdYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozVnBiblEyTkNjNlhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFSnBaMVZwYm5RMk5FRnljbUY1TzF4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ2RXNXpkWEJ3YjNKMFpXUWdkSGx3WlRvZ0pIdDBlWEJsZldBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaThxS2x4dUlDb2dUV0Z3SUhOMGNtbHVaeUJzYjJjZ2JHVjJaV3dnZEc4Z2FXNTBaV2RsY2lCMllXeDFaVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnYkc5blRHVjJaV3hUZEhKcGJtZFViMFZ1ZFcwZ1BTQW9iRzluVEdWMlpXdy9PaUFuZG1WeVltOXpaU2Q4SjJsdVptOG5mQ2QzWVhKdWFXNW5KM3duWlhKeWIzSW5mQ2RtWVhSaGJDY3BPaUJ1ZFcxaVpYSWdQVDRnZTF4dUlDQnpkMmwwWTJnZ0tHeHZaMHhsZG1Wc0tTQjdYRzRnSUNBZ1kyRnpaU0FuZG1WeVltOXpaU2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ0lDQmpZWE5sSUNkcGJtWnZKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXhPMXh1SUNBZ0lHTmhjMlVnSjNkaGNtNXBibWNuT2x4dUlDQWdJQ0FnY21WMGRYSnVJREk3WEc0Z0lDQWdZMkZ6WlNBblpYSnliM0luT2x4dUlDQWdJQ0FnY21WMGRYSnVJRE03WEc0Z0lDQWdZMkZ6WlNBblptRjBZV3duT2x4dUlDQWdJQ0FnY21WMGRYSnVJRFE3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ2RXNXpkWEJ3YjNKMFpXUWdiRzluWjJsdVp5QnNaWFpsYkRvZ0pIdHNiMmRNWlhabGJIMWdLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCRGFHVmpheUIzYUdWMGFHVnlJSFJvWlNCbmFYWmxiaUIwWlc1emIzSWdkSGx3WlNCcGN5QnpkWEJ3YjNKMFpXUWdZbmtnUjFCVklHSjFabVpsY2x4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ2FYTkhjSFZDZFdabVpYSlRkWEJ3YjNKMFpXUlVlWEJsSUQwZ0tIUjVjR1U2SUZSbGJuTnZjaTVVZVhCbEtUb2dkSGx3WlNCcGN5QlVaVzV6YjNJdVIzQjFRblZtWm1WeVJHRjBZVlI1Y0dWeklEMCtJSFI1Y0dVZ1BUMDlJQ2RtYkc5aGRETXlKeUI4ZkZ4dUlDQWdJSFI1Y0dVZ1BUMDlJQ2RwYm5Rek1pY2dmSHdnZEhsd1pTQTlQVDBnSjJsdWREWTBKeUI4ZkNCMGVYQmxJRDA5UFNBblltOXZiQ2NnZkh3Z2RIbHdaU0E5UFQwZ0oyWnNiMkYwTVRZbklIeDhJSFI1Y0dVZ1BUMDlJQ2QxYVc1ME16SW5PMXh1WEc0dktpcGNiaUFxSUUxaGNDQnpkSEpwYm1jZ1pHRjBZU0JzYjJOaGRHbHZiaUIwYnlCcGJuUmxaMlZ5SUhaaGJIVmxYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JrWVhSaFRHOWpZWFJwYjI1VGRISnBibWRVYjBWdWRXMGdQU0FvYkc5allYUnBiMjQ2SUZSbGJuTnZjaTVFWVhSaFRHOWpZWFJwYjI0cE9pQnVkVzFpWlhJZ1BUNGdlMXh1SUNCemQybDBZMmdnS0d4dlkyRjBhVzl1S1NCN1hHNGdJQ0FnWTJGelpTQW5ibTl1WlNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JpQWdJQ0JqWVhObElDZGpjSFVuT2x4dUlDQWdJQ0FnY21WMGRYSnVJREU3WEc0Z0lDQWdZMkZ6WlNBblkzQjFMWEJwYm01bFpDYzZYRzRnSUNBZ0lDQnlaWFIxY200Z01qdGNiaUFnSUNCallYTmxJQ2QwWlhoMGRYSmxKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXpPMXh1SUNBZ0lHTmhjMlVnSjJkd2RTMWlkV1ptWlhJbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURRN1hHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdkVzV6ZFhCd2IzSjBaV1FnWkdGMFlTQnNiMk5oZEdsdmJqb2dKSHRzYjJOaGRHbHZibjFnS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQk5ZWEFnYVc1MFpXZGxjaUJrWVhSaElHeHZZMkYwYVc5dUlIUnZJSE4wY21sdVp5QjJZV3gxWlZ4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ1pHRjBZVXh2WTJGMGFXOXVSVzUxYlZSdlUzUnlhVzVuSUQwZ0tHeHZZMkYwYVc5dU9pQnVkVzFpWlhJcE9pQlVaVzV6YjNJdVJHRjBZVXh2WTJGMGFXOXVmSFZ1WkdWbWFXNWxaQ0E5UGx4dUlDQWdJQ2hiSjI1dmJtVW5MQ0FuWTNCMUp5d2dKMk53ZFMxd2FXNXVaV1FuTENBbmRHVjRkSFZ5WlNjc0lDZG5jSFV0WW5WbVptVnlKMTBnWVhNZ1kyOXVjM1FwVzJ4dlkyRjBhVzl1WFR0Y2JpSXNJQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2Ymk0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdUR2xqWlc1elpTNWNibHh1YVcxd2IzSjBJSHRGYm5Zc0lFbHVabVZ5Wlc1alpWTmxjM05wYjI0c0lGUmxibk52Y24wZ1puSnZiU0FuYjI1dWVISjFiblJwYldVdFkyOXRiVzl1Snp0Y2JseHVhVzF3YjNKMElIdFRaWEpwWVd4cGVtRmliR1ZOYjJSbGJHUmhkR0VzSUZObGNtbGhiR2w2WVdKc1pWTmxjM05wYjI1TlpYUmhaR0YwWVN3Z1UyVnlhV0ZzYVhwaFlteGxWR1Z1YzI5eVRXVjBZV1JoZEdFc0lGUmxibk52Y2sxbGRHRmtZWFJoZlNCbWNtOXRJQ2N1TDNCeWIzaDVMVzFsYzNOaFoyVnpKenRjYm1sdGNHOXlkQ0I3YzJWMFVuVnVUM0IwYVc5dWMzMGdabkp2YlNBbkxpOXlkVzR0YjNCMGFXOXVjeWM3WEc1cGJYQnZjblFnZTNObGRGTmxjM05wYjI1UGNIUnBiMjV6ZlNCbWNtOXRJQ2N1TDNObGMzTnBiMjR0YjNCMGFXOXVjeWM3WEc1cGJYQnZjblFnZTJSaGRHRk1iMk5oZEdsdmJsTjBjbWx1WjFSdlJXNTFiU3dnWjJWMFZHVnVjMjl5Uld4bGJXVnVkRk5wZW1Vc0lHbHpSM0IxUW5WbVptVnlVM1Z3Y0c5eWRHVmtWSGx3WlN3Z2JHOW5UR1YyWld4VGRISnBibWRVYjBWdWRXMHNJSFJsYm5OdmNrUmhkR0ZVZVhCbFJXNTFiVlJ2VTNSeWFXNW5MQ0IwWlc1emIzSkVZWFJoVkhsd1pWTjBjbWx1WjFSdlJXNTFiU3dnZEdWdWMyOXlWSGx3WlZSdlZIbHdaV1JCY25KaGVVTnZibk4wY25WamRHOXlmU0JtY205dElDY3VMM2RoYzIwdFkyOXRiVzl1Snp0Y2JtbHRjRzl5ZENCN1oyVjBTVzV6ZEdGdVkyVjlJR1p5YjIwZ0p5NHZkMkZ6YlMxbVlXTjBiM0o1Snp0Y2JtbHRjRzl5ZENCN1lXeHNiMk5YWVhOdFUzUnlhVzVuTENCamFHVmphMHhoYzNSRmNuSnZjbjBnWm5KdmJTQW5MaTkzWVhOdExYVjBhV3h6Snp0Y2JseHViR1YwSUc5eWRFVnVka2x1YVhScFlXeHBlbVZrSUQwZ1ptRnNjMlU3WEc1Y2JpOHFLbHh1SUNvZ1oyVjBJSFJvWlNCcGJuQjFkQzl2ZFhSd2RYUWdZMjkxYm5RZ2IyWWdkR2hsSUhObGMzTnBiMjR1WEc0Z0tpQkFjR0Z5WVcwZ2MyVnpjMmx2YmtoaGJtUnNaU0IwYUdVZ2FHRnVaR3hsSUhKbGNISmxjMlZ1ZEdsdVp5QjBhR1VnYzJWemMybHZiaTRnYzJodmRXeGtJR0psSUc1dmJpMTZaWEp2TGx4dUlDb2dRSEpsZEhWeWJuTWdZU0IwZFhCc1pTQnBibU5zZFdScGJtY2dNaUJ1ZFcxaVpYSnpMQ0J5WlhCeVpYTmxiblJwYm1jZ2RHaGxJR2x1Y0hWMElHTnZkVzUwSUdGdVpDQnZkWFJ3ZFhRZ1kyOTFiblF1WEc0Z0tpOWNibU52Ym5OMElHZGxkRk5sYzNOcGIyNUpibkIxZEU5MWRIQjFkRU52ZFc1MElEMGdLSE5sYzNOcGIyNUlZVzVrYkdVNklHNTFiV0psY2lrNklGdHVkVzFpWlhJc0lHNTFiV0psY2wwZ1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JpQWdZMjl1YzNRZ2MzUmhZMnNnUFNCM1lYTnRMbk4wWVdOclUyRjJaU2dwTzF4dUlDQjBjbmtnZTF4dUlDQWdJR052Ym5OMElHUmhkR0ZQWm1aelpYUWdQU0IzWVhOdExuTjBZV05yUVd4c2IyTW9PQ2s3WEc0Z0lDQWdZMjl1YzNRZ1pYSnliM0pEYjJSbElEMGdkMkZ6YlM1ZlQzSjBSMlYwU1c1d2RYUlBkWFJ3ZFhSRGIzVnVkQ2h6WlhOemFXOXVTR0Z1Wkd4bExDQmtZWFJoVDJabWMyVjBMQ0JrWVhSaFQyWm1jMlYwSUNzZ05DazdYRzRnSUNBZ2FXWWdLR1Z5Y205eVEyOWtaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb0owTmhibHhjSjNRZ1oyVjBJSE5sYzNOcGIyNGdhVzV3ZFhRdmIzVjBjSFYwSUdOdmRXNTBMaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1czZGhjMjB1U0VWQlVETXlXMlJoZEdGUFptWnpaWFFnTHlBMFhTd2dkMkZ6YlM1SVJVRlFNekpiWkdGMFlVOW1abk5sZENBdklEUWdLeUF4WFYwN1hHNGdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdkMkZ6YlM1emRHRmphMUpsYzNSdmNtVW9jM1JoWTJzcE8xeHVJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJR2x1YVhScFlXeHBlbVVnVDFKVUlHVnVkbWx5YjI1dFpXNTBMbHh1SUNvZ1FIQmhjbUZ0SUc1MWJWUm9jbVZoWkhNZ1UyVjBSMnh2WW1Gc1NXNTBjbUZQY0U1MWJWUm9jbVZoWkhNb2JuVnRWR2h5WldGa2N5bGNiaUFxSUVCd1lYSmhiU0JzYjJkbmFXNW5UR1YyWld3Z1EzSmxZWFJsUlc1MktITjBZWFJwWTE5allYTjBQRTl5ZEV4dloyZHBibWRNWlhabGJENG9iRzluWjJsdVoxOXNaWFpsYkNrcFhHNGdLaTljYm1OdmJuTjBJR2x1YVhSUGNuUWdQU0FvYm5WdFZHaHlaV0ZrY3pvZ2JuVnRZbVZ5TENCc2IyZG5hVzVuVEdWMlpXdzZJRzUxYldKbGNpazZJSFp2YVdRZ1BUNGdlMXh1SUNCamIyNXpkQ0JsY25KdmNrTnZaR1VnUFNCblpYUkpibk4wWVc1alpTZ3BMbDlQY25SSmJtbDBLRzUxYlZSb2NtVmhaSE1zSUd4dloyZHBibWRNWlhabGJDazdYRzRnSUdsbUlDaGxjbkp2Y2tOdlpHVWdJVDA5SURBcElIdGNiaUFnSUNCamFHVmphMHhoYzNSRmNuSnZjaWduUTJGdVhGd25kQ0JwYm1sMGFXRnNhWHBsSUc5dWJuaHlkVzUwYVcxbExpY3BPMXh1SUNCOVhHNTlPMXh1WEc0dktpcGNiaUFxSUdsdWRHbGhiR2w2WlNCeWRXNTBhVzFsSUdWdWRtbHliMjV0Wlc1MExseHVJQ29nUUhCaGNtRnRJR1Z1ZGlCd1lYTnpaV1FnYVc0Z2RHaGxJR1Z1ZG1seWIyNXRaVzUwSUdOdmJtWnBaeUJ2WW1wbFkzUXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYm1sMFVuVnVkR2x0WlNBOUlHRnplVzVqS0dWdWRqb2dSVzUyS1RvZ1VISnZiV2x6WlR4MmIybGtQaUE5UGlCN1hHNGdJQzh2SUdsdWFYUWdUMUpVWEc0Z0lHbHVhWFJQY25Rb1pXNTJMbmRoYzIwdWJuVnRWR2h5WldGa2N5RXNJR3h2WjB4bGRtVnNVM1J5YVc1blZHOUZiblZ0S0dWdWRpNXNiMmRNWlhabGJDa3BPMXh1WEc0Z0lHbG1JQ2doUWxWSlRFUmZSRVZHVXk1RVNWTkJRa3hGWDFkRlFrZFFWU2tnZTF4dUlDQWdJQzh2SUdsdWFYUWdTbE5GVUNCcFppQmhkbUZwYkdGaWJHVmNibHh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0Y21WeGRXbHlaUzFwYlhCdmNuUnpMQ0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGRtRnlMWEpsY1hWcGNtVnpYRzRnSUNBZ1kyOXVjM1FnYVc1cGRFcHpaWEFnUFNCeVpYRjFhWEpsS0NjdUwycHpaWEF2YVc1cGRDY3BMbWx1YVhRN1hHNGdJQ0FnWVhkaGFYUWdhVzVwZEVwelpYQW9aMlYwU1c1emRHRnVZMlVvS1N3Z1pXNTJLVHRjYmlBZ2ZWeHVYRzRnSUc5eWRFVnVka2x1YVhScFlXeHBlbVZrSUQwZ2RISjFaVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dkbUZzYVdRZ1pHRjBZU0JzYjJOaGRHbHZibk1nWm05eUlHbHVjSFYwTDI5MWRIQjFkQ0IwWlc1emIzSnpMbHh1SUNvdlhHNTBlWEJsSUZOMWNIQnZjblJsWkZSbGJuTnZja1JoZEdGTWIyTmhkR2x2YmtadmNrbHVjSFYwVDNWMGNIVjBJRDBnSjJOd2RTZDhKMk53ZFMxd2FXNXVaV1FuZkNkbmNIVXRZblZtWm1WeUp6dGNibHh1ZEhsd1pTQkpUMEpwYm1ScGJtZFRkR0YwWlNBOUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUhSb1pTQm9ZVzVrYkdVZ2IyWWdTVThnWW1sdVpHbHVaeTVjYmlBZ0lDb3ZYRzRnSUhKbFlXUnZibXg1SUdoaGJtUnNaVG9nYm5WdFltVnlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQjBhR1VnY0hKbFptVnljbVZrSUd4dlkyRjBhVzl1SUdadmNpQmxZV05vSUc5MWRIQjFkQ0IwWlc1emIzSXVYRzRnSUNBcVhHNGdJQ0FxSUhaaGJIVmxJR2x6SUc5dVpTQnZaaUFuWTNCMUp5d2dKMk53ZFMxd2FXNXVaV1FuTENBblozQjFMV0oxWm1abGNpY3VYRzRnSUNBcUwxeHVJQ0J5WldGa2IyNXNlU0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTTZJSEpsWVdSdmJteDVJRk4xY0hCdmNuUmxaRlJsYm5OdmNrUmhkR0ZNYjJOaGRHbHZia1p2Y2tsdWNIVjBUM1YwY0hWMFcxMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlHVnVkVzBnZG1Gc2RXVWdiMllnZEdobElIQnlaV1psY25KbFpDQnNiMk5oZEdsdmJpQm1iM0lnWldGamFDQnZkWFJ3ZFhRZ2RHVnVjMjl5TGx4dUlDQWdLaTljYmlBZ2NtVmhaRzl1YkhrZ2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6Ulc1amIyUmxaRG9nY21WaFpHOXViSGtnYm5WdFltVnlXMTA3WEc1OU8xeHVYRzR2S2lwY2JpQXFJQ0IwZFhCc1pTQmxiR1Z0Wlc1MGN5QmhjbVU2SUVsdVptVnlaVzVqWlZObGMzTnBiMjRnU1VRN0lHbHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaRHNnYjNWMGNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpEc2dZbWx1WkdsdVoxTjBZWFJsWEc0Z0tpOWNiblI1Y0dVZ1UyVnpjMmx2YmsxbGRHRmtZWFJoSUQwZ1cxeHVJQ0JwYm1abGNtVnVZMlZUWlhOemFXOXVTV1E2SUc1MWJXSmxjaXdnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa09pQnVkVzFpWlhKYlhTd2diM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkRvZ2JuVnRZbVZ5VzEwc1hHNGdJR0pwYm1ScGJtZFRkR0YwWlRvZ1NVOUNhVzVrYVc1blUzUmhkR1Y4Ym5Wc2JGeHVYVHRjYmx4dVkyOXVjM1FnWVdOMGFYWmxVMlZ6YzJsdmJuTWdQU0J1WlhjZ1RXRndQRzUxYldKbGNpd2dVMlZ6YzJsdmJrMWxkR0ZrWVhSaFBpZ3BPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdhWE5QY25SRmJuWkpibWwwYVdGc2FYcGxaQ0E5SUNncE9pQmliMjlzWldGdUlEMCtJRzl5ZEVWdWRrbHVhWFJwWVd4cGVtVmtPMXh1WEc0dktpcGNiaUFxSUdGc2JHOWpZWFJsSUhSb1pTQnRaVzF2Y25rZ1lXNWtJRzFsYldOd2VTQjBhR1VnYlc5a1pXd2dZbmwwWlhNc0lIQnlaWEJoY21sdVp5Qm1iM0lnWTNKbFlYUnBibWNnWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNWNiaUFxSUVCeVpYUjFjbTV6SUdFZ01pMWxiR1Z0Wlc1MGN5QjBkWEJzWlNBdElIUm9aU0J3YjJsdWRHVnlJR0Z1WkNCemFYcGxJRzltSUhSb1pTQmhiR3h2WTJGMFpXUWdZblZtWm1WeVhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQmpjbVZoZEdWVFpYTnphVzl1UVd4c2IyTmhkR1VnUFNBb2JXOWtaV3c2SUZWcGJuUTRRWEp5WVhrcE9pQmJiblZ0WW1WeUxDQnVkVzFpWlhKZElEMCtJSHRjYmlBZ1kyOXVjM1FnZDJGemJTQTlJR2RsZEVsdWMzUmhibU5sS0NrN1hHNGdJR052Ym5OMElHMXZaR1ZzUkdGMFlVOW1abk5sZENBOUlIZGhjMjB1WDIxaGJHeHZZeWh0YjJSbGJDNWllWFJsVEdWdVozUm9LVHRjYmlBZ2FXWWdLRzF2WkdWc1JHRjBZVTltWm5ObGRDQTlQVDBnTUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnUTJGdUozUWdZM0psWVhSbElHRWdjMlZ6YzJsdmJpNGdabUZwYkdWa0lIUnZJR0ZzYkc5allYUmxJR0VnWW5WbVptVnlJRzltSUhOcGVtVWdKSHR0YjJSbGJDNWllWFJsVEdWdVozUm9mUzVnS1R0Y2JpQWdmVnh1SUNCM1lYTnRMa2hGUVZCVk9DNXpaWFFvYlc5a1pXd3NJRzF2WkdWc1JHRjBZVTltWm5ObGRDazdYRzRnSUhKbGRIVnliaUJiYlc5a1pXeEVZWFJoVDJabWMyVjBMQ0J0YjJSbGJDNWllWFJsVEdWdVozUm9YVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dZM0psWVhSbElHRnVJR2x1Wm1WeVpXNWpaU0J6WlhOemFXOXVJSFZ6YVc1bklIUm9aU0J3Y21Wd1lYSmxaQ0JpZFdabVpYSWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ2JXOWtaV3dnWkdGMFlTNWNiaUFxSUVCd1lYSmhiU0J0YjJSbGJFUmhkR0VnWVNBeUxXVnNaVzFsYm5SeklIUjFjR3hsSUdOdmJuUmhhVzVwYm1jZ2RHaGxJSEJ2YVc1MFpYSWdZVzVrSUhOcGVtVWdiMllnZEdobElHMXZaR1ZzSUdSaGRHRWdZblZtWm1WeUxseHVJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTWdZVzRnYjNCMGFXOXVZV3dnYzJWemMybHZiaUJ2Y0hScGIyNXpJRzlpYW1WamRDNWNiaUFxSUVCeVpYUjFjbTV6SUdFZ015MWxiR1Z0Wlc1MGN5QjBkWEJzWlNCamIyNTBZV2x1YVc1bklGdHpaWE56YVc5dUlHaGhibVJzWlN3Z2FXNXdkWFFnYm1GdFpYTXNJRzkxZEhCMWRDQnVZVzFsYzExY2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHTnlaV0YwWlZObGMzTnBiMjVHYVc1aGJHbDZaU0E5WEc0Z0lDQWdLRzF2WkdWc1JHRjBZVG9nVTJWeWFXRnNhWHBoWW14bFRXOWtaV3hrWVhSaExDQnZjSFJwYjI1elB6b2dTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNVRaWE56YVc5dVQzQjBhVzl1Y3lrNklGTmxjbWxoYkdsNllXSnNaVk5sYzNOcGIyNU5aWFJoWkdGMFlTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQjNZWE50SUQwZ1oyVjBTVzV6ZEdGdVkyVW9LVHRjYmx4dUlDQWdJQ0FnYkdWMElITmxjM05wYjI1SVlXNWtiR1VnUFNBd08xeHVJQ0FnSUNBZ2JHVjBJSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsSUQwZ01EdGNiaUFnSUNBZ0lHeGxkQ0JwYjBKcGJtUnBibWRJWVc1a2JHVWdQU0F3TzF4dUlDQWdJQ0FnYkdWMElHRnNiRzlqY3pvZ2JuVnRZbVZ5VzEwZ1BTQmJYVHRjYmlBZ0lDQWdJR052Ym5OMElHbHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYjNWMGNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDQTlJRnRkTzF4dVhHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JiYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHRnNiRzlqYzEwZ1BTQnpaWFJUWlhOemFXOXVUM0IwYVc5dWN5aHZjSFJwYjI1ektUdGNibHh1SUNBZ0lDQWdJQ0J6WlhOemFXOXVTR0Z1Wkd4bElEMGdkMkZ6YlM1ZlQzSjBRM0psWVhSbFUyVnpjMmx2YmlodGIyUmxiRVJoZEdGYk1GMHNJRzF2WkdWc1JHRjBZVnN4WFN3Z2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnpjMmx2YmtoaGJtUnNaU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR055WldGMFpTQmhJSE5sYzNOcGIyNHVKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCYmFXNXdkWFJEYjNWdWRDd2diM1YwY0hWMFEyOTFiblJkSUQwZ1oyVjBVMlZ6YzJsdmJrbHVjSFYwVDNWMGNIVjBRMjkxYm5Rb2MyVnpjMmx2YmtoaGJtUnNaU2s3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVc1d2RYUk9ZVzFsY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZkWFJ3ZFhST1lXMWxjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk02SUZOMWNIQnZjblJsWkZSbGJuTnZja1JoZEdGTWIyTmhkR2x2YmtadmNrbHVjSFYwVDNWMGNIVjBXMTBnUFNCYlhUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JwYm5CMWRFTnZkVzUwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1WVcxbElEMGdkMkZ6YlM1ZlQzSjBSMlYwU1c1d2RYUk9ZVzFsS0hObGMzTnBiMjVJWVc1a2JHVXNJR2twTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h1WVcxbElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdWamEweGhjM1JGY25KdmNpZ25RMkZ1WEZ3bmRDQm5aWFFnWVc0Z2FXNXdkWFFnYm1GdFpTNG5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdhVzV3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTG5CMWMyZ29ibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdhVzV3ZFhST1lXMWxjeTV3ZFhOb0tIZGhjMjB1VlZSR09GUnZVM1J5YVc1bktHNWhiV1VwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzkxZEhCMWRFTnZkVzUwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1WVcxbElEMGdkMkZ6YlM1ZlQzSjBSMlYwVDNWMGNIVjBUbUZ0WlNoelpYTnphVzl1U0dGdVpHeGxMQ0JwS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9KME5oYmx4Y0ozUWdaMlYwSUdGdUlHOTFkSEIxZENCdVlXMWxMaWNwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J2ZFhSd2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xuQjFjMmdvYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdibUZ0WlZOMGNtbHVaeUE5SUhkaGMyMHVWVlJHT0ZSdlUzUnlhVzVuS0c1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUc5MWRIQjFkRTVoYldWekxuQjFjMmdvYm1GdFpWTjBjbWx1WnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lVSlZTVXhFWDBSRlJsTXVSRWxUUVVKTVJWOVhSVUpIVUZVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3h2WTJGMGFXOXVJRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTS9MbkJ5WldabGNuSmxaRTkxZEhCMWRFeHZZMkYwYVc5dUlEMDlQU0FuYzNSeWFXNW5KeUEvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTV3Y21WbVpYSnlaV1JQZFhSd2RYUk1iMk5oZEdsdmJpQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN6OHVjSEpsWm1WeWNtVmtUM1YwY0hWMFRHOWpZWFJwYjI0L0xsdHVZVzFsVTNSeWFXNW5YU0EvUHlBblkzQjFKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYjJOaGRHbHZiaUFoUFQwZ0oyTndkU2NnSmlZZ2JHOWpZWFJwYjI0Z0lUMDlJQ2RqY0hVdGNHbHVibVZrSnlBbUppQnNiMk5oZEdsdmJpQWhQVDBnSjJkd2RTMWlkV1ptWlhJbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1RtOTBJSE4xY0hCdmNuUmxaQ0J3Y21WbVpYSnlaV1FnYjNWMGNIVjBJR3h2WTJGMGFXOXVPaUFrZTJ4dlkyRjBhVzl1ZlM1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRGQnlaV1psY25KbFpFeHZZMkYwYVc5dWN5NXdkWE5vS0d4dlkyRjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QjFjMlVnU1U4Z1ltbHVaR2x1WnlCdmJteDVJSGRvWlc0Z1lYUWdiR1ZoYzNRZ2IyNWxJRzkxZEhCMWRDQnBjeUJ3Y21WbVptVnlaV1FnZEc4Z1ltVWdiMjRnUjFCVkxseHVJQ0FnSUNBZ0lDQnNaWFFnWW1sdVpHbHVaMU4wWVhSbE9pQkpUMEpwYm1ScGJtZFRkR0YwWlh4dWRXeHNJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdhV1lnS0NGQ1ZVbE1SRjlFUlVaVExrUkpVMEZDVEVWZlYwVkNSMUJWSUNZbUlHOTFkSEIxZEZCeVpXWmxjbkpsWkV4dlkyRjBhVzl1Y3k1emIyMWxLR3dnUFQ0Z2JDQTlQVDBnSjJkd2RTMWlkV1ptWlhJbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsdlFtbHVaR2x1WjBoaGJtUnNaU0E5SUhkaGMyMHVYMDl5ZEVOeVpXRjBaVUpwYm1ScGJtY29jMlZ6YzJsdmJraGhibVJzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dsdlFtbHVaR2x1WjBoaGJtUnNaU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvSjBOaGJseGNKM1FnWTNKbFlYUmxJRWxQSUdKcGJtUnBibWN1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1ltbHVaR2x1WjFOMFlYUmxJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bE9pQnBiMEpwYm1ScGJtZElZVzVrYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk5GYm1OdlpHVmtPaUJ2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTXViV0Z3S0d3Z1BUNGdaR0YwWVV4dlkyRjBhVzl1VTNSeWFXNW5WRzlGYm5WdEtHd3BLU3hjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWVdOMGFYWmxVMlZ6YzJsdmJuTXVjMlYwS0hObGMzTnBiMjVJWVc1a2JHVXNJRnR6WlhOemFXOXVTR0Z1Wkd4bExDQnBibkIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1FzSUc5MWRIQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUXNJR0pwYm1ScGJtZFRkR0YwWlYwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1czTmxjM05wYjI1SVlXNWtiR1VzSUdsdWNIVjBUbUZ0WlhNc0lHOTFkSEIxZEU1aGJXVnpYVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXNXdkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMbVp2Y2tWaFkyZ29ZblZtSUQwK0lIZGhjMjB1WDA5eWRFWnlaV1VvWW5WbUtTazdYRzRnSUNBZ0lDQWdJRzkxZEhCMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldRdVptOXlSV0ZqYUNoaWRXWWdQVDRnZDJGemJTNWZUM0owUm5KbFpTaGlkV1lwS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVc5Q2FXNWthVzVuU0dGdVpHeGxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGemJTNWZUM0owVW1Wc1pXRnpaVUpwYm1ScGJtY29hVzlDYVc1a2FXNW5TR0Z1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaWE56YVc5dVNHRnVaR3hsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2QyRnpiUzVmVDNKMFVtVnNaV0Z6WlZObGMzTnBiMjRvYzJWemMybHZia2hoYm1Sc1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdoeWIzY2daVHRjYmlBZ0lDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUhkaGMyMHVYMlp5WldVb2JXOWtaV3hFWVhSaFd6QmRLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGemJTNWZUM0owVW1Wc1pXRnpaVk5sYzNOcGIyNVBjSFJwYjI1ektITmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCaGJHeHZZM011Wm05eVJXRmphQ2hoYkd4dll5QTlQaUIzWVhOdExsOW1jbVZsS0dGc2JHOWpLU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dVhHNHZLaXBjYmlBcUlHTnlaV0YwWlNCaGJpQnBibk4wWVc1alpTQnZaaUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2RHaGxJRzFsZEdGa1lYUmhJRzltSUVsdVptVnlaVzVqWlZObGMzTnBiMjR1SURBdGRtRnNkV1VnYUdGdVpHeGxJR1p2Y2lCbVlXbHNkWEpsTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ1kzSmxZWFJsVTJWemMybHZiaUE5WEc0Z0lDQWdLRzF2WkdWc09pQlZhVzUwT0VGeWNtRjVMQ0J2Y0hScGIyNXpQem9nU1c1bVpYSmxibU5sVTJWemMybHZiaTVUWlhOemFXOXVUM0IwYVc5dWN5azZJRk5sY21saGJHbDZZV0pzWlZObGMzTnBiMjVOWlhSaFpHRjBZU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0J0YjJSbGJFUmhkR0U2SUZObGNtbGhiR2w2WVdKc1pVMXZaR1ZzWkdGMFlTQTlJR055WldGMFpWTmxjM05wYjI1QmJHeHZZMkYwWlNodGIyUmxiQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFUyVnpjMmx2YmtacGJtRnNhWHBsS0cxdlpHVnNSR0YwWVN3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUhKbGJHVmhjMlZUWlhOemFXOXVJRDBnS0hObGMzTnBiMjVKWkRvZ2JuVnRZbVZ5S1RvZ2RtOXBaQ0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCamIyNXpkQ0J6WlhOemFXOXVJRDBnWVdOMGFYWmxVMlZ6YzJsdmJuTXVaMlYwS0hObGMzTnBiMjVKWkNrN1hHNGdJR2xtSUNnaGMyVnpjMmx2YmlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWTJGdWJtOTBJSEpsYkdWaGMyVWdjMlZ6YzJsdmJpNGdhVzUyWVd4cFpDQnpaWE56YVc5dUlHbGtPaUFrZTNObGMzTnBiMjVKWkgxZ0tUdGNiaUFnZlZ4dUlDQmpiMjV6ZENCYmMyVnpjMmx2YmtoaGJtUnNaU3dnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xDQnZkWFJ3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTENCcGIwSnBibVJwYm1kVGRHRjBaVjBnUFNCelpYTnphVzl1TzF4dVhHNGdJR2xtSUNocGIwSnBibVJwYm1kVGRHRjBaU2tnZTF4dUlDQWdJSGRoYzIwdVgwOXlkRkpsYkdWaGMyVkNhVzVrYVc1bktHbHZRbWx1WkdsdVoxTjBZWFJsTG1oaGJtUnNaU2s3WEc0Z0lIMWNibHh1SUNCM1lYTnRMbXB6WlhCVmJuSmxaMmx6ZEdWeVFuVm1abVZ5Y3o4dUtITmxjM05wYjI1SlpDazdYRzVjYmlBZ2FXNXdkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMbVp2Y2tWaFkyZ29ZblZtSUQwK0lIZGhjMjB1WDA5eWRFWnlaV1VvWW5WbUtTazdYRzRnSUc5MWRIQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUXVabTl5UldGamFDaGlkV1lnUFQ0Z2QyRnpiUzVmVDNKMFJuSmxaU2hpZFdZcEtUdGNiaUFnZDJGemJTNWZUM0owVW1Wc1pXRnpaVk5sYzNOcGIyNG9jMlZ6YzJsdmJraGhibVJzWlNrN1hHNGdJR0ZqZEdsMlpWTmxjM05wYjI1ekxtUmxiR1YwWlNoelpYTnphVzl1U1dRcE8xeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJSEJ5WlhCaGNtVkpibkIxZEU5MWRIQjFkRlJsYm5OdmNpQTlYRzRnSUNBZ0tIUmxibk52Y2pvZ1ZHVnVjMjl5VFdWMFlXUmhkR0Y4Ym5Wc2JDd2dkR1Z1YzI5eVNHRnVaR3hsY3pvZ2JuVnRZbVZ5VzEwc0lHRnNiRzlqY3pvZ2JuVnRZbVZ5VzEwc0lITmxjM05wYjI1SlpEb2diblZ0WW1WeUxDQnBibVJsZURvZ2JuVnRZbVZ5S1RwY2JpQWdJQ0FnSUNBZ2RtOXBaQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGMFpXNXpiM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYm5OdmNraGhibVJzWlhNdWNIVnphQ2d3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCM1lYTnRJRDBnWjJWMFNXNXpkR0Z1WTJVb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1JoZEdGVWVYQmxJRDBnZEdWdWMyOXlXekJkTzF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUdScGJYTWdQU0IwWlc1emIzSmJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYkc5allYUnBiMjRnUFNCMFpXNXpiM0piTTEwN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NtRjNSR0YwWVRvZ2JuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFFubDBaVXhsYm1kMGFEb2diblZ0WW1WeU8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0ZVZVhCbElEMDlQU0FuYzNSeWFXNW5KeUFtSmlCc2IyTmhkR2x2YmlBOVBUMGdKMmR3ZFMxaWRXWm1aWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMU4wY21sdVp5QjBaVzV6YjNJZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNCdmJpQkhVRlV1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR3h2WTJGMGFXOXVJRDA5UFNBblozQjFMV0oxWm1abGNpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdkd2RVSjFabVpsY2lBOUlIUmxibk52Y2xzeVhTNW5jSFZDZFdabVpYSWdZWE1nUjFCVlFuVm1abVZ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pXeGxiV1Z1ZEZOcGVtVkpia0o1ZEdWeklEMGdaMlYwVkdWdWMyOXlSV3hsYldWdWRGTnBlbVVvZEdWdWMyOXlSR0YwWVZSNWNHVlRkSEpwYm1kVWIwVnVkVzBvWkdGMFlWUjVjR1VwS1NFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFFubDBaVXhsYm1kMGFDQTlJR1JwYlhNdWNtVmtkV05sS0NoaExDQmlLU0E5UGlCaElDb2dZaXdnTVNrZ0tpQmxiR1Z0Wlc1MFUybDZaVWx1UW5sMFpYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVlYZEVZWFJoSUQwZ2QyRnpiUzVxYzJWd1VtVm5hWE4wWlhKQ2RXWm1aWElvYzJWemMybHZia2xrTENCcGJtUmxlQ3dnWjNCMVFuVm1abVZ5TENCa1lYUmhRbmwwWlV4bGJtZDBhQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUmhkR0VnUFNCMFpXNXpiM0piTWwwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dSaGRHRXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOMGNtbHVaeUIwWlc1emIzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVUo1ZEdWTVpXNW5kR2dnUFNBMElDb2daR0YwWVM1c1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpoZDBSaGRHRWdQU0IzWVhOdExsOXRZV3hzYjJNb1pHRjBZVUo1ZEdWTVpXNW5kR2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkd4dlkzTXVjSFZ6YUNoeVlYZEVZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZKYm1SbGVDQTlJSEpoZDBSaGRHRWdMeUEwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdSaGRHRXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHUmhkR0ZiYVYwZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtHQjBaVzV6YjNJZ1pHRjBZU0JoZENCcGJtUmxlQ0FrZTJsOUlHbHpJRzV2ZENCaElITjBjbWx1WjJBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNZWE50TGtoRlFWQlZNekpiWkdGMFlVbHVaR1Y0S3l0ZElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktHUmhkR0ZiYVYwc0lHRnNiRzlqY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZDZVhSbFRHVnVaM1JvSUQwZ1pHRjBZUzVpZVhSbFRHVnVaM1JvTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WVhkRVlYUmhJRDBnZDJGemJTNWZiV0ZzYkc5aktHUmhkR0ZDZVhSbFRHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4c2IyTnpMbkIxYzJnb2NtRjNSR0YwWVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhkaGMyMHVTRVZCVUZVNExuTmxkQ2h1WlhjZ1ZXbHVkRGhCY25KaGVTaGtZWFJoTG1KMVptWmxjaXdnWkdGMFlTNWllWFJsVDJabWMyVjBMQ0JrWVhSaFFubDBaVXhsYm1kMGFDa3NJSEpoZDBSaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOMFlXTnJJRDBnZDJGemJTNXpkR0ZqYTFOaGRtVW9LVHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrYVcxelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0RRZ0tpQmthVzF6TG14bGJtZDBhQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrYVcxSmJtUmxlQ0E5SUdScGJYTlBabVp6WlhRZ0x5QTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbHRjeTVtYjNKRllXTm9LR1FnUFQ0Z2QyRnpiUzVJUlVGUU16SmJaR2x0U1c1a1pYZ3JLMTBnUFNCa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFJsYm5OdmNpQTlJSGRoYzIwdVgwOXlkRU55WldGMFpWUmxibk52Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpXNXpiM0pFWVhSaFZIbHdaVk4wY21sdVoxUnZSVzUxYlNoa1lYUmhWSGx3WlNrc0lISmhkMFJoZEdFc0lHUmhkR0ZDZVhSbFRHVnVaM1JvTENCa2FXMXpUMlptYzJWMExDQmthVzF6TG14bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFRHOWpZWFJwYjI1VGRISnBibWRVYjBWdWRXMG9iRzlqWVhScGIyNHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWlc1emIzSWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJR055WldGMFpTQjBaVzV6YjNJZ1ptOXlJR2x1Y0hWMEwyOTFkSEIxZEM0Z2MyVnpjMmx2Ymowa2UzTmxjM05wYjI1SlpIMHNJR2x1WkdWNFBTUjdhVzVrWlhoOUxtQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWdWMyOXlTR0Z1Wkd4bGN5NXdkWE5vS0hSbGJuTnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkaGMyMHVjM1JoWTJ0U1pYTjBiM0psS0hOMFlXTnJLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmk4cUtseHVJQ29nY0dWeVptOXliU0JwYm1abGNtVnVZMlVnY25WdVhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQnlkVzRnUFNCaGMzbHVZeWhjYmlBZ0lDQnpaWE56YVc5dVNXUTZJRzUxYldKbGNpd2dhVzV3ZFhSSmJtUnBZMlZ6T2lCdWRXMWlaWEpiWFN3Z2FXNXdkWFJVWlc1emIzSnpPaUJVWlc1emIzSk5aWFJoWkdGMFlWdGRMQ0J2ZFhSd2RYUkpibVJwWTJWek9pQnVkVzFpWlhKYlhTeGNiaUFnSUNCdmRYUndkWFJVWlc1emIzSnpPaUJCY25KaGVUeFVaVzV6YjNKTlpYUmhaR0YwWVh4dWRXeHNQaXdnYjNCMGFXOXVjem9nU1c1bVpYSmxibU5sVTJWemMybHZiaTVTZFc1UGNIUnBiMjV6S1RvZ1VISnZiV2x6WlR4VVpXNXpiM0pOWlhSaFpHRjBZVnRkUGlBOVBpQjdYRzRnSUdOdmJuTjBJSGRoYzIwZ1BTQm5aWFJKYm5OMFlXNWpaU2dwTzF4dUlDQmpiMjV6ZENCelpYTnphVzl1SUQwZ1lXTjBhWFpsVTJWemMybHZibk11WjJWMEtITmxjM05wYjI1SlpDazdYRzRnSUdsbUlDZ2hjMlZ6YzJsdmJpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1kyRnVibTkwSUhKMWJpQnBibVpsY21WdVkyVXVJR2x1ZG1Gc2FXUWdjMlZ6YzJsdmJpQnBaRG9nSkh0elpYTnphVzl1U1dSOVlDazdYRzRnSUgxY2JpQWdZMjl1YzNRZ1czTmxjM05wYjI1SVlXNWtiR1VzSUdsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDd2diM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkN3Z2FXOUNhVzVrYVc1blUzUmhkR1ZkSUQwZ2MyVnpjMmx2Ymp0Y2JseHVJQ0JqYjI1emRDQnBibkIxZEVOdmRXNTBJRDBnYVc1d2RYUkpibVJwWTJWekxteGxibWQwYUR0Y2JpQWdZMjl1YzNRZ2IzVjBjSFYwUTI5MWJuUWdQU0J2ZFhSd2RYUkpibVJwWTJWekxteGxibWQwYUR0Y2JseHVJQ0JzWlhRZ2NuVnVUM0IwYVc5dWMwaGhibVJzWlNBOUlEQTdYRzRnSUd4bGRDQnlkVzVQY0hScGIyNXpRV3hzYjJOek9pQnVkVzFpWlhKYlhTQTlJRnRkTzF4dVhHNGdJR052Ym5OMElHbHVjSFYwVkdWdWMyOXlTR0Z1Wkd4bGN6b2diblZ0WW1WeVcxMGdQU0JiWFR0Y2JpQWdZMjl1YzNRZ2IzVjBjSFYwVkdWdWMyOXlTR0Z1Wkd4bGN6b2diblZ0WW1WeVcxMGdQU0JiWFR0Y2JpQWdZMjl1YzNRZ2FXNXdkWFJQZFhSd2RYUkJiR3h2WTNNNklHNTFiV0psY2x0ZElEMGdXMTA3WEc1Y2JpQWdZMjl1YzNRZ1ltVm1iM0psVW5WdVUzUmhZMnNnUFNCM1lYTnRMbk4wWVdOclUyRjJaU2dwTzF4dUlDQmpiMjV6ZENCcGJuQjFkRlpoYkhWbGMwOW1abk5sZENBOUlIZGhjMjB1YzNSaFkydEJiR3h2WXlocGJuQjFkRU52ZFc1MElDb2dOQ2s3WEc0Z0lHTnZibk4wSUdsdWNIVjBUbUZ0WlhOUFptWnpaWFFnUFNCM1lYTnRMbk4wWVdOclFXeHNiMk1vYVc1d2RYUkRiM1Z1ZENBcUlEUXBPMXh1SUNCamIyNXpkQ0J2ZFhSd2RYUldZV3gxWlhOUFptWnpaWFFnUFNCM1lYTnRMbk4wWVdOclFXeHNiMk1vYjNWMGNIVjBRMjkxYm5RZ0tpQTBLVHRjYmlBZ1kyOXVjM1FnYjNWMGNIVjBUbUZ0WlhOUFptWnpaWFFnUFNCM1lYTnRMbk4wWVdOclFXeHNiMk1vYjNWMGNIVjBRMjkxYm5RZ0tpQTBLVHRjYmx4dUlDQjBjbmtnZTF4dUlDQWdJRnR5ZFc1UGNIUnBiMjV6U0dGdVpHeGxMQ0J5ZFc1UGNIUnBiMjV6UVd4c2IyTnpYU0E5SUhObGRGSjFiazl3ZEdsdmJuTW9iM0IwYVc5dWN5azdYRzVjYmlBZ0lDQXZMeUJqY21WaGRHVWdhVzV3ZFhRZ2RHVnVjMjl5YzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYVc1d2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J3Y21Wd1lYSmxTVzV3ZFhSUGRYUndkWFJVWlc1emIzSW9hVzV3ZFhSVVpXNXpiM0p6VzJsZExDQnBibkIxZEZSbGJuTnZja2hoYm1Sc1pYTXNJR2x1Y0hWMFQzVjBjSFYwUVd4c2IyTnpMQ0J6WlhOemFXOXVTV1FzSUdsdWNIVjBTVzVrYVdObGMxdHBYU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWTNKbFlYUmxJRzkxZEhCMWRDQjBaVzV6YjNKelhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCdmRYUndkWFJEYjNWdWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNCd2NtVndZWEpsU1c1d2RYUlBkWFJ3ZFhSVVpXNXpiM0lvWEc0Z0lDQWdJQ0FnSUNBZ2IzVjBjSFYwVkdWdWMyOXljMXRwWFN3Z2IzVjBjSFYwVkdWdWMyOXlTR0Z1Wkd4bGN5d2dhVzV3ZFhSUGRYUndkWFJCYkd4dlkzTXNJSE5sYzNOcGIyNUpaQ3dnYVc1d2RYUkRiM1Z1ZENBcklHOTFkSEIxZEVsdVpHbGpaWE5iYVYwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQnBibkIxZEZaaGJIVmxjMGx1WkdWNElEMGdhVzV3ZFhSV1lXeDFaWE5QWm1aelpYUWdMeUEwTzF4dUlDQWdJR3hsZENCcGJuQjFkRTVoYldWelNXNWtaWGdnUFNCcGJuQjFkRTVoYldWelQyWm1jMlYwSUM4Z05EdGNiaUFnSUNCc1pYUWdiM1YwY0hWMFZtRnNkV1Z6U1c1a1pYZ2dQU0J2ZFhSd2RYUldZV3gxWlhOUFptWnpaWFFnTHlBME8xeHVJQ0FnSUd4bGRDQnZkWFJ3ZFhST1lXMWxjMGx1WkdWNElEMGdiM1YwY0hWMFRtRnRaWE5QWm1aelpYUWdMeUEwTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYVc1d2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IzWVhOdExraEZRVkJWTXpKYmFXNXdkWFJXWVd4MVpYTkpibVJsZUNzclhTQTlJR2x1Y0hWMFZHVnVjMjl5U0dGdVpHeGxjMXRwWFR0Y2JpQWdJQ0FnSUhkaGMyMHVTRVZCVUZVek1sdHBibkIxZEU1aGJXVnpTVzVrWlhncksxMGdQU0JwYm5CMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldSYmFXNXdkWFJKYm1ScFkyVnpXMmxkWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J2ZFhSd2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IzWVhOdExraEZRVkJWTXpKYmIzVjBjSFYwVm1Gc2RXVnpTVzVrWlhncksxMGdQU0J2ZFhSd2RYUlVaVzV6YjNKSVlXNWtiR1Z6VzJsZE8xeHVJQ0FnSUNBZ2QyRnpiUzVJUlVGUVZUTXlXMjkxZEhCMWRFNWhiV1Z6U1c1a1pYZ3JLMTBnUFNCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtXMjkxZEhCMWRFbHVaR2xqWlhOYmFWMWRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2doUWxWSlRFUmZSRVZHVXk1RVNWTkJRa3hGWDFkRlFrZFFWU0FtSmlCcGIwSnBibVJwYm1kVGRHRjBaU2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdlMmhoYm1Sc1pTd2diM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1ekxDQnZkWFJ3ZFhSUWNtVm1aWEp5WldSTWIyTmhkR2x2Ym5ORmJtTnZaR1ZrZlNBOUlHbHZRbWx1WkdsdVoxTjBZWFJsTzF4dVhHNGdJQ0FnSUNCcFppQW9hVzV3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTG14bGJtZDBhQ0FoUFQwZ2FXNXdkWFJEYjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZR2x1Y0hWMElHTnZkVzUwSUdaeWIyMGdabVZsWkhNZ0tDUjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkRU52ZFc1MGZTa2dhWE1nWlhod1pXTjBaV1FnZEc4Z1ltVWdZV3gzWVhseklHVnhkV0ZzSUhSdklHMXZaR1ZzSjNNZ2FXNXdkWFFnWTI5MWJuUWdLQ1I3YVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xteGxibWQwYUgwcExtQXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCd2NtOWpaWE56SUdsdWNIVjBjMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JwYm5CMWRFTnZkVzUwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzVrWlhnZ1BTQnBibkIxZEVsdVpHbGpaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWeWNtOXlRMjlrWlNBOUlHRjNZV2wwSUhkaGMyMHVYMDl5ZEVKcGJtUkpibkIxZENob1lXNWtiR1VzSUdsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpGdHBibVJsZUYwc0lHbHVjSFYwVkdWdWMyOXlTR0Z1Wkd4bGMxdHBYU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2tOdlpHVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYUdWamEweGhjM1JGY25KdmNpaGdRMkZ1SjNRZ1ltbHVaQ0JwYm5CMWRGc2tlMmw5WFNCbWIzSWdjMlZ6YzJsdmJqMGtlM05sYzNOcGIyNUpaSDB1WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnY0hKdlkyVnpjeUJ3Y21VdFlXeHNiMk5oZEdWa0lHOTFkSEIxZEhOY2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2IzVjBjSFYwUTI5MWJuUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJtUmxlQ0E5SUc5MWRIQjFkRWx1WkdsalpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR3h2WTJGMGFXOXVJRDBnYjNWMGNIVjBWR1Z1YzI5eWMxdHBYVDh1V3pOZE95QWdMeThnZFc1a1pXWnBibVZrSUcxbFlXNXpJRzkxZEhCMWRDQnBjeUJ1YjNRZ2NISmxMV0ZzYkc5allYUmxaQzVjYmx4dUlDQWdJQ0FnSUNCcFppQW9iRzlqWVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QnZkWFJ3ZFhRZ2FYTWdjSEpsTFdGc2JHOWpZWFJsWkM0Z1ltbHVaQ0IwYUdVZ2RHVnVjMjl5TGx4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUdWeWNtOXlRMjlrWlNBOUlIZGhjMjB1WDA5eWRFSnBibVJQZFhSd2RYUW9hR0Z1Wkd4bExDQnZkWFJ3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrVzJsdVpHVjRYU3dnYjNWMGNIVjBWR1Z1YzI5eVNHRnVaR3hsYzF0cFhTd2dNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eVEyOWtaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJR0pwYm1RZ2NISmxMV0ZzYkc5allYUmxaQ0J2ZFhSd2RYUmJKSHRwZlYwZ1ptOXlJSE5sYzNOcGIyNDlKSHR6WlhOemFXOXVTV1I5TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QnZkWFJ3ZFhRZ2FYTWdibTkwSUhCeVpTMWhiR3h2WTJGMFpXUXVJSEpsYzJWMElIQnlaV1psY25KbFpDQnNiMk5oZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2tOdlpHVWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjNZWE50TGw5UGNuUkNhVzVrVDNWMGNIVjBLR2hoYm1Sc1pTd2diM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkZ0cGJtUmxlRjBzSURBc0lHOTFkSEIxZEZCeVpXWmxjbkpsWkV4dlkyRjBhVzl1YzBWdVkyOWtaV1JiYVc1a1pYaGRLVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aWEp5YjNKRGIyUmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWhnUTJGdUozUWdZbWx1WkNCdmRYUndkWFJiSkh0cGZWMGdkRzhnSkh0dmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk5iYVYxOUlHWnZjaUJ6WlhOemFXOXVQU1I3YzJWemMybHZia2xrZlM1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ1pYSnliM0pEYjJSbE9pQnVkVzFpWlhJN1hHNWNiaUFnSUNCcFppQW9JVUpWU1V4RVgwUkZSbE11UkVsVFFVSk1SVjlYUlVKSFVGVWdKaVlnYVc5Q2FXNWthVzVuVTNSaGRHVXBJSHRjYmlBZ0lDQWdJR1Z5Y205eVEyOWtaU0E5SUdGM1lXbDBJSGRoYzIwdVgwOXlkRkoxYmxkcGRHaENhVzVrYVc1bktGeHVJQ0FnSUNBZ0lDQWdJSE5sYzNOcGIyNUlZVzVrYkdVc0lHbHZRbWx1WkdsdVoxTjBZWFJsTG1oaGJtUnNaU3dnYjNWMGNIVjBRMjkxYm5Rc0lHOTFkSEIxZEZaaGJIVmxjMDltWm5ObGRDd2djblZ1VDNCMGFXOXVjMGhoYm1Sc1pTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWeWNtOXlRMjlrWlNBOUlHRjNZV2wwSUhkaGMyMHVYMDl5ZEZKMWJpaGNiaUFnSUNBZ0lDQWdJQ0J6WlhOemFXOXVTR0Z1Wkd4bExDQnBibkIxZEU1aGJXVnpUMlptYzJWMExDQnBibkIxZEZaaGJIVmxjMDltWm5ObGRDd2dhVzV3ZFhSRGIzVnVkQ3dnYjNWMGNIVjBUbUZ0WlhOUFptWnpaWFFzSUc5MWRIQjFkRU52ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRGWmhiSFZsYzA5bVpuTmxkQ3dnY25WdVQzQjBhVzl1YzBoaGJtUnNaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dWeWNtOXlRMjlrWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9KMlpoYVd4bFpDQjBieUJqWVd4c0lFOXlkRkoxYmlncExpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUc5MWRIQjFkRG9nVkdWdWMyOXlUV1YwWVdSaGRHRmJYU0E5SUZ0ZE8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnZkWFJ3ZFhSRGIzVnVkRHNnYVNzcktTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMFpXNXpiM0lnUFNCM1lYTnRMa2hGUVZCVk16SmJiM1YwY0hWMFZtRnNkV1Z6VDJabWMyVjBJQzhnTkNBcklHbGRPMXh1SUNBZ0lDQWdhV1lnS0hSbGJuTnZjaUE5UFQwZ2IzVjBjSFYwVkdWdWMyOXlTR0Z1Wkd4bGMxdHBYU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QnZkWFJ3ZFhRZ2RHVnVjMjl5SUdseklIQnlaUzFoYkd4dlkyRjBaV1F1SUc1dklHNWxaV1FnZEc4Z1kyOXdlU0JrWVhSaExseHVJQ0FnSUNBZ0lDQnZkWFJ3ZFhRdWNIVnphQ2h2ZFhSd2RYUlVaVzV6YjNKelcybGRJU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCamIyNXpkQ0JpWldadmNtVkhaWFJVWlc1emIzSkVZWFJoVTNSaFkyc2dQU0IzWVhOdExuTjBZV05yVTJGMlpTZ3BPMXh1SUNBZ0lDQWdMeThnYzNSaFkyc2dZV3hzYjJOaGRHVWdOQ0J3YjJsdWRHVnlJSFpoYkhWbFhHNGdJQ0FnSUNCamIyNXpkQ0IwWlc1emIzSkVZWFJoVDJabWMyVjBJRDBnZDJGemJTNXpkR0ZqYTBGc2JHOWpLRFFnS2lBMEtUdGNibHh1SUNBZ0lDQWdiR1YwSUd0bFpYQlBkWFJ3ZFhSVVpXNXpiM0lnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJR3hsZENCMGVYQmxPaUJVWlc1emIzSXVWSGx3Wlh4MWJtUmxabWx1WldRc0lHUmhkR0ZQWm1aelpYUWdQU0F3TzF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pYSnliM0pEYjJSbElEMGdkMkZ6YlM1ZlQzSjBSMlYwVkdWdWMyOXlSR0YwWVNoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYm5OdmNpd2dkR1Z1YzI5eVJHRjBZVTltWm5ObGRDd2dkR1Z1YzI5eVJHRjBZVTltWm5ObGRDQXJJRFFzSUhSbGJuTnZja1JoZEdGUFptWnpaWFFnS3lBNExDQjBaVzV6YjNKRVlYUmhUMlptYzJWMElDc2dNVElwTzF4dUlDQWdJQ0FnSUNCcFppQW9aWEp5YjNKRGIyUmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElHRmpZMlZ6Y3lCdmRYUndkWFFnZEdWdWMyOXlJR1JoZEdFZ2IyNGdhVzVrWlhnZ0pIdHBmUzVnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnNaWFFnZEdWdWMyOXlSR0YwWVVsdVpHVjRJRDBnZEdWdWMyOXlSR0YwWVU5bVpuTmxkQ0F2SURRN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSaGRHRlVlWEJsSUQwZ2QyRnpiUzVJUlVGUVZUTXlXM1JsYm5OdmNrUmhkR0ZKYm1SbGVDc3JYVHRjYmlBZ0lDQWdJQ0FnWkdGMFlVOW1abk5sZENBOUlIZGhjMjB1U0VWQlVGVXpNbHQwWlc1emIzSkVZWFJoU1c1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JwYlhOUFptWnpaWFFnUFNCM1lYTnRMa2hGUVZCVk16SmJkR1Z1YzI5eVJHRjBZVWx1WkdWNEt5dGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmthVzF6VEdWdVozUm9JRDBnZDJGemJTNUlSVUZRVlRNeVczUmxibk52Y2tSaGRHRkpibVJsZUNzclhUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHbHRjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR1JwYlhOTVpXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdScGJYTXVjSFZ6YUNoM1lYTnRMa2hGUVZCVk16SmJaR2x0YzA5bVpuTmxkQ0F2SURRZ0t5QnBYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2QyRnpiUzVmVDNKMFJuSmxaU2hrYVcxelQyWm1jMlYwS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemFYcGxJRDBnWkdsdGN5NXlaV1IxWTJVb0tHRXNJR0lwSUQwK0lHRWdLaUJpTENBeEtUdGNiaUFnSUNBZ0lDQWdkSGx3WlNBOUlIUmxibk52Y2tSaGRHRlVlWEJsUlc1MWJWUnZVM1J5YVc1bktHUmhkR0ZVZVhCbEtUdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQndjbVZtWlhKeVpXUk1iMk5oZEdsdmJpQTlJR2x2UW1sdVpHbHVaMU4wWVhSbFB5NXZkWFJ3ZFhSUWNtVm1aWEp5WldSTWIyTmhkR2x2Ym5OYmIzVjBjSFYwU1c1a2FXTmxjMXRwWFYwN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hCeVpXWmxjbkpsWkV4dlkyRjBhVzl1SUQwOVBTQW5aM0IxTFdKMVptWmxjaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VM1J5YVc1bklIUmxibk52Y2lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSUc5dUlFZFFWUzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjM1J5YVc1blJHRjBZVG9nYzNSeWFXNW5XMTBnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZVWx1WkdWNElEMGdaR0YwWVU5bVpuTmxkQ0F2SURRN1hHNGdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J6YVhwbE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHOW1abk5sZENBOUlIZGhjMjB1U0VWQlVGVXpNbHRrWVhSaFNXNWtaWGdySzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWGhDZVhSbGMxUnZVbVZoWkNBOUlHa2dQVDA5SUhOcGVtVWdMU0F4SUQ4Z2RXNWtaV1pwYm1Wa0lEb2dkMkZ6YlM1SVJVRlFWVE15VzJSaGRHRkpibVJsZUYwZ0xTQnZabVp6WlhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKcGJtZEVZWFJoTG5CMWMyZ29kMkZ6YlM1VlZFWTRWRzlUZEhKcGJtY29iMlptYzJWMExDQnRZWGhDZVhSbGMxUnZVbVZoWkNrcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCdmRYUndkWFF1Y0hWemFDaGJkSGx3WlN3Z1pHbHRjeXdnYzNSeWFXNW5SR0YwWVN3Z0oyTndkU2RkS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCaElHTmxjblJoYVc0Z2IzVjBjSFYwSjNNZ2NISmxabVZ5Y21Wa0lHeHZZMkYwYVc5dUlHbHpJRWRRVlNCaWRYUWdkR2hsSUhSbGJuTnZjaUJwY3lCbGJYQjBlU3dnZDJVZ2MzUnBiR3dnYm1WbFpDQjBieUJqY21WaGRHVWdZU0JEVUZWY2JpQWdJQ0FnSUNBZ0lDQXZMeUIwWlc1emIzSWdabTl5SUdsMExpQlVhR1Z5WlNCcGN5QnVieUJ0WVhCd2FXNW5JRWRRVlNCaWRXWm1aWElnWm05eUlHRnVJR1Z0Y0hSNUlIUmxibk52Y2k1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKbFptVnljbVZrVEc5allYUnBiMjRnUFQwOUlDZG5jSFV0WW5WbVptVnlKeUFtSmlCemFYcGxJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaM0IxUW5WbVptVnlJRDBnZDJGemJTNXFjMlZ3UjJWMFFuVm1abVZ5S0dSaGRHRlBabVp6WlhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaV3hsYldWdWRGTnBlbVVnUFNCblpYUlVaVzV6YjNKRmJHVnRaVzUwVTJsNlpTaGtZWFJoVkhsd1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aV3hsYldWdWRGTnBlbVVnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0FoYVhOSGNIVkNkV1ptWlhKVGRYQndiM0owWldSVWVYQmxLSFI1Y0dVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1ZXNXpkWEJ3YjNKMFpXUWdaR0YwWVNCMGVYQmxPaUFrZTNSNWNHVjlZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1J2SUc1dmRDQnlaV3hsWVhObElIUm9aU0IwWlc1emIzSWdjbWxuYUhRZ2JtOTNMaUJwZENCM2FXeHNJR0psSUhKbGJHVmhjMlZrSUhkb1pXNGdkWE5sY2lCallXeHNjeUIwWlc1emIzSXVaR2x6Y0c5elpTZ3BMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVmxjRTkxZEhCMWRGUmxibk52Y2lBOUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRDNXdkWE5vS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pTd2daR2x0Y3l3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHdkVUoxWm1abGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtiM2R1Ykc5aFpEb2dkMkZ6YlM1cWMyVndRM0psWVhSbFJHOTNibXh2WVdSbGNpaG5jSFZDZFdabVpYSXNJSE5wZW1VZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnZEhsd1pTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x6Y0c5elpUb2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMkZ6YlM1ZlQzSjBVbVZzWldGelpWUmxibk52Y2loMFpXNXpiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJkd2RTMWlkV1ptWlhJblhHNGdJQ0FnSUNBZ0lDQWdJQ0JkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkSGx3WldSQmNuSmhlVU52Ym5OMGNuVmpkRzl5SUQwZ2RHVnVjMjl5Vkhsd1pWUnZWSGx3WldSQmNuSmhlVU52Ym5OMGNuVmpkRzl5S0hSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdGMFlTQTlJRzVsZHlCMGVYQmxaRUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSW9jMmw2WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1ZXbHVkRGhCY25KaGVTaGtZWFJoTG1KMVptWmxjaXdnWkdGMFlTNWllWFJsVDJabWMyVjBMQ0JrWVhSaExtSjVkR1ZNWlc1bmRHZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbk5sZENoM1lYTnRMa2hGUVZCVk9DNXpkV0poY25KaGVTaGtZWFJoVDJabWMyVjBMQ0JrWVhSaFQyWm1jMlYwSUNzZ1pHRjBZUzVpZVhSbFRHVnVaM1JvS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUXVjSFZ6YUNoYmRIbHdaU3dnWkdsdGN5d2daR0YwWVN3Z0oyTndkU2RkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUhkaGMyMHVjM1JoWTJ0U1pYTjBiM0psS0dKbFptOXlaVWRsZEZSbGJuTnZja1JoZEdGVGRHRmpheWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJrWVhSaFQyWm1jMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkMkZ6YlM1ZlpuSmxaU2hrWVhSaFQyWm1jMlYwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVd0bFpYQlBkWFJ3ZFhSVVpXNXpiM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjNZWE50TGw5UGNuUlNaV3hsWVhObFZHVnVjMjl5S0hSbGJuTnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FXOUNhVzVrYVc1blUzUmhkR1VwSUh0Y2JpQWdJQ0FnSUhkaGMyMHVYMDl5ZEVOc1pXRnlRbTkxYm1SUGRYUndkWFJ6S0dsdlFtbHVaR2x1WjFOMFlYUmxMbWhoYm1Sc1pTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc5MWRIQjFkRHRjYmlBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNCM1lYTnRMbk4wWVdOclVtVnpkRzl5WlNoaVpXWnZjbVZTZFc1VGRHRmpheWs3WEc1Y2JpQWdJQ0JwYm5CMWRGUmxibk52Y2toaGJtUnNaWE11Wm05eVJXRmphQ2gySUQwK0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVVpXNXpiM0lvZGlrcE8xeHVJQ0FnSUc5MWRIQjFkRlJsYm5OdmNraGhibVJzWlhNdVptOXlSV0ZqYUNoMklEMCtJSGRoYzIwdVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJb2Rpa3BPMXh1SUNBZ0lHbHVjSFYwVDNWMGNIVjBRV3hzYjJOekxtWnZja1ZoWTJnb2NDQTlQaUIzWVhOdExsOW1jbVZsS0hBcEtUdGNibHh1SUNBZ0lHbG1JQ2h5ZFc1UGNIUnBiMjV6U0dGdVpHeGxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjNZWE50TGw5UGNuUlNaV3hsWVhObFVuVnVUM0IwYVc5dWN5aHlkVzVQY0hScGIyNXpTR0Z1Wkd4bEtUdGNiaUFnSUNCOVhHNGdJQ0FnY25WdVQzQjBhVzl1YzBGc2JHOWpjeTVtYjNKRllXTm9LSEFnUFQ0Z2QyRnpiUzVmWm5KbFpTaHdLU2s3WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1pXNWtJSEJ5YjJacGJHbHVaMXh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnWlc1a1VISnZabWxzYVc1bklEMGdLSE5sYzNOcGIyNUpaRG9nYm5WdFltVnlLVG9nZG05cFpDQTlQaUI3WEc0Z0lHTnZibk4wSUhkaGMyMGdQU0JuWlhSSmJuTjBZVzVqWlNncE8xeHVJQ0JqYjI1emRDQnpaWE56YVc5dUlEMGdZV04wYVhabFUyVnpjMmx2Ym5NdVoyVjBLSE5sYzNOcGIyNUpaQ2s3WEc0Z0lHbG1JQ2doYzJWemMybHZiaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25hVzUyWVd4cFpDQnpaWE56YVc5dUlHbGtKeWs3WEc0Z0lIMWNiaUFnWTI5dWMzUWdjMlZ6YzJsdmJraGhibVJzWlNBOUlITmxjM05wYjI1Yk1GMDdYRzVjYmlBZ0x5OGdjSEp2Wm1sc1pTQm1hV3hsSUc1aGJXVWdhWE1nYm05MElIVnpaV1FnZVdWMExDQmlkWFFnYVhRZ2JYVnpkQ0JpWlNCbWNtVmxaQzVjYmlBZ1kyOXVjM1FnY0hKdlptbHNaVVpwYkdWT1lXMWxJRDBnZDJGemJTNWZUM0owUlc1a1VISnZabWxzYVc1bktITmxjM05wYjI1SVlXNWtiR1VwTzF4dUlDQnBaaUFvY0hKdlptbHNaVVpwYkdWT1lXMWxJRDA5UFNBd0tTQjdYRzRnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvSjBOaGJseGNKM1FnWjJWMElHRnVJSEJ5YjJacGJHVWdabWxzWlNCdVlXMWxMaWNwTzF4dUlDQjlYRzRnSUhkaGMyMHVYMDl5ZEVaeVpXVW9jSEp2Wm1sc1pVWnBiR1ZPWVcxbEtUdGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JsZUhSeVlXTjBWSEpoYm5ObVpYSmhZbXhsUW5WbVptVnljeUE5SUNoMFpXNXpiM0p6T2lCeVpXRmtiMjVzZVNCVFpYSnBZV3hwZW1GaWJHVlVaVzV6YjNKTlpYUmhaR0YwWVZ0ZEtUb2dRWEp5WVhsQ2RXWm1aWEpNYVd0bFcxMGdQVDRnZTF4dUlDQmpiMjV6ZENCaWRXWm1aWEp6T2lCQmNuSmhlVUoxWm1abGNreHBhMlZiWFNBOUlGdGRPMXh1SUNCbWIzSWdLR052Ym5OMElIUmxibk52Y2lCdlppQjBaVzV6YjNKektTQjdYRzRnSUNBZ1kyOXVjM1FnWkdGMFlTQTlJSFJsYm5OdmNsc3lYVHRjYmlBZ0lDQnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29aR0YwWVNrZ0ppWWdKMkoxWm1abGNpY2dhVzRnWkdGMFlTa2dlMXh1SUNBZ0lDQWdZblZtWm1WeWN5NXdkWE5vS0dSaGRHRXVZblZtWm1WeUtUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdKMVptWmxjbk03WEc1OU8xeHVJaXdnSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnVFdsamNtOXpiMlowSUVOdmNuQnZjbUYwYVc5dUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFMUpWQ0JNYVdObGJuTmxMbHh1WEc0dkx5OGdQSEpsWm1WeVpXNWpaU0JzYVdJOVhDSjNaV0ozYjNKclpYSmNJaUF2UGx4dVhHNHZMMXh1THk4Z0tpQjBlWEJsSUdoaFkyc2dabTl5SUZ3aVNGUk5URWx0WVdkbFJXeGxiV1Z1ZEZ3aVhHNHZMMXh1THk4Z2FXNGdkSGx3WlhOamNtbHdkQ3dnZEdobElIUjVjR1VnYjJZZ1hDSklWRTFNU1cxaFoyVkZiR1Z0Wlc1MFhDSWdhWE1nWkdWbWFXNWxaQ0JwYmlCc2FXSXVaRzl0TG1RdWRITXNJSGRvYVdOb0lHbHpJR052Ym1ac2FXTjBJSGRwZEdnZ2JHbGlMbmRsWW5kdmNtdGxjaTVrTG5SekxseHVMeThnZDJobGJpQjNaU0IxYzJVZ2QyVmlkMjl5YTJWeUxDQjBhR1VnYkdsaUxuZGxZbmR2Y210bGNpNWtMblJ6SUhkcGJHd2dZbVVnZFhObFpDd2dkMmhwWTJnZ1pHOWxjeUJ1YjNRZ2FHRjJaU0JJVkUxTVNXMWhaMlZGYkdWdFpXNTBJR1JsWm1sdVpXUXVYRzR2TDF4dUx5OGdkMlVnZDJsc2JDQm5aWFFnZEdobElHWnZiR3h2ZDJsdVp5Qmxjbkp2Y25NZ1kyOXRjR3hoYVc1cGJtY2dkR2hoZENCSVZFMU1TVzFoWjJWRmJHVnRaVzUwSUdseklHNXZkQ0JrWldacGJtVmtPbHh1THk5Y2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzR2TDF4dUx5OGdMaTR2WTI5dGJXOXVMMlJwYzNRdlkycHpMM1JsYm5OdmNpMW1ZV04wYjNKNUxtUXVkSE02TVRnM09qSTVJQzBnWlhKeWIzSWdWRk15TlRVeU9pQkRZVzV1YjNRZ1ptbHVaQ0J1WVcxbElDZElWRTFNU1cxaFoyVkZiR1Z0Wlc1MEp5NGdSR2xrSUhsdmRTQnRaV0Z1WEc0dkx5QW5TRlJOVEV4SlJXeGxiV1Z1ZENjL1hHNHZMMXh1THk4Z01UZzNJQ0FnSUNCbWNtOXRTVzFoWjJVb2FXMWhaMlZGYkdWdFpXNTBPaUJJVkUxTVNXMWhaMlZGYkdWdFpXNTBMQ0J2Y0hScGIyNXpQem9nVkdWdWMyOXlSbkp2YlVsdFlXZGxSV3hsYldWdWRFOXdkR2x2Ym5NcE9seHVMeThnVUhKdmJXbHpaVHhVZVhCbFpGUmxibk52Y2p3blpteHZZWFF6TWljK0lId2dWSGx3WldSVVpXNXpiM0k4SjNWcGJuUTRKejQrTzF4dUx5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCK2ZuNStmbjUrZm41K2ZuNStmbjUrWEc0dkwxeHVMeThnYm05a1pWOXRiMlIxYkdWekwwQjNaV0puY0hVdmRIbHdaWE12WkdsemRDOXBibVJsZUM1a0xuUnpPamd6T2pjZ0xTQmxjbkp2Y2lCVVV6STFOVEk2SUVOaGJtNXZkQ0JtYVc1a0lHNWhiV1VnSjBoVVRVeEpiV0ZuWlVWc1pXMWxiblFuTGlCRWFXUWdlVzkxSUcxbFlXNWNiaTh2SUNkSVZFMU1URWxGYkdWdFpXNTBKejljYmk4dlhHNHZMeUE0TXlBZ0lDQWdmQ0JJVkUxTVNXMWhaMlZGYkdWdFpXNTBYRzR2THlBZ0lDQWdJQ0FnSUNCK2ZuNStmbjUrZm41K2ZuNStmbjUrWEc0dkwxeHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmk4dlhHNHZMeUJnU0ZSTlRFbHRZV2RsUld4bGJXVnVkR0FnYVhNZ2IyNXNlU0IxYzJWa0lHbHVJSFI1Y0dVZ1pHVmpiR0Z5WVhScGIyNGdZVzVrSUc1dmRDQnBiaUJ5WldGc0lHTnZaR1V1SUZOdklIZGxJR1JsWm1sdVpTQnBkQ0JoY3lCZ2RXNXJibTkzYm1BZ2FHVnlaU0IwYjF4dUx5OGdZbmx3WVhOeklIUm9aU0IwZVhCbElHTm9aV05yTGx4dUx5OWNibVJsWTJ4aGNtVWdaMnh2WW1Gc0lIdGNiaUFnZEhsd1pTQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MElEMGdkVzVyYm05M2JqdGNibjFjYmx4dWFXMXdiM0owSUh0UGNuUlhZWE50VFdWemMyRm5aU3dnVTJWeWFXRnNhWHBoWW14bFZHVnVjMjl5VFdWMFlXUmhkR0Y5SUdaeWIyMGdKeTR1TDNCeWIzaDVMVzFsYzNOaFoyVnpKenRjYm1sdGNHOXlkQ0I3WTNKbFlYUmxVMlZ6YzJsdmJpd2dZM0psWVhSbFUyVnpjMmx2YmtGc2JHOWpZWFJsTENCamNtVmhkR1ZUWlhOemFXOXVSbWx1WVd4cGVtVXNJR1Z1WkZCeWIyWnBiR2x1Wnl3Z1pYaDBjbUZqZEZSeVlXNXpabVZ5WVdKc1pVSjFabVpsY25Nc0lHbHVhWFJTZFc1MGFXMWxMQ0JwYzA5eWRFVnVka2x1YVhScFlXeHBlbVZrTENCeVpXeGxZWE5sVTJWemMybHZiaXdnY25WdWZTQm1jbTl0SUNjdUxpOTNZWE50TFdOdmNtVXRhVzF3YkNjN1hHNXBiWEJ2Y25RZ2UybHVhWFJwWVd4cGVtVlhaV0pCYzNObGJXSnNlWDBnWm5KdmJTQW5MaTR2ZDJGemJTMW1ZV04wYjNKNUp6dGNibHh1YzJWc1ppNXZibTFsYzNOaFoyVWdQU0FvWlhZNklFMWxjM05oWjJWRmRtVnVkRHhQY25SWFlYTnRUV1Z6YzJGblpUNHBPaUIyYjJsa0lEMCtJSHRjYmlBZ2MzZHBkR05vSUNobGRpNWtZWFJoTG5SNWNHVXBJSHRjYmlBZ0lDQmpZWE5sSUNkcGJtbDBMWGRoYzIwbk9seHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnYVc1cGRHbGhiR2w2WlZkbFlrRnpjMlZ0WW14NUtHVjJMbVJoZEdFdWFXNGhLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xuUm9aVzRvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVTZJQ2RwYm1sMExYZGhjMjBuZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnlJRDArSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmFXNXBkQzEzWVhOdEp5d2daWEp5ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmFXNXBkQzEzWVhOdEp5d2daWEp5ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkcGJtbDBMVzl5ZENjNlhHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JwYm1sMFVuVnVkR2x0WlNobGRpNWtZWFJoTG1sdUlTa3VkR2hsYmlnb0tTQTlQaUJ3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJsdWFYUXRiM0owSjMwZ1lYTWdUM0owVjJGemJVMWxjM05oWjJVcExDQmxjbklnUFQ0Z2NHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHBibWwwTFc5eWRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWVhNZ1QzSjBWMkZ6YlUxbGMzTmhaMlVwS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJsdWFYUXRiM0owSnl3Z1pYSnlmU0JoY3lCUGNuUlhZWE50VFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCallYTmxJQ2RqY21WaGRHVmZZV3hzYjJOaGRHVW5PbHh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZTIxdlpHVnNmU0E5SUdWMkxtUmhkR0V1YVc0aE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIyUmxiR1JoZEdFZ1BTQmpjbVZoZEdWVFpYTnphVzl1UVd4c2IyTmhkR1VvYlc5a1pXd3BPMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJOeVpXRjBaVjloYkd4dlkyRjBaU2NzSUc5MWREb2diVzlrWld4a1lYUmhmU0JoY3lCUGNuUlhZWE50VFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVTZJQ2RqY21WaGRHVmZZV3hzYjJOaGRHVW5MQ0JsY25KOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oyTnlaV0YwWlY5bWFXNWhiR2w2WlNjNlhHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdiVzlrWld4a1lYUmhMQ0J2Y0hScGIyNXpmU0E5SUdWMkxtUmhkR0V1YVc0aE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpYTnphVzl1VFdWMFlXUmhkR0VnUFNCamNtVmhkR1ZUWlhOemFXOXVSbWx1WVd4cGVtVW9iVzlrWld4a1lYUmhMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1U2SUNkamNtVmhkR1ZmWm1sdVlXeHBlbVVuTENCdmRYUTZJSE5sYzNOcGIyNU5aWFJoWkdGMFlYMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5ZM0psWVhSbFgyWnBibUZzYVhwbEp5d2daWEp5ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkamNtVmhkR1VuT2x4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2UyMXZaR1ZzTENCdmNIUnBiMjV6ZlNBOUlHVjJMbVJoZEdFdWFXNGhPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpaWE56YVc5dVRXVjBZV1JoZEdFZ1BTQmpjbVZoZEdWVFpYTnphVzl1S0cxdlpHVnNMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1U2SUNkamNtVmhkR1VuTENCdmRYUTZJSE5sYzNOcGIyNU5aWFJoWkdGMFlYMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5ZM0psWVhSbEp5d2daWEp5ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkeVpXeGxZWE5sSnpwY2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJSEpsYkdWaGMyVlRaWE56YVc5dUtHVjJMbVJoZEdFdWFXNGhLVHRjYmlBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1U2SUNkeVpXeGxZWE5sSjMwZ1lYTWdUM0owVjJGemJVMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmNtVnNaV0Z6WlNjc0lHVnljbjBnWVhNZ1QzSjBWMkZ6YlUxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ1kyRnpaU0FuY25WdUp6cGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHR6WlhOemFXOXVTV1FzSUdsdWNIVjBTVzVrYVdObGN5d2dhVzV3ZFhSekxDQnZkWFJ3ZFhSSmJtUnBZMlZ6TENCdmNIUnBiMjV6ZlNBOUlHVjJMbVJoZEdFdWFXNGhPMXh1SUNBZ0lDQWdJQ0J5ZFc0b2MyVnpjMmx2Ymtsa0xDQnBibkIxZEVsdVpHbGpaWE1zSUdsdWNIVjBjeXdnYjNWMGNIVjBTVzVrYVdObGN5d2dibVYzSUVGeWNtRjVLRzkxZEhCMWRFbHVaR2xqWlhNdWJHVnVaM1JvS1M1bWFXeHNLRzUxYkd3cExDQnZjSFJwYjI1ektWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1YwY0hWMGN5QTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM1YwY0hWMGN5NXpiMjFsS0c4Z1BUNGdiMXN6WFNBaFBUMGdKMk53ZFNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmNuVnVKeXdnWlhKeU9pQW5VSEp2ZUhrZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCdWIyNHRZM0IxSUhSbGJuTnZjaUJzYjJOaGRHbHZiaTRuZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MGVYQmxPaUFuY25WdUp5d2diM1YwT2lCdmRYUndkWFJ6ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGRISmhZM1JVY21GdWMyWmxjbUZpYkdWQ2RXWm1aWEp6S0c5MWRIQjFkSE1nWVhNZ1UyVnlhV0ZzYVhwaFlteGxWR1Z1YzI5eVRXVjBZV1JoZEdGYlhTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnlJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5jblZ1Snl3Z1pYSnlmU0JoY3lCUGNuUlhZWE50VFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1U2SUNkeWRXNG5MQ0JsY25KOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oyVnVaQzF3Y205bWFXeHBibWNuT2x4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FHRnVaR3hsY2lBOUlHVjJMbVJoZEdFdWFXNGhPMXh1SUNBZ0lDQWdJQ0JsYm1SUWNtOW1hV3hwYm1jb2FHRnVaR3hsY2lrN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5aVzVrTFhCeWIyWnBiR2x1WnlkOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNCd2IzTjBUV1Z6YzJGblpTaDdkSGx3WlRvZ0oyVnVaQzF3Y205bWFXeHBibWNuTENCbGNuSjlJR0Z6SUU5eWRGZGhjMjFOWlhOellXZGxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdOaGMyVWdKMmx6TFc5eWRDMWxibll0YVc1cGRHbGhiR2w2WldRbk9seHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM0owUlc1MlNXNXBkR2xoYkdsNlpXUWdQU0JwYzA5eWRFVnVka2x1YVhScFlXeHBlbVZrS0NrN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5hWE10YjNKMExXVnVkaTFwYm1sMGFXRnNhWHBsWkNjc0lHOTFkRG9nYjNKMFJXNTJTVzVwZEdsaGJHbDZaV1I5SUdGeklFOXlkRmRoYzIxTlpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJsekxXOXlkQzFsYm5ZdGFXNXBkR2xoYkdsNlpXUW5MQ0JsY25KOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUgxY2JuMDdYRzRpWFN3S0lDQWliV0Z3Y0dsdVozTWlPaUFpT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1RVRkJZVHRCUVVGaU8wRkJRVUU3UVVGQlR5eE5RVUZOTEZkQlFWYzdRVUZCUVR0QlFVRkJPenM3UVVOQmVFSTdRVUZCUVR0QlFVRkJMR2RDUVVGQlFUdEJRVUZCTzBGQlFVRXNUVUZCWVVFN1FVRkJZanRCUVVGQk8wRkJRVThzVFVGQlRVRXNVVUZCVHp0QlFVRkJPMEZCUVVFN096dEJRMEZ3UWp0QlFVRkJPMEZCUVVFN1FVRkRRU3hWUVVGSkxGZEJRVmNzVFVGQlRUdEJRVU51UWl4WlFVRkpMR0ZCUVdFc1QwRkJUeXhoUVVGaExHVkJRV1VzVTBGQlV5eG5Ra0ZCWjBJc1UwRkJVeXhqUVVGakxFMUJRVTA3UVVGRE1VY3NXVUZCU1N4UFFVRlBMR1ZCUVdVN1FVRkJZU3gxUWtGQllTeGpRVUZqTzBGQlEyeEZMR1ZCUTBZc1UwRkJVeXhaUVVGWkxFTkJRVU1zUjBGQlJ6dEJRVVY2UWl4alFVRkpMRWxCUVVVc1YwRkJWU3hIUVVGRk8wRkJRVVVzV1VGQlJTeFJRVUZOTEVsQlFVa3NVVUZCVVN4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHZENRVUZGTzBGQlFVVXNaMEpCUVVVN1FVRkJRU3hWUVVGRExFTkJRVU03UVVGQlJTeGpRVUZKTEVsQlFVVXNUMEZCVHl4UFFVRlBMRU5CUVVNc1IwRkJSU3hEUVVGRExFZEJRVVVzU1VGQlJTeHJRa0ZCYVVJc1MwRkJSeXhaUVVGVkxFOUJRVThzVVVGQlR5eEpRVUZGTEdOQlFWa3NUMEZCVHl4bFFVRmpMRXRCUVVjc1dVRkJWU3hQUVVGUExGZEJRVk1zV1VGQlZTeFBRVUZQTEZGQlFWRXNXVUZCVlN4WlFVRlZMRTlCUVU4c1VVRkJVU3hUUVVGVExFMUJRVXNzU1VGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlR0QlFVTnlVaXhqUVVGSExFbEJRVWM3UVVGQlF5eG5Ra0ZCU1N4TFFVRkhMSFZEUVVGakxFbEJRVVU3UVVGQlowSXNaMEpCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZGTEUxQlFVa3NXVUZCVlR0QlFVRkpMR2RDUVVGRkxFTkJRVU1zUjBGQlJTeE5RVUZKTzBGQlFVTXNhMEpCUVVVc1JVRkJSU3hYUVVGWExGTkJRVk1zU1VGQlJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1ZVRkJWU3hEUVVGRE8wRkJRVVVzY1VKQlFVOHNSMEZCUnl4aFFVRmhMRWRCUVVVc1NVRkJSU3hUUVVGUExFMUJRVTA3UVVGQlFTeFpRVUZETzBGQlFVVXNaMEpCUVVVc1QwRkJSenRCUVVGRExHdENRVUZGTEVWQlFVVXNSMEZCUlN4SlFVRkZPMEZCUVVVc1owSkJRVVVzVjBGQlV5eEpRVUZGTEVsQlFVa3NWMEZCVnl4RFFVRkRPMEZCUVVjc2NVSkJRVTg3UVVGQlFTeFpRVUZETzBGQlFVVXNaMEpCUVVVc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEpRVUZGTEZOQlFVczdRVUZCUXl4clFrRkJSU3hGUVVGRkxGZEJRVmNzVTBGQlV5eEpRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hWUVVGVkxFTkJRVU03UVVGQlJTeHBRa0ZCUnl4VFFVRlRMRWRCUVVVc1NVRkJSU3hUUVVGUExGRkJRVThzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4dlFrRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlJTeEZRVUZGTEVsQlFVVXNSVUZCUlN4VFFVRlBMRU5CUVVNN1FVRkJRU3hqUVVGRExFTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVVXNZVUZCUXl4RlFVRkZMR1ZCUVdFc1NVRkJSU3hSUVVGUkxFdEJRVXNzVjBGQlV5eEpRVUZGTEZGQlFWRXNTMEZCU3l4RFFVRkRMRVZCUVVVc1VVRkJVU3hQUVVGTkxFZEJRVWM3UVVGQlJ5eHZRa0ZCVVN4TFFVRkxMRTFCUVUwc1EwRkJRenRCUVVGRkxHTkJRVVVzVlVGQlVTeE5RVUZKTzBGQlFVRXNWVUZCTkVJc1YwRkJVeXhOUVVOb2FFSTdRVUZCUlN4blFrRkJSU3hKUVVGRkxFdEJRVXNzVTBGQlV5eFBRVUZMTEdWQlFXRXNUMEZCVHl4WlFVRlZMRk5CUVZNc2EwSkJRV2RDTEVsQlFVVXNVMEZCVXl4alFVRmpMRTFCUVVzc1pVRkJZU3hKUVVGRkxHRkJRVmtzVFVGQlNTeEZRVUZGTEZGQlFWRXNUMEZCVHl4SlFVRkZMRWxCUVVVc1JVRkJSU3hQUVVGUExFZEJRVVVzUlVGQlJTeFJRVUZSTEZWQlFWTXNSVUZCUlN4RlFVRkZMRmxCUVZrc1IwRkJSeXhKUVVGRkxFTkJRVU1zU1VGQlJTeEpRVUZGTEVsQlFVY3NTVUZCUlN4UFFVRkhPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEpRVUZKTzBGQlFXVXNaMEpCUVVVc1MwRkJTeXhQUVVGTkxFZEJRVVVzUzBGQlJUdEJRVUZGTEdkQ1FVRkZMRXRCUVVzc1NVRkJTVHRCUVVGRkxIRkNRVUZQTEVWQlFVVTdRVUZCUVN4WlFVRlpMRWRCUVVVc1RVRkJTU3hKUVVGRkxFOUJRVWM3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRWxCUVVrN1FVRkJaU3huUWtGQlJTeExRVUZMTEU5QlFVMHNSMEZCUlN4TFFVRkZPMEZCUVVVc1owSkJRVVVzWlVGQllUdEJRVUZqTEdkQ1FVRkZMRXRCUVVzc1NVRkJTVHRCUVVGRkxIRkNRVUZQTEVsQlFVa3NWMEZCVnl4RlFVRkZMRkZCUVZFN1FVRkJRU3haUVVGRExFbEJRVWNzU1VGQlJTeERRVUZETEVkQlFVVXNSMEZCUlN4TlFVRkpPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEpRVUZKTzBGQlFXVXNaMEpCUVVVc1MwRkJTeXhQUVVGTkxFZEJRVVVzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMR1ZCUTJwbU8wRkJRV01zWjBKQlFVVXNVMEZCVHl4TlFVRkpPMEZCUVVNc2RVSkJRVXNzUlVGQlJTeFZRVUZSTEV0QlFVY3NSVUZCUlN4VlFVRlJMRVZCUVVVc1YwRkJVeXhGUVVGRkxFVkJRVVVzVVVGQlVTeEpRVUZGTEVWQlFVVTdRVUZCUVN4alFVRkRPMEZCUVVVc1owSkJRVVVzVlVGQlVUdEJRVUZGTEdkQ1FVRkZMRXRCUVVzc1NVRkJTVHRCUVVGQkxGbEJRVU03UVVGQlJTeGpRVUZKTEV0QlFVY3NSVUZCUlN4VFFVRlBMRkZCUVZFc1NVRkJTU3hMUVVGTExFOUJRVThzUjBGQlJTeEpRVUZGTEVWQlFVVXNXVUZCVlN4UlFVRlJMRTFCUVUwc1MwRkJTeXhQUVVGUE8wRkJRVVVzYVVKQlFVOHNUMEZCVHl4SFFVRkZMRU5CUVVNN1FVRkJSU3hqUVVGRk8wRkJRVXNzV1VGQlJTeG5Ra0ZCWXl4SlFVRkZMRVZCUVVVN1FVRkJZU3hqUVVGSk8wRkJRVVVzV1VGQlJTeGxRVUZoTEVsQlFVVXNSVUZCUlR0QlFVRlpMR05CUVVrc1owSkJRV01zUlVGQlJTeHBRa0ZCWlR0QlFVRkhMSE5DUVVGVkxFOUJRVThzWlVGQllTeEZRVUZGTEdsRFFVRnBRenRCUVVGRkxHTkJRVWtzUjBGQlJTeEhRVUZGTEV0QlFVY3NUMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVOcVlTeHRRa0ZCVXl4TFFVRkpPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEZRVUZGTzBGQlFVOHNZMEZCUlN4UlFVRk5MRWxCUVVVc1NVRkJTU3hWUVVGVkxFTkJRVU03UVVGQlJTeGpRVUZGTEZOQlFVOHNTVUZCU1N4WFFVRlhMRU5CUVVNN1FVRkJSU3hqUVVGRkxGTkJRVThzU1VGQlJTeEpRVUZKTEZkQlFWY3NRMEZCUXp0QlFVRkZMR05CUVVVc1UwRkJUeXhKUVVGRkxFbEJRVWtzVjBGQlZ5eERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRWxCUVVrc1dVRkJXU3hEUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEVsQlFVVXNTVUZCU1N4WlFVRlpMRU5CUVVNN1FVRkJSU3hqUVVGRkxGVkJRVkVzU1VGQlNTeGhRVUZoTEVOQlFVTTdRVUZCUlN4alFVRkZMRlZCUVZFc1NVRkJTU3hoUVVGaExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTTdRVUZCUlN4dFFrRkJVeXhMUVVGSk8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZMRTlCUVU4c1RVRkJUVHRCUVVGRkxHVkJRVWNzVVVGQlVTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMR05CUVVrc1NVRkJSU3hIUVVGRkxFbEJRVVVzVFVGQlN5eEpRVUZGTzBGQlF5OVdMRzFDUVVGVExFVkJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhMRVZCUVVVN1FVRkJVU3huUWtGQlJTeFJRVUZSTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hoUVVGWExFbEJRVVU3UVVGQlNTeGpRVUZGTEVOQlFVTTdRVUZCUlN4cFFrRkJSenRCUVVGSExHZENRVUZGTEVsQlFVa3NXVUZCV1N4aFFVRmhMRWxCUVVVc01FTkJRVEJETzBGQlFVVXNZMEZCUlN4RFFVRkRPMEZCUVVVc2EwSkJRVTA3UVVGQlFTeFZRVUZGTzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zYlVKQlFVOHNSVUZCUlN4WFFVRlhMSFZEUVVGMVF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4alFVRkpPMEZCUVVVc1kwRkJSVHRCUVVFNFFpeGpRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVVN1FVRkJReXhuUWtGQlNTeExRVUZITzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hoUVVGWExFVkJRVVVzVjBGQlZ5eEpRVUZITEVOQlFVTXNTVUZCUlN4SlFVRkZPMEZCUVVFc1ZVRkJSVHRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlR0QlFVRkRMR2RDUVVGSExFdEJRVWNzUzBGQlJ6dEJRVUZGTEhGQ1FVRlBMRWxCUVVrc1YwRkJWeXhEUVVGRE8wRkJRVVVzWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCU3p0QlFVRkJMRlZCUVd0RU8wRkJRM3BqTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZITEVOQlFVTXNUVUZCU1N4TlFVRkpMRWxCUVVjN1FVRkJReXhyUWtGQlJ5eGpRVUZaTEU5QlFVOHNVMEZCVHl4RFFVRkRMRVZCUVVVc1YwRkJWeXhUUVVGVE8wRkJRVVVzZFVKQlFVOHNUVUZCVFN4SFFVRkZMRVZCUVVNc1lVRkJXU3hqUVVGaExFTkJRVU1zUlVGQlJTeExRVUZMTEU5QlFVYzdRVUZCUXl4elFrRkJSeXhEUVVGRExFVkJRVVU3UVVGQlJ5d3dRa0ZCU3l4NVEwRkJkVU1zU1VGQlJUdEJRVUZKTEhsQ1FVRlBMRVZCUVVVc1dVRkJXVHRCUVVGQkxHZENRVUZETEVOQlFVTXNSVUZCUlN4TlFVRk5MRTFCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGQlJTeHJRa0ZCUnp0QlFVRkZMSFZDUVVGUExFbEJRVWtzVVVGQlVTeERRVUZETEVkQlFVVXNUVUZCU1R0QlFVRkRMRzlDUVVGRkxFZEJRVVVzVDBGQlJ5eEZRVUZGTEVsQlFVa3NWMEZCVnl4RFFVRkRMRU5CUVVNc1IwRkJSU3hEUVVGRE8wRkJRVUVzWjBKQlFVTXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR5eFJRVUZSTEZGQlFWRXNSVUZCUlN4TFFVRkxMRTFCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEcxQ1FVRlBMRWRCUVVjc1EwRkJReXhGUVVGRkxFdEJRVXNzVDBGQlJ5eFpRVUZaTEZsQlFWa3NSMEZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFOUJRVWNzUTBGQlF5eEZRVUZGTEV0QlFVc3NSMEZCUlN4UFFVRkhPMEZCUVVNc1owSkJRVVVzTkVOQlFUQkRMRU5CUVVNN1FVRkJSU3huUWtGQlJTeERRVUZETzBGQlFVRXNXVUZCUXl4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVNeFpTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZKTEVsQlFVVTdRVUZCUlN4dFFrRkJUeXhMUVVGSExHTkJRVmtzVDBGQlR5eFpRVUZaTEhkQ1FVRnpRaXhIUVVGSExFTkJRVU1zUzBGQlJ5eEZRVUZGTEZkQlFWY3NVMEZCVXl4TFFVRkhMRTFCUVVrc1kwRkJXU3hQUVVGUExGRkJRVTBzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXl4SlFVRkZMRTFCUVUwc1IwRkJSU3hGUVVGRExHRkJRVmtzWTBGQllTeERRVUZETEVWQlFVVXNTMEZCU3l4UFFVRkhMRmxCUVZrc2NVSkJRWEZDTEVkQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4dlEwRkJhME1zUTBGQlF6dEJRVUZGTEdkQ1FVRkZMREpEUVVFeVF6dEJRVUZGTEhGQ1FVRlBMRWRCUVVjc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFpRVUZETEVOQlFVTXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXhqUVVGSkxFZEJRVVVzU1VGQlJTeFBRVUZITzBGQlFVTXNiVUpCUVVzc1NVRkJSU3hGUVVGRk8wRkJRVkVzWjBKQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRM2hhTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHbENRVUZMTEV0QlFVY3NTVUZCUlR0QlFVRkhMR2xDUVVGTExFdEJRVWNzVTBGQlV5eEhRVUZGTzBGQlFVTXNaMEpCUVVVc1MwRkJTeXhMUVVGSExFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUVN4WlFVRkRPMEZCUVVVc2FVSkJRVXNzUzBGQlJ5eFRRVUZUTEVkQlFVVTdRVUZCUXl4blFrRkJSU3hMUVVGTExFdEJRVWNzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJSU3hwUWtGQlN5eExRVUZITEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXNzUjBGQlJ6dEJRVUZGTEcxQ1FVRkxMRWRCUVVjc1EwRkJRenRCUVVGRkxHMUNRVUZMTEVkQlFVY3NRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJSU3hwUWtGQlN5eExRVUZITEZkQlFWVTdRVUZCUXl4blFrRkJSU3hMUVVGTExFdEJRVWNzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJRU3hWUVVGRE8wRkJRMjVPTEdOQlFVa3NTMEZCUnl4SFFVRkZMRXRCUVVjc1IwRkJSU3hMUVVGSExHVkJRV0VzVDBGQlR5eGpRVUZaTEVsQlFVa3NXVUZCV1N4TlFVRk5MRWxCUVVVc1VVRkJUeXhMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVXNTVUZCUlR0QlFVRkZMR2xDUVVGSkxFbEJRVVVzUjBGQlJTeEZRVUZGTEVOQlFVTXNTMEZCUnl4RlFVRkZMRXRCUVVjN1FVRkJTU3huUWtGQlJUdEJRVUZGTEdkQ1FVRkhMRXRCUVVjc1NVRkJSU3hMUVVGSExFVkJRVVVzVlVGQlVUdEJRVUZITEhGQ1FVRlBMRWRCUVVjc1QwRkJUeXhGUVVGRkxGTkJRVk1zUjBGQlJTeERRVUZETEVOQlFVTTdRVUZCUlN4cFFrRkJTU3hKUVVGRkxFbEJRVWNzU1VGQlJTeExRVUZITzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxFZEJRVWM3UVVGQlJTeHJRa0ZCUnl4SlFVRkZMRXRCUVVrN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVWQlFVVXNSMEZCUnl4SlFVRkZPMEZCUVVjc2IwSkJRVWNzVVVGQlRTeEpRVUZGTzBGQlFVc3NkVUpCUVVjc1QwRkJUeXhqUVVGakxFbEJRVVVzVDBGQlN5eEpRVUZGTEVOQlFVTTdRVUZCUVN4eFFrRkJUVHRCUVVGRExITkNRVUZKTEVsQlFVVXNSVUZCUlN4SFFVRkhMRWxCUVVVN1FVRkJSeXh6UWtGQlJTeFJRVUZOTEVsQlFVVXNVVUZCVFN4SlFVRkZMRTlCUVVzc1MwRkJSeXhMUVVGSExFbEJRVVVzUzBGQlJ5eEpRVUZGTEUxQlFVa3NTMEZCUnl4TFFVRkhMRXRCUVVjc1MwRkJSeXhKUVVGRkxFVkJRVVVzUjBGQlJ5eEpRVUZGTzBGQlFVY3NNRUpCUVUwc1NVRkJSU3hMUVVGSExFOUJRVThzWVVGQllTeERRVUZETEV0QlFVY3NTMEZCUnl4UFFVRk5MRXRCUVVjc1QwRkJUeXhoUVVGaExGRkJRVTBzUzBGQlJ5eEpRVUZITEZGQlFVMHNTVUZCUlN4SlFVRkpPMEZCUVVFc1owSkJRVVU3UVVGQlFTeGpRVUZETzBGQlFVMHNjVUpCUVVjc1QwRkJUeXhoUVVGaExFTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRM2huUWl4SlFVRkZMRU5CUVVNc1IwRkJSU3hQUVVGTExFOUJRVXNzUzBGQlJ5eEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVc1NVRkJSeXhKUVVGRkxFOUJRVWM3UVVGQlF5eHhRa0ZCVVN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRkxFbEJRVVVzUlVGQlJTeFJRVUZQTEVWQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJTeFhRVUZYTEVOQlFVTTdRVUZCUlN4eFFrRkJTeXhKUVVGRkxFMUJRVWtzVVVGQlRTeEpRVUZGTEV0QlFVY3NTVUZCUlN4VFFVRlBMRXRCUVVjc1UwRkJUeXhMUVVGSExFdEJRVWNzUjBGQlJTeEZRVUZGTEV0QlFVY3NTMEZCUnp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SlFVRkZMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEcxQ1FVRkxPMEZCUVVVc1owSkJRVWNzUlVGQlJTeEpRVUZGTzBGQlFVY3NjVUpCUVU4N1FVRkJSU3huUWtGQlNTeEpRVUZGTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hKUVVGRk8wRkJRVVVzY1VKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1JVRkJSU3hSUVVGUExFVkJRVVVzUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJSU3hYUVVGWExFTkJRVU03UVVGQlJTeHJRa0ZCUnl4VFFVRlBMRXRCUVVjc1UwRkJUeXhIUVVGRk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRmRCUVZjc1JVRkJSU3hEUVVGRE8wRkJRVVVzYjBKQlFVVXNWVUZCVVN4SlFVRkZMRk5CUVU4c1RVRkJTU3hKUVVGRk8wRkJRVUVzWTBGQlNUdEJRVUZETEd0Q1FVRkhMRTlCUVVzc1IwRkJSVHRCUVVGRExHOUNRVUZITEV0QlFVYzdRVUZCUlR0QlFVRk5MR3RDUVVGRkxGRkJRVTBzUTBGQlF5eEpRVUZGTzBGQlFVRXNZMEZCUXl4UFFVRkxPMEZCUVVNc2IwSkJRVWNzVVVGQlRTeEhRVUZGTzBGQlFVTXNjMEpCUVVjc1NVRkJSU3hMUVVGSE8wRkJRVVU3UVVGQlRTeHZRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSU3hOUVVGSkxFdEJRVWM3UVVGQlFTeG5Ra0ZCUXl4UFFVRkxPMEZCUVVNc2MwSkJRVWNzVTBGQlR5eEhRVUZGTzBGQlFVTXNkMEpCUVVjc1NVRkJSU3hMUVVGSE8wRkJRVVU3UVVGQlRTeHpRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSU3hOUVVGSkxFdEJRVWM3UVVGQlFTeHJRa0ZCUlN4UFFVRkxPMEZCUVVNc2QwSkJRVWNzU1VGQlJTeExRVU51Wmp0QlFVRkZPMEZCUVUwc2MwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVRkhPMEZCUVVjc2MwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVRkhMRXRCUVVjN1FVRkJRU3hyUWtGQlJUdEJRVUZETEc5Q1FVRkZMRkZCUVUwc1EwRkJReXhKUVVGRkxFMUJRVWtzUzBGQlJ5eEpRVUZGTzBGQlFVRXNaMEpCUVVVN1FVRkJReXhyUWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlN4TlFVRkpMRWxCUVVVN1FVRkJRU3hqUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZETEdOQlFVVXNUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3h0UWtGQlR5eEpRVUZGTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWxCUVVVc1QwRkJSeXhOUVVGSkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVsQlFVVXNUMEZCU3l4TlFVRkpMRWxCUVVVc1RVRkJTeXhMUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZITEVsQlFVY3NTVUZCUnl4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEVkQlFVY3NSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGSExFbEJRVWNzU1VGQlJ5eExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFZEJRVWNzUjBGQlJTeExRVUZITEU5QlFVYzdRVUZCUXl4blFrRkJTU3hKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJSU3hwUWtGQlJ5eEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SlFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExFMUJRVWs3UVVGQlF5eG5Ra0ZCUnl4RFFVRkRMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVTXNUVUZCU3l4WlFVRlhMRk5CUVZFc1dVRkJWeXhOUVVGTExFdEJRVWtzUzBGQlNTeExRVUZKTEUxQlFVc3NhMEpCUVdsQ0xFOUJRVTBzV1VGQlZTeFBRVUZQTEdGQlFWY3NWVUZCVlN4aFFVRlhMRlZCUVZVc1ZVRkJWU3hEUVVGRExFdEJRVWNzUzBGQlN6dEJRVUZCTEdkQ1FVRlJPMEZCUVVFc1owSkJRMnhtTzBGQlFVRXNZMEZCUnl4SlFVRkZMRlZCUVZNc1IwRkJSU3hMUVVGSExHbENRVUZuUWl4SFFVRkZPMEZCUVVVc2JVSkJRVWtzUzBGQlN6dEJRVUZGTERKQ1FVRlRMRVZCUVVVc1EwRkJReXhKUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVsQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVa3NTVUZCUlN4RFFVRkRPMEZCUVVVc2JVSkJRVWtzUzBGQlN6dEJRVUZGTEd0Q1FVRkZMRXRCUVVzc1IwRkJSeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlR0QlFVRkZMR3RDUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzUzBGQlJ5eERRVUZETEUxQlFVc3NRMEZCUXl4SFFVRkZMRU5CUVVNc1EwRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NSVUZCUlN4SFFVRkZMRXRCUVVjc1EwRkJReXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzUlVGQlJUdEJRVUZGTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZKTEVsQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1NVRkJSU3hEUVVGRE8wRkJRVVVzWTBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RlFVRkZMRTFCUVUwN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTTdRVUZEYUZRc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVk1zUlVGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGSkxFbEJRVVVzV1VGQlZTeFBRVUZQTEVsQlFVVXNSVUZCUlN4VFFVRlRMRWxCUVVVc1MwRkJSeXhKUVVGSExFVkJRVVVzVTBGQlR6dEJRVUZITEc5Q1FVRkZMRVZCUVVVc1EwRkJReXhKUVVGRk8wRkJRVVVzY1VKQlFVODdRVUZCUVN4WlFVRkRPMEZCUVVNc2NVSkJRVk1zUlVGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJUeXhGUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZITzBGQlFVRXNXVUZCUXp0QlFVRkRMSEZDUVVGVExFVkJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNkVUpCUVZNc1JVRkJSU3hKUVVGSE8wRkJRVU1zZFVKQlFVOHNTVUZCUlN4TFFVRkhMRXRCUVVjc1NVRkJSU3hMUVVGSExFbEJRVVU3UVVGQlFTeGpRVUZETzBGQlFVTXNhMEpCUVVrN1FVRkJSU3h4UWtGQlN5eEpRVUZGTEVWQlFVVXNSVUZCUlN4WlFVRlpMRWxCUVVVc1JVRkJSU3haUVVGWkxFTkJRVU1zVFVGQlNTeFBRVUZMTEVsQlFVVXNSVUZCUlN4RlFVRkZMRk5CUVZNc1NVRkJSU3hGUVVGRkxGTkJRVk1zUTBGQlF5eFBRVUZMTEVsQlFVVXNSVUZCUlN4RlFVRkZMRkZCUVZFc1NVRkJSU3hGUVVGRkxGRkJRVkVzUTBGQlF6dEJRVUZITEhGQ1FVRlBPMEZCUVVFc1dVRkJRenRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMSE5DUVVGUExFVkJRVVVzVDBGQlR5eEhRVUZGTzBGQlFVRXNaMEpCUVVNc1MwRkJTenRCUVVGRkxIbENRVUZQTEVsQlFVa3NTMEZCU3l4RlFVRkZMRmxCUVZrc1NVRkJSU3hIUVVGRkxFbEJRVWNzUlVGQlJUdEJRVUZCTEdkQ1FVRkZMRXRCUVVzN1FVRkJSU3g1UWtGQlR6dEJRVUZCTEdkQ1FVRkZMRXRCUVVzN1FVRkJSU3g1UWtGQlR5eEpRVUZKTEV0QlFVc3NSVUZCUlN4WlFVRlpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzWjBKQlFVVXNTMEZCU3p0QlFVRkZMSGxDUVVGUExFbEJRVWs3UVVGQlFTeHZRa0ZCU3l4RlFVRkZMRmxCUVZrN1FVRkJRU3h2UWtGRE5XWTdRVUZCUVN4dlFrRkJSVHRCUVVGQkxHdENRVUZETzBGQlFVRXNaMEpCUVVVc1MwRkJTenRCUVVGRkxIbENRVUZQTEVsQlFVa3NTMEZCU3l4RlFVRkZMRmxCUVZrc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeG5Ra0ZCUlN4TFFVRkxPMEZCUVVVc2VVSkJRVThzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SlFVRkZMRWRCUVVVc1NVRkJSeXhGUVVGRk8wRkJRVUVzWjBKQlFVVXNTMEZCU3p0QlFVRkZMSGxDUVVGUExFbEJRVWtzUzBGQlN5eEZRVUZGTEZsQlFWa3NTVUZCUlN4SFFVRkZMRWxCUVVjc1JVRkJSVHRCUVVGQkxHTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVTXNjVUpCUVZNc1JVRkJSU3hIUVVGRk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVVjc2JVSkJRVWtzU1VGQlJTeEpRVUZKTEV0QlFVMHNTVUZCU1N4TFFVRkxMRVZCUVVVc1MwRkJSeXhOUVVGTExFZEJRVVVzUTBGQlF5eEZRVUZITEZGQlFWRXNRMEZCUXl4SFFVRkZMRWxCUVVVc1MwRkJSenRCUVVGRExHOUNRVUZKTEVsQlFVVXNSVUZCUlN4VFFVRlRMRWRCUVVVc1MwRkJSeXhGUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVVXNTMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkJSU3h2UWtGQlJ5eEpRVUZGTEVsQlFVVXNSVUZCUlN4UlFVRlJPMEZCUVVVc2RVSkJRVWNzU1VGQlJTeEZRVUZGTEZGQlFWRXNTVUZCUlN4SFFVRkZMRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVVVzUzBGQlJ5eEpRVUZGTEVWQlFVVXNVMEZCVXl4SlFVRkZMRU5CUVVNc1MwRkJSeXhGUVVGRkxGTkJRVk1zUTBGQlF5eEhRVUZGTEVWQlFVVXNXVUZCV1N4RlFVRkZMRmxCUVZrc1NVRkJSU3hEUVVGRE8wRkJRVUVzY1VKQlFVODdRVUZCUXl4dlFrRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEpRVUZGTEVOQlFVTTdRVUZCUlR0QlFVRkJMR2RDUVVGTE8wRkJRVUVzWTBGQlF6dEJRVUZETEd0Q1FVRkZMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzU1VGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzU1VGQlNUdEJRVUZCTEdkQ1FVRkxMRVZCUVVVc1dVRkJXVHRCUVVGQkxHZENRVU51Wmp0QlFVRkJMR2RDUVVGRk8wRkJRVUVzWTBGQlF5eERRVUZETzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzY1VKQlFVOHNTMEZCUnl4RlFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRkxFdEJRVWNzUlVGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSU3hKUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVWQlFVVXNXVUZCV1N4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGRExHMUNRVUZMTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc1owSkJRVWtzU1VGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZETEVsQlFVY3NSVUZCUlN4TFFVRkhMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEpRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzU1VGQlJTeEZRVUZGTEVOQlFVTXNTVUZCUlN4SFFVRkZPMEZCUVVVc1owSkJRVVVzUlVGQlJTeERRVUZETzBGQlFVVXNaMEpCUVVVN1FVRkJRU3hqUVVGRExFMUJRVXM3UVVGQlFTeGpRVUYxUWl4TlFVRkxPMEZCUVVFc1kwRkJWeXhOUVVGTE8wRkJRVUVzWTBGQlZ5eE5RVUZMTzBGQlFVRXNZMEZCU3l4TlFVRkxPMEZCUVVFc1kwRkJZeXhOUVVGTE8wRkJRVUVzWTBGQlVTeE5RVUZMTzBGQlFVRXNZMEZCVnl4TlFVRkxPMEZCUVVFc1kwRkJWeXhOUVVGTE8wRkJRVUVzWTBGQlZ5eFBRVUZOTzBGQlFVRXNZMEZEYm1Zc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFWY3NUMEZCVFR0QlFVRkJMR05CUVZjc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMRmxCUVVrN1FVRkJSU3h4UWtGQlVTeExRVUZMTzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVWtzVDBGQlR5eEhRVUZGTEVkQlFVY3NSMEZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVGRkxHZENRVUZKTEV0QlFVY3NNa1JCUVRKRUxFMUJRVTBzUjBGQlJ5eEhRVUZGTEV0QlFVY3NkMFpCUVhkR0xFMUJRVTBzUjBGQlJ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVNc1RVRkJTeXhQUVVGSExFZEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVXNWVUZCVlN4SFFVRkZMRU5CUVVNc1IwRkJSU3hOUVVGTExFOUJRVWNzUjBGQlJ5eEZRVUZGTEVWQlFVVXNSMEZCUlN4TlFVRkxMRTlCUTJ4bUxFZEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVXNWVUZCVlN4SFFVRkZMRU5CUVVNc1IwRkJSU3hOUVVGTExFOUJRVWNzUjBGQlJ5eEZRVUZGTEVWQlFVVXNSMEZCUlN4TlFVRkxMRTlCUVVjc1IwRkJSeXhGUVVGRkxFdEJRVWNzVVVGQlRTeE5RVUZKTEVkQlFVVXNRMEZCUXl4SFFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJ5eERRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGSExFZEJRVVVzUjBGQlJ5eEhRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hUUVVGVExFVkJRVVVzVlVGQlZTeERRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1EwRkJReXhIUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUnl4RFFVRkRMRWRCUVVVc1RVRkJTeXhQUVVGSE8wRkJRVU1zYTBKQlFVVXNSVUZCUlR0QlFVRkhMRzFDUVVGSExFbEJRVVVzU1VGQlJTeExRVUZITEV0QlFVY3NUVUZCU1N4TFFVRkhPMEZCUVVrc2NVSkJRVThzUlVGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4WlFVRkRMRWRCUVVVc1RVRkJTeXhQUVVGSE8wRkJRVU1zZFVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSExFVkJRVVVzUzBGQlJ5eEhRVUZGTEUxQlFVa3NSVUZCUlN4RlFVRkZMRXRCUVVjc1NVRkJTU3hKUVVGRkxFdEJRVWNzU1VGQlNTeEhRVUZITzBGQlFVVTdRVUZCUXl4eFFrRkJUeXhGUVVGRkxFVkJRVVVzUzBGQlJ5eEhRVUZGTEVOQlFVTTdRVUZCUVN4WlFVRkRMRWRCUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUlVGQlJTeExRVUZITEVkQlFVVXNRMEZCUXl4SFFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJ5eERRVUZETEVkQlFVVXNUVUZCU3l4TlFVRkpMRTFCUVVzc1RVRkJTeXhQUVVGSExFdEJRVWNzUlVGQlJTeE5RVUZKTEV0QlFVY3NSVUZCUlN4TFFVRkhMRTlCUVVzc1RVRkJTeXhOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NRMEZCUXl4SFFVRkZMRTFCUVVzc1RVRkJTU3hMUVVGTExFMUJRVXNzVDBGQlJ5eEZRVUZGTEUxQlFVa3NSMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hMUVVGTExFOUJRVThzUlVGQlJTeExRVUZITEVsQlFVVXNSVUZCUlN4TlFVRkpMRU5CUVVNc1IwRkJSU3hEUVVGRExFZEJRVVVzVFVGQlN5eFBRVU55Wmp0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUzBGQlN5eFBRVUZQTEVWQlFVVXNTMEZCUnl4TFFVRkhMRVZCUVVVc1MwRkJSeXhMUVVGSExFdEJRVWNzUTBGQlF6dEJRVUZGTEc5Q1FVRkpMRVZCUVVVc1MwRkJSeXhOUVVGSkxFVkJRVVVzUzBGQlJ5eExRVUZITEV0QlFVYzdRVUZCU1N4clFrRkJSenRCUVVGRkxITkNRVUZKTEUxQlFVa3NTMEZCUnl4RlFVRkZMRXRCUVVjc1RVRkJTU3hGUVVGRkxFMUJRVWtzUjBGQlJTeExRVUZITEV0QlFVY3NTMEZCUnl4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFMUJRVWtzU1VGQlJUdEJRVUZCTEcxQ1FVRlJPMEZCUVVNc2IwSkJRVVU3UVVGQlJ5eHZRa0ZCU1N4TFFVRkhMRVZCUVVVc1MwRkJSeXhKUVVGRkxFVkJRVVVzUzBGQlJ5eExRVUZITzBGQlFVVXNhVUpCUVVNc1MwRkJSeXhMUVVGSExFdEJRVWNzUzBGQlJ5eEZRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1RVRkJTVHRCUVVGQkxHTkJRVWM3UVVGQlF5eHhRa0ZCVHl4RlFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGbEJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4SlFVRkhMRTFCUVVzc1QwRkJSeXhGUVVGRkxFdEJRVXNzVDBGQlR5eEZRVUZGTEV0QlFVY3NTMEZCUnl4RlFVRkZMRXRCUVVjc1MwRkJSeXhMUVVGSExFTkJRVU1zUjBGQlJTeERRVUZETEVkQlFVVXNUVUZCU3l4UlFVRkpMRVZCUVVVc1MwRkJSeXhOUVVGTkxGTkJRVk1zUlVGQlJTeFZRVUZWTEVOQlFVTXNSMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hMUVVGSExFMUJRVXNzVFVGQlN5eFBRVUZITzBGQlFVTXNhMEpCUVVVc1JVRkJSVHRCUVVGSExHdENRVUZKTEVsQlFVVXNTMEZCUnp0QlFVRkZMR3RDUVVGRkxFdEJRVXNzU1VGQlNTeERRVUZETEVsQlFVVTdRVUZCUnl4elFrRkJUeXhKUVVGRkxFMUJRVWtzVDBGQlN5eFBRVUZQTEZWQlFWRXNTVUZCUlN4TFFVRkhMRTFCUVVrc1NVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlFVRXNXVUZCUXl4SFFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFbEJRVWNzVFVGQlN5eE5RVUZKTEVsQlFVYzdRVUZCUlN4blFrRkJSU3hGUVVGRkxGRkJRVkVzVDBGQlRTeE5RVUZWTzBGQlFVVXNhVUpCUVVrc1MwRkJTenRCUVVGRkxHZENRVUZGTEZOQlFWTXNRMEZCUXl4TlFVTnlaMElzU1VGQlJTeEZRVUZGTEZGQlFWRXNTVUZCU1N4UFFVRlBMRWRCUVVVc1IwRkJSeXhIUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkhMR2RDUVVGRkxFVkJRVVVzVVVGQlVTeFRRVUZSTEVkQlFVYzdRVUZCUlN4blFrRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeG5Ra0ZCUnl4RlFVRkZMRk5CUVU4N1FVRkJSU3h4UWtGQlR6dEJRVUZGTEdOQlFVVXNTVUZCU1N4SFFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHMUNRVUZQTEVWQlFVVXNVMEZCVHp0QlFVRkJMRlZCUVVNN1FVRkRha2tzWTBGQlNTeExRVUZITzBGQlFVRXNXVUZCUXl4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCU3p0QlFVRkZMR05CUVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zUlVGQlJ5eEhRVUZITEUxQlFVa3NSMEZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3h0UWtGQlJ6dEJRVUZGTzBGQlFVc3NiMEpCUVUwN1FVRkJRU3haUVVGSE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUXl4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkRMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hOUVVGSk8wRkJRVUVzV1VGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlJTeEpRVUZGTEZsQlFWVXNTVUZCUlN4VlFVRlJMRU5CUVVNc1EwRkJReXhMUVVGSExFMUJRVWtzUzBGQlJ5eGhRVUZYTEVsQlFVVTdRVUZCU1N4eFFrRkJTenRCUVVGRkxHdENRVUZGTEVsQlFVa3NTMEZCU3l4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1kwRkJZenRCUVVGRkxHZENRVUZGTEVsQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxHTkJRV003UVVGQlJTeG5Ra0ZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFpRVUZaTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hOUVVGSkxFMUJRMnhtTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmRCUVZjN1FVRkJSU3huUWtGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGWk8wRkJRVVVzWjBKQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzWlVGQlpTeEpRVUZGTzBGQlFVc3NaMEpCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNWVUZCVlR0QlFVRkZMR2RDUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTMEZCUnl4RlFVRkZMRkZCUVZFc1NVRkJSU3hMUVVGTExFbEJRVWtzUlVGQlJTeGxRVUZsTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU1zUzBGQlJ5eFJRVUZOTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVVc1NVRkJSU3haUVVGVkxFbEJRVVVzVlVGQlVTeERRVUZETEVOQlFVTXNTMEZCUnl4TlFVRkpMRXRCUVVjc1lVRkJWeXhKUVVGRk8wRkJRVWtzY1VKQlFVczdRVUZCUlN4clFrRkJSU3hKUVVGSkxFdEJRVXNzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZkQlFWYzdRVUZCUlN4blFrRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WFFVRlhPMEZCUVVVc1owSkJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1UwRkJVenRCUVVGRkxHZENRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeG5Ra0ZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFRRVUZUTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNXVUZCV1N4SlFVRkZPMEZCUVVzc1owSkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1QwRkJUenRCUVVGRkxHZENRVUZGTEVsQlFVVXNUVUZCU1N4TlFVTndaaXhEUVVGRExFdEJRVWNzUlVGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4SlFVRkZMRXRCUVVjc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eEpRVUZGTEVWQlFVVXNVVUZCVVN4SlFVRkZMRWxCUVVVN1FVRkJSU3huUWtGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hMUVVGSExFVkJRVVVzYTBKQlFXdENPMEZCUVVjc2EwSkJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWp0QlFVRkZMR3RDUVVGSkxFbEJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWp0QlFVRkZMR2RDUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTMEZCUnl4TFFVRkhMRXRCUVVjc1JVRkJSU3hyUWtGQmEwSXNTMEZCUnl4TFFVRkxMRWxCUVVrc1IwRkJSU3hEUVVGRExFdEJRVWM3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSVHRCUVVGRExIRkNRVUZMTzBGQlFVVXNhMEpCUVVrc1NVRkJSU3hKUVVGSkxFdEJRVXNzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1RVRkJTeXhGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEZRVUZGTEVsQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1IwRkJSU3hGUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNSMEZCUlN4RlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFZEJRVVVzUTBGQlF5eEhRVUZGTEVsQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJTeEZRVUZGTEd0Q1FVRnJRaXhIUVVGRkxFbEJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWl4SFFVTndaaXhKUVVGSExFbEJRVWtzUzBGQlN5eEZRVUZGTEZsQlFWa3NSMEZCUlN4SFFVRkZMRU5CUVVNc1JVRkJSeXhyUWtGQmEwSXNSMEZCUlN4SlFVRkZMRXRCUVVzc1NVRkJTU3hIUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4SlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEU5QlFVOHNTMEZCUnl4TFFVRkhMRXRCUVVjc1EwRkJReXhKUVVGRkxFbEJRVVVzVFVGQlNTeExRVUZITEU5QlFVc3NTVUZCUlN4TFFVRkxMRWxCUVVrc1IwRkJSU3hEUVVGRExFZEJRVVVzUlVGQlJTeFJRVUZSTEVWQlFVVXNVVUZCVVN4SlFVRkZMRkZCUVUwc1NVRkJSU3hKUVVGRkxFbEJRVVVzUzBGQlJ5eEZRVUZGTzBGQlFVY3NaMEpCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNUMEZCVHp0QlFVRkZMR2RDUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTMEZCUnl4RlFVRkZMRVZCUVVVc1dVRkJXU3hEUVVGRExFbEJRVVVzUzBGQlJ5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNWMEZCVnp0QlFVRkZMR2RDUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRk5CUVZNN1FVRkJSU3huUWtGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUk8wRkJRVVVzWjBKQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVTBGQlV6dEJRVUZGTEdkQ1FVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZGQlFWRTdRVUZCUlN4clFrRkJSU3hGUVVGRkxGRkJRVkVzU1VGQlJUdEJRVUZKTEhGQ1FVRlBMRWxCUVVrc1NVRkJSU3hIUVVGRkxFdEJRVWNzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXl4SlFVRkZMRWxCUVVVc1NVRkJSU3hEUVVGRExFdEJRVXNzVFVGQlRTeEpRVU0xWml4VlFVRlZMRTFCUVVrc1NVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEUxQlFVMHNTVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGSkxFMUJRVWtzVlVGQlZTeE5RVUZKTEVsQlFVVXNSVUZCUlN4SFFVRkZMRTFCUVVrN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUXl4eFFrRkJUVHRCUVVGQkxGbEJRVWM3UVVGQlFTeFpRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSFZDUVVGVExFVkJRVVVzUjBGQlJUdEJRVUZETEhkQ1FVRlBMRWxCUVVVc1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeHRRa0ZCYlVJc1MwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlJUdEJRVUZCTEdOQlFVczdRVUZCUXl4eFFrRkJTenRCUVVGRkxHdENRVUZKTEV0QlFVY3NiMEpCUVVrc1VVRkJUU3haUVVGWkxFZEJRVVVzU1VGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUlN4SFFVRkZMRU5CUVVNc1IwRkJSU3hKUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzYTBKQlFXdENPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeEZRVUZGTEd0Q1FVRnJRanRCUVVGRkxHZENRVUZGTEUxQlFVa3NTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hMUVVGSExFdEJRVXNzU1VGQlNTeEhRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hOUVVGSkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNUMEZCVHl4TFFVRkhMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4clFrRkJSU3hGUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4SFFVRkhMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4clFrRkJSU3hMUVVGSExFVkJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlN4SFFVRkZMRVZCUVVVc1NVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTEUxQlFVa3NSVUZCUlN4TFFVRkhMRTFCUVVrc1EwRkJReXhKUVVGRkxFZEJRVVVzUlVGQlJTeEpRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJRU3haUVVGRk8wRkJRVUVzV1VGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4blFrRkJSU3hGUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlF6Rm1MRWRCUVVVc1YwRkJWVHRCUVVGRExIRkNRVUZQTEV0QlFVc3NTVUZCU1R0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZETEhGQ1FVRlBPMEZCUVVFc1dVRkJWVHRCUVVGQkxGbEJRVVVzUjBGQlJTeE5RVUZKTEZsQlFWa3NTVUZCU1R0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEZkQlFWY3NUVUZCU1N4TlFVRkpMRWRCUVVVc1RVRkJTU3hIUVVGRkxFdEJRVWNzVFVGQlNTeFBRVUZMTEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeEZRVUZGTzBGQlFVOHNhMEpCUVVjc1lVRkJWenRCUVVGRkxIVkNRVUZOTzBGQlFVY3NkVUpCUVZFc1NVRkJSU3hIUVVGRkxFdEJRVWNzUjBGQlJTeExRVUZITEVkQlFVVTdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFdEJRVWNzU1VGQlJTeE5RVUZITzBGQlFVY3NiMEpCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzU1VGQlJTeFRRVUZUTzBGQlFVVXNiMEpCUVVrc1NVRkJSVHRCUVVGTExHOUNRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlJUdEJRVUZETEhOQ1FVRkZMRVZCUVVVc1NVRkJTU3hMUVVGTExFZEJRVVVzV1VGQlZ5eExRVUZITEZGQlFVMHNTVUZCUlN4VFFVRlBMRXRCUVVzc1NVRkJSU3hGUVVGRkxFOUJRVThzWVVGQlZ5eFZRVUZSTzBGQlFVY3NjMEpCUVVjN1FVRkJReXh6UWtGQlJTeExRVUZMTEVOQlFVTTdRVUZCUlN4MVFrRkJSenRCUVVGRkxIZENRVUZKTEVsQlFVVTdRVUZCUlN3d1FrRkJUVHRCUVVGQkxHdENRVUZETEZOQlFVOHNSMEZCUlR0QlFVRkJMR3RDUVVGRE8wRkJRVU1zYzBKQlFVVTdRVUZCUVN4blFrRkJUVHRCUVVGRExHOUNRVUZITzBGQlFVVXNlVUpCUVUwN1FVRkJRU3hqUVVGRk8wRkJRVU1zY1VKQlFVMDdRVUZCUVN4WlFVRkZPMEZCUVVFc1dVRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTzBGQlFVTXNjVUpCUTJ4bU8wRkJRVVVzY1VKQlFVczdRVUZCUlN4clFrRkJTU3hKUVVGRk8wRkJRVVVzYVVKQlFVY3NSVUZCUlN4UlFVRlJMRk5CUVZNc1IwRkJSU3hIUVVGRk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4SlFVRkZPMEZCUVVVc2IwSkJRVVVzUlVGQlJTeEpRVUZGTEVsQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxIRkNRVUZKTEVsQlFVVXNSMEZCUlN4SlFVRkZMRVZCUVVVc1VVRkJUeXhGUVVGRk8wRkJRVVVzYjBKQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmNzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeHhRa0ZCUnl4RlFVRkZMRk5CUVU4N1FVRkJRU3hqUVVGRExFTkJRVU03UVVGQlJTeHhRa0ZCVHp0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJTenRCUVVGRkxIRkNRVUZMTzBGQlFVVXNhMEpCUVVrc1NVRkJSU3hIUVVGSE8wRkJRVVVzWjBKQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRk8wRkJRVThzYTBKQlFVa3NTVUZCUlR0QlFVRkZMR2RDUVVGRkxGRkJRVkVzVTBGQlV5eEhRVUZGTzBGQlFVTXNjVUpCUVVjc1JVRkJSU3hUUVVGUE8wRkJRVUVzWTBGQlF5eERRVUZETzBGQlFVVXNaMEpCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEhGQ1FVRlBPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeE5RVUZKTzBGQlFVRXNXVUZCUnl4SFFVRkZMRmRCUVZVN1FVRkJReXh4UWtGQlR6dEJRVUZCTEZsQlFVVTdRVUZCUVN4WlFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGRExIRkNRVUZQTzBGQlFVRXNXVUZCUlR0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJTenRCUVVGRkxIRkNRVUZMTzBGQlFVVXNjVUpCUVVzN1FVRkJSU3gxUWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJTeEZRVUZGTEVsQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNN1FVRkJSU3h4UWtGQlJ6dEJRVUZGTEhsQ1FVRlJMRWxCUVVVc1IwRkJSU3hKUVVGRkxFZEJRVVVzUzBGQlNUdEJRVUZETEhOQ1FVRkpMRWxCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlEyNW1MRWRCUVVjc1EwRkJRenRCUVVGRkxIZENRVUZKTEV0QlFVY3NUMEZCU3l4TlFVRkpMRTFCUVVrc1NVRkJSU3hMUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkZMRVZCUVVVc1UwRkJUeXhMUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETzBGQlFVRXNaMEpCUVVNN1FVRkJReXh4UWtGQlJ6dEJRVUZCTEdOQlFVTTdRVUZCUXl4blFrRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVVXNjVUpCUVU4N1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRlBMRWRCUVVjc1RVRkJTU3hIUVVGRkxFMUJRVWtzUjBGQlJTeE5RVUZKTEVkQlFVVXNUVUZCU1N4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGQkxGVkJRVU03UVVGRE1Vb3NWMEZCUXl4WFFVRlZPMEZCUVVNc2NVSkJRVk1zUlVGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVVc1JVRkJSVHRCUVVGUkxHdENRVUZGTEVsQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUlVGQlJUdEJRVUZGTEdsQ1FVRkhPMEZCUVVVc2FVSkJRVWNzVVVGQlVTeEZRVUZGTEVOQlFVTTdRVUZCUlR0QlFVRkpMR2RDUVVGRkxEQkNRVUYzUWl4RlFVRkZMSFZDUVVGMVFpeERRVUZETzBGQlFVVXNhMEpCUVVjc1MwRkJSeXhOUVVGSkxGTkJRVThzVFVGQlNTeGpRVUZqTEVOQlFVTXNSMEZCUlN4SlFVRkZMRTlCUVUwc1NVRkJSenRCUVVGRExHOUNRVUZKTEVsQlFVVTdRVUZCUlN4dlFrRkJSVHRCUVVGTExHdENRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkRMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZETEdkQ1FVRkpMRWxCUVVVc1JVRkJReXhIUVVGRkxFZEJRVVU3UVVGQlJUdEJRVUZKTEdOQlFVVXNNRUpCUVhkQ0xFVkJRVVVzZFVKQlFYVkNMRU5CUVVNN1FVRkJSU3huUWtGQlJ5eEZRVUZGTzBGQlFXZENMR3RDUVVGSE8wRkJRVU1zZFVKQlFVOHNSVUZCUlN4blFrRkJaMElzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZCUXl4VFFVRlBMRWRCUVVVN1FVRkJReXhyUWtGQlJTeDNSRUZCYzBRc1EwRkJReXhIUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVTTdRVUZCUXl4bFFVRkhMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zWjBKQlFVVXNSVUZCUlN4UlFVRlJPMEZCUVVFc1dVRkJReXhEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETzBGQlFVVXNiVUpCUVUwc1EwRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJ6dEJRVU12WXl4WlFVRkZMRmRCUVZNc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTeFhRVUZUTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHMUNRVUZwUWl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxHMUNRVUZwUWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTd3lRa0ZCZVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzTWtKQlFYbENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTdzRRa0ZCTkVJc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTdzRRa0ZCTkVJc1JVRkJSU3hIUVVGSExFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNLMEpCUVRaQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3clFrRkJOa0lzUlVGQlJTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cwUWtGQk1FSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxEUkNRVUV3UWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTERSQ1FVRXdRaXhSUVVGSkxFVkJRVVVzTkVKQlFUQkNMRVZCUVVVc1IwRkJSeXhEUVVGRE8wRkJRekZtTEZsQlFVVXNiMEpCUVd0Q0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4dlFrRkJhMElzUlVGQlJTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3h4UWtGQmJVSXNVVUZCU1N4RlFVRkZMSEZDUVVGdFFpeEZRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMRmxCUVVVc01FSkJRWGRDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3d3UWtGQmQwSXNSVUZCUlN4SFFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHRRa0ZCYVVJc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTeHRRa0ZCYVVJc1JVRkJSU3hIUVVGSExFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNiMEpCUVd0Q0xFTkJRVU1zUjBGQlJTeFBRVUZMTEVWQlFVVXNiMEpCUVd0Q0xFVkJRVVVzUjBGQlJ5eEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMRmRCUVZNc1VVRkJTU3hGUVVGRkxGZEJRVk1zUlVGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4WlFVRkZMRzFDUVVGcFFpeERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzYlVKQlFXbENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2IwSkJRV3RDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZET1dRc1dVRkJSU3h2UWtGQmEwSXNVVUZCU1N4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMRmxCUVVVc2RVSkJRWEZDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxIVkNRVUZ4UWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4M1FrRkJjMElzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3gzUWtGQmMwSXNVVUZCU1N4RlFVRkZMSGRDUVVGelFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc2IwSkJRV3RDTEZGQlFVa3NSVUZCUlN4dlFrRkJhMElzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4WlFVRkZMR2RDUVVGakxFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4blFrRkJZeXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMR2xDUVVGbExFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMR2xDUVVGbExFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3gzUWtGQmMwSXNVVUZCU1N4RlFVRkZMSGRDUVVGelFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVTndaU3haUVVGRkxIRkNRVUZ0UWl4UlFVRkpMRVZCUVVVc2NVSkJRVzFDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3h4UWtGQmJVSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHhRa0ZCYlVJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc1ZVRkJVU3hEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxGVkJRVkVzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNiVUpCUVdsQ0xGRkJRVWtzUlVGQlJTeHRRa0ZCYVVJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTERaQ1FVRXlRaXhEUVVGRExFZEJRVVVzVDBGQlN5eEZRVUZGTERaQ1FVRXlRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4blEwRkJPRUlzVVVGQlNTeEZRVUZGTEdkRFFVRTRRaXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNORUpCUVRCQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzTkVKQlFUQkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkROMlVzV1VGQlJTdzBRa0ZCTUVJc1VVRkJTU3hGUVVGRkxEUkNRVUV3UWl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGRkxGbEJRVVVzTWtKQlFYbENMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3eVFrRkJlVUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTdzBRa0ZCTUVJc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTdzBRa0ZCTUVJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkVUpCUVhGQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3gxUWtGQmNVSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4blEwRkJPRUlzUTBGQlF5eEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMR2REUVVFNFFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIRkRRVUZ0UXl4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHhRMEZCYlVNc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZEY0dZc1dVRkJSU3gxUTBGQmNVTXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzZFVOQlFYRkRMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4MVEwRkJjVU1zUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2RVTkJRWEZETEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHpRMEZCYjBNc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNjME5CUVc5RExFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cyUWtGQk1rSXNVVUZCU1N4RlFVRkZMRFpDUVVFeVFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMR05CUVVrc1MwRkJSeXhGUVVGRkxGVkJRVkVzVVVGQlNTeExRVUZITEVWQlFVVXNWVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGRkxGbEJRVVVzVVVGQlRTeFJRVUZKTEVWQlFVVXNVVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVOMFl5eGpRVUZKTEV0QlFVY3NVVUZCU1N4TFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVVVzUzBGQlJ5eFBRVUZMTEV0QlFVY3NSVUZCUlN4SlFVRkpMRWRCUVVVc1MwRkJSeXhSUVVGSkxFdEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUlN4TFFVRkhMRkZCUVVrc1MwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZGTEU5QlFVOHNUMEZCVHl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZKTEVsQlFVVXNUMEZCUnl4TlFVRkpMRVZCUVVVc1RVRkJTU3hIUVVGRkxFbEJRVVVzVDBGQlJ5eFBRVUZITEVWQlFVVXNRMEZCUXl4TlFVRkpPMEZCUVVVc1kwRkJSU3h0UWtGQmFVSXNSVUZCUlN4RlFVRkZMR2RDUVVGblFqdEJRVUZGTEdOQlFVVXNVMEZCVHl4RlFVRkZMRVZCUVVVc1RVRkJUVHRCUVVGRkxHTkJRVVVzV1VGQlZTeEZRVUZGTEVWQlFVVXNVMEZCVXp0QlFVRkZMR05CUVVVc1lVRkJWeXhGUVVGRkxFVkJRVVVzVlVGQlZUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJRenRCUVVGRExGbEJRVVVzWVVGQlZ6dEJRVUZITEZsQlFVVXNXVUZCVlR0QlFVRkhMRmxCUVVVc1pVRkJZVHRCUVVGSExGbEJRVVVzWlVGQllUdEJRVUZGTEZsQlFVVXNaVUZCWVN4RFFVRkRMRWRCUVVVc1IwRkJSU3hOUVVGSkxFVkJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2EwSkJRV2RDTzBGQlFVVXNZMEZCU1R0QlFVRkZMR05CUVVVc1UwRkJVeXhMUVVGSk8wRkJRVU1zYVVKQlFVY3NSMEZCUnp0QlFVRkZMR3RDUVVGSkxFbEJRVVU3UVVGQlFTeFZRVUZITzBGQlF6RmlMRzFDUVVGVExFdEJRVWs3UVVGQlF5eHhRa0ZCVXl4SlFVRkhPMEZCUVVNc2EwSkJRVWNzUTBGQlF5eE5RVUZKTEVsQlFVVXNUVUZCUnl4RlFVRkZMRmxCUVZVc1RVRkJSeXhEUVVGRExFdEJRVWs3UVVGQlF5eHJRa0ZCUlN4RlFVRkZPMEZCUVVVc2EwSkJRVVVzUTBGQlF6dEJRVUZGTEc5Q1FVRkhMRVZCUVVVN1FVRkJjVUlzYjBKQlFVVXNjVUpCUVhGQ08wRkJRVVVzYjBKQlFVY3NSVUZCUlR0QlFVRlJMSFZDUVVGSkxHTkJRVmtzVDBGQlR5eEZRVUZGTEZsQlFWVXNSVUZCUlN4VlFVRlJMRU5CUVVNc1JVRkJSU3hQUVVGUExFbEJRVWNzUlVGQlJTeFJRVUZSTEZWQlFWRTdRVUZCUXl4M1FrRkJTU3hKUVVGRkxFVkJRVVVzVVVGQlVTeE5RVUZOTzBGQlFVVXNkVUpCUVVjc1VVRkJVU3hEUVVGRE8wRkJRVUVzYTBKQlFVTTdRVUZCUXl4clFrRkJSU3hGUVVGRk8wRkJRVUVzWTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUXl4blFrRkJSeXhGUVVGRkxFbEJRVVVzU1VGQlJ6dEJRVUZETEd0Q1FVRkhMRVZCUVVVN1FVRkJUeXh4UWtGQlNTeGpRVUZaTEU5QlFVOHNSVUZCUlN4WFFVRlRMRVZCUVVVc1UwRkJUeXhEUVVGRExFVkJRVVVzVFVGQlRTeEpRVUZITEVWQlFVVXNUMEZCVHp0QlFVRlJMSEZDUVVGSE8wRkJRVVVzWjBKQlFVVXNSVUZCUlR0QlFVRkZMR3RDUVVGRkxFMUJRVWtzUlVGQlJTeGhRVUZYTEVWQlFVVXNWVUZCVlN4WlFVRlpMRWRCUVVVc1YwRkJWeXhYUVVGVk8wRkJRVU1zTWtKQlFWY3NWMEZCVlR0QlFVRkRMRzlDUVVGRkxGVkJRVlVzUlVGQlJUdEJRVUZCTEdkQ1FVRkRMRWRCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZGTzBGQlFVRXNZMEZCUXl4SFFVRkZMRU5CUVVNc1MwRkJSeXhGUVVGRk8wRkJRVUVzV1VGQlJUdEJRVUZCTEZWQlFVTTdRVUZEZG1Vc1kwRkJSeXhGUVVGRk8wRkJRVkVzYVVKQlFVa3NZMEZCV1N4UFFVRlBMRVZCUVVVc1dVRkJWU3hGUVVGRkxGVkJRVkVzUTBGQlF5eEZRVUZGTEU5QlFVOHNTVUZCUnl4SlFVRkZMRVZCUVVVc1VVRkJVVHRCUVVGUkxHZENRVUZGTEZGQlFWRXNTVUZCU1N4RlFVRkZPMEZCUVVVc1lVRkJSenRCUVVjNVJ5eHBRa0ZCVHl4VlFVRlZPMEZCUVVFc1VVRkRia0k3UVVGQlFTeE5RVWRCTEVkQlFVYzdRVUZEU0N4VlFVRkpMRTlCUVU4c1dVRkJXU3haUVVGWkxFOUJRVThzVjBGQlZ6dEJRVU51UkN4bFFVRlBMRlZCUVZVN1FVRkJRU3hsUVVOV0xFOUJRVThzVjBGQlZ5eGpRVUZqTEU5QlFVOHNTMEZCU3p0QlFVTnVSQ3hsUVVGUExFTkJRVU1zUjBGQlJ5eE5RVUZOTEU5QlFVODdRVUZCUVR0QlFVRkJPenM3UVVOMlJERkNPMEZCUVVFN1FVRkJRVHRCUVVGQk96czdRVU5CUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3TzBGRFFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hOUVVGaE8wRkJRV0k3UVVGQlFUdEJRVUZQTEUxQlFVMHNUMEZCVHp0QlFVRkJPMEZCUVVFN096dEJRMEZ3UWp0QlFVRkJPMEZCUVVFN1FVRkRRU3hWUVVGSkxHMUNRVUZ0UWl4TlFVRk5PMEZCUXpOQ0xGbEJRVWtzWVVGQllTeFBRVUZQTEdGQlFXRXNaVUZCWlN4VFFVRlRMR2RDUVVGblFpeFRRVUZUTEdOQlFXTXNUVUZCVFR0QlFVTXhSeXhaUVVGSkxFOUJRVThzWlVGQlpUdEJRVUZoTEhWQ1FVRmhMR05CUVdNN1FVRkRiRVVzWlVGRFJpeFRRVUZUTEZsQlFWa3NRMEZCUXl4SFFVRkhPMEZCUlhwQ0xHMUNRVUZUTEV0QlFVazdRVUZCUXl4alFVRkZMRlZCUVZFc1JVRkJSU3hWUVVGUkxFVkJRVVU3UVVGQlJTeHRRa0ZCVHp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEpRVUZITzBGQlFVTXNZMEZCUlN4VlFVRlJMRVZCUVVVc1ZVRkJVU3hGUVVGRk8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkZPMEZCUVVNc2JVSkJRVk1zU1VGQlJ6dEJRVUZETEdOQlFVVXNWVUZCVVN4RlFVRkZMRlZCUVZFc1JVRkJSVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUlR0QlFVRkRMRzFDUVVGVExFbEJRVWM3UVVGQlF5eGpRVUZGTEZWQlFWRXNSVUZCUlN4VlFVRlJMRVZCUVVVN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVVTdRVUZCUXl4dFFrRkJVeXhMUVVGSk8wRkJRVU1zWTBGQlJTeFZRVUZSTEVWQlFVVXNWVUZCVVN4RlFVRkZPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZGTzBGQlFVTXNZMEZCU1N4SlFVRkZMRmRCUVZVc1NVRkJSenRCUVVGRkxGbEJRVVVzVVVGQlRTeEpRVUZKTEZGQlFWRXNRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXhwUWtGQlJ6dEJRVUZGTEdkQ1FVRkZPMEZCUVVFc1ZVRkJReXhEUVVGRE8wRkJRM1JUTEdOQlFVa3NTMEZCUnl4UFFVRlBMRTlCUVU4c1EwRkJReXhIUVVGRkxFTkJRVU1zUjBGQlJTeExRVUZITEd0Q1FVRnBRaXhKUVVGRkxFTkJRVU1zUjBGQlJTeE5RVUZKTzBGQlFVTXNhMEpCUVUwN1FVRkJRU3hWUVVGRkxFZEJRVVVzUzBGQlJ5eFpRVUZWTEU5QlFVOHNVVUZCVHl4SlFVRkZMR05CUVZrc1QwRkJUeXhsUVVGakxFbEJRVVVzV1VGQlZTeFBRVUZQTEZkQlFWTXNXVUZCVlN4UFFVRlBMRkZCUVZFc1dVRkJWU3haUVVGVkxFOUJRVThzVVVGQlVTeFRRVUZUTEUxQlFVc3NTVUZCUlN4RlFVRkZMREJDUVVGM1FpeFBRVUZITEVsQlFVVTdRVUZCUnl4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eHRRa0ZCVHl4RlFVRkZMR0ZCUVZjc1JVRkJSU3hYUVVGWExFZEJRVVVzUTBGQlF5eEpRVUZGTEVsQlFVVTdRVUZCUVN4VlFVRkRPMEZCUVVNc1kwRkJTU3hKUVVGSExFZEJRVVU3UVVGRE4xVXNZMEZCUnl4SFFVRkZPMEZCUVVNc1owSkJRVWtzUzBGQlJ5eDFRMEZCWXl4TFFVRkhPMEZCUVdkQ0xHZENRVUZGTEVsQlFVVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJSU3hOUVVGSkxGbEJRVlU3UVVGQlNTeHBRa0ZCUnl4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHdENRVUZGTEVWQlFVVXNWMEZCVnl4VFFVRlRMRWxCUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlJTeEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVRkZMSEZDUVVGUExFZEJRVWNzWVVGQllTeEhRVUZGTEVsQlFVVXNVMEZCVHl4TlFVRk5PMEZCUVVFc1dVRkJRenRCUVVGRkxHZENRVUZGTEU5QlFVYzdRVUZCUXl4clFrRkJSU3hIUVVGSExFZEJRVVVzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRmRCUVZNc1NVRkJSU3hKUVVGSkxGZEJRVmNzUTBGQlF6dEJRVUZITEhGQ1FVRlBPMEZCUVVFc1dVRkJRenRCUVVGRkxHZENRVUZGTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1NVRkJSU3hUUVVGTE8wRkJRVU1zYTBKQlFVVXNSVUZCUlN4WFFVRlhMRk5CUVZNc1NVRkJSU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZGTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUVVVc2FVSkJRVWNzVTBGQlV5eEhRVUZGTEVsQlFVVXNVMEZCVHl4UlFVRlBMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zYjBKQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3hKUVVGRkxFVkJRVVVzVTBGQlR5eERRVUZETzBGQlFVRXNZMEZCUXl4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRkxHRkJRVU1zUlVGQlJTeGxRVUZoTEVsQlFVVXNVVUZCVVN4TFFVRkxMRmRCUVZNc1MwRkJSeXhSUVVGUkxFdEJRVXNzUTBGQlF5eEZRVUZGTEZGQlFWRXNUMEZCVFN4SFFVRkhPMEZCUVVjc2IwSkJRVkVzUzBGQlN5eE5RVUZOTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEhOQ1FVRlJMRmRCUTNKbU8wRkJRVVVzYjBKQlFVMDdRVUZCUVN4WlFVRkZPMEZCUVVVc1kwRkJSU3hWUVVGUkxFMUJRVWs3UVVGQk5rSXNaMEpCUVVrN1FVRkJSU3huUWtGQlJ6dEJRVUZETEd0Q1FVRkZPMEZCUVVFc1dVRkJlVUlzVTBGQlR5eEhRVUZGTzBGQlFVTXNiMEpCUVUwc1VVRkJVU3hOUVVGTkxIbEhRVUY1Unl4SFFVRkZPMEZCUVVFc1dVRkJSVHRCUVVGRExHMUNRVUZQTEZOQlFVOHNSVUZCUlR0QlFVRkJMRlZCUVUwc1YwRkJVeXhOUVVGSk8wRkJRVVVzWjBKQlFVVXNTVUZCUlN4TFFVRkxMRk5CUVZNc1QwRkJTeXhsUVVGaExFOUJRVThzV1VGQlZTeFRRVUZUTEd0Q1FVRm5RaXhKUVVGRkxGTkJRVk1zWTBGQll5eE5RVUZOTEU5QlFVOHNaVUZCWlN4bFFVRmxMR1ZCUVdNc1NVRkJSU3hoUVVGWkxFMUJRVWtzUlVGQlJTeFJRVUZSTEU5QlFVOHNTVUZCUlN4SlFVRkZMRVZCUVVVc1QwRkJUeXhIUVVGRkxFVkJRVVVzVVVGQlVTeFZRVUZUTEVWQlFVVXNSVUZCUlN4WlFVRlpMRWRCUVVjc1NVRkJSU3hEUVVGRExFbEJRVVVzU1VGQlJTeEpRVUZITEUxQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc2EwSkJRVWtzU1VGRE9XaENMRWxCUVVrN1FVRkJaU3huUWtGQlJTeExRVUZMTEU5QlFVMHNSMEZCUlN4TFFVRkZPMEZCUVVVc1owSkJRVVVzUzBGQlN5eEpRVUZKTzBGQlFVVXNjVUpCUVU4c1JVRkJSVHRCUVVGQkxGbEJRVmtzUjBGQlJTeE5RVUZKTEVsQlFVVXNUMEZCUnp0QlFVRkRMR3RDUVVGSkxFbEJRVVVzU1VGQlNUdEJRVUZsTEdkQ1FVRkZMRXRCUVVzc1QwRkJUU3hIUVVGRkxFdEJRVVU3UVVGQlJTeG5Ra0ZCUlN4bFFVRmhPMEZCUVdNc1owSkJRVVVzUzBGQlN5eEpRVUZKTzBGQlFVVXNjVUpCUVU4c1NVRkJTU3hYUVVGWExFVkJRVVVzVVVGQlVUdEJRVUZCTEZsQlFVTXNTVUZCUnl4SlFVRkZMRU5CUVVNc1IwRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRWxCUVVrN1FVRkJaU3huUWtGQlJTeExRVUZMTEU5QlFVMHNSMEZCUlN4SlFVRkZPMEZCUVVVc1owSkJRVVVzWlVGQllUdEJRVUZqTEdkQ1FVRkZMRk5CUVU4c1RVRkJTVHRCUVVGRExIVkNRVUZMTEVWQlFVVXNWVUZCVVN4TFFVRkhMRVZCUVVVc1ZVRkJVU3hGUVVGRkxGZEJRVk1zUlVGQlJTeEZRVUZGTEZGQlFWRXNTVUZCUlN4RlFVRkZPMEZCUVVFc1kwRkJRenRCUVVGRkxHZENRVUZGTEZWQlFWRTdRVUZCUlN4blFrRkJSU3hMUVVGTExFbEJRVWs3UVVGQlFTeFpRVUZETzBGQlFVY3NaVUZCUnl4bFFVRmhMRTlCUVU4c1owSkJRV01zVDBGQlR5eGpRVUZaTEhGQ1FVRnpRanRCUVVOd1pDeGpRVUZKTEV0QlFVY3NVVUZCVVN4SlFVRkpMRXRCUVVzc1QwRkJUeXhIUVVGRkxFdEJRVWNzVVVGQlVTeE5RVUZOTEV0QlFVc3NUMEZCVHp0QlFVRkZMR2RDUVVGSkxFdEJRVWNzU1VGQlNTeE5RVUZKTEVkQlFVY3NWVUZCVlN4SFFVRkZMRVZCUVVVc1MwRkJTeXhIUVVGSExFbEJRVVVzU1VGQlNTeEhRVUZGTEV0QlFVY3NTVUZCU1N4TlFVRkpMRWRCUVVjc1ZVRkJWU3hIUVVGRkxFVkJRVVVzUzBGQlN5eEhRVUZITEVsQlFVVXNTVUZCU1R0QlFVRkhMR05CUVVrc1MwRkJSeXhGUVVGRkxGTkJRVThzU1VGQlJ5eEpRVUZGTEVWQlFVVXNXVUZCVlR0QlFVRkhMR2xDUVVGUExFOUJRVThzUjBGQlJTeEZRVUZGTzBGQlFVVXNaVUZCUnp0QlFVRkxMRmxCUVVVc1owSkJRV01zUzBGQlJ5eEZRVUZGTzBGQlFXRXNXVUZCUlN4VFFVRlBMRWxCUVVVc1JVRkJSVHRCUVVGTkxHTkJRVWs3UVVGQlJTeFpRVUZGTEdWQlFXRXNTVUZCUlN4RlFVRkZPMEZCUVZrc1kwRkJTU3huUWtGQll5eEZRVUZGTEdsQ1FVRmxPMEZCUVVjc2MwSkJRVlVzVDBGQlR5eGxRVUZoTEVWQlFVVXNhVU5CUVdsRE8wRkJRVVVzWTBGQlNTeEhRVUZGTEVkQlFVVXNTVUZCUnl4SlFVRkZMRTlCUVVjc1IwRkJSU3hIUVVGRkxFbEJRVWNzU1VGQlJ5eEpRVUZITzBGQlF6ZGlMRzFDUVVGVExFbEJRVWM3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRVZCUVVVN1FVRkJUeXhqUVVGRkxGRkJRVTBzU1VGQlJTeEpRVUZKTEZWQlFWVXNRMEZCUXp0QlFVRkZMR05CUVVVc1UwRkJUeXhKUVVGSkxGZEJRVmNzUTBGQlF6dEJRVUZGTEdOQlFVVXNVMEZCVHl4TFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRE8wRkJRVVVzWTBGQlJTeFRRVUZQTEV0QlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNN1FVRkJSU3hqUVVGRkxGVkJRVkVzU1VGQlNTeFpRVUZaTEVOQlFVTTdRVUZCUlN4alFVRkZMRlZCUVZFc1MwRkJSeXhKUVVGSkxGbEJRVmtzUTBGQlF6dEJRVUZGTEdOQlFVVXNWVUZCVVN4SlFVRkpMR0ZCUVdFc1EwRkJRenRCUVVGRkxHTkJRVVVzVlVGQlVTeExRVUZITEVsQlFVa3NZVUZCWVN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHTkJRVWtzU1VGQlJTeEZRVUZGTEd0Q1FVRm5RanRCUVVGVExIRkNRVUZUTEV0QlFVY3NSVUZCUlN3d1JFRkJkMFFzU1VGQlJTeDNRa0ZCZDBJN1FVRkRNMWtzWTBGQlJ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVN1FVRkJRU3h0UWtGQmJVSXNSVUZCUlR0QlFVRlhMR2RDUVVGRkxFVkJRVVU3UVVGQlFTeHRRa0ZCYlVJc1NVRkJSU3hKUVVGSkxGbEJRVmtzVDBGQlR5eEZRVUZETEZOQlFWRXNTVUZCUlN4UFFVRk5MRk5CUVZFc1QwRkJUU3hSUVVGUExFdEJRVVVzUTBGQlF5eEhRVUZGTEVWQlFVVXNSVUZCUlN4clFrRkJhMEk3UVVGQmJVSXNhMEpCUVUwc1JVRkJSU3cyVGtGQk5rNHNSMEZCUlN4TFFVRkhMRVZCUVVVc01rZEJRVEpITEVkQlEzQm5RaXhOUVVGTkxGbEJRVms3UVVGQlJTeFpRVUZGTzBGQlFVVXNZMEZCUlN4RlFVRkZMRTlCUVU4N1FVRkJWeXhqUVVGSkxFbEJRVWNzUzBGQlJ5eERRVUZETEVkQlFVVXNTMEZCUnl4RFFVRkRMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzUzBGQlJ6dEJRVUZGTEcxQ1FVRlRMRWxCUVVjN1FVRkJReXh0UWtGQlR5eHBRa0ZCWlN4SlFVRkZPMEZCUVVFc1ZVRkJSVHRCUVVGRExHTkJRVWtzU1VGQlJTeEhRVUZGTEV0QlFVY3NUVUZCU3l4SlFVRkZPMEZCUVVzc2JVSkJRVk1zUzBGQlNUdEJRVUZETzBGQlFVa3NZMEZCUlN3d1FrRkJkMElzUlVGQlJTeDFRa0ZCZFVJc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4TFFVRkpPMEZCUVVNN1FVRkJTU3hqUVVGRkxEQkNRVUYzUWl4RlFVRkZMSFZDUVVGMVFpeERRVUZETzBGQlFVVXNaMEpCUVVjc1MwRkJSeXhOUVVGSkxGTkJRVThzVDBGQlN5eGpRVUZqTEVWQlFVVXNSMEZCUlN4TFFVRkhMRTlCUVUwc1NVRkJSenRCUVVGRExHdENRVUZKTEVsQlFVVTdRVUZCUlN4clFrRkJSVHRCUVVGTExHZENRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkJMRlZCUVVNN1FVRkRibGNzYlVKQlFWTXNSVUZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWNzUlVGQlJUdEJRVUZSTEdkQ1FVRkZMRkZCUVZFc1EwRkJRenRCUVVGRkxHZENRVUZGTEdGQlFWY3NTVUZCUlR0QlFVRkpMR05CUVVVc1EwRkJRenRCUVVGRkxHZENRVUZGTzBGQlFVY3NaMEpCUVVVN1FVRkJSU3huUWtGQlJTeEpRVUZKTEZsQlFWa3NZVUZCWVN4SlFVRkZMREJEUVVFd1F6dEJRVUZGTEdOQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGTk8wRkJRVUVzVlVGQlJUdEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHMUNRVUZQTEVWQlFVVXNWMEZCVnl4MVEwRkJkVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1R0QlFVRkZMR05CUVVVN1FVRkJlVUlzWVVGQlJ5eERRVUZETEUxQlFVa3NTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJSeXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJSeXhMUVVGSExFdEJRVWM3UVVGQlJTeHhRa0ZCVHl4SlFVRkpMRmRCUVZjc1EwRkJRenRCUVVGRkxHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVczdRVUZCUVN4VlFVRnJSRHRCUVVNM1dpeHRRa0ZCVXl4SFFVRkhMRWRCUVVVN1FVRkJReXhuUWtGQlJ5eERRVUZETEUxQlFVa3NUVUZCU1N4SlFVRkhPMEZCUVVNc2EwSkJRVWNzWTBGQldTeFBRVUZQTEZOQlFVOHNRMEZCUXl4RlFVRkZMRmRCUVZjc1UwRkJVenRCUVVGRkxIVkNRVUZQTEUxQlFVMHNSMEZCUlN4RlFVRkRMR0ZCUVZrc1kwRkJZU3hEUVVGRExFVkJRVVVzUzBGQlN5eFBRVUZITzBGQlFVTXNjMEpCUVVjc1EwRkJReXhGUVVGRk8wRkJRVWNzTUVKQlFVc3NlVU5CUVhWRExFbEJRVVU3UVVGQlNTeDVRa0ZCVHl4RlFVRkZMRmxCUVZrN1FVRkJRU3huUWtGQlF5eERRVUZETEVWQlFVVXNUVUZCVFN4TlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRVVVzYTBKQlFVYzdRVUZCUlN4MVFrRkJUeXhKUVVGSkxGRkJRVkVzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4dlFrRkJSU3hIUVVGRkxFOUJRVWNzUlVGQlJTeEpRVUZKTEZkQlFWY3NRMEZCUXl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGQkxHZENRVUZETEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVNc2JVSkJRVThzVVVGQlVTeFJRVUZSTEVWQlFVVXNTMEZCU3l4TlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCVHl4SFFVRkhMRU5CUVVNc1JVRkJSU3hMUVVGTExFOUJRVWNzV1VGQldTeFpRVUZaTEVkQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhQUVVGSExFTkJRVU1zUlVGQlJTeExRVUZMTEVkQlFVVXNUMEZCUnp0QlFVRkRMR2RDUVVGRkxEUkRRVUV3UXl4RFFVRkRPMEZCUVVVc1owSkJRVVVzUTBGQlF6dEJRVUZCTEZsQlFVTXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkRNV1VzYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlNTeEpRVUZGTzBGQlFVVXNiVUpCUVU4c1MwRkJSeXhqUVVGWkxFOUJRVThzV1VGQldTeDNRa0ZCYzBJc1IwRkJSeXhEUVVGRExFdEJRVWNzUlVGQlJTeFhRVUZYTEZOQlFWTXNTMEZCUnl4TFFVRkhMR05CUVZrc1QwRkJUeXhSUVVGTkxFZEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUlN4TlFVRk5MRWRCUVVVc1JVRkJReXhoUVVGWkxHTkJRV0VzUTBGQlF5eEZRVUZGTEV0QlFVc3NUMEZCUnl4WlFVRlpMSEZDUVVGeFFpeEhRVUZGTEVOQlFVTXNSVUZCUlN4TFFVRkxMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zWjBKQlFVVXNiME5CUVd0RExFTkJRVU03UVVGQlJTeG5Ra0ZCUlN3eVEwRkJNa003UVVGQlJTeHhRa0ZCVHl4SFFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzV1VGQlF5eERRVUZETEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc1kwRkJTVHRCUVVGRkxHMUNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMR2xDUVVGTExFOUJRVXM3UVVGQllTeHBRa0ZCU3l4VlFVRlJMR2REUVVGblF5eERRVUZETzBGQlFVa3NhVUpCUVVzc1UwRkJUenRCUVVGQkxGVkJRVU03UVVGRGVHUXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWTBGQlJTeFZRVUZWTzBGQlFVVXNZMEZCUlN4WlFVRlZMRTFCUVVrN1FVRkJRU3haUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHRkJRVU1zU1VGQlJTeEZRVUZGTEVkQlFVY3NRMEZCUXl4TlFVRkpMRVZCUVVVN1FVRkJSU3hqUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRVZCUVVVc1IwRkJSenRCUVVGRkxHZENRVUZITEVOQlFVTTdRVUZCUlN4eFFrRkJUenRCUVVGRkxHTkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZCUlN4alFVRkZMRWRCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVVU3UVVGQlJTeGpRVUZGTEV0QlFVY3NSVUZCUlR0QlFVRkhMR2RDUVVGSkxFbEJRVVVzUlVGQlF5eExRVUZKTEU5QlFVMHNaVUZCWXl4RlFVRkZMRWxCUVVjc1MwRkJTU3hGUVVGRkxFbEJRVWNzWVVGQldTeEZRVUZGTEVkQlFVVTdRVUZCUlN4cFFrRkJSeXhGUVVGRkxFMUJRVTA3UVVGQlJTeGpRVUZGTEZsQlFWa3NSMEZCUlN4RlFVRkZMRVZCUVVVN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTTdRVUZEYWxJc1kwRkJTU3hMUVVGSExHVkJRV0VzVDBGQlR5eGpRVUZaTEVsQlFVa3NXVUZCV1N4TlFVRk5MRWxCUVVVc1VVRkJUeXhMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVXNTVUZCUlR0QlFVRkZMR2xDUVVGSkxFbEJRVVVzUjBGQlJTeEZRVUZGTEVOQlFVTXNTMEZCUnl4RlFVRkZMRXRCUVVjN1FVRkJTU3huUWtGQlJUdEJRVUZGTEdkQ1FVRkhMRXRCUVVjc1NVRkJSU3hMUVVGSExFVkJRVVVzVlVGQlVUdEJRVUZITEhGQ1FVRlBMRWRCUVVjc1QwRkJUeXhGUVVGRkxHdENRVUZyUWl4dlFrRkJhMElzUlVGQlJTeE5RVUZOTEVkQlFVVXNRMEZCUXl4SlFVRkZMRVZCUVVVc1UwRkJVeXhIUVVGRkxFTkJRVU1zUTBGQlF6dEJRVUZGTEdsQ1FVRkpMRWxCUVVVc1NVRkJSeXhKUVVGRkxFdEJRVWM3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1IwRkJSenRCUVVGRkxHdENRVUZITEVsQlFVVXNTMEZCU1R0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZITEVsQlFVVTdRVUZCUnl4dlFrRkJSeXhSUVVGTkxFbEJRVVU3UVVGQlN5eDFRa0ZCUnl4UFFVRlBMR05CUVdNc1NVRkJSU3hQUVVGTExFbEJRVVVzUTBGQlF6dEJRVUZCTEhGQ1FVRk5PMEZCUVVNc2MwSkJRVWtzU1VGQlJTeEZRVUZGTEVkQlFVY3NTVUZCUlR0QlFVRkhMSE5DUVVGRkxGRkJRVTBzU1VGQlJTeFJRVUZOTEVsQlFVVXNUMEZCU3l4TFFVRkhMRXRCUVVjc1NVRkJSU3hMUVVGSExFbEJRVVVzVFVGQlNTeExRVUZITEV0QlFVY3NTMEZCUnl4TFFVRkhMRWxCUVVVc1JVRkJSU3hIUVVGSExFbEJRVVU3UVVGQlJ5d3dRa0ZCVFN4SlFVRkZMRXRCUVVjc1QwRkJUeXhoUVVGaExFTkJRVU1zUzBGQlJ5eExRVUZITEU5QlFVMHNTMEZCUnl4UFFVRlBMR0ZCUVdFc1VVRkJUU3hMUVVOd1ppeEpRVUZITEZGQlFVMHNTVUZCUlN4SlFVRkpPMEZCUVVFc1owSkJRVVU3UVVGQlFTeGpRVUZETzBGQlFVMHNjVUpCUVVjc1QwRkJUeXhoUVVGaExFTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNUMEZCU3l4UFFVRkxMRXRCUVVjc1IwRkJSeXhGUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVsQlFVVTdRVUZCUnl4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJSVHRCUVVGRkxHZENRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVVVzUjBGQlJ6dEJRVUZGTEd0Q1FVRkhMRVZCUVVVN1FVRkJUeXhyUWtGQlJTeFBRVUZQTEVOQlFVTTdRVUZCUlN4clFrRkJSVHRCUVVGQkxGbEJRVVU3UVVGQlF5eGpRVUZGTEVkQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRGFFMHNZMEZCU1N4TFFVRkhMRTlCUVVjN1FVRkJReXhuUWtGQlJUdEJRVUZGTEdkQ1FVRkhPMEZCUVVVc2IwSkJRVTBzUjBGQlJ5eERRVUZETEVkQlFVVTdRVUZCVXl4bFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzU1VGQlJUdEJRVUZCTEZsQlFVTXNTVUZCUnl4RFFVRkRPMEZCUVVFc1dVRkJSU3hKUVVGSExFTkJRVU03UVVGQlFTeFpRVUZGTEVsQlFVY3NRMEZCUXp0QlFVRkJMRmxCUVVVc1NVRkJSeXhEUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEZkQlFWVTdRVUZCUXl4clFrRkJSU3hGUVVGRkxFZEJRVWNzU1VGQlJTeEZRVUZGTEVkQlFVYzdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hKUVVGSExGZEJRVlU3UVVGQlF5eHBRa0ZCUnl4UlFVRlJMRTFCUVVrN1FVRkJReXh0UWtGQlJ6dEJRVUZGTEd0Q1FVRkZMRWRCUVVjc1RVRkJTU3hIUVVGSExFTkJRVU03UVVGQlFTeGpRVUZETEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hKUVVGSExGZEJRVlU3UVVGQlF5eG5Ra0ZCUlN4M1FrRkJjMElzUlVGQlJUdEJRVUZITEdkQ1FVRkZMR2RDUVVGakxFVkJRVVU3UVVGQlJ5eG5Ra0ZCUlN4blFrRkJZeXhGUVVGRk8wRkJRVWNzT0VKQlFXTTdRVUZCUVN4WlFVRkZPMEZCUVVFc1dVRkJSU3hKUVVGSExGTkJRVk1zUjBGQlJUdEJRVUZETEd0Q1FVRkZPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzU1VGQlJ5eERRVUZETEd0Q1FVRnJRanRCUVVGQkxGbEJRVVVzU1VGQlJ5eFhRVUZWTzBGQlFVTXNkVUpCUVZFc1MwRkJTeXhGUVVGRk8wRkJRVWNzYlVKQlFVY3NRMEZCUXp0QlFVRkZMRzFDUVVGSkxFdEJRVXNzUlVGQlJUdEJRVUZITEcxQ1FVRkhMRU5CUVVNN1FVRkJSU3huUWtGQlJTeExRVUZITEVOQlFVTTdRVUZCUlN4blFrRkJSU3hMUVVGSExFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4TFFVRkhMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEZOQlFWTXNSMEZCUlR0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJUdEJRVUZITEhGQ1FVRlBMRVZCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEhRVUZITEU5QlFVOHNSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhIUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4TFFVRkhPMEZCUVVVc2FVSkJRVWNzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWxCUVVjc1YwRkJWVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVU4wWml4SlFVRkhMRmRCUVZVN1FVRkJReXhuUWtGQlJTeEhRVUZITEZGQlFWRXNUMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEU5QlFVY3NTVUZCU1N4UlFVRlJMRTlCUVVjN1FVRkJReXhuUWtGQlJTeFpRVUZWTEU5QlFVYzdRVUZCUXl4dlFrRkJSU3hGUVVGRk8wRkJRVXNzYjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVVrc2IwSkJRVWNzUlVGQlJTeG5Ra0ZCWXl4RlFVRkZMR2RDUVVGakxFVkJRVVVzUjBGQlJUdEJRVUZETEhOQ1FVRkpMRWxCUVVVc1JVRkJSU3hIUVVGSExFVkJRVVVzUlVGQlJUdEJRVUZGTEhOQ1FVRkZMRVZCUVVVc1dVRkJXU3hIUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVWQlFVVXNORU5CUVRCRExFbEJRVVVzZVVKQlFYVkNMRVZCUVVVc1pVRkJZU3h4UTBGQmNVTTdRVUZCUVN4blFrRkJReXhYUVVGVExHMUNRVUZwUWp0QlFVRkZMRzlDUVVGRk8wRkJRVUVzZVVKQlFWVXNhMEpCUVdkQ08wRkJRVVVzY1VKQlFVY3NRMEZCUXp0QlFVRkJMSGxDUVVGVkxHOUNRVUZyUWp0QlFVRkZMSEZDUVVGSExFVkJRVVVzVFVGQlRUdEJRVUZCTEhsQ1FVRlZMR2xDUVVGbE8wRkJRVVVzYzBKQlFVVXNSVUZCUlN4UlFVRlBMRWxCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU1zUjBGQlJTeFBRVUZQTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVVc1IwRkJSeXhEUVVGRExFZEJRVVVzUjBGQlJ5eERRVUZETEVkQlFVVXNSVUZCUlN4SFFVRkhPMEZCUVVFc2IwSkJRVThzUlVGQlJTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVRkJMRzlDUVVOb1owSTdRVUZCUVN4clFrRkJReXhIUVVGRkxFVkJRVVVzUzBGQlJ6dEJRVUZCTEhsQ1FVRlZMRzFDUVVGcFFqdEJRVUZGTEc5Q1FVRkZMRWRCUVVjc1JVRkJSU3hOUVVGTkxFVkJRVVVzV1VGQldTeEZRVUZETEV0QlFVa3NVMEZCVVN4RFFVRkRPMEZCUVVFc2VVSkJRVlVzWVVGQlZ6dEJRVUZGTEc5Q1FVRkZMRk5CUVU4c1RVRkJSeXhGUVVGRkxFTkJRVU03UVVGQlFTeDVRa0ZCVlN4WlFVRlZPMEZCUVVVc2QwSkJRVTBzV1VGQlZTeEZRVUZGTEZkQlFWTXNUMEZCU3l4RlFVRkZMRWxCUVVrN1FVRkJRU3g1UWtGQlZTeHRRa0ZCYVVJc1JVRkJSVHRCUVVGUExHOUNRVUZGTEZsQlFWa3NRMEZCUXp0QlFVRkJMSGxDUVVGVkxHdENRVUZuUWp0QlFVRkZMRzlDUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpPMEZCUVVFN1FVRkJUeXgxUWtGQlJ5eEZRVUZGTEc5RFFVRnJReXhEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZGTEdkQ1FVRkZMRlZCUVZFc1QwRkJSenRCUVVGRExHdENRVUZGTERKQ1FVRjVRaXhGUVVGRkxGZEJRVk1zVFVGQlNTeEZRVUZGTEZOQlFVOHNUMEZCU3l4RlFVRkZMRTlCUVU4N1FVRkJSU3h6UWtGQlRUdEJRVUZCTEdOQlFVVTdRVUZCUlN4dlFrRkJTU3hGUVVGRkxFZEJRVWNzVjBGQlZTeFRRVUZUTEVkQlFVVTdRVUZCUXl4clFrRkJSU3hWUVVGVkxFVkJRVU1zVFVGQlN5eEZRVUZETEVOQlFVTTdRVUZCUVN4alFVRkRMRU5CUVVNc1IwRkJSU3hGUVVGRkxFZEJRVWNzVTBGQlVTeFRRVUZUTEVkQlFVVTdRVUZCUXl4clFrRkJSU3hSUVVGUkxFTkJRVU03UVVGQlFTeGpRVUZETEVOQlFVTTdRVUZETDJZc2EwSkJRVWtzU1VGQlJTeERRVUZETEVkQlFVVXNTVUZCUlN4RFFVRkRMRlZCUVZNc1YwRkJWU3hUUVVGUkxGVkJRVlVzUjBGQlJUdEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSU3hyUWtGQlJTeGxRVUZsTEVOQlFVTXNTMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJRenRCUVVGRkxHZENRVUZGTEZsQlFWa3NSVUZCUXl4TFFVRkpMRkZCUVU4c1ZVRkJVeXhIUVVGRkxGZEJRVlVzUlVGQlJTeDFRa0ZCY1VJc1dVRkJWeXhaUVVGWExFZEJRVVVzV1VGQlZ5eEhRVUZGTEVOQlFVTTdRVUZCUVN4WlFVRkRMRU5CUVVNN1FVRkJRU3haUVVGRkxFbEJRVWNzVTBGQlV5eEhRVUZGTzBGQlFVTXNaMEpCUVVVN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEZkQlFWVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFZEJRVWNzTmtKQlFUWkNPMEZCUVVVc2EwSkJRVVVzU1VGQlNTeFBRVUZQTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWxCUVVjc1YwRkJWVHRCUVVGRExHMUNRVUZITEVWQlFVVXNSMEZCUnl4WFFVRlRMRVZCUVVVc1IwRkJSeXhIUVVGRkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUVVjc2NVSkJRVThzUlVGQlJTeEhRVUZITEVsQlFVazdRVUZCUVN4WlFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRkxGbEJRVVVzVlVGQlVUdEJRVUZGTEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc2JVSkJRVXNzU1VGQlJTeEZRVUZGTzBGQlFWRXNaMEpCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlEzQmlMRmxCUVVVc2MwSkJRVzlDTEZkQlFWVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFVkJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU03UVVGQlJTeGxRVUZITEVkQlFVVXNTVUZCUlN4RFFVRkRPMEZCUVVVc1pVRkJSeXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZGTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEdWQlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXhqUVVGSkxFdEJRVWNzUTBGQlF6dEJRVUZGTEZsQlFVVXNiVUpCUVdsQ0xGTkJRVk1zUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeHJRa0ZCU1N4TFFVRkhMRWRCUVVjc1YwRkJVeXhIUVVGSExGTkJRVThzU1VGQlJTeEpRVUZITEVkQlFVY3NRMEZCUXl4SlFVRkZMRWxCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGQlJ5eG5Ra0ZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3hqUVVGRkxFbEJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2FVSkJRVXNzUzBGQlJ5eEpRVUZGTzBGQlFVY3NhVUpCUVVzc1MwRkJSeXhUUVVGVExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4RlFVRkZMRXRCUVVzc1MwRkJSeXhMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkZMR2xDUVVGTExFdEJRVWNzVTBGQlV5eEhRVUZGTzBGQlFVTXNaMEpCUVVVc1JVRkJSU3hMUVVGTExFdEJRVWNzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJSU3hwUWtGQlN5eExRVUZITEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXNzUjBGQlJ6dEJRVUZGTEcxQ1FVRkxMRWRCUVVjc1EwRkJRenRCUVVGRkxHMUNRVUZMTEVkQlFVY3NRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJSU3hwUWtGQlN5eExRVUZITEZkQlFWVTdRVUZCUXl4blFrRkJSU3hGUVVGRkxFdEJRVXNzUzBGQlJ5eE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGQkxGVkJRVU03UVVGRE0yVXNZMEZCU1N4TFFVRkhMRWRCUVVVc1MwRkJSenRCUVVGRkxHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHMUNRVUZQTEVsQlFVVXNSVUZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF5eEpRVUZGTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZITEdWQlFXRXNUMEZCVHp0QlFVRnJRaXh4UWtGQlR5eEZRVUZGTEhGR1FVRnhSaXhIUVVGRk8wRkJRVVVzWjBKQlFVa3NTVUZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVWNzUzBGQlJ5eE5RVUZKTEVWQlFVVTdRVUZCVHl4eFFrRkJUeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hGUVVGRExFbEJRVWNzUjBGQlJTeEpRVUZITEVkQlFVVXNTVUZCUnl4SFFVRkZMRWxCUVVjc1JVRkJRenRCUVVGRkxHMUNRVUZQTEV0QlFVY3NSVUZCUlN4TFFVRkhMR1ZCUVdNc1dVRkJXU3hIUVVGRkxFTkJRVU1zUjBGQlJTeExRVUZITEVkQlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzU1VGQlJTeEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRk8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUTI1a0xHTkJRVWtzUzBGQlJ5eFBRVUZITzBGQlFVTXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNVVUZCVHl4RlFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2NVSkJRVXNzU1VGQlJTeE5RVUZKTEZGQlFVMHNTVUZCUlN4TFFVRkhMRWxCUVVVc1UwRkJUeXhMUVVGSExGTkJRVThzUzBGQlJ5eExRVUZITEVkQlFVVXNSVUZCUlN4TFFVRkhMRXRCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dFFrRkJTenRCUVVGRkxHZENRVUZITEVWQlFVVXNTVUZCUlR0QlFVRkhMSEZDUVVGUE8wRkJRVVVzWjBKQlFVa3NTVUZCUlR0QlFVRkZMR2RDUVVGRkxFbEJRVVVzU1VGQlJUdEJRVUZGTEhGQ1FVRlJMRWxCUVVVc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlR5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVVzVjBGQlZ5eERRVUZETzBGQlFVVXNhMEpCUVVjc1UwRkJUeXhMUVVGSExGTkJRVThzUjBGQlJUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1JVRkJSU3hYUVVGWExFVkJRVVVzUTBGQlF6dEJRVUZGTEc5Q1FVRkZMRlZCUVZFc1NVRkJSU3hUUVVGUExFMUJRVWtzU1VGQlJUdEJRVUZCTEdOQlFVazdRVUZCUXl4clFrRkJSeXhQUVVGTExFZEJRVVU3UVVGQlF5eHZRa0ZCUnl4TFFVRkhPMEZCUVVVN1FVRkJUU3hyUWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlR0QlFVRkJMR05CUVVNc1QwRkJTenRCUVVGRExHOUNRVUZITEZGQlFVMHNSMEZCUlR0QlFVRkRMSE5DUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZGTzBGQlFVMHNiMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVUZITzBGQlFVRXNaMEpCUVVNc1QwRkJTenRCUVVGRExITkNRVUZITEZOQlFVOHNSMEZCUlR0QlFVRkRMSGRDUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZGTzBGQlFVMHNjMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVUZITzBGQlFVRXNhMEpCUVVVc1QwRkJTenRCUVVGRExIZENRVUZITEVsQlFVVXNTMEZCUnp0QlFVRkZPMEZCUVUwc2MwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVTndaanRCUVVGSExITkNRVUZGTEZGQlFVMHNRMEZCUXl4SlFVRkZMRTFCUVVrc1MwRkJSeXhMUVVGSE8wRkJRVUVzYTBKQlFVVTdRVUZCUXl4dlFrRkJSU3hSUVVGTkxFTkJRVU1zU1VGQlJTeE5RVUZKTEV0QlFVY3NTVUZCUlR0QlFVRkJMR2RDUVVGRk8wRkJRVU1zYTBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hKUVVGRk8wRkJRVUVzWTBGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUXl4alFVRkZMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzYlVKQlFVOHNTVUZCUlR0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVa3NSMEZCUnl4SFFVRkZMRVZCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCVHl4SlFVRkZMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJ6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1NVRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWxCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZET1dRc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWxCUVVjc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zWTBGQlNTeExRVUZITEU5QlFVYzdRVUZCUXl4blFrRkJSeXhEUVVGRE8wRkJRVVVzYTBKQlFVYzdRVUZCUXl4dlFrRkJSeXhGUVVGRkxFZEJRVVVzUTBGQlF5eEZRVUZGTzBGQlFVVXNjMEpCUVVjN1FVRkJReXgzUWtGQlJTeEhRVUZITEVOQlFVTXNTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJRU3hyUWtGQlF5eFRRVUZQTEVkQlFVVTdRVUZCUXl4cFEwRkJZU3hMUVVGSExGbEJRVlVzUzBGQlJ5eEZRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR3RDUVVGRE8wRkJRVUVzWTBGQlF5eFRRVUZQTEVkQlFVVTdRVUZCUXl3MlFrRkJZU3hMUVVGSExGbEJRVlVzUzBGQlJ5eEZRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTd3lRa0ZCWVN4UFFVRlBMRkZCUVZFc1QwRkJTeXhSUVVGUkxFZEJRVWNzUlVGQlJTeEhRVUZGTEV0QlFVY3NSMEZCUlN4RFFVRkRMRVZCUVVVc1RVRkJUU3hMUVVGTExFTkJRVU1zUjBGQlJTeExRVUZITEV0QlFVa3NVVUZCVVN4TlFVRk5MRVZCUVVVc1IwRkJSU3hMUVVGSExFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVVTdRVUZCUXl4WlFVRkZMRzlEUVVGclF6dEJRVUZITEcxQ1FVRlRMRWxCUVVjN1FVRkJReXhuUWtGQlNTeEpRVUZGTEVWQlFVVTdRVUZCUlN4clFrRkJTU3hIUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZITEUxQlFVa3NSMEZCUnl4RFFVRkRPMEZCUVVFc1ZVRkJSVHRCUVVGRExGbEJRVVVzWlVGQllUdEJRVU01WlN4alFVRkpMRWxCUVVVc1QwRkJSeXhOUVVGSkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVsQlFVVXNUMEZCU3l4TlFVRkpMRWxCUVVVc1RVRkJTeXhMUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZITEVsQlFVY3NTVUZCUnl4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEVkQlFVY3NSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGSExFbEJRVWNzU1VGQlJ5eExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFZEJRVWM3UVVGQlJTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGUExFbEJRVVVzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4VlFVRkhPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEhRVUZITEVOQlFVTXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzYVVKQlFVY3NSMEZCUnl4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1QwRkJSenRCUVVGRExHZENRVUZKTEVsQlFVVXNSMEZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVU3UVVGQlJTeGxRVUZITEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGRGRGY3NiVUpCUVZNc1JVRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRlZCUVZVc1UwRkJUeXhIUVVGRkxFbEJRVVU3UVVGQlZTeHRRa0ZCVHl4SFFVRkhMRTFCUVVrN1FVRkJReXgxUWtGQlVTeEpRVUZGTEVkQlFVY3NTVUZCUlN4RFFVRkRMRWRCUVVVc1NVRkJSU3hMUVVGSExFZEJRVVVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4TFFVRkpPMEZCUVVNc2IwSkJRVWtzU1VGQlJTeEZRVUZGTEVsQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGSExFVkJRVVVzU1VGQlJTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJReXh4UWtGQlR5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlF6TktMR05CUVVrc1MwRkJSeXhEUVVGRExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNTMEZCUnl4TlFVRkpPMEZCUVVNc1owSkJRVWNzUTBGQlF5eEpRVUZITzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRExFMUJRVXNzV1VGQlZ5eFRRVUZSTEZsQlFWY3NUVUZCU3l4TFFVRkpMRXRCUVVrc1MwRkJTU3hOUVVGTExHdENRVUZwUWl4UFFVRk5MRmxCUVZVc1QwRkJUeXhoUVVGWExGVkJRVlVzWVVGQlZ5eFZRVUZWTEZWQlFWVXNRMEZCUXl4TFFVRkhMRXRCUVVzc1VVRkJVU3hMUVVGSkxFZEJRVWNzU1VGQlJTeFZRVUZUTEVkQlFVVXNUVUZCU1N4cFFrRkJaMElzUjBGQlJUdEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSeXd5UWtGQlV5eEhRVUZITEVOQlFVTXNTVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGSkxFbEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSU3hyUWtGQlJTeExRVUZMTEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGQlJTeHRRa0ZCUnp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVVXNSMEZCUlR0QlFVTjBWeXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVTdRVUZCUlN4bFFVRkhMRVZCUVVVc1VVRkJVU3hUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1NVRkJSVHRCUVVGRkxHdENRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRWxCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEcxQ1FVRkpMRWxCUVVVc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlR5eEZRVUZGTzBGQlFVVXNiVUpCUVVjc1JVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2FVSkJRVWNzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVWNzUlVGQlJTeFRRVUZQTzBGQlFVRXNXVUZCUXl4RFFVRkRPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzU1VGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4blFrRkJTU3hKUVVGRkxFZEJRVWM3UVVGQlJTeGpRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRk8wRkJRVThzWjBKQlFVa3NTVUZCUlR0QlFVRkZMR05CUVVVc1VVRkJVU3hUUVVGVExFZEJRVVU3UVVGQlF5eHRRa0ZCUnl4RlFVRkZMRk5CUVU4N1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlJTeGpRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJUdEJRVUZETEcxQ1FVRlBMRWxCUVVVc1JVRkJSU3hKUVVGSExFZEJRVVVzUTBGQlF5eEpRVUZGTzBGQlFVRXNWVUZCUlR0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGUExFbEJRVVVzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRk8wRkJRVUVzVlVGQlJUdEJRVU5xWkN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGUExFbEJRVVVzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVU3UVVGQlFTeFZRVUZGTzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1RVRkJTeXhEUVVGRExFZEJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTMEZCU1R0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJTeEZRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NRMEZCUXp0QlFVRkZMRzFDUVVGSE8wRkJRVVVzZFVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMSE5DUVVGSkxFdEJRVWNzVDBGQlN5eE5RVUZKTEUxQlFVa3NTVUZCUlN4TFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZGTEVWQlFVVXNVMEZCVHl4TFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZETEcxQ1FVRkhPMEZCUVVFc1dVRkJRenRCUVVGRExHTkJRVVVzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFVkJRVVVzUjBGQlJTeExRVUZITEVOQlFVTXNTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRVZCUVVVN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVVXNRMEZCUXp0QlFVRkZMR1ZCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUlVGQlJTeE5RVUZOTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRMnBtTEdOQlFVa3NTMEZCUnl4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHVkJRVWNzUlVGQlJTeEpRVUZKTEVkQlFVVXNUVUZCU1N4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVOb1F5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVa3NTVUZCUlN4WlFVRlZMRTlCUVU4c1NVRkJSU3hGUVVGRkxGTkJRVk1zU1VGQlJTeExRVUZITEVsQlFVY3NSVUZCUlN4VFFVRlBPMEZCUVVjc2IwSkJRVVVzUlVGQlJTeERRVUZETEVsQlFVVTdRVUZCUlN4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zY1VKQlFWTXNSVUZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXgxUWtGQlV5eEZRVUZGTEVsQlFVYzdRVUZCUXl4MVFrRkJUeXhKUVVGRkxFdEJRVWNzUzBGQlJ5eEpRVUZGTEV0QlFVY3NTVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJReXhyUWtGQlNUdEJRVUZGTEhGQ1FVRkxMRWxCUVVVc1JVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4TlFVRkpMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEVWQlFVVXNVMEZCVXl4RFFVRkRMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVVVGQlVTeEpRVUZGTEVWQlFVVXNVVUZCVVN4RFFVRkRPMEZCUVVjc2NVSkJRVTg3UVVGQlFTeFpRVUZETzBGQlFVTXNjVUpCUVZNc1JVRkJSU3hIUVVGRk8wRkJRVU1zYzBKQlFVOHNSVUZCUlN4UFFVRlBMRWRCUVVVN1FVRkJRU3huUWtGQlF5eExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEpRVUZGTEVkQlFVVXNTVUZCUnl4RlFVRkZPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1R0QlFVRkJMRzlDUVVGTExFVkJRVVVzV1VGQldUdEJRVUZCTEc5Q1FVTTFaanRCUVVGQkxHOUNRVUZGTzBGQlFVRXNhMEpCUVVNN1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hKUVVGRkxFZEJRVVVzU1VGQlJ5eEZRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh4UWtGQlV5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVU3UVVGQlJ5eHRRa0ZCU1N4SlFVRkZMRWxCUVVrc1MwRkJUU3hKUVVGSkxFdEJRVXNzUlVGQlJTeExRVUZITEUxQlFVc3NSMEZCUlN4RFFVRkRMRVZCUVVjc1VVRkJVU3hEUVVGRExFZEJRVVVzU1VGQlJTeExRVUZITzBGQlFVTXNiMEpCUVVrc1NVRkJSU3hGUVVGRkxGTkJRVk1zUjBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUTBGQlF6dEJRVUZGTEc5Q1FVRkhMRWxCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeDFRa0ZCUnl4SlFVRkZMRVZCUVVVc1VVRkJVU3hKUVVGRkxFZEJRVVVzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUlN4TFFVRkhMRWxCUVVVc1JVRkJSU3hUUVVGVExFbEJRVVVzUTBGQlF5eExRVUZITEVWQlFVVXNVMEZCVXl4RFFVRkRMRWRCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzV1VGQldTeEpRVUZGTEVOQlFVTTdRVUZCUVN4eFFrRkJUenRCUVVGRExHOUNRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRWxCUVVVc1EwRkJRenRCUVVGRk8wRkJRVUVzWjBKQlFVczdRVUZCUVN4alFVRkRPMEZCUVVNc2EwSkJRVVVzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SlFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4SlFVRkpPMEZCUVVFc1owSkJRVXNzUlVGQlJTeFpRVUZaTzBGQlFVRXNaMEpCUTI1bU8wRkJRVUVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4eFFrRkJUeXhMUVVGSExFVkJRVVVzUjBGQlJTeERRVUZETEVsQlFVVXNTMEZCUnl4RlFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVsQlFVVXNSVUZCUlN4WlFVRlpMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVU3UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJReXhKUVVGSExFVkJRVVVzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1NVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlJTeEhRVUZGTzBGQlFVVXNaMEpCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRTFCUVVzN1FVRkJRU3hqUVVGMVFpeE5RVUZMTzBGQlFVRXNZMEZCVnl4TlFVRkxPMEZCUVVFc1kwRkJWeXhOUVVGTE8wRkJRVUVzWTBGQlN5eE5RVUZMTzBGQlFVRXNZMEZCWXl4TlFVRkxPMEZCUVVFc1kwRkJVU3hOUVVGTE8wRkJRVUVzWTBGQlZ5eE5RVUZMTzBGQlFVRXNZMEZETVdVc1RVRkJTenRCUVVGQkxHTkJRVmNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVmNzVDBGQlRUdEJRVUZCTEdOQlFWY3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEZsQlFVazdRVUZCUlN4eFFrRkJVU3hMUVVGTE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVrc1QwRkJUeXhIUVVGRkxFZEJRVWNzUjBGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkZMR2RDUVVGSkxFdEJRVWNzTWtSQlFUSkVMRTFCUVUwc1IwRkJSeXhIUVVGRkxFdEJRVWNzZDBaQlFYZEdMRTFCUVUwc1IwRkJSenRCUVVGRkxHZENRVUZGTzBGQlFVRXNZMEZCUXl4TlFVRkxMRTlCUVVjc1IwRkJSeXhGUVVGRkxFVkJRVVVzUlVGQlJTeFZRVUZWTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUTNKbUxFMUJRVXNzVDBGQlJ5eEhRVUZITEVWQlFVVXNSVUZCUlR0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFZEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVXNWVUZCVlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEhRVUZITEVWQlFVVXNSVUZCUlR0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFZEJRVWNzUlVGQlJTeExRVUZITEZGQlFVMHNUVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUnl4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkhPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRlZCUVZVc1EwRkJRenRCUVVGQkxHTkJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZITEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSenRCUVVGRExHOUNRVUZGTEVWQlFVVTdRVUZCUnl4eFFrRkJSeXhKUVVGRkxFbEJRVVVzUzBGQlJ5eExRVUZITEUxQlFVa3NTMEZCUnp0QlFVRkpMSFZDUVVGUExFVkJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSE8wRkJRVU1zZVVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSExFVkJRVVVzUzBGQlJ5eEhRVUZGTEUxQlFVa3NSVUZCUlN4RlFVRkZMRXRCUVVjc1NVRkJTU3hKUVVGRkxFdEJRVWNzU1VGQlNTeEhRVUZITzBGQlFVVTdRVUZCUXl4MVFrRkJUeXhGUVVGRkxFVkJRVVVzUzBGQlJ5eEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEV0QlFVY3NSMEZCUlN4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhOUVVGSk8wRkJRVUVzWTBGQlN5eE5RVUZMTEU5QlFVY3NTMEZCUnl4RlFVRkZMRTFCUVVrc1MwRkJSeXhGUVVGRkxFdEJRVWNzVDBGQlN6dEJRVUZCTEdOQlFVc3NUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGSExFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUVUZCU1R0QlFVRkJMR05CUVVzc1RVRkJTeXhQUVVGSExFVkJRVVVzVFVGQlNUdEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1MwRkJTeXhQUVVGUExFVkJRVVVzUzBGRGVHWXNTVUZCUlN4RlFVRkZMRTFCUVVrc1EwRkJReXhIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnp0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUzBGQlN5eFBRVUZQTEVWQlFVVXNTMEZCUnl4TFFVRkhMRVZCUVVVc1MwRkJSeXhMUVVGSExFdEJRVWNzUTBGQlF6dEJRVUZGTEhOQ1FVRkpMRVZCUVVVc1MwRkJSeXhOUVVGSkxFVkJRVVVzUzBGQlJ5eExRVUZITEV0QlFVYzdRVUZCU1N4dlFrRkJSenRCUVVGRkxIZENRVUZKTEUxQlFVa3NTMEZCUnl4RlFVRkZMRXRCUVVjc1RVRkJTU3hGUVVGRkxFMUJRVWtzUjBGQlJTeExRVUZITEV0QlFVY3NTMEZCUnl4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFMUJRVWtzU1VGQlJUdEJRVUZCTEhGQ1FVRlJPMEZCUVVNc2MwSkJRVVU3UVVGQlJ5eHpRa0ZCU1N4TFFVRkhMRVZCUVVVc1MwRkJSeXhKUVVGRkxFVkJRVVVzUzBGQlJ5eExRVUZITzBGQlFVVXNiVUpCUVVNc1MwRkJSeXhMUVVGSExFdEJRVWNzUzBGQlJ5eEZRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1RVRkJTVHRCUVVGQkxHZENRVUZITzBGQlFVTXNkVUpCUVU4c1JVRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSVHRCUVVGQkxHTkJRVWNzVFVGQlN5eFBRVUZITEVWQlFVVXNTMEZCU3l4UFFVRlBMRVZCUVVVc1MwRkJSeXhMUVVGSExFVkJRVVVzUzBGQlJ5eExRVUZITEV0QlFVY3NRMEZCUXl4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVVVGQlNTeEZRVUZGTEV0QlFVY3NUVUZCVFN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hEUVVGRE8wRkJRVUVzWTBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4TFFVRkhPMEZCUVVFc1kwRkJTeXhOUVVGTExFOUJRVWM3UVVGQlF5eHZRa0ZCUlN4RlFVRkZPMEZCUVVjc2IwSkJRVWtzU1VGQlJTeExRVUZITzBGQlFVVXNiMEpCUVVVc1MwRkJTeXhKUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZITEhkQ1FVRlBMRWxCUVVVc1RVRkJTU3hQUVVGTExFOUJRVThzVlVGQlVTeEpRVUZGTEV0QlFVY3NUVUZCU1N4SlFVRkZMRWRCUVVjc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGQlFTeGpRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSVHRCUVVGQkxHTkJRVWNzVFVGQlN5eE5RVUZKTzBGQlFVRXNXVUZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVU3UVVGQlFTeGpRVUZSTzBGQlFVRXNZMEZEYm1ZN1FVRkJRU3haUVVGVk8wRkJRVVVzYVVKQlFVa3NTMEZCU3p0QlFVRkZMR2RDUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZKTEVsQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVrc1QwRkJUeXhIUVVGRkxFZEJRVWNzUjBGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkJSeXhuUWtGQlJTeEZRVUZGTEZGQlFWRXNVMEZCVVN4SFFVRkhPMEZCUVVVc1owSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVjc1JVRkJSU3hUUVVGUE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4bFFVRkhMRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZQTEVWQlFVVXNVMEZCVHp0QlFVRkJMRlZCUVVNN1FVRkJReXhaUVVGRkxFZEJRVWM3UVVGRGRFc3NZMEZCU1N4TFFVRkhMRU5CUVVNc1RVRkJTeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NSVUZCUlN4SFFVRkZMRXRCUVVjN1FVRkJRU3haUVVGRExFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGTE8wRkJRVVVzWTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RlFVRkhMRWRCUVVjc1RVRkJTU3hIUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZGTEcxQ1FVRkhPMEZCUVVVN1FVRkJTeXh2UWtGQlRUdEJRVUZCTEZsQlFVYzdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zYVVKQlFVY3NUVUZCU1N4SFFVRkZMRU5CUVVNc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJ5eFJRVUZQTEV0QlFVVTdRVUZCUlN4blFrRkJSU3hIUVVGSE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRmxCUVZrc1JVRkJReXhMUVVGSkxHbENRVUZuUWl4UlFVRlBMRVZCUVVNc1EwRkJReXhKUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVXNUVUZCU1R0QlFVRkJMRmxCUVVjc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc2JVSkJRVWNzVFVGQlNTeEpRVUZGTEZkQlFWY3NUVUZCU1N4RlFVRkZMRU5CUVVNc1NVRkJSU3hKUVVGRkxGbEJRVmtzUlVGQlF5eGpRVUZoTEVkQlFVVXNTMEZCU1N4bFFVRmpMRU5CUVVNc1MwRkJSeXhKUVVGRkxFVkJRVVVzUjBGQlJ5eERRVUZETEUxQlFVa3NSVUZCUlN4WlFVRlpMRVZCUVVNc1MwRkJTU3hsUVVGakxFTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZEZG1kQ0xFZEJRVVVzVjBGQlZUdEJRVUZETEhGQ1FVRk5PMEZCUVVFc1dVRkJSVHRCUVVGQkxGbEJRVVVzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlN4VFFVRlRMRWRCUVVVN1FVRkJReXh0UWtGQlJ5eEZRVUZGTEVkQlFVY3NUVUZCU1N4RFFVRkRMRVZCUVVVc1NVRkJTVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHdENRVUZGTEVsQlFVVXNXVUZCVlN4SlFVRkZMRlZCUVZFc1EwRkJReXhEUVVGRExFdEJRVWNzVFVGQlNTeExRVUZITEdGQlFWY3NTVUZCUlR0QlFVRkpMSEZDUVVGTE8wRkJRVVVzYTBKQlFVVXNTVUZCU1N4TFFVRkxMRTFCUVVrc1EwRkJRenRCUVVGRkxHZENRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxHTkJRV003UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEdOQlFXTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmxCUVZrN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZsQlFWazdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMR1ZCUVdVc1NVRkJSVHRCUVVGTExHZENRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVlVGQlZUdEJRVUZGTEcxQ1FVRkhMRVZCUVVVc1VVRkJVU3hKUVVGRkxFdEJRVXNzU1VGQlNTeEZRVUZGTEdWQlFXVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF5eExRVUZITEZGQlFVMDdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGRkxFbEJRM0JtTEZsQlFWVXNTVUZCUlN4VlFVRlJMRU5CUVVNc1EwRkJReXhMUVVGSExFMUJRVWtzUzBGQlJ5eGhRVUZYTEVsQlFVVTdRVUZCU1N4eFFrRkJTenRCUVVGRkxHdENRVUZGTEVsQlFVa3NTMEZCU3l4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4VFFVRlRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUk8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFRRVUZUTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WlFVRlpMRWxCUVVVN1FVRkJTeXhuUWtGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxFOUJRVTg3UVVGQlJTeHRRa0ZCUnl4RlFVRkZMRVZCUVVVc1dVRkJXU3hEUVVGRExFbEJRVVVzUzBGQlJ5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4TFFVRkhMRVZCUVVVc2EwSkJRV3RDTzBGQlFVY3NhMEpCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXl4RlFVRkhMR3RDUVVGclFqdEJRVUZGTEd0Q1FVRkpMRWxCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXl4RlFVRkhMR3RDUVVGclFqdEJRVU42WjBJc2JVSkJRVWNzUzBGQlJ5eExRVUZITEVWQlFVVXNhMEpCUVd0Q0xFdEJRVWNzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXl4TFFVRkhPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMSEZDUVVGTE8wRkJRVVVzYTBKQlFVa3NTVUZCUlN4SlFVRkpMRXRCUVVzc1JVRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4TlFVRkxMRVZCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVkQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEZRVUZGTEVWQlFVVXNTVUZCUlN4TFFVRkhMRTFCUVVrc1EwRkJReXhIUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hGUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVkQlFVVXNRMEZCUXl4SFFVRkZMRWxCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkZMRVZCUVVVc2EwSkJRV3RDTEVkQlFVVXNTVUZCUnl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFZEJRVVVzUjBGQlJTeERRVUZETEVWQlFVY3NhMEpCUVd0Q0xFZEJRVVVzU1VGQlJ5eEpRVUZKTEV0QlFVc3NSVUZCUlN4WlFVRlpMRWRCUVVVc1IwRkJSU3hEUVVGRExFVkJRVWNzYTBKQlFXdENMRWRCUVVVc1NVRkJSU3hMUVVGTExFbEJRVWtzUjBGQlJTeERRVUZETzBGQlFVVXNhMEpCUVVVc1NVRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRTlCUVU4c1MwRkJSeXhMUVVGSExFdEJRVWNzUTBGQlF5eEpRVUZGTEVsQlFVVXNUVUZCU1N4TFFVRkhMRTlCUVVzc1NVRkJSU3hMUVVGTExFbEJRVWtzUjBGQlJTeERRVUZETEVkQlFVVXNSVUZCUlN4UlFVRlJMRVZCUVVVc1VVRkJVU3hKUVVGRkxGRkJRVTBzU1VGQlJTeEpRVUZGTEVsQlFVVXNTMEZCUnl4RlFVRkZPMEZCUVVjc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZEYm1Zc1EwRkJReXhKUVVGRkxFVkJRVVVzVDBGQlR6dEJRVUZGTEcxQ1FVRkhMRVZCUVVVc1JVRkJSU3haUVVGWkxFTkJRVU1zU1VGQlJTeExRVUZITEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkVzU1VGQlJTeEpRVUZGTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WFFVRlhPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFRRVUZUTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4UlFVRlJPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVU3UVVGQlNTeHhRa0ZCVHl4SlFVRkpMRWxCUVVVc1IwRkJSU3hMUVVGSExFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCUlN4SlFVRkZMRWxCUVVVc1EwRkJReXhMUVVGTExFMUJRVTBzU1VGQlJTeFZRVUZWTEUxQlFVa3NTVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFMUJRVTBzU1VGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRkpMRTFCUVVrc1ZVRkJWU3hOUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZGTEUxQlFVazdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eDFRa0ZCVXl4RlFVRkZMRWRCUVVVN1FVRkJReXgzUWtGQlR5eEpRVUZGTEVWQlFVVXNZVUZCWVN4RlFVRkZMRTFCUVUwc2JVSkJRVzFDTEV0QlEzQm1MRVZCUVVVc1EwRkJReXhKUVVGRk8wRkJRVUVzWTBGQlN6dEJRVUZETEhGQ1FVRkxPMEZCUVVVc2NVSkJRVXM3UVVGQlJTeHhRa0ZCU3p0QlFVRkZMR3RDUVVGSkxFdEJRVWNzYjBKQlFVa3NVVUZCVFN4WlFVRlpMRWRCUVVVc1NVRkJSU3hKUVVGSkxFdEJRVXNzUjBGQlJTeEhRVUZGTEVOQlFVTXNSMEZCUlN4SlFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRVZCUVVVc2EwSkJRV3RDTzBGQlFVVXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxHdENRVUZyUWl4SFFVRkZMRWxCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJTeExRVUZITzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTEU5QlFVOHNTMEZCUnl4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeERRVUZETzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNhMEpCUVVVc1MwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlN4SFFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNUVUZCU1N4RlFVRkZMRVZCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEhRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlFTeFpRVUZGTzBGQlFVRXNXVUZCUlN4SFFVRkZMRTFCUVVrN1FVRkJReXhuUWtGQlJTeEZRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVNc2NVSkJRVThzUzBGQlN5eEpRVUZKTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hOUVVGSk8wRkJRVU1zYjBKQlFVazdRVUZCUlN4dlFrRkJTenRCUVVGQkxGbEJRVk03UVVGQlFTeFpRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkRMSEZDUVVGUE8wRkJRVUVzV1VGQlZUdEJRVUZCTEZsQlFVVXNSMEZCUlN4TlFVRkpMRmxCUVZrc1lVRkJWeXhaUVVGWkxFbEJRVWs3UVVGQlFTeFpRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkRMSEZDUVVGUExFbEJRemRtTEhORFFVRmpMRXRCUVVzc1JVRkJSU3hUUVVGUExGVkJRVlU3UVVGQlFTeFpRVUZ0UWp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSU3hMUVVGSExFMUJRVWs3UVVGQlJTeHBRa0ZCUnl4VFFVRlBPMEZCUVVVc2EwSkJRVVVzVFVGQlNTeExRVUZITzBGQlFVVXNiVUpCUVVrc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJUdEJRVUZKTEcxQ1FVRkhMRU5CUVVNc1NVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4eFFrRkJUeXhIUVVGSExFTkJRVU1zUlVGQlJTeE5RVUZOTEUxQlFVc3NSVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3hyUWtGQlNTeEpRVUZGTEVWQlFVVXNSVUZCUlR0QlFVRlBMR3RDUVVGSExFdEJRVWNzUzBGQlJ5eGhRVUZYTzBGQlFVVXNkVUpCUVUwN1FVRkJSeXgxUWtGQlVTeEpRVUZGTEVkQlFVVXNTMEZCUnl4SFFVRkZMRXRCUVVjc1IwRkJSVHRCUVVGRExHOUNRVUZKTEVsQlFVVXNTMEZCUnl4SlFVRkZMRTFCUVVjN1FVRkJSeXh2UWtGQlJTeExRVUZMTEVsQlFVa3NSMEZCUlN4SlFVRkZMRk5CUVZNN1FVRkJSU3h2UWtGQlNTeEpRVUZGTzBGQlFVc3NiMEpCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRkZPMEZCUVVNc2MwSkJRVVVzUlVGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUlN4WlFVRlhMRXRCUVVjc1VVRkJUU3hKUVVGRkxGTkJRVThzUzBGQlN5eEpRVUZGTEVWQlFVVXNUMEZCVHl4aFFVRlhMRlZCUVZFN1FVRkJSeXh6UWtGQlJ6dEJRVUZETEhOQ1FVRkZMRXRCUVVzc1EwRkJRenRCUVVGRkxITkNRVUZGTzBGQlFVVXNkMEpCUVVrc1NVRkJSVHRCUVVGRkxEQkNRVUZOTzBGQlFVRXNhMEpCUVVNc1UwRkJUeXhIUVVGRk8wRkJRVUVzYTBKQlFVTTdRVUZCUXl4elFrRkJSVHRCUVVGQkxHZENRVUZOTzBGQlFVTXNiMEpCUVVjN1FVRkJSU3g1UWtGQlRUdEJRVUZCTEdOQlFVVTdRVUZCUXl4eFFrRkJUVHRCUVVGQkxGbEJRVVU3UVVGQlFTeFpRVU53Wml4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRkxFdEJRVWNzUlVGQlJUdEJRVUZCTEZsQlFWY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJUeXhIUVVGSExFMUJRVWtzUjBGQlJTeE5RVUZKTEVkQlFVVXNUVUZCU1N4SFFVRkZMRTFCUVVrc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlFTeFZRVUZETzBGQlFVVXNWMEZCUXl4WFFVRlZPMEZCUVVNc2NVSkJRVk1zUlVGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJSU3hGUVVGRk8wRkJRVkVzYTBKQlFVVXNTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEhRVUZITEV0QlFVc3NSVUZCUlN4RlFVRkZPMEZCUVVVc2JVSkJRVWNzUlVGQlJUdEJRVUZITEdsQ1FVRkhMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVYzdRVUZCUlN4cFFrRkJSenRCUVVGRkxIRkNRVUZQTzBGQlFVRXNXVUZCUXp0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUlVGQlF5eEhRVUZGTEVkQlFVVTdRVUZCUlN4bFFVRkhPMEZCUVVVc1owSkJRVWNzUlVGQlJUdEJRVUZuUWl4clFrRkJSenRCUVVGRExIVkNRVUZQTEVWQlFVVXNaMEpCUVdkQ0xFZEJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVTXNVMEZCVHl4SFFVRkZPMEZCUVVNc2EwSkJRVVVzZDBSQlFYTkVMRU5CUVVNc1IwRkJSU3hGUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZETzBGQlFVTXNaVUZCUnl4SFFVRkZMRk5CUVZNc1IwRkJSVHRCUVVGRExHZENRVUZGTEVWQlFVVXNWVUZCVXl4RlFVRkZMRTFCUVUwN1FVRkJRU3haUVVGRExFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTTdRVUZCUlN4dFFrRkJUU3hEUVVGRE8wRkJRVUVzVlVGQlF5eEhRVUZITzBGQlFVVXNXVUZCUlN4WFFVRlRMRU5CUVVNc1IwRkJSU3hQUVVGTExFVkJRVVVzVjBGQlV5eEZRVUZGTEVkQlFVY3NSMEZCUlN4RFFVRkRPMEZCUTNoa0xGbEJRVVVzYlVKQlFXbENMRU5CUVVNc1IwRkJSU3hQUVVGTExFVkJRVVVzYlVKQlFXbENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTERKQ1FVRjVRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTd3lRa0ZCZVVJc1JVRkJSU3hIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTERoQ1FVRTBRaXhEUVVGRExFZEJRVVVzVDBGQlN5eEZRVUZGTERoQ1FVRTBRaXhGUVVGRkxFZEJRVWNzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN3clFrRkJOa0lzUTBGQlF5eEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMQ3RDUVVFMlFpeEZRVUZGTEVkQlFVY3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxEUkNRVUV3UWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzTkVKQlFUQkNMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNORUpCUVRCQ0xGRkJRVWtzUlVGQlJTdzBRa0ZCTUVJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGRGJtUXNXVUZCUlN4dlFrRkJhMElzUTBGQlF5eEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIRkNRVUZ0UWl4UlFVRkpMRVZCUVVVc2NVSkJRVzFDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3d3UWtGQmQwSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxEQkNRVUYzUWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEcxQ1FVRnBRaXhEUVVGRExFZEJRVVVzVDBGQlN5eEZRVUZGTEcxQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4dlFrRkJhMElzUTBGQlF5eEhRVUZGTEU5QlFVc3NSVUZCUlN4dlFrRkJhMElzUlVGQlJTeEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc1YwRkJVeXhSUVVGSkxFVkJRVVVzVjBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc2JVSkJRV2xDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHRRa0ZCYVVJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3h2UWtGQmEwSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHZRa0ZCYTBJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVTjBaU3haUVVGRkxHOUNRVUZyUWl4UlFVRkpMRVZCUVVVc2IwSkJRV3RDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3gxUWtGQmNVSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzZFVKQlFYRkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4M1FrRkJjMElzUTBGQlF5eEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMSGRDUVVGelFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIZENRVUZ6UWl4UlFVRkpMRVZCUVVVc2QwSkJRWE5DTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1dVRkJSU3h2UWtGQmEwSXNVVUZCU1N4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc1owSkJRV01zUTBGQlF5eEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMR2RDUVVGakxFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2FVSkJRV1VzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2FVSkJRV1VzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIZENRVUZ6UWl4UlFVRkpMRVZCUVVVc2QwSkJRWE5DTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUTNSbExGbEJRVVVzY1VKQlFXMUNMRkZCUVVrc1JVRkJSU3h4UWtGQmJVSXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJSU3haUVVGRkxIRkNRVUZ0UWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEhGQ1FVRnRRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3hWUVVGUkxFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzVlVGQlVTeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4dFFrRkJhVUlzVVVGQlNTeEZRVUZGTEcxQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEdOQlFVa3NTVUZCUlN4RlFVRkZMR2RDUVVGakxFOUJRVXNzU1VGQlJTeEZRVUZGTEdkQ1FVRmpMRVZCUVVVc1NVRkJTU3hIUVVGRkxFdEJRVWNzUlVGQlJTeFZRVUZSTEZGQlFVa3NTMEZCUnl4RlFVRkZMRlZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEZGQlFVMHNVVUZCU1N4RlFVRkZMRkZCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEhkQ1FVRnpRaXhQUVVGTExFVkJRVVVzZDBKQlFYTkNMRVZCUVVVc1NVRkJTVHRCUVVOMFlTeGpRVUZKTEV0QlFVY3NSVUZCUlN3eVFrRkJlVUlzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhMUVVGSExFVkJRVVVzTWtKQlFYbENMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc09FSkJRVFJDTEU5QlFVc3NSVUZCUlN3NFFrRkJORUlzUlVGQlJTeEpRVUZKTzBGQlFVVXNZMEZCU1N4TFFVRkhMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eExRVUZITEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFZEJRVVVzUzBGQlJ5eFJRVUZKTEV0QlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSU3hMUVVGSExFVkJRVVVzTWtKQlFYbENMRkZCUVVrc1MwRkJSeXhGUVVGRkxESkNRVUY1UWl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGRkxFdEJRVWNzUlVGQlJTdzJRa0ZCTWtJc1QwRkJTeXhMUVVGSExFVkJRVVVzTmtKQlFUSkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFdEJRVWNzVVVGQlNTeExRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzVDBGQlN5eExRVUZITEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExFOUJRVXNzUzBGQlJ5eEZRVUZGTEVsQlFVa3NSMEZCUlN4TFFVRkhMRkZCUVVrc1MwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZGTEV0QlFVY3NVVUZCU1N4TFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRemRrTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZGTEU5QlFVOHNUMEZCVHl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZKTEVsQlFVVXNUMEZCUnl4TlFVRkpMRVZCUVVVc1RVRkJTU3hIUVVGRkxFbEJRVVVzVDBGQlJ5eFBRVUZITEVWQlFVVXNRMEZCUXl4TlFVRkpPMEZCUVVVc1kwRkJSU3h0UWtGQmFVSXNSVUZCUlN4RlFVRkZMR2RDUVVGblFqdEJRVUZGTEdOQlFVVXNaVUZCWVN4RlFVRkZMRVZCUVVVc1dVRkJXVHRCUVVGRkxHTkJRVVVzVTBGQlR5eEZRVUZGTEVWQlFVVXNUVUZCVFR0QlFVRkZMR05CUVVVc1dVRkJWU3hGUVVGRkxFVkJRVVVzVTBGQlV6dEJRVUZGTEdOQlFVVXNZVUZCVnl4RlFVRkZMRVZCUVVVc1ZVRkJWVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXp0QlFVRkRMRmxCUVVVc2JVSkJRV2xDTzBGQlFVVXNXVUZCUlN4aFFVRlhPMEZCUVVVc1dVRkJSU3hoUVVGWE8wRkJRVWNzV1VGQlJTeFpRVUZWTzBGQlFVY3NXVUZCUlN4bFFVRmhPMEZCUVVjc1dVRkJSU3hsUVVGaE8wRkJRVWNzV1VGQlJTeGxRVUZoTzBGQlFVY3NXVUZCUlN4clFrRkJaMEk3UVVGQlJ5eFpRVUZGTEdGQlFWYzdRVUZCUlN4WlFVRkZMRlZCUVZFN1FVRkJSU3hqUVVGSk8wRkJRVWNzWTBGQlJTeFRRVUZUTEV0QlFVazdRVUZCUXl4clFrRkJTU3hIUVVGSE8wRkJRVVVzYlVKQlFVc3NTVUZCUlR0QlFVRkJMRlZCUVVjN1FVRkRPV0lzYlVKQlFWTXNTMEZCU1R0QlFVRkRMSEZDUVVGVExFbEJRVWM3UVVGQlF5eHJRa0ZCUnl4RFFVRkRMRTlCUVVzc1MwRkJSeXhOUVVGSExFVkJRVVVzV1VGQlZTeE5RVUZITEVOQlFVTXNTVUZCUnp0QlFVRkRMSEZDUVVGSExFZEJRVWNzUlVGQlJUdEJRVUZGTEcxQ1FVRkhMRU5CUVVNN1FVRkJSU3h2UWtGQlJ5eEZRVUZGTzBGQlFYRkNMRzlDUVVGRkxIRkNRVUZ4UWp0QlFVRkZMRzlDUVVGSExFTkJRVU1zUjBGQlJUdEJRVUZETEhOQ1FVRkhMRVZCUVVVN1FVRkJVU3g1UWtGQlNTeGpRVUZaTEU5QlFVOHNSVUZCUlN4WlFVRlZMRVZCUVVVc1ZVRkJVU3hEUVVGRExFVkJRVVVzVDBGQlR5eEpRVUZITEVWQlFVVXNVVUZCVVN4VlFVRlJPMEZCUVVNc01FSkJRVWtzU1VGQlJTeEZRVUZGTEZGQlFWRXNUVUZCVFR0QlFVRkZMSGxDUVVGSExGRkJRVkVzUTBGQlF6dEJRVUZCTEc5Q1FVRkRPMEZCUVVNc2NVSkJRVWNzUlVGQlJUdEJRVUZCTEdkQ1FVRkRPMEZCUVVFc1kwRkJRenRCUVVGQkxGbEJRVU03UVVGQlF5eG5Ra0ZCUnl4RlFVRkZMRWxCUVVVN1FVRkJSeXhyUWtGQlJ6dEJRVUZGTEcxQ1FVRkhMRU5CUVVNc1IwRkJSU3hMUVVGSExFZEJRVWNzUlVGQlJTeEhRVUZGTEZsQlFWa3NRMEZCUXp0QlFVRkJMRzFDUVVGTk8wRkJRVU1zYjBKQlFVY3NSVUZCUlR0QlFVRlBMSFZDUVVGSkxHTkJRVmtzVDBGQlR5eEZRVUZGTEZkQlFWTXNSVUZCUlN4VFFVRlBMRU5CUVVNc1JVRkJSU3hOUVVGTkxFbEJRVWNzUlVGQlJTeFBRVUZQTzBGQlFWRXNkVUpCUVVjc1VVRkJVU3hGUVVGRkxFOUJRVThzVFVGQlRTeERRVUZETzBGQlFVVXNiVUpCUVVjc1JVRkJSVHRCUVVGRkxHOUNRVUZGTEUxQlFVa3NSVUZCUlN4aFFVRlhMRVZCUVVVc1ZVRkJWU3haUVVGWkxFZEJRVVVzVjBGQlZ5eFhRVUZWTzBGQlFVTTdRVUZCUVN4dlFrRkJWeXhYUVVGVk8wRkJRVU1zZDBKQlFVVXNWVUZCVlN4RlFVRkZPMEZCUVVFc2IwSkJRVU03UVVGQlFTeHZRa0ZEY0dsQ08wRkJRVUVzYTBKQlFVTTdRVUZCUlN4dlFrRkJSVHRCUVVGQkxHZENRVUZETEVkQlFVVXNRMEZCUXl4TFFVRkhMRVZCUVVVN1FVRkJRU3hqUVVGRk8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVY3NSVUZCUlR0QlFVRlJMR2xDUVVGSkxHTkJRVmtzVDBGQlR5eEZRVUZGTEZsQlFWVXNSVUZCUlN4VlFVRlJMRU5CUVVNc1JVRkJSU3hQUVVGUExFbEJRVWNzU1VGQlJTeEZRVUZGTEZGQlFWRTdRVUZCVVN4blFrRkJSU3hSUVVGUkxFbEJRVWtzUlVGQlJUdEJRVUZGTEdGQlFVYzdRVUZIYUVrc2FVSkJRVThzVlVGQlZUdEJRVUZCTEZGQlEyNUNPMEZCUVVFc1RVRkhRU3hIUVVGSE8wRkJRMGdzVlVGQlNTeFBRVUZQTEZsQlFWa3NXVUZCV1N4UFFVRlBMRmRCUVZjN1FVRkRia1FzWlVGQlR5eFZRVUZWTzBGQlFVRXNaVUZEVml4UFFVRlBMRmRCUVZjc1kwRkJZeXhQUVVGUExFdEJRVXM3UVVGRGJrUXNaVUZCVHl4RFFVRkRMRWRCUVVjc1RVRkJUU3hsUVVGbE8wRkJRVUU3UVVGQlFUczdPMEZEZEVWc1F6dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenM3UVVOQlR5eE5RVUZOTEU5QlFVODdPenRCUTFWd1FpeE5RVUZKTzBGQlJVb3NUVUZCU1N4TlFVRTRRanRCUVVOb1F5eHhRa0ZCYVVJN1FVRkJRU3hGUVVOdVFpeFBRVUZQTzBGQlEwd3NjVUpCUTBrc1QwRkJORUlzVDBGQmJVTTdRVUZCUVN4RlFVTnlSVHRCUVVWQkxFMUJRVTBzZVVKQlFXbEZMRTlCUTJ4RkxFOUJRVFJDTERoQ1FVTkJMRTlCUXpkQ08wRkJSMG9zVFVGQlNUdEJRVU5LTEUxQlFVa3NZMEZCWXp0QlFVTnNRaXhOUVVGSkxHVkJRV1U3UVVGRGJrSXNUVUZCU1N4VlFVRlZPMEZCUldRc1RVRkJUU3g1UWtGQmVVSXNUVUZCWlR0QlFVTTFReXhSUVVGSk8wRkJSVVlzVlVGQlNTeFBRVUZQTEhOQ1FVRnpRaXhoUVVGaE8wRkJRelZETEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCU1VFc1ZVRkJTU3hQUVVGUExHMUNRVUZ0UWl4aFFVRmhPMEZCUTNwRExGbEJRVWtzWlVGQlpTeEZRVUZGTEUxQlFVMHNXVUZCV1N4SlFVRkpMR3RDUVVGclFpeERRVUZETEVOQlFVTTdRVUZCUVN4TlFVTnFSVHRCUVVsQkxHRkJRVThzV1VGQldTeFRRVUZUTEVsQlFVa3NWMEZCVnp0QlFVRkJMRkZCUTNwRE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGRGJrVTdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVXM3UVVGQlFTeFJRVUZMTzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZMTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlNUdEJRVUZCTEUxQlEyeEZMRU5CUVVNc1EwRkJRenRCUVVGQkxFbEJRMG9zVTBGQlV5eEhRVUZITzBGQlExWXNZVUZCVHp0QlFVRkJMRWxCUTFRN1FVRkJRU3hGUVVOR08wRkJSVUVzVFVGQlRTeHJRa0ZCYTBJc1RVRkJaVHRCUVVOeVF5eFJRVUZKTzBGQlpVWXNZVUZCVHl4WlFVRlpMRk5CUVZNc1NVRkJTU3hYUVVGWE8wRkJRVUVzVVVGRGVrTTdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVXM3UVVGQlFTeFJRVUZMTzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVXM3UVVGQlFTeFJRVUZMTzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVOMlJqdEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVXM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVXM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCU1R0QlFVRkJMRTFCUTNwR0xFTkJRVU1zUTBGQlF6dEJRVUZCTEVsQlEwb3NVMEZCVXl4SFFVRkhPMEZCUTFZc1lVRkJUenRCUVVGQkxFbEJRMVE3UVVGQlFTeEZRVU5HTzBGQlJVRXNUVUZCVFN4clFrRkJhMElzUTBGQlF5eFRRVUZyUWl4bFFVRjNRanRCUVVOcVJTeFJRVUZKTEZOQlFWTTdRVUZEV0N4VlFVRkpMRTFCUVRoQ08wRkJRMmhETEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCUTBFc1lVRkJUeXhoUVVGaExHZERRVUZuUXp0QlFVRkJMRWxCUTNSRUxFOUJRVTg3UVVGRFRDeGhRVUZQTEdGQlFXRXNNa0pCUVRKQ08wRkJRVUVzU1VGRGFrUTdRVUZCUVN4RlFVTkdPMEZCUlU4c1RVRkJUU3gzUWtGQmQwSXNUMEZCVFN4VlFVRXJRenRCUVVONFJpeFJRVUZKTEdGQlFXRTdRVUZEWml4aFFVRlBMRkZCUVZFc1VVRkJVVHRCUVVGQkxFbEJRM3BDTzBGQlEwRXNVVUZCU1N4alFVRmpPMEZCUTJoQ0xGbEJRVTBzU1VGQlNTeE5RVUZOTEhWRVFVRjVSRHRCUVVGQkxFbEJRek5GTzBGQlEwRXNVVUZCU1N4VFFVRlRPMEZCUTFnc1dVRkJUU3hKUVVGSkxFMUJRVTBzYjBSQlFYTkVPMEZCUVVFc1NVRkRlRVU3UVVGRlFTeHRRa0ZCWlR0QlFVZG1MRlZCUVUwc1ZVRkJWU3hOUVVGTk8wRkJRM1JDTEZWQlFVMHNZVUZCWVN4TlFVRk5PMEZCUTNwQ0xGVkJRVTBzVDBGQlR5eE5RVUZOTzBGQlJXNUNMRlZCUVUwc1lVRkJZU3hoUVVGaExFdEJRVXNzZFVKQlFYVkNPMEZCUXpWRUxGVkJRVTBzVlVGQlZTeFJRVUZSTEdkQ1FVRm5RanRCUVVWNFF5eFZRVUZOTEZsQlFWa3NUVUZCVFR0QlFVTjRRaXhWUVVGTkxIRkNRVUZ4UWl4UFFVRlBMR05CUVdNc1YwRkJWeXhaUVVGWk8wRkJRM1pGTEZWQlFVMHNaVUZCWlN4blFrRkJaMElzVTBGQlV5eFZRVUZWTzBGQlEzaEVMRlZCUVUwc2JVSkJRVzFDTEU5QlFVOHNZMEZCWXl4WFFVRlhMRlZCUVZVc1dVRkJXU3hKUVVGSk8wRkJSVzVHTEZGQlFVa3NXVUZCV1R0QlFVVm9RaXhWUVVGTkxGRkJRVGhDTEVOQlFVTTdRVUZIY2tNc1VVRkJTU3hWUVVGVkxFZEJRVWM3UVVGRFppeFpRVUZOTEV0QlFVc3NTVUZCU1N4UlFVRlJMRU5CUVVNc1dVRkJXVHRCUVVOc1F5eHRRa0ZCVnl4TlFVRk5PMEZCUTJZc2MwSkJRVms3UVVGRFdpeHJRa0ZCVVR0QlFVRkJMRkZCUTFZc1IwRkJSeXhQUVVGUE8wRkJRVUVzVFVGRFdpeERRVUZETEVOQlFVTTdRVUZCUVN4SlFVTktPMEZCUjBFc1ZVRkJUU3hMUVVGTExFbEJRVWtzVVVGQlVTeERRVUZETEZOQlFWTXNWMEZCVnp0QlFVTXhReXhaUVVGTkxGVkJRVlVzWVVGQllTeDVRa0ZCZVVJN1FVRkRkRVFzV1VGQlRTeFRRVUZwUXp0QlFVRkJMRkZCUTNKRExGbEJRVmtzUTBGQlF5eFZRVUZyUWl4dlFrRkJORUk3UVVGRGVrUXNZMEZCZFVNc1kwRkJZeXhUUVVGVExGTkJRVk1zV1VGQldTeExRVU12UlN4UFFVRlBMRk5CUVZNc1lVRkJZVHRCUVVNdlFpeHRRa0ZCVHl4SlFVRkpMR2RDUVVGblFpeEpRVUZKTzBGQlFVRXNZMEZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUVzWjBKQlIwVTdRVUZCUVN4alFVTkdPMEZCUVVFc1kwRkRRU3hGUVVGRExFMUJRVTBzYTBKQlFXbENPMEZCUVVFc1dVRkJReXhEUVVGRE8wRkJRVUVzVlVGRGFFTTdRVUZGUVN4alFVRkpMRk5CUVZNc1UwRkJVeXhQUVVGUExFZEJRVWM3UVVGRE9VSXNaMEpCUVVrc2EwSkJRV3RDTzBGQlEzQkNMSEZDUVVGUE8wRkJRVUVzV1VGRFZEdEJRVVZCTEd0Q1FVRk5MRk5CUVZNc2MwSkJRWE5DTzBGQlJYSkRMR2RDUVVGSkxFOUJRVFJDTzBGQlF6bENMR3RDUVVGSkxHbENRVUZwUWl4elFrRkJjMEk3UVVGRGVrTXNkVUpCUVU4c1UwRkJVenRCUVVGQkxHTkJRMnhDTEZkQlFWY3NhVUpCUVdsQ0xDdENRVUVyUWp0QlFVTjZSQ3gxUWtGQlR5eFRRVUZUTzBGQlFVRXNZMEZEYkVJN1FVRkJRU3haUVVOR08wRkJSVUVzYlVKQlFVOHNVMEZCVXp0QlFVRkJMRlZCUTJ4Q08wRkJSVUVzYVVKQlFVOHNhMEpCUVd0Q08wRkJRVUVzVVVGRE0wSTdRVUZCUVN4TlFVTkdPMEZCUlVFc1ZVRkJkVU1zV1VGQldUdEJRVU5xUkN4WlFVRkpMRTlCUVU4c1UwRkJVeXhoUVVGaE8wRkJReTlDTEdsQ1FVRlBMSE5DUVVFeVFpeExRVUZMTEZkQlFWY3NjMEpCUVhOQ08wRkJRVUVzVVVGRE1VVXNUMEZCVHp0QlFVTk1MR2RDUVVGTkxHMUNRVUZ0UWl4MVFrRkJkVUlzVVVGQlVTeFRRVUZUTEVOQlFVTTdRVUZEYkVVc2FVSkJRVThzYzBKQlFYTkNMRWxCUVVrc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4SFFVRkhMRVZCUVVNc1RVRkJUU3hyUWtGQmFVSXNRMEZCUXp0QlFVRkJMRkZCUTNKR08wRkJRVUVzVFVGRFJqdEJRVVZCTEdOQlFWRXNUVUZCVFN4RlFVRkZPMEZCUVVFN1FVRkJRU3hSUVVWYUxGbEJRVlU3UVVGRFVpeDVRa0ZCWlR0QlFVTm1MSGRDUVVGak8wRkJRMlFzYVVKQlFVODdRVUZEVUN4clFrRkJVVHRCUVVGQkxGRkJRMVk3UVVGQlFUdEJRVUZCTEZGQlJVRXNRMEZCUXl4VFFVRlRPMEZCUTFJc2VVSkJRV1U3UVVGRFppeHZRa0ZCVlR0QlFVTldMR2xDUVVGUExFbEJRVWs3UVVGQlFTeFJRVU5pTzBGQlFVRXNUVUZCUXp0QlFVRkJMRWxCUTFBc1EwRkJReXhEUVVGRE8wRkJSVVlzVlVGQlRTeFJRVUZSTEV0QlFVc3NTMEZCU3p0QlFVVjRRaXhSUVVGSkxGZEJRVmM3UVVGRFlpeFpRVUZOTEVsQlFVa3NUVUZCVFN3eVJFRkJNa1FzVDBGQlR5eEpRVUZKTzBGQlFVRXNTVUZEZUVZN1FVRkJRU3hGUVVOR08wRkJSVThzVFVGQlRTeGpRVUZqTEUxQlFYRkNPMEZCUXpsRExGRkJRVWtzWlVGQlpTeE5RVUZOTzBGQlEzWkNMR0ZCUVU4N1FVRkJRU3hKUVVOVU8wRkJSVUVzVlVGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRE8wRkJRVUVzUlVGRGRrUTdPenRCUTNwTlR5eE5RVUZOTEd0Q1FVRnJRaXhEUVVGRExFMUJRV01zVjBGQk5rSTdRVUZEZWtVc1ZVRkJUVU1zVVVGQlR5eFpRVUZaTzBGQlJYcENMRlZCUVUwc1lVRkJZVUVzVFVGQlN5eG5Ra0ZCWjBJc1NVRkJTU3hKUVVGSk8wRkJRMmhFTEZWQlFVMHNZVUZCWVVFc1RVRkJTeXhSUVVGUkxGVkJRVlU3UVVGRE1VTXNTVUZCUVVFc1RVRkJTeXhoUVVGaExFMUJRVTBzV1VGQldTeFZRVUZWTzBGQlF6bERMRmRCUVU4c1MwRkJTeXhWUVVGVk8wRkJSWFJDTEZkQlFVODdRVUZCUVN4RlFVTlVPMEZCVFU4c1RVRkJUU3h6UWtGRFZDeERRVUZETEZOQlFXdERMRkZCUVdkQ0xFMUJRMnhFTEZsQlFYVkRPMEZCUTNSRExGRkJRVWtzVDBGQlR5eFhRVUZYTEZsQlFWa3NXVUZCV1N4TlFVRk5PMEZCUTJ4RUxGVkJRVWtzUzBGQlN5eEpRVUZKTEU5QlFVOHNSMEZCUnp0QlFVTnlRaXhqUVVGTkxFbEJRVWtzVFVGQlRTd3JRa0ZCSzBJN1FVRkJRU3hOUVVOcVJDeFBRVUZQTzBGQlEwd3NZVUZCU3l4SlFVRkpMRTlCUVU4N1FVRkJRU3hOUVVOc1FqdEJRVUZCTEVsQlEwWTdRVUZGUVN4WFFVRlBMRkZCUVZFc1QwRkJUeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEV0QlFVc3NTMEZCU3l4TlFVRk5PMEZCUTJoRUxGbEJRVTBzVDBGQlVTeFRRVUZWTEZOQlFWTXNUVUZCVFR0QlFVTjJReXhWUVVGSkxFOUJRVThzVlVGQlZTeFZRVUZWTzBGQlF6ZENMRFJDUVVGdlFpeFBRVUZyUXl4UFFVRlBMRXRCUVVzc1RVRkJUU3hQUVVGUE8wRkJRVUVzVFVGRGFrWXNWMEZCVnl4UFFVRlBMRlZCUVZVc1dVRkJXU3hQUVVGUExGVkJRVlVzVlVGQlZUdEJRVU5xUlN4blFrRkJVU3hOUVVGTkxFMUJRVTBzVTBGQlV5eERRVUZETzBGQlFVRXNUVUZEYUVNc1YwRkJWeXhQUVVGUExGVkJRVlVzVjBGQlZ6dEJRVU55UXl4blFrRkJVU3hOUVVGUExGRkJRVk1zVFVGQlRTeEhRVUZITzBGQlFVRXNUVUZEYmtNc1QwRkJUenRCUVVOTUxHTkJRVTBzU1VGQlNTeE5RVUZOTEcxRFFVRnRReXhQUVVGUExFdEJRVXNzUlVGQlJUdEJRVUZCTEUxQlEyNUZPMEZCUVVFc1NVRkRSaXhEUVVGRE8wRkJRVUVzUlVGRFNEdEJRVTFITEUxQlFVMHNhVUpCUVdsQ0xFTkJRVU1zV1VGQk1FSTdRVUZEZGtRc1ZVRkJUVUVzVVVGQlR5eFpRVUZaTzBGQlJYcENMRlZCUVUwc1VVRkJVVUVzVFVGQlN5eFZRVUZWTzBGQlF6ZENMRkZCUVVrN1FVRkRSaXhaUVVGTkxHVkJRV1ZCTEUxQlFVc3NWMEZCVnl4RFFVRkRPMEZCUTNSRExFMUJRVUZCTEUxQlFVc3NhVUpCUVdsQ0xHTkJRV01zWlVGQlpTeERRVUZETzBGQlEzQkVMRmxCUVUwc1dVRkJXVUVzVFVGQlN5eFBRVUZQTEdWQlFXVXNRMEZCUXp0QlFVTTVReXhaUVVGTkxITkNRVUZ6UWtFc1RVRkJTeXhSUVVGUkxHVkJRV1VzU1VGQlNTeERRVUZETzBGQlF6ZEVMRmxCUVUwc1pVRkJaU3h6UWtGQmMwSkJMRTFCUVVzc1lVRkJZU3h0UWtGQmJVSXNTVUZCU1R0QlFVTndSaXhaUVVGTkxFbEJRVWtzVFVGQlRTeEhRVUZITEU5QlFVOHNaMEpCUVdkQ0xGTkJRVk1zYjBKQlFXOUNMRmxCUVZrc1JVRkJSVHRCUVVGQkxFbEJRM1pHTEZWQlFVVTdRVUZEUVN4TlFVRkJRU3hOUVVGTExHRkJRV0VzUzBGQlN6dEJRVUZCTEVsQlEzcENPMEZCUVVFc1JVRkRSanM3TzBGRGRrUlBMRTFCUVUwc1owSkJRV2RDTEVOQlFVTXNXVUZCTmtRN1FVRkRla1lzVlVGQlRVTXNVVUZCVHl4WlFVRlpPMEZCUTNwQ0xGRkJRVWtzYlVKQlFXMUNPMEZCUTNaQ0xGVkJRVTBzVTBGQmJVSXNRMEZCUXp0QlFVVXhRaXhWUVVGTkxHRkJRVEJETEZkQlFWY3NRMEZCUXp0QlFVVTFSQ3hSUVVGSk8wRkJRMFlzVlVGQlNTeFRRVUZUTEhGQ1FVRnhRaXhSUVVGWE8wRkJRek5ETEcxQ1FVRlhMRzFDUVVGdFFqdEJRVUZCTEUxQlEyaERMRmRCUTBrc1QwRkJUeXhSUVVGUkxIRkNRVUZ4UWl4WlFVRlpMRU5CUVVNc1QwRkJUeXhWUVVGVkxGRkJRVkVzWjBKQlFXZENMRXRCUXpGR0xGRkJRVkVzYlVKQlFXMUNMRXRCUVVzc1VVRkJVU3h0UWtGQmJVSXNSMEZCUnp0QlFVTm9SU3hqUVVGTkxFbEJRVWtzVFVGQlRTeHhRMEZCY1VNc1VVRkJVU3huUWtGQlowSXNSVUZCUlR0QlFVRkJMRTFCUTJwR08wRkJSVUVzVlVGQlNTeFRRVUZUTEhOQ1FVRnpRaXhSUVVGWE8wRkJRelZETEcxQ1FVRlhMRzlDUVVGdlFqdEJRVUZCTEUxQlEycERMRmRCUVZjc1QwRkJUeXhSUVVGUkxITkNRVUZ6UWl4WlFVRlpMRU5CUVVNc1QwRkJUeXhWUVVGVkxGRkJRVkVzYVVKQlFXbENMRWRCUVVjN1FVRkRlRWNzWTBGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRExGRkJRVkVzYVVKQlFXbENMRVZCUVVVN1FVRkJRU3hOUVVOc1JqdEJRVVZCTEZWQlFVa3NVMEZCVXl4alFVRmpMRkZCUVZjN1FVRkRjRU1zYlVKQlFWY3NXVUZCV1R0QlFVRkJMRTFCUTNwQ08wRkJSVUVzVlVGQlNTeG5Ra0ZCWjBJN1FVRkRjRUlzVlVGQlNTeFRRVUZUTEZGQlFWRXNVVUZCVnp0QlFVTTVRaXgzUWtGQlowSXNaMEpCUVdkQ0xGRkJRVkVzUzBGQlN5eE5RVUZOTzBGQlFVRXNUVUZEY2tRN1FVRkZRU3g1UWtGQmJVSkJMRTFCUVVzN1FVRkJRU3hSUVVOd1FpeFhRVUZYTzBGQlFVRXNVVUZCYlVJc1YwRkJWenRCUVVGQkxGRkJRVzlDTEVOQlFVTXNRMEZCUXl4WFFVRlhPMEZCUVVFc1VVRkJXVHRCUVVGQkxFMUJRV0U3UVVGRGRrY3NWVUZCU1N4eFFrRkJjVUlzUjBGQlJ6dEJRVU14UWl4MVFrRkJaU3d5UWtGQk5FSTdRVUZCUVN4TlFVTTNRenRCUVVWQkxGVkJRVWtzVTBGQlV5eFZRVUZWTEZGQlFWYzdRVUZEYUVNc05FSkJRVzlDTEZGQlFWRXNUMEZCVHl4SlFVRkpMRzlDUVVGSkxGRkJRV2xETEVkQlFVY3NRMEZCUXl4TFFVRkxMRlZCUVZVN1FVRkROMFlzWjBKQlFVMHNaMEpCUVdkQ0xHZENRVUZuUWl4TFFVRkxMRTFCUVUwN1FVRkRha1FzWjBKQlFVMHNhMEpCUVd0Q0xHZENRVUZuUWl4UFFVRlBMRTFCUVUwN1FVRkZja1FzWTBGQlNVRXNUVUZCU3l4elFrRkJjMElzYTBKQlFXdENMR1ZCUVdVc1pVRkJaU3hOUVVGTkxFZEJRVWM3UVVGRGRFWXNNa0pCUVdVc2FVTkJRV2xETEVkQlFVY3NUVUZCVFN4TFFVRkxMRWRCUVVjN1FVRkJRU3hWUVVOdVJUdEJRVUZCTEZGQlEwWXNRMEZCUXp0QlFVRkJMRTFCUTBnN1FVRkZRU3hoUVVGUExFTkJRVU1zYTBKQlFXdENMRTFCUVUwN1FVRkJRU3hKUVVOc1F5eFRRVUZUTEVkQlFVYzdRVUZEVml4VlFVRkpMSEZDUVVGeFFpeEhRVUZITzBGQlF6RkNMRkZCUVVGQkxFMUJRVXNzYzBKQlFYTkNMR2RDUVVGblFqdEJRVUZCTEUxQlF6ZERPMEZCUTBFc1lVRkJUeXhSUVVGUkxGZEJRVk5CTEUxQlFVc3NUVUZCVFN4TFFVRkxMRU5CUVVNN1FVRkRla01zV1VGQlRUdEJRVUZCTEVsQlExSTdRVUZCUVN4RlFVTkdPenM3UVVONFJFRXNUVUZCVFN3eVFrRkJNa0lzUTBGQlF5d3lRa0ZCYlVRN1FVRkRia1lzV1VGQlVTeDNRa0ZCZDBJN1FVRkJRU3hOUVVNNVFpeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUTdRVUZEUlN4alFVRk5MRWxCUVVrc1RVRkJUU3g1UTBGQmVVTXNjMEpCUVhOQ0xFVkJRVVU3UVVGQlFTeEpRVU55Ump0QlFVRkJMRVZCUTBZN1FVRkZRU3hOUVVGTkxHMUNRVUZ0UWl4RFFVRkRMR3RDUVVGdFJEdEJRVU16UlN4WlFVRlJMR1ZCUVdVN1FVRkJRU3hOUVVOeVFpeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTzBGQlEwVXNZMEZCVFN4SlFVRkpMRTFCUVUwc0swSkJRU3RDTEdGQlFXRXNSVUZCUlR0QlFVRkJMRWxCUTJ4Rk8wRkJRVUVzUlVGRFJqdEJRVVZCTEUxQlFVMHNkVUpCUVhWQ0xFTkJRVU1zV1VGQmJVUTdRVUZETDBVc1VVRkJTU3hEUVVGRExGRkJRVkVzVDBGQlR6dEJRVU5zUWl4alFVRlJMRkZCUVZFc1EwRkJRenRCUVVGQkxFbEJRMjVDTzBGQlEwRXNVVUZCU1N4RFFVRkRMRkZCUVZFc1RVRkJUU3hUUVVGVE8wRkJRekZDTEdOQlFWRXNUVUZCVFN4VlFVRlZMRU5CUVVNN1FVRkJRU3hKUVVNelFqdEJRVU5CTEZWQlFVMHNWVUZCVlN4UlFVRlJMRTFCUVUwN1FVRkRPVUlzVVVGQlNTeERRVUZETEZGQlFWRXNPRUpCUVRoQ08wRkJSWHBETEdOQlFWRXNLMEpCUVN0Q08wRkJRVUVzU1VGRGVrTTdRVUZIUVN4UlFVRkpMRkZCUVZFc2MwSkJRMUlzVVVGQlVTeHRRa0ZCYlVJc1MwRkJTeXhUUVVGUExFOUJRVThzVDBGQlR5eFhRVUZYTEV0QlFVc3NSMEZCUnl4VlFVRlZMRkZCUVZFc1IwRkJSenRCUVVNdlJpeGpRVUZSTEcxQ1FVRnRRanRCUVVGQkxFbEJRemRDTzBGQlFVRXNSVUZEUmp0QlFVVkJMRTFCUVUwc2QwSkJRMFlzUTBGQlF5eHpRa0ZCT0VJc2IwSkJRemxDTEZkQlFUSkNPMEZCUXpGQ0xHVkJRVmNzVFVGQlRTeHZRa0ZCYjBJN1FVRkRia01zVlVGQlNTeFRRVUZUTEU5QlFVOHNUMEZCVHl4WFFVRlhMRXRCUVVzc1IwRkJSenRCUVVjNVF5eGpRVUZSTEZGQlFWRTdRVUZCUVN4UlFVTmtMRXRCUVVzN1FVRkRTQ3h0UWtGQlV6dEJRVU5VTzBGQlFVRXNVVUZEUml4TFFVRkxPMEZCUTBnc2JVSkJRVk03UVVGRFZDeGpRVUZKTEU5QlFVOHNUMEZCVHl4VlFVRlZPMEZCUXpGQ0xHdENRVUZOTEdWQlFXVTdRVUZEY2tJc1owSkJRVWtzWTBGQll5eFpRVUZaTzBGQlF6VkNMRzlDUVVGTkxHZENRVUZuUWl4blFrRkJaMElzWTBGQll5eE5RVUZOTzBGQlF6RkVMRzlDUVVGTkxHdENRVUZyUWl4blFrRkJaMElzWVVGQllTeFpRVUZaTEUxQlFVMDdRVUZEZGtVc2EwSkJRVWtzV1VGQldTeEZRVUZGTERCQ1FVRXdRaXh6UWtGQmMwSXNaVUZCWlN4bFFVRmxMRTFCUXpWR0xFZEJRVWM3UVVGRFRDd3JRa0ZCWlN4dlJFRkJiMFFzWVVGQllTeFZRVUZWTEVkQlFVYzdRVUZCUVN4alFVTXZSanRCUVVGQkxGbEJRMFk3UVVGRFFTeG5Ra0ZCU1N4alFVRmpMRmxCUVZrN1FVRkROVUlzYTBKQlFVa3NZVUZCWVN4aFFVRmhPMEZCUlRsQ0xHdENRVUZKTEU5QlFVOHNZMEZCWXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhWUVVGVkxGVkJRVlVzUzBGQlN5eGhRVUZoTEVkQlFVYzdRVUZEY0VZc05rSkJRV0U3UVVGQlFTeGpRVU5tTzBGQlEwRXNiMEpCUVUwc1owSkJRV2RDTEdkQ1FVRm5RaXhqUVVGakxFMUJRVTA3UVVGRE1VUXNiMEpCUVUwc2EwSkJRV3RDTEdkQ1FVRm5RaXhYUVVGWExGTkJRVk1zUjBGQlJ5eE5RVUZOTzBGQlEzSkZMR3RDUVVGSkxGbEJRVmtzUlVGQlJTd3dRa0ZCTUVJc2MwSkJRWE5DTEdWQlFXVXNaVUZCWlN4TlFVTTFSaXhIUVVGSE8wRkJRMHdzSzBKQlFXVXNiMFJCUVc5RUxHRkJRV0VzVlVGQlZTeEhRVUZITzBGQlFVRXNZMEZETDBZN1FVRkJRU3haUVVOR08wRkJRMEVzWjBKQlFVa3NZMEZCWXl4cFFrRkJhVUk3UVVGRGFrTXNiMEpCUVUwc1owSkJRV2RDTEdkQ1FVRm5RaXh0UWtGQmJVSXNUVUZCVFR0QlFVTXZSQ3h2UWtGQlRTeHJRa0ZCYTBJc1owSkJRV2RDTEdGQlFXRXNhVUpCUVdsQ0xFMUJRVTA3UVVGRE5VVXNhMEpCUVVrc1dVRkJXU3hGUVVGRkxEQkNRVUV3UWl4elFrRkJjMElzWlVGQlpTeGxRVUZsTEUxQlF6VkdMRWRCUVVjN1FVRkRURHRCUVVGQkxHdENRVU5KTEhsRVFVRjVSQ3hoUVVGaExHVkJRV1U3UVVGQlFTeG5Ra0ZCUnp0QlFVRkJMR05CUXpsR08wRkJRVUVzV1VGRFJqdEJRVUZCTEZWQlEwWTdRVUZEUVR0QlFVRkJMRkZCUTBZc1MwRkJTenRCUVVOSUxHMUNRVUZUTzBGQlExUXNZMEZCU1N4UFFVRlBMRTlCUVU4c1ZVRkJWVHRCUVVNeFFpeHJRa0ZCVFN4blFrRkJaMEk3UVVGRGRFSXNaMEpCUVVrc1pVRkJaU3hwUWtGQmFVSTdRVUZEYkVNc2EwSkJRVWtzWTBGQll5eHZRa0ZCYjBJc1ZVRkJWU3hqUVVGakxHOUNRVUZ2UWl4UlFVRlJPMEZCUTNoR0xITkNRVUZOTEVsQlFVa3NUVUZCVFN4dlJFRkJiMFFzWTBGQll5eGxRVUZsTEVWQlFVVTdRVUZCUVN4alFVTnlSenRCUVVOQkxHOUNRVUZOTEdkQ1FVRm5RaXhuUWtGQlowSXNiVUpCUVcxQ0xFMUJRVTA3UVVGREwwUXNiMEpCUVUwc2EwSkJRV3RDTEdkQ1FVRm5RaXhqUVVGakxHbENRVUZwUWl4TlFVRk5PMEZCUXpkRkxHdENRVUZKTEZsQlFWa3NSVUZCUlN3d1FrRkJNRUlzYzBKQlFYTkNMR1ZCUVdVc1pVRkJaU3hOUVVNMVJpeEhRVUZITzBGQlEwdzdRVUZCUVN4clFrRkRTU3g1UkVGQmVVUXNZMEZCWXl4bFFVRmxPMEZCUVVFc1owSkJRVWM3UVVGQlFTeGpRVU12Ump0QlFVRkJMRmxCUTBZN1FVRkJRU3hWUVVOR08wRkJRMEU3UVVGQlFTeFJRVU5HTEV0QlFVczdRVUZCUVN4UlFVTk1MRXRCUVVzN1FVRkRTRHRCUVVGQkxGRkJRMFk3UVVGRFJTeG5Ra0ZCVFN4SlFVRkpMRTFCUVUwc2NVTkJRWEZETEUxQlFVMHNSVUZCUlR0QlFVRkJMRTFCUTJwRk8wRkJSVUVzV1VGQlRTeHRRa0ZCYlVJc1owSkJRV2RDTEZGQlFWRXNUVUZCVFR0QlFVTjJSQ3hWUVVGSkxGbEJRVmtzUlVGQlJTdzBRa0ZCTkVJc2MwSkJRWE5DTEdkQ1FVRm5RaXhOUVVGTkxFZEJRVWM3UVVGRE0wWXNkVUpCUVdVc2IwTkJRVzlETEUxQlFVMHNSMEZCUnp0QlFVRkJMRTFCUXpsRU8wRkJRVUVzU1VGRFJqdEJRVUZCTEVWQlEwWTdRVUZGUnl4TlFVRk5MRzlDUVVGdlFpeERRVUZETEZsQlFXdEZPMEZCUTJ4SExGVkJRVTFETEZGQlFVOHNXVUZCV1R0QlFVTjZRaXhSUVVGSkxIVkNRVUYxUWp0QlFVTXpRaXhWUVVGTkxGTkJRVzFDTEVOQlFVTTdRVUZGTVVJc1ZVRkJUU3hwUWtGQmEwUXNWMEZCVnl4RFFVRkRPMEZCUTNCRkxIbENRVUZ4UWl4alFVRmpPMEZCUlc1RExGRkJRVWs3UVVGRFJpeFpRVUZOTEhsQ1FVRjVRaXg1UWtGQmVVSXNaVUZCWlN3d1FrRkJNRUlzUzBGQlN6dEJRVU4wUnl4WlFVRk5MR2RDUVVGblFpeHBRa0ZCYVVJc1pVRkJaU3hwUWtGQmFVSXNXVUZCV1R0QlFVTnVSaXhaUVVGTkxHdENRVU5HTEU5QlFVOHNaVUZCWlN4VlFVRlZMRmRCUVZjc1owSkJRV2RDTEdWQlFXVXNUMEZCVHl4TlFVRk5MRWxCUVVrN1FVRkZMMFlzV1VGQlRTeHRRa0ZCYlVJc1pVRkJaU3h2UWtGQmIwSTdRVUZETlVRc1ZVRkJTU3hEUVVGRExFOUJRVThzVlVGQlZTeG5Ra0ZCWjBJc1MwRkJTeXh0UWtGQmJVSXNTMEZCU3l4dFFrRkJiVUlzUjBGQlJ6dEJRVU4yUml4alFVRk5MRWxCUVVrc1RVRkJUU3h4UTBGQmNVTXNaMEpCUVdkQ0xFVkJRVVU3UVVGQlFTeE5RVU42UlR0QlFVVkJMRmxCUVUwc2IwSkJRVzlDTEdWQlFXVXNjVUpCUVhGQ08wRkJRemxFTEZWQlFVa3NRMEZCUXl4UFFVRlBMRlZCUVZVc2FVSkJRV2xDTEV0QlFVc3NiMEpCUVc5Q0xFdEJRVXNzYjBKQlFXOUNMRWRCUVVjN1FVRkRNVVlzWTBGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRExHbENRVUZwUWl4RlFVRkZPMEZCUVVFc1RVRkRNVVU3UVVGRlFTeFpRVUZOTEN0Q1FVRXJRaXhQUVVGUExHVkJRV1VzTWtKQlFUSkNMRmRCUTJ4R0xHZENRVUZuUWl4bFFVRmxMSGRDUVVGM1FpeE5RVUZOTEVsQlF6ZEVPMEZCUlVvc05rSkJRWFZDUVN4TlFVRkxPMEZCUVVFc1VVRkRlRUk3UVVGQlFTeFJRVUYzUWl4RFFVRkRMRU5CUVVNc1pVRkJaVHRCUVVGQkxGRkJRVzFDTEVOQlFVTXNRMEZCUXl4bFFVRmxPMEZCUVVFc1VVRkJhMEk3UVVGQlFTeFJRVU12Uml4RFFVRkRMRU5CUVVNc1pVRkJaVHRCUVVGQkxGRkJRV2xDTzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVdsQ08wRkJRVUVzVVVGQmEwSTdRVUZCUVN4UlFVTjRSVHRCUVVGQkxFMUJRVFJDTzBGQlEyaERMRlZCUVVrc2VVSkJRWGxDTEVkQlFVYzdRVUZET1VJc2RVSkJRV1VzSzBKQlFXZERPMEZCUVVFc1RVRkRha1E3UVVGRlFTeFZRVUZKTEdWQlFXVXNiMEpCUVc5Q08wRkJRM0pETERoQ1FVRnpRaXh6UWtGQmMwSXNaVUZCWlN4dlFrRkJiMElzVFVGQlRUdEJRVUZCTEUxQlEzWkdPMEZCUlVFc1ZVRkJTU3hsUVVGbExIZENRVUYzUWp0QlFVTjZReXh0UWtGQlZ5eERRVUZETEUxQlFVMHNTMEZCU3l4TFFVRkxMRTlCUVU4c1VVRkJVU3hsUVVGbExITkNRVUZ6UWl4SFFVRkhPMEZCUTJwR0xHTkJRVWtzVDBGQlR5eFRRVUZUTEZWQlFWVTdRVUZETlVJc2EwSkJRVTBzU1VGQlNTeE5RVUZOTEd0RVFVRnJSQ3hKUVVGSkxFVkJRVVU3UVVGQlFTeFZRVU14UlR0QlFVTkJMR05CUVVrc1QwRkJUeXhWUVVGVkxGbEJRVmtzUTBGQlF5eFBRVUZQTEZWQlFWVXNTMEZCU3l4TFFVRkxMRkZCUVZFc1IwRkJSenRCUVVOMFJTeHJRa0ZCVFN4SlFVRkpMRTFCUVUwc2FVVkJRV2xGTEV0QlFVc3NSVUZCUlR0QlFVRkJMRlZCUXpGR08wRkJRMEVzWjBKQlFVMHNZVUZCWVN4blFrRkJaMElzVFVGQlRTeE5RVUZOTzBGQlF5OURMR05CUVVsQkxFMUJRVXNzTmtKQlFUWkNMSE5DUVVGelFpeFpRVUZaTEV0QlFVc3NUVUZCVFN4SFFVRkhPMEZCUTNCR0xESkNRVUZsTEhkRFFVRjNReXhKUVVGSkxFMUJRVTBzUzBGQlN5eEhRVUZITzBGQlFVRXNWVUZETTBVN1FVRkJRU3hSUVVOR08wRkJRVUVzVFVGRFJqdEJRVVZCTEZWQlFVa3NaVUZCWlN4VlFVRlZMRkZCUVZjN1FVRkRkRU1zTkVKQlFXOUNMR1ZCUVdVc1QwRkJUeXhKUVVGSkxHOUNRVUZKTEZGQlFXbERMRWRCUVVjc1EwRkJReXhMUVVGTExGVkJRVlU3UVVGRGNFY3NaMEpCUVUwc1owSkJRV2RDTEdkQ1FVRm5RaXhMUVVGTExFMUJRVTA3UVVGRGFrUXNaMEpCUVUwc2EwSkJRV3RDTEdkQ1FVRm5RaXhQUVVGUExFMUJRVTA3UVVGRmNrUXNZMEZCU1VFc1RVRkJTeXd3UWtGQk1FSXNjMEpCUVhOQ0xHVkJRV1VzWlVGQlpTeE5RVUZOTEVkQlFVYzdRVUZET1VZc01rSkJRV1VzY1VOQlFYRkRMRWRCUVVjc1RVRkJUU3hMUVVGTExFZEJRVWM3UVVGQlFTeFZRVU4yUlR0QlFVRkJMRkZCUTBZc1EwRkJRenRCUVVGQkxFMUJRMGc3UVVGRlFTeGhRVUZQTEVOQlFVTXNjMEpCUVhOQ0xFMUJRVTA3UVVGQlFTeEpRVU4wUXl4VFFVRlRMRWRCUVVjN1FVRkRWaXhWUVVGSkxIbENRVUY1UWl4SFFVRkhPMEZCUXpsQ0xGRkJRVUZCTEUxQlFVc3NNRUpCUVRCQ0xHOUNRVUZ2UWp0QlFVRkJMRTFCUTNKRU8wRkJRMEVzWVVGQlR5eFJRVUZSTEZkQlFWTkJMRTFCUVVzc1RVRkJUU3hMUVVGTExFTkJRVU03UVVGRGVrTXNXVUZCVFR0QlFVRkJMRWxCUTFJN1FVRkJRU3hGUVVOR096czdRVU01UzA4c1RVRkJUU3cyUWtGQk5rSXNRMEZCUXl4VFFVRXlRanRCUVVOd1JTeFpRVUZSTEUxQlFVMDdRVUZCUVN4TlFVTmFMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkZWRHRCUVVORkxHTkJRVTBzU1VGQlNTeE5RVUZOTERCQ1FVRXdRaXhKUVVGSkxFVkJRVVU3UVVGQlFTeEpRVU53UkR0QlFVRkJMRVZCUTBZN1FVRkxUeXhOUVVGTkxEWkNRVUUyUWl4RFFVRkRMR05CUVhGRE8wRkJRemxGTEZsQlFWRXNWMEZCVnp0QlFVRkJMRTFCUTJwQ0xFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRlZEdEJRVU5GTEdOQlFVMHNTVUZCU1N4TlFVRk5MREJDUVVFd1FpeFRRVUZUTEVWQlFVVTdRVUZCUVN4SlFVTjZSRHRCUVVGQkxFVkJRMFk3UVVGTlR5eE5RVUZOTEhWQ1FVRjFRaXhEUVVGRExHRkJRM0JDTEVOQlFVTXNVVUZCVnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZITEZGQlFWY3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExGRkJRVmNzVVVGQlZ5eE5RVUZUTEVWQlFVVXNVVUZCVVR0QlFVczVSeXhOUVVGTkxHOURRVUZ2UXl4RFFVRkRMRk5CUlc5RU8wRkJRMmhITEZsQlFWRXNUVUZCVFR0QlFVRkJMRTFCUTFvc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUTdRVUZEUlN4alFVRk5MRWxCUVVrc1RVRkJUU3h4UWtGQmNVSXNTVUZCU1N4RlFVRkZPMEZCUVVFc1NVRkRMME03UVVGQlFTeEZRVU5HTzBGQlMwY3NUVUZCVFN4MVFrRkJkVUlzUTBGQlF5eGhRVUZyUlR0QlFVTnlSeXhaUVVGUkxGVkJRVlU3UVVGQlFTeE5RVU5vUWl4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTzBGQlEwVXNZMEZCVFN4SlFVRkpMRTFCUVUwc09FSkJRVGhDTEZGQlFWRXNSVUZCUlR0QlFVRkJMRWxCUXpWRU8wRkJRVUVzUlVGRFJqdEJRVXRQTEUxQlFVMHNNa0pCUVRKQ0xFTkJRVU1zVTBGQmVVUXNVMEZCVXl4aFFVTjJSeXhUUVVGVExGZEJRVmNzVTBGQlV5eFhRVUZYTEZOQlFWTXNWVUZCVlN4VFFVRlRMR0ZCUVdFc1UwRkJVenRCUVV0MlJpeE5RVUZOTERKQ1FVRXlRaXhEUVVGRExHRkJRVEJETzBGQlEycEdMRmxCUVZFc1ZVRkJWVHRCUVVGQkxFMUJRMmhDTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVE3UVVGRFJTeGpRVUZOTEVsQlFVa3NUVUZCVFN3NFFrRkJPRUlzVVVGQlVTeEZRVUZGTzBGQlFVRXNTVUZETlVRN1FVRkJRU3hGUVVOR096czdRVU51VEVFc1RVRkJTU3h2UWtGQmIwSTdRVUZQZUVJc1RVRkJUU3cyUWtGQk5rSXNRMEZCUXl4clFrRkJORU03UVVGRE9VVXNWVUZCVFVNc1VVRkJUeXhaUVVGWk8wRkJRM3BDTEZWQlFVMHNVVUZCVVVFc1RVRkJTeXhWUVVGVk8wRkJRemRDTEZGQlFVazdRVUZEUml4WlFVRk5MR0ZCUVdGQkxFMUJRVXNzVjBGQlZ5eERRVUZETzBGQlEzQkRMRmxCUVUwc1dVRkJXVUVzVFVGQlN5eDNRa0ZCZDBJc1pVRkJaU3haUVVGWkxHRkJRV0VzUTBGQlF6dEJRVU40Uml4VlFVRkpMR05CUVdNc1IwRkJSenRCUVVOdVFpeDFRa0ZCWlN4MVEwRkJkME03UVVGQlFTeE5RVU42UkR0QlFVTkJMR0ZCUVU4c1EwRkJRMEVzVFVGQlN5eFBRVUZQTEdGQlFXRXNRMEZCUXl4SFFVRkhRU3hOUVVGTExFOUJRVThzWVVGQllTeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVRkJMRWxCUTNSRkxGVkJRVVU3UVVGRFFTeE5RVUZCUVN4TlFVRkxMR0ZCUVdFc1MwRkJTenRCUVVGQkxFbEJRM3BDTzBGQlFVRXNSVUZEUmp0QlFVOUJMRTFCUVUwc1ZVRkJWU3hEUVVGRExGbEJRVzlDTEdsQ1FVRXJRanRCUVVOc1JTeFZRVUZOTEZsQlFWa3NXVUZCV1N4RlFVRkZMRk5CUVZNc1dVRkJXU3haUVVGWk8wRkJRMnBGTEZGQlFVa3NZMEZCWXl4SFFVRkhPMEZCUTI1Q0xIRkNRVUZsTEN0Q1FVRm5RenRCUVVGQkxFbEJRMnBFTzBGQlFVRXNSVUZEUmp0QlFVMVBMRTFCUVUwc1kwRkJZeXhQUVVGTkxGRkJRVFJDTzBGQlJUTkVMRmxCUVZFc1NVRkJTU3hMUVVGTExGbEJRV0VzY1VKQlFYRkNMRWxCUVVrc1VVRkJVU3hEUVVGRE8wRkJSV2hGTEZGQlFVa3NUMEZCTkVJN1FVRkpPVUlzV1VGQlRTeFhRVUZYTEV0QlFYVkNPMEZCUTNoRExGbEJRVTBzVTBGQlV5eFpRVUZaTEVkQlFVY3NSMEZCUnp0QlFVRkJMRWxCUTI1RE8wRkJSVUVzZDBKQlFXOUNPMEZCUVVFc1JVRkRkRUk3UVVGclEwRXNUVUZCVFN4cFFrRkJhVUlzYjBKQlFVa3NTVUZCTmtJN1FVRkZha1FzVFVGQlRTeHpRa0ZCYzBJc1RVRkJaVHRCUVUwelF5eE5RVUZOTEhkQ1FVRjNRaXhEUVVGRExGVkJRWGRETzBGQlF6VkZMRlZCUVUxQkxGRkJRVThzV1VGQldUdEJRVU42UWl4VlFVRk5MR3RDUVVGclFrRXNUVUZCU3l4UlFVRlJMRTFCUVUwc1ZVRkJWVHRCUVVOeVJDeFJRVUZKTEc5Q1FVRnZRaXhIUVVGSE8wRkJRM3BDTEZsQlFVMHNTVUZCU1N4TlFVRk5MQ3RFUVVFclJDeE5RVUZOTEZWQlFWVXNSMEZCUnp0QlFVRkJMRWxCUTNCSE8wRkJRMEVzU1VGQlFVRXNUVUZCU3l4UFFVRlBMRWxCUVVrc1QwRkJUeXhsUVVGbE8wRkJRM1JETEZkQlFVOHNRMEZCUXl4cFFrRkJhVUlzVFVGQlRTeFZRVUZWTzBGQlFVRXNSVUZETTBNN1FVRlJUeXhOUVVGTkxIZENRVU5VTEVOQlFVTXNWMEZCYTBNc1dVRkJNa1U3UVVGRE5VY3NWVUZCVFVFc1VVRkJUeXhaUVVGWk8wRkJSWHBDTEZGQlFVa3NaMEpCUVdkQ08wRkJRM0JDTEZGQlFVa3NkVUpCUVhWQ08wRkJRek5DTEZGQlFVa3NhMEpCUVd0Q08wRkJRM1JDTEZGQlFVa3NVMEZCYlVJc1EwRkJRenRCUVVONFFpeFZRVUZOTEhkQ1FVRjNRaXhEUVVGRE8wRkJReTlDTEZWQlFVMHNlVUpCUVhsQ0xFTkJRVU03UVVGRmFFTXNVVUZCU1R0QlFVTkdMRTlCUVVNc2MwSkJRWE5DTEUxQlFVMHNTVUZCU1N4clFrRkJhMElzVDBGQlR6dEJRVVV4UkN4elFrRkJaMEpCTEUxQlFVc3NhMEpCUVd0Q0xGVkJRVlVzUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRzlDUVVGdlFqdEJRVU4yUml4VlFVRkpMR3RDUVVGclFpeEhRVUZITzBGQlEzWkNMSFZDUVVGbExIbENRVUV3UWp0QlFVRkJMRTFCUXpORE8wRkJSVUVzV1VGQlRTeERRVUZETEZsQlFWa3NWMEZCVnl4SlFVRkpMREpDUVVFeVFpeGhRVUZoTzBGQlJURkZMRmxCUVUwc1lVRkJZU3hEUVVGRE8wRkJRM0JDTEZsQlFVMHNZMEZCWXl4RFFVRkRPMEZCUTNKQ0xGbEJRVTBzTWtKQlFYZEZMRU5CUVVNN1FVRkRMMFVzWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4WlFVRlpMRXRCUVVzN1FVRkRia01zWTBGQlRTeFBRVUZQUVN4TlFVRkxMR2xDUVVGcFFpeGxRVUZsTEVOQlFVTTdRVUZEYmtRc1dVRkJTU3hUUVVGVExFZEJRVWM3UVVGRFpDeDVRa0ZCWlN3d1FrRkJNa0k3UVVGQlFTeFJRVU0xUXp0QlFVTkJMRGhDUVVGelFpeExRVUZMTEVsQlFVazdRVUZETDBJc2JVSkJRVmNzUzBGQlMwRXNUVUZCU3l4aFFVRmhMRWxCUVVrc1EwRkJRenRCUVVGQkxFMUJRM3BETzBGQlEwRXNaVUZCVXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hoUVVGaExFdEJRVXM3UVVGRGNFTXNZMEZCVFN4UFFVRlBRU3hOUVVGTExHdENRVUZyUWl4bFFVRmxMRU5CUVVNN1FVRkRjRVFzV1VGQlNTeFRRVUZUTEVkQlFVYzdRVUZEWkN4NVFrRkJaU3d5UWtGQk5FSTdRVUZCUVN4UlFVTTNRenRCUVVOQkxDdENRVUYxUWl4TFFVRkxMRWxCUVVrN1FVRkRhRU1zWTBGQlRTeGhRVUZoUVN4TlFVRkxMR0ZCUVdFc1NVRkJTVHRCUVVONlF5eHZRa0ZCV1N4TFFVRkxMRlZCUVZVN1FVRkZNMElzV1VGQlNTeFBRVUUwUWp0QlFVTTVRaXhuUWtGQlRTeFhRVUZYTEU5QlFVOHNVMEZCVXl3MFFrRkJORUlzVjBGRGVrUXNVVUZCVVN3d1FrRkRVaXhUUVVGVExEQkNRVUV3UWl4VlFVRlZMRXRCUVVzN1FVRkRkRVFzWTBGQlNTeGhRVUZoTEZOQlFWTXNZVUZCWVN4blFrRkJaMElzWVVGQllTeGpRVUZqTzBGQlEyaEdMR3RDUVVGTkxFbEJRVWtzVFVGQlRTdzBRMEZCTkVNc1VVRkJVU3hIUVVGSE8wRkJRVUVzVlVGRGVrVTdRVUZEUVN4dFEwRkJlVUlzUzBGQlN5eFJRVUZSTzBGQlFVRXNVVUZEZUVNN1FVRkJRU3hOUVVOR08wRkJSMEVzVlVGQlNTeGxRVUZ2UXp0QlFVTjRReXhWUVVGSkxFOUJRWE5HTzBGQlEzaEdMREJDUVVGclFrRXNUVUZCU3l4clFrRkJhMElzWVVGQllUdEJRVU4wUkN4WlFVRkpMRzlDUVVGdlFpeEhRVUZITzBGQlEzcENMSGxDUVVGbExEQkNRVUV5UWp0QlFVRkJMRkZCUXpWRE8wRkJSVUVzZFVKQlFXVTdRVUZCUVN4VlFVTmlMRkZCUVZFN1FVRkJRU3hWUVVOU08wRkJRVUVzVlVGRFFTeHBRMEZCYVVNc2VVSkJRWGxDTEVsQlFVa3NUMEZCU3l4NVFrRkJlVUlzUTBGQlF5eERRVUZETzBGQlFVRXNVVUZEYUVjN1FVRkJRU3hOUVVOR08wRkJSVUVzY1VKQlFXVXNTVUZCU1N4bFFVRmxMRU5CUVVNc1pVRkJaU3gxUWtGQmRVSXNkMEpCUVhkQ0xGbEJRVmtzUTBGQlF6dEJRVU01Unl4aFFVRlBMRU5CUVVNc1pVRkJaU3haUVVGWkxGZEJRVmM3UVVGQlFTeEpRVU5vUkN4VFFVRlRMRWRCUVVjN1FVRkRWaXcwUWtGQmMwSXNVVUZCVVN4VFFVRlBRU3hOUVVGTExGTkJRVk1zUjBGQlJ5eERRVUZETzBGQlEzWkVMRFpDUVVGMVFpeFJRVUZSTEZOQlFVOUJMRTFCUVVzc1UwRkJVeXhIUVVGSExFTkJRVU03UVVGRmVFUXNWVUZCU1N4dlFrRkJiMElzUjBGQlJ6dEJRVU42UWl4UlFVRkJRU3hOUVVGTExHMUNRVUZ0UWl4bFFVRmxPMEZCUVVFc1RVRkRla003UVVGRlFTeFZRVUZKTEd0Q1FVRnJRaXhIUVVGSE8wRkJRM1pDTEZGQlFVRkJMRTFCUVVzc2JVSkJRVzFDTEdGQlFXRTdRVUZCUVN4TlFVTjJRenRCUVVOQkxGbEJRVTA3UVVGQlFTeEpRVU5TTEZWQlFVVTdRVUZEUVN4TlFVRkJRU3hOUVVGTExFMUJRVTBzVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEZGtJc1ZVRkJTU3g1UWtGQmVVSXNSMEZCUnp0QlFVTTVRaXhSUVVGQlFTeE5RVUZMTERCQ1FVRXdRaXh2UWtGQmIwSTdRVUZCUVN4TlFVTnlSRHRCUVVOQkxHRkJRVThzVVVGQlVTeFhRVUZUUVN4TlFVRkxMRTFCUVUwc1MwRkJTeXhEUVVGRE8wRkJRVUVzU1VGRE0wTTdRVUZCUVN4RlFVTkdPMEZCVDBjc1RVRkJUU3huUWtGRFZDeERRVUZETEU5QlFXMUNMRmxCUVRKRk8wRkJRemRHTEZWQlFVMHNXVUZCYlVNc2MwSkJRWE5DTEV0QlFVczdRVUZEY0VVc1YwRkJUeXh6UWtGQmMwSXNWMEZCVnl4UFFVRlBPMEZCUVVFc1JVRkRha1E3UVVGRlJ5eE5RVUZOTEdsQ1FVRnBRaXhEUVVGRExHTkJRVFJDTzBGQlEzcEVMRlZCUVUxQkxGRkJRVThzV1VGQldUdEJRVU42UWl4VlFVRk5MRlZCUVZVc1pVRkJaU3hKUVVGSkxGTkJRVk03UVVGRE5VTXNVVUZCU1N4RFFVRkRMRk5CUVZNN1FVRkRXaXhaUVVGTkxFbEJRVWtzVFVGQlRTd3JRMEZCSzBNc1UwRkJVeXhGUVVGRk8wRkJRVUVzU1VGRE5VVTdRVUZEUVN4VlFVRk5MRU5CUVVNc1pVRkJaU3gxUWtGQmRVSXNkMEpCUVhkQ0xHTkJRV01zU1VGQlNUdEJRVVYyUml4UlFVRkpMR2RDUVVGblFqdEJRVU5zUWl4TlFVRkJRU3hOUVVGTExHMUNRVUZ0UWl4bFFVRmxMRTFCUVUwN1FVRkJRU3hKUVVNdlF6dEJRVVZCTEVsQlFVRkJMRTFCUVVzc2QwSkJRWGRDTEZOQlFWTTdRVUZGZEVNc01FSkJRWE5DTEZGQlFWRXNVMEZCVDBFc1RVRkJTeXhUUVVGVExFZEJRVWNzUTBGQlF6dEJRVU4yUkN3eVFrRkJkVUlzVVVGQlVTeFRRVUZQUVN4TlFVRkxMRk5CUVZNc1IwRkJSeXhEUVVGRE8wRkJRM2hFTEVsQlFVRkJMRTFCUVVzc2JVSkJRVzFDTEdGQlFXRTdRVUZEY2tNc2JVSkJRV1VzVDBGQlR5eFRRVUZUTzBGQlFVRXNSVUZEYWtNN1FVRkZUeXhOUVVGTkxESkNRVU5VTEVOQlFVTXNVVUZCTmtJc1pVRkJlVUlzVVVGQmEwSXNWMEZCYlVJc1ZVRkRhRVk3UVVGRFRpeFJRVUZKTEVOQlFVTXNVVUZCVVR0QlFVTllMRzlDUVVGakxFdEJRVXNzUTBGQlF6dEJRVU53UWp0QlFVRkJMRWxCUTBZN1FVRkZRU3hWUVVGTlFTeFJRVUZQTEZsQlFWazdRVUZGZWtJc1ZVRkJUU3hYUVVGWExFOUJRVThzUTBGQlF6dEJRVU42UWl4VlFVRk5MRTlCUVU4c1QwRkJUeXhEUVVGRE8wRkJRM0pDTEZWQlFVMHNWMEZCVnl4UFFVRlBMRU5CUVVNN1FVRkZla0lzVVVGQlNUdEJRVU5LTEZGQlFVazdRVUZGU2l4UlFVRkpMR0ZCUVdFc1dVRkJXU3hoUVVGaExHTkJRV003UVVGRGRFUXNXVUZCVFN4SlFVRkpMRTFCUVUwc2QwTkJRWGRETzBGQlFVRXNTVUZETVVRN1FVRkZRU3hSUVVGSkxHRkJRV0VzWTBGQll6dEJRVU0zUWl4WlFVRk5MRmxCUVZrc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRE5VSXNXVUZCVFN4eFFrRkJjVUlzY1VKQlFYRkNMREpDUVVFeVFpeFJRVUZSTEVOQlFVTTdRVUZEY0VZc2RVSkJRV2xDTEV0QlFVc3NUMEZCVHl4RFFVRkRMRWRCUVVjc1RVRkJUU3hKUVVGSkxFZEJRVWNzUTBGQlF5eEpRVUZKTzBGQlEyNUVMR2RDUVVGVlFTeE5RVUZMTEcxQ1FVRnRRaXhYUVVGWExFOUJRVThzVjBGQlZ5eGpRVUZqTzBGQlFVRXNTVUZETDBVc1QwRkJUenRCUVVOTUxGbEJRVTBzVDBGQlR5eFBRVUZQTEVOQlFVTTdRVUZGY2tJc1ZVRkJTU3hOUVVGTkxGRkJRVkVzU1VGQlNTeEhRVUZITzBGQlJYWkNMSGxDUVVGcFFpeEpRVUZKTEV0QlFVczdRVUZETVVJc2EwSkJRVlZCTEUxQlFVc3NVVUZCVVN4alFVRmpPMEZCUTNKRExHVkJRVThzUzBGQlN5eFBRVUZQTzBGQlEyNUNMRmxCUVVrc1dVRkJXU3hWUVVGVk8wRkJRekZDTEdsQ1FVRlRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFdEJRVXNzVVVGQlVTeExRVUZMTzBGQlEzQkRMR05CUVVrc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeFZRVUZWTzBGQlF5OUNMR3RDUVVGTkxFbEJRVWtzVlVGQlZTeDNRa0ZCZDBJc1EwRkJReXhyUWtGQmEwSTdRVUZCUVN4VlFVTnFSVHRCUVVOQkxGVkJRVUZCTEUxQlFVc3NVVUZCVVN4WFFVRlhMRWxCUVVrc1owSkJRV2RDTEV0QlFVc3NRMEZCUXl4SFFVRkhMRTFCUVUwN1FVRkJRU3hSUVVNM1JEdEJRVUZCTEUxQlEwWXNUMEZCVHp0QlFVTk1MSGxDUVVGcFFpeExRVUZMTzBGQlEzUkNMR3RDUVVGVlFTeE5RVUZMTEZGQlFWRXNZMEZCWXp0QlFVTnlReXhsUVVGUExFdEJRVXNzVDBGQlR6dEJRVU51UWl4UlFVRkJRU3hOUVVGTExFOUJRVThzU1VGQlNTeEpRVUZKTEZkQlFWY3NTMEZCU3l4UlFVRlJMRXRCUVVzc1dVRkJXU3hqUVVGakxFZEJRVWNzVDBGQlR6dEJRVUZCTEUxQlEzWkdPMEZCUVVFc1NVRkRSanRCUVVWQkxGVkJRVTBzVVVGQlVVRXNUVUZCU3l4VlFVRlZPMEZCUXpkQ0xGVkJRVTBzWVVGQllVRXNUVUZCU3l4WFFVRlhMRWxCUVVrc1MwRkJTeXhOUVVGTk8wRkJRMnhFTEZGQlFVazdRVUZEUml4VlFVRkpMRmRCUVZjc1lVRkJZVHRCUVVNMVFpeFhRVUZMTEZGQlFWRXNUMEZCUzBFc1RVRkJTeXhQUVVGUExGVkJRVlVzU1VGQlNTeERRVUZETzBGQlF6ZERMRmxCUVUxRExGVkJRVk5FTEUxQlFVczdRVUZCUVN4UlFVTm9RaXd5UWtGQk1rSXNVVUZCVVR0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGVE8wRkJRVUVzVVVGQlowSTdRVUZCUVN4UlFVRlpMRXRCUVVzN1FVRkJRU3hSUVVOb1JpeDVRa0ZCZVVJc1VVRkJVVHRCUVVGQkxFMUJRVU03UVVGRGRFTXNWVUZCU1VNc1dVRkJWeXhIUVVGSE8wRkJRMmhDTEhWQ1FVRmxMR2xFUVVGcFJDeFRRVUZUTEZkQlFWY3NTMEZCU3l4SFFVRkhPMEZCUVVFc1RVRkRPVVk3UVVGRFFTeHZRa0ZCWXl4TFFVRkxRU3hQUVVGTk8wRkJRVUVzU1VGRE0wSXNWVUZCUlR0QlFVTkJMRTFCUVVGRUxFMUJRVXNzWVVGQllTeExRVUZMTzBGQlFVRXNTVUZEZWtJN1FVRkJRU3hGUVVOR08wRkJTMFFzVFVGQlRTeE5RVUZOTEU5QlEyWXNWMEZCYlVJc1kwRkJkMElzWTBGQlowTXNaVUZETTBVc1pVRkJNa01zV1VGQmIwVTdRVUZEYWtnc1ZVRkJUVUVzVVVGQlR5eFpRVUZaTzBGQlEzcENMRlZCUVUwc1ZVRkJWU3hsUVVGbExFbEJRVWtzVTBGQlV6dEJRVU0xUXl4UlFVRkpMRU5CUVVNc1UwRkJVenRCUVVOYUxGbEJRVTBzU1VGQlNTeE5RVUZOTERaRFFVRTJReXhUUVVGVExFVkJRVVU3UVVGQlFTeEpRVU14UlR0QlFVTkJMRlZCUVUwc1EwRkJReXhsUVVGbExIVkNRVUYxUWl4M1FrRkJkMElzWTBGQll5eEpRVUZKTzBGQlJYWkdMRlZCUVUwc1lVRkJZU3hoUVVGaE8wRkJRMmhETEZWQlFVMHNZMEZCWXl4alFVRmpPMEZCUld4RExGRkJRVWtzYlVKQlFXMUNPMEZCUTNaQ0xGRkJRVWtzYlVKQlFUWkNMRU5CUVVNN1FVRkZiRU1zVlVGQlRTeHhRa0ZCSzBJc1EwRkJRenRCUVVOMFF5eFZRVUZOTEhOQ1FVRm5ReXhEUVVGRE8wRkJRM1pETEZWQlFVMHNiMEpCUVRoQ0xFTkJRVU03UVVGRmNrTXNWVUZCVFN4cFFrRkJhVUpCTEUxQlFVc3NWVUZCVlR0QlFVTjBReXhWUVVGTkxHOUNRVUZ2UWtFc1RVRkJTeXhYUVVGWExHRkJRV0VzUTBGQlF6dEJRVU40UkN4VlFVRk5MRzFDUVVGdFFrRXNUVUZCU3l4WFFVRlhMR0ZCUVdFc1EwRkJRenRCUVVOMlJDeFZRVUZOTEhGQ1FVRnhRa0VzVFVGQlN5eFhRVUZYTEdOQlFXTXNRMEZCUXp0QlFVTXhSQ3hWUVVGTkxHOUNRVUZ2UWtFc1RVRkJTeXhYUVVGWExHTkJRV01zUTBGQlF6dEJRVVY2UkN4UlFVRkpPMEZCUTBZc1QwRkJReXhyUWtGQmEwSXNaMEpCUVdkQ0xFbEJRVWtzWTBGQll5eFBRVUZQTzBGQlJ6VkVMR1ZCUVZNc1NVRkJTU3hIUVVGSExFbEJRVWtzV1VGQldTeExRVUZMTzBGQlEyNURMR2xEUVVGNVFpeGhRVUZoTEVOQlFVTXNSMEZCUnl4dlFrRkJiMElzYlVKQlFXMUNMRmRCUVZjc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGQlFTeE5RVU0zUnp0QlFVZEJMR1ZCUVZNc1NVRkJTU3hIUVVGSExFbEJRVWtzWVVGQllTeExRVUZMTzBGQlEzQkRPMEZCUVVFc1ZVRkRTU3hqUVVGakxFTkJRVU03UVVGQlFTeFZRVUZITzBGQlFVRXNWVUZCY1VJN1FVRkJRU3hWUVVGdFFqdEJRVUZCTEZWQlFWY3NZVUZCWVN4alFVRmpMRU5CUVVNN1FVRkJRU3hSUVVGRE8wRkJRVUVzVFVGRGVFYzdRVUZGUVN4VlFVRkpMRzFDUVVGdFFpeHZRa0ZCYjBJN1FVRkRNME1zVlVGQlNTeHJRa0ZCYTBJc2JVSkJRVzFDTzBGQlEzcERMRlZCUVVrc2IwSkJRVzlDTEhGQ1FVRnhRanRCUVVNM1F5eFZRVUZKTEcxQ1FVRnRRaXh2UWtGQmIwSTdRVUZETTBNc1pVRkJVeXhKUVVGSkxFZEJRVWNzU1VGQlNTeFpRVUZaTEV0QlFVczdRVUZEYmtNc1VVRkJRVUVzVFVGQlN5eFJRVUZSTEd0Q1FVRnJRaXhKUVVGSkxHMUNRVUZ0UWl4RFFVRkRPMEZCUTNaRUxGRkJRVUZCTEUxQlFVc3NVVUZCVVN4cFFrRkJhVUlzU1VGQlNTeHpRa0ZCYzBJc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGQlFTeE5RVU42UlR0QlFVTkJMR1ZCUVZNc1NVRkJTU3hIUVVGSExFbEJRVWtzWVVGQllTeExRVUZMTzBGQlEzQkRMRkZCUVVGQkxFMUJRVXNzVVVGQlVTeHRRa0ZCYlVJc1NVRkJTU3h2UWtGQmIwSXNRMEZCUXp0QlFVTjZSQ3hSUVVGQlFTeE5RVUZMTEZGQlFWRXNhMEpCUVd0Q0xFbEJRVWtzZFVKQlFYVkNMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJRVUVzVFVGRE5VVTdRVUZGUVN4VlFVRkpMRTlCUVRoRE8wRkJRMmhFTEdOQlFVMHNSVUZCUXl4UlFVRlJMREJDUVVFd1FpeG5RMEZCSzBJc1NVRkJTVHRCUVVVMVJTeFpRVUZKTEhOQ1FVRnpRaXhYUVVGWExGbEJRVms3UVVGREwwTXNaMEpCUVUwc1NVRkJTU3hOUVVGTkxESkNRVU5hTEZWQlFWVXNORVJCUVRSRUxITkNRVUZ6UWl4TlFVRk5MRWxCUVVrN1FVRkJRU3hSUVVNMVJ6dEJRVWRCTEdsQ1FVRlRMRWxCUVVrc1IwRkJSeXhKUVVGSkxGbEJRVmtzUzBGQlN6dEJRVU51UXl4blFrRkJUU3hSUVVGUkxHRkJRV0VzUTBGQlF6dEJRVU0xUWl4blFrRkJUVVVzWVVGQldTeE5RVUZOUml4TlFVRkxMR05CUVdNc1VVRkJVU3h6UWtGQmMwSXNTMEZCU3l4SFFVRkhMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdRVUZEZEVjc1kwRkJTVVVzWlVGQll5eEhRVUZITzBGQlEyNUNMREpDUVVGbExHOUNRVUZ2UWl4RFFVRkRMR2xDUVVGcFFpeFRRVUZUTEVkQlFVYzdRVUZCUVN4VlFVTnVSVHRCUVVGQkxGRkJRMFk3UVVGSFFTeHBRa0ZCVXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hoUVVGaExFdEJRVXM3UVVGRGNFTXNaMEpCUVUwc1VVRkJVU3hqUVVGakxFTkJRVU03UVVGRE4wSXNaMEpCUVUwc1YwRkJWeXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlJYSkRMR05CUVVrc1ZVRkJWVHRCUVVWYUxHdENRVUZOUVN4aFFVRlpSaXhOUVVGTExHVkJRV1VzVVVGQlVTeDFRa0ZCZFVJc1MwRkJTeXhIUVVGSExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1EwRkJRenRCUVVOMFJ5eG5Ra0ZCU1VVc1pVRkJZeXhIUVVGSE8wRkJRMjVDTERaQ1FVRmxMRzFEUVVGdFF5eERRVUZETEdsQ1FVRnBRaXhUUVVGVExFZEJRVWM3UVVGQlFTeFpRVU5zUmp0QlFVRkJMRlZCUTBZc1QwRkJUenRCUVVWTUxHdENRVUZOUVN4aFFVTkdSaXhOUVVGTExHVkJRV1VzVVVGQlVTeDFRa0ZCZFVJc1MwRkJTeXhIUVVGSExFZEJRVWNzWjBOQlFXZERMRXRCUVVzc1EwRkJRenRCUVVONFJ5eG5Ra0ZCU1VVc1pVRkJZeXhIUVVGSE8wRkJRMjVDTERaQ1FVRmxMSEZDUVVGeFFpeERRVUZETEZGQlFWRXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJc1UwRkJVeXhIUVVGSE8wRkJRVUVzV1VGRGRFYzdRVUZCUVN4VlFVTkdPMEZCUVVFc1VVRkRSanRCUVVGQkxFMUJRMFk3UVVGRlFTeFZRVUZKTzBGQlJVb3NWVUZCU1N4UFFVRTRRenRCUVVOb1JDeHZRa0ZCV1N4TlFVRk5SaXhOUVVGTE8wRkJRVUVzVlVGRGJrSTdRVUZCUVN4VlFVRmxMR1ZCUVdVN1FVRkJRU3hWUVVGUk8wRkJRVUVzVlVGQllUdEJRVUZCTEZWQlFXOUNPMEZCUVVFc1VVRkJaMEk3UVVGQlFTeE5RVU0zUml4UFFVRlBPMEZCUTB3c2IwSkJRVmtzVFVGQlRVRXNUVUZCU3p0QlFVRkJMRlZCUTI1Q08wRkJRVUVzVlVGQlpUdEJRVUZCTEZWQlFXdENPMEZCUVVFc1ZVRkJiVUk3UVVGQlFTeFZRVUZaTzBGQlFVRXNWVUZCYlVJN1FVRkJRU3hWUVVOdVJqdEJRVUZCTEZWQlFXOUNPMEZCUVVFc1VVRkJaMEk3UVVGQlFTeE5RVU14UXp0QlFVVkJMRlZCUVVrc1kwRkJZeXhIUVVGSE8wRkJRMjVDTEhWQ1FVRmxMREJDUVVFd1FqdEJRVUZCTEUxQlF6TkRPMEZCUlVFc1dVRkJUU3hUUVVFeVFpeERRVUZETzBGQlJXeERMR1ZCUVZNc1NVRkJTU3hIUVVGSExFbEJRVWtzWVVGQllTeExRVUZMTzBGQlEzQkRMR05CUVUwc1UwRkJVMEVzVFVGQlN5eFJRVUZSTEhGQ1FVRnhRaXhKUVVGSkxFTkJRVU03UVVGRGRFUXNXVUZCU1N4WFFVRlhMRzlDUVVGdlFpeERRVUZETEVkQlFVYzdRVUZGY2tNc2FVSkJRVThzUzBGQlN5eGpRVUZqTEVOQlFVTXNRMEZCUlR0QlFVTTNRanRCUVVGQkxGRkJRMFk3UVVGRlFTeGpRVUZOTERKQ1FVRXlRa0VzVFVGQlN5eFZRVUZWTzBGQlJXaEVMR05CUVUwc2JVSkJRVzFDUVN4TlFVRkxMRmRCUVZjc1NVRkJTU3hEUVVGRE8wRkJSVGxETEZsQlFVa3NiVUpCUVcxQ08wRkJRM1pDTEZsQlFVa3NUVUZCTmtJc1lVRkJZVHRCUVVNNVF5eFpRVUZKTzBGQlEwWXNaMEpCUVUxRkxHRkJRVmxHTEUxQlFVczdRVUZCUVN4WlFVTnVRanRCUVVGQkxGbEJRVkU3UVVGQlFTeFpRVUZyUWl4dFFrRkJiVUk3UVVGQlFTeFpRVUZITEcxQ1FVRnRRanRCUVVGQkxGbEJRVWNzYlVKQlFXMUNPMEZCUVVFc1ZVRkJSVHRCUVVNdlJpeGpRVUZKUlN4bFFVRmpMRWRCUVVjN1FVRkRia0lzTWtKQlFXVXNORU5CUVRSRExFTkJRVU1zUjBGQlJ6dEJRVUZCTEZWQlEycEZPMEZCUTBFc1kwRkJTU3hyUWtGQmEwSXNiVUpCUVcxQ08wRkJRM3BETEdkQ1FVRk5MRmRCUVZkR0xFMUJRVXNzVVVGQlVTeHBRa0ZCYVVJN1FVRkRMME1zZFVKQlFXRkJMRTFCUVVzc1VVRkJVU3hwUWtGQmFVSTdRVUZETTBNc1owSkJRVTBzWVVGQllVRXNUVUZCU3l4UlFVRlJMR2xDUVVGcFFqdEJRVU5xUkN4blFrRkJUU3hoUVVGaFFTeE5RVUZMTEZGQlFWRXNhVUpCUVdsQ08wRkJRMnBFTEdkQ1FVRk5MRTlCUVU4c1EwRkJRenRCUVVOa0xHMUNRVUZUUnl4TFFVRkpMRWRCUVVkQkxFdEJRVWtzV1VGQldVRXNUVUZCU3p0QlFVTnVReXhwUWtGQlN5eExRVUZMU0N4TlFVRkxMRkZCUVZFc1lVRkJZU3hKUVVGSlJ5eEZRVUZETEVOQlFVTTdRVUZCUVN4VlFVTTFRenRCUVVOQkxGVkJRVUZJTEUxQlFVc3NVMEZCVXl4VlFVRlZPMEZCUlhoQ0xHZENRVUZOTEU5QlFVOHNTMEZCU3l4UFFVRlBMRU5CUVVNc1IwRkJSeXhOUVVGTkxFbEJRVWtzUjBGQlJ5eERRVUZETzBGQlF6TkRMR2xDUVVGUExESkNRVUV5UWl4UlFVRlJPMEZCUlRGRExHZENRVUZOTEc5Q1FVRnZRaXhuUWtGQlowSXNlVUpCUVhsQ0xHTkJRV01zUTBGQlF5eERRVUZETzBGQlJXNUdMR05CUVVrc1UwRkJVeXhWUVVGVk8wRkJRM0pDTEdkQ1FVRkpMSE5DUVVGelFpeGpRVUZqTzBGQlEzUkRMRzlDUVVGTkxFbEJRVWtzVFVGQlRTeDNRMEZCZDBNN1FVRkJRU3haUVVNeFJEdEJRVU5CTEd0Q1FVRk5MR0ZCUVhWQ0xFTkJRVU03UVVGRE9VSXNaMEpCUVVrc1dVRkJXU3hoUVVGaE8wRkJRemRDTEhGQ1FVRlRSeXhMUVVGSkxFZEJRVWRCTEV0QlFVa3NUVUZCVFVFc1RVRkJTenRCUVVNM1FpeHZRa0ZCVFN4VFFVRlRTQ3hOUVVGTExGRkJRVkVzVjBGQlZ6dEJRVU4yUXl4dlFrRkJUU3hwUWtGQmFVSkhMRTlCUVUwc1QwRkJUeXhKUVVGSkxGTkJRVmxJTEUxQlFVc3NVVUZCVVN4VFFVRlRMRWxCUVVrN1FVRkRPVVVzZVVKQlFWY3NTMEZCUzBFc1RVRkJTeXhoUVVGaExGRkJRVkVzWTBGQll5eERRVUZETzBGQlFVRXNXVUZETTBRN1FVRkRRU3h0UWtGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4TlFVRk5MRmxCUVZrc1MwRkJTeXhEUVVGRE8wRkJRVUVzVlVGRE4wTXNUMEZCVHp0QlFVZE1MR2RDUVVGSkxITkNRVUZ6UWl4blFrRkJaMElzVDBGQlR5eEhRVUZITzBGQlEyeEVMRzlDUVVGTkxGbEJRVmxCTEUxQlFVc3NZMEZCWXl4VlFVRlZPMEZCUXk5RExHOUNRVUZOTEdOQlFXTXNjVUpCUVhGQ0xGRkJRVkU3UVVGRGFrUXNhMEpCUVVrc1owSkJRV2RDTEZWQlFXRXNRMEZCUXl4NVFrRkJlVUlzU1VGQlNTeEhRVUZITzBGQlEyaEZMSE5DUVVGTkxFbEJRVWtzVFVGQlRTd3dRa0ZCTUVJc1NVRkJTU3hGUVVGRk8wRkJRVUVzWTBGRGJFUTdRVUZIUVN4cFEwRkJiVUk3UVVGRmJrSXNjVUpCUVU4c1MwRkJTenRCUVVGQkxHZENRVU5XTzBGQlFVRXNaMEpCUVUwN1FVRkJRU3huUWtGQlRUdEJRVUZCTEd0Q1FVTldPMEZCUVVFc2EwSkJRMEVzVlVGQlZVRXNUVUZCU3l4eFFrRkJjVUlzVjBGQlZ5eFBRVUZQTEdGQlFXRXNTVUZCU1R0QlFVRkJMR3RDUVVOMlJTeFRRVUZUTEUxQlFVMDdRVUZEWWl4dlFrRkJRVUVzVFVGQlN5eHJRa0ZCYTBJc1RVRkJUVHRCUVVGQkxHdENRVU12UWp0QlFVRkJMR2RDUVVOR08wRkJRVUVzWjBKQlEwRTdRVUZCUVN4alFVTkdMRU5CUVVNN1FVRkJRU3haUVVOSUxFOUJRVTg3UVVGRFRDeHZRa0ZCVFN4M1FrRkJkMElzYTBOQlFXdERMRWxCUVVrN1FVRkRjRVVzYjBKQlFVMHNUMEZCVHl4SlFVRkpMSE5DUVVGelFpeEpRVUZKTzBGQlF6TkRMR3RDUVVGSkxGZEJRVmNzUzBGQlN5eFJRVUZSTEV0QlFVc3NXVUZCV1N4TFFVRkxMRlZCUVZVc1JVRkRka1FzU1VGQlNVRXNUVUZCU3l4UFFVRlBMRk5CUVZNc1dVRkJXU3hoUVVGaExFdEJRVXNzVlVGQlZTeERRVUZETzBGQlEzWkZMSEZDUVVGUExFdEJRVXNzUTBGQlF5eE5RVUZOTEUxQlFVMHNUVUZCVFN4TFFVRkxMRU5CUVVNN1FVRkJRU3haUVVOMlF6dEJRVUZCTEZWQlEwWTdRVUZCUVN4UlFVTkdMRlZCUVVVN1FVRkRRU3hWUVVGQlFTeE5RVUZMTEdGQlFXRXNkMEpCUVhkQ08wRkJRekZETEdOQlFVa3NVMEZCVXl4WlFVRlpMRmxCUVZrN1FVRkRia01zV1VGQlFVRXNUVUZCU3l4TlFVRk5MRlZCUVZVN1FVRkJRU3hWUVVOMlFqdEJRVU5CTEdOQlFVa3NRMEZCUXl4clFrRkJhMEk3UVVGRGNrSXNXVUZCUVVFc1RVRkJTeXhyUWtGQmEwSXNUVUZCVFR0QlFVRkJMRlZCUXk5Q08wRkJRVUVzVVVGRFJqdEJRVUZCTEUxQlEwWTdRVUZGUVN4VlFVRkpMR2RDUVVGblFqdEJRVU5zUWl4UlFVRkJRU3hOUVVGTExITkNRVUZ6UWl4bFFVRmxMRTFCUVUwN1FVRkJRU3hOUVVOc1JEdEJRVVZCTEdGQlFVODdRVUZCUVN4SlFVTlVMRlZCUVVVN1FVRkRRU3hOUVVGQlFTeE5RVUZMTEdGQlFXRXNZMEZCWXp0QlFVVm9ReXg1UWtGQmJVSXNVVUZCVVN4UFFVRkxRU3hOUVVGTExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1FVRkRla1FzTUVKQlFXOUNMRkZCUVZFc1QwRkJTMEVzVFVGQlN5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJRekZFTEhkQ1FVRnJRaXhSUVVGUkxFOUJRVXRCTEUxQlFVc3NUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkZOVU1zVlVGQlNTeHhRa0ZCY1VJc1IwRkJSenRCUVVNeFFpeFJRVUZCUVN4TlFVRkxMSE5DUVVGelFpeG5Ra0ZCWjBJN1FVRkJRU3hOUVVNM1F6dEJRVU5CTEhWQ1FVRnBRaXhSUVVGUkxFOUJRVXRCTEUxQlFVc3NUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkJRU3hKUVVNM1F6dEJRVUZCTEVWQlEwWTdRVUZMVHl4TlFVRk5MR1ZCUVdVc1EwRkJReXhqUVVFMFFqdEJRVU4yUkN4VlFVRk5RU3hSUVVGUExGbEJRVms3UVVGRGVrSXNWVUZCVFN4VlFVRlZMR1ZCUVdVc1NVRkJTU3hUUVVGVE8wRkJRelZETEZGQlFVa3NRMEZCUXl4VFFVRlRPMEZCUTFvc1dVRkJUU3hKUVVGSkxFMUJRVTBzYjBKQlFXOUNPMEZCUVVFc1NVRkRkRU03UVVGRFFTeFZRVUZOTEdkQ1FVRm5RaXhSUVVGUkxFTkJRVU03UVVGSEwwSXNWVUZCVFN4clFrRkJhMEpCTEUxQlFVc3NhVUpCUVdsQ0xHRkJRV0U3UVVGRE0wUXNVVUZCU1N4dlFrRkJiMElzUjBGQlJ6dEJRVU42UWl4eFFrRkJaU3hwUTBGQmEwTTdRVUZCUVN4SlFVTnVSRHRCUVVOQkxFbEJRVUZCTEUxQlFVc3NVMEZCVXl4bFFVRmxPMEZCUVVFc1JVRkRMMEk3UVVGRlR5eE5RVUZOTERaQ1FVRTJRaXhEUVVGRExGbEJRWE5GTzBGQlF5OUhMRlZCUVUwc1ZVRkJOa0lzUTBGQlF6dEJRVU53UXl4bFFVRlhMRlZCUVZVc1UwRkJVenRCUVVNMVFpeFpRVUZOTEU5QlFVOHNUMEZCVHl4RFFVRkRPMEZCUTNKQ0xGVkJRVWtzUTBGQlF5eE5RVUZOTEZGQlFWRXNTVUZCU1N4TFFVRkxMRmxCUVZrc1RVRkJUVHRCUVVNMVF5eG5Ra0ZCVVN4TFFVRkxMRXRCUVVzc1RVRkJUVHRCUVVGQkxFMUJRekZDTzBGQlFVRXNTVUZEUmp0QlFVTkJMRmRCUVU4N1FVRkJRU3hGUVVOVU96czdRVU53WjBKQkxFOUJRVXNzV1VGQldTeERRVUZETEU5QlFUSkRPMEZCUXpORUxGbEJRVkVzUjBGQlJ5eExRVUZMTEUxQlFVMDdRVUZCUVN4TlFVTndRaXhMUVVGTE8wRkJRMGdzV1VGQlNUdEJRVU5HTEdkRFFVRnpRaXhIUVVGSExFdEJRVXNzUlVGQlJ5eEZRVU0xUWp0QlFVRkJMRmxCUTBjc1RVRkJUU3haUVVGWkxFVkJRVU1zVFVGQlRTeFpRVUZYTEVOQlFXMUNPMEZCUVVFc1dVRkRka1FzVTBGQlR5eFpRVUZaTEVWQlFVTXNUVUZCVFN4aFFVRmhMRWxCUVVjc1EwRkJiVUk3UVVGQlFTeFZRVUZETzBGQlFVRXNVVUZEZUVVc1UwRkJVeXhMUVVGTE8wRkJRMW9zYzBKQlFWa3NSVUZCUXl4TlFVRk5MR0ZCUVdFc1NVRkJSeXhEUVVGdFFqdEJRVUZCTEZGQlEzaEVPMEZCUTBFN1FVRkJRU3hOUVVOR0xFdEJRVXM3UVVGRFNDeFpRVUZKTzBGQlEwWXNjMEpCUVZrc1IwRkJSeXhMUVVGTExFVkJRVWNzUlVGQlJTeExRVUZMTEUxQlFVMHNXVUZCV1N4RlFVRkRMRTFCUVUwc1YwRkJWU3hEUVVGdFFpeEhRVUZITEZOQlFVOHNXVUZCV1R0QlFVRkJMRmxCUTJwQ0xFMUJRVTA3UVVGQlFTeFpRVU5PTzBGQlFVRXNWVUZEUml4RFFVRnRRaXhEUVVGRE8wRkJRVUVzVVVGRE4wY3NVMEZCVXl4TFFVRkxPMEZCUTFvc2MwSkJRVmtzUlVGQlF5eE5RVUZOTEZsQlFWa3NTVUZCUnl4RFFVRnRRanRCUVVGQkxGRkJRM1pFTzBGQlEwRTdRVUZCUVN4TlFVTkdMRXRCUVVzN1FVRkRTQ3haUVVGSk8wRkJRMFlzWjBKQlFVMHNSVUZCUXl4TlFVRkxMRWxCUVVrc1IwRkJSeXhMUVVGTE8wRkJRM2hDTEdkQ1FVRk5MRmxCUVZrc2MwSkJRWE5DTEV0QlFVczdRVUZETjBNc2MwSkJRVmtzUlVGQlF5eE5RVUZOTEcxQ1FVRnRRaXhMUVVGTExGVkJRVk1zUTBGQmJVSTdRVUZCUVN4UlFVTjZSU3hUUVVGVExFdEJRVXM3UVVGRFdpeHpRa0ZCV1N4RlFVRkRMRTFCUVUwc2JVSkJRVzFDTEVsQlFVY3NRMEZCYlVJN1FVRkJRU3hSUVVNNVJEdEJRVU5CTzBGQlFVRXNUVUZEUml4TFFVRkxPMEZCUTBnc1dVRkJTVHRCUVVOR0xHZENRVUZOTEVWQlFVTXNWMEZCVnl4UlFVRlBMRWxCUVVrc1IwRkJSeXhMUVVGTE8wRkJRM0pETEdkQ1FVRk5MR3RDUVVGclFpeHpRa0ZCYzBJc1YwRkJWeXhQUVVGUE8wRkJRMmhGTEhOQ1FVRlpMRVZCUVVNc1RVRkJUU3h0UWtGQmJVSXNTMEZCU3l4blFrRkJaU3hEUVVGdFFqdEJRVUZCTEZGQlF5OUZMRk5CUVZNc1MwRkJTenRCUVVOYUxITkNRVUZaTEVWQlFVTXNUVUZCVFN4dFFrRkJiVUlzU1VGQlJ5eERRVUZ0UWp0QlFVRkJMRkZCUXpsRU8wRkJRMEU3UVVGQlFTeE5RVU5HTEV0QlFVczdRVUZEU0N4WlFVRkpPMEZCUTBZc1owSkJRVTBzUlVGQlF5eFBRVUZQTEZGQlFVOHNTVUZCU1N4SFFVRkhMRXRCUVVzN1FVRkRha01zWjBKQlFVMHNhMEpCUVd0Q0xHTkJRV01zVDBGQlR5eFBRVUZQTzBGQlEzQkVMSE5DUVVGWkxFVkJRVU1zVFVGQlRTeFZRVUZWTEV0QlFVc3NaMEpCUVdVc1EwRkJiVUk3UVVGQlFTeFJRVU4wUlN4VFFVRlRMRXRCUVVzN1FVRkRXaXh6UWtGQldTeEZRVUZETEUxQlFVMHNWVUZCVlN4SlFVRkhMRU5CUVcxQ08wRkJRVUVzVVVGRGNrUTdRVUZEUVR0QlFVRkJMRTFCUTBZc1MwRkJTenRCUVVOSUxGbEJRVWs3UVVGRFJpeDVRa0ZCWlN4SFFVRkhMRXRCUVVzc1JVRkJSenRCUVVNeFFpeHpRa0ZCV1N4RlFVRkRMRTFCUVUwc1ZVRkJVeXhEUVVGdFFqdEJRVUZCTEZGQlEycEVMRk5CUVZNc1MwRkJTenRCUVVOYUxITkNRVUZaTEVWQlFVTXNUVUZCVFN4WFFVRlhMRWxCUVVjc1EwRkJiVUk3UVVGQlFTeFJRVU4wUkR0QlFVTkJPMEZCUVVFc1RVRkRSaXhMUVVGTE8wRkJRMGdzV1VGQlNUdEJRVU5HTEdkQ1FVRk5MRVZCUVVNc1YwRkJWeXhqUVVGakxGRkJRVkVzWlVGQlpTeFJRVUZQTEVsQlFVa3NSMEZCUnl4TFFVRkxPMEZCUXpGRkxHTkJRVWtzVjBGQlZ5eGpRVUZqTEZGQlFWRXNaVUZCWlN4SlFVRkpMRTFCUVUwc1kwRkJZeXhOUVVGTkxFVkJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVY3NUMEZCVHl4RlFVTnNSenRCUVVGQkxGbEJRMGNzWVVGQlZ6dEJRVU5VTEd0Q1FVRkpMRkZCUVZFc1MwRkJTeXhQUVVGTExFVkJRVVVzUTBGQlF5eE5RVUZOTEV0QlFVc3NSMEZCUnp0QlFVTnlReXcwUWtGQldTeEZRVUZETEUxQlFVMHNUMEZCVHl4TFFVRkxMR3RFUVVGcFJDeERRVUZETzBGQlFVRXNZMEZEYmtZc1QwRkJUenRCUVVOTU8wRkJRVUVzYTBKQlEwa3NSVUZCUXl4TlFVRk5MRTlCUVU4c1MwRkJTeXhSUVVGUE8wRkJRVUVzYTBKQlF6RkNMREpDUVVFeVFpeFBRVUYxUXp0QlFVRkJMR2RDUVVGRE8wRkJRVUVzWTBGRGVrVTdRVUZCUVN4WlFVTkdPMEZCUVVFc1dVRkRRU3hUUVVGUE8wRkJRMHdzTUVKQlFWa3NSVUZCUXl4TlFVRk5MRTlCUVU4c1NVRkJSeXhEUVVGdFFqdEJRVUZCTEZsQlEyeEVPMEZCUVVFc1ZVRkJRenRCUVVGQkxGRkJRMWdzVTBGQlV5eExRVUZMTzBGQlExb3NjMEpCUVZrc1JVRkJReXhOUVVGTkxFOUJRVThzU1VGQlJ5eERRVUZ0UWp0QlFVRkJMRkZCUTJ4RU8wRkJRMEU3UVVGQlFTeE5RVU5HTEV0QlFVczdRVUZEU0N4WlFVRkpPMEZCUTBZc1owSkJRVTBzVlVGQlZTeEhRVUZITEV0QlFVczdRVUZEZUVJc2RVSkJRV0VzVDBGQlR6dEJRVU53UWl4elFrRkJXU3hGUVVGRExFMUJRVTBzWjBKQlFXVXNRMEZCYlVJN1FVRkJRU3hSUVVOMlJDeFRRVUZUTEV0QlFVczdRVUZEV2l4elFrRkJXU3hGUVVGRExFMUJRVTBzYVVKQlFXbENMRWxCUVVjc1EwRkJiVUk3UVVGQlFTeFJRVU0xUkR0QlFVTkJPMEZCUVVFc1RVRkRSaXhMUVVGTE8wRkJRMGdzV1VGQlNUdEJRVU5HTEdkQ1FVRk5TU3h4UWtGQmIwSXNiMEpCUVc5Q08wRkJRemxETEhOQ1FVRlpMRVZCUVVNc1RVRkJUU3d3UWtGQk1FSXNTMEZCUzBFc2JVSkJRV2xDTEVOQlFXMUNPMEZCUVVFc1VVRkRlRVlzVTBGQlV5eExRVUZMTzBGQlExb3NjMEpCUVZrc1JVRkJReXhOUVVGTkxEQkNRVUV3UWl4SlFVRkhMRU5CUVcxQ08wRkJRVUVzVVVGRGNrVTdRVUZEUVR0QlFVRkJMRTFCUTBZN1FVRkJRU3hKUVVOR08wRkJRVUVzUlVGRFJqc2lMQW9nSUNKdVlXMWxjeUk2SUZzaWFtOXBiaUlzSUNKM1lYTnRJaXdnSW5kaGMyMGlMQ0FpZDJGemJTSXNJQ0ozWVhOdElpd2dJblJsYm5OdmNpSXNJQ0psY25KdmNrTnZaR1VpTENBaWFTSXNJQ0p2Y25SRmJuWkpibWwwYVdGc2FYcGxaQ0pkQ24wS1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0VudiwgZW52LCBJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge09ydFdhc21NZXNzYWdlLCBTZXJpYWxpemFibGVNb2RlbGRhdGEsIFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YSwgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGEsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi93YXNtLWNvcmUtaW1wbCc7XG5pbXBvcnQge2luaXRpYWxpemVXZWJBc3NlbWJseX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuXG5jb25zdCBpc1Byb3h5ID0gKCk6IGJvb2xlYW4gPT4gISFlbnYud2FzbS5wcm94eSAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xubGV0IHByb3h5V29ya2VyOiBXb3JrZXJ8dW5kZWZpbmVkO1xubGV0IGluaXRpYWxpemluZyA9IGZhbHNlO1xubGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG4vLyByZXNvbHZlOyByZWplY3RcbnR5cGUgUHJvbWlzZUNhbGxiYWNrczxUID0gdm9pZD4gPSBbKHJlc3VsdDogVCkgPT4gdm9pZCwgKHJlYXNvbjogdW5rbm93bikgPT4gdm9pZF07XG5cbmxldCBpbml0V2FzbUNhbGxiYWNrczogUHJvbWlzZUNhbGxiYWNrcztcbmxldCBpbml0T3J0Q2FsbGJhY2tzOiBQcm9taXNlQ2FsbGJhY2tzO1xuY29uc3QgY3JlYXRlU2Vzc2lvbkFsbG9jYXRlQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPFNlcmlhbGl6YWJsZU1vZGVsZGF0YT4+ID0gW107XG5jb25zdCBjcmVhdGVTZXNzaW9uRmluYWxpemVDYWxsYmFja3M6IEFycmF5PFByb21pc2VDYWxsYmFja3M8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPj4gPSBbXTtcbmNvbnN0IGNyZWF0ZVNlc3Npb25DYWxsYmFja3M6IEFycmF5PFByb21pc2VDYWxsYmFja3M8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPj4gPSBbXTtcbmNvbnN0IHJlbGVhc2VTZXNzaW9uQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPHZvaWQ+PiA9IFtdO1xuY29uc3QgcnVuQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhW10+PiA9IFtdO1xuY29uc3QgZW5kUHJvZmlsaW5nQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPHZvaWQ+PiA9IFtdO1xuY29uc3QgaXNPcnRFbnZJbml0aWFsaXplZENhbGxiYWNrczogQXJyYXk8UHJvbWlzZUNhbGxiYWNrczxib29sZWFuPj4gPSBbXTtcblxuY29uc3QgZW5zdXJlV29ya2VyID0gKCk6IHZvaWQgPT4ge1xuICBpZiAoaW5pdGlhbGl6aW5nIHx8ICFpbml0aWFsaXplZCB8fCBhYm9ydGVkIHx8ICFwcm94eVdvcmtlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignd29ya2VyIG5vdCByZWFkeScpO1xuICB9XG59O1xuXG5jb25zdCBvblByb3h5V29ya2VyTWVzc2FnZSA9IChldjogTWVzc2FnZUV2ZW50PE9ydFdhc21NZXNzYWdlPik6IHZvaWQgPT4ge1xuICBzd2l0Y2ggKGV2LmRhdGEudHlwZSkge1xuICAgIGNhc2UgJ2luaXQtd2FzbSc6XG4gICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgaW5pdFdhc21DYWxsYmFja3NbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBpbml0V2FzbUNhbGxiYWNrc1swXSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW5pdC1vcnQnOlxuICAgICAgaWYgKGV2LmRhdGEuZXJyKSB7XG4gICAgICAgIGluaXRPcnRDYWxsYmFja3NbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdE9ydENhbGxiYWNrc1swXSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY3JlYXRlX2FsbG9jYXRlJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBjcmVhdGVTZXNzaW9uQWxsb2NhdGVDYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlU2Vzc2lvbkFsbG9jYXRlQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjcmVhdGVfZmluYWxpemUnOlxuICAgICAgaWYgKGV2LmRhdGEuZXJyKSB7XG4gICAgICAgIGNyZWF0ZVNlc3Npb25GaW5hbGl6ZUNhbGxiYWNrcy5zaGlmdCgpIVsxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcmVhdGVTZXNzaW9uRmluYWxpemVDYWxsYmFja3Muc2hpZnQoKSFbMF0oZXYuZGF0YS5vdXQhKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICBpZiAoZXYuZGF0YS5lcnIpIHtcbiAgICAgICAgY3JlYXRlU2Vzc2lvbkNhbGxiYWNrcy5zaGlmdCgpIVsxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcmVhdGVTZXNzaW9uQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZWxlYXNlJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICByZWxlYXNlU2Vzc2lvbkNhbGxiYWNrcy5zaGlmdCgpIVsxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWxlYXNlU2Vzc2lvbkNhbGxiYWNrcy5zaGlmdCgpIVswXSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncnVuJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBydW5DYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnVuQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlbmQtcHJvZmlsaW5nJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBlbmRQcm9maWxpbmdDYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kUHJvZmlsaW5nQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpcy1vcnQtZW52LWluaXRpYWxpemVkJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBpc09ydEVudkluaXRpYWxpemVkQ2FsbGJhY2tzLnNoaWZ0KCkhWzFdKGV2LmRhdGEuZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzT3J0RW52SW5pdGlhbGl6ZWRDYWxsYmFja3Muc2hpZnQoKSFbMF0oZXYuZGF0YS5vdXQhKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gIH1cbn07XG5cbmNvbnN0IHNjcmlwdFNyYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAoZG9jdW1lbnQ/LmN1cnJlbnRTY3JpcHQgYXMgSFRNTFNjcmlwdEVsZW1lbnQpPy5zcmMgOiB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplV2ViQXNzZW1ibHlJbnN0YW5jZSA9IGFzeW5jKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaW5pdGlhbGl6aW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ211bHRpcGxlIGNhbGxzIHRvIFxcJ2luaXRXYXNtKClcXCcgZGV0ZWN0ZWQuJyk7XG4gICAgfVxuICAgIGlmIChhYm9ydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXZpb3VzIGNhbGwgdG8gXFwnaW5pdFdhc20oKVxcJyBmYWlsZWQuJyk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgIC8vIG92ZXJ3cml0ZSB3YXNtIGZpbGVwYXRoc1xuICAgIGlmIChlbnYud2FzbS53YXNtUGF0aHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHNjcmlwdFNyYyAmJiBzY3JpcHRTcmMuaW5kZXhPZignYmxvYjonKSAhPT0gMCkge1xuICAgICAgICBlbnYud2FzbS53YXNtUGF0aHMgPSBzY3JpcHRTcmMuc3Vic3RyKDAsICsoc2NyaXB0U3JjKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHByb3h5V29ya2VyPy50ZXJtaW5hdGUoKTtcblxuICAgICAgY29uc3Qgd29ya2VyVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihcbiAgICAgICAgICBbXG4gICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmUoKSBmdW5jdGlvbiBpcyBoYW5kbGVkIGJ5IGVzYnVpbGQgcGx1Z2luIHRvIGxvYWQgZmlsZSBjb250ZW50IGFzIHN0cmluZy5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgICAgICByZXF1aXJlKCcuL3Byb3h5LXdvcmtlci9tYWluJylcbiAgICAgICAgICBdLFxuICAgICAgICAgIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pKTtcbiAgICAgIHByb3h5V29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVcmwsIHtuYW1lOiAnb3J0LXdhc20tcHJveHktd29ya2VyJ30pO1xuICAgICAgcHJveHlXb3JrZXIub25lcnJvciA9IChldjogRXJyb3JFdmVudCkgPT4gcmVqZWN0KGV2KTtcbiAgICAgIHByb3h5V29ya2VyLm9ubWVzc2FnZSA9IG9uUHJveHlXb3JrZXJNZXNzYWdlO1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh3b3JrZXJVcmwpO1xuICAgICAgaW5pdFdhc21DYWxsYmFja3MgPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpbml0LXdhc20nLCBpbiA6IGVudi53YXNtfTtcbiAgICAgIHByb3h5V29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGluaXRpYWxpemVXZWJBc3NlbWJseShlbnYud2FzbSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplUnVudGltZSA9IGFzeW5jKGVudjogRW52KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGluaXRPcnRDYWxsYmFja3MgPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpbml0LW9ydCcsIGluIDogZW52fTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBjb3JlLmluaXRSdW50aW1lKGVudik7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uQWxsb2NhdGUgPSBhc3luYyhtb2RlbDogVWludDhBcnJheSk6IFByb21pc2U8U2VyaWFsaXphYmxlTW9kZWxkYXRhPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNlcmlhbGl6YWJsZU1vZGVsZGF0YT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY3JlYXRlU2Vzc2lvbkFsbG9jYXRlQ2FsbGJhY2tzLnB1c2goW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2NyZWF0ZV9hbGxvY2F0ZScsIGluIDoge21vZGVsfX07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgW21vZGVsLmJ1ZmZlcl0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3JlLmNyZWF0ZVNlc3Npb25BbGxvY2F0ZShtb2RlbCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uRmluYWxpemUgPSBhc3luYyhtb2RlbGRhdGE6IFNlcmlhbGl6YWJsZU1vZGVsZGF0YSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgIFByb21pc2U8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPiA9PiB7XG4gICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgICAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNyZWF0ZVNlc3Npb25GaW5hbGl6ZUNhbGxiYWNrcy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnY3JlYXRlX2ZpbmFsaXplJywgaW4gOiB7bW9kZWxkYXRhLCBvcHRpb25zfX07XG4gICAgICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb3JlLmNyZWF0ZVNlc3Npb25GaW5hbGl6ZShtb2RlbGRhdGEsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uID1cbiAgICBhc3luYyhtb2RlbDogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YT4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIC8vIGNoZWNrIHVuc3VwcG9ydGVkIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2Vzc2lvbiBvcHRpb24gXCJwcmVmZXJyZWRPdXRwdXRMb2NhdGlvblwiIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHByb3h5LicpO1xuICAgIH1cbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjcmVhdGVTZXNzaW9uQ2FsbGJhY2tzLnB1c2goW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2NyZWF0ZScsIGluIDoge21vZGVsLCBvcHRpb25zfX07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgW21vZGVsLmJ1ZmZlcl0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3JlLmNyZWF0ZVNlc3Npb24obW9kZWwsIG9wdGlvbnMpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVsZWFzZVNlc3Npb24gPSBhc3luYyhzZXNzaW9uSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZWxlYXNlU2Vzc2lvbkNhbGxiYWNrcy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdyZWxlYXNlJywgaW4gOiBzZXNzaW9uSWR9O1xuICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvcmUucmVsZWFzZVNlc3Npb24oc2Vzc2lvbklkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJ1biA9IGFzeW5jKFxuICAgIHNlc3Npb25JZDogbnVtYmVyLCBpbnB1dEluZGljZXM6IG51bWJlcltdLCBpbnB1dHM6IFRlbnNvck1ldGFkYXRhW10sIG91dHB1dEluZGljZXM6IG51bWJlcltdLFxuICAgIG91dHB1dHM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+LCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFRlbnNvck1ldGFkYXRhW10+ID0+IHtcbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9QUk9YWSAmJiBpc1Byb3h5KCkpIHtcbiAgICAvLyBjaGVjayBpbnB1dHMgbG9jYXRpb25cbiAgICBpZiAoaW5wdXRzLnNvbWUodCA9PiB0WzNdICE9PSAnY3B1JykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW5wdXQgdGVuc29yIG9uIEdQVSBpcyBub3Qgc3VwcG9ydGVkIGZvciBwcm94eS4nKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgb3V0cHV0cyBsb2NhdGlvblxuICAgIGlmIChvdXRwdXRzLnNvbWUodCA9PiB0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmUtYWxsb2NhdGVkIG91dHB1dCB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBmb3IgcHJveHkuJyk7XG4gICAgfVxuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YVtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBydW5DYWxsYmFja3MucHVzaChbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBzZXJpYWxpemFibGVJbnB1dHMgPSBpbnB1dHMgYXMgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGFbXTsgIC8vIGV2ZXJ5IGlucHV0IGlzIG9uIENQVS5cbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID1cbiAgICAgICAgICB7dHlwZTogJ3J1bicsIGluIDoge3Nlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHM6IHNlcmlhbGl6YWJsZUlucHV0cywgb3V0cHV0SW5kaWNlcywgb3B0aW9uc319O1xuICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGNvcmUuZXh0cmFjdFRyYW5zZmVyYWJsZUJ1ZmZlcnMoc2VyaWFsaXphYmxlSW5wdXRzKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvcmUucnVuKHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZW5kUHJvZmlsaW5nID0gYXN5bmMoc2Vzc2lvbklkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9QUk9YWSAmJiBpc1Byb3h5KCkpIHtcbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZW5kUHJvZmlsaW5nQ2FsbGJhY2tzLnB1c2goW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2VuZC1wcm9maWxpbmcnLCBpbiA6IHNlc3Npb25JZH07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29yZS5lbmRQcm9maWxpbmcoc2Vzc2lvbklkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGlzT3J0RW52SW5pdGlhbGl6ZWQgPSBhc3luYygpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9QUk9YWSAmJiBpc1Byb3h5KCkpIHtcbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaXNPcnRFbnZJbml0aWFsaXplZENhbGxiYWNrcy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpcy1vcnQtZW52LWluaXRpYWxpemVkJ307XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvcmUuaXNPcnRFbnZJbml0aWFsaXplZCgpO1xuICB9XG59O1xuIiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDsiLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7cmVhZEZpbGV9IGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHtlbnYsIEluZmVyZW5jZVNlc3Npb24sIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyLCBTZXNzaW9uSGFuZGxlciwgVGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge1NlcmlhbGl6YWJsZU1vZGVsZGF0YSwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtjcmVhdGVTZXNzaW9uLCBjcmVhdGVTZXNzaW9uQWxsb2NhdGUsIGNyZWF0ZVNlc3Npb25GaW5hbGl6ZSwgZW5kUHJvZmlsaW5nLCBpbml0aWFsaXplUnVudGltZSwgaXNPcnRFbnZJbml0aWFsaXplZCwgcmVsZWFzZVNlc3Npb24sIHJ1bn0gZnJvbSAnLi9wcm94eS13cmFwcGVyJztcbmltcG9ydCB7aXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlfSBmcm9tICcuL3dhc20tY29tbW9uJztcblxubGV0IHJ1bnRpbWVJbml0aWFsaXphdGlvblByb21pc2U6IFByb21pc2U8dm9pZD58dW5kZWZpbmVkO1xuXG5leHBvcnQgY29uc3QgZW5jb2RlVGVuc29yTWV0YWRhdGEgPSAodGVuc29yOiBUZW5zb3IsIGdldE5hbWU6ICgpID0+IHN0cmluZyk6IFRlbnNvck1ldGFkYXRhID0+IHtcbiAgc3dpdGNoICh0ZW5zb3IubG9jYXRpb24pIHtcbiAgICBjYXNlICdjcHUnOlxuICAgICAgcmV0dXJuIFt0ZW5zb3IudHlwZSwgdGVuc29yLmRpbXMsIHRlbnNvci5kYXRhLCAnY3B1J107XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gW3RlbnNvci50eXBlLCB0ZW5zb3IuZGltcywge2dwdUJ1ZmZlcjogdGVuc29yLmdwdUJ1ZmZlcn0sICdncHUtYnVmZmVyJ107XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkYXRhIGxvY2F0aW9uOiAke3RlbnNvci5sb2NhdGlvbn0gZm9yICR7Z2V0TmFtZSgpfWApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZGVjb2RlVGVuc29yTWV0YWRhdGEgPSAodGVuc29yOiBUZW5zb3JNZXRhZGF0YSk6IFRlbnNvciA9PiB7XG4gIHN3aXRjaCAodGVuc29yWzNdKSB7XG4gICAgY2FzZSAnY3B1JzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHRlbnNvclswXSwgdGVuc29yWzJdLCB0ZW5zb3JbMV0pO1xuICAgIGNhc2UgJ2dwdS1idWZmZXInOiB7XG4gICAgICBjb25zdCBkYXRhVHlwZSA9IHRlbnNvclswXTtcbiAgICAgIGlmICghaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKGRhdGFUeXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBzdXBwb3J0ZWQgZGF0YSB0eXBlOiAke2RhdGFUeXBlfSBmb3IgZGVzZXJpYWxpemluZyBHUFUgdGVuc29yYCk7XG4gICAgICB9XG4gICAgICBjb25zdCB7Z3B1QnVmZmVyLCBkb3dubG9hZCwgZGlzcG9zZX0gPSB0ZW5zb3JbMl07XG4gICAgICByZXR1cm4gVGVuc29yLmZyb21HcHVCdWZmZXIoZ3B1QnVmZmVyLCB7ZGF0YVR5cGUsIGRpbXM6IHRlbnNvclsxXSwgZG93bmxvYWQsIGRpc3Bvc2V9KTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkYXRhIGxvY2F0aW9uOiAke3RlbnNvclszXX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIE9ubnhydW50aW1lV2ViQXNzZW1ibHlTZXNzaW9uSGFuZGxlciBpbXBsZW1lbnRzIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyIHtcbiAgcHJpdmF0ZSBzZXNzaW9uSWQ6IG51bWJlcjtcblxuICBpbnB1dE5hbWVzOiBzdHJpbmdbXTtcbiAgb3V0cHV0TmFtZXM6IHN0cmluZ1tdO1xuXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb25BbGxvY2F0ZShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFNlcmlhbGl6YWJsZU1vZGVsZGF0YT4ge1xuICAgIC8vIGZldGNoIG1vZGVsIGZyb20gdXJsIGFuZCBtb3ZlIHRvIHdhc20gaGVhcC4gVGhlIGFycmF5YnVmZmZlciB0aGF0IGhlbGQgdGhlIGh0dHBcbiAgICAvLyByZXNwb25zZSBpcyBmcmVlZCBvbmNlIHdlIHJldHVyblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocGF0aCk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGZhaWxlZCB0byBsb2FkIG1vZGVsOiAke3BhdGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbiAgICByZXR1cm4gY3JlYXRlU2Vzc2lvbkFsbG9jYXRlKG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIH1cblxuICBhc3luYyBsb2FkTW9kZWwocGF0aE9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIShhd2FpdCBpc09ydEVudkluaXRpYWxpemVkKCkpKSB7XG4gICAgICBpZiAoIXJ1bnRpbWVJbml0aWFsaXphdGlvblByb21pc2UpIHtcbiAgICAgICAgcnVudGltZUluaXRpYWxpemF0aW9uUHJvbWlzZSA9IGluaXRpYWxpemVSdW50aW1lKGVudik7XG4gICAgICB9XG4gICAgICBhd2FpdCBydW50aW1lSW5pdGlhbGl6YXRpb25Qcm9taXNlO1xuICAgICAgcnVudGltZUluaXRpYWxpemF0aW9uUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhdGhPckJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUpIHtcbiAgICAgICAgLy8gbm9kZVxuICAgICAgICBjb25zdCBtb2RlbCA9IGF3YWl0IHJlYWRGaWxlKHBhdGhPckJ1ZmZlcik7XG4gICAgICAgIFt0aGlzLnNlc3Npb25JZCwgdGhpcy5pbnB1dE5hbWVzLCB0aGlzLm91dHB1dE5hbWVzXSA9IGF3YWl0IGNyZWF0ZVNlc3Npb24obW9kZWwsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYnJvd3NlclxuICAgICAgICAvLyBmZXRjaCBtb2RlbCBhbmQgbW92ZSB0byB3YXNtIGhlYXAuXG4gICAgICAgIGNvbnN0IG1vZGVsRGF0YTogU2VyaWFsaXphYmxlTW9kZWxkYXRhID0gYXdhaXQgdGhpcy5jcmVhdGVTZXNzaW9uQWxsb2NhdGUocGF0aE9yQnVmZmVyKTtcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBzZXNzaW9uXG4gICAgICAgIFt0aGlzLnNlc3Npb25JZCwgdGhpcy5pbnB1dE5hbWVzLCB0aGlzLm91dHB1dE5hbWVzXSA9IGF3YWl0IGNyZWF0ZVNlc3Npb25GaW5hbGl6ZShtb2RlbERhdGEsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBbdGhpcy5zZXNzaW9uSWQsIHRoaXMuaW5wdXROYW1lcywgdGhpcy5vdXRwdXROYW1lc10gPSBhd2FpdCBjcmVhdGVTZXNzaW9uKHBhdGhPckJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGlzcG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcmVsZWFzZVNlc3Npb24odGhpcy5zZXNzaW9uSWQpO1xuICB9XG5cbiAgYXN5bmMgcnVuKGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPiB7XG4gICAgY29uc3QgaW5wdXRBcnJheTogVGVuc29yW10gPSBbXTtcbiAgICBjb25zdCBpbnB1dEluZGljZXM6IG51bWJlcltdID0gW107XG4gICAgT2JqZWN0LmVudHJpZXMoZmVlZHMpLmZvckVhY2goa3ZwID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBrdnBbMF07XG4gICAgICBjb25zdCB0ZW5zb3IgPSBrdnBbMV07XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5wdXROYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW5wdXQgJyR7bmFtZX0nYCk7XG4gICAgICB9XG4gICAgICBpbnB1dEFycmF5LnB1c2godGVuc29yKTtcbiAgICAgIGlucHV0SW5kaWNlcy5wdXNoKGluZGV4KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG91dHB1dEFycmF5OiBBcnJheTxUZW5zb3J8bnVsbD4gPSBbXTtcbiAgICBjb25zdCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKGZldGNoZXMpLmZvckVhY2goa3ZwID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBrdnBbMF07XG4gICAgICBjb25zdCB0ZW5zb3IgPSBrdnBbMV07XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMub3V0cHV0TmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG91dHB1dCAnJHtuYW1lfSdgKTtcbiAgICAgIH1cbiAgICAgIG91dHB1dEFycmF5LnB1c2godGVuc29yKTtcbiAgICAgIG91dHB1dEluZGljZXMucHVzaChpbmRleCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnB1dHMgPVxuICAgICAgICBpbnB1dEFycmF5Lm1hcCgodCwgaSkgPT4gZW5jb2RlVGVuc29yTWV0YWRhdGEodCwgKCkgPT4gYGlucHV0IFwiJHt0aGlzLmlucHV0TmFtZXNbaW5wdXRJbmRpY2VzW2ldXX1cImApKTtcbiAgICBjb25zdCBvdXRwdXRzID0gb3V0cHV0QXJyYXkubWFwKFxuICAgICAgICAodCwgaSkgPT4gdCA/IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBvdXRwdXQgXCIke3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV19XCJgKSA6IG51bGwpO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHJ1bih0aGlzLnNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuXG4gICAgY29uc3QgcmVzdWx0TWFwOiBTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRNYXBbdGhpcy5vdXRwdXROYW1lc1tvdXRwdXRJbmRpY2VzW2ldXV0gPSBvdXRwdXRBcnJheVtpXSA/PyBkZWNvZGVUZW5zb3JNZXRhZGF0YShyZXN1bHRzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdE1hcDtcbiAgfVxuXG4gIHN0YXJ0UHJvZmlsaW5nKCk6IHZvaWQge1xuICAgIC8vIFRPRE86IGltcGxlbWVudCBwcm9maWxpbmdcbiAgfVxuXG4gIGVuZFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB2b2lkIGVuZFByb2ZpbGluZyh0aGlzLnNlc3Npb25JZCk7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtjcHVzfSBmcm9tICdub2RlOm9zJztcbmltcG9ydCB7QmFja2VuZCwgZW52LCBJbmZlcmVuY2VTZXNzaW9uLCBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtpbml0aWFsaXplV2ViQXNzZW1ibHlJbnN0YW5jZX0gZnJvbSAnLi93YXNtL3Byb3h5LXdyYXBwZXInO1xuaW1wb3J0IHtPbm54cnVudGltZVdlYkFzc2VtYmx5U2Vzc2lvbkhhbmRsZXJ9IGZyb20gJy4vd2FzbS9zZXNzaW9uLWhhbmRsZXItaW5mZXJlbmNlJztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxpemVzIGFsbCBmbGFncyBmb3IgV2ViQXNzZW1ibHkuXG4gKlxuICogVGhvc2UgZmxhZ3MgYXJlIGFjY2Vzc2libGUgZnJvbSBgb3J0LmVudi53YXNtYC4gVXNlcnMgYXJlIGFsbG93IHRvIHNldCB0aG9zZSBmbGFncyBiZWZvcmUgdGhlIGZpcnN0IGluZmVyZW5jZSBzZXNzaW9uXG4gKiBiZWluZyBjcmVhdGVkLCB0byBvdmVycmlkZSBkZWZhdWx0IHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUZsYWdzID0gKCk6IHZvaWQgPT4ge1xuICBpZiAodHlwZW9mIGVudi53YXNtLmluaXRUaW1lb3V0ICE9PSAnbnVtYmVyJyB8fCBlbnYud2FzbS5pbml0VGltZW91dCA8IDApIHtcbiAgICBlbnYud2FzbS5pbml0VGltZW91dCA9IDA7XG4gIH1cblxuICBpZiAodHlwZW9mIGVudi53YXNtLnNpbWQgIT09ICdib29sZWFuJykge1xuICAgIGVudi53YXNtLnNpbWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5wcm94eSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgZW52Lndhc20ucHJveHkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW52Lndhc20ubnVtVGhyZWFkcyAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIoZW52Lndhc20ubnVtVGhyZWFkcykgfHwgZW52Lndhc20ubnVtVGhyZWFkcyA8PSAwKSB7XG4gICAgY29uc3QgbnVtQ3B1TG9naWNhbENvcmVzID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcgPyBjcHVzKCkubGVuZ3RoIDogbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k7XG4gICAgZW52Lndhc20ubnVtVGhyZWFkcyA9IE1hdGgubWluKDQsIE1hdGguY2VpbCgobnVtQ3B1TG9naWNhbENvcmVzIHx8IDEpIC8gMikpO1xuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgT25ueHJ1bnRpbWVXZWJBc3NlbWJseUJhY2tlbmQgaW1wbGVtZW50cyBCYWNrZW5kIHtcbiAgYXN5bmMgaW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBwb3B1bGF0ZSB3YXNtIGZsYWdzXG4gICAgaW5pdGlhbGl6ZUZsYWdzKCk7XG5cbiAgICAvLyBpbml0IHdhc21cbiAgICBhd2FpdCBpbml0aWFsaXplV2ViQXNzZW1ibHlJbnN0YW5jZSgpO1xuICB9XG4gIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj47XG4gIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj47XG4gIGFzeW5jIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKHBhdGhPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IE9ubnhydW50aW1lV2ViQXNzZW1ibHlTZXNzaW9uSGFuZGxlcigpO1xuICAgIGF3YWl0IGhhbmRsZXIubG9hZE1vZGVsKHBhdGhPckJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24sIFRlbnNvcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtTZXJpYWxpemFibGVNb2RlbGRhdGEsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCB7c2V0UnVuT3B0aW9uc30gZnJvbSAnLi9ydW4tb3B0aW9ucyc7XG5pbXBvcnQge3NldFNlc3Npb25PcHRpb25zfSBmcm9tICcuL3Nlc3Npb24tb3B0aW9ucyc7XG5pbXBvcnQge2RhdGFMb2NhdGlvblN0cmluZ1RvRW51bSwgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcsIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtLCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3J9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuaW1wb3J0IHtwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3J9IGZyb20gJy4vd2FzbS1jb3JlLWltcGwnO1xuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHtjaGVja0xhc3RFcnJvcn0gZnJvbSAnLi93YXNtLXV0aWxzJztcblxuY29uc3QgTk9fVFJBSU5fRlVOQ1NfTVNHID1cbiAgICAnQnVpbHQgd2l0aG91dCB0cmFpbmluZyBBUElcXCdzIGVuYWJsZWQuIFVzZSB0aGUgb25ueHJ1bnRpbWUtd2ViL3RyYWluaW5nIGltcG9ydCBmb3IgdHJhaW5pbmcgJyArXG4gICAgJ2Z1bmN0aW9uYWxpdHksIGFuZCBtYWtlIHN1cmUgdGhhdCBhbGwgdGhlIGNvcnJlY3QgYXJ0aWZhY3RzIGFyZSBidWlsdCAmIG1vdmVkIHRvIHRoZSBjb3JyZWN0IGZvbGRlciBpZiAnICtcbiAgICAndXNpbmcgYSBjdXN0b20gYnVpbGQuIENoZWNrIGh0dHBzOi8vb25ueHJ1bnRpbWUuYWkvZG9jcy9idWlsZC93ZWIuaHRtbCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nO1xuXG4vKipcbiAqIFJ1bnMgdGhlIGNoZWNrTGFzdEVycm9yIGZ1bmN0aW9uIHdoaWNoIHdpbGwgdGhyb3cgYW4gZXJyb3IsIGlmIHRoZSBwcm92aWRlZCBlcnJvciBjb2RlIG1hdGNoZXMgdGhlIHNwZWNpZmllZFxuICogcGF0dGVybiBmb3IgYW4gZXJyb3IgY29kZS5cbiAqIEBwYXJhbSBlcnJDb2RlIG51bWJlciB0byBldmFsdWF0ZWQgZm9yIGlmIGl0J3MgYW4gZXJyb3JcbiAqIEBwYXJhbSBtZXNzYWdlIG1lc3NhZ2UgdG8gcGFzcyBpbnRvIGNoZWNrTGFzdEVycm9yXG4gKiBAcGFyYW0gY2hlY2tOZXFaZXJvIHdoZW4gdHJ1ZSwgdHJlYXRzIG5vdCBlcXVhbCB0byB6ZXJvIGFzIGFuIGVycm9yLlxuICogICAgICAgICAgICAgICAgICAgICBXaGVuIGZhbHNlLCB0cmVhdHMgZXF1YWwgdG8gemVybyBhcyBhbiBlcnJvci5cbiAqL1xuY29uc3QgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IgPSAoZXJyQ29kZTogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcsIGNoZWNrTmVxWmVybyA9IHRydWUpID0+IHtcbiAgaWYgKGNoZWNrTmVxWmVybyAmJiBlcnJDb2RlICE9PSAwKSB7XG4gICAgY2hlY2tMYXN0RXJyb3IobWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoIWNoZWNrTmVxWmVybyAmJiBlcnJDb2RlID09PSAwKSB7XG4gICAgY2hlY2tMYXN0RXJyb3IobWVzc2FnZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDaGVja3BvaW50SGFuZGxlID0gKGNoZWNrcG9pbnREYXRhOiBTZXJpYWxpemFibGVNb2RlbGRhdGEpOiBudW1iZXIgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBjb25zdCBbY2hlY2twb2ludERhdGFPZmZzZXQsIGNoZWNrcG9pbnREYXRhTGVuZ3RoXSA9IGNoZWNrcG9pbnREYXRhO1xuICBsZXQgY2hlY2twb2ludEhhbmRsZSA9IDA7XG5cbiAgdHJ5IHtcbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdMb2FkQ2hlY2twb2ludCkge1xuICAgICAgY2hlY2twb2ludEhhbmRsZSA9IHdhc20uX09ydFRyYWluaW5nTG9hZENoZWNrcG9pbnQoY2hlY2twb2ludERhdGFPZmZzZXQsIGNoZWNrcG9pbnREYXRhTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuXG4gICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoY2hlY2twb2ludEhhbmRsZSwgJ0Vycm9yIG9jY3VycmVkIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZSBhIENoZWNrcG9pbnRTdGF0ZScsIGZhbHNlKTtcbiAgICByZXR1cm4gY2hlY2twb2ludEhhbmRsZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VDaGVja3BvaW50ICYmIGNoZWNrcG9pbnRIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFRyYWluaW5nUmVsZWFzZUNoZWNrcG9pbnQoY2hlY2twb2ludEhhbmRsZSk7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gZnJlZSBidWZmZXIgZnJvbSB3YXNtIGhlYXBcbiAgICB3YXNtLl9PcnRGcmVlKGNoZWNrcG9pbnREYXRhWzBdKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0TW9kZWxJbnB1dE91dHB1dENvdW50ID0gKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGlzRXZhbE1vZGVsOiBib29sZWFuKTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0Q291bnQpIHtcbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9XG4gICAgICAgICAgd2FzbS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0Q291bnQodHJhaW5pbmdTZXNzaW9uSWQsIGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyA0LCBpc0V2YWxNb2RlbCk7XG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJvckNvZGUsICdDYW5cXCd0IGdldCBzZXNzaW9uIGlucHV0L291dHB1dCBjb3VudC4nKTtcbiAgICAgIHJldHVybiBbd2FzbS5IRUFQMzJbZGF0YU9mZnNldCAvIDRdLCB3YXNtLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0TW9kZWxJbnB1dE91dHB1dE5hbWVzTG9vcCA9XG4gICAgKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGNvdW50OiBudW1iZXIsIGlzSW5wdXQ6IGJvb2xlYW4sIGlzRXZhbE1vZGVsOiBib29sZWFuKTogc3RyaW5nW10gPT4ge1xuICAgICAgY29uc3QgbmFtZXMgPSBbXTtcbiAgICAgIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgaWYgKHdhc20uX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dE5hbWUpIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gd2FzbS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0TmFtZSh0cmFpbmluZ1Nlc3Npb25JZCwgaSwgaXNJbnB1dCwgaXNFdmFsTW9kZWwpO1xuICAgICAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKG5hbWUsIGBDYW4ndCBnZXQgaW5wdXQgb3Igb3V0cHV0IG5hbWUgLS0gaXMgaW5wdXQ6ICR7aXNJbnB1dH0sIGluZGV4ICR7aX1gLCBmYWxzZSk7XG5cbiAgICAgICAgICBuYW1lcy5wdXNoKHdhc20uVVRGOFRvU3RyaW5nKG5hbWUpKTtcbiAgICAgICAgICB3YXNtLl9mcmVlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmFtZXM7XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lcyA9ICh0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCBpc0V2YWxNb2RlbDogYm9vbGVhbik6IFtzdHJpbmdbXSwgc3RyaW5nW11dID0+IHtcbiAgbGV0IGlucHV0TmFtZXM6IHN0cmluZ1tdID0gW107XG4gIGxldCBvdXRwdXROYW1lczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdCBbaW5wdXRDb3VudCwgb3V0cHV0Q291bnRdID0gZ2V0TW9kZWxJbnB1dE91dHB1dENvdW50KHRyYWluaW5nU2Vzc2lvbklkLCBpc0V2YWxNb2RlbCk7XG5cbiAgaW5wdXROYW1lcyA9IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lc0xvb3AodHJhaW5pbmdTZXNzaW9uSWQsIGlucHV0Q291bnQsIHRydWUsIGlzRXZhbE1vZGVsKTtcbiAgb3V0cHV0TmFtZXMgPSBnZXRNb2RlbElucHV0T3V0cHV0TmFtZXNMb29wKHRyYWluaW5nU2Vzc2lvbklkLCBvdXRwdXRDb3VudCwgZmFsc2UsIGlzRXZhbE1vZGVsKTtcblxuICByZXR1cm4gW2lucHV0TmFtZXMsIG91dHB1dE5hbWVzXTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGUgPVxuICAgIChjaGVja3BvaW50SGFuZGxlOiBudW1iZXIsIHRyYWluTW9kZWxEYXRhOiBTZXJpYWxpemFibGVNb2RlbGRhdGEsIGV2YWxNb2RlbERhdGE6IFNlcmlhbGl6YWJsZU1vZGVsZGF0YSxcbiAgICAgb3B0aW1pemVyTW9kZWxEYXRhOiBTZXJpYWxpemFibGVNb2RlbGRhdGEsIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBudW1iZXIgPT4ge1xuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgICAgIGxldCB0cmFpbmluZ1Nlc3Npb25IYW5kbGUgPSAwO1xuICAgICAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgICAgIGxldCBhbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXSA9IHNldFNlc3Npb25PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdDcmVhdGVTZXNzaW9uKSB7XG4gICAgICAgICAgdHJhaW5pbmdTZXNzaW9uSGFuZGxlID0gd2FzbS5fT3J0VHJhaW5pbmdDcmVhdGVTZXNzaW9uKFxuICAgICAgICAgICAgICBzZXNzaW9uT3B0aW9uc0hhbmRsZSwgY2hlY2twb2ludEhhbmRsZSwgdHJhaW5Nb2RlbERhdGFbMF0sIHRyYWluTW9kZWxEYXRhWzFdLCBldmFsTW9kZWxEYXRhWzBdLFxuICAgICAgICAgICAgICBldmFsTW9kZWxEYXRhWzFdLCBvcHRpbWl6ZXJNb2RlbERhdGFbMF0sIG9wdGltaXplck1vZGVsRGF0YVsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcih0cmFpbmluZ1Nlc3Npb25IYW5kbGUsICdFcnJvciBvY2N1cnJlZCB3aGVuIHRyeWluZyB0byBjcmVhdGUgYSBUcmFpbmluZ1Nlc3Npb24nLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB0cmFpbmluZ1Nlc3Npb25IYW5kbGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uICYmIHRyYWluaW5nU2Vzc2lvbkhhbmRsZSAhPT0gMCkge1xuICAgICAgICAgIHdhc20uX09ydFRyYWluaW5nUmVsZWFzZVNlc3Npb24odHJhaW5pbmdTZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5fZnJlZSh0cmFpbk1vZGVsRGF0YVswXSk7XG4gICAgICAgIHdhc20uX2ZyZWUoZXZhbE1vZGVsRGF0YVswXSk7XG4gICAgICAgIHdhc20uX2ZyZWUob3B0aW1pemVyTW9kZWxEYXRhWzBdKTtcblxuICAgICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgICB9XG4gICAgICAgIGFsbG9jcy5mb3JFYWNoKGFsbG9jID0+IHdhc20uX2ZyZWUoYWxsb2MpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4vKipcbiAqIFByZXBhcmVzIGlucHV0IGFuZCBvdXRwdXQgdGVuc29ycyBieSBjcmVhdGluZyB0aGUgdGVuc29ycyBpbiB0aGUgV0FTTSBzaWRlIHRoZW4gY3JlYXRlcyBhIGxpc3Qgb2YgdGhlIGhhbmRsZXMgb2YgdGhlXG4gKiBXQVNNIHRlbnNvcnMuXG4gKlxuICogQHBhcmFtIHRyYWluaW5nU2Vzc2lvbklkXG4gKiBAcGFyYW0gaW5kaWNlcyBmb3IgZWFjaCB0ZW5zb3IsIHRoZSBpbmRleCBvZiB0aGUgaW5wdXQgb3Igb3V0cHV0IG5hbWUgdGhhdCB0aGUgdGVuc29yIGNvcnJlc3BvbmRzIHdpdGhcbiAqIEBwYXJhbSB0ZW5zb3JzIGxpc3Qgb2YgVGVuc29yTWV0YURhdGFcbiAqIEBwYXJhbSB0ZW5zb3JIYW5kbGVzIHNob3VsZCBwYXNzIGluIGFuIGVtcHR5IGxpc3Qgb2YgbnVtYmVyczsgbW9kaWZpZWQgaW4tcGxhY2UgYnkgdGhpcyBtZXRob2QgJiBzdG9yZXMgdGhlIHJlc3VsdGluZ1xuICogICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcyBvZiB0aGUgYWxsb2NhdGVkIHRlbnNvcnMgb24gdGhlIGhlYXBcbiAqIEBwYXJhbSBpbnB1dE91dHB1dEFsbG9jcyBtb2RpZmllZCBpbi1wbGFjZSBieSB0aGlzIG1ldGhvZFxuICogQHBhcmFtIGluZGV4QWRkIGNvbnN0YW50IHRvIGFkZCB0byB0aGUgaW5kZXggdGhhdCBpcyBwYXNzZWQgdG8gcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yXG4gKi9cbmNvbnN0IGNyZWF0ZUFuZEFsbG9jYXRlVGVuc29ycyA9XG4gICAgKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGluZGljZXM6IG51bWJlcltdLCB0ZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgdGVuc29ySGFuZGxlczogbnVtYmVyW10sXG4gICAgIGlucHV0T3V0cHV0QWxsb2NzOiBudW1iZXJbXSwgaW5kZXhBZGQ6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgY291bnQgPSBpbmRpY2VzLmxlbmd0aDtcblxuICAgICAgLy8gY3JlYXRlcyB0aGUgdGVuc29yc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihcbiAgICAgICAgICAgIHRlbnNvcnNbaV0sIHRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCB0cmFpbmluZ1Nlc3Npb25JZCwgaW5kZXhBZGQgKyBpbmRpY2VzW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8gbW92ZXMgdG8gaGVhcFxuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gICAgICBjb25zdCB2YWx1ZXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoY291bnQgKiA0KTtcbiAgICAgIGxldCB2YWx1ZXNJbmRleCA9IHZhbHVlc09mZnNldCAvIDQ7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgd2FzbS5IRUFQVTMyW3ZhbHVlc0luZGV4KytdID0gdGVuc29ySGFuZGxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlc09mZnNldDtcbiAgICB9O1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgb3V0cHV0IHRlbnNvciBoYW5kbGVzLCBjb3BpZXMgdG8gYW4gYXJyYXksIGFuZCBmcmVlcyB0aGUgV0FTTSBpbmZvcm1hdGlvblxuICogYXNzb2NpYXRlZCB3aXRoIHRoZSB0ZW5zb3IgaGFuZGxlLlxuICpcbiAqIEBwYXJhbSBvdXRwdXRWYWx1ZXNPZmZzZXRcbiAqIEBwYXJhbSBvdXRwdXRDb3VudFxuICogQHJldHVybnMgbGlzdCBvZiBUZW5zb3JNZXRhZGF0YSByZXRyaWV2ZWQgZnJvbSB0aGUgb3V0cHV0IGhhbmRsZXMuXG4gKi9cbmNvbnN0IG1vdmVPdXRwdXRUb1RlbnNvck1ldGFkYXRhQXJyID1cbiAgICAob3V0cHV0VmFsdWVzT2Zmc2V0OiBudW1iZXIsIG91dHB1dENvdW50OiBudW1iZXIsIG91dHB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdLFxuICAgICBvdXRwdXRUZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPikgPT4ge1xuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gICAgICBjb25zdCBvdXRwdXQ6IFRlbnNvck1ldGFkYXRhW10gPSBbXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRlbnNvciA9IHdhc20uSEVBUFUzMltvdXRwdXRWYWx1ZXNPZmZzZXQgLyA0ICsgaV07XG4gICAgICAgIGlmICh0ZW5zb3IgPT09IG91dHB1dFRlbnNvckhhbmRsZXNbaV0pIHtcbiAgICAgICAgICAvLyBvdXRwdXQgdGVuc29yIGlzIHByZS1hbGxvY2F0ZWQuIG5vIG5lZWQgdG8gY29weSBkYXRhLlxuICAgICAgICAgIG91dHB1dC5wdXNoKG91dHB1dFRlbnNvcnNbaV0hKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gICAgICAgIC8vIHN0YWNrIGFsbG9jYXRlIDQgcG9pbnRlciB2YWx1ZVxuICAgICAgICBjb25zdCB0ZW5zb3JEYXRhT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQgKiA0KTtcblxuICAgICAgICBsZXQgdHlwZTogVGVuc29yLlR5cGV8dW5kZWZpbmVkLCBkYXRhT2Zmc2V0ID0gMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRUZW5zb3JEYXRhKFxuICAgICAgICAgICAgICB0ZW5zb3IsIHRlbnNvckRhdGFPZmZzZXQsIHRlbnNvckRhdGFPZmZzZXQgKyA0LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgOCwgdGVuc29yRGF0YU9mZnNldCArIDEyKTtcbiAgICAgICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJvckNvZGUsIGBDYW4ndCBhY2Nlc3Mgb3V0cHV0IHRlbnNvciBkYXRhIG9uIGluZGV4ICR7aX0uYCk7XG5cbiAgICAgICAgICBsZXQgdGVuc29yRGF0YUluZGV4ID0gdGVuc29yRGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGRhdGFPZmZzZXQgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXNMZW5ndGggPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpbXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGltcy5wdXNoKHdhc20uSEVBUFUzMltkaW1zT2Zmc2V0IC8gNCArIGldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FzbS5fT3J0RnJlZShkaW1zT2Zmc2V0KTtcblxuICAgICAgICAgIGNvbnN0IHNpemUgPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpO1xuICAgICAgICAgIHR5cGUgPSB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyhkYXRhVHlwZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ0RhdGE6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gZGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3YXNtLkhFQVBVMzJbZGF0YUluZGV4KytdO1xuICAgICAgICAgICAgICBjb25zdCBtYXhCeXRlc1RvUmVhZCA9IGkgPT09IHNpemUgLSAxID8gdW5kZWZpbmVkIDogd2FzbS5IRUFQVTMyW2RhdGFJbmRleF0gLSBvZmZzZXQ7XG4gICAgICAgICAgICAgIHN0cmluZ0RhdGEucHVzaCh3YXNtLlVURjhUb1N0cmluZyhvZmZzZXQsIG1heEJ5dGVzVG9SZWFkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgc3RyaW5nRGF0YSwgJ2NwdSddKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yKHR5cGUpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyB0eXBlZEFycmF5Q29uc3RydWN0b3Ioc2l6ZSk7XG4gICAgICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgLnNldCh3YXNtLkhFQVBVOC5zdWJhcnJheShkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgZGF0YS5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgZGF0YSwgJ2NwdSddKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgd2FzbS5zdGFja1Jlc3RvcmUoYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrKTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgZGF0YU9mZnNldCkge1xuICAgICAgICAgICAgd2FzbS5fZnJlZShkYXRhT2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IHJ1blRyYWluU3RlcCA9IGFzeW5jKFxuICAgIHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGlucHV0SW5kaWNlczogbnVtYmVyW10sIGlucHV0VGVuc29yczogVGVuc29yTWV0YWRhdGFbXSwgb3V0cHV0SW5kaWNlczogbnVtYmVyW10sXG4gICAgb3V0cHV0VGVuc29yczogQXJyYXk8VGVuc29yTWV0YWRhdGF8bnVsbD4sIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8VGVuc29yTWV0YWRhdGFbXT4gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBjb25zdCBpbnB1dENvdW50ID0gaW5wdXRJbmRpY2VzLmxlbmd0aDtcbiAgY29uc3Qgb3V0cHV0Q291bnQgPSBvdXRwdXRJbmRpY2VzLmxlbmd0aDtcblxuICBsZXQgcnVuT3B0aW9uc0hhbmRsZSA9IDA7XG4gIGxldCBydW5PcHRpb25zQWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IGlucHV0VGVuc29ySGFuZGxlczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3Qgb3V0cHV0VGVuc29ySGFuZGxlczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3QgaW5wdXRPdXRwdXRBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgYmVmb3JlUnVuU3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuXG4gIHRyeSB7XG4gICAgLy8gcHJlcGFyZSBwYXJhbWV0ZXJzIGJ5IG1vdmluZyB0aGVtIHRvIGhlYXBcbiAgICBbcnVuT3B0aW9uc0hhbmRsZSwgcnVuT3B0aW9uc0FsbG9jc10gPSBzZXRSdW5PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgLy8gaGFuZGxlIGlucHV0cyAtLSB5b3UgZG9uJ3Qgd2FudCBhbnl0aGluZyBhZGRlZCB0byB0aGUgaW5kZXhcbiAgICBjb25zdCBpbnB1dFZhbHVlc09mZnNldCA9IGNyZWF0ZUFuZEFsbG9jYXRlVGVuc29ycyhcbiAgICAgICAgdHJhaW5pbmdTZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRUZW5zb3JzLCBpbnB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCAwKTtcbiAgICAvLyBoYW5kbGUgb3V0cHV0c1xuICAgIC8vIHlvdSB3YW50IGlucHV0Q291bnQgdG8gYmUgYWRkZWQgdG8gdGhlIGluZGV4IG9mIGV2ZXJ5IG91dHB1dCB0ZW5zb3IgcGFzc2VkIHRvIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvclxuICAgIGNvbnN0IG91dHB1dFZhbHVlc09mZnNldCA9IGNyZWF0ZUFuZEFsbG9jYXRlVGVuc29ycyhcbiAgICAgICAgdHJhaW5pbmdTZXNzaW9uSWQsIG91dHB1dEluZGljZXMsIG91dHB1dFRlbnNvcnMsIG91dHB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCBpbnB1dENvdW50KTtcblxuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcCkge1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0VHJhaW5pbmdSdW5UcmFpblN0ZXAoXG4gICAgICAgICAgdHJhaW5pbmdTZXNzaW9uSWQsIGlucHV0VmFsdWVzT2Zmc2V0LCBpbnB1dENvdW50LCBvdXRwdXRWYWx1ZXNPZmZzZXQsIG91dHB1dENvdW50LCBydW5PcHRpb25zSGFuZGxlKTtcbiAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVycm9yQ29kZSwgJ2ZhaWxlZCB0byBjYWxsIE9ydFRyYWluaW5nUnVuVHJhaW5TdGVwIGluIHRoZSBXZWJBc3NlbWJseSBsYXllcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW92ZU91dHB1dFRvVGVuc29yTWV0YWRhdGFBcnIob3V0cHV0VmFsdWVzT2Zmc2V0LCBvdXRwdXRDb3VudCwgb3V0cHV0VGVuc29ySGFuZGxlcywgb3V0cHV0VGVuc29ycyk7XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoYmVmb3JlUnVuU3RhY2spO1xuXG4gICAgaW5wdXRUZW5zb3JIYW5kbGVzLmZvckVhY2godiA9PiB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICBvdXRwdXRUZW5zb3JIYW5kbGVzLmZvckVhY2godiA9PiB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICBpbnB1dE91dHB1dEFsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG5cbiAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuICAgIHJ1bk9wdGlvbnNBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcnVuT3B0aW1pemVyU3RlcCA9XG4gICAgYXN5bmModHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgbGV0IHJ1bk9wdGlvbnNBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgdHJ5IHtcbiAgICBbcnVuT3B0aW9uc0hhbmRsZSwgcnVuT3B0aW9uc0FsbG9jc10gPSBzZXRSdW5PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgaWYgKHdhc20uX09ydFRyYWluaW5nT3B0aW1pemVyU3RlcCkge1xuICAgICAgY29uc3QgZXJyQ29kZSA9IHdhc20uX09ydFRyYWluaW5nT3B0aW1pemVyU3RlcCh0cmFpbmluZ1Nlc3Npb25JZCwgcnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJDb2RlLCAnRmFpbGVkIHRvIGNhbGwgT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwIGluIHRoZSBXZWJBc3NlbWJseSBsYXllcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBydW5PcHRpb25zQWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJ1bkV2YWxTdGVwID0gYXN5bmMoXG4gICAgdHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSwgaW5wdXRUZW5zb3JzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSxcbiAgICBvdXRwdXRUZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxUZW5zb3JNZXRhZGF0YVtdPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGNvbnN0IGlucHV0Q291bnQgPSBpbnB1dEluZGljZXMubGVuZ3RoO1xuICBjb25zdCBvdXRwdXRDb3VudCA9IG91dHB1dEluZGljZXMubGVuZ3RoO1xuXG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgbGV0IHJ1bk9wdGlvbnNBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgaW5wdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBvdXRwdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBpbnB1dE91dHB1dEFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBiZWZvcmVSdW5TdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG5cbiAgdHJ5IHtcbiAgICAvLyBwcmVwYXJlIHBhcmFtZXRlcnMgYnkgbW92aW5nIHRoZW0gdG8gaGVhcFxuICAgIFtydW5PcHRpb25zSGFuZGxlLCBydW5PcHRpb25zQWxsb2NzXSA9IHNldFJ1bk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAvLyBoYW5kbGUgaW5wdXRzIC0tIHlvdSBkb24ndCB3YW50IGFueXRoaW5nIGFkZGVkIHRvIHRoZSBpbmRleFxuICAgIGNvbnN0IGlucHV0VmFsdWVzT2Zmc2V0ID0gY3JlYXRlQW5kQWxsb2NhdGVUZW5zb3JzKFxuICAgICAgICB0cmFpbmluZ1Nlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dFRlbnNvcnMsIGlucHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIDApO1xuICAgIC8vIGhhbmRsZSBvdXRwdXRzXG4gICAgLy8geW91IHdhbnQgaW5wdXRDb3VudCB0byBiZSBhZGRlZCB0byB0aGUgaW5kZXggb2YgZXZlcnkgb3V0cHV0IHRlbnNvciBwYXNzZWQgdG8gcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yXG4gICAgY29uc3Qgb3V0cHV0VmFsdWVzT2Zmc2V0ID0gY3JlYXRlQW5kQWxsb2NhdGVUZW5zb3JzKFxuICAgICAgICB0cmFpbmluZ1Nlc3Npb25JZCwgb3V0cHV0SW5kaWNlcywgb3V0cHV0VGVuc29ycywgb3V0cHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIGlucHV0Q291bnQpO1xuXG4gICAgaWYgKHdhc20uX09ydFRyYWluaW5nRXZhbFN0ZXApIHtcbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uX09ydFRyYWluaW5nRXZhbFN0ZXAoXG4gICAgICAgICAgdHJhaW5pbmdTZXNzaW9uSWQsIGlucHV0VmFsdWVzT2Zmc2V0LCBpbnB1dENvdW50LCBvdXRwdXRWYWx1ZXNPZmZzZXQsIG91dHB1dENvdW50LCBydW5PcHRpb25zSGFuZGxlKTtcblxuICAgICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoZXJyb3JDb2RlLCAnZmFpbGVkIHRvIGNhbGwgT3J0VHJhaW5pbmdFdmFsU3RlcCBpbiB0aGUgV2ViQXNzZW1ibHkgbGF5ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vdmVPdXRwdXRUb1RlbnNvck1ldGFkYXRhQXJyKG91dHB1dFZhbHVlc09mZnNldCwgb3V0cHV0Q291bnQsIG91dHB1dFRlbnNvckhhbmRsZXMsIG91dHB1dFRlbnNvcnMpO1xuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKGJlZm9yZVJ1blN0YWNrKTtcblxuICAgIGlucHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgb3V0cHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgaW5wdXRPdXRwdXRBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuXG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBydW5PcHRpb25zQWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldFBhcmFtZXRlcnNTaXplID0gKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBudW1iZXIgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgc2l6ZU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg0KTtcbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZSkge1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmluZ1Nlc3Npb25JZCwgc2l6ZU9mZnNldCwgdHJhaW5hYmxlT25seSk7XG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJvckNvZGUsICdDYW5cXCd0IGdldCBwYXJhbWV0ZXJzIHNpemUnKTtcblxuICAgICAgcmV0dXJuIHdhc20uSEVBUDMyW3NpemVPZmZzZXQgLyA0XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzID1cbiAgICBhc3luYyh0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxUZW5zb3JNZXRhZGF0YT4gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuXG4gIGNvbnN0IHRlbnNvclR5cGVBc1N0cmluZyA9ICdmbG9hdDMyJztcbiAgY29uc3QgbG9jYXRpb25Bc1N0cmluZyA9ICdjcHUnO1xuXG4gIGNvbnN0IHBhcmFtZXRlcnNTaXplID0gZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5pbmdTZXNzaW9uSWQsIHRyYWluYWJsZU9ubHkpO1xuICBsZXQgdGVuc29yID0gMDtcblxuICAvLyBhbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIGNvcnJlY3Qgc2l6ZSBvbiB0aGUgV0FTTSBoZWFwXG4gIGNvbnN0IHBhcmFtc0J5dGVMZW5ndGggPSA0ICogcGFyYW1ldGVyc1NpemU7XG4gIGNvbnN0IHBhcmFtc09mZnNldCA9IHdhc20uX21hbGxvYyhwYXJhbXNCeXRlTGVuZ3RoKTtcblxuICAvLyBoYW5kbGVzIHRoZSBkaW1lbnNpb25zLXJlbGF0ZWQgY3JlYXRlVGVuc29yIHBhcmFtZXRlcnNcbiAgY29uc3QgZGltcyA9IFtwYXJhbWV0ZXJzU2l6ZV07XG5cbiAgY29uc3QgZGltc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg0KTtcbiAgY29uc3QgZGltc0luZGV4ID0gZGltc09mZnNldCAvIDQ7XG4gIHdhc20uSEVBUDMyW2RpbXNJbmRleF0gPSBwYXJhbWV0ZXJzU2l6ZTtcblxuICB0cnkge1xuICAgIC8vIHdyYXBzIGFsbG9jYXRlZCBhcnJheSBpbiBhIHRlbnNvclxuICAgIHRlbnNvciA9IHdhc20uX09ydENyZWF0ZVRlbnNvcihcbiAgICAgICAgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0odGVuc29yVHlwZUFzU3RyaW5nKSwgcGFyYW1zT2Zmc2V0LCBwYXJhbXNCeXRlTGVuZ3RoLCBkaW1zT2Zmc2V0LCBkaW1zLmxlbmd0aCxcbiAgICAgICAgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGxvY2F0aW9uQXNTdHJpbmcpKTtcbiAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihcbiAgICAgICAgdGVuc29yLCBgQ2FuJ3QgY3JlYXRlIHRlbnNvciBmb3IgZ2V0Q29udGlndW91c1BhcmFtZXRlcnMuIHNlc3Npb249JHt0cmFpbmluZ1Nlc3Npb25JZH0uYCwgZmFsc2UpO1xuXG4gICAgaWYgKHdhc20uX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNUb0J1ZmZlcikge1xuICAgICAgY29uc3QgZXJyQ29kZSA9IHdhc20uX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNUb0J1ZmZlcih0cmFpbmluZ1Nlc3Npb25JZCwgdGVuc29yLCBwYXJhbWV0ZXJzU2l6ZSwgdHJhaW5hYmxlT25seSk7XG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJDb2RlLCAnQ2FuXFwndCBnZXQgY29udGlndW91cyBwYXJhbWV0ZXJzLicpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgIH1cblxuICAgIC8vIGNvcGllcyBmcm9tIFdBU00gbWVtb3J5IHRvIGEgSmF2YVNjcmlwdCB0eXBlZCBhcnJheSwgd2hpY2ggaXMgdGhlbiBwdXQgaW50byBhIFRlbnNvck1ldGFkYXRhIG9iamVjdFxuICAgIGNvbnN0IHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHRlbnNvclR5cGVUb1R5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0ZW5zb3JUeXBlQXNTdHJpbmcpO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgdHlwZWRBcnJheUNvbnN0cnVjdG9yKHBhcmFtZXRlcnNTaXplKTtcbiAgICBjb25zdCBvdXRwdXQ6IFRlbnNvck1ldGFkYXRhW10gPSBbXTtcbiAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpXG4gICAgICAgIC5zZXQod2FzbS5IRUFQVTguc3ViYXJyYXkocGFyYW1zT2Zmc2V0LCBwYXJhbXNPZmZzZXQgKyBwYXJhbXNCeXRlTGVuZ3RoKSk7XG4gICAgb3V0cHV0LnB1c2goW3RlbnNvclR5cGVBc1N0cmluZywgZGltcywgZGF0YSwgbG9jYXRpb25Bc1N0cmluZ10pO1xuICAgIGlmIChvdXRwdXQubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHNvbWV0aGluZyB1bmV4cGVjdGVkIGhhcHBlbmVkIGluIHRoZSBnZXRDb250aWd1b3VzUGFyYW1ldGVycyBmdW5jdGlvbi4gRXhwZWN0ZWQgb3V0cHV0IGxlbmd0aCBvZlxuICAgICBvbmUsIGdvdCAke291dHB1dC5sZW5ndGh9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvdXRwdXRbMF07XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGlmICh0ZW5zb3IgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VUZW5zb3IodGVuc29yKTtcbiAgICB9XG4gICAgd2FzbS5fZnJlZShwYXJhbXNPZmZzZXQpO1xuICAgIHdhc20uX2ZyZWUoZGltc09mZnNldCk7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9hZFBhcmFtZXRlcnNCdWZmZXIgPVxuICAgIGFzeW5jKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGJ1ZmZlcjogVWludDhBcnJheSwgdHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuXG4gIGNvbnN0IHRlbnNvclR5cGVBc1N0cmluZyA9ICdmbG9hdDMyJztcbiAgY29uc3QgbG9jYXRpb25Bc1N0cmluZyA9ICdjcHUnO1xuXG4gIC8vIGFsbG9jYXRlcyAmIGNvcGllcyBKYXZhU2NyaXB0IGJ1ZmZlciB0byBXQVNNIGhlYXBcbiAgY29uc3QgYnVmZmVyQnl0ZUxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gIGNvbnN0IGJ1ZmZlckNvdW50ID0gYnVmZmVyQnl0ZUxlbmd0aCAvIDQ7XG4gIGNvbnN0IGJ1ZmZlck9mZnNldCA9IHdhc20uX21hbGxvYyhidWZmZXJCeXRlTGVuZ3RoKTtcbiAgd2FzbS5IRUFQVTguc2V0KGJ1ZmZlciwgYnVmZmVyT2Zmc2V0KTtcblxuICAvLyBhbGxvY2F0ZXMgYW5kIGhhbmRsZXMgbW92aW5nIGRpbWVuc2lvbnMgaW5mb3JtYXRpb24gdG8gV0FTTSBtZW1vcnlcbiAgY29uc3QgZGltc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg0KTtcbiAgd2FzbS5IRUFQMzJbZGltc09mZnNldCAvIDRdID0gYnVmZmVyQ291bnQ7XG4gIGNvbnN0IGRpbXNMZW5ndGggPSAxO1xuICBsZXQgdGVuc29yID0gMDtcblxuICB0cnkge1xuICAgIHRlbnNvciA9IHdhc20uX09ydENyZWF0ZVRlbnNvcihcbiAgICAgICAgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0odGVuc29yVHlwZUFzU3RyaW5nKSwgYnVmZmVyT2Zmc2V0LCBidWZmZXJCeXRlTGVuZ3RoLCBkaW1zT2Zmc2V0LCBkaW1zTGVuZ3RoLFxuICAgICAgICBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obG9jYXRpb25Bc1N0cmluZykpO1xuICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKHRlbnNvciwgYENhbid0IGNyZWF0ZSB0ZW5zb3IgZm9yIGlucHV0L291dHB1dC4gc2Vzc2lvbj0ke3RyYWluaW5nU2Vzc2lvbklkfWAsIGZhbHNlKTtcblxuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlcikge1xuICAgICAgY29uc3QgZXJyQ29kZSA9IHdhc20uX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNGcm9tQnVmZmVyKHRyYWluaW5nU2Vzc2lvbklkLCB0ZW5zb3IsIGJ1ZmZlckNvdW50LCB0cmFpbmFibGVPbmx5KTtcbiAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVyckNvZGUsICdDYW5cXCd0IGNvcHkgYnVmZmVyIHRvIHBhcmFtZXRlcnMuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAodGVuc29yICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgfVxuICAgIHdhc20uc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB3YXNtLl9mcmVlKGJ1ZmZlck9mZnNldCk7XG4gICAgd2FzbS5fZnJlZShkaW1zT2Zmc2V0KTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJlbGVhc2VUcmFpbmluZ1Nlc3Npb25BbmRDaGVja3BvaW50ID0gKGNoZWNrcG9pbnRJZDogbnVtYmVyLCBzZXNzaW9uSWQ6IG51bWJlcik6IHZvaWQgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBpZiAod2FzbS5fT3J0VHJhaW5pbmdSZWxlYXNlU2Vzc2lvbikge1xuICAgIHdhc20uX09ydFRyYWluaW5nUmVsZWFzZVNlc3Npb24oc2Vzc2lvbklkKTtcbiAgfVxuICBpZiAod2FzbS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludCkge1xuICAgIHdhc20uX09ydFRyYWluaW5nUmVsZWFzZUNoZWNrcG9pbnQoY2hlY2twb2ludElkKTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtlbnYsIEluZmVyZW5jZVNlc3Npb24sIE9ubnhWYWx1ZSwgU2Vzc2lvbkhhbmRsZXIsIFRlbnNvciwgVHJhaW5pbmdTZXNzaW9uSGFuZGxlcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtTZXJpYWxpemFibGVNb2RlbGRhdGEsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCB7ZGVjb2RlVGVuc29yTWV0YWRhdGEsIGVuY29kZVRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Nlc3Npb24taGFuZGxlci1pbmZlcmVuY2UnO1xuaW1wb3J0IHtjcmVhdGVTZXNzaW9uQWxsb2NhdGUsIGluaXRSdW50aW1lLCBpc09ydEVudkluaXRpYWxpemVkfSBmcm9tICcuL3dhc20tY29yZS1pbXBsJztcbmltcG9ydCB7Y3JlYXRlQ2hlY2twb2ludEhhbmRsZSwgY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlLCBnZXRDb250aWd1b3VzUGFyYW1ldGVycywgZ2V0TW9kZWxJbnB1dE91dHB1dE5hbWVzLCBnZXRQYXJhbWV0ZXJzU2l6ZSwgbG9hZFBhcmFtZXRlcnNCdWZmZXIsIHJlbGVhc2VUcmFpbmluZ1Nlc3Npb25BbmRDaGVja3BvaW50LCBydW5FdmFsU3RlcCwgcnVuT3B0aW1pemVyU3RlcCwgcnVuVHJhaW5TdGVwfSBmcm9tICcuL3dhc20tdHJhaW5pbmctY29yZS1pbXBsJztcblxuZXhwb3J0IGNsYXNzIE9ubnhydW50aW1lV2ViQXNzZW1ibHlUcmFpbmluZ1Nlc3Npb25IYW5kbGVyIGltcGxlbWVudHMgVHJhaW5pbmdTZXNzaW9uSGFuZGxlciB7XG4gIHByaXZhdGUgc2Vzc2lvbklkOiBudW1iZXI7XG4gIHByaXZhdGUgY2hlY2twb2ludElkOiBudW1iZXI7XG5cbiAgaW5wdXROYW1lczogc3RyaW5nW107XG4gIG91dHB1dE5hbWVzOiBzdHJpbmdbXTtcblxuICBldmFsSW5wdXROYW1lczogc3RyaW5nW10gPSBbXTtcbiAgZXZhbE91dHB1dE5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGFzeW5jIHVyaU9yQnVmZmVyVG9IZWFwKHVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSk6IFByb21pc2U8U2VyaWFsaXphYmxlTW9kZWxkYXRhPiB7XG4gICAgbGV0IGJ1ZmZlcjogVWludDhBcnJheTtcbiAgICBpZiAodHlwZW9mIHVyaU9yQnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmlPckJ1ZmZlcik7XG4gICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IHVyaU9yQnVmZmVyO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlU2Vzc2lvbkFsbG9jYXRlKGJ1ZmZlcik7XG4gIH1cblxuICBhc3luYyBjcmVhdGVUcmFpbmluZ1Nlc3Npb24oXG4gICAgICBjaGVja3BvaW50U3RhdGVVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIHRyYWluTW9kZWxVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksXG4gICAgICBldmFsTW9kZWxVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIG9wdGltaXplck1vZGVsVXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LFxuICAgICAgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucykge1xuICAgIGlmICghaXNPcnRFbnZJbml0aWFsaXplZCgpKSB7XG4gICAgICBhd2FpdCBpbml0UnVudGltZShlbnYpO1xuICAgIH1cbiAgICBjb25zdCBjaGVja3BvaW50RGF0YTogU2VyaWFsaXphYmxlTW9kZWxkYXRhID0gYXdhaXQgdGhpcy51cmlPckJ1ZmZlclRvSGVhcChjaGVja3BvaW50U3RhdGVVcmlPckJ1ZmZlcik7XG4gICAgY29uc3QgdHJhaW5Nb2RlbERhdGE6IFNlcmlhbGl6YWJsZU1vZGVsZGF0YSA9IGF3YWl0IHRoaXMudXJpT3JCdWZmZXJUb0hlYXAodHJhaW5Nb2RlbFVyaU9yQnVmZmVyKTtcbiAgICAvLyAwIGlzIHN1cHBvc2VkIHRvIGJlIHRoZSBudWxscHRyXG4gICAgbGV0IGV2YWxNb2RlbERhdGE6IFNlcmlhbGl6YWJsZU1vZGVsZGF0YSA9IFswLCAwXTtcbiAgICBsZXQgb3B0aW1pemVyTW9kZWxEYXRhOiBTZXJpYWxpemFibGVNb2RlbGRhdGEgPSBbMCwgMF07XG5cbiAgICBpZiAoZXZhbE1vZGVsVXJpT3JCdWZmZXIgIT09ICcnKSB7XG4gICAgICBldmFsTW9kZWxEYXRhID0gYXdhaXQgdGhpcy51cmlPckJ1ZmZlclRvSGVhcChldmFsTW9kZWxVcmlPckJ1ZmZlcik7XG4gICAgfVxuICAgIGlmIChvcHRpbWl6ZXJNb2RlbFVyaU9yQnVmZmVyICE9PSAnJykge1xuICAgICAgb3B0aW1pemVyTW9kZWxEYXRhID0gYXdhaXQgdGhpcy51cmlPckJ1ZmZlclRvSGVhcChvcHRpbWl6ZXJNb2RlbFVyaU9yQnVmZmVyKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrcG9pbnRJZCA9IGNyZWF0ZUNoZWNrcG9pbnRIYW5kbGUoY2hlY2twb2ludERhdGEpO1xuICAgIHRoaXMuc2Vzc2lvbklkID1cbiAgICAgICAgY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlKHRoaXMuY2hlY2twb2ludElkLCB0cmFpbk1vZGVsRGF0YSwgZXZhbE1vZGVsRGF0YSwgb3B0aW1pemVyTW9kZWxEYXRhLCBvcHRpb25zKTtcbiAgICBbdGhpcy5pbnB1dE5hbWVzLCB0aGlzLm91dHB1dE5hbWVzXSA9IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lcyh0aGlzLnNlc3Npb25JZCwgZmFsc2UpO1xuICAgIGlmIChldmFsTW9kZWxVcmlPckJ1ZmZlciAhPT0gJycpIHtcbiAgICAgIFt0aGlzLmV2YWxJbnB1dE5hbWVzLCB0aGlzLmV2YWxPdXRwdXROYW1lc10gPSBnZXRNb2RlbElucHV0T3V0cHV0TmFtZXModGhpcy5zZXNzaW9uSWQsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRoYXQgY29udmVydHMgYSBmZWVkcyBvciBmZXRjaGVzIGRhdGF0eXBlIHRvIHR3byBhcnJheXMsIG9uZSBvZiB2YWx1ZXMgYW5kIG9uZSB0aGF0IHN0b3JlcyB0aGVcbiAgICogY29ycmVzcG9uZGluZyBuYW1lIGFzIGEgbnVtYmVyIHJlZmVycmluZyB0byB0aGUgaW5kZXggaW4gdGhlIGxpc3Qgb2YgbmFtZXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyBtZWFudCB0byBtYXRjaCBlaXRoZXIgU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlIG9yIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlXG4gICAqIEBwYXJhbSBuYW1lcyBlaXRoZXIgaW5wdXROYW1lcyBvciBvdXRwdXROYW1lc1xuICAgKiBAcmV0dXJucyBhIHR1cGxlIG9mIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIGEgbGlzdCBvZiBpbmRpY2VzLlxuICAgKi9cbiAgY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxULCBVPihcbiAgICAgIGZlZWRzOiB7W25hbWU6IHN0cmluZ106IFR9LCBuYW1lczogc3RyaW5nW10sIG1hcEZ1bmM6ICh2YWw6IFQsIGluZGV4OiBudW1iZXIpID0+IFUpOiBbVFtdLCBudW1iZXJbXSwgVVtdXSB7XG4gICAgY29uc3QgdmFsdWVzOiBUW10gPSBbXTtcbiAgICBjb25zdCBpbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKGZlZWRzKS5mb3JFYWNoKGt2cCA9PiB7XG4gICAgICBjb25zdCBuYW1lID0ga3ZwWzBdO1xuICAgICAgY29uc3QgdGVuc29yID0ga3ZwWzFdO1xuICAgICAgY29uc3QgaW5kZXggPSBuYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW5wdXQgJyR7bmFtZX1gKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlcy5wdXNoKHRlbnNvcik7XG4gICAgICBpbmRpY2VzLnB1c2goaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdUxpc3QgPSB2YWx1ZXMubWFwKG1hcEZ1bmMpO1xuICAgIHJldHVybiBbdmFsdWVzLCBpbmRpY2VzLCB1TGlzdF07XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCB0aGF0IGNvbnZlcnRzIHRoZSBUZW5zb3JNZXRhZGF0YSB0aGF0IHRoZSB3YXNtLWNvcmUgZnVuY3Rpb25zIHJldHVybiB0byB0aGVcbiAgICogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZS4gQW55IG91dHB1dHMgaW4gdGhlIHByb3ZpZGVkIG91dHB1dEFycmF5IHRoYXQgYXJlIGZhbHN5IHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggdGhlXG4gICAqIGNvcnJlc3BvbmRpbmcgcmVzdWx0LlxuICAgKlxuICAgKiBAcGFyYW0gcmVzdWx0cyB1c2VkIHRvIHBvcHVsYXRlIHRoZSByZXN1bHRNYXAgaWYgdGhlcmUgaXMgbm8gdmFsdWUgZm9yIHRoYXQgb3V0cHV0TmFtZSBhbHJlYWR5XG4gICAqIEBwYXJhbSBvdXRwdXRBcnJheSB1c2VkIHRvIHBvcHVsYXRlIHRoZSByZXN1bHRNYXAuIElmIG51bGwgb3IgdW5kZWZpbmVkLCB1c2UgdGhlIGNvcnJlc3BvbmRpbmcgcmVzdWx0IGZyb20gcmVzdWx0c1xuICAgKiBAcGFyYW0gb3V0cHV0SW5kaWNlcyBzcGVjaWZpZXMgd2hpY2ggb3V0cHV0TmFtZSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3Igb3V0cHV0QXJyYXkgcmVmZXJzIHRvLlxuICAgKiBAcmV0dXJucyBhIG1hcCBvZiBvdXRwdXQgbmFtZXMgYW5kIE9ubnhWYWx1ZXMuXG4gICAqL1xuICBjb252ZXJ0VGVuc29yTWV0YWRhdGFUb1JldHVyblR5cGUoXG4gICAgICByZXN1bHRzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRBcnJheTogQXJyYXk8VGVuc29yfG51bGw+LCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSk6IFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGUge1xuICAgIGNvbnN0IHJlc3VsdE1hcDogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0TWFwW3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV1dID0gb3V0cHV0QXJyYXlbaV0gPz8gZGVjb2RlVGVuc29yTWV0YWRhdGEocmVzdWx0c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRNYXA7XG4gIH1cblxuICBhc3luYyBydW5UcmFpblN0ZXAoXG4gICAgICBmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IFssIGlucHV0SW5kaWNlcywgaW5wdXRzXSA9IHRoaXMuY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxUZW5zb3IsIFRlbnNvck1ldGFkYXRhPihcbiAgICAgICAgZmVlZHMsIHRoaXMuaW5wdXROYW1lcyxcbiAgICAgICAgKHQsIGkpOiBUZW5zb3JNZXRhZGF0YSA9PiBlbmNvZGVUZW5zb3JNZXRhZGF0YSh0LCAoKSA9PiBgaW5wdXQgXCIke3RoaXMuaW5wdXROYW1lc1tpbnB1dEluZGljZXNbaV1dfVwiYCkpO1xuXG4gICAgY29uc3QgW291dHB1dEFycmF5LCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzXSA9XG4gICAgICAgIHRoaXMuY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxUZW5zb3J8bnVsbCwgVGVuc29yTWV0YWRhdGF8bnVsbD4oXG4gICAgICAgICAgICBmZXRjaGVzLCB0aGlzLm91dHB1dE5hbWVzLFxuICAgICAgICAgICAgKHQsIGkpOiBUZW5zb3JNZXRhZGF0YXxudWxsID0+XG4gICAgICAgICAgICAgICAgdCA/IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBvdXRwdXQgXCIke3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV19XCJgKSA6IG51bGwpO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHJ1blRyYWluU3RlcCh0aGlzLnNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnRUZW5zb3JNZXRhZGF0YVRvUmV0dXJuVHlwZShyZXN1bHRzLCBvdXRwdXRBcnJheSwgb3V0cHV0SW5kaWNlcyk7XG4gIH1cblxuICBhc3luYyBydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHJ1bk9wdGltaXplclN0ZXAodGhpcy5zZXNzaW9uSWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgcnVuRXZhbFN0ZXAoXG4gICAgICBmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IFssIGlucHV0SW5kaWNlcywgaW5wdXRzXSA9IHRoaXMuY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxUZW5zb3IsIFRlbnNvck1ldGFkYXRhPihcbiAgICAgICAgZmVlZHMsIHRoaXMuZXZhbElucHV0TmFtZXMsXG4gICAgICAgICh0LCBpKTogVGVuc29yTWV0YWRhdGEgPT4gZW5jb2RlVGVuc29yTWV0YWRhdGEodCwgKCkgPT4gYGlucHV0IFwiJHt0aGlzLmV2YWxJbnB1dE5hbWVzW2lucHV0SW5kaWNlc1tpXV19XCJgKSk7XG5cbiAgICBjb25zdCBbb3V0cHV0QXJyYXksIG91dHB1dEluZGljZXMsIG91dHB1dHNdID1cbiAgICAgICAgdGhpcy5jb252ZXJ0TWFwSW50b1ZhbHVlc0FycmF5QW5kSW5kaWNlc0FycmF5PFRlbnNvcnxudWxsLCBUZW5zb3JNZXRhZGF0YXxudWxsPihcbiAgICAgICAgICAgIGZldGNoZXMsIHRoaXMuZXZhbE91dHB1dE5hbWVzLFxuICAgICAgICAgICAgKHQsIGkpOiBUZW5zb3JNZXRhZGF0YXxudWxsID0+XG4gICAgICAgICAgICAgICAgdCA/IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBvdXRwdXQgXCIke3RoaXMuZXZhbE91dHB1dE5hbWVzW291dHB1dEluZGljZXNbaV1dfVwiYCkgOiBudWxsKTtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBydW5FdmFsU3RlcCh0aGlzLnNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnRUZW5zb3JNZXRhZGF0YVRvUmV0dXJuVHlwZShyZXN1bHRzLCBvdXRwdXRBcnJheSwgb3V0cHV0SW5kaWNlcyk7XG4gIH1cblxuICBhc3luYyBnZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gZ2V0UGFyYW1ldGVyc1NpemUodGhpcy5zZXNzaW9uSWQsIHRyYWluYWJsZU9ubHkpO1xuICB9XG5cbiAgYXN5bmMgbG9hZFBhcmFtZXRlcnNCdWZmZXIoYXJyYXk6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBsb2FkUGFyYW1ldGVyc0J1ZmZlcih0aGlzLnNlc3Npb25JZCwgYXJyYXksIHRyYWluYWJsZU9ubHkpO1xuICB9XG4gIGFzeW5jIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPE9ubnhWYWx1ZT4ge1xuICAgIGNvbnN0IHRlbnNvclJlc3VsdCA9IGF3YWl0IGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRoaXMuc2Vzc2lvbklkLCB0cmFpbmFibGVPbmx5KTtcbiAgICByZXR1cm4gZGVjb2RlVGVuc29yTWV0YWRhdGEodGVuc29yUmVzdWx0KTtcbiAgfVxuXG4gIGFzeW5jIGRpc3Bvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHJlbGVhc2VUcmFpbmluZ1Nlc3Npb25BbmRDaGVja3BvaW50KHRoaXMuY2hlY2twb2ludElkLCB0aGlzLnNlc3Npb25JZCk7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uLCBUcmFpbmluZ1Nlc3Npb25IYW5kbGVyfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge09ubnhydW50aW1lV2ViQXNzZW1ibHlCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtd2FzbSc7XG5pbXBvcnQge09ubnhydW50aW1lV2ViQXNzZW1ibHlUcmFpbmluZ1Nlc3Npb25IYW5kbGVyfSBmcm9tICcuL3dhc20vc2Vzc2lvbi1oYW5kbGVyLXRyYWluaW5nJztcblxuY2xhc3MgT25ueHJ1bnRpbWVUcmFpbmluZ1dlYkFzc2VtYmx5QmFja2VuZCBleHRlbmRzIE9ubnhydW50aW1lV2ViQXNzZW1ibHlCYWNrZW5kIHtcbiAgYXN5bmMgY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcihcbiAgICAgIGNoZWNrcG9pbnRTdGF0ZVVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgdHJhaW5Nb2RlbFVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSxcbiAgICAgIGV2YWxNb2RlbFVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW1pemVyTW9kZWxVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxUcmFpbmluZ1Nlc3Npb25IYW5kbGVyPiB7XG4gICAgY29uc3QgaGFuZGxlciA9IG5ldyBPbm54cnVudGltZVdlYkFzc2VtYmx5VHJhaW5pbmdTZXNzaW9uSGFuZGxlcigpO1xuICAgIGF3YWl0IGhhbmRsZXIuY3JlYXRlVHJhaW5pbmdTZXNzaW9uKFxuICAgICAgICBjaGVja3BvaW50U3RhdGVVcmlPckJ1ZmZlciwgdHJhaW5Nb2RlbFVyaU9yQnVmZmVyLCBldmFsTW9kZWxVcmlPckJ1ZmZlciwgb3B0aW1pemVyTW9kZWxVcmlPckJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2FzbUJhY2tlbmQgPSBuZXcgT25ueHJ1bnRpbWVUcmFpbmluZ1dlYkFzc2VtYmx5QmFja2VuZCgpO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzICovXG4vLyBXZSB1c2UgXCJyZXF1aXJlXCIgaW5zdGVhZCBvZiBcImltcG9ydFwiIGhlcmUgYmVjYXVzZSBpbXBvcnQgc3RhdGVtZW50IG11c3QgYmUgcHV0IGluIHRvcCBsZXZlbC4gT3VyIGN1cnJlbnQgY29kZSBkb2VzXG4vLyBub3QgYWxsb3cgYnVuZGxlciB0byB0cmVlLXNoYWtpbmcgY29kZSBhcyBleHBlY3RlZCBiZWNhdXNlIHNvbWUgY29kZXMgYXJlIHRyZWF0ZWQgYXMgaGF2aW5nIHNpZGUgZWZmZWN0cy5cbi8vIFNvIHdlIGltcG9ydCBjb2RlIGluc2lkZSB0aGUgaWYtY2xhdXNlIHRvIGFsbG93IGJ1bmRsZXIgcmVtb3ZlIHRoZSBjb2RlIHNhZmVseS5cblxuZXhwb3J0ICogZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmltcG9ydCAqIGFzIG9ydCBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuZXhwb3J0IGRlZmF1bHQgb3J0O1xuXG5pbXBvcnQge3JlZ2lzdGVyQmFja2VuZCwgZW52fSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuL3ZlcnNpb24nO1xuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHTCkge1xuICBjb25zdCBvbm54anNCYWNrZW5kID0gcmVxdWlyZSgnLi9iYWNrZW5kLW9ubnhqcycpLm9ubnhqc0JhY2tlbmQ7XG4gIHJlZ2lzdGVyQmFja2VuZCgnd2ViZ2wnLCBvbm54anNCYWNrZW5kLCAtMTApO1xufVxuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNKSB7XG4gIGNvbnN0IHdhc21CYWNrZW5kID0gQlVJTERfREVGUy5ESVNBQkxFX1RSQUlOSU5HID8gcmVxdWlyZSgnLi9iYWNrZW5kLXdhc20taW5mZXJlbmNlJykud2FzbUJhY2tlbmQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vYmFja2VuZC13YXNtLXRyYWluaW5nJykud2FzbUJhY2tlbmQ7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IuZ3B1KSB7XG4gICAgcmVnaXN0ZXJCYWNrZW5kKCd3ZWJncHUnLCB3YXNtQmFja2VuZCwgNSk7XG4gIH1cbiAgcmVnaXN0ZXJCYWNrZW5kKCdjcHUnLCB3YXNtQmFja2VuZCwgMTApO1xuICByZWdpc3RlckJhY2tlbmQoJ3dhc20nLCB3YXNtQmFja2VuZCwgMTApO1xuICBpZiAoQlVJTERfREVGUy5ESVNBQkxFX1RSQUlOSU5HKSB7XG4gICAgcmVnaXN0ZXJCYWNrZW5kKCd4bm5wYWNrJywgd2FzbUJhY2tlbmQsIDkpO1xuICAgIHJlZ2lzdGVyQmFja2VuZCgnd2Vibm4nLCB3YXNtQmFja2VuZCwgOSk7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGVudi52ZXJzaW9ucywgJ3dlYicsIHt2YWx1ZTogdmVyc2lvbiwgZW51bWVyYWJsZTogdHJ1ZX0pO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG4vLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IC9qcy9zY3JpcHRzL3VwZGF0ZS12ZXJzaW9uLnRzXG4vLyBEbyBub3QgbW9kaWZ5IGZpbGUgY29udGVudCBtYW51YWxseS5cblxuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMS4xNy4wJztcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsTUFjTSxVQUNBLDBCQVlPLGlCQTBDQTtBQXJFYjs7QUFjQSxNQUFNLFdBQXFDLG9C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QUUsR0FBRSxLQUFHLENBQUMsTUFBSyxDQUFDLEdBQUUsQ0FBQyxDQUFDLEdBQUUsS0FBRyxDQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFLEdBQUUsS0FBRyxDQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFO0FBQUUsbUJBQVMsR0FBRyxHQUFFO0FBQUMsZ0JBQUksSUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFFLENBQUM7QUFBRSxjQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsTUFBTTtBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUNoVCxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxxQkFBUyxFQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQUksSUFBRSxZQUFVLE9BQU8sSUFBRSxFQUFFLFNBQVMsSUFBRSxLQUFHLElBQUcsRUFBRSxTQUFPO0FBQUcsb0JBQUUsRUFBRSxDQUFDLElBQUU7QUFBRSxxQkFBTztBQUFBLFlBQUM7QUFBQyxxQkFBUyxFQUFFLEdBQUUsR0FBRTtBQUFDLHFCQUFPLEVBQUUsR0FBRSxHQUFFLEdBQUc7QUFBQSxZQUFDO0FBQUMscUJBQVMsRUFBRSxHQUFFLEdBQUU7QUFBQyx1QkFBUyxFQUFFLElBQUc7QUFBQyx1QkFBTyxJQUFFLEtBQUcsS0FBRyxJQUFFLEtBQUcsSUFBRTtBQUFBLGNBQUM7QUFBQyxrQkFBSTtBQUFFLHFCQUFLLElBQUUsRUFBRSxFQUFFLFlBQVksSUFBRSxFQUFFLFlBQVksQ0FBQyxNQUFJLE9BQUssSUFBRSxFQUFFLEVBQUUsU0FBUyxJQUFFLEVBQUUsU0FBUyxDQUFDLE9BQUssSUFBRSxFQUFFLEVBQUUsUUFBUSxJQUFFLEVBQUUsUUFBUSxDQUFDO0FBQUcscUJBQU87QUFBQSxZQUFDO0FBQUMscUJBQVMsRUFBRSxHQUFFO0FBQUMsc0JBQU8sRUFBRSxPQUFPLEdBQUU7QUFBQSxnQkFBQyxLQUFLO0FB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O0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUMscUJBQU87QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLE1BQUk7QUFBQSxZQUFHLEdBQUUsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLGtCQUFFLElBQUUsWUFBVSxJQUFFLFVBQVEsQ0FBQyxDQUFDLEtBQUcsTUFBSSxLQUFHLGFBQVcsSUFBRTtBQUFJLHFCQUFLO0FBQUUsa0JBQUUsSUFBSSxLQUFLLE1BQUksQ0FBQztBQUFFLGdCQUFFLEtBQUcsTUFBSSxDQUFDLElBQUUsRUFBRSxjQUFjO0FBQUUsZ0JBQUUsSUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFLEVBQUUsY0FBYztBQUFFLGdCQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFlBQVk7QUFBRSxnQkFBRSxJQUFFLE1BQUksTUFDbGYsQ0FBQyxJQUFFLEVBQUUsV0FBVztBQUFFLGdCQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFlBQVk7QUFBRSxnQkFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxlQUFlLElBQUU7QUFBSyxnQkFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxVQUFVO0FBQUUsZ0JBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxLQUFHLEVBQUUsUUFBUSxJQUFFLEtBQUssSUFBSSxF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QyxtQkFBSztBQUFFLDJCQUFhLE9BQU8sUUFBUSxPQUFLLFFBQVEsR0FBRyxFQUFFLEdBQUUsS0FBRyxHQUFFLENBQUMsRUFBRSxNQUFNLEtBQUssQ0FBQyxHQUFFLEtBQUcsS0FBSSxRQUFRLE1BQU0sRUFBRSxHQUFFLEtBQUcsR0FBRSxDQUFDO0FBQUEsVUFBRTtBQUFDLFlBQUUsb0NBQWtDO0FBQUcsbUJBQVMsSUFBRztBQUFDLGdCQUFJLElBQUUsRUFBRTtBQUFFLGtCQUFJLEdBQUcsQ0FBQyxHQUFFLEdBQUcsTUFBSSxHQUFHLENBQUM7QUFBQSxVQUFFO0FBQUMsWUFBRSxlQUFhO0FBQzllLGNBQUksSUFBRSxPQUFHLE1BQUksSUFBRSxNQUFJLE1BQUksSUFBRSxPQUFLLE1BQUksSUFBRSxNQUFLLEtBQUcsQ0FBQyxHQUFFLElBQUcsSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksR0FBRyxHQUFFLEtBQUcsQ0FBQyxHQUFFLElBQUcsSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksR0FBRztBQUFFLG1CQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsSUFBRTtBQUFBLFVBQUc7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxnQkFBRztBQUFFLHFCQUFPLEVBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxVQUFDO0FBQUMsY0FBSSxLQUFHLE9BQUc7QUFBQyxnQkFBSSxJQUFFLEdBQUcsQ0FBQyxJQUFFLEdBQUUsSUFBRSxHQUFHLENBQUM7QUFBRSxpQkFBRyxHQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUUsbUJBQU87QUFBQSxVQUFDLEdBQUUsS0FBRyxPQUFHO0FBQUMsZ0JBQUksSUFBRSxHQUFHO0FBQUUsZ0JBQUUsRUFBRTtBQUFFLGVBQUcsQ0FBQztBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUN0VyxtQkFBUyxFQUFFLEdBQUUsR0FBRTtBQUFDLGdCQUFJLElBQUUsVUFBVSxTQUFPLEdBQUUsSUFBRTtBQUFVLG1CQUFPLEdBQUcsTUFBSTtBQUFDLHVCQUFRLElBQUUsR0FBRyxJQUFFLENBQUMsR0FBRSxJQUFFLEtBQUcsR0FBRSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQyxvQkFBSSxJQUFFLEVBQUUsSUFBRSxDQUFDO0FBQUUsbUJBQUcsRUFBRSxJQUFFLE1BQUksQ0FBQyxJQUFFO0FBQUEsY0FBQztBQUFDLHFCQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLFlBQUMsQ0FBQztBQUFBLFVBQUM7QUFDM0osY0FBSSxLQUFHLENBQUMsR0FBRSxLQUFHLENBQUMsR0FBRSxLQUFHLE1BQUk7QUFBQyxnQkFBRyxDQUFDLElBQUc7QUFBQyxrQkFBSSxJQUFFLEVBQUMsTUFBSyxZQUFXLFNBQVEsWUFBVyxNQUFLLEtBQUksS0FBSSxLQUFJLE1BQUssa0JBQWlCLE9BQU0sWUFBVSxPQUFPLGFBQVcsVUFBVSxhQUFXLFVBQVUsVUFBVSxDQUFDLEtBQUcsS0FBSyxRQUFRLEtBQUksR0FBRyxJQUFFLFVBQVMsR0FBRSxNQUFJLGlCQUFnQixHQUFFO0FBQUUsbUJBQUksS0FBSztBQUFHLDJCQUFTLEdBQUcsQ0FBQyxJQUFFLE9BQU8sRUFBRSxDQUFDLElBQUUsRUFBRSxDQUFDLElBQUUsR0FBRyxDQUFDO0FBQUUsa0JBQUksSUFBRSxDQUFDO0FBQUUsbUJBQUksS0FBSztBQUFFLGtCQUFFLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtBQUFFLG1CQUFHO0FBQUEsWUFBQztBQUFDLG1CQUFPO0FBQUEsVUFBRSxHQUFFO0FBQ3RXLG1CQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLElBQUcsR0FBRSxHQUFFLENBQUM7QUFBRSxtQkFBSztBQUFFLG1CQUFLO0FBQUUsZ0JBQUksSUFBRTtBQUFFLGVBQUcsRUFBRSxRQUFRLFNBQVMsR0FBRSxHQUFFO0FBQUMsa0JBQUksSUFBRSxJQUFFO0FBQUUsa0JBQUUsRUFBRSxFQUFFLElBQUUsSUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFO0FBQUUsbUJBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEVBQUU7QUFBRSxtQkFBRyxFQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxXQUFXLENBQUM7QUFBRSxpQkFBRyxFQUFFLEtBQUcsTUFBSSxDQUFDLElBQUU7QUFBRSxtQkFBRyxFQUFFLFNBQU87QUFBQSxZQUFDLENBQUM7QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLGdCQUFHO0FBQUUscUJBQU8sRUFBRSxJQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLGdCQUFJLElBQUUsR0FBRztBQUFFLGNBQUUsRUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFLEVBQUU7QUFBTyxnQkFBSSxJQUFFO0FBQUUsY0FBRSxRQUFRLFNBQVMsR0FBRTtBQUFDLG1CQUFHLEVBQUUsU0FBTztBQUFBLFlBQUMsQ0FBQztBQUFFLGNBQUUsRUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFO0FBQUUsbUJBQU87QUFBQSxVQUFDO0FBQUMsbUJBQVMsR0FBRyxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLElBQUcsR0FBRSxDQUFDLElBQUU7QUFBQSxVQUFFO0FBQUMsbUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDLElBQUU7QUFBQSxVQUFFO0FBQ2pkLG1CQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsSUFBRTtBQUFBLFVBQUU7QUFBQyxjQUFJLEtBQUcsQ0FBQyxNQUFLLENBQUMsR0FBRSxDQUFDLENBQUM7QUFBRSxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxnQkFBRztBQUFFLHFCQUFPLEVBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxtQkFBSztBQUFFLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxxQkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFJO0FBQUMsa0JBQUksSUFBRSxFQUFFLEVBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxJQUFFLEVBQUUsRUFBRSxJQUFFLEtBQUcsTUFBSSxDQUFDO0FBQUUsbUJBQUc7QUFBRSx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQyxvQkFBSSxJQUFFLEVBQUUsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLElBQUUsR0FBRyxDQUFDO0FBQUUsc0JBQUksS0FBRyxPQUFLLE1BQUksTUFBSSxJQUFFLEtBQUcsR0FBRyxHQUFHLEdBQUUsQ0FBQyxDQUFDLEdBQUUsRUFBRSxTQUFPLEtBQUcsRUFBRSxLQUFLLENBQUM7QUFBQSxjQUFDO0FBQUMsbUJBQUc7QUFBQSxZQUFDO0FBQUMsY0FBRSxFQUFFLEtBQUcsTUFBSSxDQUFDLElBQUU7QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFBQyxjQUFJLEtBQUcsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRSxHQUFFLEtBQUcsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRTtBQUFFLG1CQUFTLEdBQUcsR0FBRTtBQUFDLGdCQUFJLElBQUUsTUFBTSxHQUFHLENBQUMsSUFBRSxDQUFDO0FBQUUsZUFBRyxHQUFFLEdBQUUsR0FBRSxFQUFFLE1BQU07QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFDamYsY0FBSSxLQUFH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QVksSUFBRTtBQUFBLFlBQUM7QUFBQyxtQkFBSztBQUFFLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLGdCQUFJLElBQUUsRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUM7QUFBRSxnQkFBRSxFQUFDLElBQUcsRUFBRSxFQUFFLEtBQUcsTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxLQUFHLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxJQUFFLEdBQUcsQ0FBQyxJQUFFLEdBQUU7QUFBRSxnQkFBRSxHQUFHLENBQUM7QUFBRSxnQkFBRTtBQUFBLGNBQUMsTUFBSztBQUFBLGNBQXVCLE1BQUs7QUFBQSxjQUFXLE1BQUs7QUFBQSxjQUFXLE1BQUs7QUFBQSxjQUFLLE1BQUs7QUFBQSxjQUFjLE1BQUs7QUFBQSxjQUFRLE1BQUs7QUFBQSxjQUFXLE1BQUs7QUFBQSxjQUMxZSxNQUFLO0FBQUEsY0FBVyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBVyxPQUFNO0FBQUEsY0FBVyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsY0FBSyxPQUFNO0FBQUEsWUFBSTtBQUFFLHFCQUFRLEtBQUs7QUFBRSxrQkFBRSxFQUFFLFFBQVEsSUFBSSxPQUFPLEdBQUUsR0FBRyxHQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQUUsZ0JBQUksS0FBRywyREFBMkQsTUFBTSxHQUFHLEdBQUUsS0FBRyx3RkFBd0YsTUFBTSxHQUFHO0FBQUUsZ0JBQUU7QUFBQSxjQUFDLE1BQUssT0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLFVBQVUsR0FBRSxDQUFDO0FBQUEsY0FDcmYsTUFBSyxPQUFHLEdBQUcsRUFBRSxFQUFFO0FBQUEsY0FBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxVQUFVLEdBQUUsQ0FBQztBQUFBLGNBQUUsTUFBSyxPQUFHLEdBQUcsRUFBRSxFQUFFO0FBQUEsY0FBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEtBQUcsUUFBTSxNQUFJLEdBQUUsQ0FBQztBQUFBLGNBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLENBQUM7QUFBQSxjQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxHQUFFLEdBQUc7QUFBQSxjQUFFLE1BQUssT0FBRyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDO0FBQUEsY0FBRSxNQUFLLE9BQUcsRUFBRSxDQUFDO0FBQUEsY0FBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFBLGNBQUUsTUFBSyxPQUFHO0FBQUMsb0JBQUUsRUFBRTtBQUFHLHFCQUFHLElBQUUsSUFBRSxLQUFHLEtBQUcsTUFBSSxLQUFHO0FBQUksdUJBQU8sRUFBRSxHQUFFLENBQUM7QUFBQSxjQUFDO0FBQUEsY0FBRSxNQUFLLE9BQUc7QUFBQyx5QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUcsRUFBRSxLQUFHLEdBQUUsTUFBSSxFQUFFLEVBQUUsS0FBRyxJQUFJLElBQUUsS0FBRyxJQUFJLEdBQUc7QUFBRTtBQUFDLHVCQUFPLEVBQUUsRUFBRSxLQUFHLEdBQUUsQ0FBQztBQUFBLGNBQUM7QUFBQSxjQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsS0FBRyxHQUFFLENBQUM7QUFBQSxjQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDO0FBQUEsY0FBRSxNQUFLLE1BQUk7QUFBQSxjQUFLLE1BQUssT0FBRyxLQUFHLEVBQUUsTUFBSSxLQUFHLEVBQUUsS0FBRyxPQUFLO0FBQUEsY0FBSyxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFBLGNBQUUsTUFBSyxNQUFJO0FBQUEsY0FBSyxNQUFLLE9BQUcsRUFBRSxNQUFJO0FBQUEsY0FBRSxNQUFLLE9BQUcsRUFBRSxLQUFLLE9BQU8sRUFBRSxLQUN4ZixJQUFFLEVBQUUsTUFBSSxDQUFDLEdBQUUsQ0FBQztBQUFBLGNBQUUsTUFBSyxPQUFHO0FBQUMsb0JBQUksSUFBRSxLQUFLLE9BQU8sRUFBRSxLQUFHLEtBQUcsRUFBRSxLQUFHLEtBQUcsS0FBRyxDQUFDO0FBQUUsc0JBQUksRUFBRSxLQUFHLE1BQUksRUFBRSxLQUFHLEtBQUcsS0FBRztBQUFJLG9CQUFHO0FBQUUsd0JBQUksTUFBSSxLQUFHLEVBQUUsS0FBRyxNQUFJLEVBQUUsTUFBSSxHQUFFLEtBQUcsS0FBRyxLQUFHLEtBQUcsRUFBRSxFQUFFLEVBQUUsTUFBSSxJQUFFO0FBQUEscUJBQVE7QUFBQyxzQkFBRTtBQUFHLHNCQUFJLEtBQUcsRUFBRSxLQUFHLElBQUUsRUFBRSxLQUFHLEtBQUc7QUFBRSxtQkFBQyxLQUFHLEtBQUcsS0FBRyxLQUFHLEVBQUUsRUFBRSxLQUFHLE1BQUksQ0FBQyxNQUFJO0FBQUEsZ0JBQUc7QUFBQyx1QkFBTyxFQUFFLEdBQUUsQ0FBQztBQUFBLGNBQUM7QUFBQSxjQUFFLE1BQUssT0FBRyxFQUFFO0FBQUEsY0FBRyxNQUFLLE9BQUcsRUFBRSxLQUFLLE9BQU8sRUFBRSxLQUFHLEtB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QUMsS0FBRyxNQUFJLEtBQUcsYUFBVyxJQUFFO0FBQUkscUJBQUs7QUFBRSxrQkFBRSxJQUFJLEtBQUssTUFBSSxDQUFDO0FBQUUsZ0JBQUUsRUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFLEVBQUUsY0FBYztBQUFFLGdCQUFFLEVBQUUsSUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFLEVBQUUsY0FBYztBQUFFLGdCQUFFLEVBQUUsSUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFLEVBQUUsWUFBWTtBQUFFLGdCQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsV0FBVztBQUFFLGdCQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsWUFBWTtBQUFFLGdCQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsZUFBZSxJQUFFO0FBQUssZ0JBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxVQUFVO0FBQUUsbUJBQUcsRUFBRSxRQUFRLElBQUUsS0FBSyxJQUFJLEVBQUUsZUFBZSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDLEtBQUcsUUFBTTtBQUFFLGdCQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsa0JBQUUsSUFDcGYsWUFBVSxJQUFFLFVBQVEsQ0FBQyxDQUFDLEtBQUcsTUFBSSxLQUFHLGFBQVcsSUFBRTtBQUFJLHFCQUFLO0FBQUUsa0JBQUUsSUFBSSxLQUFLLE1BQUksQ0FBQztBQUFFLGdCQUFFLEVBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxnQkFBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxnQkFBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFNBQVM7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFFBQVE7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFNBQVM7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFlBQVksSUFBRTtBQUFLLGdCQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsT0FBTztBQUFFLG1CQUFHLEVBQUUsRUFBRSxZQUFZLENBQUMsSUFBRSxLQUFHLElBQUksRUFBRSxTQUFTLENBQUMsSUFBRSxFQUFFLFFBQVEsSUFBRSxJQUFFO0FBQUUsZ0JBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUU7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLEtBQUcsRUFBRSxrQkFBa0I7QUFBRyxrQkFBRyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDLEVBQUcsa0JBQWtCO0FBQUUsa0JBQUksSUFBRyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDLEVBQUcsa0JBQWtCO0FBQ3pnQixtQkFBRyxLQUFHLEtBQUcsRUFBRSxrQkFBa0IsS0FBRyxLQUFLLElBQUksR0FBRSxDQUFDLEtBQUc7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRTtBQUFBLFlBQUM7QUFBQSxZQUFFLEdBQUUsU0FBUyxHQUFFO0FBQUMscUJBQUs7QUFBRSxrQkFBSSxJQUFFLElBQUksS0FBSyxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLE1BQUssRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLEVBQUUsRUFBRSxJQUFFLEtBQUcsTUFBSSxDQUFDLEdBQUUsRUFBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxFQUFFLEVBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRSxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUUsRUFBRSxrQkFBa0IsR0FBRSxJQUFHLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUMsRUFBRyxrQkFBa0IsR0FBRSxJQUFHLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUMsRUFBRyxrQkFBa0IsR0FBRSxJQUFFLEtBQUssSUFBSSxHQUFFLENBQUM7QUFBRSxrQkFBRSxJQUFFLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsT0FBTyxLQUFHLEtBQUcsS0FBRyxDQUFDLElBQUUsSUFBRSxNQUFJLEtBQUcsT0FBSyxJQUFFLEtBQUssSUFBSSxHQUFFLENBQUMsR0FBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLElBQUUsUUFBTSxJQUFFLElBQUUsSUFBRSxLQUFHLEVBQUU7QUFBRyxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUNuZixDQUFDLElBQUUsRUFBRSxPQUFPO0FBQUUsbUJBQUcsRUFBRSxFQUFFLFlBQVksQ0FBQyxJQUFFLEtBQUcsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFFLEVBQUUsUUFBUSxJQUFFLElBQUU7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRTtBQUFFLGdCQUFFLEVBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxnQkFBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxnQkFBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFNBQVM7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFFBQVE7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFNBQVM7QUFBRSxnQkFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFFBQVE7QUFBRSxrQkFBRSxFQUFFLFFBQVEsSUFBRTtBQUFJLHFCQUFPLElBQUksSUFBRSxHQUFFLEtB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QUEsSUFBQTtBQUFBO0FBUUE7QUFDQTtBQUdBOzs7QUNOTyxNQUFNQyxXQUFVOzs7QURJdkIsTUFBTyxjQUFRO0FBS2YsTUFBSSxPQUEyQjtBQUM3QixVQUFNLGdCQUFnQixLQUE0QjtBQUNsRCxvQkFBZ0IsU0FBUyxlQUFlLEdBQUc7QUFBQSxFQUM3QztBQUVBLE1BQUksTUFBMEI7QUFDNUIsVUFBTUMsZUFBYyxRQUE4QixLQUFvQyxjQUNwQyw0RUFBbUM7QUFDckYsUUFBSSxPQUFpRjtBQUNuRixzQkFBZ0IsVUFBVUEsY0FBYSxDQUFDO0FBQUEsSUFDMUM7QUFDQSxvQkFBZ0IsT0FBT0EsY0FBYSxFQUFFO0FBQ3RDLG9CQUFnQixRQUFRQSxjQUFhLEVBQUU7QUFDdkMsUUFBSSxPQUE2QjtBQUMvQixzQkFBZ0IsV0FBV0EsY0FBYSxDQUFDO0FBQ3pDLHNCQUFnQixTQUFTQSxjQUFhLENBQUM7QUFBQSxJQUN6QztBQUFBLEVBQ0Y7QUFFQSxTQUFPLGVBQWVDLEtBQUksVUFBVSxPQUFPLEVBQUMsT0FBT0MsVUFBUyxZQUFZLEtBQUksQ0FBQzsiLAogICJuYW1lcyI6IFsiaSIsICJlbnYiLCAiVGVuc29yIiwgIlRlbnNvciIsICJJbmZlcmVuY2VTZXNzaW9uIiwgIlRlbnNvciIsICJUcmFpbmluZ1Nlc3Npb24iLCAiSW5mZXJlbmNlU2Vzc2lvbiIsICJUZW5zb3IiLCAiVHJhaW5pbmdTZXNzaW9uIiwgImVudiIsICJqb2luIiwgImNwdXMiLCAid2FzbSIsICJ3YXNtIiwgIndhc20iLCAid2FzbSIsICJlbnYiLCAidGVuc29yIiwgImVycm9yQ29kZSIsICJpIiwgImluaXRpYWxpemluZyIsICJpbml0aWFsaXplZCIsICJhYm9ydGVkIiwgImNyZWF0ZVNlc3Npb25BbGxvY2F0ZSIsICJjcmVhdGVTZXNzaW9uRmluYWxpemUiLCAiY3JlYXRlU2Vzc2lvbiIsICJyZWxlYXNlU2Vzc2lvbiIsICJydW4iLCAiZW5kUHJvZmlsaW5nIiwgImlzT3J0RW52SW5pdGlhbGl6ZWQiLCAiZW52IiwgInJlYWRGaWxlIiwgIlRlbnNvciIsICJjcmVhdGVTZXNzaW9uQWxsb2NhdGUiLCAiaXNPcnRFbnZJbml0aWFsaXplZCIsICJlbnYiLCAicmVhZEZpbGUiLCAiY3JlYXRlU2Vzc2lvbiIsICJjcmVhdGVTZXNzaW9uRmluYWxpemUiLCAicmVsZWFzZVNlc3Npb24iLCAicnVuIiwgImVuZFByb2ZpbGluZyIsICJlbnYiLCAid2FzbSIsICJpIiwgImVudiIsICJJbmZlcmVuY2VTZXNzaW9uIiwgIlRlbnNvciIsICJUcmFpbmluZ1Nlc3Npb24iLCAiZW52IiwgInZlcnNpb24iLCAid2FzbUJhY2tlbmQiLCAiZW52IiwgInZlcnNpb24iXQp9Cg==
